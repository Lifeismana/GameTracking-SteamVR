import "networkbasetypes.proto";

option optimize_for = SPEED;
option cc_generic_services = false;

enum ESteamToursClientMessages {
	CM_SpawnPhysicsProp = 501;
	CM_SpawnPropTool = 502;
	CM_PickupObject = 503;
	CM_ReleaseObject = 504;
	CM_SetModel = 505;
	CM_SetSequence = 506;
	CM_SetEntityColor = 507;
	CM_NotifyLoadingDestination = 508;
	CM_SpawnWearables = 509;
	CM_AttachObjectToAvatar = 510;
	CM_DetachObjectFromAvatar = 511;
	CM_StartDetectorQuests = 512;
	CM_DetectorQuestUnlockedItems = 513;
	CM_SetControllerTipTransform = 514;
	CM_SetPlayerPersonalSpace = 515;
	CM_ContentBrowserToggled = 516;
	CM_SetSteamVRBackground = 517;
	CM_SetSteamVRController = 518;
	CM_ResetAnchor = 519;
	CM_SpawnGameTrophy = 520;
	CM_SpawnPanel = 521;
	CM_DeleteObject = 522;
}

message CClientMsg_SpawnPhysicsProp {
	optional string itemdefid = 1;
	optional uint64 publishedfileid = 2;
	optional float scale = 3 [default = 1];
	optional uint32 handid = 4;
	optional fixed32 color = 5;
}

message CClientMsg_SpawnPropTool {
	optional string itemdefid = 1;
	optional uint64 publishedfileid = 2;
	optional string script = 3;
	optional float scale = 4 [default = 1];
	optional uint32 handid = 5;
	optional fixed32 color = 6;
}

message CClientMsg_SpawnWearables {
	message WearableConfig {
		optional string itemdefid = 1;
		optional uint64 publishedfileid = 2;
		optional int32 wearableid = 3;
		optional float scale = 4 [default = 1];
		optional .CMsgVector position = 5;
		optional .CMsgQAngle angles = 6;
		optional fixed32 color = 7;
	}

	repeated .CClientMsg_SpawnWearables.WearableConfig wearables = 1;
}

message CClientMsg_SpawnGameTrophy {
	optional uint32 appid = 1;
	optional string itemdefid = 2;
	optional float scale = 3 [default = 1];
	optional uint32 handid = 4;
	optional uint32 badge_level = 5;
	optional uint32 badge_border = 6;
	optional uint32 achievement_level = 7;
}

message CClientMsg_SpawnPanel {
	optional uint32 steamvr_panel_type = 1;
	optional uint32 handid = 2;
	optional uint64 publishedfileid = 3;
	optional float width = 4;
	optional float height = 5;
}

message CClientMsg_PickupObject {
	optional uint32 ent_ehandle = 1;
	optional uint32 handid = 2;
	optional uint32 tick = 3;
	optional .CMsgVector hand_pos = 4;
	optional .CMsgQAngle hand_ang = 5;
	optional .CMsgVector obj_pos = 6;
}

message CClientMsg_ReleaseObject {
	optional uint32 ent_ehandle = 1;
	optional uint32 handid = 2;
	optional uint32 tick = 3;
	optional .CMsgVector position = 4;
	optional .CMsgQAngle angles = 5;
	optional .CMsgVector velocity = 6;
}

message CClientMsg_AttachObjectToAvatar {
	optional uint32 object_ehandle = 1;
	optional .CMsgVector position = 2;
	optional .CMsgQAngle angles = 3;
	optional float scale = 4;
	optional int32 wearableid = 5;
}

message CClientMsg_DetachObjectFromAvatar {
	optional uint32 object_ehandle = 1;
}

message CClientMsg_SetModel {
	optional uint32 ent_ehandle = 1;
	optional string model = 2;
}

message CClientMsg_SetSequence {
	optional uint32 ent_ehandle = 1;
	optional float cycle = 2;
	optional string sequence = 3;
	optional float finger00 = 4;
	optional float finger01 = 5;
	optional float finger02 = 6;
	optional float finger03 = 7;
	optional float finger04 = 8;
}

message CClientMsg_SetEntityColor {
	optional uint32 ent_ehandle = 1;
	optional fixed32 color = 2;
}

message CClientMsg_NotifyLoadingDestination {
	optional string map_name = 1;
	optional string addon_name = 2;
	optional string display_name = 3;
}

message CClientMsg_StartDetectorQuests {
	repeated string questids = 1;
}

message CClientMsg_DetectorQuestUnlockedItems {
	optional string questid = 1;
	repeated string itemdefids = 2;
}

message CClientMsg_SetControllerTipTransform {
	optional int32 handid = 1;
	optional .CMsgVector local_tip_origin = 2;
	optional .CMsgQAngle local_tip_angles = 3;
}

message CClientMsg_SetPlayerPersonalSpace {
	optional float radius = 1;
}

message CClientMsg_ContentBrowserToggled {
	optional bool is_browser_visible = 1;
}

message CClientMsg_SetSteamVRBackground {
	optional string itemdefid = 1;
	optional uint64 publishedfileid = 2;
}

message CClientMsg_SetSteamVRController {
	optional string itemdefid = 1;
	optional uint64 publishedfileid = 2;
}

message CClientMsg_ResetAnchor {
}

message CClientMsg_DeleteObject {
	optional uint32 ent_ehandle = 1;
}

