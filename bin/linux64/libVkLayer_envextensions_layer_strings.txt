__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
layer_factory::PreCallApiFunction(char const*)
layer_factory::PostCallApiFunction(char const*)
InstanceExtensions::InstanceInfo::~InstanceInfo()
operator delete(void*)
InstanceExtensions::InstanceInfo::~InstanceInfo()
std::vector<char const*, std::allocator<char const*>>::~vector()
std::vector<char const*, std::allocator<char const*>>::~vector()
DeviceExtensions::DeviceInfo::~DeviceInfo()
DeviceExtensions::DeviceInfo::~DeviceInfo()
std::vector<layer_factory*, std::allocator<layer_factory*>>::~vector()
std::vector<layer_factory*, std::allocator<layer_factory*>>::~vector()
std::unordered_map<void*, device_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, device_layer_data*>>>::~unordered_map()
memset
std::unordered_map<void*, device_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, device_layer_data*>>>::~unordered_map()
std::unordered_map<void*, instance_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, instance_layer_data*>>>::~unordered_map()
std::unordered_map<void*, instance_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, instance_layer_data*>>>::~unordered_map()
vulkan_layer_factory::EnumerateInstanceLayerProperties(unsigned int*, VkLayerProperties*)
vulkan_layer_factory::EnumerateDeviceLayerProperties(VkPhysicalDevice_T*, unsigned int*, VkLayerProperties*)
vulkan_layer_factory::EnumerateInstanceExtensionProperties(char const*, unsigned int*, VkExtensionProperties*)
strcmp
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_create(unsigned long&, unsigned long)
memcpy
std::__throw_logic_error(char const*)
__stack_chk_fail
layer_factory::PreCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
layer_factory::PostCallGetImageMemoryRequirements2KHR(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PreCallGetBufferMemoryRequirements2KHR(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PostCallGetBufferMemoryRequirements2KHR(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PreCallGetImageSparseMemoryRequirements2KHR(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
layer_factory::PostCallGetImageSparseMemoryRequirements2KHR(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
layer_factory::PreCallCreateSamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
layer_factory::PostCallCreateSamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
layer_factory::PreCallDestroySamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroySamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PreCallBindBufferMemory2KHR(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
layer_factory::PostCallBindBufferMemory2KHR(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
layer_factory::PreCallBindImageMemory2KHR(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
layer_factory::PostCallBindImageMemory2KHR(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
layer_factory::PreCallGetDescriptorSetLayoutSupportKHR(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
layer_factory::PostCallGetDescriptorSetLayoutSupportKHR(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
layer_factory::PreCallCmdDrawIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PostCallCmdDrawIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallCmdDrawIndexedIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PostCallCmdDrawIndexedIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallCreateDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT_T**)
layer_factory::PostCallCreateDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT_T**)
layer_factory::PreCallDestroyDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackEXT_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackEXT_T*, VkAllocationCallbacks const*)
layer_factory::PreCallDebugReportMessageEXT(VkInstance_T*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*)
layer_factory::PostCallDebugReportMessageEXT(VkInstance_T*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*)
layer_factory::PreCallDebugMarkerSetObjectTagEXT(VkDevice_T*, VkDebugMarkerObjectTagInfoEXT const*)
layer_factory::PostCallDebugMarkerSetObjectTagEXT(VkDevice_T*, VkDebugMarkerObjectTagInfoEXT const*)
layer_factory::PreCallDebugMarkerSetObjectNameEXT(VkDevice_T*, VkDebugMarkerObjectNameInfoEXT const*)
layer_factory::PostCallDebugMarkerSetObjectNameEXT(VkDevice_T*, VkDebugMarkerObjectNameInfoEXT const*)
layer_factory::PreCallCmdDebugMarkerBeginEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
layer_factory::PostCallCmdDebugMarkerBeginEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
layer_factory::PreCallCmdDebugMarkerEndEXT(VkCommandBuffer_T*)
layer_factory::PostCallCmdDebugMarkerEndEXT(VkCommandBuffer_T*)
layer_factory::PostCallCmdProcessCommandsNVX(VkCommandBuffer_T*, VkCmdProcessCommandsInfoNVX const*)
layer_factory::PreCallCmdReserveSpaceForCommandsNVX(VkCommandBuffer_T*, VkCmdReserveSpaceForCommandsInfoNVX const*)
layer_factory::PostCallCmdReserveSpaceForCommandsNVX(VkCommandBuffer_T*, VkCmdReserveSpaceForCommandsInfoNVX const*)
layer_factory::PreCallCreateIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutCreateInfoNVX const*, VkAllocationCallbacks const*, VkIndirectCommandsLayoutNVX_T**)
layer_factory::PostCallCreateIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutCreateInfoNVX const*, VkAllocationCallbacks const*, VkIndirectCommandsLayoutNVX_T**)
layer_factory::PreCallDestroyIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutNVX_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutNVX_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateObjectTableNVX(VkDevice_T*, VkObjectTableCreateInfoNVX const*, VkAllocationCallbacks const*, VkObjectTableNVX_T**)
layer_factory::PostCallCreateObjectTableNVX(VkDevice_T*, VkObjectTableCreateInfoNVX const*, VkAllocationCallbacks const*, VkObjectTableNVX_T**)
layer_factory::PreCallDestroyObjectTableNVX(VkDevice_T*, VkObjectTableNVX_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyObjectTableNVX(VkDevice_T*, VkObjectTableNVX_T*, VkAllocationCallbacks const*)
layer_factory::PreCallRegisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectTableEntryNVX const* const*, unsigned int const*)
layer_factory::PostCallRegisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectTableEntryNVX const* const*, unsigned int const*)
layer_factory::PreCallUnregisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectEntryTypeNVX const*, unsigned int const*)
layer_factory::PostCallUnregisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectEntryTypeNVX const*, unsigned int const*)
layer_factory::PreCallGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice_T*, VkDeviceGeneratedCommandsFeaturesNVX*, VkDeviceGeneratedCommandsLimitsNVX*)
layer_factory::PostCallGetShaderInfoAMD(VkDevice_T*, VkPipeline_T*, VkShaderStageFlagBits, VkShaderInfoTypeAMD, unsigned long*, void*)
layer_factory::PreCallGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, unsigned int, VkExternalImageFormatPropertiesNV*)
layer_factory::PostCallGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, unsigned int, VkExternalImageFormatPropertiesNV*)
layer_factory::PreCallCmdBeginConditionalRenderingEXT(VkCommandBuffer_T*, VkConditionalRenderingBeginInfoEXT const*)
layer_factory::PostCallCmdBeginConditionalRenderingEXT(VkCommandBuffer_T*, VkConditionalRenderingBeginInfoEXT const*)
layer_factory::PreCallCmdEndConditionalRenderingEXT(VkCommandBuffer_T*)
layer_factory::PostCallCmdEndConditionalRenderingEXT(VkCommandBuffer_T*)
layer_factory::PreCallCmdProcessCommandsNVX(VkCommandBuffer_T*, VkCmdProcessCommandsInfoNVX const*)
layer_factory::PostCallCmdDrawIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallCmdDrawIndexedIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PostCallCmdDrawIndexedIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallGetShaderInfoAMD(VkDevice_T*, VkPipeline_T*, VkShaderStageFlagBits, VkShaderInfoTypeAMD, unsigned long*, void*)
layer_factory::PostCallCmdDebugMarkerInsertEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
layer_factory::PreCallCmdDrawIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallCmdDebugMarkerInsertEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
layer_factory::PostCallGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice_T*, VkDeviceGeneratedCommandsFeaturesNVX*, VkDeviceGeneratedCommandsLimitsNVX*)
layer_factory::PreCallCmdSetViewportWScalingNV(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewportWScalingNV const*)
layer_factory::PostCallCmdSetViewportWScalingNV(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewportWScalingNV const*)
layer_factory::PreCallReleaseDisplayEXT(VkPhysicalDevice_T*, VkDisplayKHR_T*)
layer_factory::PostCallReleaseDisplayEXT(VkPhysicalDevice_T*, VkDisplayKHR_T*)
layer_factory::PreCallAcquireXlibDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, VkDisplayKHR_T*)
layer_factory::PostCallAcquireXlibDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, VkDisplayKHR_T*)
layer_factory::PreCallGetRandROutputDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, unsigned long, VkDisplayKHR_T**)
layer_factory::PostCallGetRandROutputDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, unsigned long, VkDisplayKHR_T**)
layer_factory::PreCallGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilities2EXT*)
layer_factory::PostCallGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilities2EXT*)
layer_factory::PreCallDisplayPowerControlEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayPowerInfoEXT const*)
layer_factory::PostCallDisplayPowerControlEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayPowerInfoEXT const*)
layer_factory::PreCallRegisterDeviceEventEXT(VkDevice_T*, VkDeviceEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
layer_factory::PostCallRegisterDeviceEventEXT(VkDevice_T*, VkDeviceEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
layer_factory::PreCallRegisterDisplayEventEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
layer_factory::PostCallRegisterDisplayEventEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
layer_factory::PreCallGetSwapchainCounterEXT(VkDevice_T*, VkSwapchainKHR_T*, VkSurfaceCounterFlagBitsEXT, unsigned long*)
layer_factory::PostCallGetSwapchainCounterEXT(VkDevice_T*, VkSwapchainKHR_T*, VkSurfaceCounterFlagBitsEXT, unsigned long*)
layer_factory::PreCallGetRefreshCycleDurationGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, VkRefreshCycleDurationGOOGLE*)
layer_factory::PostCallGetRefreshCycleDurationGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, VkRefreshCycleDurationGOOGLE*)
layer_factory::PreCallGetPastPresentationTimingGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkPastPresentationTimingGOOGLE*)
layer_factory::PostCallGetPastPresentationTimingGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkPastPresentationTimingGOOGLE*)
layer_factory::PreCallCmdSetDiscardRectangleEXT(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
layer_factory::PostCallCmdSetDiscardRectangleEXT(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
layer_factory::PreCallSetHdrMetadataEXT(VkDevice_T*, unsigned int, VkSwapchainKHR_T* const*, VkHdrMetadataEXT const*)
layer_factory::PostCallSetHdrMetadataEXT(VkDevice_T*, unsigned int, VkSwapchainKHR_T* const*, VkHdrMetadataEXT const*)
layer_factory::PreCallSetDebugUtilsObjectNameEXT(VkDevice_T*, VkDebugUtilsObjectNameInfoEXT const*)
layer_factory::PostCallSetDebugUtilsObjectNameEXT(VkDevice_T*, VkDebugUtilsObjectNameInfoEXT const*)
layer_factory::PreCallSetDebugUtilsObjectTagEXT(VkDevice_T*, VkDebugUtilsObjectTagInfoEXT const*)
layer_factory::PostCallSetDebugUtilsObjectTagEXT(VkDevice_T*, VkDebugUtilsObjectTagInfoEXT const*)
layer_factory::PreCallQueueBeginDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallQueueBeginDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PreCallQueueEndDebugUtilsLabelEXT(VkQueue_T*)
layer_factory::PostCallQueueEndDebugUtilsLabelEXT(VkQueue_T*)
layer_factory::PreCallQueueInsertDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallQueueInsertDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PreCallCmdBeginDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallCmdBeginDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PreCallCmdEndDebugUtilsLabelEXT(VkCommandBuffer_T*)
layer_factory::PostCallCmdEndDebugUtilsLabelEXT(VkCommandBuffer_T*)
layer_factory::PostCallSubmitDebugUtilsMessageEXT(VkInstance_T*, VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*)
layer_factory::PreCallCmdSetSampleLocationsEXT(VkCommandBuffer_T*, VkSampleLocationsInfoEXT const*)
layer_factory::PostCallCmdSetSampleLocationsEXT(VkCommandBuffer_T*, VkSampleLocationsInfoEXT const*)
layer_factory::PreCallGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice_T*, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*)
layer_factory::PostCallGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice_T*, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*)
layer_factory::PreCallCreateValidationCacheEXT(VkDevice_T*, VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT_T**)
layer_factory::PostCallCreateValidationCacheEXT(VkDevice_T*, VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT_T**)
layer_factory::PreCallDestroyValidationCacheEXT(VkDevice_T*, VkValidationCacheEXT_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyValidationCacheEXT(VkDevice_T*, VkValidationCacheEXT_T*, VkAllocationCallbacks const*)
layer_factory::PreCallMergeValidationCachesEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned int, VkValidationCacheEXT_T* const*)
layer_factory::PostCallMergeValidationCachesEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned int, VkValidationCacheEXT_T* const*)
layer_factory::PreCallGetValidationCacheDataEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned long*, void*)
layer_factory::PostCallGetValidationCacheDataEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned long*, void*)
layer_factory::PreCallGetMemoryHostPointerPropertiesEXT(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, void const*, VkMemoryHostPointerPropertiesEXT*)
layer_factory::PostCallGetMemoryHostPointerPropertiesEXT(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, void const*, VkMemoryHostPointerPropertiesEXT*)
layer_factory::PreCallCmdWriteBufferMarkerAMD(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkBuffer_T*, unsigned long, unsigned int)
layer_factory::PostCallCreateDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugUtilsMessengerEXT_T**)
layer_factory::PreCallDestroyDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerEXT_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerEXT_T*, VkAllocationCallbacks const*)
layer_factory::PreCallSubmitDebugUtilsMessageEXT(VkInstance_T*, VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*)
layer_factory::PostCallCmdInsertDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PreCallCreateDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugUtilsMessengerEXT_T**)
layer_factory::PreCallCmdInsertDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallCmdWriteBufferMarkerAMD(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkBuffer_T*, unsigned long, unsigned int)
layer_factory::PreCallCmdSetCheckpointNV(VkCommandBuffer_T*, void const*)
layer_factory::PostCallCmdSetCheckpointNV(VkCommandBuffer_T*, void const*)
layer_factory::PreCallGetQueueCheckpointDataNV(VkQueue_T*, unsigned int*, VkCheckpointDataNV*)
layer_factory::PostCallGetQueueCheckpointDataNV(VkQueue_T*, unsigned int*, VkCheckpointDataNV*)
layer_factory::PostCallCmdSetStencilWriteMask(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PreCallCmdSetStencilReference(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PostCallCmdSetStencilReference(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PreCallCmdBindDescriptorSets(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkDescriptorSet_T* const*, unsigned int, unsigned int const*)
layer_factory::PostCallCmdBindDescriptorSets(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkDescriptorSet_T* const*, unsigned int, unsigned int const*)
layer_factory::PreCallCmdBindIndexBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkIndexType)
layer_factory::PostCallCmdBindIndexBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkIndexType)
layer_factory::PreCallCmdBindVertexBuffers(VkCommandBuffer_T*, unsigned int, unsigned int, VkBuffer_T* const*, unsigned long const*)
layer_factory::PostCallCmdBindVertexBuffers(VkCommandBuffer_T*, unsigned int, unsigned int, VkBuffer_T* const*, unsigned long const*)
layer_factory::PreCallCmdDraw(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PostCallCmdDraw(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PreCallCmdDrawIndexed(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, int, unsigned int)
layer_factory::PostCallCmdDrawIndexed(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, int, unsigned int)
layer_factory::PreCallCmdDrawIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PostCallCmdDrawIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallCmdDrawIndexedIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PostCallCmdDrawIndexedIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallCmdDispatch(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int)
layer_factory::PostCallCmdDispatch(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int)
layer_factory::PreCallCmdDispatchIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long)
layer_factory::PostCallCmdDispatchIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long)
layer_factory::PreCallCmdCopyBuffer(VkCommandBuffer_T*, VkBuffer_T*, VkBuffer_T*, unsigned int, VkBufferCopy const*)
layer_factory::PostCallCmdCopyBuffer(VkCommandBuffer_T*, VkBuffer_T*, VkBuffer_T*, unsigned int, VkBufferCopy const*)
layer_factory::PreCallCmdCopyImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageCopy const*)
layer_factory::PostCallCmdCopyImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageCopy const*)
layer_factory::PreCallCmdBlitImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageBlit const*, VkFilter)
layer_factory::PostCallCmdBlitImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageBlit const*, VkFilter)
layer_factory::PreCallCmdCopyBufferToImage(VkCommandBuffer_T*, VkBuffer_T*, VkImage_T*, VkImageLayout, unsigned int, VkBufferImageCopy const*)
layer_factory::PostCallCmdCopyBufferToImage(VkCommandBuffer_T*, VkBuffer_T*, VkImage_T*, VkImageLayout, unsigned int, VkBufferImageCopy const*)
layer_factory::PreCallCmdCopyImageToBuffer(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkBuffer_T*, unsigned int, VkBufferImageCopy const*)
layer_factory::PostCallCmdCopyImageToBuffer(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkBuffer_T*, unsigned int, VkBufferImageCopy const*)
layer_factory::PreCallCmdUpdateBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, void const*)
layer_factory::PostCallCmdUpdateBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, void const*)
layer_factory::PreCallCmdFillBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
layer_factory::PostCallCmdFillBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
layer_factory::PreCallCmdClearColorImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearColorValue const*, unsigned int, VkImageSubresourceRange const*)
layer_factory::PostCallCmdClearColorImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearColorValue const*, unsigned int, VkImageSubresourceRange const*)
layer_factory::PreCallCmdClearDepthStencilImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearDepthStencilValue const*, unsigned int, VkImageSubresourceRange const*)
layer_factory::PostCallCmdClearDepthStencilImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearDepthStencilValue const*, unsigned int, VkImageSubresourceRange const*)
layer_factory::PreCallCmdClearAttachments(VkCommandBuffer_T*, unsigned int, VkClearAttachment const*, unsigned int, VkClearRect const*)
layer_factory::PostCallCmdClearAttachments(VkCommandBuffer_T*, unsigned int, VkClearAttachment const*, unsigned int, VkClearRect const*)
layer_factory::PreCallCmdResolveImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageResolve const*)
layer_factory::PostCallCmdResolveImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageResolve const*)
layer_factory::PreCallCmdSetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
layer_factory::PostCallCmdSetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
layer_factory::PreCallCmdResetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
layer_factory::PostCallCmdResetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
layer_factory::PreCallCmdWaitEvents(VkCommandBuffer_T*, unsigned int, VkEvent_T* const*, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
layer_factory::PostCallCmdWaitEvents(VkCommandBuffer_T*, unsigned int, VkEvent_T* const*, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
layer_factory::PreCallCmdPipelineBarrier(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
layer_factory::PostCallCmdPipelineBarrier(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
layer_factory::PreCallCmdBeginQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
layer_factory::PostCallCmdBeginQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
layer_factory::PreCallCmdEndQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int)
layer_factory::PostCallCmdEndQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int)
layer_factory::PreCallCmdResetQueryPool(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
layer_factory::PostCallCmdResetQueryPool(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
layer_factory::PreCallCmdWriteTimestamp(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkQueryPool_T*, unsigned int)
layer_factory::PostCallCmdWriteTimestamp(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkQueryPool_T*, unsigned int)
layer_factory::PreCallCmdCopyQueryPoolResults(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
layer_factory::PostCallCmdCopyQueryPoolResults(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
layer_factory::PreCallCmdPushConstants(VkCommandBuffer_T*, VkPipelineLayout_T*, unsigned int, unsigned int, unsigned int, void const*)
layer_factory::PostCallCmdPushConstants(VkCommandBuffer_T*, VkPipelineLayout_T*, unsigned int, unsigned int, unsigned int, void const*)
layer_factory::PreCallCmdBeginRenderPass(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassContents)
layer_factory::PostCallCmdBeginRenderPass(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassContents)
layer_factory::PreCallCmdNextSubpass(VkCommandBuffer_T*, VkSubpassContents)
layer_factory::PostCallCmdNextSubpass(VkCommandBuffer_T*, VkSubpassContents)
layer_factory::PreCallCmdEndRenderPass(VkCommandBuffer_T*)
layer_factory::PostCallCmdEndRenderPass(VkCommandBuffer_T*)
layer_factory::PostCallGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
layer_factory::PreCallGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
layer_factory::PostCallGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
layer_factory::PreCallGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
layer_factory::PostCallGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
layer_factory::PreCallGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
layer_factory::PostCallGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
layer_factory::PreCallTrimCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PostCallTrimCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PreCallGetDeviceQueue2(VkDevice_T*, VkDeviceQueueInfo2 const*, VkQueue_T**)
layer_factory::PostCallGetDeviceQueue2(VkDevice_T*, VkDeviceQueueInfo2 const*, VkQueue_T**)
layer_factory::PreCallCreateSamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
layer_factory::PostCallCreateSamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
layer_factory::PreCallDestroySamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroySamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
layer_factory::PostCallCreateDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
layer_factory::PreCallDestroyDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
layer_factory::PreCallUpdateDescriptorSetWithTemplate(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
layer_factory::PostCallUpdateDescriptorSetWithTemplate(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
layer_factory::PreCallGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
layer_factory::PostCallGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
layer_factory::PreCallGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
layer_factory::PostCallGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
layer_factory::PreCallGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PostCallGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PreCallGetDescriptorSetLayoutSupport(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
layer_factory::PostCallGetDescriptorSetLayoutSupport(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
layer_factory::PreCallDestroySurfaceKHR(VkInstance_T*, VkSurfaceKHR_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroySurfaceKHR(VkInstance_T*, VkSurfaceKHR_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice_T*, unsigned int, VkSurfaceKHR_T*, unsigned int*)
layer_factory::PostCallCmdDispatchBase(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PreCallEnumeratePhysicalDeviceGroups(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
layer_factory::PostCallEnumeratePhysicalDeviceGroups(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
layer_factory::PreCallGetImageMemoryRequirements2(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PostCallGetImageMemoryRequirements2(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PreCallGetBufferMemoryRequirements2(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PostCallGetBufferMemoryRequirements2(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PreCallGetImageSparseMemoryRequirements2(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
layer_factory::PostCallGetImageSparseMemoryRequirements2(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
layer_factory::PreCallGetPhysicalDeviceFeatures2(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
layer_factory::PostCallGetPhysicalDeviceFeatures2(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
layer_factory::PreCallGetPhysicalDeviceProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
layer_factory::PostCallGetPhysicalDeviceProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
layer_factory::PreCallGetPhysicalDeviceFormatProperties2(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
layer_factory::PostCallGetPhysicalDeviceFormatProperties2(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
layer_factory::PreCallGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
layer_factory::PostCallBindBufferMemory2(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
layer_factory::PreCallBindImageMemory2(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
layer_factory::PostCallBindImageMemory2(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
layer_factory::PreCallGetDeviceGroupPeerMemoryFeatures(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
layer_factory::PostCallGetDeviceGroupPeerMemoryFeatures(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
layer_factory::PreCallCmdSetDeviceMask(VkCommandBuffer_T*, unsigned int)
layer_factory::PostCallCmdSetDeviceMask(VkCommandBuffer_T*, unsigned int)
layer_factory::PreCallCmdDispatchBase(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PostCallCmdExecuteCommands(VkCommandBuffer_T*, unsigned int, VkCommandBuffer_T* const*)
layer_factory::PreCallBindBufferMemory2(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
layer_factory::PreCallCmdExecuteCommands(VkCommandBuffer_T*, unsigned int, VkCommandBuffer_T* const*)
layer_factory::PostCallGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice_T*, unsigned int, VkSurfaceKHR_T*, unsigned int*)
layer_factory::PreCallGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilitiesKHR*)
layer_factory::PostCallGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilitiesKHR*)
layer_factory::PreCallGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkSurfaceFormatKHR*)
layer_factory::PostCallGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkSurfaceFormatKHR*)
layer_factory::PreCallGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkPresentModeKHR*)
layer_factory::PostCallGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkPresentModeKHR*)
layer_factory::PreCallCreateSwapchainKHR(VkDevice_T*, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
layer_factory::PostCallCreateSwapchainKHR(VkDevice_T*, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
layer_factory::PreCallDestroySwapchainKHR(VkDevice_T*, VkSwapchainKHR_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroySwapchainKHR(VkDevice_T*, VkSwapchainKHR_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetSwapchainImagesKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkImage_T**)
layer_factory::PostCallGetSwapchainImagesKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkImage_T**)
layer_factory::PreCallAcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)
layer_factory::PostCallAcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)
layer_factory::PreCallQueuePresentKHR(VkQueue_T*, VkPresentInfoKHR const*)
layer_factory::PostCallQueuePresentKHR(VkQueue_T*, VkPresentInfoKHR const*)
layer_factory::PreCallGetDeviceGroupPresentCapabilitiesKHR(VkDevice_T*, VkDeviceGroupPresentCapabilitiesKHR*)
layer_factory::PostCallGetDeviceGroupPresentCapabilitiesKHR(VkDevice_T*, VkDeviceGroupPresentCapabilitiesKHR*)
layer_factory::PreCallGetDeviceGroupSurfacePresentModesKHR(VkDevice_T*, VkSurfaceKHR_T*, unsigned int*)
layer_factory::PostCallGetDeviceGroupSurfacePresentModesKHR(VkDevice_T*, VkSurfaceKHR_T*, unsigned int*)
layer_factory::PreCallGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkRect2D*)
layer_factory::PostCallGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkRect2D*)
layer_factory::PreCallAcquireNextImage2KHR(VkDevice_T*, VkAcquireNextImageInfoKHR const*, unsigned int*)
layer_factory::PostCallAcquireNextImage2KHR(VkDevice_T*, VkAcquireNextImageInfoKHR const*, unsigned int*)
layer_factory::PreCallGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPropertiesKHR*)
layer_factory::PostCallGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPropertiesKHR*)
layer_factory::PreCallGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlanePropertiesKHR*)
layer_factory::PostCallGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlanePropertiesKHR*)
layer_factory::PreCallGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice_T*, unsigned int, unsigned int*, VkDisplayKHR_T**)
layer_factory::PostCallGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice_T*, unsigned int, unsigned int*, VkDisplayKHR_T**)
layer_factory::PreCallGetDisplayModePropertiesKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModePropertiesKHR*)
layer_factory::PostCallGetDisplayModePropertiesKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModePropertiesKHR*)
layer_factory::PreCallCreateDisplayModeKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, VkDisplayModeCreateInfoKHR const*, VkAllocationCallbacks const*, VkDisplayModeKHR_T**)
layer_factory::PostCallCreateDisplayModeKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, VkDisplayModeCreateInfoKHR const*, VkAllocationCallbacks const*, VkDisplayModeKHR_T**)
layer_factory::PreCallGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice_T*, VkDisplayModeKHR_T*, unsigned int, VkDisplayPlaneCapabilitiesKHR*)
layer_factory::PostCallGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice_T*, VkDisplayModeKHR_T*, unsigned int, VkDisplayPlaneCapabilitiesKHR*)
layer_factory::PreCallCreateDisplayPlaneSurfaceKHR(VkInstance_T*, VkDisplaySurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PostCallCreateDisplayPlaneSurfaceKHR(VkInstance_T*, VkDisplaySurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PreCallCreateSharedSwapchainsKHR(VkDevice_T*, unsigned int, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
layer_factory::PostCallCreateSharedSwapchainsKHR(VkDevice_T*, unsigned int, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
layer_factory::PreCallCreateXlibSurfaceKHR(VkInstance_T*, VkXlibSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PostCallCreateXlibSurfaceKHR(VkInstance_T*, VkXlibSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PreCallGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, _XDisplay*, unsigned long)
layer_factory::PostCallGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, _XDisplay*, unsigned long)
layer_factory::PreCallCreateXcbSurfaceKHR(VkInstance_T*, VkXcbSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PostCallCreateXcbSurfaceKHR(VkInstance_T*, VkXcbSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PreCallGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, xcb_connection_t*, unsigned int)
layer_factory::PostCallGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, xcb_connection_t*, unsigned int)
layer_factory::PreCallCreateWaylandSurfaceKHR(VkInstance_T*, VkWaylandSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PostCallCreateWaylandSurfaceKHR(VkInstance_T*, VkWaylandSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PreCallGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, wl_display*)
layer_factory::PostCallGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, wl_display*)
layer_factory::PreCallGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
layer_factory::PostCallGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
layer_factory::PreCallGetPhysicalDeviceProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
layer_factory::PostCallGetPhysicalDeviceProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
layer_factory::PreCallGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
layer_factory::PostCallGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
layer_factory::PreCallGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
layer_factory::PostCallGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
layer_factory::PreCallGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
layer_factory::PostCallGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
layer_factory::PreCallGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
layer_factory::PostCallGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
layer_factory::PreCallGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
layer_factory::PostCallGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
layer_factory::PreCallGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
layer_factory::PostCallGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
layer_factory::PreCallCmdSetDeviceMaskKHR(VkCommandBuffer_T*, unsigned int)
layer_factory::PostCallCmdSetDeviceMaskKHR(VkCommandBuffer_T*, unsigned int)
layer_factory::PreCallCmdDispatchBaseKHR(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PostCallCmdDispatchBaseKHR(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PreCallTrimCommandPoolKHR(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PostCallTrimCommandPoolKHR(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PreCallEnumeratePhysicalDeviceGroupsKHR(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
layer_factory::PostCallEnumeratePhysicalDeviceGroupsKHR(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
layer_factory::PreCallGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
layer_factory::PostCallGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
layer_factory::PreCallGetMemoryFdKHR(VkDevice_T*, VkMemoryGetFdInfoKHR const*, int*)
layer_factory::PostCallGetMemoryFdKHR(VkDevice_T*, VkMemoryGetFdInfoKHR const*, int*)
layer_factory::PreCallGetMemoryFdPropertiesKHR(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*)
layer_factory::PostCallGetMemoryFdPropertiesKHR(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*)
layer_factory::PreCallGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PostCallGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PreCallImportSemaphoreFdKHR(VkDevice_T*, VkImportSemaphoreFdInfoKHR const*)
layer_factory::PostCallImportSemaphoreFdKHR(VkDevice_T*, VkImportSemaphoreFdInfoKHR const*)
layer_factory::PreCallGetSemaphoreFdKHR(VkDevice_T*, VkSemaphoreGetFdInfoKHR const*, int*)
layer_factory::PostCallGetSemaphoreFdKHR(VkDevice_T*, VkSemaphoreGetFdInfoKHR const*, int*)
layer_factory::PreCallCmdPushDescriptorSetKHR(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkWriteDescriptorSet const*)
layer_factory::PostCallCmdPushDescriptorSetKHR(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkWriteDescriptorSet const*)
layer_factory::PreCallCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer_T*, VkDescriptorUpdateTemplate_T*, VkPipelineLayout_T*, unsigned int, void const*)
layer_factory::PostCallCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer_T*, VkDescriptorUpdateTemplate_T*, VkPipelineLayout_T*, unsigned int, void const*)
layer_factory::PreCallCreateDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
layer_factory::PostCallCreateDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
layer_factory::PreCallDestroyDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
layer_factory::PreCallUpdateDescriptorSetWithTemplateKHR(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
layer_factory::PostCallUpdateDescriptorSetWithTemplateKHR(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
layer_factory::PreCallCreateRenderPass2KHR(VkDevice_T*, VkRenderPassCreateInfo2KHR const*, VkAllocationCallbacks const*, VkRenderPass_T**)
layer_factory::PostCallCreateRenderPass2KHR(VkDevice_T*, VkRenderPassCreateInfo2KHR const*, VkAllocationCallbacks const*, VkRenderPass_T**)
layer_factory::PreCallCmdBeginRenderPass2KHR(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassBeginInfoKHR const*)
layer_factory::PostCallCmdBeginRenderPass2KHR(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassBeginInfoKHR const*)
layer_factory::PreCallCmdNextSubpass2KHR(VkCommandBuffer_T*, VkSubpassBeginInfoKHR const*, VkSubpassEndInfoKHR const*)
layer_factory::PostCallCmdNextSubpass2KHR(VkCommandBuffer_T*, VkSubpassBeginInfoKHR const*, VkSubpassEndInfoKHR const*)
layer_factory::PreCallCmdEndRenderPass2KHR(VkCommandBuffer_T*, VkSubpassEndInfoKHR const*)
layer_factory::PostCallCmdEndRenderPass2KHR(VkCommandBuffer_T*, VkSubpassEndInfoKHR const*)
layer_factory::PreCallGetSwapchainStatusKHR(VkDevice_T*, VkSwapchainKHR_T*)
layer_factory::PostCallGetSwapchainStatusKHR(VkDevice_T*, VkSwapchainKHR_T*)
layer_factory::PreCallGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
layer_factory::PostCallGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
layer_factory::PreCallImportFenceFdKHR(VkDevice_T*, VkImportFenceFdInfoKHR const*)
layer_factory::PostCallImportFenceFdKHR(VkDevice_T*, VkImportFenceFdInfoKHR const*)
layer_factory::PreCallGetFenceFdKHR(VkDevice_T*, VkFenceGetFdInfoKHR const*, int*)
layer_factory::PostCallGetFenceFdKHR(VkDevice_T*, VkFenceGetFdInfoKHR const*, int*)
layer_factory::PreCallGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, VkSurfaceCapabilities2KHR*)
layer_factory::PostCallGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, VkSurfaceCapabilities2KHR*)
layer_factory::PreCallGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, unsigned int*, VkSurfaceFormat2KHR*)
layer_factory::PostCallGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, unsigned int*, VkSurfaceFormat2KHR*)
layer_factory::PreCallGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayProperties2KHR*)
layer_factory::PostCallGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayProperties2KHR*)
layer_factory::PreCallGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlaneProperties2KHR*)
layer_factory::PostCallGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlaneProperties2KHR*)
layer_factory::PreCallGetDisplayModeProperties2KHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModeProperties2KHR*)
layer_factory::PostCallGetDisplayModeProperties2KHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModeProperties2KHR*)
layer_factory::PreCallGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice_T*, VkDisplayPlaneInfo2KHR const*, VkDisplayPlaneCapabilities2KHR*)
layer_factory::PostCallGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice_T*, VkDisplayPlaneInfo2KHR const*, VkDisplayPlaneCapabilities2KHR*)
layer_factory::PreCallGetImageMemoryRequirements2KHR(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PostCallResetFences(VkDevice_T*, unsigned int, VkFence_T* const*)
layer_factory::PreCallGetFenceStatus(VkDevice_T*, VkFence_T*)
layer_factory::PostCallGetFenceStatus(VkDevice_T*, VkFence_T*)
layer_factory::PreCallWaitForFences(VkDevice_T*, unsigned int, VkFence_T* const*, unsigned int, unsigned long)
layer_factory::PostCallWaitForFences(VkDevice_T*, unsigned int, VkFence_T* const*, unsigned int, unsigned long)
layer_factory::PreCallCreateSemaphore(VkDevice_T*, VkSemaphoreCreateInfo const*, VkAllocationCallbacks const*, VkSemaphore_T**)
layer_factory::PostCallCreateSemaphore(VkDevice_T*, VkSemaphoreCreateInfo const*, VkAllocationCallbacks const*, VkSemaphore_T**)
layer_factory::PreCallDestroySemaphore(VkDevice_T*, VkSemaphore_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroySemaphore(VkDevice_T*, VkSemaphore_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateEvent(VkDevice_T*, VkEventCreateInfo const*, VkAllocationCallbacks const*, VkEvent_T**)
layer_factory::PostCallCreateEvent(VkDevice_T*, VkEventCreateInfo const*, VkAllocationCallbacks const*, VkEvent_T**)
layer_factory::PreCallDestroyEvent(VkDevice_T*, VkEvent_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyEvent(VkDevice_T*, VkEvent_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetEventStatus(VkDevice_T*, VkEvent_T*)
layer_factory::PostCallGetEventStatus(VkDevice_T*, VkEvent_T*)
layer_factory::PreCallSetEvent(VkDevice_T*, VkEvent_T*)
layer_factory::PostCallSetEvent(VkDevice_T*, VkEvent_T*)
layer_factory::PreCallResetEvent(VkDevice_T*, VkEvent_T*)
layer_factory::PostCallResetEvent(VkDevice_T*, VkEvent_T*)
layer_factory::PreCallCreateQueryPool(VkDevice_T*, VkQueryPoolCreateInfo const*, VkAllocationCallbacks const*, VkQueryPool_T**)
layer_factory::PostCallCreateQueryPool(VkDevice_T*, VkQueryPoolCreateInfo const*, VkAllocationCallbacks const*, VkQueryPool_T**)
layer_factory::PreCallDestroyQueryPool(VkDevice_T*, VkQueryPool_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyQueryPool(VkDevice_T*, VkQueryPool_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetQueryPoolResults(VkDevice_T*, VkQueryPool_T*, unsigned int, unsigned int, unsigned long, void*, unsigned long, unsigned int)
layer_factory::PostCallGetQueryPoolResults(VkDevice_T*, VkQueryPool_T*, unsigned int, unsigned int, unsigned long, void*, unsigned long, unsigned int)
layer_factory::PreCallCreateBuffer(VkDevice_T*, VkBufferCreateInfo const*, VkAllocationCallbacks const*, VkBuffer_T**)
layer_factory::PostCallCreateBuffer(VkDevice_T*, VkBufferCreateInfo const*, VkAllocationCallbacks const*, VkBuffer_T**)
layer_factory::PreCallDestroyBuffer(VkDevice_T*, VkBuffer_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyBuffer(VkDevice_T*, VkBuffer_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateBufferView(VkDevice_T*, VkBufferViewCreateInfo const*, VkAllocationCallbacks const*, VkBufferView_T**)
layer_factory::PostCallCreateBufferView(VkDevice_T*, VkBufferViewCreateInfo const*, VkAllocationCallbacks const*, VkBufferView_T**)
layer_factory::PreCallDestroyBufferView(VkDevice_T*, VkBufferView_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyBufferView(VkDevice_T*, VkBufferView_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateImage(VkDevice_T*, VkImageCreateInfo const*, VkAllocationCallbacks const*, VkImage_T**)
layer_factory::PostCallCreateImage(VkDevice_T*, VkImageCreateInfo const*, VkAllocationCallbacks const*, VkImage_T**)
layer_factory::PreCallDestroyImage(VkDevice_T*, VkImage_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyImage(VkDevice_T*, VkImage_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetImageSubresourceLayout(VkDevice_T*, VkImage_T*, VkImageSubresource const*, VkSubresourceLayout*)
layer_factory::PostCallGetImageSubresourceLayout(VkDevice_T*, VkImage_T*, VkImageSubresource const*, VkSubresourceLayout*)
layer_factory::PreCallCreateImageView(VkDevice_T*, VkImageViewCreateInfo const*, VkAllocationCallbacks const*, VkImageView_T**)
layer_factory::PostCallCreateImageView(VkDevice_T*, VkImageViewCreateInfo const*, VkAllocationCallbacks const*, VkImageView_T**)
layer_factory::PreCallDestroyImageView(VkDevice_T*, VkImageView_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyImageView(VkDevice_T*, VkImageView_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateShaderModule(VkDevice_T*, VkShaderModuleCreateInfo const*, VkAllocationCallbacks const*, VkShaderModule_T**)
layer_factory::PostCallCreateShaderModule(VkDevice_T*, VkShaderModuleCreateInfo const*, VkAllocationCallbacks const*, VkShaderModule_T**)
layer_factory::PreCallDestroyShaderModule(VkDevice_T*, VkShaderModule_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyShaderModule(VkDevice_T*, VkShaderModule_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreatePipelineCache(VkDevice_T*, VkPipelineCacheCreateInfo const*, VkAllocationCallbacks const*, VkPipelineCache_T**)
layer_factory::PostCallCreatePipelineCache(VkDevice_T*, VkPipelineCacheCreateInfo const*, VkAllocationCallbacks const*, VkPipelineCache_T**)
layer_factory::PreCallDestroyPipelineCache(VkDevice_T*, VkPipelineCache_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyPipelineCache(VkDevice_T*, VkPipelineCache_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetPipelineCacheData(VkDevice_T*, VkPipelineCache_T*, unsigned long*, void*)
layer_factory::PostCallGetPipelineCacheData(VkDevice_T*, VkPipelineCache_T*, unsigned long*, void*)
layer_factory::PreCallMergePipelineCaches(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkPipelineCache_T* const*)
layer_factory::PostCallMergePipelineCaches(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkPipelineCache_T* const*)
layer_factory::PreCallCreateGraphicsPipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkGraphicsPipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
layer_factory::PostCallCreateGraphicsPipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkGraphicsPipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
layer_factory::PreCallCreateComputePipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkComputePipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
layer_factory::PostCallCreateComputePipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkComputePipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
layer_factory::PreCallDestroyPipeline(VkDevice_T*, VkPipeline_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyPipeline(VkDevice_T*, VkPipeline_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreatePipelineLayout(VkDevice_T*, VkPipelineLayoutCreateInfo const*, VkAllocationCallbacks const*, VkPipelineLayout_T**)
layer_factory::PostCallCreatePipelineLayout(VkDevice_T*, VkPipelineLayoutCreateInfo const*, VkAllocationCallbacks const*, VkPipelineLayout_T**)
layer_factory::PreCallDestroyPipelineLayout(VkDevice_T*, VkPipelineLayout_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyPipelineLayout(VkDevice_T*, VkPipelineLayout_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateSampler(VkDevice_T*, VkSamplerCreateInfo const*, VkAllocationCallbacks const*, VkSampler_T**)
layer_factory::PostCallCreateSampler(VkDevice_T*, VkSamplerCreateInfo const*, VkAllocationCallbacks const*, VkSampler_T**)
layer_factory::PreCallDestroySampler(VkDevice_T*, VkSampler_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroySampler(VkDevice_T*, VkSampler_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorSetLayout_T**)
layer_factory::PostCallCreateDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorSetLayout_T**)
layer_factory::PreCallDestroyDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayout_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayout_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateDescriptorPool(VkDevice_T*, VkDescriptorPoolCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorPool_T**)
layer_factory::PostCallCreateDescriptorPool(VkDevice_T*, VkDescriptorPoolCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorPool_T**)
layer_factory::PreCallDestroyDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, VkAllocationCallbacks const*)
layer_factory::PreCallResetDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, unsigned int)
layer_factory::PostCallResetDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, unsigned int)
layer_factory::PreCallAllocateDescriptorSets(VkDevice_T*, VkDescriptorSetAllocateInfo const*, VkDescriptorSet_T**)
layer_factory::PostCallAllocateDescriptorSets(VkDevice_T*, VkDescriptorSetAllocateInfo const*, VkDescriptorSet_T**)
layer_factory::PreCallFreeDescriptorSets(VkDevice_T*, VkDescriptorPool_T*, unsigned int, VkDescriptorSet_T* const*)
layer_factory::PostCallFreeDescriptorSets(VkDevice_T*, VkDescriptorPool_T*, unsigned int, VkDescriptorSet_T* const*)
layer_factory::PreCallUpdateDescriptorSets(VkDevice_T*, unsigned int, VkWriteDescriptorSet const*, unsigned int, VkCopyDescriptorSet const*)
layer_factory::PostCallUpdateDescriptorSets(VkDevice_T*, unsigned int, VkWriteDescriptorSet const*, unsigned int, VkCopyDescriptorSet const*)
layer_factory::PreCallCreateFramebuffer(VkDevice_T*, VkFramebufferCreateInfo const*, VkAllocationCallbacks const*, VkFramebuffer_T**)
layer_factory::PostCallCreateFramebuffer(VkDevice_T*, VkFramebufferCreateInfo const*, VkAllocationCallbacks const*, VkFramebuffer_T**)
layer_factory::PreCallDestroyFramebuffer(VkDevice_T*, VkFramebuffer_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyFramebuffer(VkDevice_T*, VkFramebuffer_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateRenderPass(VkDevice_T*, VkRenderPassCreateInfo const*, VkAllocationCallbacks const*, VkRenderPass_T**)
layer_factory::PostCallCreateRenderPass(VkDevice_T*, VkRenderPassCreateInfo const*, VkAllocationCallbacks const*, VkRenderPass_T**)
layer_factory::PreCallDestroyRenderPass(VkDevice_T*, VkRenderPass_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyRenderPass(VkDevice_T*, VkRenderPass_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetRenderAreaGranularity(VkDevice_T*, VkRenderPass_T*, VkExtent2D*)
layer_factory::PostCallGetRenderAreaGranularity(VkDevice_T*, VkRenderPass_T*, VkExtent2D*)
layer_factory::PreCallCreateCommandPool(VkDevice_T*, VkCommandPoolCreateInfo const*, VkAllocationCallbacks const*, VkCommandPool_T**)
layer_factory::PostCallCreateCommandPool(VkDevice_T*, VkCommandPoolCreateInfo const*, VkAllocationCallbacks const*, VkCommandPool_T**)
layer_factory::PreCallDestroyCommandPool(VkDevice_T*, VkCommandPool_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyCommandPool(VkDevice_T*, VkCommandPool_T*, VkAllocationCallbacks const*)
layer_factory::PreCallResetCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PostCallResetCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PreCallAllocateCommandBuffers(VkDevice_T*, VkCommandBufferAllocateInfo const*, VkCommandBuffer_T**)
layer_factory::PostCallAllocateCommandBuffers(VkDevice_T*, VkCommandBufferAllocateInfo const*, VkCommandBuffer_T**)
layer_factory::PreCallFreeCommandBuffers(VkDevice_T*, VkCommandPool_T*, unsigned int, VkCommandBuffer_T* const*)
layer_factory::PostCallFreeCommandBuffers(VkDevice_T*, VkCommandPool_T*, unsigned int, VkCommandBuffer_T* const*)
layer_factory::PreCallBeginCommandBuffer(VkCommandBuffer_T*, VkCommandBufferBeginInfo const*)
layer_factory::PostCallBeginCommandBuffer(VkCommandBuffer_T*, VkCommandBufferBeginInfo const*)
layer_factory::PreCallEndCommandBuffer(VkCommandBuffer_T*)
layer_factory::PostCallEndCommandBuffer(VkCommandBuffer_T*)
layer_factory::PostCallResetCommandBuffer(VkCommandBuffer_T*, unsigned int)
layer_factory::PreCallCmdBindPipeline(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipeline_T*)
layer_factory::PreCallResetCommandBuffer(VkCommandBuffer_T*, unsigned int)
layer_factory::PostCallCmdBindPipeline(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipeline_T*)
layer_factory::PreCallCmdSetViewport(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewport const*)
layer_factory::PostCallCmdSetViewport(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewport const*)
layer_factory::PreCallCmdSetScissor(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
layer_factory::PostCallCmdSetScissor(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
layer_factory::PreCallCmdSetLineWidth(VkCommandBuffer_T*, float)
layer_factory::PostCallCmdSetLineWidth(VkCommandBuffer_T*, float)
layer_factory::PreCallCmdSetDepthBias(VkCommandBuffer_T*, float, float, float)
layer_factory::PostCallCmdSetDepthBias(VkCommandBuffer_T*, float, float, float)
layer_factory::PreCallCmdSetBlendConstants(VkCommandBuffer_T*, float const*)
layer_factory::PostCallCmdSetBlendConstants(VkCommandBuffer_T*, float const*)
layer_factory::PreCallCmdSetDepthBounds(VkCommandBuffer_T*, float, float)
layer_factory::PostCallCmdSetDepthBounds(VkCommandBuffer_T*, float, float)
layer_factory::PreCallCmdSetStencilCompareMask(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PostCallCmdSetStencilCompareMask(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PreCallCmdSetStencilWriteMask(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PostCallAllocateMemory(VkDevice_T*, VkMemoryAllocateInfo const*, VkAllocationCallbacks const*, VkDeviceMemory_T**)
layer_factory::PreCallFreeMemory(VkDevice_T*, VkDeviceMemory_T*, VkAllocationCallbacks const*)
layer_factory::PostCallFreeMemory(VkDevice_T*, VkDeviceMemory_T*, VkAllocationCallbacks const*)
layer_factory::PreCallMapMemory(VkDevice_T*, VkDeviceMemory_T*, unsigned long, unsigned long, unsigned int, void**)
layer_factory::PostCallMapMemory(VkDevice_T*, VkDeviceMemory_T*, unsigned long, unsigned long, unsigned int, void**)
layer_factory::PreCallUnmapMemory(VkDevice_T*, VkDeviceMemory_T*)
layer_factory::PostCallUnmapMemory(VkDevice_T*, VkDeviceMemory_T*)
layer_factory::PreCallFlushMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
layer_factory::PostCallFlushMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
layer_factory::PreCallInvalidateMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
layer_factory::PostCallInvalidateMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
layer_factory::PreCallGetDeviceMemoryCommitment(VkDevice_T*, VkDeviceMemory_T*, unsigned long*)
layer_factory::PostCallGetDeviceMemoryCommitment(VkDevice_T*, VkDeviceMemory_T*, unsigned long*)
layer_factory::PreCallBindBufferMemory(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned long)
layer_factory::PostCallBindBufferMemory(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned long)
layer_factory::PreCallBindImageMemory(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, unsigned long)
layer_factory::PostCallBindImageMemory(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, unsigned long)
layer_factory::PreCallGetBufferMemoryRequirements(VkDevice_T*, VkBuffer_T*, VkMemoryRequirements*)
layer_factory::PostCallGetBufferMemoryRequirements(VkDevice_T*, VkBuffer_T*, VkMemoryRequirements*)
layer_factory::PreCallGetImageMemoryRequirements(VkDevice_T*, VkImage_T*, VkMemoryRequirements*)
layer_factory::PostCallGetImageMemoryRequirements(VkDevice_T*, VkImage_T*, VkMemoryRequirements*)
layer_factory::PreCallGetImageSparseMemoryRequirements(VkDevice_T*, VkImage_T*, unsigned int*, VkSparseImageMemoryRequirements*)
layer_factory::PostCallGetImageSparseMemoryRequirements(VkDevice_T*, VkImage_T*, unsigned int*, VkSparseImageMemoryRequirements*)
layer_factory::PreCallGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkSampleCountFlagBits, unsigned int, VkImageTiling, unsigned int*, VkSparseImageFormatProperties*)
layer_factory::PostCallGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkSampleCountFlagBits, unsigned int, VkImageTiling, unsigned int*, VkSparseImageFormatProperties*)
layer_factory::PreCallQueueBindSparse(VkQueue_T*, unsigned int, VkBindSparseInfo const*, VkFence_T*)
layer_factory::PostCallQueueBindSparse(VkQueue_T*, unsigned int, VkBindSparseInfo const*, VkFence_T*)
layer_factory::PreCallCreateFence(VkDevice_T*, VkFenceCreateInfo const*, VkAllocationCallbacks const*, VkFence_T**)
layer_factory::PostCallCreateFence(VkDevice_T*, VkFenceCreateInfo const*, VkAllocationCallbacks const*, VkFence_T**)
layer_factory::PreCallDestroyFence(VkDevice_T*, VkFence_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyFence(VkDevice_T*, VkFence_T*, VkAllocationCallbacks const*)
layer_factory::PreCallResetFences(VkDevice_T*, unsigned int, VkFence_T* const*)
layer_factory::PostCallGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties*)
layer_factory::PreCallGetPhysicalDeviceMemoryProperties(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties*)
layer_factory::PostCallGetPhysicalDeviceMemoryProperties(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties*)
layer_factory::PreCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
layer_factory::PostCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
layer_factory::PreCallDestroyDevice(VkDevice_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDevice(VkDevice_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetDeviceQueue(VkDevice_T*, unsigned int, unsigned int, VkQueue_T**)
layer_factory::PostCallGetDeviceQueue(VkDevice_T*, unsigned int, unsigned int, VkQueue_T**)
layer_factory::PreCallQueueSubmit(VkQueue_T*, unsigned int, VkSubmitInfo const*, VkFence_T*)
layer_factory::PostCallQueueSubmit(VkQueue_T*, unsigned int, VkSubmitInfo const*, VkFence_T*)
layer_factory::PreCallQueueWaitIdle(VkQueue_T*)
layer_factory::PostCallQueueWaitIdle(VkQueue_T*)
layer_factory::PostCallDeviceWaitIdle(VkDevice_T*)
layer_factory::PreCallAllocateMemory(VkDevice_T*, VkMemoryAllocateInfo const*, VkAllocationCallbacks const*, VkDeviceMemory_T**)
layer_factory::PreCallDeviceWaitIdle(VkDevice_T*)
layer_factory::PostCallGetPhysicalDeviceFeatures(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures*)
layer_factory::PreCallGetPhysicalDeviceFormatProperties(VkPhysicalDevice_T*, VkFormat, VkFormatProperties*)
layer_factory::PostCallDestroyInstance(VkInstance_T*, VkAllocationCallbacks const*)
layer_factory::PreCallEnumeratePhysicalDevices(VkInstance_T*, unsigned int*, VkPhysicalDevice_T**)
layer_factory::PostCallEnumeratePhysicalDevices(VkInstance_T*, unsigned int*, VkPhysicalDevice_T**)
layer_factory::PreCallGetPhysicalDeviceFeatures(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures*)
layer_factory::PostCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
layer_factory::PreCallDestroyInstance(VkInstance_T*, VkAllocationCallbacks const*)
layer_factory::PostCallGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, VkImageFormatProperties*)
layer_factory::PreCallGetPhysicalDeviceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceProperties*)
layer_factory::PostCallGetPhysicalDeviceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceProperties*)
layer_factory::PreCallGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties*)
layer_factory::PostCallGetPhysicalDeviceFormatProperties(VkPhysicalDevice_T*, VkFormat, VkFormatProperties*)
layer_factory::PreCallGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, VkImageFormatProperties*)
operator new(unsigned long)
std::__throw_bad_alloc()
_Unwind_Resume
__gxx_personality_v0
__vsnprintf_chk
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, void*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, void*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, InstanceExtensions::InstanceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, InstanceExtensions::InstanceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, DeviceExtensions::DeviceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>>::~unordered_map()
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, DeviceExtensions::DeviceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>>::~unordered_map()
strlen
std::ios_base::ios_base()
vtable for std::basic_ios<char, std::char_traits<char>>
VTT for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>
std::basic_ios<char, std::char_traits<char>>::init(std::basic_streambuf<char, std::char_traits<char>>*)
vtable for std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>
vtable for std::basic_streambuf<char, std::char_traits<char>>
std::locale::locale()
vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>
std::basic_ostream<char, std::char_traits<char>>& std::__ostream_insert<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>>&, char const*, long)
std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)
vsnprintf
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_append(char const*, unsigned long)
operator delete[](void*)
std::locale::~locale()
std::ios_base::~ios_base()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_replace(unsigned long, unsigned long, char const*, unsigned long)
operator new[](unsigned long)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::basic_ios<char, std::char_traits<char>>::clear(std::_Ios_Iostate)
std::__throw_length_error(char const*)
std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_ostringstream()
__cxa_throw_bad_array_new_length
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::~pair()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::~pair()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [22], char const (&) [17], true>(char const (&) [22], char const (&) [17])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [17], true>(char const (&) [39], char const (&) [17])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [22], char const (&) [20], true>(char const (&) [22], char const (&) [20])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [21], char const (&) [20], true>(char const (&) [21], char const (&) [20])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [26], char const (&) [23], true>(char const (&) [26], char const (&) [23])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [34], true>(char const (&) [37], char const (&) [34])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [23], char const (&) [26], true>(char const (&) [23], char const (&) [26])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [25], char const (&) [28], true>(char const (&) [25], char const (&) [28])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [32], true>(char const (&) [34], char const (&) [32])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [23], char const (&) [20], true>(char const (&) [23], char const (&) [20])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [26], char const (&) [27], true>(char const (&) [26], char const (&) [27])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [27], true>(char const (&) [33], char const (&) [27])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [24], char const (&) [33], true>(char const (&) [24], char const (&) [33])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [23], char const (&) [33], true>(char const (&) [23], char const (&) [33])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [25], char const (&) [23], true>(char const (&) [25], char const (&) [23])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [27], char const (&) [24], true>(char const (&) [27], char const (&) [24])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [28], char const (&) [24], true>(char const (&) [28], char const (&) [24])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [260], true>(char const (&) [44], char const (&) [260])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [167], true>(char const (&) [48], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [196], true>(char const (&) [47], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [142], true>(char const (&) [43], char const (&) [142])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [183], true>(char const (&) [43], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [184], true>(char const (&) [47], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [229], true>(char const (&) [47], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [189], true>(char const (&) [47], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [170], true>(char const (&) [47], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [179], true>(char const (&) [51], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [196], true>(char const (&) [41], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [226], true>(char const (&) [64], char const (&) [226])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [203], true>(char const (&) [53], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [149], true>(char const (&) [53], char const (&) [149])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [146], true>(char const (&) [47], char const (&) [146])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [191], true>(char const (&) [47], char const (&) [191])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [180], true>(char const (&) [48], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [219], true>(char const (&) [50], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [204], true>(char const (&) [45], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [134], true>(char const (&) [35], char const (&) [134])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [211], true>(char const (&) [47], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [183], true>(char const (&) [53], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [174], true>(char const (&) [46], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [188], true>(char const (&) [53], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [177], true>(char const (&) [47], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [215], true>(char const (&) [51], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [183], true>(char const (&) [55], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [187], true>(char const (&) [57], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [178], true>(char const (&) [50], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [186], true>(char const (&) [45], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [183], true>(char const (&) [51], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [192], true>(char const (&) [57], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [195], true>(char const (&) [58], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [167], true>(char const (&) [44], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [203], true>(char const (&) [44], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [171], true>(char const (&) [48], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [182], true>(char const (&) [43], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [200], true>(char const (&) [51], char const (&) [200])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [174], true>(char const (&) [41], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [308], true>(char const (&) [41], char const (&) [308])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [164], true>(char const (&) [45], char const (&) [164])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [219], true>(char const (&) [41], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [170], true>(char const (&) [45], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [176], true>(char const (&) [40], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [221], true>(char const (&) [61], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [198], true>(char const (&) [50], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [171], true>(char const (&) [39], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [304], true>(char const (&) [39], char const (&) [304])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [160], true>(char const (&) [43], char const (&) [160])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [165], true>(char const (&) [40], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [380], true>(char const (&) [39], char const (&) [380])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [358], true>(char const (&) [39], char const (&) [358])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [227], true>(char const (&) [39], char const (&) [227])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [174], true>(char const (&) [39], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [172], true>(char const (&) [40], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [187], true>(char const (&) [59], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [190], true>(char const (&) [54], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [185], true>(char const (&) [44], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [260], true>(char const (&) [48], char const (&) [260])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [163], true>(char const (&) [34], char const (&) [163])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [29], char const (&) [141], true>(char const (&) [29], char const (&) [141])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [269], true>(char const (&) [36], char const (&) [269])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [218], true>(char const (&) [36], char const (&) [218])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [415], true>(char const (&) [36], char const (&) [415])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [167], true>(char const (&) [36], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [169], true>(char const (&) [37], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [265], true>(char const (&) [42], char const (&) [265])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [213], true>(char const (&) [42], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [143], true>(char const (&) [35], char const (&) [143])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [186], true>(char const (&) [40], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [146], true>(char const (&) [46], char const (&) [146])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [371], true>(char const (&) [34], char const (&) [371])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [159], true>(char const (&) [42], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [212], true>(char const (&) [45], char const (&) [212])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [262], true>(char const (&) [45], char const (&) [262])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [338], true>(char const (&) [41], char const (&) [338])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [269], true>(char const (&) [41], char const (&) [269])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [271], true>(char const (&) [41], char const (&) [271])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [285], true>(char const (&) [40], char const (&) [285])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [443], true>(char const (&) [40], char const (&) [443])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [394], true>(char const (&) [40], char const (&) [394])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [228], true>(char const (&) [40], char const (&) [228])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [163], true>(char const (&) [44], char const (&) [163])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [138], true>(char const (&) [39], char const (&) [138])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [173], true>(char const (&) [39], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [185], true>(char const (&) [38], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [229], true>(char const (&) [38], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [173], true>(char const (&) [54], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [148], true>(char const (&) [49], char const (&) [148])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [195], true>(char const (&) [49], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [413], true>(char const (&) [41], char const (&) [413])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [142], true>(char const (&) [46], char const (&) [142])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [165], true>(char const (&) [41], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [238], true>(char const (&) [41], char const (&) [238])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [139], true>(char const (&) [40], char const (&) [139])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [189], true>(char const (&) [40], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [215], true>(char const (&) [40], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [135], true>(char const (&) [36], char const (&) [135])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [177], true>(char const (&) [40], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [239], true>(char const (&) [43], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [167], true>(char const (&) [42], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [187], true>(char const (&) [55], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [281], true>(char const (&) [67], char const (&) [281])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [144], true>(char const (&) [45], char const (&) [144])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [187], true>(char const (&) [45], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [243], true>(char const (&) [60], char const (&) [243])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [288], true>(char const (&) [60], char const (&) [288])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [244], true>(char const (&) [64], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [255], true>(char const (&) [59], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [152], true>(char const (&) [53], char const (&) [152])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [178], true>(char const (&) [49], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [308], true>(char const (&) [42], char const (&) [308])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [199], true>(char const (&) [46], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [180], true>(char const (&) [42], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [241], true>(char const (&) [71], char const (&) [241])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [192], true>(char const (&) [48], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [197], true>(char const (&) [45], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [140], true>(char const (&) [41], char const (&) [140])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [178], true>(char const (&) [41], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [159], true>(char const (&) [36], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [198], true>(char const (&) [49], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [177], true>(char const (&) [50], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [198], true>(char const (&) [53], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [373], true>(char const (&) [47], char const (&) [373])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [171], true>(char const (&) [42], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [168], true>(char const (&) [42], char const (&) [168])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [136], true>(char const (&) [37], char const (&) [136])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [143], true>(char const (&) [44], char const (&) [143])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [163], true>(char const (&) [49], char const (&) [163])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [272], true>(char const (&) [49], char const (&) [272])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [197], true>(char const (&) [57], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [147], true>(char const (&) [48], char const (&) [147])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [194], true>(char const (&) [48], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [195], true>(char const (&) [52], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [188], true>(char const (&) [50], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [192], true>(char const (&) [47], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [202], true>(char const (&) [52], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [137], true>(char const (&) [38], char const (&) [137])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [172], true>(char const (&) [38], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [156], true>(char const (&) [60], char const (&) [156])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [232], true>(char const (&) [67], char const (&) [232])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [153], true>(char const (&) [54], char const (&) [153])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [206], true>(char const (&) [54], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [145], true>(char const (&) [46], char const (&) [145])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [190], true>(char const (&) [46], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [212], true>(char const (&) [57], char const (&) [212])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [210], true>(char const (&) [56], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [290], true>(char const (&) [60], char const (&) [290])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [216], true>(char const (&) [59], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [259], true>(char const (&) [45], char const (&) [259])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [195], true>(char const (&) [43], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [203], true>(char const (&) [48], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [235], true>(char const (&) [53], char const (&) [235])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [175], true>(char const (&) [58], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [184], true>(char const (&) [44], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [253], true>(char const (&) [46], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [193], true>(char const (&) [58], char const (&) [193])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [251], true>(char const (&) [51], char const (&) [251])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [104], char const (&) [425], true>(char const (&) [104], char const (&) [425])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [109], char const (&) [441], true>(char const (&) [109], char const (&) [441])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [82], char const (&) [206], true>(char const (&) [82], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [228], true>(char const (&) [64], char const (&) [228])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [253], true>(char const (&) [51], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [356], true>(char const (&) [49], char const (&) [356])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [231], true>(char const (&) [49], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [188], true>(char const (&) [46], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [242], true>(char const (&) [71], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [277], true>(char const (&) [55], char const (&) [277])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [205], true>(char const (&) [54], char const (&) [205])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [236], true>(char const (&) [54], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [183], true>(char const (&) [48], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [151], true>(char const (&) [52], char const (&) [151])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [201], true>(char const (&) [52], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [183], true>(char const (&) [58], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [204], true>(char const (&) [53], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [186], true>(char const (&) [58], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [243], true>(char const (&) [44], char const (&) [243])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [191], true>(char const (&) [48], char const (&) [191])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [180], true>(char const (&) [55], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [207], true>(char const (&) [55], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [197], true>(char const (&) [54], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [210], true>(char const (&) [61], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [250], true>(char const (&) [63], char const (&) [250])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [203], true>(char const (&) [56], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [215], true>(char const (&) [58], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [168], true>(char const (&) [36], char const (&) [168])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [203], true>(char const (&) [39], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [146], true>(char const (&) [50], char const (&) [146])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [183], true>(char const (&) [45], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [165], true>(char const (&) [50], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [193], true>(char const (&) [48], char const (&) [193])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [168], true>(char const (&) [43], char const (&) [168])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [189], true>(char const (&) [46], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [184], true>(char const (&) [48], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [198], true>(char const (&) [55], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [189], true>(char const (&) [57], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [303], true>(char const (&) [45], char const (&) [303])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [215], true>(char const (&) [54], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [208], true>(char const (&) [47], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [137], true>(char const (&) [41], char const (&) [137])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [165], true>(char const (&) [35], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [240], true>(char const (&) [59], char const (&) [240])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [196], true>(char const (&) [49], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [219], true>(char const (&) [54], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [241], true>(char const (&) [60], char const (&) [241])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [183], true>(char const (&) [44], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [177], true>(char const (&) [41], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [197], true>(char const (&) [50], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [224], true>(char const (&) [59], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [185], true>(char const (&) [39], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [305], true>(char const (&) [35], char const (&) [305])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [171], true>(char const (&) [37], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [167], true>(char const (&) [50], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [143], true>(char const (&) [47], char const (&) [143])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [153], true>(char const (&) [42], char const (&) [153])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [204], true>(char const (&) [42], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [316], true>(char const (&) [48], char const (&) [316])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [239], true>(char const (&) [48], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [250], true>(char const (&) [48], char const (&) [250])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [255], true>(char const (&) [52], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [321], true>(char const (&) [56], char const (&) [321])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [263], true>(char const (&) [46], char const (&) [263])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [192], true>(char const (&) [46], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [199], true>(char const (&) [50], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [248], true>(char const (&) [64], char const (&) [248])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [240], true>(char const (&) [48], char const (&) [240])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [330], true>(char const (&) [48], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [313], true>(char const (&) [48], char const (&) [313])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [337], true>(char const (&) [48], char const (&) [337])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [255], true>(char const (&) [48], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [242], true>(char const (&) [62], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [295], true>(char const (&) [51], char const (&) [295])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [204], true>(char const (&) [46], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [210], true>(char const (&) [46], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [404], true>(char const (&) [48], char const (&) [404])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [309], true>(char const (&) [48], char const (&) [309])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [178], true>(char const (&) [48], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [145], true>(char const (&) [49], char const (&) [145])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [215], true>(char const (&) [43], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [184], true>(char const (&) [34], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [217], true>(char const (&) [34], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [235], true>(char const (&) [32], char const (&) [235])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [255], true>(char const (&) [32], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [253], true>(char const (&) [33], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [188], true>(char const (&) [42], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [330], true>(char const (&) [32], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [248], true>(char const (&) [33], char const (&) [248])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [231], true>(char const (&) [32], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [279], true>(char const (&) [32], char const (&) [279])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [311], true>(char const (&) [32], char const (&) [311])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [302], true>(char const (&) [32], char const (&) [302])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [367], true>(char const (&) [32], char const (&) [367])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [230], true>(char const (&) [32], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [203], true>(char const (&) [32], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [294], true>(char const (&) [32], char const (&) [294])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [264], true>(char const (&) [33], char const (&) [264])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [313], true>(char const (&) [30], char const (&) [313])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [325], true>(char const (&) [30], char const (&) [325])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [355], true>(char const (&) [32], char const (&) [355])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [216], true>(char const (&) [32], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [259], true>(char const (&) [33], char const (&) [259])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [306], true>(char const (&) [34], char const (&) [306])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [154], true>(char const (&) [36], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [155], true>(char const (&) [36], char const (&) [155])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [265], true>(char const (&) [35], char const (&) [265])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [303], true>(char const (&) [35], char const (&) [303])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [217], true>(char const (&) [35], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [262], true>(char const (&) [36], char const (&) [262])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [199], true>(char const (&) [39], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [176], true>(char const (&) [39], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [213], true>(char const (&) [39], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [276], true>(char const (&) [39], char const (&) [276])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [322], true>(char const (&) [39], char const (&) [322])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [167], true>(char const (&) [43], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [206], true>(char const (&) [43], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [152], true>(char const (&) [39], char const (&) [152])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [173], true>(char const (&) [41], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [264], true>(char const (&) [41], char const (&) [264])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [212], true>(char const (&) [41], char const (&) [212])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [333], true>(char const (&) [35], char const (&) [333])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [175], true>(char const (&) [43], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [317], true>(char const (&) [38], char const (&) [317])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [391], true>(char const (&) [38], char const (&) [391])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [225], true>(char const (&) [38], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [172], true>(char const (&) [46], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [278], true>(char const (&) [42], char const (&) [278])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [293], true>(char const (&) [42], char const (&) [293])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [270], true>(char const (&) [42], char const (&) [270])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [304], true>(char const (&) [42], char const (&) [304])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [171], true>(char const (&) [38], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [249], true>(char const (&) [49], char const (&) [249])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [169], true>(char const (&) [52], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [234], true>(char const (&) [35], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [253], true>(char const (&) [35], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [267], true>(char const (&) [36], char const (&) [267])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [191], true>(char const (&) [45], char const (&) [191])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [187], true>(char const (&) [37], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [196], true>(char const (&) [45], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [156], true>(char const (&) [51], char const (&) [156])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [162], true>(char const (&) [57], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [161], true>(char const (&) [47], char const (&) [161])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [201], true>(char const (&) [50], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [200], true>(char const (&) [46], char const (&) [200])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [198], true>(char const (&) [46], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [141], true>(char const (&) [45], char const (&) [141])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [297], true>(char const (&) [39], char const (&) [297])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [443], true>(char const (&) [39], char const (&) [443])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [445], true>(char const (&) [39], char const (&) [445])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [418], true>(char const (&) [39], char const (&) [418])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [485], true>(char const (&) [39], char const (&) [485])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [235], true>(char const (&) [50], char const (&) [235])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [225], true>(char const (&) [42], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [173], true>(char const (&) [46], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [295], true>(char const (&) [59], char const (&) [295])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [170], true>(char const (&) [53], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [199], true>(char const (&) [53], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [242], true>(char const (&) [54], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [222], true>(char const (&) [54], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [213], true>(char const (&) [46], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [179], true>(char const (&) [41], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [275], true>(char const (&) [51], char const (&) [275])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [173], true>(char const (&) [51], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [182], true>(char const (&) [54], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [224], true>(char const (&) [58], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [223], true>(char const (&) [41], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [177], true>(char const (&) [52], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [283], true>(char const (&) [58], char const (&) [283])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [186], true>(char const (&) [61], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [154], true>(char const (&) [55], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [211], true>(char const (&) [71], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [208], true>(char const (&) [55], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [256], true>(char const (&) [60], char const (&) [256])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [183], true>(char const (&) [52], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [221], true>(char const (&) [57], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [168], true>(char const (&) [49], char const (&) [168])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [230], true>(char const (&) [45], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [210], true>(char const (&) [59], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [246], true>(char const (&) [53], char const (&) [246])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [147], true>(char const (&) [51], char const (&) [147])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [214], true>(char const (&) [48], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [314], true>(char const (&) [48], char const (&) [314])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [297], true>(char const (&) [48], char const (&) [297])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [194], true>(char const (&) [45], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [254], true>(char const (&) [48], char const (&) [254])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [190], true>(char const (&) [47], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [226], true>(char const (&) [43], char const (&) [226])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [235], true>(char const (&) [52], char const (&) [235])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [149], true>(char const (&) [50], char const (&) [149])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [204], true>(char const (&) [39], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [176], true>(char const (&) [48], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [229], true>(char const (&) [68], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [69], char const (&) [231], true>(char const (&) [69], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [246], true>(char const (&) [57], char const (&) [246])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [197], true>(char const (&) [64], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [162], true>(char const (&) [62], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [184], true>(char const (&) [51], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [170], true>(char const (&) [42], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [174], true>(char const (&) [55], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [160], true>(char const (&) [60], char const (&) [160])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [209], true>(char const (&) [55], char const (&) [209])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [161], true>(char const (&) [61], char const (&) [161])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [199], true>(char const (&) [64], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [182], true>(char const (&) [50], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [175], true>(char const (&) [56], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [233], true>(char const (&) [67], char const (&) [233])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [69], char const (&) [237], true>(char const (&) [69], char const (&) [237])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [65], char const (&) [228], true>(char const (&) [65], char const (&) [228])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [224], true>(char const (&) [63], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [150], true>(char const (&) [51], char const (&) [150])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [199], true>(char const (&) [51], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [178], true>(char const (&) [55], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [172], true>(char const (&) [53], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [209], true>(char const (&) [56], char const (&) [209])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [198], true>(char const (&) [51], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [202], true>(char const (&) [53], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [211], true>(char const (&) [57], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [220], true>(char const (&) [61], char const (&) [220])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [155], true>(char const (&) [56], char const (&) [155])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [211], true>(char const (&) [56], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [178], true>(char const (&) [59], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [205], true>(char const (&) [60], char const (&) [205])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [200], true>(char const (&) [52], char const (&) [200])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [236], true>(char const (&) [68], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [247], true>(char const (&) [53], char const (&) [247])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [237], true>(char const (&) [54], char const (&) [237])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [77], char const (&) [360], true>(char const (&) [77], char const (&) [360])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [189], true>(char const (&) [64], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [365], true>(char const (&) [67], char const (&) [365])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [207], true>(char const (&) [71], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [225], true>(char const (&) [63], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [162], true>(char const (&) [66], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [157], true>(char const (&) [61], char const (&) [157])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [158], true>(char const (&) [62], char const (&) [158])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [549], true>(char const (&) [53], char const (&) [549])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [472], true>(char const (&) [53], char const (&) [472])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [501], true>(char const (&) [53], char const (&) [501])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [516], true>(char const (&) [53], char const (&) [516])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [410], true>(char const (&) [50], char const (&) [410])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [368], true>(char const (&) [50], char const (&) [368])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [383], true>(char const (&) [50], char const (&) [383])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [408], true>(char const (&) [50], char const (&) [408])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [423], true>(char const (&) [50], char const (&) [423])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [225], true>(char const (&) [53], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [65], char const (&) [189], true>(char const (&) [65], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [188], true>(char const (&) [64], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [364], true>(char const (&) [60], char const (&) [364])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [179], true>(char const (&) [54], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [224], true>(char const (&) [49], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [178], true>(char const (&) [53], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [329], true>(char const (&) [49], char const (&) [329])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [240], true>(char const (&) [55], char const (&) [240])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [184], true>(char const (&) [52], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [213], true>(char const (&) [59], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [219], true>(char const (&) [60], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [428], true>(char const (&) [42], char const (&) [428])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [219], true>(char const (&) [44], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [167], true>(char const (&) [35], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [170], true>(char const (&) [52], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [175], true>(char const (&) [57], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [264], true>(char const (&) [43], char const (&) [264])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [171], true>(char const (&) [47], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [252], true>(char const (&) [49], char const (&) [252])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [175], true>(char const (&) [48], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [338], true>(char const (&) [47], char const (&) [338])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [396], true>(char const (&) [48], char const (&) [396])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [330], true>(char const (&) [40], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [169], true>(char const (&) [53], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [400], true>(char const (&) [52], char const (&) [400])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [238], true>(char const (&) [53], char const (&) [238])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [186], true>(char const (&) [44], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [243], true>(char const (&) [58], char const (&) [243])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [187], true>(char const (&) [63], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [198], true>(char const (&) [45], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [166], true>(char const (&) [45], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [227], true>(char const (&) [42], char const (&) [227])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [179], true>(char const (&) [46], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [212], true>(char const (&) [55], char const (&) [212])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [224], true>(char const (&) [55], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [205], true>(char const (&) [55], char const (&) [205])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [223], true>(char const (&) [53], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [194], true>(char const (&) [61], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [251], true>(char const (&) [46], char const (&) [251])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [174], true>(char const (&) [49], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [179], true>(char const (&) [42], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [242], true>(char const (&) [42], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [170], true>(char const (&) [51], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [287], true>(char const (&) [42], char const (&) [287])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [309], true>(char const (&) [42], char const (&) [309])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [251], true>(char const (&) [42], char const (&) [251])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [166], true>(char const (&) [49], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [191], true>(char const (&) [40], char const (&) [191])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [199], true>(char const (&) [41], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [173], true>(char const (&) [43], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [196], true>(char const (&) [35], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [195], true>(char const (&) [39], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [223], true>(char const (&) [44], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [170], true>(char const (&) [44], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [160], true>(char const (&) [39], char const (&) [160])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [264], true>(char const (&) [46], char const (&) [264])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [154], true>(char const (&) [30], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [175], true>(char const (&) [46], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [234], true>(char const (&) [47], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [285], true>(char const (&) [45], char const (&) [285])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [240], true>(char const (&) [44], char const (&) [240])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [312], true>(char const (&) [44], char const (&) [312])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [161], true>(char const (&) [54], char const (&) [161])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [221], true>(char const (&) [42], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [194], true>(char const (&) [42], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [241], true>(char const (&) [51], char const (&) [241])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [288], true>(char const (&) [49], char const (&) [288])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [244], true>(char const (&) [48], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [207], true>(char const (&) [52], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [165], true>(char const (&) [58], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [225], true>(char const (&) [46], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [194], true>(char const (&) [46], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [277], true>(char const (&) [37], char const (&) [277])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [218], true>(char const (&) [43], char const (&) [218])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [228], true>(char const (&) [53], char const (&) [228])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [195], true>(char const (&) [42], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [233], true>(char const (&) [50], char const (&) [233])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [285], true>(char const (&) [54], char const (&) [285])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [238], true>(char const (&) [47], char const (&) [238])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [199], true>(char const (&) [47], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [221], true>(char const (&) [47], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [293], true>(char const (&) [58], char const (&) [293])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [192], true>(char const (&) [54], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [170], true>(char const (&) [37], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [216], true>(char const (&) [43], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [328], true>(char const (&) [51], char const (&) [328])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [190], true>(char const (&) [57], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [375], true>(char const (&) [50], char const (&) [375])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [229], true>(char const (&) [50], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [253], true>(char const (&) [48], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [172], true>(char const (&) [48], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [257], true>(char const (&) [58], char const (&) [257])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [199], true>(char const (&) [67], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [210], true>(char const (&) [54], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [172], true>(char const (&) [42], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [31], char const (&) [159], true>(char const (&) [31], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [159], true>(char const (&) [67], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [219], true>(char const (&) [66], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [24], char const (&) [162], true>(char const (&) [24], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [179], true>(char const (&) [49], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [254], true>(char const (&) [67], char const (&) [254])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [269], true>(char const (&) [68], char const (&) [269])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [253], true>(char const (&) [66], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [268], true>(char const (&) [67], char const (&) [268])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [355], true>(char const (&) [47], char const (&) [355])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [344], true>(char const (&) [47], char const (&) [344])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [403], true>(char const (&) [47], char const (&) [403])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [330], true>(char const (&) [47], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [184], true>(char const (&) [43], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [162], true>(char const (&) [42], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [246], true>(char const (&) [40], char const (&) [246])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [192], true>(char const (&) [43], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [166], true>(char const (&) [43], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [166], true>(char const (&) [47], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [221], true>(char const (&) [54], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [249], true>(char const (&) [56], char const (&) [249])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [158], true>(char const (&) [39], char const (&) [158])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [206], true>(char const (&) [46], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [228], true>(char const (&) [43], char const (&) [228])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [187], true>(char const (&) [46], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [183], true>(char const (&) [50], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [311], true>(char const (&) [35], char const (&) [311])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [160], true>(char const (&) [41], char const (&) [160])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [166], true>(char const (&) [41], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [161], true>(char const (&) [42], char const (&) [161])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [230], true>(char const (&) [46], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [301], true>(char const (&) [34], char const (&) [301])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [159], true>(char const (&) [40], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [300], true>(char const (&) [35], char const (&) [300])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [156], true>(char const (&) [39], char const (&) [156])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [184], true>(char const (&) [37], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [300], true>(char const (&) [34], char const (&) [300])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [196], true>(char const (&) [63], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [237], true>(char const (&) [56], char const (&) [237])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [224], true>(char const (&) [43], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [178], true>(char const (&) [45], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [222], true>(char const (&) [34], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [166], true>(char const (&) [38], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [217], true>(char const (&) [48], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [175], true>(char const (&) [50], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [174], true>(char const (&) [45], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [605], true>(char const (&) [46], char const (&) [605])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [217], true>(char const (&) [53], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [221], true>(char const (&) [52], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [187], true>(char const (&) [54], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [609], true>(char const (&) [50], char const (&) [609])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [223], true>(char const (&) [58], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [232], true>(char const (&) [51], char const (&) [232])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [186], true>(char const (&) [53], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [273], true>(char const (&) [44], char const (&) [273])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [335], true>(char const (&) [51], char const (&) [335])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [162], true>(char const (&) [43], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [224], true>(char const (&) [39], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [170], true>(char const (&) [46], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [180], true>(char const (&) [47], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [172], true>(char const (&) [47], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [461], true>(char const (&) [38], char const (&) [461])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [185], true>(char const (&) [52], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [244], true>(char const (&) [41], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [219], true>(char const (&) [43], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [243], true>(char const (&) [43], char const (&) [243])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [177], true>(char const (&) [44], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [169], true>(char const (&) [44], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [230], true>(char const (&) [33], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [195], true>(char const (&) [35], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [225], true>(char const (&) [35], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [193], true>(char const (&) [35], char const (&) [193])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [242], true>(char const (&) [35], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [192], true>(char const (&) [35], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [159], true>(char const (&) [39], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [208], true>(char const (&) [41], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [176], true>(char const (&) [45], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [273], true>(char const (&) [41], char const (&) [273])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [314], true>(char const (&) [41], char const (&) [314])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [222], true>(char const (&) [35], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [227], true>(char const (&) [35], char const (&) [227])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [208], true>(char const (&) [39], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [159], true>(char const (&) [44], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [31], char const (&) [178], true>(char const (&) [31], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [201], true>(char const (&) [35], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [176], true>(char const (&) [51], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [218], true>(char const (&) [46], char const (&) [218])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [195], true>(char const (&) [38], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [245], true>(char const (&) [44], char const (&) [245])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [189], true>(char const (&) [43], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [347], true>(char const (&) [40], char const (&) [347])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [182], true>(char const (&) [57], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [230], true>(char const (&) [51], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [191], true>(char const (&) [44], char const (&) [191])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [218], true>(char const (&) [41], char const (&) [218])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [199], true>(char const (&) [37], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [228], true>(char const (&) [37], char const (&) [228])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [163], true>(char const (&) [41], char const (&) [163])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [206], true>(char const (&) [37], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [179], true>(char const (&) [32], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [224], true>(char const (&) [32], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [225], true>(char const (&) [48], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [223], true>(char const (&) [48], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [241], true>(char const (&) [50], char const (&) [241])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [239], true>(char const (&) [41], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [203], true>(char const (&) [43], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [233], true>(char const (&) [43], char const (&) [233])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [188], true>(char const (&) [43], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [204], true>(char const (&) [43], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [167], true>(char const (&) [47], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [279], true>(char const (&) [49], char const (&) [279])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [216], true>(char const (&) [49], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [184], true>(char const (&) [53], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [339], true>(char const (&) [46], char const (&) [339])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [285], true>(char const (&) [51], char const (&) [285])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [275], true>(char const (&) [43], char const (&) [275])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [229], true>(char const (&) [43], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [222], true>(char const (&) [47], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [167], true>(char const (&) [52], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [186], true>(char const (&) [39], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [206], true>(char const (&) [44], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [235], true>(char const (&) [44], char const (&) [235])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [170], true>(char const (&) [48], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [245], true>(char const (&) [41], char const (&) [245])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [322], true>(char const (&) [36], char const (&) [322])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [256], true>(char const (&) [35], char const (&) [256])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [234], true>(char const (&) [53], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [188], true>(char const (&) [55], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [209], true>(char const (&) [47], char const (&) [209])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [193], true>(char const (&) [47], char const (&) [193])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [249], true>(char const (&) [47], char const (&) [249])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [375], true>(char const (&) [30], char const (&) [375])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [176], true>(char const (&) [43], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [211], true>(char const (&) [37], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [177], true>(char const (&) [30], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [201], true>(char const (&) [40], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [232], true>(char const (&) [41], char const (&) [232])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [181], true>(char const (&) [34], char const (&) [181])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [223], true>(char const (&) [38], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [383], true>(char const (&) [38], char const (&) [383])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [217], true>(char const (&) [49], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [225], true>(char const (&) [40], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [26], char const (&) [372], true>(char const (&) [26], char const (&) [372])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [172], true>(char const (&) [39], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [164], true>(char const (&) [39], char const (&) [164])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [379], true>(char const (&) [33], char const (&) [379])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [213], true>(char const (&) [44], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [171], true>(char const (&) [46], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [179], true>(char const (&) [33], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [387], true>(char const (&) [41], char const (&) [387])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [472], true>(char const (&) [49], char const (&) [472])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [488], true>(char const (&) [49], char const (&) [488])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [316], true>(char const (&) [49], char const (&) [316])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [275], true>(char const (&) [49], char const (&) [275])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [236], true>(char const (&) [49], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [283], true>(char const (&) [49], char const (&) [283])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [511], true>(char const (&) [49], char const (&) [511])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [435], true>(char const (&) [49], char const (&) [435])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [436], true>(char const (&) [49], char const (&) [436])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [395], true>(char const (&) [49], char const (&) [395])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [315], true>(char const (&) [49], char const (&) [315])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [239], true>(char const (&) [51], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [214], true>(char const (&) [51], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [395], true>(char const (&) [58], char const (&) [395])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [383], true>(char const (&) [58], char const (&) [383])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [440], true>(char const (&) [58], char const (&) [440])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [229], true>(char const (&) [60], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [195], true>(char const (&) [62], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [187], true>(char const (&) [62], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [249], true>(char const (&) [51], char const (&) [249])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [279], true>(char const (&) [56], char const (&) [279])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [316], true>(char const (&) [56], char const (&) [316])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [224], true>(char const (&) [56], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [184], true>(char const (&) [60], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [184], true>(char const (&) [62], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [307], true>(char const (&) [58], char const (&) [307])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [317], true>(char const (&) [57], char const (&) [317])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [70], char const (&) [345], true>(char const (&) [70], char const (&) [345])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [162], true>(char const (&) [51], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [332], true>(char const (&) [55], char const (&) [332])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [451], true>(char const (&) [66], char const (&) [451])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [236], true>(char const (&) [51], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [340], true>(char const (&) [52], char const (&) [340])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [380], true>(char const (&) [34], char const (&) [380])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [224], true>(char const (&) [36], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [214], true>(char const (&) [45], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [249], true>(char const (&) [39], char const (&) [249])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [325], true>(char const (&) [37], char const (&) [325])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [465], true>(char const (&) [42], char const (&) [465])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [481], true>(char const (&) [42], char const (&) [481])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [268], true>(char const (&) [42], char const (&) [268])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [229], true>(char const (&) [42], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [276], true>(char const (&) [42], char const (&) [276])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [224], true>(char const (&) [42], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [504], true>(char const (&) [42], char const (&) [504])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [429], true>(char const (&) [42], char const (&) [429])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [388], true>(char const (&) [42], char const (&) [388])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [232], true>(char const (&) [44], char const (&) [232])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [207], true>(char const (&) [44], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [388], true>(char const (&) [51], char const (&) [388])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [376], true>(char const (&) [51], char const (&) [376])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [433], true>(char const (&) [51], char const (&) [433])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [222], true>(char const (&) [53], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [242], true>(char const (&) [44], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [269], true>(char const (&) [49], char const (&) [269])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [306], true>(char const (&) [49], char const (&) [306])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [242], true>(char const (&) [49], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [177], true>(char const (&) [53], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [177], true>(char const (&) [55], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [293], true>(char const (&) [51], char const (&) [293])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [303], true>(char const (&) [50], char const (&) [303])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [338], true>(char const (&) [63], char const (&) [338])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [155], true>(char const (&) [44], char const (&) [155])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [325], true>(char const (&) [48], char const (&) [325])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [444], true>(char const (&) [59], char const (&) [444])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [222], true>(char const (&) [44], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [333], true>(char const (&) [45], char const (&) [333])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [165], true>(char const (&) [48], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [189], true>(char const (&) [56], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [181], true>(char const (&) [56], char const (&) [181])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [222], true>(char const (&) [41], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [181], true>(char const (&) [48], char const (&) [181])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [173], true>(char const (&) [48], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [181], true>(char const (&) [35], char const (&) [181])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [179], true>(char const (&) [57], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [344], true>(char const (&) [41], char const (&) [344])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [238], true>(char const (&) [57], char const (&) [238])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [213], true>(char const (&) [56], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [241], true>(char const (&) [45], char const (&) [241])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [313], true>(char const (&) [45], char const (&) [313])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [204], true>(char const (&) [49], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [162], true>(char const (&) [55], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [234], true>(char const (&) [60], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [149], true>(char const (&) [41], char const (&) [149])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [229], true>(char const (&) [44], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [199], true>(char const (&) [59], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [290], true>(char const (&) [41], char const (&) [290])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [192], true>(char const (&) [67], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [154], true>(char const (&) [37], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [193], true>(char const (&) [41], char const (&) [193])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [182], true>(char const (&) [49], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [226], true>(char const (&) [38], char const (&) [226])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [233], true>(char const (&) [36], char const (&) [233])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [228], true>(char const (&) [38], char const (&) [228])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [274], true>(char const (&) [44], char const (&) [274])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [211], true>(char const (&) [44], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [247], true>(char const (&) [44], char const (&) [247])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [179], true>(char const (&) [48], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [276], true>(char const (&) [44], char const (&) [276])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [317], true>(char const (&) [44], char const (&) [317])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [190], true>(char const (&) [38], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [224], true>(char const (&) [34], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [202], true>(char const (&) [44], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [180], true>(char const (&) [46], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [82], char const (&) [180], true>(char const (&) [82], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [81], char const (&) [244], true>(char const (&) [81], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [278], true>(char const (&) [41], char const (&) [278])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [152], true>(char const (&) [35], char const (&) [152])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [223], true>(char const (&) [54], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [193], true>(char const (&) [40], char const (&) [193])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [205], true>(char const (&) [34], char const (&) [205])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [158], true>(char const (&) [55], char const (&) [158])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [196], true>(char const (&) [42], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [220], true>(char const (&) [43], char const (&) [220])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [236], true>(char const (&) [40], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [308], true>(char const (&) [40], char const (&) [308])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [199], true>(char const (&) [44], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [157], true>(char const (&) [50], char const (&) [157])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [158], true>(char const (&) [44], char const (&) [158])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [398], true>(char const (&) [43], char const (&) [398])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [198], true>(char const (&) [47], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [173], true>(char const (&) [50], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [237], true>(char const (&) [52], char const (&) [237])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [220], true>(char const (&) [53], char const (&) [220])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [156], true>(char const (&) [37], char const (&) [156])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [226], true>(char const (&) [41], char const (&) [226])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [198], true>(char const (&) [42], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [175], true>(char const (&) [40], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [231], true>(char const (&) [46], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [177], true>(char const (&) [58], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [216], true>(char const (&) [51], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [242], true>(char const (&) [57], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [230], true>(char const (&) [58], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [234], true>(char const (&) [49], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [214], true>(char const (&) [50], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [203], true>(char const (&) [54], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [169], true>(char const (&) [50], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [239], true>(char const (&) [54], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [169], true>(char const (&) [46], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [233], true>(char const (&) [48], char const (&) [233])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [212], true>(char const (&) [49], char const (&) [212])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [184], true>(char const (&) [46], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [245], true>(char const (&) [60], char const (&) [245])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [236], true>(char const (&) [61], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [186], true>(char const (&) [48], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [157], true>(char const (&) [38], char const (&) [157])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [200], true>(char const (&) [43], char const (&) [200])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [181], true>(char const (&) [47], char const (&) [181])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [221], true>(char const (&) [63], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [232], true>(char const (&) [47], char const (&) [232])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [210], true>(char const (&) [48], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [171], true>(char const (&) [52], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [230], true>(char const (&) [34], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [200], true>(char const (&) [42], char const (&) [200])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [217], true>(char const (&) [42], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [220], true>(char const (&) [44], char const (&) [220])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [215], true>(char const (&) [48], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [222], true>(char const (&) [45], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [225], true>(char const (&) [52], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [179], true>(char const (&) [56], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [254], true>(char const (&) [50], char const (&) [254])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [230], true>(char const (&) [54], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [231], true>(char const (&) [51], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [165], true>(char const (&) [46], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [246], true>(char const (&) [61], char const (&) [246])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [227], true>(char const (&) [32], char const (&) [227])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [202], true>(char const (&) [32], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [185], true>(char const (&) [36], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [204], true>(char const (&) [33], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [197], true>(char const (&) [40], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [239], true>(char const (&) [40], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [214], true>(char const (&) [40], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [205], true>(char const (&) [44], char const (&) [205])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [216], true>(char const (&) [41], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [176], true>(char const (&) [57], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [69], char const (&) [239], true>(char const (&) [69], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [234], true>(char const (&) [58], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [236], true>(char const (&) [38], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [211], true>(char const (&) [38], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [226], true>(char const (&) [48], char const (&) [226])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [202], true>(char const (&) [67], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [198], true>(char const (&) [63], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [208], true>(char const (&) [63], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [154], true>(char const (&) [35], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [215], true>(char const (&) [52], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [180], true>(char const (&) [61], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [196], true>(char const (&) [61], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [195], true>(char const (&) [60], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [225], true>(char const (&) [62], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [203], true>(char const (&) [68], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [155], true>(char const (&) [38], char const (&) [155])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [213], true>(char const (&) [51], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [210], true>(char const (&) [62], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [80], char const (&) [261], true>(char const (&) [80], char const (&) [261])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [76], char const (&) [211], true>(char const (&) [76], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [75], char const (&) [210], true>(char const (&) [75], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [206], true>(char const (&) [71], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [70], char const (&) [205], true>(char const (&) [70], char const (&) [205])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [74], char const (&) [209], true>(char const (&) [74], char const (&) [209])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [73], char const (&) [208], true>(char const (&) [73], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [77], char const (&) [212], true>(char const (&) [77], char const (&) [212])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [201], true>(char const (&) [66], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [79], char const (&) [245], true>(char const (&) [79], char const (&) [245])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [72], char const (&) [207], true>(char const (&) [72], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [73], char const (&) [296], true>(char const (&) [73], char const (&) [296])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [249], true>(char const (&) [60], char const (&) [249])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [244], true>(char const (&) [55], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [177], true>(char const (&) [49], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [302], true>(char const (&) [41], char const (&) [302])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::~pair()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::~pair()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::~pair()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::~pair()
vkEnumerateInstanceExtensionProperties
vkEnumerateInstanceLayerProperties
vkEnumerateDeviceLayerProperties
vkNegotiateLoaderLayerInterfaceVersion
vkGetInstanceProcAddr
vkGetDeviceProcAddr
vk_layerGetPhysicalDeviceProcAddr(VkInstance_T*, char const*)
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>> const&)
memmove
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>> const&)
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::initializer_list<InstanceExtensions::InstanceReq>, std::allocator<InstanceExtensions::InstanceReq> const&)
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::initializer_list<InstanceExtensions::InstanceReq>, std::allocator<InstanceExtensions::InstanceReq> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::pair<char const*, InstanceExtensions::InstanceInfo, true>(std::pair<char const*, InstanceExtensions::InstanceInfo>&&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::pair<char const*, InstanceExtensions::InstanceInfo, true>(std::pair<char const*, InstanceExtensions::InstanceInfo>&&)
std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>>::vector(std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>> const&)
std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>>::vector(std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::pair<char const*, DeviceExtensions::DeviceInfo, true>(std::pair<char const*, DeviceExtensions::DeviceInfo>&&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::pair<char const*, DeviceExtensions::DeviceInfo, true>(std::pair<char const*, DeviceExtensions::DeviceInfo>&&)
void FreeLayerDataPtr<instance_layer_data>(void*, std::unordered_map<void*, instance_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, instance_layer_data*>>>&)
std::unique_lock<std::mutex>::unlock()
std::__throw_system_error(int)
void FreeLayerDataPtr<device_layer_data>(void*, std::unordered_map<void*, device_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, device_layer_data*>>>&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_erase(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*)
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::~set()
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::~set()
void std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_M_assign<std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_Hashtable(std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>> const&)::'lambda'(std::__detail::_Hash_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, true> const*)>(std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>> const&, std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_Hashtable(std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>> const&)::'lambda'(std::__detail::_Hash_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, true> const*) const&)
__cxa_begin_catch
__cxa_rethrow
__cxa_end_catch
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::_Hash_bytes(void const*, unsigned long, unsigned long)
memcmp
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&)
std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const
std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::set(std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::set(std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<void*, std::pair<void* const, device_layer_data*>, std::allocator<std::pair<void* const, device_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<void*, std::pair<void* const, device_layer_data*>, std::allocator<std::pair<void* const, device_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, device_layer_data*>, false>*)
vulkan_layer_factory::GetDeviceProcAddr(VkDevice_T*, char const*)
vulkan_layer_factory::name_to_funcptr_map[abi:cxx11]
vulkan_layer_factory::DestroyDevice(VkDevice_T*, VkAllocationCallbacks const*)
global_interceptor_list
vulkan_layer_factory::GetDeviceQueue(VkDevice_T*, unsigned int, unsigned int, VkQueue_T**)
vulkan_layer_factory::QueueSubmit(VkQueue_T*, unsigned int, VkSubmitInfo const*, VkFence_T*)
vulkan_layer_factory::QueueWaitIdle(VkQueue_T*)
vulkan_layer_factory::DeviceWaitIdle(VkDevice_T*)
vulkan_layer_factory::AllocateMemory(VkDevice_T*, VkMemoryAllocateInfo const*, VkAllocationCallbacks const*, VkDeviceMemory_T**)
vulkan_layer_factory::FreeMemory(VkDevice_T*, VkDeviceMemory_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::MapMemory(VkDevice_T*, VkDeviceMemory_T*, unsigned long, unsigned long, unsigned int, void**)
vulkan_layer_factory::UnmapMemory(VkDevice_T*, VkDeviceMemory_T*)
vulkan_layer_factory::FlushMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
vulkan_layer_factory::InvalidateMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
vulkan_layer_factory::GetDeviceMemoryCommitment(VkDevice_T*, VkDeviceMemory_T*, unsigned long*)
vulkan_layer_factory::BindBufferMemory(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned long)
vulkan_layer_factory::BindImageMemory(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, unsigned long)
vulkan_layer_factory::GetBufferMemoryRequirements(VkDevice_T*, VkBuffer_T*, VkMemoryRequirements*)
vulkan_layer_factory::GetImageMemoryRequirements(VkDevice_T*, VkImage_T*, VkMemoryRequirements*)
vulkan_layer_factory::GetImageSparseMemoryRequirements(VkDevice_T*, VkImage_T*, unsigned int*, VkSparseImageMemoryRequirements*)
vulkan_layer_factory::QueueBindSparse(VkQueue_T*, unsigned int, VkBindSparseInfo const*, VkFence_T*)
vulkan_layer_factory::CreateFence(VkDevice_T*, VkFenceCreateInfo const*, VkAllocationCallbacks const*, VkFence_T**)
vulkan_layer_factory::DestroyFence(VkDevice_T*, VkFence_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::ResetFences(VkDevice_T*, unsigned int, VkFence_T* const*)
vulkan_layer_factory::GetFenceStatus(VkDevice_T*, VkFence_T*)
vulkan_layer_factory::WaitForFences(VkDevice_T*, unsigned int, VkFence_T* const*, unsigned int, unsigned long)
vulkan_layer_factory::CreateSemaphore(VkDevice_T*, VkSemaphoreCreateInfo const*, VkAllocationCallbacks const*, VkSemaphore_T**)
vulkan_layer_factory::DestroySemaphore(VkDevice_T*, VkSemaphore_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateEvent(VkDevice_T*, VkEventCreateInfo const*, VkAllocationCallbacks const*, VkEvent_T**)
vulkan_layer_factory::DestroyEvent(VkDevice_T*, VkEvent_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetEventStatus(VkDevice_T*, VkEvent_T*)
vulkan_layer_factory::SetEvent(VkDevice_T*, VkEvent_T*)
vulkan_layer_factory::ResetEvent(VkDevice_T*, VkEvent_T*)
vulkan_layer_factory::CreateQueryPool(VkDevice_T*, VkQueryPoolCreateInfo const*, VkAllocationCallbacks const*, VkQueryPool_T**)
vulkan_layer_factory::DestroyQueryPool(VkDevice_T*, VkQueryPool_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetQueryPoolResults(VkDevice_T*, VkQueryPool_T*, unsigned int, unsigned int, unsigned long, void*, unsigned long, unsigned int)
vulkan_layer_factory::CreateBuffer(VkDevice_T*, VkBufferCreateInfo const*, VkAllocationCallbacks const*, VkBuffer_T**)
vulkan_layer_factory::DestroyBuffer(VkDevice_T*, VkBuffer_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateBufferView(VkDevice_T*, VkBufferViewCreateInfo const*, VkAllocationCallbacks const*, VkBufferView_T**)
vulkan_layer_factory::DestroyBufferView(VkDevice_T*, VkBufferView_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateImage(VkDevice_T*, VkImageCreateInfo const*, VkAllocationCallbacks const*, VkImage_T**)
vulkan_layer_factory::DestroyImage(VkDevice_T*, VkImage_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetImageSubresourceLayout(VkDevice_T*, VkImage_T*, VkImageSubresource const*, VkSubresourceLayout*)
vulkan_layer_factory::CreateImageView(VkDevice_T*, VkImageViewCreateInfo const*, VkAllocationCallbacks const*, VkImageView_T**)
vulkan_layer_factory::DestroyImageView(VkDevice_T*, VkImageView_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateShaderModule(VkDevice_T*, VkShaderModuleCreateInfo const*, VkAllocationCallbacks const*, VkShaderModule_T**)
vulkan_layer_factory::DestroyShaderModule(VkDevice_T*, VkShaderModule_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreatePipelineCache(VkDevice_T*, VkPipelineCacheCreateInfo const*, VkAllocationCallbacks const*, VkPipelineCache_T**)
vulkan_layer_factory::DestroyPipelineCache(VkDevice_T*, VkPipelineCache_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetPipelineCacheData(VkDevice_T*, VkPipelineCache_T*, unsigned long*, void*)
vulkan_layer_factory::MergePipelineCaches(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkPipelineCache_T* const*)
vulkan_layer_factory::CreateGraphicsPipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkGraphicsPipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
vulkan_layer_factory::CreateComputePipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkComputePipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
vulkan_layer_factory::DestroyPipeline(VkDevice_T*, VkPipeline_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreatePipelineLayout(VkDevice_T*, VkPipelineLayoutCreateInfo const*, VkAllocationCallbacks const*, VkPipelineLayout_T**)
vulkan_layer_factory::DestroyPipelineLayout(VkDevice_T*, VkPipelineLayout_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateSampler(VkDevice_T*, VkSamplerCreateInfo const*, VkAllocationCallbacks const*, VkSampler_T**)
vulkan_layer_factory::DestroySampler(VkDevice_T*, VkSampler_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorSetLayout_T**)
vulkan_layer_factory::DestroyDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayout_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateDescriptorPool(VkDevice_T*, VkDescriptorPoolCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorPool_T**)
vulkan_layer_factory::DestroyDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::ResetDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, unsigned int)
vulkan_layer_factory::AllocateDescriptorSets(VkDevice_T*, VkDescriptorSetAllocateInfo const*, VkDescriptorSet_T**)
vulkan_layer_factory::FreeDescriptorSets(VkDevice_T*, VkDescriptorPool_T*, unsigned int, VkDescriptorSet_T* const*)
vulkan_layer_factory::UpdateDescriptorSets(VkDevice_T*, unsigned int, VkWriteDescriptorSet const*, unsigned int, VkCopyDescriptorSet const*)
vulkan_layer_factory::CreateFramebuffer(VkDevice_T*, VkFramebufferCreateInfo const*, VkAllocationCallbacks const*, VkFramebuffer_T**)
vulkan_layer_factory::DestroyFramebuffer(VkDevice_T*, VkFramebuffer_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateRenderPass(VkDevice_T*, VkRenderPassCreateInfo const*, VkAllocationCallbacks const*, VkRenderPass_T**)
vulkan_layer_factory::DestroyRenderPass(VkDevice_T*, VkRenderPass_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetRenderAreaGranularity(VkDevice_T*, VkRenderPass_T*, VkExtent2D*)
vulkan_layer_factory::CreateCommandPool(VkDevice_T*, VkCommandPoolCreateInfo const*, VkAllocationCallbacks const*, VkCommandPool_T**)
vulkan_layer_factory::DestroyCommandPool(VkDevice_T*, VkCommandPool_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::ResetCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
vulkan_layer_factory::AllocateCommandBuffers(VkDevice_T*, VkCommandBufferAllocateInfo const*, VkCommandBuffer_T**)
vulkan_layer_factory::FreeCommandBuffers(VkDevice_T*, VkCommandPool_T*, unsigned int, VkCommandBuffer_T* const*)
vulkan_layer_factory::BeginCommandBuffer(VkCommandBuffer_T*, VkCommandBufferBeginInfo const*)
vulkan_layer_factory::EndCommandBuffer(VkCommandBuffer_T*)
vulkan_layer_factory::ResetCommandBuffer(VkCommandBuffer_T*, unsigned int)
vulkan_layer_factory::CmdBindPipeline(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipeline_T*)
vulkan_layer_factory::CmdSetViewport(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewport const*)
vulkan_layer_factory::CmdSetScissor(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
vulkan_layer_factory::CmdSetLineWidth(VkCommandBuffer_T*, float)
vulkan_layer_factory::CmdSetDepthBias(VkCommandBuffer_T*, float, float, float)
vulkan_layer_factory::CmdSetBlendConstants(VkCommandBuffer_T*, float const*)
vulkan_layer_factory::CmdSetDepthBounds(VkCommandBuffer_T*, float, float)
vulkan_layer_factory::CmdSetStencilCompareMask(VkCommandBuffer_T*, unsigned int, unsigned int)
vulkan_layer_factory::CmdSetStencilWriteMask(VkCommandBuffer_T*, unsigned int, unsigned int)
vulkan_layer_factory::CmdSetStencilReference(VkCommandBuffer_T*, unsigned int, unsigned int)
vulkan_layer_factory::CmdBindDescriptorSets(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkDescriptorSet_T* const*, unsigned int, unsigned int const*)
vulkan_layer_factory::CmdBindIndexBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkIndexType)
vulkan_layer_factory::CmdBindVertexBuffers(VkCommandBuffer_T*, unsigned int, unsigned int, VkBuffer_T* const*, unsigned long const*)
vulkan_layer_factory::CmdDraw(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int)
vulkan_layer_factory::CmdDrawIndexed(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, int, unsigned int)
vulkan_layer_factory::CmdDrawIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::CmdDrawIndexedIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::CmdDispatch(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int)
vulkan_layer_factory::CmdDispatchIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long)
vulkan_layer_factory::CmdCopyBuffer(VkCommandBuffer_T*, VkBuffer_T*, VkBuffer_T*, unsigned int, VkBufferCopy const*)
vulkan_layer_factory::CmdCopyImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageCopy const*)
vulkan_layer_factory::CmdBlitImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageBlit const*, VkFilter)
vulkan_layer_factory::CmdCopyBufferToImage(VkCommandBuffer_T*, VkBuffer_T*, VkImage_T*, VkImageLayout, unsigned int, VkBufferImageCopy const*)
vulkan_layer_factory::CmdCopyImageToBuffer(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkBuffer_T*, unsigned int, VkBufferImageCopy const*)
vulkan_layer_factory::CmdUpdateBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, void const*)
vulkan_layer_factory::CmdFillBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
vulkan_layer_factory::CmdClearColorImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearColorValue const*, unsigned int, VkImageSubresourceRange const*)
vulkan_layer_factory::CmdClearDepthStencilImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearDepthStencilValue const*, unsigned int, VkImageSubresourceRange const*)
vulkan_layer_factory::CmdClearAttachments(VkCommandBuffer_T*, unsigned int, VkClearAttachment const*, unsigned int, VkClearRect const*)
vulkan_layer_factory::CmdResolveImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageResolve const*)
vulkan_layer_factory::CmdSetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
vulkan_layer_factory::CmdResetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
vulkan_layer_factory::CmdWaitEvents(VkCommandBuffer_T*, unsigned int, VkEvent_T* const*, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
vulkan_layer_factory::CmdPipelineBarrier(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
vulkan_layer_factory::CmdBeginQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
vulkan_layer_factory::CmdEndQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int)
vulkan_layer_factory::CmdResetQueryPool(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
vulkan_layer_factory::CmdWriteTimestamp(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkQueryPool_T*, unsigned int)
vulkan_layer_factory::CmdCopyQueryPoolResults(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
vulkan_layer_factory::CmdPushConstants(VkCommandBuffer_T*, VkPipelineLayout_T*, unsigned int, unsigned int, unsigned int, void const*)
vulkan_layer_factory::CmdBeginRenderPass(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassContents)
vulkan_layer_factory::CmdNextSubpass(VkCommandBuffer_T*, VkSubpassContents)
vulkan_layer_factory::CmdEndRenderPass(VkCommandBuffer_T*)
vulkan_layer_factory::CmdExecuteCommands(VkCommandBuffer_T*, unsigned int, VkCommandBuffer_T* const*)
vulkan_layer_factory::BindBufferMemory2(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
vulkan_layer_factory::BindImageMemory2(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
vulkan_layer_factory::GetDeviceGroupPeerMemoryFeatures(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
vulkan_layer_factory::CmdSetDeviceMask(VkCommandBuffer_T*, unsigned int)
vulkan_layer_factory::CmdDispatchBase(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
vulkan_layer_factory::GetImageMemoryRequirements2(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
vulkan_layer_factory::GetBufferMemoryRequirements2(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
vulkan_layer_factory::GetImageSparseMemoryRequirements2(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
vulkan_layer_factory::TrimCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
vulkan_layer_factory::GetDeviceQueue2(VkDevice_T*, VkDeviceQueueInfo2 const*, VkQueue_T**)
vulkan_layer_factory::CreateSamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
vulkan_layer_factory::DestroySamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
vulkan_layer_factory::DestroyDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::UpdateDescriptorSetWithTemplate(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
vulkan_layer_factory::GetDescriptorSetLayoutSupport(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
vulkan_layer_factory::CreateSwapchainKHR(VkDevice_T*, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
vulkan_layer_factory::DestroySwapchainKHR(VkDevice_T*, VkSwapchainKHR_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetSwapchainImagesKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkImage_T**)
vulkan_layer_factory::AcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)
vulkan_layer_factory::QueuePresentKHR(VkQueue_T*, VkPresentInfoKHR const*)
vulkan_layer_factory::GetDeviceGroupPresentCapabilitiesKHR(VkDevice_T*, VkDeviceGroupPresentCapabilitiesKHR*)
vulkan_layer_factory::GetDeviceGroupSurfacePresentModesKHR(VkDevice_T*, VkSurfaceKHR_T*, unsigned int*)
vulkan_layer_factory::AcquireNextImage2KHR(VkDevice_T*, VkAcquireNextImageInfoKHR const*, unsigned int*)
vulkan_layer_factory::CreateSharedSwapchainsKHR(VkDevice_T*, unsigned int, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
vulkan_layer_factory::GetDeviceGroupPeerMemoryFeaturesKHR(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
vulkan_layer_factory::CmdSetDeviceMaskKHR(VkCommandBuffer_T*, unsigned int)
vulkan_layer_factory::CmdDispatchBaseKHR(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
vulkan_layer_factory::TrimCommandPoolKHR(VkDevice_T*, VkCommandPool_T*, unsigned int)
vulkan_layer_factory::GetMemoryFdKHR(VkDevice_T*, VkMemoryGetFdInfoKHR const*, int*)
vulkan_layer_factory::GetMemoryFdPropertiesKHR(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*)
vulkan_layer_factory::ImportSemaphoreFdKHR(VkDevice_T*, VkImportSemaphoreFdInfoKHR const*)
vulkan_layer_factory::GetSemaphoreFdKHR(VkDevice_T*, VkSemaphoreGetFdInfoKHR const*, int*)
vulkan_layer_factory::CmdPushDescriptorSetKHR(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkWriteDescriptorSet const*)
vulkan_layer_factory::CmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer_T*, VkDescriptorUpdateTemplate_T*, VkPipelineLayout_T*, unsigned int, void const*)
vulkan_layer_factory::CreateDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
vulkan_layer_factory::DestroyDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::UpdateDescriptorSetWithTemplateKHR(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
vulkan_layer_factory::CreateRenderPass2KHR(VkDevice_T*, VkRenderPassCreateInfo2KHR const*, VkAllocationCallbacks const*, VkRenderPass_T**)
vulkan_layer_factory::CmdBeginRenderPass2KHR(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassBeginInfoKHR const*)
vulkan_layer_factory::CmdNextSubpass2KHR(VkCommandBuffer_T*, VkSubpassBeginInfoKHR const*, VkSubpassEndInfoKHR const*)
vulkan_layer_factory::CmdEndRenderPass2KHR(VkCommandBuffer_T*, VkSubpassEndInfoKHR const*)
vulkan_layer_factory::GetSwapchainStatusKHR(VkDevice_T*, VkSwapchainKHR_T*)
vulkan_layer_factory::ImportFenceFdKHR(VkDevice_T*, VkImportFenceFdInfoKHR const*)
vulkan_layer_factory::GetFenceFdKHR(VkDevice_T*, VkFenceGetFdInfoKHR const*, int*)
vulkan_layer_factory::GetImageMemoryRequirements2KHR(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
vulkan_layer_factory::GetBufferMemoryRequirements2KHR(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
vulkan_layer_factory::GetImageSparseMemoryRequirements2KHR(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
vulkan_layer_factory::CreateSamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
vulkan_layer_factory::DestroySamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::BindBufferMemory2KHR(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
vulkan_layer_factory::BindImageMemory2KHR(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
vulkan_layer_factory::GetDescriptorSetLayoutSupportKHR(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
vulkan_layer_factory::CmdDrawIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::CmdDrawIndexedIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::DebugMarkerSetObjectTagEXT(VkDevice_T*, VkDebugMarkerObjectTagInfoEXT const*)
vulkan_layer_factory::DebugMarkerSetObjectNameEXT(VkDevice_T*, VkDebugMarkerObjectNameInfoEXT const*)
vulkan_layer_factory::CmdDebugMarkerBeginEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
vulkan_layer_factory::CmdDebugMarkerEndEXT(VkCommandBuffer_T*)
vulkan_layer_factory::CmdDebugMarkerInsertEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
vulkan_layer_factory::CmdDrawIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::CmdDrawIndexedIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::GetShaderInfoAMD(VkDevice_T*, VkPipeline_T*, VkShaderStageFlagBits, VkShaderInfoTypeAMD, unsigned long*, void*)
vulkan_layer_factory::CmdBeginConditionalRenderingEXT(VkCommandBuffer_T*, VkConditionalRenderingBeginInfoEXT const*)
vulkan_layer_factory::CmdEndConditionalRenderingEXT(VkCommandBuffer_T*)
vulkan_layer_factory::CmdProcessCommandsNVX(VkCommandBuffer_T*, VkCmdProcessCommandsInfoNVX const*)
vulkan_layer_factory::CmdReserveSpaceForCommandsNVX(VkCommandBuffer_T*, VkCmdReserveSpaceForCommandsInfoNVX const*)
vulkan_layer_factory::CreateIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutCreateInfoNVX const*, VkAllocationCallbacks const*, VkIndirectCommandsLayoutNVX_T**)
vulkan_layer_factory::DestroyIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutNVX_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateObjectTableNVX(VkDevice_T*, VkObjectTableCreateInfoNVX const*, VkAllocationCallbacks const*, VkObjectTableNVX_T**)
vulkan_layer_factory::DestroyObjectTableNVX(VkDevice_T*, VkObjectTableNVX_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::RegisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectTableEntryNVX const* const*, unsigned int const*)
vulkan_layer_factory::UnregisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectEntryTypeNVX const*, unsigned int const*)
vulkan_layer_factory::CmdSetViewportWScalingNV(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewportWScalingNV const*)
vulkan_layer_factory::DisplayPowerControlEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayPowerInfoEXT const*)
vulkan_layer_factory::RegisterDeviceEventEXT(VkDevice_T*, VkDeviceEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
vulkan_layer_factory::RegisterDisplayEventEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
vulkan_layer_factory::GetSwapchainCounterEXT(VkDevice_T*, VkSwapchainKHR_T*, VkSurfaceCounterFlagBitsEXT, unsigned long*)
vulkan_layer_factory::GetRefreshCycleDurationGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, VkRefreshCycleDurationGOOGLE*)
vulkan_layer_factory::GetPastPresentationTimingGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkPastPresentationTimingGOOGLE*)
vulkan_layer_factory::CmdSetDiscardRectangleEXT(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
vulkan_layer_factory::SetHdrMetadataEXT(VkDevice_T*, unsigned int, VkSwapchainKHR_T* const*, VkHdrMetadataEXT const*)
vulkan_layer_factory::SetDebugUtilsObjectNameEXT(VkDevice_T*, VkDebugUtilsObjectNameInfoEXT const*)
vulkan_layer_factory::SetDebugUtilsObjectTagEXT(VkDevice_T*, VkDebugUtilsObjectTagInfoEXT const*)
vulkan_layer_factory::QueueBeginDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
vulkan_layer_factory::QueueEndDebugUtilsLabelEXT(VkQueue_T*)
vulkan_layer_factory::QueueInsertDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
vulkan_layer_factory::CmdBeginDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
vulkan_layer_factory::CmdEndDebugUtilsLabelEXT(VkCommandBuffer_T*)
vulkan_layer_factory::CmdInsertDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
vulkan_layer_factory::CmdSetSampleLocationsEXT(VkCommandBuffer_T*, VkSampleLocationsInfoEXT const*)
vulkan_layer_factory::CreateValidationCacheEXT(VkDevice_T*, VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT_T**)
vulkan_layer_factory::DestroyValidationCacheEXT(VkDevice_T*, VkValidationCacheEXT_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::MergeValidationCachesEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned int, VkValidationCacheEXT_T* const*)
vulkan_layer_factory::GetValidationCacheDataEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned long*, void*)
vulkan_layer_factory::GetMemoryHostPointerPropertiesEXT(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, void const*, VkMemoryHostPointerPropertiesEXT*)
vulkan_layer_factory::CmdWriteBufferMarkerAMD(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkBuffer_T*, unsigned long, unsigned int)
vulkan_layer_factory::CmdSetCheckpointNV(VkCommandBuffer_T*, void const*)
vulkan_layer_factory::GetQueueCheckpointDataNV(VkQueue_T*, unsigned int*, VkCheckpointDataNV*)
std::_Hashtable<void*, std::pair<void* const, instance_layer_data*>, std::allocator<std::pair<void* const, instance_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<void*, std::pair<void* const, instance_layer_data*>, std::allocator<std::pair<void* const, instance_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, instance_layer_data*>, false>*)
vulkan_layer_factory::GetInstanceProcAddr(VkInstance_T*, char const*)
vulkan_layer_factory::GetPhysicalDeviceProcAddr(VkInstance_T*, char const*)
vulkan_layer_factory::EnumerateDeviceExtensionProperties(VkPhysicalDevice_T*, char const*, unsigned int*, VkExtensionProperties*)
vkEnumerateDeviceExtensionProperties
vulkan_layer_factory::DestroyInstance(VkInstance_T*, VkAllocationCallbacks const*)
free
vulkan_layer_factory::CreateDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT_T**)
calloc
vulkan_layer_factory::DestroyDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackEXT_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::EnumeratePhysicalDevices(VkInstance_T*, unsigned int*, VkPhysicalDevice_T**)
vulkan_layer_factory::GetPhysicalDeviceFeatures(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures*)
vulkan_layer_factory::GetPhysicalDeviceFormatProperties(VkPhysicalDevice_T*, VkFormat, VkFormatProperties*)
vulkan_layer_factory::GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, VkImageFormatProperties*)
vulkan_layer_factory::GetPhysicalDeviceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceProperties*)
vulkan_layer_factory::GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties*)
vulkan_layer_factory::GetPhysicalDeviceMemoryProperties(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties*)
vulkan_layer_factory::GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkSampleCountFlagBits, unsigned int, VkImageTiling, unsigned int*, VkSparseImageFormatProperties*)
vulkan_layer_factory::EnumeratePhysicalDeviceGroups(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
vulkan_layer_factory::GetPhysicalDeviceFeatures2(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
vulkan_layer_factory::GetPhysicalDeviceProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
vulkan_layer_factory::GetPhysicalDeviceFormatProperties2(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
vulkan_layer_factory::GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
vulkan_layer_factory::GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
vulkan_layer_factory::GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
vulkan_layer_factory::GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
vulkan_layer_factory::GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
vulkan_layer_factory::GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
vulkan_layer_factory::GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
vulkan_layer_factory::DestroySurfaceKHR(VkInstance_T*, VkSurfaceKHR_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice_T*, unsigned int, VkSurfaceKHR_T*, unsigned int*)
vulkan_layer_factory::GetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilitiesKHR*)
vulkan_layer_factory::GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkSurfaceFormatKHR*)
vulkan_layer_factory::GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkPresentModeKHR*)
vulkan_layer_factory::GetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkRect2D*)
vulkan_layer_factory::GetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPropertiesKHR*)
vulkan_layer_factory::GetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlanePropertiesKHR*)
vulkan_layer_factory::GetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice_T*, unsigned int, unsigned int*, VkDisplayKHR_T**)
vulkan_layer_factory::GetDisplayModePropertiesKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModePropertiesKHR*)
vulkan_layer_factory::CreateDisplayModeKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, VkDisplayModeCreateInfoKHR const*, VkAllocationCallbacks const*, VkDisplayModeKHR_T**)
vulkan_layer_factory::GetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice_T*, VkDisplayModeKHR_T*, unsigned int, VkDisplayPlaneCapabilitiesKHR*)
vulkan_layer_factory::CreateDisplayPlaneSurfaceKHR(VkInstance_T*, VkDisplaySurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
vulkan_layer_factory::CreateXlibSurfaceKHR(VkInstance_T*, VkXlibSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
vulkan_layer_factory::GetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, _XDisplay*, unsigned long)
vulkan_layer_factory::CreateXcbSurfaceKHR(VkInstance_T*, VkXcbSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
vulkan_layer_factory::GetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, xcb_connection_t*, unsigned int)
vulkan_layer_factory::CreateWaylandSurfaceKHR(VkInstance_T*, VkWaylandSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
vulkan_layer_factory::GetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, wl_display*)
vulkan_layer_factory::GetPhysicalDeviceFeatures2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
vulkan_layer_factory::GetPhysicalDeviceProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
vulkan_layer_factory::GetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
vulkan_layer_factory::GetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
vulkan_layer_factory::GetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
vulkan_layer_factory::GetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
vulkan_layer_factory::GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
vulkan_layer_factory::EnumeratePhysicalDeviceGroupsKHR(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
vulkan_layer_factory::GetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
vulkan_layer_factory::GetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
vulkan_layer_factory::GetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
vulkan_layer_factory::GetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, VkSurfaceCapabilities2KHR*)
vulkan_layer_factory::GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, unsigned int*, VkSurfaceFormat2KHR*)
vulkan_layer_factory::GetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayProperties2KHR*)
vulkan_layer_factory::GetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlaneProperties2KHR*)
vulkan_layer_factory::GetDisplayModeProperties2KHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModeProperties2KHR*)
vulkan_layer_factory::GetDisplayPlaneCapabilities2KHR(VkPhysicalDevice_T*, VkDisplayPlaneInfo2KHR const*, VkDisplayPlaneCapabilities2KHR*)
vulkan_layer_factory::DebugReportMessageEXT(VkInstance_T*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*)
vulkan_layer_factory::GetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, unsigned int, VkExternalImageFormatPropertiesNV*)
vulkan_layer_factory::GetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice_T*, VkDeviceGeneratedCommandsFeaturesNVX*, VkDeviceGeneratedCommandsLimitsNVX*)
vulkan_layer_factory::ReleaseDisplayEXT(VkPhysicalDevice_T*, VkDisplayKHR_T*)
vulkan_layer_factory::AcquireXlibDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, VkDisplayKHR_T*)
vulkan_layer_factory::GetRandROutputDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, unsigned long, VkDisplayKHR_T**)
vulkan_layer_factory::GetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilities2EXT*)
vulkan_layer_factory::CreateDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugUtilsMessengerEXT_T**)
vulkan_layer_factory::DestroyDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerEXT_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::SubmitDebugUtilsMessageEXT(VkInstance_T*, VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*)
vulkan_layer_factory::GetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice_T*, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>> const&)
InstanceExtensions::get_info(char const*)
guard variable for InstanceExtensions::get_info(char const*)::info_map[abi:cxx11]
__cxa_guard_acquire
guard variable for InstanceExtensions::get_info(char const*)::empty_info
InstanceExtensions::get_info(char const*)::info_map[abi:cxx11]
InstanceExtensions::get_info(char const*)::empty_info
__cxa_guard_release
__cxa_atexit
__cxa_guard_abort
vulkan_layer_factory::CreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
guard variable for InstanceExtensions::InitFromInstanceCreateInfo(unsigned int, VkInstanceCreateInfo const*)::V_1_0_promoted_instance_extensions
InstanceExtensions::InitFromInstanceCreateInfo(unsigned int, VkInstanceCreateInfo const*)::V_1_0_promoted_instance_extensions
vlf_report_data
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>> const&)
DeviceExtensions::get_info(char const*)
guard variable for DeviceExtensions::get_info(char const*)::info_map[abi:cxx11]
guard variable for DeviceExtensions::get_info(char const*)::empty_info
DeviceExtensions::get_info(char const*)::info_map[abi:cxx11]
DeviceExtensions::get_info(char const*)::empty_info
DeviceExtensions::InitFromDeviceCreateInfo(InstanceExtensions const*, unsigned int, VkDeviceCreateInfo const*)
guard variable for DeviceExtensions::InitFromDeviceCreateInfo(InstanceExtensions const*, unsigned int, VkDeviceCreateInfo const*)::V_1_0_promoted_device_extensions
DeviceExtensions::InitFromDeviceCreateInfo(InstanceExtensions const*, unsigned int, VkDeviceCreateInfo const*)::V_1_0_promoted_device_extensions
vulkan_layer_factory::CreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>> const&)
vuid_to_error_text_map[abi:cxx11]
__pthread_key_create
pthread_mutex_unlock
pthread_mutex_lock
layer_factory::PreCallGetInstanceProcAddr(VkInstance_T*, char const*)
layer_factory::PostCallGetInstanceProcAddr(VkInstance_T*, char const*)
layer_factory::PreCallGetDeviceProcAddr(VkDevice_T*, char const*)
layer_factory::PostCallGetDeviceProcAddr(VkDevice_T*, char const*)
layer_factory::PreCallEnumerateInstanceExtensionProperties(char const*, unsigned int*, VkExtensionProperties*)
layer_factory::PostCallEnumerateInstanceExtensionProperties(char const*, unsigned int*, VkExtensionProperties*)
layer_factory::PreCallEnumerateDeviceExtensionProperties(VkPhysicalDevice_T*, char const*, unsigned int*, VkExtensionProperties*)
layer_factory::PostCallEnumerateDeviceExtensionProperties(VkPhysicalDevice_T*, char const*, unsigned int*, VkExtensionProperties*)
layer_factory::PreCallEnumerateInstanceLayerProperties(unsigned int*, VkLayerProperties*)
layer_factory::PostCallEnumerateInstanceLayerProperties(unsigned int*, VkLayerProperties*)
layer_factory::PreCallEnumerateDeviceLayerProperties(VkPhysicalDevice_T*, unsigned int*, VkLayerProperties*)
layer_factory::PostCallEnumerateDeviceLayerProperties(VkPhysicalDevice_T*, unsigned int*, VkLayerProperties*)
EnvExtensions::~EnvExtensions()
vtable for EnvExtensions
vtable for layer_factory
EnvExtensions::~EnvExtensions()
EnvExtensions::PostCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
EnvExtensions::PostCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf()
std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf()
std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf()
void std::vector<layer_factory*, std::allocator<layer_factory*>>::_M_realloc_insert<layer_factory*>(__gnu_cxx::__normal_iterator<layer_factory**, std::vector<layer_factory*, std::allocator<layer_factory*>>>, layer_factory*&&)
void std::vector<char const*, std::allocator<char const*>>::_M_realloc_insert<char const* const&>(__gnu_cxx::__normal_iterator<char const**, std::vector<char const*, std::allocator<char const*>>>, char const* const&)
void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
EnvExtensions::PreCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
getenv
VTT for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>
vtable for std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>
std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::_M_sync(char*, unsigned long, unsigned long)
std::basic_istream<char, std::char_traits<char>>& std::getline<char, std::char_traits<char>, std::allocator<char>>(std::basic_istream<char, std::char_traits<char>>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&, char)
__printf_chk
std::__cxx11::basic_stringstream<char, std::char_traits<char>, std::allocator<char>>::~basic_stringstream()
EnvExtensions::PreCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
env_extensions_layer
typeinfo name for layer_factory
typeinfo for layer_factory
vtable for __cxxabiv1::__class_type_info
typeinfo name for EnvExtensions
typeinfo for EnvExtensions
vtable for __cxxabiv1::__si_class_type_info
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::length() const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::data() const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::~basic_string()
std::allocator<char>::allocator()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(char const*, std::allocator<char> const&)
std::allocator<char>::~allocator()
std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::basic_ostringstream(std::_Ios_Openmode)
std::basic_ostream<char, std::char_traits<char>>& std::operator<< <std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>>&, char const*)
std::ostream::operator<<(std::ios_base& (*)(std::ios_base&))
std::ostream::operator<<(unsigned long)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::c_str() const
std::basic_ostream<char, std::char_traits<char>>& std::operator<< <char, std::char_traits<char>, std::allocator<char>>(std::basic_ostream<char, std::char_traits<char>>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__cxx11::basic_ostringstream<char, std::char_traits<char>, std::allocator<char>>::str() const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator+=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator+=(char const*)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::insert(unsigned long, char const*)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::append(char const*)
malloc
fprintf
fflush
raise
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
__assert_fail
std::allocator<char>::~allocator()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_local_data()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::_Alloc_hider(char*, std::allocator<char> const&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::compare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data(char*)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_capacity(unsigned long)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_data() const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_S_copy_chars(char*, char*, char*)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_set_length(unsigned long)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_dispose()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::size() const
stdout
fopen
std::basic_ostream<char, std::char_traits<char>>& std::endl<char, std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>>&)
std::cout
std::ostream::operator<<(std::ostream& (*)(std::ostream&))
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::find(char const*, unsigned long) const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::substr(unsigned long, unsigned long) const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::erase(unsigned long, unsigned long)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(char const*)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::basic_ifstream<char, std::char_traits<char>>::basic_ifstream()
std::basic_ifstream<char, std::char_traits<char>>::open(char const*, std::_Ios_Openmode)
std::basic_ios<char, std::char_traits<char>>::good() const
std::istream::getline(char*, long)
std::basic_ios<char, std::char_traits<char>>::eof() const
strchr
sscanf
std::basic_ifstream<char, std::char_traits<char>>::~basic_ifstream()
std::_Rb_tree_increment(std::_Rb_tree_node_base*)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string()
std::ios_base::Init::Init()
std::ios_base::Init::~Init()
libstdc++.so.6
libgcc_s.so.1
libc.so.6
__xstat
_edata
__bss_start
_end
libVkLayer_envextensions_layer.so
GCC_3.0
CXXABI_1.3.8
GLIBCXX_3.4.18
GLIBCXX_3.4.9
GLIBCXX_3.4.11
CXXABI_1.3
CXXABI_1.3.5
GLIBCXX_3.4.21
GLIBCXX_3.4
GLIBC_2.4
GLIBC_2.14
GLIBC_2.2.5
GLIBC_2.3.4
basic_string::_M_construct null not valid
Object: VK_NULL_HANDLE (Type = 
Debug Report callbacks not removed before DestroyInstance
Debug messengers not removed before DestroyInstance
vkEnumerateDeviceExtensionProperties
vkEnumerateDeviceLayerProperties
vkGetMemoryWin32HandlePropertiesKHR
vkImportSemaphoreWin32HandleKHR
VK_KHR_external_semaphore_win32
vkGetAndroidHardwareBufferPropertiesANDROID
VK_ANDROID_external_memory_android_hardware_buffer
vkGetMemoryAndroidHardwareBufferANDROID
Each of fence, semaphore, and swapchain that are valid handles must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-commonparent)
VUID-VkAcquireNextImageInfoKHR-commonparent
deviceMask must be a valid device mask (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-deviceMask-01290)
VUID-VkAcquireNextImageInfoKHR-deviceMask-01290
VUID-VkAcquireNextImageInfoKHR-deviceMask-01291
deviceMask must not be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-deviceMask-01291)
VUID-VkAcquireNextImageInfoKHR-fence-01289
If fence is not VK_NULL_HANDLE it must be unsignaled and must not be associated with any other queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-fence-01289)
If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-fence-parameter)
VUID-VkAcquireNextImageInfoKHR-fence-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-pNext-pNext)
VUID-VkAcquireNextImageInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-sType-sType)
VUID-VkAcquireNextImageInfoKHR-sType-sType
If semaphore is not VK_NULL_HANDLE it must be unsignaled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-semaphore-01288)
VUID-VkAcquireNextImageInfoKHR-semaphore-01288
If semaphore is not VK_NULL_HANDLE it must not have any uncompleted signal or wait operations pending (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-semaphore-01781)
VUID-VkAcquireNextImageInfoKHR-semaphore-01781
VUID-VkAcquireNextImageInfoKHR-semaphore-01782
semaphore and fence must not both be equal to VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-semaphore-01782)
semaphore and fence must not both be equal to VK_NULL_HANDLE. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-semaphore-01804)
VUID-VkAcquireNextImageInfoKHR-semaphore-01804
VUID-VkAcquireNextImageInfoKHR-semaphore-parameter
If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-semaphore-parameter)
swapchain must not be in the retired state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-swapchain-01675)
VUID-VkAcquireNextImageInfoKHR-swapchain-01675
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAcquireNextImageInfoKHR-swapchain-parameter)
VUID-VkAcquireNextImageInfoKHR-swapchain-parameter
VUID-VkAllocationCallbacks-pfnAllocation-00632
pfnAllocation must be a valid pointer to a valid user-defined PFN_vkAllocationFunction (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAllocationCallbacks-pfnAllocation-00632)
pfnFree must be a valid pointer to a valid user-defined PFN_vkFreeFunction (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAllocationCallbacks-pfnFree-00634)
VUID-VkAllocationCallbacks-pfnFree-00634
VUID-VkAllocationCallbacks-pfnInternalAllocation-00635
If either of pfnInternalAllocation or pfnInternalFree is not NULL, both must be valid callbacks (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAllocationCallbacks-pfnInternalAllocation-00635)
VUID-VkAllocationCallbacks-pfnReallocation-00633
pfnReallocation must be a valid pointer to a valid user-defined PFN_vkReallocationFunction (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAllocationCallbacks-pfnReallocation-00633)
sType must be VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAndroidHardwareBufferFormatPropertiesANDROID-sType-sType)
VUID-VkAndroidHardwareBufferFormatPropertiesANDROID-sType-sType
sType must be VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAndroidHardwareBufferUsageANDROID-sType-sType)
VUID-VkAndroidHardwareBufferUsageANDROID-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAndroidSurfaceCreateInfoKHR-flags-zerobitmask)
VUID-VkAndroidSurfaceCreateInfoKHR-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAndroidSurfaceCreateInfoKHR-pNext-pNext)
VUID-VkAndroidSurfaceCreateInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAndroidSurfaceCreateInfoKHR-sType-sType)
VUID-VkAndroidSurfaceCreateInfoKHR-sType-sType
window must point to a valid Android ANativeWindow. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAndroidSurfaceCreateInfoKHR-window-01248)
VUID-VkAndroidSurfaceCreateInfoKHR-window-01248
If pApplicationName is not NULL, pApplicationName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkApplicationInfo-pApplicationName-parameter)
VUID-VkApplicationInfo-pApplicationName-parameter
If pEngineName is not NULL, pEngineName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkApplicationInfo-pEngineName-parameter)
VUID-VkApplicationInfo-pEngineName-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkApplicationInfo-pNext-pNext)
VUID-VkApplicationInfo-pNext-pNext
VUID-VkApplicationInfo-sType-sType
sType must be VK_STRUCTURE_TYPE_APPLICATION_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkApplicationInfo-sType-sType)
finalLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-finalLayout-00843)
VUID-VkAttachmentDescription-finalLayout-00843
finalLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-finalLayout-parameter)
VUID-VkAttachmentDescription-finalLayout-parameter
VUID-VkAttachmentDescription-flags-parameter
flags must be a valid combination of VkAttachmentDescriptionFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-flags-parameter)
VUID-VkAttachmentDescription-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-format-parameter)
initialLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-initialLayout-parameter)
VUID-VkAttachmentDescription-initialLayout-parameter
loadOp must be a valid VkAttachmentLoadOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-loadOp-parameter)
VUID-VkAttachmentDescription-loadOp-parameter
VUID-VkAttachmentDescription-samples-parameter
samples must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-samples-parameter)
stencilLoadOp must be a valid VkAttachmentLoadOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-stencilLoadOp-parameter)
VUID-VkAttachmentDescription-stencilLoadOp-parameter
VUID-VkAttachmentDescription-stencilStoreOp-parameter
stencilStoreOp must be a valid VkAttachmentStoreOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-stencilStoreOp-parameter)
storeOp must be a valid VkAttachmentStoreOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription-storeOp-parameter)
VUID-VkAttachmentDescription-storeOp-parameter
finalLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-finalLayout-03061)
VUID-VkAttachmentDescription2KHR-finalLayout-03061
finalLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-finalLayout-parameter)
VUID-VkAttachmentDescription2KHR-finalLayout-parameter
VUID-VkAttachmentDescription2KHR-flags-parameter
flags must be a valid combination of VkAttachmentDescriptionFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-flags-parameter)
VUID-VkAttachmentDescription2KHR-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-format-parameter)
initialLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-initialLayout-parameter)
VUID-VkAttachmentDescription2KHR-initialLayout-parameter
loadOp must be a valid VkAttachmentLoadOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-loadOp-parameter)
VUID-VkAttachmentDescription2KHR-loadOp-parameter
sType must be VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-sType-sType)
VUID-VkAttachmentDescription2KHR-sType-sType
samples must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-samples-parameter)
VUID-VkAttachmentDescription2KHR-samples-parameter
stencilLoadOp must be a valid VkAttachmentLoadOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-stencilLoadOp-parameter)
VUID-VkAttachmentDescription2KHR-stencilLoadOp-parameter
stencilStoreOp must be a valid VkAttachmentStoreOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-stencilStoreOp-parameter)
VUID-VkAttachmentDescription2KHR-stencilStoreOp-parameter
VUID-VkAttachmentDescription2KHR-storeOp-parameter
storeOp must be a valid VkAttachmentStoreOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentDescription2KHR-storeOp-parameter)
VUID-VkAttachmentReference-layout-00857
layout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentReference-layout-00857)
layout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentReference-layout-parameter)
VUID-VkAttachmentReference-layout-parameter
layout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentReference2KHR-layout-03077)
VUID-VkAttachmentReference2KHR-layout-03077
layout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentReference2KHR-layout-parameter)
VUID-VkAttachmentReference2KHR-layout-parameter
sType must be VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentReference2KHR-sType-sType)
VUID-VkAttachmentReference2KHR-sType-sType
VUID-VkAttachmentSampleLocationsEXT-attachmentIndex-01531
attachmentIndex must be less than the attachmentCount specified in VkRenderPassCreateInfo the render pass specified by VkRenderPassBeginInfo::renderPass was created with (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentSampleLocationsEXT-attachmentIndex-01531)
VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter
sampleLocationsInfo must be a valid VkSampleLocationsInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter)
VUID-VkBindBufferMemoryDeviceGroupInfo-deviceIndexCount-01606
deviceIndexCount must either be zero or equal to the number of physical devices in the logical device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryDeviceGroupInfo-deviceIndexCount-01606)
VUID-VkBindBufferMemoryDeviceGroupInfo-pDeviceIndices-01607
All elements of pDeviceIndices must be valid device indices (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryDeviceGroupInfo-pDeviceIndices-01607)
VUID-VkBindBufferMemoryDeviceGroupInfo-pDeviceIndices-parameter
If deviceIndexCount is not 0, pDeviceIndices must be a valid pointer to an array of deviceIndexCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryDeviceGroupInfo-pDeviceIndices-parameter)
sType must be VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryDeviceGroupInfo-sType-sType)
VUID-VkBindBufferMemoryDeviceGroupInfo-sType-sType
buffer must not already be backed by a memory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-buffer-01593)
VUID-VkBindBufferMemoryInfo-buffer-01593
VUID-VkBindBufferMemoryInfo-buffer-01594
buffer must not have been created with any sparse memory binding flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-buffer-01594)
VUID-VkBindBufferMemoryInfo-buffer-01602
If buffer requires a dedicated allocation(as reported by vkGetBufferMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for buffer), memory must have been created with VkMemoryDedicatedAllocateInfo::buffer equal to buffer and memoryOffset must be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-buffer-01602)
VUID-VkBindBufferMemoryInfo-buffer-01603
If buffer was created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::buffer equal to buffer and memoryOffset must be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-buffer-01603)
If buffer was not created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-buffer-01604)
VUID-VkBindBufferMemoryInfo-buffer-01604
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-buffer-parameter)
VUID-VkBindBufferMemoryInfo-buffer-parameter
Both of buffer, and memory must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-commonparent)
VUID-VkBindBufferMemoryInfo-commonparent
VUID-VkBindBufferMemoryInfo-memory-01599
memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-memory-01599)
VUID-VkBindBufferMemoryInfo-memory-01900
If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::buffer was not VK_NULL_HANDLE, then buffer must equal VkMemoryDedicatedAllocateInfo::buffer and memoryOffset must be zero. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-memory-01900)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-memory-parameter)
VUID-VkBindBufferMemoryInfo-memory-parameter
memoryOffset must be less than the size of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-memoryOffset-01595)
VUID-VkBindBufferMemoryInfo-memoryOffset-01595
VUID-VkBindBufferMemoryInfo-memoryOffset-01600
memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-memoryOffset-01600)
VUID-VkBindBufferMemoryInfo-pNext-01605
If the pNext chain includes VkBindBufferMemoryDeviceGroupInfo, all instances of memory specified by VkBindBufferMemoryDeviceGroupInfo::pDeviceIndices must have been allocated (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-pNext-01605)
VUID-VkBindBufferMemoryInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkBindBufferMemoryDeviceGroupInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-sType-sType)
VUID-VkBindBufferMemoryInfo-sType-sType
VUID-VkBindBufferMemoryInfo-size-01601
The size member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer must be less than or equal to the size of memory minus memoryOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindBufferMemoryInfo-size-01601)
At least one of deviceIndexCount and splitInstanceBindRegionCount must be zero. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-deviceIndexCount-01633)
VUID-VkBindImageMemoryDeviceGroupInfo-deviceIndexCount-01633
VUID-VkBindImageMemoryDeviceGroupInfo-deviceIndexCount-01634
deviceIndexCount must either be zero or equal to the number of physical devices in the logical device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-deviceIndexCount-01634)
VUID-VkBindImageMemoryDeviceGroupInfo-extent-01640
The extent.width member of any element of pSplitInstanceBindRegions must either be a multiple of the sparse image block width of all non-metadata aspects of the image, or else extent.width + offset.x must equal the width of the image subresource (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-extent-01640)
VUID-VkBindImageMemoryDeviceGroupInfo-extent-01641
The extent.height member of any element of pSplitInstanceBindRegions must either be a multiple of the sparse image block height of all non-metadata aspects of the image, or else extent.height offset.y must equal the width of the image subresource (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-extent-01641)
VUID-VkBindImageMemoryDeviceGroupInfo-offset-01638
The offset.x member of any element of pSplitInstanceBindRegions must be a multiple of the sparse image block width (VkSparseImageFormatProperties::imageGranularity.width) of all non-metadata aspects of the image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-offset-01638)
VUID-VkBindImageMemoryDeviceGroupInfo-offset-01639
The offset.y member of any element of pSplitInstanceBindRegions must be a multiple of the sparse image block height (VkSparseImageFormatProperties::imageGranularity.height) of all non-metadata aspects of the image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-offset-01639)
VUID-VkBindImageMemoryDeviceGroupInfo-pDeviceIndices-01635
All elements of pDeviceIndices must be valid device indices. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-pDeviceIndices-01635)
VUID-VkBindImageMemoryDeviceGroupInfo-pDeviceIndices-parameter
If deviceIndexCount is not 0, pDeviceIndices must be a valid pointer to an array of deviceIndexCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-pDeviceIndices-parameter)
VUID-VkBindImageMemoryDeviceGroupInfo-pSplitInstanceBindRegions-01637
Elements of pSplitInstanceBindRegions that correspond to the same instance of an image must not overlap. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-pSplitInstanceBindRegions-01637)
VUID-VkBindImageMemoryDeviceGroupInfo-pSplitInstanceBindRegions-parameter
If splitInstanceBindRegionCount is not 0, pSplitInstanceBindRegions must be a valid pointer to an array of splitInstanceBindRegionCount VkRect2D structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-pSplitInstanceBindRegions-parameter)
sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-sType-sType)
VUID-VkBindImageMemoryDeviceGroupInfo-sType-sType
VUID-VkBindImageMemoryDeviceGroupInfo-splitInstanceBindRegionCount-01636
splitInstanceBindRegionCount must either be zero or equal to the number of physical devices in the logical device squared (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryDeviceGroupInfo-splitInstanceBindRegionCount-01636)
VUID-VkBindImageMemoryInfo-commonparent
Both of image, and memory that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-commonparent)
image must not already be backed by a memory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-image-01609)
VUID-VkBindImageMemoryInfo-image-01609
VUID-VkBindImageMemoryInfo-image-01610
image must not have been created with any sparse memory binding flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-image-01610)
VUID-VkBindImageMemoryInfo-image-01622
If image requires a dedicated allocation (as reported by vkGetImageMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for image), memory must have been created with VkMemoryDedicatedAllocateInfo::image equal to image and memoryOffset must be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-image-01622)
VUID-VkBindImageMemoryInfo-image-01623
If image was created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::image equal to image and memoryOffset must be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-image-01623)
If image was not created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-image-01624)
VUID-VkBindImageMemoryInfo-image-01624
VUID-VkBindImageMemoryInfo-image-01630
If image was created with a valid swapchain handle in VkImageSwapchainCreateInfoKHR::swapchain, then the pNext chain must include a valid instance of VkBindImageMemorySwapchainInfoKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-image-01630)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-image-parameter)
VUID-VkBindImageMemoryInfo-image-parameter
VUID-VkBindImageMemoryInfo-memory-01612
memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-memory-01612)
VUID-VkBindImageMemoryInfo-memory-01614
The difference of the size of memory and memoryOffset must be greater than or equal to the size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with the same image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-memory-01614)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-memory-01625)
VUID-VkBindImageMemoryInfo-memory-01625
VUID-VkBindImageMemoryInfo-memory-01903
If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::image was not VK_NULL_HANDLE, then image must equal VkMemoryDedicatedAllocateInfo::image and memoryOffset must be zero. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-memory-01903)
VUID-VkBindImageMemoryInfo-memoryOffset-01611
memoryOffset must be less than the size of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-memoryOffset-01611)
VUID-VkBindImageMemoryInfo-memoryOffset-01613
memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-memoryOffset-01613)
VUID-VkBindImageMemoryInfo-pNext-01615
If the pNext chain does not include an instance of the VkBindImagePlaneMemoryInfo structure, memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01615)
If the pNext chain does not include an instance of the VkBindImagePlaneMemoryInfo structure, memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01616)
VUID-VkBindImageMemoryInfo-pNext-01616
VUID-VkBindImageMemoryInfo-pNext-01617
If the pNext chain does not include an instance of the VkBindImagePlaneMemoryInfo structure, the difference of the size of memory and memoryOffset must be greater than or equal to the size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with the same image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01617)
VUID-VkBindImageMemoryInfo-pNext-01618
If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, image must have been created with the VK_IMAGE_CREATE_DISJOINT_BIT bit set. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01618)
VUID-VkBindImageMemoryInfo-pNext-01619
If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image and the correct planeAspect for this plane in the VkImagePlaneMemoryRequirementsInfo structure attached to the VkImageMemoryRequirementsInfo2's pNext chain (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01619)
VUID-VkBindImageMemoryInfo-pNext-01620
If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with image and the correct planeAspect for this plane in the VkImagePlaneMemoryRequirementsInfo structure attached to the VkImageMemoryRequirementsInfo2's pNext chain (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01620)
VUID-VkBindImageMemoryInfo-pNext-01621
If the pNext chain includes an instance of the VkBindImagePlaneMemoryInfo structure, the difference of the size of memory and memoryOffset must be greater than or equal to the size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements2 with the same image and the correct planeAspect for this plane in the VkImagePlaneMemoryRequirementsInfo structure attached to the VkImageMemoryRequirementsInfo2's pNext chain (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01621)
VUID-VkBindImageMemoryInfo-pNext-01626
If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, all instances of memory specified by VkBindImageMemoryDeviceGroupInfo::pDeviceIndices must have been allocated (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01626)
VUID-VkBindImageMemoryInfo-pNext-01627
If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, and VkBindImageMemoryDeviceGroupInfo::splitInstanceBindRegionCount is not zero, then image must have been created with the VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01627)
VUID-VkBindImageMemoryInfo-pNext-01628
If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, all elements of VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions must be valid rectangles contained within the dimensions of image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01628)
If the pNext chain includes VkBindImageMemoryDeviceGroupInfo, the union of the areas of all elements of VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions that correspond to the same instance of image must cover the entire image. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01629)
VUID-VkBindImageMemoryInfo-pNext-01629
If the pNext chain includes an instance of VkBindImageMemorySwapchainInfoKHR, memory must be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01631)
VUID-VkBindImageMemoryInfo-pNext-01631
VUID-VkBindImageMemoryInfo-pNext-01632
If the pNext chain does not include an instance of VkBindImageMemorySwapchainInfoKHR, memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-01632)
VUID-VkBindImageMemoryInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkBindImageMemoryDeviceGroupInfo, VkBindImageMemorySwapchainInfoKHR, or VkBindImagePlaneMemoryInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-sType-sType)
VUID-VkBindImageMemoryInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemoryInfo-sType-unique)
VUID-VkBindImageMemoryInfo-sType-unique
VUID-VkBindImageMemorySwapchainInfoKHR-imageIndex-01644
imageIndex must be less than the number of images in swapchain (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemorySwapchainInfoKHR-imageIndex-01644)
sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemorySwapchainInfoKHR-sType-sType)
VUID-VkBindImageMemorySwapchainInfoKHR-sType-sType
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImageMemorySwapchainInfoKHR-swapchain-parameter)
VUID-VkBindImageMemorySwapchainInfoKHR-swapchain-parameter
VUID-VkBindImagePlaneMemoryInfo-None-01643
A single call to vkBindImageMemory2 must bind all or none of the planes of an image (i.e. bindings to all planes of an image must be made in a single vkBindImageMemory2 call), as separate bindings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImagePlaneMemoryInfo-None-01643)
VUID-VkBindImagePlaneMemoryInfo-planeAspect-01642
planeAspect must be a single valid plane aspect for the image format (that is, planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT for '_2PLANE' formats and planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT for '_3PLANE' formats) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImagePlaneMemoryInfo-planeAspect-01642)
planeAspect must be a valid VkImageAspectFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImagePlaneMemoryInfo-planeAspect-parameter)
VUID-VkBindImagePlaneMemoryInfo-planeAspect-parameter
sType must be VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindImagePlaneMemoryInfo-sType-sType)
VUID-VkBindImagePlaneMemoryInfo-sType-sType
VUID-VkBindSparseInfo-commonparent
Both of the elements of pSignalSemaphores, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-commonparent)
VUID-VkBindSparseInfo-pBufferBinds-parameter
If bufferBindCount is not 0, pBufferBinds must be a valid pointer to an array of bufferBindCount valid VkSparseBufferMemoryBindInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-pBufferBinds-parameter)
VUID-VkBindSparseInfo-pImageBinds-parameter
If imageBindCount is not 0, pImageBinds must be a valid pointer to an array of imageBindCount valid VkSparseImageMemoryBindInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-pImageBinds-parameter)
VUID-VkBindSparseInfo-pImageOpaqueBinds-parameter
If imageOpaqueBindCount is not 0, pImageOpaqueBinds must be a valid pointer to an array of imageOpaqueBindCount valid VkSparseImageOpaqueMemoryBindInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-pImageOpaqueBinds-parameter)
VUID-VkBindSparseInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkDeviceGroupBindSparseInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-pNext-pNext)
VUID-VkBindSparseInfo-pSignalSemaphores-parameter
If signalSemaphoreCount is not 0, pSignalSemaphores must be a valid pointer to an array of signalSemaphoreCount valid VkSemaphore handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-pSignalSemaphores-parameter)
If waitSemaphoreCount is not 0, pWaitSemaphores must be a valid pointer to an array of waitSemaphoreCount valid VkSemaphore handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-pWaitSemaphores-parameter)
VUID-VkBindSparseInfo-pWaitSemaphores-parameter
sType must be VK_STRUCTURE_TYPE_BIND_SPARSE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBindSparseInfo-sType-sType)
VUID-VkBindSparseInfo-sType-sType
The size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCopy-size-01988)
VUID-VkBufferCreateInfo-None-01888
If any of the bits VK_BUFFER_CREATE_SPARSE_BINDING_BIT, VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT are set, VK_BUFFER_CREATE_PROTECTED_BIT must not also be set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-None-01888)
VUID-VkBufferCreateInfo-flags-00915
If the sparse bindings feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_BINDING_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-flags-00915)
VUID-VkBufferCreateInfo-flags-00916
If the sparse buffer residency feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-flags-00916)
VUID-VkBufferCreateInfo-flags-00917
If the sparse aliased residency feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_ALIASED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-flags-00917)
If flags contains VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT, it must also contain VK_BUFFER_CREATE_SPARSE_BINDING_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-flags-00918)
VUID-VkBufferCreateInfo-flags-00918
If the protected memory feature is not enabled, flags must not contain VK_BUFFER_CREATE_PROTECTED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-flags-01887)
VUID-VkBufferCreateInfo-flags-01887
VUID-VkBufferCreateInfo-flags-parameter
flags must be a valid combination of VkBufferCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-flags-parameter)
VUID-VkBufferCreateInfo-pNext-00920
If the pNext chain contains an instance of VkExternalMemoryBufferCreateInfo, its handleTypes member must only contain bits that are also in VkExternalBufferProperties::externalMemoryProperties.compatibleHandleTypes, as returned by vkGetPhysicalDeviceExternalBufferProperties with pExternalBufferInfo->handleType equal to any one of the handle types specified in VkExternalMemoryBufferCreateInfo::handleTypes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-pNext-00920)
If the pNext chain contains an instance of VkDedicatedAllocationBufferCreateInfoNV, and the dedicatedAllocation member of the chained structure is VK_TRUE, then flags must not include VK_BUFFER_CREATE_SPARSE_BINDING_BIT, VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-pNext-01571)
VUID-VkBufferCreateInfo-pNext-01571
VUID-VkBufferCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDedicatedAllocationBufferCreateInfoNV or VkExternalMemoryBufferCreateInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-sType-sType)
VUID-VkBufferCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-sType-unique)
VUID-VkBufferCreateInfo-sType-unique
If sharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a valid pointer to an array of queueFamilyIndexCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-sharingMode-00913)
VUID-VkBufferCreateInfo-sharingMode-00913
If sharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-sharingMode-00914)
VUID-VkBufferCreateInfo-sharingMode-00914
VUID-VkBufferCreateInfo-sharingMode-01391
If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the physicalDevice that was used to create device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-sharingMode-01391)
VUID-VkBufferCreateInfo-sharingMode-01419
If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by either vkGetPhysicalDeviceQueueFamilyProperties or vkGetPhysicalDeviceQueueFamilyProperties2 for the physicalDevice that was used to create device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-sharingMode-01419)
sharingMode must be a valid VkSharingMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-sharingMode-parameter)
VUID-VkBufferCreateInfo-sharingMode-parameter
size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-size-00912)
VUID-VkBufferCreateInfo-size-00912
usage must be a valid combination of VkBufferUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-usage-parameter)
VUID-VkBufferCreateInfo-usage-parameter
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferCreateInfo-usage-requiredbitmask)
VUID-VkBufferCreateInfo-usage-requiredbitmask
VUID-VkBufferImageCopy-None-00214
When copying to the depth aspect of an image subresource, the data in the source buffer must be in the range [0,1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-00214)
VUID-VkBufferImageCopy-None-01735
If the calling command's VkImage parameter is a compressed image, or a single-plane, '_422' image format, bufferRowLength must be a multiple of the compressed texel block width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-01735)
VUID-VkBufferImageCopy-None-01736
If the calling command's VkImage parameter is a compressed image, or a single-plane, '_422' image format, bufferImageHeight must be a multiple of the compressed texel block height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-01736)
VUID-VkBufferImageCopy-None-01737
If the calling command's VkImage parameter is a compressed image, or a single-plane, '_422' image format, all members of imageOffset must be a multiple of the corresponding dimensions of the compressed texel block (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-01737)
VUID-VkBufferImageCopy-None-01738
If the calling command's VkImage parameter is a compressed image, or a single-plane, '_422' image format, bufferOffset must be a multiple of the compressed texel block size in bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-01738)
If the calling command's VkImage parameter is a compressed image, or a single-plane, '_422' image format, imageExtent.width must be a multiple of the compressed texel block width or (imageExtent.width + imageOffset.x) must equal the image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-01739)
VUID-VkBufferImageCopy-None-01739
VUID-VkBufferImageCopy-None-01740
If the calling command's VkImage parameter is a compressed image, or a single-plane, '_422' image format, imageExtent.height must be a multiple of the compressed texel block height or (imageExtent.height + imageOffset.y) must equal the image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-01740)
If the calling command's VkImage parameter is a compressed image, or a single-plane, '_422' image format, imageExtent.depth must be a multiple of the compressed texel block depth or (imageExtent.depth + imageOffset.z) must equal the image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-None-01741)
VUID-VkBufferImageCopy-None-01741
VUID-VkBufferImageCopy-aspectMask-00211
The aspectMask member of imageSubresource must specify aspects present in the calling command's VkImage parameter (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-aspectMask-00211)
VUID-VkBufferImageCopy-aspectMask-00212
The aspectMask member of imageSubresource must only have a single bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-aspectMask-00212)
VUID-VkBufferImageCopy-aspectMask-01560
If the calling command's VkImage parameter's format is a multi-planar format, then the aspectMask member of imageSubresource must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT (with VK_IMAGE_ASPECT_PLANE_2_BIT valid only for image formats with three planes) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-aspectMask-01560)
VUID-VkBufferImageCopy-baseArrayLayer-00213
If the calling command's VkImage parameter is of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of imageSubresource must be 0 and 1, respectively (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-baseArrayLayer-00213)
VUID-VkBufferImageCopy-bufferImageHeight-00196
bufferImageHeight must be 0, or greater than or equal to the height member of imageExtent (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferImageHeight-00196)
VUID-VkBufferImageCopy-bufferImageHeight-00204
If the calling command's VkImage parameter is a compressed image, bufferImageHeight must be a multiple of the compressed texel block height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferImageHeight-00204)
VUID-VkBufferImageCopy-bufferOffset-00193
If the calling command's VkImage parameter's format is not a depth/stencil format, then bufferOffset must be a multiple of the format's element size (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferOffset-00193)
bufferOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferOffset-00194)
VUID-VkBufferImageCopy-bufferOffset-00194
VUID-VkBufferImageCopy-bufferOffset-00206
If the calling command's VkImage parameter is a compressed image, bufferOffset must be a multiple of the compressed texel block size in bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferOffset-00206)
VUID-VkBufferImageCopy-bufferOffset-01558
If the calling command's VkImage parameter's format is not a depth/stencil format or a multi-planar format, then bufferOffset must be a multiple of the format's element size (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferOffset-01558)
VUID-VkBufferImageCopy-bufferOffset-01559
If the calling command's VkImage parameter's format is a multi-planar format, then bufferOffset must be a multiple of the element size of the compatible format for the format and the aspectMask of the imageSubresource as defined in Compatible formats of planes of multi-planar formats (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferOffset-01559)
bufferRowLength must be 0, or greater than or equal to the width member of imageExtent (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferRowLength-00195)
VUID-VkBufferImageCopy-bufferRowLength-00195
If the calling command's VkImage parameter is a compressed image, bufferRowLength must be a multiple of the compressed texel block width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-bufferRowLength-00203)
VUID-VkBufferImageCopy-bufferRowLength-00203
If the calling command's VkImage parameter is a compressed image, imageExtent.width must be a multiple of the compressed texel block width or (imageExtent.width + imageOffset.x) must equal the image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageExtent-00207)
VUID-VkBufferImageCopy-imageExtent-00207
VUID-VkBufferImageCopy-imageExtent-00208
If the calling command's VkImage parameter is a compressed image, imageExtent.height must be a multiple of the compressed texel block height or (imageExtent.height + imageOffset.y) must equal the image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageExtent-00208)
If the calling command's VkImage parameter is a compressed image, imageExtent.depth must be a multiple of the compressed texel block depth or (imageExtent.depth + imageOffset.z) must equal the image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageExtent-00209)
VUID-VkBufferImageCopy-imageExtent-00209
imageOffset.x and (imageExtent.width + imageOffset.x) must both be greater than or equal to 0 and less than or equal to the image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageOffset-00197)
VUID-VkBufferImageCopy-imageOffset-00197
imageOffset.y and (imageExtent.height + imageOffset.y) must both be greater than or equal to 0 and less than or equal to the image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageOffset-00198)
VUID-VkBufferImageCopy-imageOffset-00198
imageOffset.z and (imageExtent.depth + imageOffset.z) must both be greater than or equal to 0 and less than or equal to the image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageOffset-00200)
VUID-VkBufferImageCopy-imageOffset-00200
VUID-VkBufferImageCopy-imageOffset-00205
If the calling command's VkImage parameter is a compressed image, all members of imageOffset must be a multiple of the corresponding dimensions of the compressed texel block (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageOffset-00205)
imageSubresource must be a valid VkImageSubresourceLayers structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-imageSubresource-parameter)
VUID-VkBufferImageCopy-imageSubresource-parameter
VUID-VkBufferImageCopy-srcImage-00199
If the calling command's srcImage (vkCmdCopyImageToBuffer) or dstImage (vkCmdCopyBufferToImage) is of type VK_IMAGE_TYPE_1D, then imageOffset.y must be 0 and imageExtent.height must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-srcImage-00199)
VUID-VkBufferImageCopy-srcImage-00201
If the calling command's srcImage (vkCmdCopyImageToBuffer) or dstImage (vkCmdCopyBufferToImage) is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then imageOffset.z must be 0 and imageExtent.depth must be 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferImageCopy-srcImage-00201)
VUID-VkBufferMemoryBarrier-buffer-01190
If buffer was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, srcQueueFamilyIndex and dstQueueFamilyIndex must both be VK_QUEUE_FAMILY_IGNORED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01190)
If buffer was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, at least one of srcQueueFamilyIndex and dstQueueFamilyIndex must be VK_QUEUE_FAMILY_IGNORED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01191)
VUID-VkBufferMemoryBarrier-buffer-01191
VUID-VkBufferMemoryBarrier-buffer-01192
If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, srcQueueFamilyIndex and dstQueueFamilyIndex must either both be VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see Queue Family Properties) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01192)
VUID-VkBufferMemoryBarrier-buffer-01193
If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, dstQueueFamilyIndex must also be VK_QUEUE_FAMILY_IGNORED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01193)
VUID-VkBufferMemoryBarrier-buffer-01196
If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, and srcQueueFamilyIndex and dstQueueFamilyIndex are not VK_QUEUE_FAMILY_IGNORED, at least one of them must be the same as the family of the queue that will execute this barrier (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01196)
If buffer was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, and one of srcQueueFamilyIndex and dstQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, the other must be VK_QUEUE_FAMILY_IGNORED or a special queue family reserved for external memory ownership transfers, as described in Queue Family Ownership Transfer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01763)
VUID-VkBufferMemoryBarrier-buffer-01763
If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in Queue Family Ownership Transfer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01764)
VUID-VkBufferMemoryBarrier-buffer-01764
If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and dstQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in Queue Family Ownership Transfer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01765)
VUID-VkBufferMemoryBarrier-buffer-01765
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-01931)
VUID-VkBufferMemoryBarrier-buffer-01931
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-buffer-parameter)
VUID-VkBufferMemoryBarrier-buffer-parameter
dstAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-dstAccessMask-parameter)
VUID-VkBufferMemoryBarrier-dstAccessMask-parameter
VUID-VkBufferMemoryBarrier-offset-01187
offset must be less than the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-offset-01187)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-pNext-pNext)
VUID-VkBufferMemoryBarrier-pNext-pNext
sType must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-sType-sType)
VUID-VkBufferMemoryBarrier-sType-sType
If size is not equal to VK_WHOLE_SIZE, size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-size-01188)
VUID-VkBufferMemoryBarrier-size-01188
If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to than the size of buffer minus offset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-size-01189)
VUID-VkBufferMemoryBarrier-size-01189
srcAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryBarrier-srcAccessMask-parameter)
VUID-VkBufferMemoryBarrier-srcAccessMask-parameter
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryRequirementsInfo2-buffer-parameter)
VUID-VkBufferMemoryRequirementsInfo2-buffer-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryRequirementsInfo2-pNext-pNext)
VUID-VkBufferMemoryRequirementsInfo2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferMemoryRequirementsInfo2-sType-sType)
VUID-VkBufferMemoryRequirementsInfo2-sType-sType
VUID-VkBufferViewCreateInfo-buffer-00932
buffer must have been created with a usage value containing at least one of VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-buffer-00932)
If buffer was created with usage containing VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, format must be supported for uniform texel buffers, as specified by the VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-buffer-00933)
VUID-VkBufferViewCreateInfo-buffer-00933
If buffer was created with usage containing VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, format must be supported for storage texel buffers, as specified by the VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-buffer-00934)
VUID-VkBufferViewCreateInfo-buffer-00934
VUID-VkBufferViewCreateInfo-buffer-00935
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-buffer-00935)
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-buffer-parameter)
VUID-VkBufferViewCreateInfo-buffer-parameter
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-flags-zerobitmask)
VUID-VkBufferViewCreateInfo-flags-zerobitmask
VUID-VkBufferViewCreateInfo-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-format-parameter)
offset must be less than the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-offset-00925)
VUID-VkBufferViewCreateInfo-offset-00925
VUID-VkBufferViewCreateInfo-offset-00926
offset must be a multiple of VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-offset-00926)
If range is not equal to VK_WHOLE_SIZE, the sum of offset and range must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-offset-00931)
VUID-VkBufferViewCreateInfo-offset-00931
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-pNext-pNext)
VUID-VkBufferViewCreateInfo-pNext-pNext
If range is not equal to VK_WHOLE_SIZE, range must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-range-00928)
VUID-VkBufferViewCreateInfo-range-00928
If range is not equal to VK_WHOLE_SIZE, range must be a multiple of the element size of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-range-00929)
VUID-VkBufferViewCreateInfo-range-00929
VUID-VkBufferViewCreateInfo-range-00930
If range is not equal to VK_WHOLE_SIZE, range divided by the element size of format must be less than or equal to VkPhysicalDeviceLimits::maxTexelBufferElements (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-range-00930)
sType must be VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkBufferViewCreateInfo-sType-sType)
VUID-VkBufferViewCreateInfo-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCheckpointDataNV-pNext-pNext)
VUID-VkCheckpointDataNV-pNext-pNext
sType must be VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCheckpointDataNV-sType-sType)
VUID-VkCheckpointDataNV-sType-sType
VUID-VkClearAttachment-aspectMask-00019
If aspectMask includes VK_IMAGE_ASPECT_COLOR_BIT, it must not include VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearAttachment-aspectMask-00019)
aspectMask must not include VK_IMAGE_ASPECT_METADATA_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearAttachment-aspectMask-00020)
VUID-VkClearAttachment-aspectMask-00020
VUID-VkClearAttachment-aspectMask-parameter
aspectMask must be a valid combination of VkImageAspectFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearAttachment-aspectMask-parameter)
VUID-VkClearAttachment-aspectMask-requiredbitmask
aspectMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearAttachment-aspectMask-requiredbitmask)
VUID-VkClearAttachment-clearValue-00021
clearValue must be a valid VkClearValue union (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearAttachment-clearValue-00021)
If commandBuffer is an unprotected command buffer, then the attachment to be cleared must not be a protected image. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearAttachment-commandBuffer-01809)
VUID-VkClearAttachment-commandBuffer-01809
If commandBuffer is a protected command buffer, then the attachment to be cleared must not be an unprotected image. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearAttachment-commandBuffer-01810)
VUID-VkClearAttachment-commandBuffer-01810
VUID-VkClearDepthStencilValue-depth-00022
VUID-VkClearDepthStencilValue-depth-00022[!(VK_EXT_depth_range_unrestricted)]
VUID-VkClearDepthStencilValue-depth-00022[(VK_EXT_depth_range_unrestricted)]
Unless the VK_EXT_depth_range_unrestricted extension is enabled depth must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkClearDepthStencilValue-depth-00022)
VUID-VkCmdProcessCommandsInfoNVX-commonparent
Each of indirectCommandsLayout, objectTable, sequencesCountBuffer, sequencesIndexBuffer, and targetCommandBuffer that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-commonparent)
VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsLayout-parameter
indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsLayout-parameter)
VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsTokenCount-01332
indirectCommandsTokenCount must match the indirectCommandsLayout's tokenCount. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsTokenCount-01332)
VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsTokenCount-arraylength
indirectCommandsTokenCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-indirectCommandsTokenCount-arraylength)
VUID-VkCmdProcessCommandsInfoNVX-objectTable-01331
The provided objectTable must include all objects referenced by the generation process. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-objectTable-01331)
objectTable must be a valid VkObjectTableNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-objectTable-parameter)
VUID-VkCmdProcessCommandsInfoNVX-objectTable-parameter
pIndirectCommandsTokens must be a valid pointer to an array of indirectCommandsTokenCount valid VkIndirectCommandsTokenNVX structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-pIndirectCommandsTokens-parameter)
VUID-VkCmdProcessCommandsInfoNVX-pIndirectCommandsTokens-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-pNext-pNext)
VUID-VkCmdProcessCommandsInfoNVX-pNext-pNext
sType must be VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-sType-sType)
VUID-VkCmdProcessCommandsInfoNVX-sType-sType
If sequencesCountBuffer is used, its usage flag must have VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-01338)
VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-01338
If sequencesCountBuffer is used, sequencesCountOffset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minSequenceCountBufferOffsetAlignment. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-01339)
VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-01339
If sequencesCountBuffer is not VK_NULL_HANDLE, sequencesCountBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-parameter)
VUID-VkCmdProcessCommandsInfoNVX-sequencesCountBuffer-parameter
If sequencesIndexBuffer is used, its usage flag must have VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-01340)
VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-01340
If sequencesIndexBuffer is used, sequencesIndexOffset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minSequenceIndexBufferOffsetAlignment. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-01341)
VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-01341
If sequencesIndexBuffer is not VK_NULL_HANDLE, sequencesIndexBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-parameter)
VUID-VkCmdProcessCommandsInfoNVX-sequencesIndexBuffer-parameter
VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01334
If targetCommandBuffer is provided, it must have reserved command space. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01334)
VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01335
If targetCommandBuffer is provided, the objectTable must match the reservation's objectTable and must have had all referenced objects registered at reservation time. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01335)
If targetCommandBuffer is provided, the indirectCommandsLayout must match the reservation's indirectCommandsLayout. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01336)
VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01336
VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01337
If targetCommandBuffer is provided, the maxSequencesCount must not exceed the reservation's maxSequencesCount. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-01337)
VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-parameter
If targetCommandBuffer is not NULL, targetCommandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-targetCommandBuffer-parameter)
VUID-VkCmdProcessCommandsInfoNVX-tokenType-01333
The tokenType member of each entry in the pIndirectCommandsTokens array must match the values used at creation time of indirectCommandsLayout (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdProcessCommandsInfoNVX-tokenType-01333)
VUID-VkCmdReserveSpaceForCommandsInfoNVX-commonparent
Both of indirectCommandsLayout, and objectTable must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdReserveSpaceForCommandsInfoNVX-commonparent)
VUID-VkCmdReserveSpaceForCommandsInfoNVX-indirectCommandsLayout-parameter
indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdReserveSpaceForCommandsInfoNVX-indirectCommandsLayout-parameter)
VUID-VkCmdReserveSpaceForCommandsInfoNVX-objectTable-parameter
objectTable must be a valid VkObjectTableNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdReserveSpaceForCommandsInfoNVX-objectTable-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdReserveSpaceForCommandsInfoNVX-pNext-pNext)
VUID-VkCmdReserveSpaceForCommandsInfoNVX-pNext-pNext
VUID-VkCmdReserveSpaceForCommandsInfoNVX-sType-sType
sType must be VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCmdReserveSpaceForCommandsInfoNVX-sType-sType)
VUID-VkCommandBufferAllocateInfo-commandBufferCount-00044
commandBufferCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferAllocateInfo-commandBufferCount-00044)
VUID-VkCommandBufferAllocateInfo-commandPool-parameter
commandPool must be a valid VkCommandPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferAllocateInfo-commandPool-parameter)
level must be a valid VkCommandBufferLevel value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferAllocateInfo-level-parameter)
VUID-VkCommandBufferAllocateInfo-level-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferAllocateInfo-pNext-pNext)
VUID-VkCommandBufferAllocateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferAllocateInfo-sType-sType)
VUID-VkCommandBufferAllocateInfo-sType-sType
VUID-VkCommandBufferBeginInfo-flags-00053
If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the renderPass member of pInheritanceInfo must be a valid VkRenderPass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferBeginInfo-flags-00053)
If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the subpass member of pInheritanceInfo must be a valid subpass index within the renderPass member of pInheritanceInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferBeginInfo-flags-00054)
VUID-VkCommandBufferBeginInfo-flags-00054
VUID-VkCommandBufferBeginInfo-flags-00055
If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the framebuffer member of pInheritanceInfo must be either VK_NULL_HANDLE, or a valid VkFramebuffer that is compatible with the renderPass member of pInheritanceInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferBeginInfo-flags-00055)
flags must be a valid combination of VkCommandBufferUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferBeginInfo-flags-parameter)
VUID-VkCommandBufferBeginInfo-flags-parameter
pNext must be NULL or a pointer to a valid instance of VkDeviceGroupCommandBufferBeginInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferBeginInfo-pNext-pNext)
VUID-VkCommandBufferBeginInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferBeginInfo-sType-sType)
VUID-VkCommandBufferBeginInfo-sType-sType
VUID-VkCommandBufferInheritanceConditionalRenderingInfoEXT-conditionalRenderingEnable-01977
If the inherited conditional rendering feature is not enabled, conditionalRenderingEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceConditionalRenderingInfoEXT-conditionalRenderingEnable-01977)
sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceConditionalRenderingInfoEXT-sType-sType)
VUID-VkCommandBufferInheritanceConditionalRenderingInfoEXT-sType-sType
VUID-VkCommandBufferInheritanceInfo-commonparent
Both of framebuffer, and renderPass that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceInfo-commonparent)
VUID-VkCommandBufferInheritanceInfo-occlusionQueryEnable-00056
If the inherited queries feature is not enabled, occlusionQueryEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceInfo-occlusionQueryEnable-00056)
VUID-VkCommandBufferInheritanceInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkCommandBufferInheritanceConditionalRenderingInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceInfo-pNext-pNext)
VUID-VkCommandBufferInheritanceInfo-pipelineStatistics-00058
If the pipeline statistics queries feature is not enabled, pipelineStatistics must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceInfo-pipelineStatistics-00058)
VUID-VkCommandBufferInheritanceInfo-queryFlags-00057
If the inherited queries feature is enabled, queryFlags must be a valid combination of VkQueryControlFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceInfo-queryFlags-00057)
sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandBufferInheritanceInfo-sType-sType)
VUID-VkCommandBufferInheritanceInfo-sType-sType
flags must be a valid combination of VkCommandPoolCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandPoolCreateInfo-flags-parameter)
VUID-VkCommandPoolCreateInfo-flags-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandPoolCreateInfo-pNext-pNext)
VUID-VkCommandPoolCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCommandPoolCreateInfo-sType-sType)
VUID-VkCommandPoolCreateInfo-sType-sType
a must be a valid VkComponentSwizzle value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComponentMapping-a-parameter)
VUID-VkComponentMapping-a-parameter
b must be a valid VkComponentSwizzle value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComponentMapping-b-parameter)
VUID-VkComponentMapping-b-parameter
g must be a valid VkComponentSwizzle value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComponentMapping-g-parameter)
VUID-VkComponentMapping-g-parameter
r must be a valid VkComponentSwizzle value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComponentMapping-r-parameter)
VUID-VkComponentMapping-r-parameter
VUID-VkComputePipelineCreateInfo-commonparent
Both of basePipelineHandle, and layout that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-commonparent)
VUID-VkComputePipelineCreateInfo-flags-00697
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is -1, basePipelineHandle must be a valid handle to a compute VkPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-flags-00697)
VUID-VkComputePipelineCreateInfo-flags-00698
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is VK_NULL_HANDLE, basePipelineIndex must be a valid index into the calling command's pCreateInfos parameter (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-flags-00698)
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, basePipelineHandle must be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-flags-00699)
VUID-VkComputePipelineCreateInfo-flags-00699
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineIndex must be -1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-flags-00700)
VUID-VkComputePipelineCreateInfo-flags-00700
flags must be a valid combination of VkPipelineCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-flags-parameter)
VUID-VkComputePipelineCreateInfo-flags-parameter
VUID-VkComputePipelineCreateInfo-layout-00703
layout must be consistent with the layout of the compute shader specified in stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-layout-00703)
VUID-VkComputePipelineCreateInfo-layout-01687
The number of resources in layout accessible to the compute shader stage must be less than or equal to VkPhysicalDeviceLimits::maxPerStageResources (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-layout-01687)
layout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-layout-parameter)
VUID-VkComputePipelineCreateInfo-layout-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-pNext-pNext)
VUID-VkComputePipelineCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-sType-sType)
VUID-VkComputePipelineCreateInfo-sType-sType
The stage member of stage must be VK_SHADER_STAGE_COMPUTE_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-stage-00701)
VUID-VkComputePipelineCreateInfo-stage-00701
VUID-VkComputePipelineCreateInfo-stage-00702
The shader code for the entry point identified by stage and the rest of the state identified by this structure must adhere to the pipeline linking rules described in the Shader Interfaces chapter (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-stage-00702)
VUID-VkComputePipelineCreateInfo-stage-parameter
stage must be a valid VkPipelineShaderStageCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkComputePipelineCreateInfo-stage-parameter)
VUID-VkConditionalRenderingBeginInfoEXT-buffer-01981
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkConditionalRenderingBeginInfoEXT-buffer-01981)
VUID-VkConditionalRenderingBeginInfoEXT-buffer-01982
buffer must have been created with the VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkConditionalRenderingBeginInfoEXT-buffer-01982)
offset must be less than the size of buffer by at least 32 bits. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkConditionalRenderingBeginInfoEXT-offset-01983)
VUID-VkConditionalRenderingBeginInfoEXT-offset-01983
VUID-VkConditionalRenderingBeginInfoEXT-offset-01984
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkConditionalRenderingBeginInfoEXT-offset-01984)
VUID-VkCopyDescriptorSet-commonparent
Both of dstSet, and srcSet must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-commonparent)
The sum of dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by dstBinding, and all applicable consecutive bindings, as described by consecutive binding updates (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-dstArrayElement-00348)
VUID-VkCopyDescriptorSet-dstArrayElement-00348
dstBinding must be a valid binding within dstSet (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-dstBinding-00347)
VUID-VkCopyDescriptorSet-dstBinding-00347
dstSet must be a valid VkDescriptorSet handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-dstSet-parameter)
VUID-VkCopyDescriptorSet-dstSet-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-pNext-pNext)
VUID-VkCopyDescriptorSet-pNext-pNext
sType must be VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-sType-sType)
VUID-VkCopyDescriptorSet-sType-sType
The sum of srcArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by srcBinding, and all applicable consecutive bindings, as described by consecutive binding updates (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcArrayElement-00346)
VUID-VkCopyDescriptorSet-srcArrayElement-00346
srcBinding must be a valid binding within srcSet (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcBinding-00345)
VUID-VkCopyDescriptorSet-srcBinding-00345
VUID-VkCopyDescriptorSet-srcSet-00349
If srcSet is equal to dstSet, then the source and destination ranges of descriptors must not overlap, where the ranges may include array elements from consecutive bindings as described by consecutive binding updates (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcSet-00349)
VUID-VkCopyDescriptorSet-srcSet-01918
If srcSet's layout was created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set, then dstSet's layout must also have been created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcSet-01918)
VUID-VkCopyDescriptorSet-srcSet-01919
If srcSet's layout was created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set, then dstSet's layout must also have been created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcSet-01919)
VUID-VkCopyDescriptorSet-srcSet-01920
If the descriptor pool from which srcSet was allocated was created with the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set, then the descriptor pool from which dstSet was allocated must also have been created with the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcSet-01920)
VUID-VkCopyDescriptorSet-srcSet-01921
If the descriptor pool from which srcSet was allocated was created without the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set, then the descriptor pool from which dstSet was allocated must also have been created without the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcSet-01921)
srcSet must be a valid VkDescriptorSet handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkCopyDescriptorSet-srcSet-parameter)
VUID-VkCopyDescriptorSet-srcSet-parameter
VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter
If signalSemaphoreValuesCount is not 0, and pSignalSemaphoreValues is not NULL, pSignalSemaphoreValues must be a valid pointer to an array of signalSemaphoreValuesCount uint64_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter)
VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter
If waitSemaphoreValuesCount is not 0, and pWaitSemaphoreValues is not NULL, pWaitSemaphoreValues must be a valid pointer to an array of waitSemaphoreValuesCount uint64_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter)
sType must be VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkD3D12FenceSubmitInfoKHR-sType-sType)
VUID-VkD3D12FenceSubmitInfoKHR-sType-sType
VUID-VkD3D12FenceSubmitInfoKHR-signalSemaphoreValuesCount-00080
signalSemaphoreValuesCount must be the same value as VkSubmitInfo::signalSemaphoreCount, where VkSubmitInfo is in the pNext chain of this VkD3D12FenceSubmitInfoKHR structure. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkD3D12FenceSubmitInfoKHR-signalSemaphoreValuesCount-00080)
VUID-VkD3D12FenceSubmitInfoKHR-waitSemaphoreValuesCount-00079
waitSemaphoreValuesCount must be the same value as VkSubmitInfo::waitSemaphoreCount, where VkSubmitInfo is in the pNext chain of this VkD3D12FenceSubmitInfoKHR structure. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkD3D12FenceSubmitInfoKHR-waitSemaphoreValuesCount-00079)
VUID-VkDebugMarkerMarkerInfoEXT-pMarkerName-parameter
pMarkerName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerMarkerInfoEXT-pMarkerName-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerMarkerInfoEXT-pNext-pNext)
VUID-VkDebugMarkerMarkerInfoEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerMarkerInfoEXT-sType-sType)
VUID-VkDebugMarkerMarkerInfoEXT-sType-sType
object must not be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectNameInfoEXT-object-01491)
VUID-VkDebugMarkerObjectNameInfoEXT-object-01491
object must be a Vulkan object of the type associated with objectType as defined in VkDebugReportObjectTypeEXT and Vulkan Handle Relationship. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectNameInfoEXT-object-01492)
VUID-VkDebugMarkerObjectNameInfoEXT-object-01492
VUID-VkDebugMarkerObjectNameInfoEXT-objectType-01490
objectType must not be VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectNameInfoEXT-objectType-01490)
objectType must be a valid VkDebugReportObjectTypeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectNameInfoEXT-objectType-parameter)
VUID-VkDebugMarkerObjectNameInfoEXT-objectType-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectNameInfoEXT-pNext-pNext)
VUID-VkDebugMarkerObjectNameInfoEXT-pNext-pNext
VUID-VkDebugMarkerObjectNameInfoEXT-pObjectName-parameter
pObjectName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectNameInfoEXT-pObjectName-parameter)
sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectNameInfoEXT-sType-sType)
VUID-VkDebugMarkerObjectNameInfoEXT-sType-sType
VUID-VkDebugMarkerObjectTagInfoEXT-object-01494
object must not be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-object-01494)
VUID-VkDebugMarkerObjectTagInfoEXT-object-01495
object must be a Vulkan object of the type associated with objectType as defined in VkDebugReportObjectTypeEXT and Vulkan Handle Relationship. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-object-01495)
objectType must not be VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-objectType-01493)
VUID-VkDebugMarkerObjectTagInfoEXT-objectType-01493
VUID-VkDebugMarkerObjectTagInfoEXT-objectType-parameter
objectType must be a valid VkDebugReportObjectTypeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-objectType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-pNext-pNext)
VUID-VkDebugMarkerObjectTagInfoEXT-pNext-pNext
pTag must be a valid pointer to an array of tagSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-pTag-parameter)
VUID-VkDebugMarkerObjectTagInfoEXT-pTag-parameter
sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-sType-sType)
VUID-VkDebugMarkerObjectTagInfoEXT-sType-sType
VUID-VkDebugMarkerObjectTagInfoEXT-tagSize-arraylength
tagSize must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugMarkerObjectTagInfoEXT-tagSize-arraylength)
VUID-VkDebugReportCallbackCreateInfoEXT-flags-parameter
flags must be a valid combination of VkDebugReportFlagBitsEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugReportCallbackCreateInfoEXT-flags-parameter)
pfnCallback must be a valid PFN_vkDebugReportCallbackEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugReportCallbackCreateInfoEXT-pfnCallback-01385)
VUID-VkDebugReportCallbackCreateInfoEXT-pfnCallback-01385
sType must be VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugReportCallbackCreateInfoEXT-sType-sType)
VUID-VkDebugReportCallbackCreateInfoEXT-sType-sType
pLabelName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsLabelEXT-pLabelName-parameter)
VUID-VkDebugUtilsLabelEXT-pLabelName-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsLabelEXT-pNext-pNext)
VUID-VkDebugUtilsLabelEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsLabelEXT-sType-sType)
VUID-VkDebugUtilsLabelEXT-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCallbackDataEXT-flags-zerobitmask)
VUID-VkDebugUtilsMessengerCallbackDataEXT-flags-zerobitmask
VUID-VkDebugUtilsMessengerCallbackDataEXT-objectCount-arraylength
objectCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCallbackDataEXT-objectCount-arraylength)
VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessage-parameter
pMessage must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessage-parameter)
If pMessageIdName is not NULL, pMessageIdName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter)
VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCallbackDataEXT-pNext-pNext)
VUID-VkDebugUtilsMessengerCallbackDataEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCallbackDataEXT-sType-sType)
VUID-VkDebugUtilsMessengerCallbackDataEXT-sType-sType
VUID-VkDebugUtilsMessengerCreateInfoEXT-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCreateInfoEXT-flags-zerobitmask)
VUID-VkDebugUtilsMessengerCreateInfoEXT-messageSeverity-parameter
messageSeverity must be a valid combination of VkDebugUtilsMessageSeverityFlagBitsEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCreateInfoEXT-messageSeverity-parameter)
VUID-VkDebugUtilsMessengerCreateInfoEXT-messageSeverity-requiredbitmask
messageSeverity must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCreateInfoEXT-messageSeverity-requiredbitmask)
VUID-VkDebugUtilsMessengerCreateInfoEXT-messageType-parameter
messageType must be a valid combination of VkDebugUtilsMessageTypeFlagBitsEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCreateInfoEXT-messageType-parameter)
VUID-VkDebugUtilsMessengerCreateInfoEXT-messageType-requiredbitmask
messageType must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCreateInfoEXT-messageType-requiredbitmask)
VUID-VkDebugUtilsMessengerCreateInfoEXT-pfnUserCallback-01914
pfnUserCallback must be a valid PFN_vkDebugUtilsMessengerCallbackEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCreateInfoEXT-pfnUserCallback-01914)
sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsMessengerCreateInfoEXT-sType-sType)
VUID-VkDebugUtilsMessengerCreateInfoEXT-sType-sType
VUID-VkDebugUtilsObjectNameInfoEXT-objectHandle-01906
objectHandle must not be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-objectHandle-01906)
VUID-VkDebugUtilsObjectNameInfoEXT-objectHandle-01907
objectHandle must be a Vulkan object of the type associated with objectType as defined in VkObjectType and Vulkan Handle Relationship. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-objectHandle-01907)
VUID-VkDebugUtilsObjectNameInfoEXT-objectType-01905
objectType must not be VK_OBJECT_TYPE_UNKNOWN (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-objectType-01905)
VUID-VkDebugUtilsObjectNameInfoEXT-objectType-parameter
objectType must be a valid VkObjectType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-objectType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-pNext-pNext)
VUID-VkDebugUtilsObjectNameInfoEXT-pNext-pNext
VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter
If pObjectName is not NULL, pObjectName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter)
sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectNameInfoEXT-sType-sType)
VUID-VkDebugUtilsObjectNameInfoEXT-sType-sType
VUID-VkDebugUtilsObjectTagInfoEXT-objectHandle-01909
objectHandle must not be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-objectHandle-01909)
VUID-VkDebugUtilsObjectTagInfoEXT-objectHandle-01910
objectHandle must be a Vulkan object of the type associated with objectType as defined in VkObjectType and Vulkan Handle Relationship. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-objectHandle-01910)
VUID-VkDebugUtilsObjectTagInfoEXT-objectType-01908
objectType must not be VK_OBJECT_TYPE_UNKNOWN (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-objectType-01908)
VUID-VkDebugUtilsObjectTagInfoEXT-objectType-parameter
objectType must be a valid VkObjectType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-objectType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-pNext-pNext)
VUID-VkDebugUtilsObjectTagInfoEXT-pNext-pNext
VUID-VkDebugUtilsObjectTagInfoEXT-pTag-parameter
pTag must be a valid pointer to an array of tagSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-pTag-parameter)
sType must be VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-sType-sType)
VUID-VkDebugUtilsObjectTagInfoEXT-sType-sType
VUID-VkDebugUtilsObjectTagInfoEXT-tagSize-arraylength
tagSize must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDebugUtilsObjectTagInfoEXT-tagSize-arraylength)
sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationBufferCreateInfoNV-sType-sType)
VUID-VkDedicatedAllocationBufferCreateInfoNV-sType-sType
VUID-VkDedicatedAllocationImageCreateInfoNV-dedicatedAllocation-00994
If dedicatedAllocation is VK_TRUE, VkImageCreateInfo::flags must not include VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationImageCreateInfoNV-dedicatedAllocation-00994)
sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationImageCreateInfoNV-sType-sType)
VUID-VkDedicatedAllocationImageCreateInfoNV-sType-sType
If buffer is not VK_NULL_HANDLE, the buffer must have been created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00651)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00651
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00653
If buffer is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00653)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00655
If buffer is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation, the memory being imported must also be a dedicated buffer allocation and buffer must be identical to the buffer associated with the imported memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-00655)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-parameter
If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-buffer-parameter)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-commonparent
Both of buffer, and image that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-commonparent)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00649
At least one of image and buffer must be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00649)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00650
If image is not VK_NULL_HANDLE, the image must have been created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00650)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00652
If image is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00652)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00654
If image is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation, the memory being imported must also be a dedicated image allocation and image must be identical to the image associated with the imported memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-00654)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-parameter
If image is not VK_NULL_HANDLE, image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-image-parameter)
sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDedicatedAllocationMemoryAllocateInfoNV-sType-sType)
VUID-VkDedicatedAllocationMemoryAllocateInfoNV-sType-sType
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorBufferInfo-buffer-parameter)
VUID-VkDescriptorBufferInfo-buffer-parameter
offset must be less than the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorBufferInfo-offset-00340)
VUID-VkDescriptorBufferInfo-offset-00340
If range is not equal to VK_WHOLE_SIZE, range must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorBufferInfo-range-00341)
VUID-VkDescriptorBufferInfo-range-00341
If range is not equal to VK_WHOLE_SIZE, range must be less than or equal to the size of buffer minus offset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorBufferInfo-range-00342)
VUID-VkDescriptorBufferInfo-range-00342
VUID-VkDescriptorImageInfo-commonparent
Both of imageView, and sampler that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorImageInfo-commonparent)
imageLayout must match the actual VkImageLayout of each subresource accessible from imageView at the time this descriptor is accessed (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorImageInfo-imageLayout-00344)
VUID-VkDescriptorImageInfo-imageLayout-00344
imageView must not be 2D or 2D array image view created from a 3D image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorImageInfo-imageView-00343)
VUID-VkDescriptorImageInfo-imageView-00343
VUID-VkDescriptorImageInfo-imageView-01976
If imageView is created from a depth/stencil image, the aspectMask used to create the imageView must include either VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT but not both. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorImageInfo-imageView-01976)
VUID-VkDescriptorImageInfo-sampler-01564
If sampler is used and the VkFormat of the image is a multi-planar format, the image must have been created with VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT, and the aspectMask of the imageView must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT or (for three-plane formats only) VK_IMAGE_ASPECT_PLANE_2_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorImageInfo-sampler-01564)
flags must be a valid combination of VkDescriptorPoolCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolCreateInfo-flags-parameter)
VUID-VkDescriptorPoolCreateInfo-flags-parameter
VUID-VkDescriptorPoolCreateInfo-maxSets-00301
maxSets must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolCreateInfo-maxSets-00301)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolCreateInfo-pNext-pNext)
VUID-VkDescriptorPoolCreateInfo-pNext-pNext
pPoolSizes must be a valid pointer to an array of poolSizeCount valid VkDescriptorPoolSize structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolCreateInfo-pPoolSizes-parameter)
VUID-VkDescriptorPoolCreateInfo-pPoolSizes-parameter
poolSizeCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolCreateInfo-poolSizeCount-arraylength)
VUID-VkDescriptorPoolCreateInfo-poolSizeCount-arraylength
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolCreateInfo-sType-sType)
VUID-VkDescriptorPoolCreateInfo-sType-sType
descriptorCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolSize-descriptorCount-00302)
VUID-VkDescriptorPoolSize-descriptorCount-00302
type must be a valid VkDescriptorType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorPoolSize-type-parameter)
VUID-VkDescriptorPoolSize-type-parameter
Both of descriptorPool, and the elements of pSetLayouts must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-commonparent)
VUID-VkDescriptorSetAllocateInfo-commonparent
VUID-VkDescriptorSetAllocateInfo-descriptorPool-00307
descriptorPool must have enough free descriptor capacity remaining to allocate the descriptor sets of the specified layouts (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-descriptorPool-00307)
descriptorPool must be a valid VkDescriptorPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-descriptorPool-parameter)
VUID-VkDescriptorSetAllocateInfo-descriptorPool-parameter
VUID-VkDescriptorSetAllocateInfo-descriptorSetCount-00306
descriptorSetCount must not be greater than the number of sets that are currently available for allocation in descriptorPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-descriptorSetCount-00306)
VUID-VkDescriptorSetAllocateInfo-descriptorSetCount-arraylength
descriptorSetCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-descriptorSetCount-arraylength)
VUID-VkDescriptorSetAllocateInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkDescriptorSetVariableDescriptorCountAllocateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-pNext-pNext)
Each element of pSetLayouts must not have been created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-pSetLayouts-00308)
VUID-VkDescriptorSetAllocateInfo-pSetLayouts-00308
VUID-VkDescriptorSetAllocateInfo-pSetLayouts-03044
If any element of pSetLayouts was created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set, descriptorPool must have been created with the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-pSetLayouts-03044)
VUID-VkDescriptorSetAllocateInfo-pSetLayouts-parameter
pSetLayouts must be a valid pointer to an array of descriptorSetCount valid VkDescriptorSetLayout handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-pSetLayouts-parameter)
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetAllocateInfo-sType-sType)
VUID-VkDescriptorSetAllocateInfo-sType-sType
VUID-VkDescriptorSetLayoutBinding-descriptorCount-00283
If descriptorCount is not 0, stageFlags must be a valid combination of VkShaderStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBinding-descriptorCount-00283)
VUID-VkDescriptorSetLayoutBinding-descriptorType-00282
If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and descriptorCount is not 0 and pImmutableSamplers is not NULL, pImmutableSamplers must be a valid pointer to an array of descriptorCount valid VkSampler handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBinding-descriptorType-00282)
VUID-VkDescriptorSetLayoutBinding-descriptorType-01510
If descriptorType is VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT and descriptorCount is not 0, then stageFlags must be 0 or VK_SHADER_STAGE_FRAGMENT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBinding-descriptorType-01510)
VUID-VkDescriptorSetLayoutBinding-descriptorType-parameter
descriptorType must be a valid VkDescriptorType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBinding-descriptorType-parameter)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-None-03011
All bindings with descriptor type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-None-03011)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-bindingCount-03002
If bindingCount is not zero, bindingCount must equal VkDescriptorSetLayoutCreateInfo::bindingCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-bindingCount-03002)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingPartiallyBound-03013
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingPartiallyBound is not enabled, all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingPartiallyBound-03013)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingSampledImageUpdateAfterBind-03006
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingSampledImageUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_SAMPLER, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, or VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingSampledImageUpdateAfterBind-03006)
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageBufferUpdateAfterBind-03008)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageBufferUpdateAfterBind-03008
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageImageUpdateAfterBind-03007
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageImageUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageImageUpdateAfterBind-03007)
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingStorageTexelBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageTexelBufferUpdateAfterBind-03010)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingStorageTexelBufferUpdateAfterBind-03010
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUniformBufferUpdateAfterBind-03005)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUniformBufferUpdateAfterBind-03005
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUniformTexelBufferUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUniformTexelBufferUpdateAfterBind-03009)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUniformTexelBufferUpdateAfterBind-03009
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUpdateUnusedWhilePending-03012
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingUpdateUnusedWhilePending is not enabled, all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingUpdateUnusedWhilePending-03012)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingVariableDescriptorCount-03014
If VkPhysicalDeviceDescriptorIndexingFeaturesEXT::descriptorBindingVariableDescriptorCount is not enabled, all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-descriptorBindingVariableDescriptorCount-03014)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-flags-03003
If VkDescriptorSetLayoutCreateInfo::flags includes VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then all elements of pBindingFlags must not include VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT, VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT, or VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-flags-03003)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-03004
If an element of pBindingFlags includes VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT, then all other elements of VkDescriptorSetLayoutCreateInfo::pBindings must have a smaller value of binding (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-03004)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-03015
If an element of pBindingFlags includes VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT, that element's descriptorType must not be VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-03015)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-parameter
If bindingCount is not 0, pBindingFlags must be a valid pointer to an array of bindingCount valid combinations of VkDescriptorBindingFlagBitsEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-parameter)
Each element of pBindingFlags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-requiredbitmask)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-pBindingFlags-requiredbitmask
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-sType-sType)
VUID-VkDescriptorSetLayoutBindingFlagsCreateInfoEXT-sType-sType
The VkDescriptorSetLayoutBinding::binding members of the elements of the pBindings array must each have different values. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-binding-00279)
VUID-VkDescriptorSetLayoutCreateInfo-binding-00279
VUID-VkDescriptorSetLayoutCreateInfo-descriptorType-03001
If any binding has the VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT bit set, then all bindings must not have descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-descriptorType-03001)
If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then all elements of pBindings must not have a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-flags-00280)
VUID-VkDescriptorSetLayoutCreateInfo-flags-00280
VUID-VkDescriptorSetLayoutCreateInfo-flags-00281
If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then the total number of elements of all bindings must be less than or equal to VkPhysicalDevicePushDescriptorPropertiesKHR::maxPushDescriptors (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-flags-00281)
VUID-VkDescriptorSetLayoutCreateInfo-flags-03000
If any binding has the VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT bit set, flags must include VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-flags-03000)
VUID-VkDescriptorSetLayoutCreateInfo-flags-parameter
flags must be a valid combination of VkDescriptorSetLayoutCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-flags-parameter)
VUID-VkDescriptorSetLayoutCreateInfo-pBindings-parameter
If bindingCount is not 0, pBindings must be a valid pointer to an array of bindingCount valid VkDescriptorSetLayoutBinding structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-pBindings-parameter)
pNext must be NULL or a pointer to a valid instance of VkDescriptorSetLayoutBindingFlagsCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-pNext-pNext)
VUID-VkDescriptorSetLayoutCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutCreateInfo-sType-sType)
VUID-VkDescriptorSetLayoutCreateInfo-sType-sType
VUID-VkDescriptorSetLayoutSupport-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkDescriptorSetVariableDescriptorCountLayoutSupportEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutSupport-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetLayoutSupport-sType-sType)
VUID-VkDescriptorSetLayoutSupport-sType-sType
VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-descriptorSetCount-03045
If descriptorSetCount is not zero, descriptorSetCount must equal VkDescriptorSetAllocateInfo::descriptorSetCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-descriptorSetCount-03045)
VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-pDescriptorCounts-parameter
If descriptorSetCount is not 0, pDescriptorCounts must be a valid pointer to an array of descriptorSetCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-pDescriptorCounts-parameter)
VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-pSetLayouts-03046
If VkDescriptorSetAllocateInfo::pSetLayouts[i] has a variable descriptor count binding, then pDescriptorCounts[i] must be less than or equal to the descriptor count specified for that binding when the descriptor set layout was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-pSetLayouts-03046)
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-sType-sType)
VUID-VkDescriptorSetVariableDescriptorCountAllocateInfoEXT-sType-sType
VUID-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorSetVariableDescriptorCountLayoutSupportEXT-sType-sType)
Both of descriptorSetLayout, and pipelineLayout that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-commonparent)
VUID-VkDescriptorUpdateTemplateCreateInfo-commonparent
VUID-VkDescriptorUpdateTemplateCreateInfo-descriptorSetLayout-parameter
If descriptorSetLayout is not VK_NULL_HANDLE, descriptorSetLayout must be a valid VkDescriptorSetLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-descriptorSetLayout-parameter)
VUID-VkDescriptorUpdateTemplateCreateInfo-descriptorUpdateEntryCount-arraylength
descriptorUpdateEntryCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-descriptorUpdateEntryCount-arraylength)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-flags-zerobitmask)
VUID-VkDescriptorUpdateTemplateCreateInfo-flags-zerobitmask
VUID-VkDescriptorUpdateTemplateCreateInfo-pDescriptorUpdateEntries-parameter
pDescriptorUpdateEntries must be a valid pointer to an array of descriptorUpdateEntryCount valid VkDescriptorUpdateTemplateEntry structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-pDescriptorUpdateEntries-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-pNext-pNext)
VUID-VkDescriptorUpdateTemplateCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-sType-sType)
VUID-VkDescriptorUpdateTemplateCreateInfo-sType-sType
VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00350
If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET, descriptorSetLayout must be a valid VkDescriptorSetLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00350)
VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00351
If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, pipelineBindPoint must be a valid VkPipelineBindPoint value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00351)
VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00352
If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, pipelineLayout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00352)
VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00353
If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, set must be the unique set number in the pipeline layout that uses a descriptor set layout that was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00353)
VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-parameter
templateType must be a valid VkDescriptorUpdateTemplateType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-parameter)
VUID-VkDescriptorUpdateTemplateEntry-descriptorType-parameter
descriptorType must be a valid VkDescriptorType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateEntry-descriptorType-parameter)
VUID-VkDescriptorUpdateTemplateEntry-dstArrayElement-00355
dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding implicitly specified when using a descriptor update template to update descriptors, and all applicable consecutive bindings, as described by consecutive binding updates (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateEntry-dstArrayElement-00355)
VUID-VkDescriptorUpdateTemplateEntry-dstBinding-00354
dstBinding must be a valid binding in the descriptor set layout implicitly specified when using a descriptor update template to update descriptors. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDescriptorUpdateTemplateEntry-dstBinding-00354)
VUID-VkDeviceCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-flags-zerobitmask)
If pEnabledFeatures is not NULL, pEnabledFeatures must be a valid pointer to a valid VkPhysicalDeviceFeatures structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter)
VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter
If the pNext chain includes a VkPhysicalDeviceFeatures2 structure, then pEnabledFeatures must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-pNext-00373)
VUID-VkDeviceCreateInfo-pNext-00373
VUID-VkDeviceCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupDeviceCreateInfo, VkPhysicalDevice16BitStorageFeatures, VkPhysicalDevice8BitStorageFeaturesKHR, VkPhysicalDeviceConditionalRenderingFeaturesEXT, VkPhysicalDeviceDescriptorIndexingFeaturesEXT, VkPhysicalDeviceFeatures2, VkPhysicalDeviceMultiviewFeatures, VkPhysicalDeviceProtectedMemoryFeatures, VkPhysicalDeviceSamplerYcbcrConversionFeatures, or VkPhysicalDeviceVariablePointerFeatures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-pNext-pNext)
VUID-VkDeviceCreateInfo-pQueueCreateInfos-parameter
pQueueCreateInfos must be a valid pointer to an array of queueCreateInfoCount valid VkDeviceQueueCreateInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-pQueueCreateInfos-parameter)
ppEnabledExtensionNames must not contain both VK_KHR_maintenance1 and VK_AMD_negative_viewport_height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-00374)
VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-00374
VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-01840
ppEnabledExtensionNames must not contain VK_AMD_negative_viewport_height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-01840)
VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-parameter
If enabledExtensionCount is not 0, ppEnabledExtensionNames must be a valid pointer to an array of enabledExtensionCount null-terminated UTF-8 strings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-parameter)
VUID-VkDeviceCreateInfo-ppEnabledLayerNames-parameter
If enabledLayerCount is not 0, ppEnabledLayerNames must be a valid pointer to an array of enabledLayerCount null-terminated UTF-8 strings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-ppEnabledLayerNames-parameter)
VUID-VkDeviceCreateInfo-queueCreateInfoCount-arraylength
queueCreateInfoCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-queueCreateInfoCount-arraylength)
VUID-VkDeviceCreateInfo-queueFamilyIndex-00372
 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-queueFamilyIndex-00372)
sType must be VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-sType-sType)
VUID-VkDeviceCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceCreateInfo-sType-unique)
VUID-VkDeviceCreateInfo-sType-unique
deviceEvent must be a valid VkDeviceEventTypeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceEventInfoEXT-deviceEvent-parameter)
VUID-VkDeviceEventInfoEXT-deviceEvent-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceEventInfoEXT-pNext-pNext)
VUID-VkDeviceEventInfoEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceEventInfoEXT-sType-sType)
VUID-VkDeviceEventInfoEXT-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGeneratedCommandsFeaturesNVX-pNext-pNext)
VUID-VkDeviceGeneratedCommandsFeaturesNVX-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGeneratedCommandsFeaturesNVX-sType-sType)
VUID-VkDeviceGeneratedCommandsFeaturesNVX-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGeneratedCommandsLimitsNVX-pNext-pNext)
VUID-VkDeviceGeneratedCommandsLimitsNVX-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGeneratedCommandsLimitsNVX-sType-sType)
VUID-VkDeviceGeneratedCommandsLimitsNVX-sType-sType
VUID-VkDeviceGroupBindSparseInfo-memoryDeviceIndex-01119
Each memory allocation bound in this batch must have allocated an instance for memoryDeviceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupBindSparseInfo-memoryDeviceIndex-01119)
resourceDeviceIndex and memoryDeviceIndex must both be valid device indices. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupBindSparseInfo-resourceDeviceIndex-01118)
VUID-VkDeviceGroupBindSparseInfo-resourceDeviceIndex-01118
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupBindSparseInfo-sType-sType)
VUID-VkDeviceGroupBindSparseInfo-sType-sType
deviceMask must be a valid device mask value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00106)
VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00106
VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00107
deviceMask must not be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00107)
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupCommandBufferBeginInfo-sType-sType)
VUID-VkDeviceGroupCommandBufferBeginInfo-sType-sType
Each element of pPhysicalDevices must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-00375)
VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-00375
VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-00376
All elements of pPhysicalDevices must be in the same device group as enumerated by vkEnumeratePhysicalDeviceGroups (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-00376)
VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-parameter
If physicalDeviceCount is not 0, pPhysicalDevices must be a valid pointer to an array of physicalDeviceCount valid VkPhysicalDevice handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupDeviceCreateInfo-pPhysicalDevices-parameter)
VUID-VkDeviceGroupDeviceCreateInfo-physicalDeviceCount-00377
If physicalDeviceCount is not 0, the physicalDevice parameter of vkCreateDevice must be an element of pPhysicalDevices. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupDeviceCreateInfo-physicalDeviceCount-00377)
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupDeviceCreateInfo-sType-sType)
VUID-VkDeviceGroupDeviceCreateInfo-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentCapabilitiesKHR-pNext-pNext)
VUID-VkDeviceGroupPresentCapabilitiesKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentCapabilitiesKHR-sType-sType)
VUID-VkDeviceGroupPresentCapabilitiesKHR-sType-sType
VUID-VkDeviceGroupPresentInfoKHR-mode-01298
If mode is VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR, then each element of pDeviceMasks must have exactly one bit set, and the corresponding element of VkDeviceGroupPresentCapabilitiesKHR::presentMask must be non-zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-mode-01298)
VUID-VkDeviceGroupPresentInfoKHR-mode-01299
If mode is VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR, then each element of pDeviceMasks must have exactly one bit set, and some physical device in the logical device must include that bit in its VkDeviceGroupPresentCapabilitiesKHR::presentMask. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-mode-01299)
VUID-VkDeviceGroupPresentInfoKHR-mode-01300
If mode is VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR, then each element of pDeviceMasks must have a value for which all set bits are set in one of the elements of VkDeviceGroupPresentCapabilitiesKHR::presentMask (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-mode-01300)
VUID-VkDeviceGroupPresentInfoKHR-mode-01301
If mode is VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR, then for each bit set in each element of pDeviceMasks, the corresponding element of VkDeviceGroupPresentCapabilitiesKHR::presentMask must be non-zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-mode-01301)
mode must have exactly one bit set, and that bit must have been included in VkDeviceGroupSwapchainCreateInfoKHR::modes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-mode-01303)
VUID-VkDeviceGroupPresentInfoKHR-mode-01303
mode must be a valid VkDeviceGroupPresentModeFlagBitsKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-mode-parameter)
VUID-VkDeviceGroupPresentInfoKHR-mode-parameter
VUID-VkDeviceGroupPresentInfoKHR-pDeviceMasks-01302
The value of each element of pDeviceMasks must be equal to the device mask passed in VkAcquireNextImageInfoKHR::deviceMask when the image index was last acquired (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-pDeviceMasks-01302)
VUID-VkDeviceGroupPresentInfoKHR-pDeviceMasks-parameter
If swapchainCount is not 0, pDeviceMasks must be a valid pointer to an array of swapchainCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-pDeviceMasks-parameter)
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-sType-sType)
VUID-VkDeviceGroupPresentInfoKHR-sType-sType
VUID-VkDeviceGroupPresentInfoKHR-swapchainCount-01297
swapchainCount must equal 0 or VkPresentInfoKHR::swapchainCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupPresentInfoKHR-swapchainCount-01297)
deviceMask must be a valid device mask value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00905)
VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00905
VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00906
deviceMask must not be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00906)
deviceMask must be a subset of the command buffer's initial device mask (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00907)
VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00907
VUID-VkDeviceGroupRenderPassBeginInfo-deviceRenderAreaCount-00908
deviceRenderAreaCount must either be zero or equal to the number of physical devices in the logical device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupRenderPassBeginInfo-deviceRenderAreaCount-00908)
VUID-VkDeviceGroupRenderPassBeginInfo-pDeviceRenderAreas-parameter
If deviceRenderAreaCount is not 0, pDeviceRenderAreas must be a valid pointer to an array of deviceRenderAreaCount VkRect2D structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupRenderPassBeginInfo-pDeviceRenderAreas-parameter)
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupRenderPassBeginInfo-sType-sType)
VUID-VkDeviceGroupRenderPassBeginInfo-sType-sType
commandBufferCount must equal VkSubmitInfo::commandBufferCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-commandBufferCount-00083)
VUID-VkDeviceGroupSubmitInfo-commandBufferCount-00083
All elements of pCommandBufferDeviceMasks must be valid device masks (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-pCommandBufferDeviceMasks-00086)
VUID-VkDeviceGroupSubmitInfo-pCommandBufferDeviceMasks-00086
VUID-VkDeviceGroupSubmitInfo-pCommandBufferDeviceMasks-parameter
If commandBufferCount is not 0, pCommandBufferDeviceMasks must be a valid pointer to an array of commandBufferCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-pCommandBufferDeviceMasks-parameter)
VUID-VkDeviceGroupSubmitInfo-pSignalSemaphoreDeviceIndices-parameter
If signalSemaphoreCount is not 0, pSignalSemaphoreDeviceIndices must be a valid pointer to an array of signalSemaphoreCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-pSignalSemaphoreDeviceIndices-parameter)
All elements of pWaitSemaphoreDeviceIndices and pSignalSemaphoreDeviceIndices must be valid device indices (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-pWaitSemaphoreDeviceIndices-00085)
VUID-VkDeviceGroupSubmitInfo-pWaitSemaphoreDeviceIndices-00085
If waitSemaphoreCount is not 0, pWaitSemaphoreDeviceIndices must be a valid pointer to an array of waitSemaphoreCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-pWaitSemaphoreDeviceIndices-parameter)
VUID-VkDeviceGroupSubmitInfo-pWaitSemaphoreDeviceIndices-parameter
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-sType-sType)
VUID-VkDeviceGroupSubmitInfo-sType-sType
signalSemaphoreCount must equal VkSubmitInfo::signalSemaphoreCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-signalSemaphoreCount-00084)
VUID-VkDeviceGroupSubmitInfo-signalSemaphoreCount-00084
waitSemaphoreCount must equal VkSubmitInfo::waitSemaphoreCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSubmitInfo-waitSemaphoreCount-00082)
VUID-VkDeviceGroupSubmitInfo-waitSemaphoreCount-00082
VUID-VkDeviceGroupSwapchainCreateInfoKHR-modes-parameter
modes must be a valid combination of VkDeviceGroupPresentModeFlagBitsKHR values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSwapchainCreateInfoKHR-modes-parameter)
VUID-VkDeviceGroupSwapchainCreateInfoKHR-modes-requiredbitmask
modes must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSwapchainCreateInfoKHR-modes-requiredbitmask)
sType must be VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceGroupSwapchainCreateInfoKHR-sType-sType)
VUID-VkDeviceGroupSwapchainCreateInfoKHR-sType-sType
flags must be a valid combination of VkDeviceQueueCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-flags-parameter)
VUID-VkDeviceQueueCreateInfo-flags-parameter
VUID-VkDeviceQueueCreateInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkDeviceQueueGlobalPriorityCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-pNext-pNext)
VUID-VkDeviceQueueCreateInfo-pQueuePriorities-00383
Each element of pQueuePriorities must be between 0.0 and 1.0 inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-pQueuePriorities-00383)
VUID-VkDeviceQueueCreateInfo-pQueuePriorities-parameter
pQueuePriorities must be a valid pointer to an array of queueCount float values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-pQueuePriorities-parameter)
VUID-VkDeviceQueueCreateInfo-queueCount-00382
queueCount must be less than or equal to the queueCount member of the VkQueueFamilyProperties structure, as returned by vkGetPhysicalDeviceQueueFamilyProperties in the pQueueFamilyProperties[queueFamilyIndex] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-queueCount-00382)
VUID-VkDeviceQueueCreateInfo-queueCount-arraylength
queueCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-queueCount-arraylength)
VUID-VkDeviceQueueCreateInfo-queueFamilyIndex-00381
queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-queueFamilyIndex-00381)
sType must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueCreateInfo-sType-sType)
VUID-VkDeviceQueueCreateInfo-sType-sType
VUID-VkDeviceQueueGlobalPriorityCreateInfoEXT-globalPriority-parameter
globalPriority must be a valid VkQueueGlobalPriorityEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueGlobalPriorityCreateInfoEXT-globalPriority-parameter)
sType must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueGlobalPriorityCreateInfoEXT-sType-sType)
VUID-VkDeviceQueueGlobalPriorityCreateInfoEXT-sType-sType
VUID-VkDeviceQueueInfo2-flags-parameter
flags must be a valid combination of VkDeviceQueueCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueInfo2-flags-parameter)
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueInfo2-flags-requiredbitmask)
VUID-VkDeviceQueueInfo2-flags-requiredbitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueInfo2-pNext-pNext)
VUID-VkDeviceQueueInfo2-pNext-pNext
VUID-VkDeviceQueueInfo2-queueFamilyIndex-01842
queueFamilyIndex must be one of the queue family indices specified when device was created, via the VkDeviceQueueCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueInfo2-queueFamilyIndex-01842)
VUID-VkDeviceQueueInfo2-queueIndex-01843
queueIndex must be less than the number of queues created for the specified queue family index and VkDeviceQueueCreateFlags member flags equal to this flags value when device was created, via the queueCount member of the VkDeviceQueueCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueInfo2-queueIndex-01843)
sType must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDeviceQueueInfo2-sType-sType)
VUID-VkDeviceQueueInfo2-sType-sType
x must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDispatchIndirectCommand-x-00417)
VUID-VkDispatchIndirectCommand-x-00417
y must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDispatchIndirectCommand-y-00418)
VUID-VkDispatchIndirectCommand-y-00418
z must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDispatchIndirectCommand-z-00419)
VUID-VkDispatchIndirectCommand-z-00419
VUID-VkDisplayEventInfoEXT-displayEvent-parameter
displayEvent must be a valid VkDisplayEventTypeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayEventInfoEXT-displayEvent-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayEventInfoEXT-pNext-pNext)
VUID-VkDisplayEventInfoEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayEventInfoEXT-sType-sType)
VUID-VkDisplayEventInfoEXT-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeCreateInfoKHR-flags-zerobitmask)
VUID-VkDisplayModeCreateInfoKHR-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeCreateInfoKHR-pNext-pNext)
VUID-VkDisplayModeCreateInfoKHR-pNext-pNext
VUID-VkDisplayModeCreateInfoKHR-parameters-parameter
parameters must be a valid VkDisplayModeParametersKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeCreateInfoKHR-parameters-parameter)
sType must be VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeCreateInfoKHR-sType-sType)
VUID-VkDisplayModeCreateInfoKHR-sType-sType
The height member of visibleRegion must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeParametersKHR-height-01991)
VUID-VkDisplayModeParametersKHR-height-01991
refreshRate must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeParametersKHR-refreshRate-01992)
VUID-VkDisplayModeParametersKHR-refreshRate-01992
VUID-VkDisplayModeParametersKHR-width-01990
The width member of visibleRegion must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeParametersKHR-width-01990)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeProperties2KHR-pNext-pNext)
VUID-VkDisplayModeProperties2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayModeProperties2KHR-sType-sType)
VUID-VkDisplayModeProperties2KHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPlaneCapabilities2KHR-pNext-pNext)
VUID-VkDisplayPlaneCapabilities2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPlaneCapabilities2KHR-sType-sType)
VUID-VkDisplayPlaneCapabilities2KHR-sType-sType
mode must be a valid VkDisplayModeKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPlaneInfo2KHR-mode-parameter)
VUID-VkDisplayPlaneInfo2KHR-mode-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPlaneInfo2KHR-pNext-pNext)
VUID-VkDisplayPlaneInfo2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPlaneInfo2KHR-sType-sType)
VUID-VkDisplayPlaneInfo2KHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPlaneProperties2KHR-pNext-pNext)
VUID-VkDisplayPlaneProperties2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPlaneProperties2KHR-sType-sType)
VUID-VkDisplayPlaneProperties2KHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPowerInfoEXT-pNext-pNext)
VUID-VkDisplayPowerInfoEXT-pNext-pNext
powerState must be a valid VkDisplayPowerStateEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPowerInfoEXT-powerState-parameter)
VUID-VkDisplayPowerInfoEXT-powerState-parameter
sType must be VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPowerInfoEXT-sType-sType)
VUID-VkDisplayPowerInfoEXT-sType-sType
VUID-VkDisplayPresentInfoKHR-dstRect-01258
dstRect must specify a rectangular region that is a subset of the visibleRegion parameter of the display mode the swapchain being presented uses (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPresentInfoKHR-dstRect-01258)
VUID-VkDisplayPresentInfoKHR-persistentContent-01259
If the persistentContent member of the VkDisplayPropertiesKHR structure returned by vkGetPhysicalDeviceDisplayPropertiesKHR for the display the present operation targets then persistent must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPresentInfoKHR-persistentContent-01259)
sType must be VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPresentInfoKHR-sType-sType)
VUID-VkDisplayPresentInfoKHR-sType-sType
VUID-VkDisplayPresentInfoKHR-srcRect-01257
srcRect must specify a rectangular region that is a subset of the image being presented (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayPresentInfoKHR-srcRect-01257)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayProperties2KHR-pNext-pNext)
VUID-VkDisplayProperties2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplayProperties2KHR-sType-sType)
VUID-VkDisplayProperties2KHR-sType-sType
VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-01254
If alphaMode is VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR then globalAlpha must be between 0 and 1, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-01254)
VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-01255
alphaMode must be 0 or one of the bits present in the supportedAlpha member of VkDisplayPlaneCapabilitiesKHR returned by vkGetDisplayPlaneCapabilitiesKHR for the display plane corresponding to displayMode (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-01255)
alphaMode must be a valid VkDisplayPlaneAlphaFlagBitsKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-parameter)
VUID-VkDisplaySurfaceCreateInfoKHR-alphaMode-parameter
displayMode must be a valid VkDisplayModeKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-displayMode-parameter)
VUID-VkDisplaySurfaceCreateInfoKHR-displayMode-parameter
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-flags-zerobitmask)
VUID-VkDisplaySurfaceCreateInfoKHR-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-pNext-pNext)
VUID-VkDisplaySurfaceCreateInfoKHR-pNext-pNext
VUID-VkDisplaySurfaceCreateInfoKHR-planeIndex-01252
planeIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-planeIndex-01252)
VUID-VkDisplaySurfaceCreateInfoKHR-planeReorderPossible-01253
If the planeReorderPossible member of the VkDisplayPropertiesKHR structure returned by vkGetPhysicalDeviceDisplayPropertiesKHR for the display corresponding to displayMode is VK_TRUE then planeStackIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR; otherwise planeStackIndex must equal the currentStackIndex member of VkDisplayPlanePropertiesKHR returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR for the display plane corresponding to displayMode (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-planeReorderPossible-01253)
sType must be VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-sType-sType)
VUID-VkDisplaySurfaceCreateInfoKHR-sType-sType
VUID-VkDisplaySurfaceCreateInfoKHR-transform-parameter
transform must be a valid VkSurfaceTransformFlagBitsKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-transform-parameter)
VUID-VkDisplaySurfaceCreateInfoKHR-width-01256
The width and height members of imageExtent must be less than the maxImageDimensions2D member of VkPhysicalDeviceLimits (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDisplaySurfaceCreateInfoKHR-width-01256)
For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Vertex Input Description (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDrawIndexedIndirectCommand-None-00552)
VUID-VkDrawIndexedIndirectCommand-None-00552
If the drawIndirectFirstInstance feature is not enabled, firstInstance must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDrawIndexedIndirectCommand-firstInstance-00554)
VUID-VkDrawIndexedIndirectCommand-firstInstance-00554
VUID-VkDrawIndexedIndirectCommand-indexSize-00553
(indexSize * (firstIndex + indexCount) + offset) must be less than or equal to the size of the bound index buffer, with indexSize being based on the type specified by indexType, where the index buffer, indexType, and offset are specified via vkCmdBindIndexBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDrawIndexedIndirectCommand-indexSize-00553)
VUID-VkDrawIndirectCommand-None-00500
For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Vertex Input Description (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDrawIndirectCommand-None-00500)
If the drawIndirectFirstInstance feature is not enabled, firstInstance must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkDrawIndirectCommand-firstInstance-00501)
VUID-VkDrawIndirectCommand-firstInstance-00501
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkEventCreateInfo-flags-zerobitmask)
VUID-VkEventCreateInfo-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkEventCreateInfo-pNext-pNext)
VUID-VkEventCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_EVENT_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkEventCreateInfo-sType-sType)
VUID-VkEventCreateInfo-sType-sType
VUID-VkExportFenceCreateInfo-handleTypes-01446
The bits in handleTypes must be supported and compatible, as reported by VkExternalFenceProperties. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportFenceCreateInfo-handleTypes-01446)
handleTypes must be a valid combination of VkExternalFenceHandleTypeFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportFenceCreateInfo-handleTypes-parameter)
VUID-VkExportFenceCreateInfo-handleTypes-parameter
sType must be VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportFenceCreateInfo-sType-sType)
VUID-VkExportFenceCreateInfo-sType-sType
VUID-VkExportFenceWin32HandleInfoKHR-handleTypes-01447
If VkExportFenceCreateInfo::handleTypes does not include VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT, VkExportFenceWin32HandleInfoKHR must not be in the pNext chain of VkFenceCreateInfo. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportFenceWin32HandleInfoKHR-handleTypes-01447)
If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter)
VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter
sType must be VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportFenceWin32HandleInfoKHR-sType-sType)
VUID-VkExportFenceWin32HandleInfoKHR-sType-sType
VUID-VkExportMemoryAllocateInfo-handleTypes-00656
The bits in handleTypes must be supported and compatible, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryAllocateInfo-handleTypes-00656)
handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryAllocateInfo-handleTypes-parameter)
VUID-VkExportMemoryAllocateInfo-handleTypes-parameter
sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryAllocateInfo-sType-sType)
VUID-VkExportMemoryAllocateInfo-sType-sType
VUID-VkExportMemoryAllocateInfoNV-handleTypes-parameter
handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryAllocateInfoNV-handleTypes-parameter)
sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryAllocateInfoNV-sType-sType)
VUID-VkExportMemoryAllocateInfoNV-sType-sType
VUID-VkExportMemoryWin32HandleInfoKHR-handleTypes-00657
If VkExportMemoryAllocateInfo::handleTypes does not include VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, VkExportMemoryWin32HandleInfoKHR must not be in the pNext chain of VkMemoryAllocateInfo. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryWin32HandleInfoKHR-handleTypes-00657)
If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter)
VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter
sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryWin32HandleInfoKHR-sType-sType)
VUID-VkExportMemoryWin32HandleInfoKHR-sType-sType
If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter)
VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter
sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportMemoryWin32HandleInfoNV-sType-sType)
VUID-VkExportMemoryWin32HandleInfoNV-sType-sType
VUID-VkExportSemaphoreCreateInfo-handleTypes-01124
The bits in handleTypes must be supported and compatible, as reported by VkExternalSemaphoreProperties. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportSemaphoreCreateInfo-handleTypes-01124)
VUID-VkExportSemaphoreCreateInfo-handleTypes-parameter
handleTypes must be a valid combination of VkExternalSemaphoreHandleTypeFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportSemaphoreCreateInfo-handleTypes-parameter)
sType must be VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportSemaphoreCreateInfo-sType-sType)
VUID-VkExportSemaphoreCreateInfo-sType-sType
VUID-VkExportSemaphoreWin32HandleInfoKHR-handleTypes-01125
If VkExportSemaphoreCreateInfo::handleTypes does not include VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT or VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, VkExportSemaphoreWin32HandleInfoKHR must not be in the pNext chain of VkSemaphoreCreateInfo. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportSemaphoreWin32HandleInfoKHR-handleTypes-01125)
VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter
If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter)
sType must be VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExportSemaphoreWin32HandleInfoKHR-sType-sType)
VUID-VkExportSemaphoreWin32HandleInfoKHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalBufferProperties-pNext-pNext)
VUID-VkExternalBufferProperties-pNext-pNext
sType must be VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalBufferProperties-sType-sType)
VUID-VkExternalBufferProperties-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalFenceProperties-pNext-pNext)
VUID-VkExternalFenceProperties-pNext-pNext
VUID-VkExternalFenceProperties-sType-sType
sType must be VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalFenceProperties-sType-sType)
VUID-VkExternalFormatANDROID-externalFormat-01894
externalFormat must be 0 or a value returned in the externalFormat member of VkAndroidHardwareBufferFormatPropertiesANDROID by an earlier call to vkGetAndroidHardwareBufferPropertiesANDROID (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalFormatANDROID-externalFormat-01894)
sType must be VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalFormatANDROID-sType-sType)
VUID-VkExternalFormatANDROID-sType-sType
VUID-VkExternalImageFormatProperties-sType-sType
sType must be VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalImageFormatProperties-sType-sType)
VUID-VkExternalMemoryBufferCreateInfo-handleTypes-parameter
handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalMemoryBufferCreateInfo-handleTypes-parameter)
sType must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalMemoryBufferCreateInfo-sType-sType)
VUID-VkExternalMemoryBufferCreateInfo-sType-sType
handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalMemoryImageCreateInfo-handleTypes-parameter)
VUID-VkExternalMemoryImageCreateInfo-handleTypes-parameter
VUID-VkExternalMemoryImageCreateInfo-handleTypes-requiredbitmask
handleTypes must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalMemoryImageCreateInfo-handleTypes-requiredbitmask)
sType must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalMemoryImageCreateInfo-sType-sType)
VUID-VkExternalMemoryImageCreateInfo-sType-sType
VUID-VkExternalMemoryImageCreateInfoNV-handleTypes-parameter
handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalMemoryImageCreateInfoNV-handleTypes-parameter)
sType must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalMemoryImageCreateInfoNV-sType-sType)
VUID-VkExternalMemoryImageCreateInfoNV-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalSemaphoreProperties-pNext-pNext)
VUID-VkExternalSemaphoreProperties-pNext-pNext
sType must be VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkExternalSemaphoreProperties-sType-sType)
VUID-VkExternalSemaphoreProperties-sType-sType
flags must be a valid combination of VkFenceCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceCreateInfo-flags-parameter)
VUID-VkFenceCreateInfo-flags-parameter
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkExportFenceCreateInfo or VkExportFenceWin32HandleInfoKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceCreateInfo-pNext-pNext)
VUID-VkFenceCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_FENCE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceCreateInfo-sType-sType)
VUID-VkFenceCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceCreateInfo-sType-unique)
VUID-VkFenceCreateInfo-sType-unique
VUID-VkFenceGetFdInfoKHR-fence-01455
fence must not currently have its payload replaced by an imported payload as described below in Importing Fence Payloads unless that imported payload's handle type was included in VkExternalFenceProperties::exportFromImportedHandleTypes for handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-fence-01455)
VUID-VkFenceGetFdInfoKHR-fence-parameter
fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-fence-parameter)
VUID-VkFenceGetFdInfoKHR-handleType-01453
handleType must have been included in VkExportFenceCreateInfo::handleTypes when fence's current payload was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-handleType-01453)
VUID-VkFenceGetFdInfoKHR-handleType-01454
If handleType refers to a handle type with copy payload transference semantics, fence must be signaled, or have an associated fence signal operation pending execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-handleType-01454)
VUID-VkFenceGetFdInfoKHR-handleType-01456
handleType must be defined as a POSIX file descriptor handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-handleType-01456)
VUID-VkFenceGetFdInfoKHR-handleType-parameter
handleType must be a valid VkExternalFenceHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-handleType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-pNext-pNext)
VUID-VkFenceGetFdInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetFdInfoKHR-sType-sType)
VUID-VkFenceGetFdInfoKHR-sType-sType
VUID-VkFenceGetWin32HandleInfoKHR-fence-01450
fence must not currently have its payload replaced by an imported payload as described below in Importing Fence Payloads unless that imported payload's handle type was included in VkExternalFenceProperties::exportFromImportedHandleTypes for handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-fence-01450)
fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-fence-parameter)
VUID-VkFenceGetWin32HandleInfoKHR-fence-parameter
VUID-VkFenceGetWin32HandleInfoKHR-handleType-01448
handleType must have been included in VkExportFenceCreateInfo::handleTypes when the fence's current payload was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-handleType-01448)
VUID-VkFenceGetWin32HandleInfoKHR-handleType-01449
If handleType is defined as an NT handle, vkGetFenceWin32HandleKHR must be called no more than once for each valid unique combination of fence and handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-handleType-01449)
VUID-VkFenceGetWin32HandleInfoKHR-handleType-01451
If handleType refers to a handle type with copy payload transference semantics, fence must be signaled, or have an associated fence signal operation pending execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-handleType-01451)
handleType must be defined as an NT handle or a global share handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-handleType-01452)
VUID-VkFenceGetWin32HandleInfoKHR-handleType-01452
VUID-VkFenceGetWin32HandleInfoKHR-handleType-parameter
handleType must be a valid VkExternalFenceHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-handleType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-pNext-pNext)
VUID-VkFenceGetWin32HandleInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFenceGetWin32HandleInfoKHR-sType-sType)
VUID-VkFenceGetWin32HandleInfoKHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFormatProperties2-pNext-pNext)
VUID-VkFormatProperties2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFormatProperties2-sType-sType)
VUID-VkFormatProperties2-sType-sType
VUID-VkFramebufferCreateInfo-attachmentCount-00876
attachmentCount must be equal to the attachment count specified in renderPass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-attachmentCount-00876)
VUID-VkFramebufferCreateInfo-commonparent
Both of renderPass, and the elements of pAttachments that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-commonparent)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-flags-zerobitmask)
VUID-VkFramebufferCreateInfo-flags-zerobitmask
height must be greater than 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-height-00887)
VUID-VkFramebufferCreateInfo-height-00887
height must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferHeight (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-height-00888)
VUID-VkFramebufferCreateInfo-height-00888
layers must be greater than 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-layers-00889)
VUID-VkFramebufferCreateInfo-layers-00889
layers must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferLayers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-layers-00890)
VUID-VkFramebufferCreateInfo-layers-00890
Each element of pAttachments that is used as a color attachment or resolve attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00877)
VUID-VkFramebufferCreateInfo-pAttachments-00877
VUID-VkFramebufferCreateInfo-pAttachments-00878
Each element of pAttachments that is used as a depth/stencil attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00878)
VUID-VkFramebufferCreateInfo-pAttachments-00879
Each element of pAttachments that is used as an input attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00879)
VUID-VkFramebufferCreateInfo-pAttachments-00880
Each element of pAttachments must have been created with an VkFormat value that matches the VkFormat specified by the corresponding VkAttachmentDescription in renderPass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00880)
VUID-VkFramebufferCreateInfo-pAttachments-00881
Each element of pAttachments must have been created with a samples value that matches the samples value specified by the corresponding VkAttachmentDescription in renderPass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00881)
Each element of pAttachments must have dimensions at least as large as the corresponding framebuffer dimension (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00882)
VUID-VkFramebufferCreateInfo-pAttachments-00882
Each element of pAttachments must only specify a single mip level (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00883)
VUID-VkFramebufferCreateInfo-pAttachments-00883
VUID-VkFramebufferCreateInfo-pAttachments-00884
Each element of pAttachments must have been created with the identity swizzle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00884)
Each element of pAttachments that is a 2D or 2D array image view taken from a 3D image must not be a depth/stencil format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-00891)
VUID-VkFramebufferCreateInfo-pAttachments-00891
If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkImageView handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pAttachments-parameter)
VUID-VkFramebufferCreateInfo-pAttachments-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-pNext-pNext)
VUID-VkFramebufferCreateInfo-pNext-pNext
renderPass must be a valid VkRenderPass handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-renderPass-parameter)
VUID-VkFramebufferCreateInfo-renderPass-parameter
sType must be VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-sType-sType)
VUID-VkFramebufferCreateInfo-sType-sType
VUID-VkFramebufferCreateInfo-width-00885
width must be greater than 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-width-00885)
VUID-VkFramebufferCreateInfo-width-00886
width must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferWidth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkFramebufferCreateInfo-width-00886)
If rasterization is not disabled and the subpass uses color attachments, the attachmentCount member of pColorBlendState must be equal to the colorAttachmentCount used to create subpass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-attachmentCount-00746)
VUID-VkGraphicsPipelineCreateInfo-attachmentCount-00746
VUID-VkGraphicsPipelineCreateInfo-blendEnable-02023
If rasterization is not disabled and the subpass uses color attachments, then for each color attachment in the subpass the blendEnable member of the corresponding element of the pAttachment member of pColorBlendState must be VK_FALSE if the attached image's format features does not contain the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-blendEnable-02023)
VUID-VkGraphicsPipelineCreateInfo-commonparent
Each of basePipelineHandle, layout, and renderPass that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-commonparent)
VUID-VkGraphicsPipelineCreateInfo-flags-00722
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is -1, basePipelineHandle must be a valid handle to a graphics VkPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-flags-00722)
VUID-VkGraphicsPipelineCreateInfo-flags-00723
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is VK_NULL_HANDLE, basePipelineIndex must be a valid index into the calling command's pCreateInfos parameter (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-flags-00723)
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, basePipelineHandle must be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-flags-00724)
VUID-VkGraphicsPipelineCreateInfo-flags-00724
If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineIndex must be -1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-flags-00725)
VUID-VkGraphicsPipelineCreateInfo-flags-00725
flags must not contain the VK_PIPELINE_CREATE_DISPATCH_BASE flag. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-flags-00764)
VUID-VkGraphicsPipelineCreateInfo-flags-00764
flags must be a valid combination of VkPipelineCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-flags-parameter)
VUID-VkGraphicsPipelineCreateInfo-flags-parameter
layout must be consistent with all shaders specified in pStages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-layout-00756)
VUID-VkGraphicsPipelineCreateInfo-layout-00756
VUID-VkGraphicsPipelineCreateInfo-layout-01688
The number of resources in layout accessible to each shader stage that is used by the pipeline must be less than or equal to VkPhysicalDeviceLimits::maxPerStageResources (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-layout-01688)
VUID-VkGraphicsPipelineCreateInfo-layout-parameter
layout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-layout-parameter)
VUID-VkGraphicsPipelineCreateInfo-pDynamicState-parameter
If pDynamicState is not NULL, pDynamicState must be a valid pointer to a valid VkPipelineDynamicStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicState-parameter)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00747
If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_VIEWPORT, the pViewports member of pViewportState must be a valid pointer to an array of pViewportState::viewportCount valid VkViewport structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00747)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00748
If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SCISSOR, the pScissors member of pViewportState must be a valid pointer to an array of pViewportState::scissorCount VkRect2D structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00748)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00749
If the wide lines feature is not enabled, and no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_LINE_WIDTH, the lineWidth member of pRasterizationState must be 1.0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00749)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00754
If the depth bias clamping feature is not enabled, no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BIAS, and the depthBiasEnable member of pRasterizationState is VK_TRUE, the depthBiasClamp member of pRasterizationState must be 0.0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00754)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00755
If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BOUNDS, and the depthBoundsTestEnable member of pDepthStencilState is VK_TRUE, the minDepthBounds and maxDepthBounds members of pDepthStencilState must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00755)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00755[!(VK_EXT_depth_range_unrestricted)]
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00755[(VK_EXT_depth_range_unrestricted)]
If the VK_EXT_depth_range_unrestricted extension is not enabled and no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BOUNDS, and the depthBoundsTestEnable member of pDepthStencilState is VK_TRUE, the minDepthBounds and maxDepthBounds members of pDepthStencilState must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-00755)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01521
If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, and the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, sampleLocationsInfo.sampleLocationGridSize.width must evenly divide VkMultisamplePropertiesEXT::sampleLocationGridSize.width as returned by vkGetPhysicalDeviceMultisamplePropertiesEXT with a samples parameter equaling rasterizationSamples (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01521)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01522
If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, and the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, sampleLocationsInfo.sampleLocationGridSize.height must evenly divide VkMultisamplePropertiesEXT::sampleLocationGridSize.height as returned by vkGetPhysicalDeviceMultisamplePropertiesEXT with a samples parameter equaling rasterizationSamples (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01522)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01523
If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT, and the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, sampleLocationsInfo.sampleLocationsPerPixel must equal rasterizationSamples (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01523)
VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01715
If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV, and the viewportWScalingEnable member of a VkPipelineViewportWScalingStateCreateInfoNV structure, chained to the pNext chain of pViewportState, is VK_TRUE, the pViewportWScalings member of the VkPipelineViewportWScalingStateCreateInfoNV must be a pointer to an array of VkPipelineViewportWScalingStateCreateInfoNV::viewportCount valid VkViewportWScalingNV structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-01715)
pInputAssemblyState must be a valid pointer to a valid VkPipelineInputAssemblyStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-parameter)
VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-parameter
VUID-VkGraphicsPipelineCreateInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkPipelineDiscardRectangleStateCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pNext-pNext)
pRasterizationState must be a valid pointer to a valid VkPipelineRasterizationStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-parameter)
VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-parameter
If pStages includes a tessellation control shader stage, it must include a tessellation evaluation shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00729)
VUID-VkGraphicsPipelineCreateInfo-pStages-00729
If pStages includes a tessellation evaluation shader stage, it must include a tessellation control shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00730)
VUID-VkGraphicsPipelineCreateInfo-pStages-00730
If pStages includes a tessellation control shader stage and a tessellation evaluation shader stage, pTessellationState must be a valid pointer to a valid VkPipelineTessellationStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00731)
VUID-VkGraphicsPipelineCreateInfo-pStages-00731
If pStages includes tessellation shader stages, the shader code of at least one stage must contain an OpExecutionMode instruction that specifies the type of subdivision in the pipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00732)
VUID-VkGraphicsPipelineCreateInfo-pStages-00732
VUID-VkGraphicsPipelineCreateInfo-pStages-00733
If pStages includes tessellation shader stages, and the shader code of both stages contain an OpExecutionMode instruction that specifies the type of subdivision in the pipeline, they must both specify the same subdivision mode (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00733)
VUID-VkGraphicsPipelineCreateInfo-pStages-00734
If pStages includes tessellation shader stages, the shader code of at least one stage must contain an OpExecutionMode instruction that specifies the output patch size in the pipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00734)
If pStages includes tessellation shader stages, and the shader code of both contain an OpExecutionMode instruction that specifies the out patch size in the pipeline, they must both specify the same patch size (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00735)
VUID-VkGraphicsPipelineCreateInfo-pStages-00735
If pStages includes tessellation shader stages, the topology member of pInputAssembly must be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00736)
VUID-VkGraphicsPipelineCreateInfo-pStages-00736
VUID-VkGraphicsPipelineCreateInfo-pStages-00738
If pStages includes a geometry shader stage, and does not include any tessellation shader stages, its shader code must contain an OpExecutionMode instruction that specifies an input primitive type that is compatible with the primitive topology specified in pInputAssembly (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00738)
VUID-VkGraphicsPipelineCreateInfo-pStages-00739
If pStages includes a geometry shader stage, and also includes tessellation shader stages, its shader code must contain an OpExecutionMode instruction that specifies an input primitive type that is compatible with the primitive topology that is output by the tessellation stages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00739)
VUID-VkGraphicsPipelineCreateInfo-pStages-00740
If pStages includes a fragment shader stage and a geometry shader stage, and the fragment shader code reads from an input variable that is decorated with PrimitiveID, then the geometry shader code must write to a matching output variable, decorated with PrimitiveID, in all execution paths (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00740)
VUID-VkGraphicsPipelineCreateInfo-pStages-00741
If pStages includes a fragment shader stage, its shader code must not read from any input attachment that is defined as VK_ATTACHMENT_UNUSED in subpass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00741)
VUID-VkGraphicsPipelineCreateInfo-pStages-00742
The shader code for the entry points identified by pStages, and the rest of the state identified by this structure must adhere to the pipeline linking rules described in the Shader Interfaces chapter (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-00742)
VUID-VkGraphicsPipelineCreateInfo-pStages-01565
If pStages includes a fragment shader stage and an input attachment was referenced by the VkRenderPassInputAttachmentAspectCreateInfo at renderPass create time, its shader code must not read from any aspect that was not specified in the aspectMask of the corresponding VkInputAttachmentAspectReference structure. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-01565)
VUID-VkGraphicsPipelineCreateInfo-pStages-parameter
pStages must be a valid pointer to an array of stageCount valid VkPipelineShaderStageCreateInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pStages-parameter)
pVertexInputState must be a valid pointer to a valid VkPipelineVertexInputStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-pVertexInputState-parameter)
VUID-VkGraphicsPipelineCreateInfo-pVertexInputState-parameter
VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00750
If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, pViewportState must be a valid pointer to a valid VkPipelineViewportStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00750)
VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00751
If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, pMultisampleState must be a valid pointer to a valid VkPipelineMultisampleStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00751)
VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00752
If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, and subpass uses a depth/stencil attachment, pDepthStencilState must be a valid pointer to a valid VkPipelineDepthStencilStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00752)
VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00753
If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, and subpass uses color attachments, pColorBlendState must be a valid pointer to a valid VkPipelineColorBlendStateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-rasterizerDiscardEnable-00753)
VUID-VkGraphicsPipelineCreateInfo-renderPass-00760
If the renderPass has multiview enabled and subpass has more than one bit set in the view mask and multiviewTessellationShader is not enabled, then pStages must not include tessellation shaders. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-renderPass-00760)
VUID-VkGraphicsPipelineCreateInfo-renderPass-00761
If the renderPass has multiview enabled and subpass has more than one bit set in the view mask and multiviewGeometryShader is not enabled, then pStages must not include a geometry shader. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-renderPass-00761)
If the renderPass has multiview enabled and subpass has more than one bit set in the view mask, shaders in the pipeline must not write to the Layer built-in output (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-renderPass-00762)
VUID-VkGraphicsPipelineCreateInfo-renderPass-00762
VUID-VkGraphicsPipelineCreateInfo-renderPass-00763
If the renderPass has multiview enabled, then all shaders must not include variables decorated with the Layer built-in decoration in their interfaces. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-renderPass-00763)
VUID-VkGraphicsPipelineCreateInfo-renderPass-parameter
renderPass must be a valid VkRenderPass handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-renderPass-parameter)
sType must be VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-sType-sType)
VUID-VkGraphicsPipelineCreateInfo-sType-sType
VUID-VkGraphicsPipelineCreateInfo-sampleLocationsEnable-01524
If the sampleLocationsEnable member of a VkPipelineSampleLocationsStateCreateInfoEXT structure chained to the pNext chain of pMultisampleState is VK_TRUE, the fragment shader code must not statically use the extended instruction InterpolateAtSample (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-sampleLocationsEnable-01524)
VUID-VkGraphicsPipelineCreateInfo-stage-00726
The stage member of each element of pStages must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-stage-00726)
The stage member of one element of pStages must be VK_SHADER_STAGE_VERTEX_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-stage-00727)
VUID-VkGraphicsPipelineCreateInfo-stage-00727
The stage member of each element of pStages must not be VK_SHADER_STAGE_COMPUTE_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-stage-00728)
VUID-VkGraphicsPipelineCreateInfo-stage-00728
VUID-VkGraphicsPipelineCreateInfo-stageCount-arraylength
stageCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-stageCount-arraylength)
If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, the depthWriteEnable member of pDepthStencilState must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-00743)
VUID-VkGraphicsPipelineCreateInfo-subpass-00743
VUID-VkGraphicsPipelineCreateInfo-subpass-00744
If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, the failOp, passOp and depthFailOp members of each of the front and back members of pDepthStencilState must be VK_STENCIL_OP_KEEP (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-00744)
If subpass uses color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must be the same as the sample count for those subpass attachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-00757)
VUID-VkGraphicsPipelineCreateInfo-subpass-00757
VUID-VkGraphicsPipelineCreateInfo-subpass-00758
If subpass does not use any color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must follow the rules for a zero-attachment subpass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-00758)
subpass must be a valid subpass within renderPass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-00759)
VUID-VkGraphicsPipelineCreateInfo-subpass-00759
VUID-VkGraphicsPipelineCreateInfo-subpass-01411
If subpass has a depth/stencil attachment and depth test, stencil test, or depth bounds test are enabled, then the rasterizationSamples member of pMultisampleState must be the same as the sample count of the depth/stencil attachment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-01411)
VUID-VkGraphicsPipelineCreateInfo-subpass-01412
If subpass has any color attachments, then the rasterizationSamples member of pMultisampleState must be greater than or equal to the sample count for those subpass attachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-01412)
VUID-VkGraphicsPipelineCreateInfo-subpass-01505
If subpass uses color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must equal the maximum of the sample counts of those subpass attachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-01505)
VUID-VkGraphicsPipelineCreateInfo-subpass-01756
If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL in the VkAttachmentReference defined by subpass, the depthWriteEnable member of pDepthStencilState must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-01756)
VUID-VkGraphicsPipelineCreateInfo-subpass-01757
If rasterization is not disabled and subpass uses a depth/stencil attachment in renderPass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, the failOp, passOp and depthFailOp members of each of the front and back members of pDepthStencilState must be VK_STENCIL_OP_KEEP (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-subpass-01757)
VUID-VkGraphicsPipelineCreateInfo-topology-00737
If the topology member of pInputAssembly is VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, pStages must include tessellation shader stages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-topology-00737)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIOSSurfaceCreateInfoMVK-flags-zerobitmask)
VUID-VkIOSSurfaceCreateInfoMVK-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIOSSurfaceCreateInfoMVK-pNext-pNext)
VUID-VkIOSSurfaceCreateInfoMVK-pNext-pNext
pView must be a valid UIView and must be backed by a CALayer instance of type CAMetalLayer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIOSSurfaceCreateInfoMVK-pView-01316)
VUID-VkIOSSurfaceCreateInfoMVK-pView-01316
sType must be VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIOSSurfaceCreateInfoMVK-sType-sType)
VUID-VkIOSSurfaceCreateInfoMVK-sType-sType
The aspectMask member of srcSubresource and dstSubresource must match (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-aspectMask-00238)
VUID-VkImageBlit-aspectMask-00238
The aspectMask member of srcSubresource must specify aspects present in the calling command's srcImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-aspectMask-00241)
VUID-VkImageBlit-aspectMask-00241
The aspectMask member of dstSubresource must specify aspects present in the calling command's dstImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-aspectMask-00242)
VUID-VkImageBlit-aspectMask-00242
If the calling command's dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset[0].y must be 0 and dstOffset[1].y must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-dstImage-00250)
VUID-VkImageBlit-dstImage-00250
If the calling command's dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then dstOffset[0].z must be 0 and dstOffset[1].z must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-dstImage-00252)
VUID-VkImageBlit-dstImage-00252
dstOffset[0].x and dstOffset[1].x must both be greater than or equal to 0 and less than or equal to the destination image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-dstOffset-00248)
VUID-VkImageBlit-dstOffset-00248
VUID-VkImageBlit-dstOffset-00249
dstOffset[0].y and dstOffset[1].y must both be greater than or equal to 0 and less than or equal to the destination image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-dstOffset-00249)
dstOffset[0].z and dstOffset[1].z must both be greater than or equal to 0 and less than or equal to the destination image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-dstOffset-00251)
VUID-VkImageBlit-dstOffset-00251
dstSubresource must be a valid VkImageSubresourceLayers structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-dstSubresource-parameter)
VUID-VkImageBlit-dstSubresource-parameter
The layerCount member of srcSubresource and dstSubresource must match (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-layerCount-00239)
VUID-VkImageBlit-layerCount-00239
If either of the calling command's srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-srcImage-00240)
VUID-VkImageBlit-srcImage-00240
If the calling command's srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset[0].y must be 0 and srcOffset[1].y must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-srcImage-00245)
VUID-VkImageBlit-srcImage-00245
If the calling command's srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then srcOffset[0].z must be 0 and srcOffset[1].z must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-srcImage-00247)
VUID-VkImageBlit-srcImage-00247
srcOffset[0].x and srcOffset[1].x must both be greater than or equal to 0 and less than or equal to the source image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-srcOffset-00243)
VUID-VkImageBlit-srcOffset-00243
VUID-VkImageBlit-srcOffset-00244
srcOffset[0].y and srcOffset[1].y must both be greater than or equal to 0 and less than or equal to the source image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-srcOffset-00244)
srcOffset[0].z and srcOffset[1].z must both be greater than or equal to 0 and less than or equal to the source image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-srcOffset-00246)
VUID-VkImageBlit-srcOffset-00246
srcSubresource must be a valid VkImageSubresourceLayers structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageBlit-srcSubresource-parameter)
VUID-VkImageBlit-srcSubresource-parameter
The aspectMask member of srcSubresource and dstSubresource must match (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-aspectMask-00137)
VUID-VkImageCopy-aspectMask-00137
The aspectMask member of srcSubresource must specify aspects present in the calling command's srcImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-aspectMask-00142)
VUID-VkImageCopy-aspectMask-00142
The aspectMask member of dstSubresource must specify aspects present in the calling command's dstImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-aspectMask-00143)
VUID-VkImageCopy-aspectMask-00143
If the calling command's dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.y must be 0 and extent.height must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-00152)
VUID-VkImageCopy-dstImage-00152
If the calling command's dstImage has a VkFormat with two planes then the dstSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01554)
VUID-VkImageCopy-dstImage-01554
If the calling command's dstImage has a VkFormat with three planes then the dstSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01555)
VUID-VkImageCopy-dstImage-01555
If the calling command's dstImage has a multi-planar image format and the srcImage does not have a multi-planar image format, the srcSubresource aspectMask must be VK_IMAGE_ASPECT_COLOR_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01557)
VUID-VkImageCopy-dstImage-01557
VUID-VkImageCopy-dstImage-01731
If the calling command's dstImage is a compressed format image, or a single-plane, '_422' image format, all members of dstOffset must be a multiple of the corresponding dimensions of the compressed texel block (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01731)
If the calling command's dstImage is a compressed format image, or a single-plane, '_422' image format, extent.width must be a multiple of the compressed texel block width or (extent.width + dstOffset.x) must equal the destination image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01732)
VUID-VkImageCopy-dstImage-01732
VUID-VkImageCopy-dstImage-01733
If the calling command's dstImage is a compressed format image, or a single-plane, '_422' image format, extent.height must be a multiple of the compressed texel block height or (extent.height + dstOffset.y) must equal the destination image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01733)
If the calling command's dstImage is a compressed format image, or a single-plane, '_422' image format, extent.depth must be a multiple of the compressed texel block depth or (extent.depth + dstOffset.z) must equal the destination image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01734)
VUID-VkImageCopy-dstImage-01734
If the calling command's dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.z must be 0 and extent.depth must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01786)
VUID-VkImageCopy-dstImage-01786
If the calling command's dstImage is of type VK_IMAGE_TYPE_2D, then dstOffset.z must be 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01788)
VUID-VkImageCopy-dstImage-01788
If the calling command's dstImage is of type VK_IMAGE_TYPE_2D, and the srcImage is of type VK_IMAGE_TYPE_3D, then extent.depth must equal to the layerCount member of dstSubresource. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstImage-01792)
VUID-VkImageCopy-dstImage-01792
dstOffset.x and (extent.width + dstOffset.x) must both be greater than or equal to 0 and less than or equal to the destination image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstOffset-00150)
VUID-VkImageCopy-dstOffset-00150
VUID-VkImageCopy-dstOffset-00151
dstOffset.y and (extent.height + dstOffset.y) must both be greater than or equal to 0 and less than or equal to the destination image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstOffset-00151)
dstOffset.z and (extent.depth + dstOffset.z) must both be greater than or equal to 0 and less than or equal to the destination image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstOffset-00153)
VUID-VkImageCopy-dstOffset-00153
VUID-VkImageCopy-dstOffset-00162
If the calling command's dstImage is a compressed format image, all members of dstOffset must be a multiple of the corresponding dimensions of the compressed texel block (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstOffset-00162)
dstSubresource must be a valid VkImageSubresourceLayers structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-dstSubresource-parameter)
VUID-VkImageCopy-dstSubresource-parameter
The number of slices of the extent (for 3D) or layers of the srcSubresource (for non-3D) must match the number of slices of the extent (for 3D) or layers of the dstSubresource (for non-3D) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-extent-00140)
If the calling command's srcImage is a compressed image, extent.width must be a multiple of the compressed texel block width or (extent.width + srcOffset.x) must equal the source image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-extent-00158)
If the calling command's srcImage is a compressed image, extent.height must be a multiple of the compressed texel block height or (extent.height + srcOffset.y) must equal the source image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-extent-00159)
If the calling command's srcImage is a compressed image, extent.depth must be a multiple of the compressed texel block depth or (extent.depth + srcOffset.z) must equal the source image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-extent-00160)
If the calling command's dstImage is a compressed format image, extent.width must be a multiple of the compressed texel block width or (extent.width + dstOffset.x) must equal the destination image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-extent-00163)
If the calling command's dstImage is a compressed format image, extent.height must be a multiple of the compressed texel block height or (extent.height + dstOffset.y) must equal the destination image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-extent-00164)
If the calling command's dstImage is a compressed format image, extent.depth must be a multiple of the compressed texel block depth or (extent.depth + dstOffset.z) must equal the destination image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-extent-00165)
The layerCount member of srcSubresource and dstSubresource must match (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-layerCount-00138)
VUID-VkImageCopy-layerCount-00138
If either of the calling command's srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-00139)
VUID-VkImageCopy-srcImage-00139
VUID-VkImageCopy-srcImage-00141
If either of the calling command's srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of the corresponding subresource must be 0 and 1, respectively (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-00141)
If the calling command's srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.y must be 0 and extent.height must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-00146)
VUID-VkImageCopy-srcImage-00146
VUID-VkImageCopy-srcImage-01551
If neither the calling command's srcImage nor the calling command's dstImage has a multi-planar image format then the aspectMask member of srcSubresource and dstSubresource must match (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01551)
If the calling command's srcImage has a VkFormat with two planes then the srcSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01552)
VUID-VkImageCopy-srcImage-01552
If the calling command's srcImage has a VkFormat with three planes then the srcSubresource aspectMask must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01553)
VUID-VkImageCopy-srcImage-01553
If the calling command's srcImage has a multi-planar image format and the dstImage does not have a multi-planar image format, the dstSubresource aspectMask must be VK_IMAGE_ASPECT_COLOR_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01556)
VUID-VkImageCopy-srcImage-01556
VUID-VkImageCopy-srcImage-01727
If the calling command's srcImage is a compressed image, or a single-plane, '_422' image format, all members of srcOffset must be a multiple of the corresponding dimensions of the compressed texel block (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01727)
If the calling command's srcImage is a compressed image, or a single-plane, '_422' image format, extent.width must be a multiple of the compressed texel block width or (extent.width + srcOffset.x) must equal the source image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01728)
VUID-VkImageCopy-srcImage-01728
VUID-VkImageCopy-srcImage-01729
If the calling command's srcImage is a compressed image, or a single-plane, '_422' image format, extent.height must be a multiple of the compressed texel block height or (extent.height + srcOffset.y) must equal the source image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01729)
If the calling command's srcImage is a compressed image, or a single-plane, '_422' image format, extent.depth must be a multiple of the compressed texel block depth or (extent.depth + srcOffset.z) must equal the source image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01730)
VUID-VkImageCopy-srcImage-01730
If the calling command's srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.z must be 0 and extent.depth must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01785)
VUID-VkImageCopy-srcImage-01785
If the calling command's srcImage is of type VK_IMAGE_TYPE_2D, then srcOffset.z must be 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01787)
VUID-VkImageCopy-srcImage-01787
If the calling command's srcImage or dstImage is of type VK_IMAGE_TYPE_2D, then extent.depth must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01789)
VUID-VkImageCopy-srcImage-01789
VUID-VkImageCopy-srcImage-01790
If both srcImage and dstImage are of type VK_IMAGE_TYPE_2D then then extent.depth must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01790)
If the calling command's srcImage is of type VK_IMAGE_TYPE_2D, and the dstImage is of type VK_IMAGE_TYPE_3D, then extent.depth must equal to the layerCount member of srcSubresource. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcImage-01791)
VUID-VkImageCopy-srcImage-01791
srcOffset.x and (extent.width + srcOffset.x) must both be greater than or equal to 0 and less than or equal to the source image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcOffset-00144)
VUID-VkImageCopy-srcOffset-00144
VUID-VkImageCopy-srcOffset-00145
srcOffset.y and (extent.height + srcOffset.y) must both be greater than or equal to 0 and less than or equal to the source image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcOffset-00145)
srcOffset.z and (extent.depth + srcOffset.z) must both be greater than or equal to 0 and less than or equal to the source image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcOffset-00147)
VUID-VkImageCopy-srcOffset-00147
VUID-VkImageCopy-srcOffset-00157
If the calling command's srcImage is a compressed image, all members of srcOffset must be a multiple of the corresponding dimensions of the compressed texel block (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcOffset-00157)
srcSubresource must be a valid VkImageSubresourceLayers structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCopy-srcSubresource-parameter)
VUID-VkImageCopy-srcSubresource-parameter
If any of the bits VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT are set, VK_IMAGE_CREATE_PROTECTED_BIT must not also be set. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-None-01891)
VUID-VkImageCreateInfo-None-01891
VUID-VkImageCreateInfo-None-01925
If any of the bits VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT are set, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT must not also be set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-None-01925)
VUID-VkImageCreateInfo-arrayLayers-00948
arrayLayers must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-arrayLayers-00948)
VUID-VkImageCreateInfo-arrayLayers-00960
arrayLayers must be less than or equal to VkImageFormatProperties::maxArrayLayers (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-arrayLayers-00960)
extent::width must be greater than 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-extent-00944)
VUID-VkImageCreateInfo-extent-00944
extent::height must be greater than 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-extent-00945)
VUID-VkImageCreateInfo-extent-00945
extent::depth must be greater than 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-extent-00946)
VUID-VkImageCreateInfo-extent-00946
VUID-VkImageCreateInfo-extent-00959
mipLevels must be less than or equal to VkImageFormatProperties::maxMipLevels (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-extent-00959)
VUID-VkImageCreateInfo-flags-00949
If flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, imageType must be VK_IMAGE_TYPE_2D (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-00949)
VUID-VkImageCreateInfo-flags-00950
If flags contains VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT, imageType must be VK_IMAGE_TYPE_3D (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-00950)
VUID-VkImageCreateInfo-flags-00969
If the sparse bindings feature is not enabled, flags must not contain VK_IMAGE_CREATE_SPARSE_BINDING_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-00969)
If flags contains VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT, it must also contain VK_IMAGE_CREATE_SPARSE_BINDING_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-00987)
VUID-VkImageCreateInfo-flags-00987
VUID-VkImageCreateInfo-flags-00992
If flags contains VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT, then mipLevels must be one, arrayLayers must be one, imageType must be VK_IMAGE_TYPE_2D, and tiling must be VK_IMAGE_TILING_OPTIMAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-00992)
VUID-VkImageCreateInfo-flags-01533
If flags contains VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT format must be a depth or depth/stencil format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-01533)
If flags contains VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, then format must be a block-compressed image format, an ETC compressed image format, or an ASTC compressed image format. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-01572)
VUID-VkImageCreateInfo-flags-01572
VUID-VkImageCreateInfo-flags-01573
If flags contains VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, then flags must also contain VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-01573)
If the protected memory feature is not enabled, flags must not contain VK_IMAGE_CREATE_PROTECTED_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-01890)
VUID-VkImageCreateInfo-flags-01890
VUID-VkImageCreateInfo-flags-01924
If the sparse aliased residency feature is not enabled, flags must not contain VK_IMAGE_CREATE_SPARSE_ALIASED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-01924)
flags must be a valid combination of VkImageCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-flags-parameter)
VUID-VkImageCreateInfo-flags-parameter
VUID-VkImageCreateInfo-format-00940
The combination of format, imageType, tiling, usage, and flags must be supported, as indicated by a VK_SUCCESS return value from vkGetPhysicalDeviceImageFormatProperties invoked with the same values passed to the corresponding parameters. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-format-00940)
format must not be VK_FORMAT_UNDEFINED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-format-00943)
VUID-VkImageCreateInfo-format-00943
VUID-VkImageCreateInfo-format-01574
If the image format is one of those listed in Formats requiring sampler Y'CBCR conversion for VK_IMAGE_ASPECT_COLOR_BIT image views: (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-format-01574)
If format is not a multi-planar format, and flags does not include VK_IMAGE_CREATE_ALIAS_BIT, flags must not contain VK_IMAGE_CREATE_DISJOINT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-format-01577)
VUID-VkImageCreateInfo-format-01577
VUID-VkImageCreateInfo-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-format-parameter)
VUID-VkImageCreateInfo-imageType-00951
If imageType is VK_IMAGE_TYPE_1D, extent.width must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension1D, or VkImageFormatProperties::maxExtent.width (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00951)
VUID-VkImageCreateInfo-imageType-00952
If imageType is VK_IMAGE_TYPE_2D and flags does not contain VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension2D, or VkImageFormatProperties::maxExtent.width/height (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00952)
VUID-VkImageCreateInfo-imageType-00953
If imageType is VK_IMAGE_TYPE_2D and flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be less than or equal to VkPhysicalDeviceLimits::maxImageDimensionCube, or VkImageFormatProperties::maxExtent.width/height (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00953)
If imageType is VK_IMAGE_TYPE_2D and flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be equal and arrayLayers must be greater than or equal to 6 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00954)
VUID-VkImageCreateInfo-imageType-00954
VUID-VkImageCreateInfo-imageType-00955
If imageType is VK_IMAGE_TYPE_3D, extent.width, extent.height and extent.depth must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension3D, or VkImageFormatProperties::maxExtent.width/height/depth (as returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure) - whichever is higher (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00955)
If imageType is VK_IMAGE_TYPE_1D, both extent.height and extent.depth must be 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00956)
VUID-VkImageCreateInfo-imageType-00956
If imageType is VK_IMAGE_TYPE_2D, extent.depth must be 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00957)
VUID-VkImageCreateInfo-imageType-00957
If imageType is VK_IMAGE_TYPE_3D, arrayLayers must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00961)
VUID-VkImageCreateInfo-imageType-00961
If imageType is VK_IMAGE_TYPE_1D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00970)
VUID-VkImageCreateInfo-imageType-00970
If the sparse residency for 2D images feature is not enabled, and imageType is VK_IMAGE_TYPE_2D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00971)
VUID-VkImageCreateInfo-imageType-00971
If the sparse residency for 3D images feature is not enabled, and imageType is VK_IMAGE_TYPE_3D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00972)
VUID-VkImageCreateInfo-imageType-00972
If the sparse residency for images with 2 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_2_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00973)
VUID-VkImageCreateInfo-imageType-00973
If the sparse residency for images with 4 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_4_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00974)
VUID-VkImageCreateInfo-imageType-00974
If the sparse residency for images with 8 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_8_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00975)
VUID-VkImageCreateInfo-imageType-00975
VUID-VkImageCreateInfo-imageType-00976
If the sparse residency for images with 16 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_16_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-00976)
imageType must be a valid VkImageType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-imageType-parameter)
VUID-VkImageCreateInfo-imageType-parameter
initialLayout must be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-initialLayout-00993)
VUID-VkImageCreateInfo-initialLayout-00993
initialLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-initialLayout-parameter)
VUID-VkImageCreateInfo-initialLayout-parameter
mipLevels must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-mipLevels-00947)
VUID-VkImageCreateInfo-mipLevels-00947
VUID-VkImageCreateInfo-mipLevels-00958
mipLevels must be less than or equal to {lfloor}log2(max(extent.width, extent.height, extent.depth)){rfloor} + 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-mipLevels-00958)
VUID-VkImageCreateInfo-pNext-00988
If the pNext chain contains an instance of VkExternalMemoryImageCreateInfoNV, it must not contain an instance of VkExternalMemoryImageCreateInfo. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-00988)
VUID-VkImageCreateInfo-pNext-00990
If the pNext chain contains an instance of VkExternalMemoryImageCreateInfo, its handleTypes member must only contain bits that are also in VkExternalImageFormatProperties::externalMemoryProperties.compatibleHandleTypes, as returned by vkGetPhysicalDeviceImageFormatProperties2 with format, imageType, tiling, usage, and flags equal to those in this structure, and with an instance of VkPhysicalDeviceExternalImageFormatInfo in the pNext chain, with a handleType equal to any one of the handle types specified in VkExternalMemoryImageCreateInfo::handleTypes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-00990)
VUID-VkImageCreateInfo-pNext-00991
If the pNext chain contains an instance of VkExternalMemoryImageCreateInfoNV, its handleTypes member must only contain bits that are also in VkExternalImageFormatPropertiesNV::externalMemoryProperties.compatibleHandleTypes, as returned by vkGetPhysicalDeviceExternalImageFormatPropertiesNV with format, imageType, tiling, usage, and flags equal to those in this structure, and with externalHandleType equal to any one of the handle types specified in VkExternalMemoryImageCreateInfoNV::handleTypes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-00991)
VUID-VkImageCreateInfo-pNext-01443
If the pNext chain includes a ifdef::VK_VERSION_1_1,VK_KHR_external_memory[VkExternalMemoryImageCreateInfo] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-01443)
VUID-VkImageCreateInfo-pNext-01889
If the pNext chain does not contain an instance of VkExternalFormatANDROID, or if format is not VK_FORMAT_UNDEFINED, the combination of format, imageType, tiling, usage, and flags must be supported, as indicated by a VK_SUCCESS return value from vkGetPhysicalDeviceImageFormatProperties invoked with the same values passed to the corresponding parameters. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-01889)
VUID-VkImageCreateInfo-pNext-01892
If the pNext chain includes a VkExternalMemoryImageCreateInfo structure whose handleTypes member includes VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-01892)
If the pNext chain includes a VkExternalFormatANDROID structure whose externalFormat member is not 0: (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-01893)
VUID-VkImageCreateInfo-pNext-01893
If the pNext chain contains an instance of VkExternalFormatANDROID, and its member externalFormat is non-zero the format must be VK_FORMAT_UNDEFINED. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-01974)
VUID-VkImageCreateInfo-pNext-01974
VUID-VkImageCreateInfo-pNext-01975
If the pNext chain does not contain an instance of VkExternalFormatANDROID, or does and its member externalFormat is 0 the format must not be VK_FORMAT_UNDEFINED. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-01975)
VUID-VkImageCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDedicatedAllocationImageCreateInfoNV, VkExternalFormatANDROID, VkExternalMemoryImageCreateInfo, VkExternalMemoryImageCreateInfoNV, VkImageFormatListCreateInfoKHR, or VkImageSwapchainCreateInfoKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-pNext-pNext)
VUID-VkImageCreateInfo-physicalDeviceCount-01421
If the logical device was created with VkDeviceGroupDeviceCreateInfo::physicalDeviceCount equal to 1, flags must not contain VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-physicalDeviceCount-01421)
sType must be VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-sType-sType)
VUID-VkImageCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-sType-unique)
VUID-VkImageCreateInfo-sType-unique
VUID-VkImageCreateInfo-samples-00962
If samples is not VK_SAMPLE_COUNT_1_BIT, imageType must be VK_IMAGE_TYPE_2D, flags must not contain VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, tiling must be VK_IMAGE_TILING_OPTIMAL, and mipLevels must be equal to 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-samples-00962)
VUID-VkImageCreateInfo-samples-00967
samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, imageType, tiling, usage, and flags equal to those in this structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-samples-00967)
samples must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-samples-parameter)
VUID-VkImageCreateInfo-samples-parameter
If sharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a valid pointer to an array of queueFamilyIndexCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-sharingMode-00941)
VUID-VkImageCreateInfo-sharingMode-00941
If sharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-sharingMode-00942)
VUID-VkImageCreateInfo-sharingMode-00942
VUID-VkImageCreateInfo-sharingMode-01392
If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the physicalDevice that was used to create device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-sharingMode-01392)
VUID-VkImageCreateInfo-sharingMode-01420
If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by either vkGetPhysicalDeviceQueueFamilyProperties or vkGetPhysicalDeviceQueueFamilyProperties2 for the physicalDevice that was used to create device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-sharingMode-01420)
VUID-VkImageCreateInfo-sharingMode-parameter
sharingMode must be a valid VkSharingMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-sharingMode-parameter)
VUID-VkImageCreateInfo-tiling-01575
If tiling is VK_IMAGE_TILING_OPTIMAL, format is a multi-planar format, and VkFormatProperties::optimalTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_DISJOINT_BIT, flags must not contain VK_IMAGE_CREATE_DISJOINT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-tiling-01575)
If tiling is VK_IMAGE_TILING_LINEAR, format is a multi-planar format, and VkFormatProperties::linearTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_DISJOINT_BIT, flags must not contain VK_IMAGE_CREATE_DISJOINT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-tiling-01576)
VUID-VkImageCreateInfo-tiling-01576
VUID-VkImageCreateInfo-tiling-parameter
tiling must be a valid VkImageTiling value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-tiling-parameter)
If usage includes VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, then bits other than VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, and VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT must not be set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-usage-00963)
VUID-VkImageCreateInfo-usage-00963
VUID-VkImageCreateInfo-usage-00964
If usage includes VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, extent.width must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferWidth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-usage-00964)
VUID-VkImageCreateInfo-usage-00965
If usage includes VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, extent.height must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferHeight (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-usage-00965)
VUID-VkImageCreateInfo-usage-00966
If usage includes VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, usage must also contain at least one of VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-usage-00966)
VUID-VkImageCreateInfo-usage-00968
If the multisampled storage images feature is not enabled, and usage contains VK_IMAGE_USAGE_STORAGE_BIT, samples must be VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-usage-00968)
VUID-VkImageCreateInfo-usage-parameter
usage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-usage-parameter)
VUID-VkImageCreateInfo-usage-requiredbitmask
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageCreateInfo-usage-requiredbitmask)
VUID-VkImageFormatListCreateInfoKHR-flags-01579
If VkImageCreateInfo::flags does not contain VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT, viewFormatCount must be 0 or 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatListCreateInfoKHR-flags-01579)
VUID-VkImageFormatListCreateInfoKHR-pViewFormats-parameter
If viewFormatCount is not 0, pViewFormats must be a valid pointer to an array of viewFormatCount valid VkFormat values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatListCreateInfoKHR-pViewFormats-parameter)
sType must be VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatListCreateInfoKHR-sType-sType)
VUID-VkImageFormatListCreateInfoKHR-sType-sType
VUID-VkImageFormatListCreateInfoKHR-viewFormatCount-01578
If viewFormatCount is not 0, all of the formats in the pViewFormats array must be compatible with the format specified in the format field of VkImageCreateInfo, as described in the compatibility table. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatListCreateInfoKHR-viewFormatCount-01578)
VUID-VkImageFormatListCreateInfoKHR-viewFormatCount-01580
If viewFormatCount is not 0, VkImageCreateInfo::format must be in pViewFormats. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatListCreateInfoKHR-viewFormatCount-01580)
VUID-VkImageFormatProperties2-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkAndroidHardwareBufferUsageANDROID, VkExternalImageFormatProperties, VkSamplerYcbcrConversionImageFormatProperties, or VkTextureLODGatherFormatPropertiesAMD (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatProperties2-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatProperties2-sType-sType)
VUID-VkImageFormatProperties2-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageFormatProperties2-sType-unique)
VUID-VkImageFormatProperties2-sType-unique
dstAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-dstAccessMask-parameter)
VUID-VkImageMemoryBarrier-dstAccessMask-parameter
VUID-VkImageMemoryBarrier-image-01199
If image was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, srcQueueFamilyIndex and dstQueueFamilyIndex must both be VK_QUEUE_FAMILY_IGNORED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01199)
VUID-VkImageMemoryBarrier-image-01200
If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, srcQueueFamilyIndex and dstQueueFamilyIndex must either both be VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see Queue Family Properties). (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01200)
VUID-VkImageMemoryBarrier-image-01201
If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, dstQueueFamilyIndex must also be VK_QUEUE_FAMILY_IGNORED. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01201)
VUID-VkImageMemoryBarrier-image-01205
If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, and srcQueueFamilyIndex and dstQueueFamilyIndex are not VK_QUEUE_FAMILY_IGNORED, at least one of them must be the same as the family of the queue that will execute this barrier (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01205)
If image has a depth/stencil format with both depth and stencil components, then the aspectMask member of subresourceRange must include both VK_IMAGE_ASPECT_DEPTH_BIT and VK_IMAGE_ASPECT_STENCIL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01207)
VUID-VkImageMemoryBarrier-image-01207
VUID-VkImageMemoryBarrier-image-01381
If image was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, at least one of srcQueueFamilyIndex and dstQueueFamilyIndex must be VK_QUEUE_FAMILY_IGNORED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01381)
VUID-VkImageMemoryBarrier-image-01671
If image has a single-plane color format or is not disjoint, then the aspectMask member of subresourceRange must be VK_IMAGE_ASPECT_COLOR_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01671)
VUID-VkImageMemoryBarrier-image-01672
If image has a multi-planar format and the image is disjoint, then the aspectMask member of subresourceRange must include either at least one of VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, and VK_IMAGE_ASPECT_PLANE_2_BIT; or must include VK_IMAGE_ASPECT_COLOR_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01672)
VUID-VkImageMemoryBarrier-image-01673
If image has a multi-planar format with only two planes, then the aspectMask member of subresourceRange must not include VK_IMAGE_ASPECT_PLANE_2_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01673)
VUID-VkImageMemoryBarrier-image-01766
If image was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, and one of srcQueueFamilyIndex and dstQueueFamilyIndex is VK_QUEUE_FAMILY_IGNORED, the other must be VK_QUEUE_FAMILY_IGNORED or a special queue family reserved for external memory transfers, as described in Queue Family Ownership Transfer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01766)
If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and srcQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in Queue Family Ownership Transfer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01767)
VUID-VkImageMemoryBarrier-image-01767
If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE and dstQueueFamilyIndex is not VK_QUEUE_FAMILY_IGNORED, it must be a valid queue family or a special queue family reserved for external memory transfers, as described in Queue Family Ownership Transfer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01768)
VUID-VkImageMemoryBarrier-image-01768
If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-01932)
VUID-VkImageMemoryBarrier-image-01932
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-image-parameter)
VUID-VkImageMemoryBarrier-image-parameter
newLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-newLayout-01198)
VUID-VkImageMemoryBarrier-newLayout-01198
newLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-newLayout-parameter)
VUID-VkImageMemoryBarrier-newLayout-parameter
VUID-VkImageMemoryBarrier-oldLayout-01197
oldLayout must be VK_IMAGE_LAYOUT_UNDEFINED or the current layout of the image subresources affected by the barrier (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01197)
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01208)
VUID-VkImageMemoryBarrier-oldLayout-01208
VUID-VkImageMemoryBarrier-oldLayout-01209
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01209)
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01210)
VUID-VkImageMemoryBarrier-oldLayout-01210
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01211)
VUID-VkImageMemoryBarrier-oldLayout-01211
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then image must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01212)
VUID-VkImageMemoryBarrier-oldLayout-01212
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01213)
VUID-VkImageMemoryBarrier-oldLayout-01213
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01658)
VUID-VkImageMemoryBarrier-oldLayout-01658
If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-01659)
VUID-VkImageMemoryBarrier-oldLayout-01659
oldLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-oldLayout-parameter)
VUID-VkImageMemoryBarrier-oldLayout-parameter
VUID-VkImageMemoryBarrier-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkSampleLocationsInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-sType-sType)
VUID-VkImageMemoryBarrier-sType-sType
srcAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-srcAccessMask-parameter)
VUID-VkImageMemoryBarrier-srcAccessMask-parameter
VUID-VkImageMemoryBarrier-subresourceRange-01486
subresourceRange.baseMipLevel must be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-subresourceRange-01486)
subresourceRange.baseArrayLayer must be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-subresourceRange-01488)
VUID-VkImageMemoryBarrier-subresourceRange-01488
VUID-VkImageMemoryBarrier-subresourceRange-01724
If subresourceRange.levelCount is not VK_REMAINING_MIP_LEVELS, subresourceRange.baseMipLevel + subresourceRange.levelCount must be less than or equal to the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-subresourceRange-01724)
If subresourceRange.layerCount is not VK_REMAINING_ARRAY_LAYERS, subresourceRange.baseArrayLayer + subresourceRange.layerCount must be less than or equal to the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-subresourceRange-01725)
VUID-VkImageMemoryBarrier-subresourceRange-01725
VUID-VkImageMemoryBarrier-subresourceRange-parameter
subresourceRange must be a valid VkImageSubresourceRange structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryBarrier-subresourceRange-parameter)
If image was created with a multi-planar format and the VK_IMAGE_CREATE_DISJOINT_BIT flag, there must be a VkImagePlaneMemoryRequirementsInfo in the pNext chain of the VkImageMemoryRequirementsInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryRequirementsInfo2-image-01589)
VUID-VkImageMemoryRequirementsInfo2-image-01589
VUID-VkImageMemoryRequirementsInfo2-image-01590
If image was not created with the VK_IMAGE_CREATE_DISJOINT_BIT flag, there must not be a VkImagePlaneMemoryRequirementsInfo in the pNext chain of the VkImageMemoryRequirementsInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryRequirementsInfo2-image-01590)
VUID-VkImageMemoryRequirementsInfo2-image-01591
If image was created with a single-plane format, there must not be a VkImagePlaneMemoryRequirementsInfo in the pNext chain of the VkImageMemoryRequirementsInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryRequirementsInfo2-image-01591)
VUID-VkImageMemoryRequirementsInfo2-image-01897
If image was created with the VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID external memory handle type, then image must be bound to memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryRequirementsInfo2-image-01897)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryRequirementsInfo2-image-parameter)
VUID-VkImageMemoryRequirementsInfo2-image-parameter
VUID-VkImageMemoryRequirementsInfo2-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkImagePlaneMemoryRequirementsInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryRequirementsInfo2-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageMemoryRequirementsInfo2-sType-sType)
VUID-VkImageMemoryRequirementsInfo2-sType-sType
VUID-VkImagePlaneMemoryRequirementsInfo-planeAspect-01592
planeAspect must be an aspect that exists in the format; that is, for a two-plane image planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT, and for a three-plane image planeAspect must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT or VK_IMAGE_ASPECT_PLANE_2_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImagePlaneMemoryRequirementsInfo-planeAspect-01592)
VUID-VkImagePlaneMemoryRequirementsInfo-planeAspect-parameter
planeAspect must be a valid VkImageAspectFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImagePlaneMemoryRequirementsInfo-planeAspect-parameter)
sType must be VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImagePlaneMemoryRequirementsInfo-sType-sType)
VUID-VkImagePlaneMemoryRequirementsInfo-sType-sType
VUID-VkImageResolve-aspectMask-00266
The aspectMask member of srcSubresource and dstSubresource must only contain VK_IMAGE_ASPECT_COLOR_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-aspectMask-00266)
If the calling command's dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.y must be 0 and extent.height must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-dstImage-00276)
VUID-VkImageResolve-dstImage-00276
If the calling command's dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then dstOffset.z must be 0 and extent.depth must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-dstImage-00278)
VUID-VkImageResolve-dstImage-00278
dstOffset.x and (extent.width + dstOffset.x) must both be greater than or equal to 0 and less than or equal to the destination image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-dstOffset-00274)
VUID-VkImageResolve-dstOffset-00274
dstOffset.y and (extent.height + dstOffset.y) must both be greater than or equal to 0 and less than or equal to the destination image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-dstOffset-00275)
VUID-VkImageResolve-dstOffset-00275
dstOffset.z and (extent.depth + dstOffset.z) must both be greater than or equal to 0 and less than or equal to the destination image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-dstOffset-00277)
VUID-VkImageResolve-dstOffset-00277
dstSubresource must be a valid VkImageSubresourceLayers structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-dstSubresource-parameter)
VUID-VkImageResolve-dstSubresource-parameter
The layerCount member of srcSubresource and dstSubresource must match (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-layerCount-00267)
VUID-VkImageResolve-layerCount-00267
If either of the calling command's srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-srcImage-00268)
VUID-VkImageResolve-srcImage-00268
If the calling command's srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.y must be 0 and extent.height must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-srcImage-00271)
VUID-VkImageResolve-srcImage-00271
If the calling command's srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then srcOffset.z must be 0 and extent.depth must be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-srcImage-00273)
VUID-VkImageResolve-srcImage-00273
srcOffset.x and (extent.width + srcOffset.x) must both be greater than or equal to 0 and less than or equal to the source image subresource width (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-srcOffset-00269)
VUID-VkImageResolve-srcOffset-00269
VUID-VkImageResolve-srcOffset-00270
srcOffset.y and (extent.height + srcOffset.y) must both be greater than or equal to 0 and less than or equal to the source image subresource height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-srcOffset-00270)
srcOffset.z and (extent.depth + srcOffset.z) must both be greater than or equal to 0 and less than or equal to the source image subresource depth (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-srcOffset-00272)
VUID-VkImageResolve-srcOffset-00272
srcSubresource must be a valid VkImageSubresourceLayers structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageResolve-srcSubresource-parameter)
VUID-VkImageResolve-srcSubresource-parameter
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSparseMemoryRequirementsInfo2-image-parameter)
VUID-VkImageSparseMemoryRequirementsInfo2-image-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSparseMemoryRequirementsInfo2-pNext-pNext)
VUID-VkImageSparseMemoryRequirementsInfo2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSparseMemoryRequirementsInfo2-sType-sType)
VUID-VkImageSparseMemoryRequirementsInfo2-sType-sType
aspectMask must be a valid combination of VkImageAspectFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresource-aspectMask-parameter)
VUID-VkImageSubresource-aspectMask-parameter
aspectMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresource-aspectMask-requiredbitmask)
VUID-VkImageSubresource-aspectMask-requiredbitmask
VUID-VkImageSubresourceLayers-aspectMask-00167
If aspectMask contains VK_IMAGE_ASPECT_COLOR_BIT, it must not contain either of VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceLayers-aspectMask-00167)
aspectMask must not contain VK_IMAGE_ASPECT_METADATA_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceLayers-aspectMask-00168)
VUID-VkImageSubresourceLayers-aspectMask-00168
VUID-VkImageSubresourceLayers-aspectMask-parameter
aspectMask must be a valid combination of VkImageAspectFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceLayers-aspectMask-parameter)
aspectMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceLayers-aspectMask-requiredbitmask)
VUID-VkImageSubresourceLayers-aspectMask-requiredbitmask
layerCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceLayers-layerCount-01700)
VUID-VkImageSubresourceLayers-layerCount-01700
VUID-VkImageSubresourceRange-aspectMask-01670
If aspectMask includes VK_IMAGE_ASPECT_COLOR_BIT, then it must not include any of VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceRange-aspectMask-01670)
aspectMask must be a valid combination of VkImageAspectFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceRange-aspectMask-parameter)
VUID-VkImageSubresourceRange-aspectMask-parameter
VUID-VkImageSubresourceRange-aspectMask-requiredbitmask
aspectMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceRange-aspectMask-requiredbitmask)
If layerCount is not VK_REMAINING_ARRAY_LAYERS, it must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceRange-layerCount-01721)
VUID-VkImageSubresourceRange-layerCount-01721
If levelCount is not VK_REMAINING_MIP_LEVELS, it must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSubresourceRange-levelCount-01720)
VUID-VkImageSubresourceRange-levelCount-01720
sType must be VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSwapchainCreateInfoKHR-sType-sType)
VUID-VkImageSwapchainCreateInfoKHR-sType-sType
VUID-VkImageSwapchainCreateInfoKHR-swapchain-00995
If swapchain is not VK_NULL_HANDLE, the fields of VkImageCreateInfo must match the implied image creation parameters of the swapchain (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSwapchainCreateInfoKHR-swapchain-00995)
VUID-VkImageSwapchainCreateInfoKHR-swapchain-parameter
If swapchain is not VK_NULL_HANDLE, swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageSwapchainCreateInfoKHR-swapchain-parameter)
components must be a valid VkComponentMapping structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-components-parameter)
VUID-VkImageViewCreateInfo-components-parameter
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-flags-zerobitmask)
VUID-VkImageViewCreateInfo-flags-zerobitmask
VUID-VkImageViewCreateInfo-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-format-parameter)
VUID-VkImageViewCreateInfo-image-01003
If image was not created with VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT then viewType must not be VK_IMAGE_VIEW_TYPE_CUBE or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01003)
If image was created with VK_IMAGE_TYPE_3D but without VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set then viewType must not be VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01005)
VUID-VkImageViewCreateInfo-image-01005
VUID-VkImageViewCreateInfo-image-01006
If image was created with VK_IMAGE_TILING_LINEAR, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01006)
VUID-VkImageViewCreateInfo-image-01007
image must have been created with a usage value containing at least one of VK_IMAGE_USAGE_SAMPLED_BIT, VK_IMAGE_USAGE_STORAGE_BIT, VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01007)
If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01008)
VUID-VkImageViewCreateInfo-image-01008
If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01009)
VUID-VkImageViewCreateInfo-image-01009
VUID-VkImageViewCreateInfo-image-01010
If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01010)
VUID-VkImageViewCreateInfo-image-01011
If image was created with VK_IMAGE_TILING_LINEAR and usage contains VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01011)
If image was created with VK_IMAGE_TILING_OPTIMAL, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01012)
VUID-VkImageViewCreateInfo-image-01012
If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01013)
VUID-VkImageViewCreateInfo-image-01013
If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01014)
VUID-VkImageViewCreateInfo-image-01014
VUID-VkImageViewCreateInfo-image-01015
If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01015)
VUID-VkImageViewCreateInfo-image-01016
If image was created with VK_IMAGE_TILING_OPTIMAL and usage contains VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01016)
If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, format must be compatible with the format used to create image, as defined in Format Compatibility Classes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01018)
VUID-VkImageViewCreateInfo-image-01018
VUID-VkImageViewCreateInfo-image-01019
If image was not created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, format must be identical to the format used to create image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01019)
VUID-VkImageViewCreateInfo-image-01020
If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01020)
VUID-VkImageViewCreateInfo-image-01482
If image is not a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, or viewType is not VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::baseArrayLayer must be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01482)
VUID-VkImageViewCreateInfo-image-01484
If image is a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, and viewType is VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::baseArrayLayer must be less than the extent.depth specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01484)
VUID-VkImageViewCreateInfo-image-01583
If image was created with the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, format must be compatible with, or must be an uncompressed format that is size-compatible with, the format used to create image. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01583)
VUID-VkImageViewCreateInfo-image-01584
If image was created with the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, the levelCount and layerCount members of subresourceRange must both be 1. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01584)
VUID-VkImageViewCreateInfo-image-01586
If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, if the format of the image is a multi-planar format, and if subresourceRange.aspectMask is one of VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT, then format must be compatible with the VkFormat for the plane of the image format indicated by subresourceRange.aspectMask, as defined in Compatible formats of planes of multi-planar formats (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01586)
VUID-VkImageViewCreateInfo-image-01759
If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, but without the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, format must be compatible with the format used to create image, as defined in Format Compatibility Classes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01759)
If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, and if the format of the image is not a multi-planar format, format must be compatible with the format used to create image, as defined in Format Compatibility Classes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01760)
VUID-VkImageViewCreateInfo-image-01760
VUID-VkImageViewCreateInfo-image-01761
If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, but without the VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT flag, and if the format of the image is not a multi-planar format, format must be compatible with the format used to create image, as defined in Format Compatibility Classes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01761)
VUID-VkImageViewCreateInfo-image-01762
If image was not created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, or if the format of the image is a multi-planar format and if subresourceRange.aspectMask is VK_IMAGE_ASPECT_COLOR_BIT, format must be identical to the format used to create image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01762)
If image has an external format: (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01896)
VUID-VkImageViewCreateInfo-image-01896
If image was created with VK_IMAGE_TILING_OPTIMAL and format is not VK_FORMAT_UNDEFINED, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01965)
VUID-VkImageViewCreateInfo-image-01965
If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01966)
VUID-VkImageViewCreateInfo-image-01966
If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01967)
VUID-VkImageViewCreateInfo-image-01967
VUID-VkImageViewCreateInfo-image-01968
If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01968)
VUID-VkImageViewCreateInfo-image-01969
If image was created with VK_IMAGE_TILING_OPTIMAL, and format is not VK_FORMAT_UNDEFINED, and usage contains VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-01969)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-image-parameter)
VUID-VkImageViewCreateInfo-image-parameter
If a VkImageFormatListCreateInfoKHR structure was included in the pNext chain of the VkImageCreateInfo struct used when creating image and the viewFormatCount field of VkImageFormatListCreateInfoKHR is not zero then format must be one of the formats in VkImageFormatListCreateInfoKHR::pViewFormats. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-pNext-01585)
VUID-VkImageViewCreateInfo-pNext-01585
VUID-VkImageViewCreateInfo-pNext-01970
If the pNext chain contains an instance of VkSamplerYcbcrConversionInfo with a conversion value other than VK_NULL_HANDLE, all members of components must have the value VK_COMPONENT_SWIZZLE_IDENTITY. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-pNext-01970)
VUID-VkImageViewCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkImageViewUsageCreateInfo or VkSamplerYcbcrConversionInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-sType-sType)
VUID-VkImageViewCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-sType-unique)
VUID-VkImageViewCreateInfo-sType-unique
subresourceRange and viewType must be compatible with the image, as described in the compatibility table (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subResourceRange-01021)
VUID-VkImageViewCreateInfo-subResourceRange-01021
VUID-VkImageViewCreateInfo-subresourceRange-01478
subresourceRange.baseMipLevel must be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subresourceRange-01478)
VUID-VkImageViewCreateInfo-subresourceRange-01480
subresourceRange.baseArrayLayer must be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subresourceRange-01480)
VUID-VkImageViewCreateInfo-subresourceRange-01483
If subresourceRange::layerCount is not VK_REMAINING_ARRAY_LAYERS, image is not a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, or viewType is not VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::layerCount must be non-zero and subresourceRange::baseArrayLayer + subresourceRange::layerCount must be less than or equal to the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subresourceRange-01483)
VUID-VkImageViewCreateInfo-subresourceRange-01485
If subresourceRange::layerCount is not VK_REMAINING_ARRAY_LAYERS, image is a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, and viewType is VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange::layerCount must be non-zero and subresourceRange::baseArrayLayer + subresourceRange::layerCount must be less than or equal to the extent.depth specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subresourceRange-01485)
VUID-VkImageViewCreateInfo-subresourceRange-01718
If subresourceRange.levelCount is not VK_REMAINING_MIP_LEVELS, subresourceRange.baseMipLevel + subresourceRange.levelCount must be less than or equal to the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subresourceRange-01718)
VUID-VkImageViewCreateInfo-subresourceRange-01719
If subresourceRange.layerCount is not VK_REMAINING_ARRAY_LAYERS, subresourceRange.baseArrayLayer + subresourceRange.layerCount must be less than or equal to the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subresourceRange-01719)
VUID-VkImageViewCreateInfo-subresourceRange-parameter
subresourceRange must be a valid VkImageSubresourceRange structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-subresourceRange-parameter)
If the image cubemap arrays feature is not enabled, viewType must not be VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-viewType-01004)
VUID-VkImageViewCreateInfo-viewType-01004
viewType must be a valid VkImageViewType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewCreateInfo-viewType-parameter)
VUID-VkImageViewCreateInfo-viewType-parameter
sType must be VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewUsageCreateInfo-sType-sType)
VUID-VkImageViewUsageCreateInfo-sType-sType
VUID-VkImageViewUsageCreateInfo-usage-01587
usage must not include any set bits that were not set in the usage member of the VkImageCreateInfo structure used to create the image this image view is created from. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewUsageCreateInfo-usage-01587)
usage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewUsageCreateInfo-usage-parameter)
VUID-VkImageViewUsageCreateInfo-usage-parameter
VUID-VkImageViewUsageCreateInfo-usage-requiredbitmask
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImageViewUsageCreateInfo-usage-requiredbitmask)
If buffer is not NULL, Android hardware buffers must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01880)
VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01880
VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01881
If buffer is not NULL, it must be a valid Android hardware buffer object with format and usage compatible with Vulkan as described by VkExternalMemoryHandleTypeFlagBits. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01881)
VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-parameter
buffer must be a valid pointer to a AHardwareBuffer value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-parameter)
VUID-VkImportAndroidHardwareBufferInfoANDROID-sType-sType
sType must be VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportAndroidHardwareBufferInfoANDROID-sType-sType)
VUID-VkImportFenceFdInfoKHR-fd-01541
fd must obey any requirements listed for handleType in external fence handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceFdInfoKHR-fd-01541)
VUID-VkImportFenceFdInfoKHR-fence-parameter
fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceFdInfoKHR-fence-parameter)
VUID-VkImportFenceFdInfoKHR-flags-parameter
flags must be a valid combination of VkFenceImportFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceFdInfoKHR-flags-parameter)
VUID-VkImportFenceFdInfoKHR-handleType-01464
handleType must be a value included in the Handle Types Supported by VkImportFenceFdInfoKHR table. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceFdInfoKHR-handleType-01464)
handleType must be a valid VkExternalFenceHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceFdInfoKHR-handleType-parameter)
VUID-VkImportFenceFdInfoKHR-handleType-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceFdInfoKHR-pNext-pNext)
VUID-VkImportFenceFdInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceFdInfoKHR-sType-sType)
VUID-VkImportFenceFdInfoKHR-sType-sType
fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-fence-parameter)
VUID-VkImportFenceWin32HandleInfoKHR-fence-parameter
flags must be a valid combination of VkFenceImportFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-flags-parameter)
VUID-VkImportFenceWin32HandleInfoKHR-flags-parameter
VUID-VkImportFenceWin32HandleInfoKHR-handle-01462
If handle is not NULL, name must be NULL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-handle-01462)
VUID-VkImportFenceWin32HandleInfoKHR-handle-01539
If handle is not NULL, it must obey any requirements listed for handleType in external fence handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-handle-01539)
handleType must be a value included in the Handle Types Supported by VkImportFenceWin32HandleInfoKHR table. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-handleType-01457)
VUID-VkImportFenceWin32HandleInfoKHR-handleType-01457
If handleType is not VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT, name must be NULL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-handleType-01459)
VUID-VkImportFenceWin32HandleInfoKHR-handleType-01459
VUID-VkImportFenceWin32HandleInfoKHR-handleType-01460
If handleType is not 0 and handle is NULL, name must name a valid synchronization primitive of the type specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-handleType-01460)
If handleType is not 0 and name is NULL, handle must be a valid handle of the type specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-handleType-01461)
VUID-VkImportFenceWin32HandleInfoKHR-handleType-01461
VUID-VkImportFenceWin32HandleInfoKHR-handleType-parameter
If handleType is not 0, handleType must be a valid VkExternalFenceHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-handleType-parameter)
VUID-VkImportFenceWin32HandleInfoKHR-name-01540
If name is not NULL, it must obey any requirements listed for handleType in external fence handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-name-01540)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-pNext-pNext)
VUID-VkImportFenceWin32HandleInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportFenceWin32HandleInfoKHR-sType-sType)
VUID-VkImportFenceWin32HandleInfoKHR-sType-sType
The memory from which fd was exported must have been created on the same underlying physical device as device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-fd-00668)
VUID-VkImportMemoryFdInfoKHR-fd-00668
VUID-VkImportMemoryFdInfoKHR-fd-01520
fd must obey any requirements listed for handleType in external memory handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-fd-01520)
VUID-VkImportMemoryFdInfoKHR-fd-01746
The memory represented by fd must have been created from a physical device and driver that is compatible with device and handleType, as described in External memory handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-fd-01746)
VUID-VkImportMemoryFdInfoKHR-handleType-00667
If handleType is not 0, it must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-handleType-00667)
If handleType is not 0, it must be defined as a POSIX file descriptor handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-handleType-00669)
VUID-VkImportMemoryFdInfoKHR-handleType-00669
If handleType is not 0, fd must be a valid handle of the type specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-handleType-00670)
VUID-VkImportMemoryFdInfoKHR-handleType-00670
VUID-VkImportMemoryFdInfoKHR-handleType-parameter
If handleType is not 0, handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-handleType-parameter)
sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryFdInfoKHR-sType-sType)
VUID-VkImportMemoryFdInfoKHR-sType-sType
VUID-VkImportMemoryHostPointerInfoEXT-handleType-01747
If handleType is not 0, it must be supported for import, as reported in VkExternalMemoryPropertiesKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryHostPointerInfoEXT-handleType-01747)
VUID-VkImportMemoryHostPointerInfoEXT-handleType-01748
If handleType is not 0, it must be VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT or VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryHostPointerInfoEXT-handleType-01748)
VUID-VkImportMemoryHostPointerInfoEXT-handleType-01750
If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT, pHostPointer must be a pointer to allocationSize number of bytes of host memory, where allocationSize is the member of the VkMemoryAllocateInfo structure this structure is chained to (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryHostPointerInfoEXT-handleType-01750)
VUID-VkImportMemoryHostPointerInfoEXT-handleType-01751
If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT, pHostPointer must be a pointer to allocationSize number of bytes of host mapped foreign memory, where allocationSize is the member of the VkMemoryAllocateInfo structure this structure is chained to (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryHostPointerInfoEXT-handleType-01751)
VUID-VkImportMemoryHostPointerInfoEXT-handleType-parameter
handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryHostPointerInfoEXT-handleType-parameter)
VUID-VkImportMemoryHostPointerInfoEXT-pHostPointer-01749
pHostPointer must be a pointer aligned to an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryHostPointerInfoEXT-pHostPointer-01749)
sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryHostPointerInfoEXT-sType-sType)
VUID-VkImportMemoryHostPointerInfoEXT-sType-sType
The memory from which handle was exported, or the memory named by name must have been created on the same underlying physical device as device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handle-00659)
VUID-VkImportMemoryWin32HandleInfoKHR-handle-00659
if handle is not NULL, name must be NULL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handle-01441)
VUID-VkImportMemoryWin32HandleInfoKHR-handle-01441
If handle is not NULL, it must obey any requirements listed for handleType in external memory handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handle-01518)
VUID-VkImportMemoryWin32HandleInfoKHR-handle-01518
VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00658
If handleType is not 0, it must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00658)
VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00660
If handleType is not 0, it must be defined as an NT handle or a global share handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00660)
VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00661
If handleType is not 0 and name is NULL, handle must be a valid handle of the type specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00661)
VUID-VkImportMemoryWin32HandleInfoKHR-handleType-01439
If handleType is not VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, name must be NULL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handleType-01439)
VUID-VkImportMemoryWin32HandleInfoKHR-handleType-01440
If handleType is not 0 and handle is NULL, name must name a valid memory resource of the type specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handleType-01440)
VUID-VkImportMemoryWin32HandleInfoKHR-handleType-parameter
If handleType is not 0, handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-handleType-parameter)
If name is not NULL, it must obey any requirements listed for handleType in external memory handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-name-01519)
VUID-VkImportMemoryWin32HandleInfoKHR-name-01519
sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoKHR-sType-sType)
VUID-VkImportMemoryWin32HandleInfoKHR-sType-sType
VUID-VkImportMemoryWin32HandleInfoNV-handle-01328
handle must be a valid handle to memory, obtained as specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoNV-handle-01328)
handleType must not have more than one bit set. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoNV-handleType-01327)
VUID-VkImportMemoryWin32HandleInfoNV-handleType-01327
handleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoNV-handleType-parameter)
VUID-VkImportMemoryWin32HandleInfoNV-handleType-parameter
sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportMemoryWin32HandleInfoNV-sType-sType)
VUID-VkImportMemoryWin32HandleInfoNV-sType-sType
fd must obey any requirements listed for handleType in external semaphore handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreFdInfoKHR-fd-01544)
VUID-VkImportSemaphoreFdInfoKHR-fd-01544
VUID-VkImportSemaphoreFdInfoKHR-flags-parameter
flags must be a valid combination of VkSemaphoreImportFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreFdInfoKHR-flags-parameter)
VUID-VkImportSemaphoreFdInfoKHR-handleType-01143
handleType must be a value included in the Handle Types Supported by VkImportSemaphoreFdInfoKHR table. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreFdInfoKHR-handleType-01143)
handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreFdInfoKHR-handleType-parameter)
VUID-VkImportSemaphoreFdInfoKHR-handleType-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreFdInfoKHR-pNext-pNext)
VUID-VkImportSemaphoreFdInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreFdInfoKHR-sType-sType)
VUID-VkImportSemaphoreFdInfoKHR-sType-sType
semaphore must be a valid VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreFdInfoKHR-semaphore-parameter)
VUID-VkImportSemaphoreFdInfoKHR-semaphore-parameter
VUID-VkImportSemaphoreWin32HandleInfoKHR-flags-parameter
flags must be a valid combination of VkSemaphoreImportFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-flags-parameter)
VUID-VkImportSemaphoreWin32HandleInfoKHR-handle-01469
If handle is not NULL, name must be NULL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-handle-01469)
VUID-VkImportSemaphoreWin32HandleInfoKHR-handle-01542
If handle is not NULL, it must obey any requirements listed for handleType in external semaphore handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-handle-01542)
VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01140
handleType must be a value included in the Handle Types Supported by VkImportSemaphoreWin32HandleInfoKHR table. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01140)
If handleType is not VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT or VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, name must be NULL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01466)
VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01466
VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01467
If handleType is not 0 and handle is NULL, name must name a valid synchronization primitive of the type specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01467)
VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01468
If handleType is not 0 and name is NULL, handle must be a valid handle of the type specified by handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01468)
VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-parameter
If handleType is not 0, handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-parameter)
If name is not NULL, it must obey any requirements listed for handleType in external semaphore handle types compatibility. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-name-01543)
VUID-VkImportSemaphoreWin32HandleInfoKHR-name-01543
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-pNext-pNext)
VUID-VkImportSemaphoreWin32HandleInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-sType-sType)
VUID-VkImportSemaphoreWin32HandleInfoKHR-sType-sType
semaphore must be a valid VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkImportSemaphoreWin32HandleInfoKHR-semaphore-parameter)
VUID-VkImportSemaphoreWin32HandleInfoKHR-semaphore-parameter
VUID-VkIndirectCommandsLayoutCreateInfoNVX-computeBindingPointSupport-01348
If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, then pipelineBindPoint must not be VK_PIPELINE_BIND_POINT_COMPUTE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-computeBindingPointSupport-01348)
flags must be a valid combination of VkIndirectCommandsLayoutUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-flags-parameter)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-flags-parameter
VUID-VkIndirectCommandsLayoutCreateInfoNVX-flags-requiredbitmask
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-flags-requiredbitmask)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-pNext-pNext)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-pNext-pNext
VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01349
If pTokens contains an entry of VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NVX it must be the first element of the array and there must be only a single element of such token type. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01349)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01350
All state binding tokens in pTokens must occur prior work provoking tokens (VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVX, VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVX, VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NVX). (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01350)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01351
The content of pTokens must include one single work provoking token that is compatible with the pipelineBindPoint. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-01351)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-parameter
pTokens must be a valid pointer to an array of tokenCount valid VkIndirectCommandsLayoutTokenNVX structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-pTokens-parameter)
pipelineBindPoint must be a valid VkPipelineBindPoint value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-pipelineBindPoint-parameter)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-pipelineBindPoint-parameter
sType must be VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-sType-sType)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-sType-sType
tokenCount must be greater than 0 and below VkDeviceGeneratedCommandsLimitsNVX::maxIndirectCommandsLayoutTokenCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-tokenCount-01347)
VUID-VkIndirectCommandsLayoutCreateInfoNVX-tokenCount-01347
VUID-VkIndirectCommandsLayoutCreateInfoNVX-tokenCount-arraylength
tokenCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutCreateInfoNVX-tokenCount-arraylength)
VUID-VkIndirectCommandsLayoutTokenNVX-bindingUnit-01342
bindingUnit must stay within device supported limits for the appropriate commands. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutTokenNVX-bindingUnit-01342)
divisor must be greater than 0 and a power of two. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutTokenNVX-divisor-01344)
VUID-VkIndirectCommandsLayoutTokenNVX-divisor-01344
dynamicCount must stay within device supported limits for the appropriate commands. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutTokenNVX-dynamicCount-01343)
VUID-VkIndirectCommandsLayoutTokenNVX-dynamicCount-01343
VUID-VkIndirectCommandsLayoutTokenNVX-tokenType-parameter
tokenType must be a valid VkIndirectCommandsTokenTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsLayoutTokenNVX-tokenType-parameter)
VUID-VkIndirectCommandsTokenNVX-buffer-01345
The buffer's usage flag must have the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsTokenNVX-buffer-01345)
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsTokenNVX-buffer-parameter)
VUID-VkIndirectCommandsTokenNVX-buffer-parameter
The offset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minCommandsTokenBufferOffsetAlignment. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsTokenNVX-offset-01346)
VUID-VkIndirectCommandsTokenNVX-offset-01346
tokenType must be a valid VkIndirectCommandsTokenTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkIndirectCommandsTokenNVX-tokenType-parameter)
VUID-VkIndirectCommandsTokenNVX-tokenType-parameter
VUID-VkInputAttachmentAspectReference-aspectMask-01964
aspectMask must not include VK_IMAGE_ASPECT_METADATA_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInputAttachmentAspectReference-aspectMask-01964)
aspectMask must be a valid combination of VkImageAspectFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInputAttachmentAspectReference-aspectMask-parameter)
VUID-VkInputAttachmentAspectReference-aspectMask-parameter
VUID-VkInputAttachmentAspectReference-aspectMask-requiredbitmask
aspectMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInputAttachmentAspectReference-aspectMask-requiredbitmask)
VUID-VkInstanceCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInstanceCreateInfo-flags-zerobitmask)
If pApplicationInfo is not NULL, pApplicationInfo must be a valid pointer to a valid VkApplicationInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInstanceCreateInfo-pApplicationInfo-parameter)
VUID-VkInstanceCreateInfo-pApplicationInfo-parameter
VUID-VkInstanceCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDebugReportCallbackCreateInfoEXT, VkDebugUtilsMessengerCreateInfoEXT, or VkValidationFlagsEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInstanceCreateInfo-pNext-pNext)
If enabledExtensionCount is not 0, ppEnabledExtensionNames must be a valid pointer to an array of enabledExtensionCount null-terminated UTF-8 strings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInstanceCreateInfo-ppEnabledExtensionNames-parameter)
VUID-VkInstanceCreateInfo-ppEnabledExtensionNames-parameter
VUID-VkInstanceCreateInfo-ppEnabledLayerNames-parameter
If enabledLayerCount is not 0, ppEnabledLayerNames must be a valid pointer to an array of enabledLayerCount null-terminated UTF-8 strings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInstanceCreateInfo-ppEnabledLayerNames-parameter)
sType must be VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInstanceCreateInfo-sType-sType)
VUID-VkInstanceCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkInstanceCreateInfo-sType-unique)
VUID-VkInstanceCreateInfo-sType-unique
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMacOSSurfaceCreateInfoMVK-flags-zerobitmask)
VUID-VkMacOSSurfaceCreateInfoMVK-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMacOSSurfaceCreateInfoMVK-pNext-pNext)
VUID-VkMacOSSurfaceCreateInfoMVK-pNext-pNext
VUID-VkMacOSSurfaceCreateInfoMVK-pView-01317
pView must be a valid NSView and must be backed by a CALayer instance of type CAMetalLayer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMacOSSurfaceCreateInfoMVK-pView-01317)
sType must be VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMacOSSurfaceCreateInfoMVK-sType-sType)
VUID-VkMacOSSurfaceCreateInfoMVK-sType-sType
VUID-VkMappedMemoryRange-memory-00684
memory must be currently mapped (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-memory-00684)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-memory-parameter)
VUID-VkMappedMemoryRange-memory-parameter
VUID-VkMappedMemoryRange-offset-00687
offset must be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-offset-00687)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-pNext-pNext)
VUID-VkMappedMemoryRange-pNext-pNext
sType must be VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-sType-sType)
VUID-VkMappedMemoryRange-sType-sType
VUID-VkMappedMemoryRange-size-00685
If size is not equal to VK_WHOLE_SIZE, offset and size must specify a range contained within the currently mapped range of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-00685)
VUID-VkMappedMemoryRange-size-00686
If size is equal to VK_WHOLE_SIZE, offset must be within the currently mapped range of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-00686)
VUID-VkMappedMemoryRange-size-01389
If size is equal to VK_WHOLE_SIZE, the end of the current mapping of memory must be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize bytes from the beginning of the memory object. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01389)
VUID-VkMappedMemoryRange-size-01390
If size is not equal to VK_WHOLE_SIZE, size must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize, or offset plus size must equal the size of memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMappedMemoryRange-size-01390)
If VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT is set, deviceMask must be a valid device mask. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateFlagsInfo-deviceMask-00675)
VUID-VkMemoryAllocateFlagsInfo-deviceMask-00675
VUID-VkMemoryAllocateFlagsInfo-deviceMask-00676
If VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT is set, deviceMask must not be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateFlagsInfo-deviceMask-00676)
flags must be a valid combination of VkMemoryAllocateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateFlagsInfo-flags-parameter)
VUID-VkMemoryAllocateFlagsInfo-flags-parameter
sType must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateFlagsInfo-sType-sType)
VUID-VkMemoryAllocateFlagsInfo-sType-sType
VUID-VkMemoryAllocateInfo-None-00643
If the parameters define an import operation and the external handle specified was created by the Vulkan API, the device mask specified by VkMemoryAllocateFlagsInfo must match that specified when the memory object being imported was allocated. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-None-00643)
VUID-VkMemoryAllocateInfo-None-00644
If the parameters define an import operation and the external handle specified was created by the Vulkan API, the list of physical devices that comprise the logical device passed to vkAllocateMemory must match the list of physical devices that comprise the logical device on which the memory was originally allocated. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-None-00644)
VUID-VkMemoryAllocateInfo-None-01873
If the parameters define an import operation and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BIT_ANDROID: (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-None-01873)
VUID-VkMemoryAllocateInfo-allocationSize-00638
allocationSize must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-allocationSize-00638)
VUID-VkMemoryAllocateInfo-allocationSize-00646
If the parameters define an import operation and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, allocationSize must match the size reported in the memory requirements of the image or buffer member of the instance of VkDedicatedAllocationMemoryAllocateInfoNV included in the pNext chain. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-allocationSize-00646)
VUID-VkMemoryAllocateInfo-allocationSize-00647
If the parameters define an import operation and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, allocationSize must match the size specified when creating the Direct3D 12 heap from which the external handle was extracted. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-allocationSize-00647)
VUID-VkMemoryAllocateInfo-allocationSize-01742
If the parameters define an import operation, the external handle specified was created by the Vulkan API, and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR, then the values of allocationSize and memoryTypeIndex must match those specified when the memory object being imported was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-allocationSize-01742)
VUID-VkMemoryAllocateInfo-allocationSize-01743
If the parameters define an import operation, the external handle was created by the Vulkan API, and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR or VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR, then the values of allocationSize and memoryTypeIndex must match those specified when the memory object being imported was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-allocationSize-01743)
VUID-VkMemoryAllocateInfo-allocationSize-01745
If the parameters define an import operation and the external handle is a host pointer, allocationSize must be an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-allocationSize-01745)
VUID-VkMemoryAllocateInfo-memoryTypeIndex-00645
If the parameters define an import operation and the external handle is an NT handle or a global share handle created outside of the Vulkan API, the value of memoryTypeIndex must be one of those returned by vkGetMemoryWin32HandlePropertiesKHR. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-memoryTypeIndex-00645)
VUID-VkMemoryAllocateInfo-memoryTypeIndex-00648
If the parameters define an import operation and the external handle is a POSIX file descriptor created outside of the Vulkan API, the value of memoryTypeIndex must be one of those returned by vkGetMemoryFdPropertiesKHR. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-memoryTypeIndex-00648)
If the parameters define an import operation and the external handle is a host pointer, the value of memoryTypeIndex must be one of those returned by vkGetMemoryHostPointerPropertiesEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-memoryTypeIndex-01744)
VUID-VkMemoryAllocateInfo-memoryTypeIndex-01744
If the protected memory feature is not enabled, the VkMemoryAllocateInfo::memoryTypeIndex must not indicate a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-memoryTypeIndex-01872)
VUID-VkMemoryAllocateInfo-memoryTypeIndex-01872
VUID-VkMemoryAllocateInfo-pNext-00639
If the pNext chain contains an instance of     VkExportMemoryAllocateInfo, and any of the handle types specified     in VkExportMemoryAllocateInfo::handleTypes require a     dedicated allocation, as reported by     vkGetPhysicalDeviceImageFormatProperties2 in     VkExternalImageFormatProperties::externalMemoryProperties::externalMemoryFeatures     or     VkExternalBufferProperties::externalMemoryProperties::externalMemoryFeatures,     the pNext chain must contain an instance of ifdef::VK_KHR_dedicated_allocation[VkMemoryDedicatedAllocateInfo] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-pNext-00639)
VUID-VkMemoryAllocateInfo-pNext-00640
If the pNext chain contains an instance of VkExportMemoryAllocateInfo, it must not contain an instance of VkExportMemoryAllocateInfoNV or VkExportMemoryWin32HandleInfoNV. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-pNext-00640)
VUID-VkMemoryAllocateInfo-pNext-00641
If the pNext chain contains an instance of VkImportMemoryWin32HandleInfoKHR, it must not contain an instance of VkImportMemoryWin32HandleInfoNV. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-pNext-00641)
VUID-VkMemoryAllocateInfo-pNext-01874
If the parameters do not define an import operation, and the pNext chain contains an instance of VkExportMemoryAllocateInfo with VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID included in its handleTypes member, and the pNext contains an instance of VkMemoryDedicatedAllocateInfo with image not equal to VK_NULL_HANDLE, then allocationSize must be 0, otherwise allocationSize must be greater than 0. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-pNext-01874)
VUID-VkMemoryAllocateInfo-pNext-01875
If the parameters define an import operation, the external handle is an Android hardware buffer, and the pNext chain includes an instance of VkMemoryDedicatedAllocateInfo with image that is not VK_NULL_HANDLE: (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-pNext-01875)
VUID-VkMemoryAllocateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDedicatedAllocationMemoryAllocateInfoNV, VkExportMemoryAllocateInfo, VkExportMemoryAllocateInfoNV, VkExportMemoryWin32HandleInfoKHR, VkExportMemoryWin32HandleInfoNV, VkImportAndroidHardwareBufferInfoANDROID, VkImportMemoryFdInfoKHR, VkImportMemoryHostPointerInfoEXT, VkImportMemoryWin32HandleInfoKHR, VkImportMemoryWin32HandleInfoNV, VkMemoryAllocateFlagsInfo, or VkMemoryDedicatedAllocateInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-sType-sType)
VUID-VkMemoryAllocateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryAllocateInfo-sType-unique)
VUID-VkMemoryAllocateInfo-sType-unique
dstAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryBarrier-dstAccessMask-parameter)
VUID-VkMemoryBarrier-dstAccessMask-parameter
VUID-VkMemoryBarrier-pNext-pNext
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryBarrier-pNext-pNext)
VUID-VkMemoryBarrier-sType-sType
sType must be VK_STRUCTURE_TYPE_MEMORY_BARRIER (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryBarrier-sType-sType)
srcAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryBarrier-srcAccessMask-parameter)
VUID-VkMemoryBarrier-srcAccessMask-parameter
If buffer is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-buffer-01435)
VUID-VkMemoryDedicatedAllocateInfo-buffer-01435
VUID-VkMemoryDedicatedAllocateInfo-buffer-01436
If buffer is not VK_NULL_HANDLE, buffer must have been created without VK_BUFFER_CREATE_SPARSE_BINDING_BIT set in VkBufferCreateInfo::flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-buffer-01436)
VUID-VkMemoryDedicatedAllocateInfo-buffer-01877
If buffer is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, and the external handle was created by the Vulkan API, then the memory being imported must also be a dedicated buffer allocation and buffer must be identical to the buffer associated with the imported memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-buffer-01877)
VUID-VkMemoryDedicatedAllocateInfo-buffer-01879
If buffer is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, the memory being imported must also be a dedicated buffer allocation and buffer must be identical to the buffer associated with the imported memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-buffer-01879)
VUID-VkMemoryDedicatedAllocateInfo-buffer-parameter
If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-buffer-parameter)
VUID-VkMemoryDedicatedAllocateInfo-commonparent
Both of buffer, and image that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-commonparent)
VUID-VkMemoryDedicatedAllocateInfo-image-01432
At least one of image and buffer must be VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-image-01432)
VUID-VkMemoryDedicatedAllocateInfo-image-01433
If image is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-image-01433)
VUID-VkMemoryDedicatedAllocateInfo-image-01434
If image is not VK_NULL_HANDLE, image must have been created without VK_IMAGE_CREATE_SPARSE_BINDING_BIT set in VkImageCreateInfo::flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-image-01434)
VUID-VkMemoryDedicatedAllocateInfo-image-01797
If image is not VK_NULL_HANDLE, image must not have been created with VK_IMAGE_CREATE_DISJOINT_BIT set in VkImageCreateInfo::flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-image-01797)
VUID-VkMemoryDedicatedAllocateInfo-image-01876
If image is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, and the external handle was created by the Vulkan API, then the memory being imported must also be a dedicated image allocation and image must be identical to the image associated with the imported memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-image-01876)
VUID-VkMemoryDedicatedAllocateInfo-image-01878
If image is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, the memory being imported must also be a dedicated image allocation and image must be identical to the image associated with the imported memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-image-01878)
If image is not VK_NULL_HANDLE, image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-image-parameter)
VUID-VkMemoryDedicatedAllocateInfo-image-parameter
sType must be VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedAllocateInfo-sType-sType)
VUID-VkMemoryDedicatedAllocateInfo-sType-sType
sType must be VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryDedicatedRequirements-sType-sType)
VUID-VkMemoryDedicatedRequirements-sType-sType
VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-handleTypes-01882
VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID must have been included in VkExportMemoryAllocateInfoKHR::handleTypes when memory was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-handleTypes-01882)
VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-pNext-01883
If the pNext chain of the VkMemoryAllocateInfo used to allocate memory included a VkMemoryDedicatedAllocateInfo with non-NULL image member, then that image must already be bound to memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetAndroidHardwareBufferInfoANDROID-pNext-01883)
handleType must have been included in VkExportMemoryAllocateInfo::handleTypes when memory was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetFdInfoKHR-handleType-00671)
VUID-VkMemoryGetFdInfoKHR-handleType-00671
VUID-VkMemoryGetFdInfoKHR-handleType-00672
handleType must be defined as a POSIX file descriptor handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetFdInfoKHR-handleType-00672)
VUID-VkMemoryGetFdInfoKHR-handleType-parameter
handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetFdInfoKHR-handleType-parameter)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetFdInfoKHR-memory-parameter)
VUID-VkMemoryGetFdInfoKHR-memory-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetFdInfoKHR-pNext-pNext)
VUID-VkMemoryGetFdInfoKHR-pNext-pNext
VUID-VkMemoryGetFdInfoKHR-sType-sType
sType must be VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetFdInfoKHR-sType-sType)
handleType must have been included in VkExportMemoryAllocateInfo::handleTypes when memory was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00662)
VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00662
VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00663
If handleType is defined as an NT handle, vkGetMemoryWin32HandleKHR must be called no more than once for each valid unique combination of memory and handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00663)
handleType must be defined as an NT handle or a global share handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00664)
VUID-VkMemoryGetWin32HandleInfoKHR-handleType-00664
VUID-VkMemoryGetWin32HandleInfoKHR-handleType-parameter
handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetWin32HandleInfoKHR-handleType-parameter)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetWin32HandleInfoKHR-memory-parameter)
VUID-VkMemoryGetWin32HandleInfoKHR-memory-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetWin32HandleInfoKHR-pNext-pNext)
VUID-VkMemoryGetWin32HandleInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryGetWin32HandleInfoKHR-sType-sType)
VUID-VkMemoryGetWin32HandleInfoKHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryHostPointerPropertiesEXT-pNext-pNext)
VUID-VkMemoryHostPointerPropertiesEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryHostPointerPropertiesEXT-sType-sType)
VUID-VkMemoryHostPointerPropertiesEXT-sType-sType
pNext must be NULL or a pointer to a valid instance of VkMemoryDedicatedRequirements (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryRequirements2-pNext-pNext)
VUID-VkMemoryRequirements2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMemoryRequirements2-sType-sType)
VUID-VkMemoryRequirements2-sType-sType
connection must point to a valid MirConnection. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMirSurfaceCreateInfoKHR-connection-01263)
VUID-VkMirSurfaceCreateInfoKHR-connection-01263
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMirSurfaceCreateInfoKHR-flags-zerobitmask)
VUID-VkMirSurfaceCreateInfoKHR-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMirSurfaceCreateInfoKHR-pNext-pNext)
VUID-VkMirSurfaceCreateInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMirSurfaceCreateInfoKHR-sType-sType)
VUID-VkMirSurfaceCreateInfoKHR-sType-sType
VUID-VkMirSurfaceCreateInfoKHR-surface-01264
surface must point to a valid MirSurface. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMirSurfaceCreateInfoKHR-surface-01264)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMultisamplePropertiesEXT-pNext-pNext)
VUID-VkMultisamplePropertiesEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkMultisamplePropertiesEXT-sType-sType)
VUID-VkMultisamplePropertiesEXT-sType-sType
VUID-VkObjectTableCreateInfoNVX-computeBindingPointSupport-01355
If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, pObjectEntryUsageFlags must not contain VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-computeBindingPointSupport-01355)
maxSampledImagesPerDescriptor must be within the limits supported by the device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-maxSampledImagesPerDescriptor-01360)
VUID-VkObjectTableCreateInfoNVX-maxSampledImagesPerDescriptor-01360
maxStorageBuffersPerDescriptor must be within the limits supported by the device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-maxStorageBuffersPerDescriptor-01358)
VUID-VkObjectTableCreateInfoNVX-maxStorageBuffersPerDescriptor-01358
maxStorageImagesPerDescriptor must be within the limits supported by the device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-maxStorageImagesPerDescriptor-01359)
VUID-VkObjectTableCreateInfoNVX-maxStorageImagesPerDescriptor-01359
maxUniformBuffersPerDescriptor must be within the limits supported by the device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-maxUniformBuffersPerDescriptor-01357)
VUID-VkObjectTableCreateInfoNVX-maxUniformBuffersPerDescriptor-01357
VUID-VkObjectTableCreateInfoNVX-objectCount-arraylength
objectCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-objectCount-arraylength)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-pNext-pNext)
VUID-VkObjectTableCreateInfoNVX-pNext-pNext
Any value within pObjectEntryCounts must not exceed VkDeviceGeneratedCommandsLimitsNVX::maxObjectEntryCounts (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-pObjectEntryCounts-01356)
VUID-VkObjectTableCreateInfoNVX-pObjectEntryCounts-01356
VUID-VkObjectTableCreateInfoNVX-pObjectEntryCounts-parameter
pObjectEntryCounts must be a valid pointer to an array of objectCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-pObjectEntryCounts-parameter)
pObjectEntryTypes must be a valid pointer to an array of objectCount valid VkObjectEntryTypeNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-pObjectEntryTypes-parameter)
VUID-VkObjectTableCreateInfoNVX-pObjectEntryTypes-parameter
VUID-VkObjectTableCreateInfoNVX-pObjectEntryUsageFlags-parameter
pObjectEntryUsageFlags must be a valid pointer to an array of objectCount valid combinations of VkObjectEntryUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-pObjectEntryUsageFlags-parameter)
VUID-VkObjectTableCreateInfoNVX-pObjectEntryUsageFlags-requiredbitmask
Each element of pObjectEntryUsageFlags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-pObjectEntryUsageFlags-requiredbitmask)
sType must be VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableCreateInfoNVX-sType-sType)
VUID-VkObjectTableCreateInfoNVX-sType-sType
Both of descriptorSet, and pipelineLayout must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableDescriptorSetEntryNVX-commonparent)
VUID-VkObjectTableDescriptorSetEntryNVX-commonparent
descriptorSet must be a valid VkDescriptorSet handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableDescriptorSetEntryNVX-descriptorSet-parameter)
VUID-VkObjectTableDescriptorSetEntryNVX-descriptorSet-parameter
flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableDescriptorSetEntryNVX-flags-parameter)
VUID-VkObjectTableDescriptorSetEntryNVX-flags-parameter
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableDescriptorSetEntryNVX-flags-requiredbitmask)
VUID-VkObjectTableDescriptorSetEntryNVX-flags-requiredbitmask
VUID-VkObjectTableDescriptorSetEntryNVX-pipelineLayout-parameter
pipelineLayout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableDescriptorSetEntryNVX-pipelineLayout-parameter)
type must be VK_OBJECT_ENTRY_TYPE_DESCRIPTOR_SET_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableDescriptorSetEntryNVX-type-01369)
VUID-VkObjectTableDescriptorSetEntryNVX-type-01369
type must be a valid VkObjectEntryTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableDescriptorSetEntryNVX-type-parameter)
VUID-VkObjectTableDescriptorSetEntryNVX-type-parameter
VUID-VkObjectTableEntryNVX-computeBindingPointSupport-01367
If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, flags must not contain VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableEntryNVX-computeBindingPointSupport-01367)
VUID-VkObjectTableEntryNVX-flags-parameter
flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableEntryNVX-flags-parameter)
VUID-VkObjectTableEntryNVX-flags-requiredbitmask
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableEntryNVX-flags-requiredbitmask)
type must be a valid VkObjectEntryTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableEntryNVX-type-parameter)
VUID-VkObjectTableEntryNVX-type-parameter
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableIndexBufferEntryNVX-buffer-parameter)
VUID-VkObjectTableIndexBufferEntryNVX-buffer-parameter
VUID-VkObjectTableIndexBufferEntryNVX-flags-parameter
flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableIndexBufferEntryNVX-flags-parameter)
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableIndexBufferEntryNVX-flags-requiredbitmask)
VUID-VkObjectTableIndexBufferEntryNVX-flags-requiredbitmask
VUID-VkObjectTableIndexBufferEntryNVX-indexType-parameter
indexType must be a valid VkIndexType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableIndexBufferEntryNVX-indexType-parameter)
VUID-VkObjectTableIndexBufferEntryNVX-type-01371
type must be VK_OBJECT_ENTRY_TYPE_INDEX_BUFFER_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableIndexBufferEntryNVX-type-01371)
VUID-VkObjectTableIndexBufferEntryNVX-type-parameter
type must be a valid VkObjectEntryTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableIndexBufferEntryNVX-type-parameter)
VUID-VkObjectTablePipelineEntryNVX-flags-parameter
flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePipelineEntryNVX-flags-parameter)
VUID-VkObjectTablePipelineEntryNVX-flags-requiredbitmask
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePipelineEntryNVX-flags-requiredbitmask)
VUID-VkObjectTablePipelineEntryNVX-pipeline-parameter
pipeline must be a valid VkPipeline handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePipelineEntryNVX-pipeline-parameter)
type must be VK_OBJECT_ENTRY_TYPE_PIPELINE_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePipelineEntryNVX-type-01368)
VUID-VkObjectTablePipelineEntryNVX-type-01368
type must be a valid VkObjectEntryTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePipelineEntryNVX-type-parameter)
VUID-VkObjectTablePipelineEntryNVX-type-parameter
flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePushConstantEntryNVX-flags-parameter)
VUID-VkObjectTablePushConstantEntryNVX-flags-parameter
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePushConstantEntryNVX-flags-requiredbitmask)
VUID-VkObjectTablePushConstantEntryNVX-flags-requiredbitmask
pipelineLayout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePushConstantEntryNVX-pipelineLayout-parameter)
VUID-VkObjectTablePushConstantEntryNVX-pipelineLayout-parameter
VUID-VkObjectTablePushConstantEntryNVX-stageFlags-parameter
stageFlags must be a valid combination of VkShaderStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePushConstantEntryNVX-stageFlags-parameter)
VUID-VkObjectTablePushConstantEntryNVX-stageFlags-requiredbitmask
stageFlags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePushConstantEntryNVX-stageFlags-requiredbitmask)
type must be VK_OBJECT_ENTRY_TYPE_PUSH_CONSTANT_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePushConstantEntryNVX-type-01372)
VUID-VkObjectTablePushConstantEntryNVX-type-01372
type must be a valid VkObjectEntryTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTablePushConstantEntryNVX-type-parameter)
VUID-VkObjectTablePushConstantEntryNVX-type-parameter
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableVertexBufferEntryNVX-buffer-parameter)
VUID-VkObjectTableVertexBufferEntryNVX-buffer-parameter
flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableVertexBufferEntryNVX-flags-parameter)
VUID-VkObjectTableVertexBufferEntryNVX-flags-parameter
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableVertexBufferEntryNVX-flags-requiredbitmask)
VUID-VkObjectTableVertexBufferEntryNVX-flags-requiredbitmask
type must be VK_OBJECT_ENTRY_TYPE_VERTEX_BUFFER_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableVertexBufferEntryNVX-type-01370)
VUID-VkObjectTableVertexBufferEntryNVX-type-01370
type must be a valid VkObjectEntryTypeNVX value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkObjectTableVertexBufferEntryNVX-type-parameter)
VUID-VkObjectTableVertexBufferEntryNVX-type-parameter
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDevice16BitStorageFeatures-sType-sType)
VUID-VkPhysicalDevice16BitStorageFeatures-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDevice8BitStorageFeaturesKHR-sType-sType)
VUID-VkPhysicalDevice8BitStorageFeaturesKHR-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT-sType-sType)
VUID-VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT-sType-sType)
VUID-VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceConditionalRenderingFeaturesEXT-sType-sType)
VUID-VkPhysicalDeviceConditionalRenderingFeaturesEXT-sType-sType
VUID-VkPhysicalDeviceConservativeRasterizationPropertiesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceConservativeRasterizationPropertiesEXT-sType-sType)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceDescriptorIndexingFeaturesEXT-sType-sType)
VUID-VkPhysicalDeviceDescriptorIndexingFeaturesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceDescriptorIndexingPropertiesEXT-sType-sType)
VUID-VkPhysicalDeviceDescriptorIndexingPropertiesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceDiscardRectanglePropertiesEXT-sType-sType)
VUID-VkPhysicalDeviceDiscardRectanglePropertiesEXT-sType-sType
flags must be a valid combination of VkBufferCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalBufferInfo-flags-parameter)
VUID-VkPhysicalDeviceExternalBufferInfo-flags-parameter
VUID-VkPhysicalDeviceExternalBufferInfo-handleType-parameter
handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalBufferInfo-handleType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalBufferInfo-pNext-pNext)
VUID-VkPhysicalDeviceExternalBufferInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalBufferInfo-sType-sType)
VUID-VkPhysicalDeviceExternalBufferInfo-sType-sType
VUID-VkPhysicalDeviceExternalBufferInfo-usage-parameter
usage must be a valid combination of VkBufferUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalBufferInfo-usage-parameter)
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalBufferInfo-usage-requiredbitmask)
VUID-VkPhysicalDeviceExternalBufferInfo-usage-requiredbitmask
VUID-VkPhysicalDeviceExternalFenceInfo-handleType-parameter
handleType must be a valid VkExternalFenceHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalFenceInfo-handleType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalFenceInfo-pNext-pNext)
VUID-VkPhysicalDeviceExternalFenceInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalFenceInfo-sType-sType)
VUID-VkPhysicalDeviceExternalFenceInfo-sType-sType
VUID-VkPhysicalDeviceExternalImageFormatInfo-handleType-parameter
If handleType is not 0, handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalImageFormatInfo-handleType-parameter)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalImageFormatInfo-sType-sType)
VUID-VkPhysicalDeviceExternalImageFormatInfo-sType-sType
VUID-VkPhysicalDeviceExternalMemoryHostPropertiesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalMemoryHostPropertiesEXT-sType-sType)
VUID-VkPhysicalDeviceExternalSemaphoreInfo-handleType-parameter
handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalSemaphoreInfo-handleType-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalSemaphoreInfo-pNext-pNext)
VUID-VkPhysicalDeviceExternalSemaphoreInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceExternalSemaphoreInfo-sType-sType)
VUID-VkPhysicalDeviceExternalSemaphoreInfo-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceFeatures2-sType-sType)
VUID-VkPhysicalDeviceFeatures2-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceIDProperties-sType-sType)
VUID-VkPhysicalDeviceIDProperties-sType-sType
VUID-VkPhysicalDeviceImageFormatInfo2-flags-parameter
flags must be a valid combination of VkImageCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-flags-parameter)
VUID-VkPhysicalDeviceImageFormatInfo2-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-format-parameter)
VUID-VkPhysicalDeviceImageFormatInfo2-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkPhysicalDeviceExternalImageFormatInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-sType-sType)
VUID-VkPhysicalDeviceImageFormatInfo2-sType-sType
tiling must be a valid VkImageTiling value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-tiling-parameter)
VUID-VkPhysicalDeviceImageFormatInfo2-tiling-parameter
type must be a valid VkImageType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-type-parameter)
VUID-VkPhysicalDeviceImageFormatInfo2-type-parameter
VUID-VkPhysicalDeviceImageFormatInfo2-usage-parameter
usage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-usage-parameter)
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceImageFormatInfo2-usage-requiredbitmask)
VUID-VkPhysicalDeviceImageFormatInfo2-usage-requiredbitmask
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMaintenance3Properties-sType-sType)
VUID-VkPhysicalDeviceMaintenance3Properties-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMemoryProperties2-pNext-pNext)
VUID-VkPhysicalDeviceMemoryProperties2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMemoryProperties2-sType-sType)
VUID-VkPhysicalDeviceMemoryProperties2-sType-sType
VUID-VkPhysicalDeviceMultiviewFeatures-multiviewGeometryShader-00580
If multiviewGeometryShader is enabled then multiview must also be enabled. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMultiviewFeatures-multiviewGeometryShader-00580)
VUID-VkPhysicalDeviceMultiviewFeatures-multiviewTessellationShader-00581
If multiviewTessellationShader is enabled then multiview must also be enabled. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMultiviewFeatures-multiviewTessellationShader-00581)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMultiviewFeatures-sType-sType)
VUID-VkPhysicalDeviceMultiviewFeatures-sType-sType
VUID-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX-sType-sType)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceMultiviewProperties-sType-sType)
VUID-VkPhysicalDeviceMultiviewProperties-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDevicePointClippingProperties-sType-sType)
VUID-VkPhysicalDevicePointClippingProperties-sType-sType
VUID-VkPhysicalDeviceProperties2-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT, VkPhysicalDeviceConservativeRasterizationPropertiesEXT, VkPhysicalDeviceDescriptorIndexingPropertiesEXT, VkPhysicalDeviceDiscardRectanglePropertiesEXT, VkPhysicalDeviceExternalMemoryHostPropertiesEXT, VkPhysicalDeviceIDProperties, VkPhysicalDeviceMaintenance3Properties, VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX, VkPhysicalDeviceMultiviewProperties, VkPhysicalDevicePointClippingProperties, VkPhysicalDeviceProtectedMemoryProperties, VkPhysicalDevicePushDescriptorPropertiesKHR, VkPhysicalDeviceSampleLocationsPropertiesEXT, VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT, VkPhysicalDeviceShaderCorePropertiesAMD, VkPhysicalDeviceSubgroupProperties, or VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceProperties2-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceProperties2-sType-sType)
VUID-VkPhysicalDeviceProperties2-sType-sType
VUID-VkPhysicalDeviceProperties2-sType-unique
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceProperties2-sType-unique)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceProtectedMemoryFeatures-sType-sType)
VUID-VkPhysicalDeviceProtectedMemoryFeatures-sType-sType
VUID-VkPhysicalDeviceProtectedMemoryProperties-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceProtectedMemoryProperties-sType-sType)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDevicePushDescriptorPropertiesKHR-sType-sType)
VUID-VkPhysicalDevicePushDescriptorPropertiesKHR-sType-sType
VUID-VkPhysicalDeviceSampleLocationsPropertiesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSampleLocationsPropertiesEXT-sType-sType)
VUID-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT-sType-sType)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSamplerYcbcrConversionFeatures-sType-sType)
VUID-VkPhysicalDeviceSamplerYcbcrConversionFeatures-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceShaderCorePropertiesAMD-sType-sType)
VUID-VkPhysicalDeviceShaderCorePropertiesAMD-sType-sType
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceShaderDrawParameterFeatures-sType-sType)
VUID-VkPhysicalDeviceShaderDrawParameterFeatures-sType-sType
VUID-VkPhysicalDeviceSparseImageFormatInfo2-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-format-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-pNext-pNext)
VUID-VkPhysicalDeviceSparseImageFormatInfo2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-sType-sType)
VUID-VkPhysicalDeviceSparseImageFormatInfo2-sType-sType
VUID-VkPhysicalDeviceSparseImageFormatInfo2-samples-01095
samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, and usage equal to those in this command and flags equal to the value that is set in VkImageCreateInfo::flags when the image is created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-samples-01095)
VUID-VkPhysicalDeviceSparseImageFormatInfo2-samples-parameter
samples must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-samples-parameter)
VUID-VkPhysicalDeviceSparseImageFormatInfo2-tiling-parameter
tiling must be a valid VkImageTiling value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-tiling-parameter)
type must be a valid VkImageType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-type-parameter)
VUID-VkPhysicalDeviceSparseImageFormatInfo2-type-parameter
usage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-usage-parameter)
VUID-VkPhysicalDeviceSparseImageFormatInfo2-usage-parameter
VUID-VkPhysicalDeviceSparseImageFormatInfo2-usage-requiredbitmask
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSparseImageFormatInfo2-usage-requiredbitmask)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSubgroupProperties-sType-sType)
VUID-VkPhysicalDeviceSubgroupProperties-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSurfaceInfo2KHR-pNext-pNext)
VUID-VkPhysicalDeviceSurfaceInfo2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSurfaceInfo2KHR-sType-sType)
VUID-VkPhysicalDeviceSurfaceInfo2KHR-sType-sType
VUID-VkPhysicalDeviceSurfaceInfo2KHR-surface-parameter
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceSurfaceInfo2KHR-surface-parameter)
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceVariablePointerFeatures-sType-sType)
VUID-VkPhysicalDeviceVariablePointerFeatures-sType-sType
If variablePointers is enabled then variablePointersStorageBuffer must also be enabled. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceVariablePointerFeatures-variablePointers-01431)
VUID-VkPhysicalDeviceVariablePointerFeatures-variablePointers-01431
sType must be VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT-sType-sType)
VUID-VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCacheCreateInfo-flags-zerobitmask)
VUID-VkPipelineCacheCreateInfo-flags-zerobitmask
VUID-VkPipelineCacheCreateInfo-initialDataSize-00768
If initialDataSize is not 0, it must be equal to the size of pInitialData, as returned by vkGetPipelineCacheData when pInitialData was originally retrieved (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCacheCreateInfo-initialDataSize-00768)
If initialDataSize is not 0, pInitialData must have been retrieved from a previous call to vkGetPipelineCacheData (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCacheCreateInfo-initialDataSize-00769)
VUID-VkPipelineCacheCreateInfo-initialDataSize-00769
If initialDataSize is not 0, pInitialData must be a valid pointer to an array of initialDataSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCacheCreateInfo-pInitialData-parameter)
VUID-VkPipelineCacheCreateInfo-pInitialData-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCacheCreateInfo-pNext-pNext)
VUID-VkPipelineCacheCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCacheCreateInfo-sType-sType)
VUID-VkPipelineCacheCreateInfo-sType-sType
VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-blendOverlap-01426
If the correlated overlap property is not supported, blendOverlap must be VK_BLEND_OVERLAP_UNCORRELATED_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-blendOverlap-01426)
VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-blendOverlap-parameter
blendOverlap must be a valid VkBlendOverlapEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-blendOverlap-parameter)
VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-dstPremultiplied-01425
If the non-premultiplied destination color property is not supported, dstPremultiplied must be VK_TRUE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-dstPremultiplied-01425)
sType must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-sType-sType)
VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-sType-sType
VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-srcPremultiplied-01424
If the non-premultiplied source color property is not supported, srcPremultiplied must be VK_TRUE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAdvancedStateCreateInfoEXT-srcPremultiplied-01424)
VUID-VkPipelineColorBlendAttachmentState-advancedBlendAllOperations-01409
If VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendAllOperations is VK_FALSE, then colorBlendOp must not be VK_BLEND_OP_ZERO_EXT, VK_BLEND_OP_SRC_EXT, VK_BLEND_OP_DST_EXT, VK_BLEND_OP_SRC_OVER_EXT, VK_BLEND_OP_DST_OVER_EXT, VK_BLEND_OP_SRC_IN_EXT, VK_BLEND_OP_DST_IN_EXT, VK_BLEND_OP_SRC_OUT_EXT, VK_BLEND_OP_DST_OUT_EXT, VK_BLEND_OP_SRC_ATOP_EXT, VK_BLEND_OP_DST_ATOP_EXT, VK_BLEND_OP_XOR_EXT, VK_BLEND_OP_INVERT_EXT, VK_BLEND_OP_INVERT_RGB_EXT, VK_BLEND_OP_LINEARDODGE_EXT, VK_BLEND_OP_LINEARBURN_EXT, VK_BLEND_OP_VIVIDLIGHT_EXT, VK_BLEND_OP_LINEARLIGHT_EXT, VK_BLEND_OP_PINLIGHT_EXT, VK_BLEND_OP_HARDMIX_EXT, VK_BLEND_OP_PLUS_EXT, VK_BLEND_OP_PLUS_CLAMPED_EXT, VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT, VK_BLEND_OP_PLUS_DARKER_EXT, VK_BLEND_OP_MINUS_EXT, VK_BLEND_OP_MINUS_CLAMPED_EXT, VK_BLEND_OP_CONTRAST_EXT, VK_BLEND_OP_INVERT_OVG_EXT, VK_BLEND_OP_RED_EXT, VK_BLEND_OP_GREEN_EXT, or VK_BLEND_OP_BLUE_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-advancedBlendAllOperations-01409)
If VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend is VK_FALSE and colorBlendOp is an advanced blend operation, then colorBlendOp must be the same for all attachments. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-advancedBlendIndependentBlend-01407)
VUID-VkPipelineColorBlendAttachmentState-advancedBlendIndependentBlend-01407
If VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend is VK_FALSE and alphaBlendOp is an advanced blend operation, then alphaBlendOp must be the same for all attachments. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-advancedBlendIndependentBlend-01408)
VUID-VkPipelineColorBlendAttachmentState-advancedBlendIndependentBlend-01408
alphaBlendOp must be a valid VkBlendOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-alphaBlendOp-parameter)
VUID-VkPipelineColorBlendAttachmentState-alphaBlendOp-parameter
If either of colorBlendOp or alphaBlendOp is an advanced blend operation, then colorBlendOp must equal alphaBlendOp (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01406)
VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01406
VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01410
If colorBlendOp or alphaBlendOp is an advanced blend operation, then VkSubpassDescription::colorAttachmentCount of the subpass this pipeline is compiled against must be less than or equal to VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendMaxColorAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01410)
colorBlendOp must be a valid VkBlendOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-parameter)
VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-parameter
VUID-VkPipelineColorBlendAttachmentState-colorWriteMask-parameter
colorWriteMask must be a valid combination of VkColorComponentFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-colorWriteMask-parameter)
If the dual source blending feature is not enabled, dstAlphaBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-dstAlphaBlendFactor-00611)
VUID-VkPipelineColorBlendAttachmentState-dstAlphaBlendFactor-00611
dstAlphaBlendFactor must be a valid VkBlendFactor value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-dstAlphaBlendFactor-parameter)
VUID-VkPipelineColorBlendAttachmentState-dstAlphaBlendFactor-parameter
If the dual source blending feature is not enabled, dstColorBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-dstColorBlendFactor-00609)
VUID-VkPipelineColorBlendAttachmentState-dstColorBlendFactor-00609
dstColorBlendFactor must be a valid VkBlendFactor value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-dstColorBlendFactor-parameter)
VUID-VkPipelineColorBlendAttachmentState-dstColorBlendFactor-parameter
If the dual source blending feature is not enabled, srcAlphaBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-00610)
VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-00610
srcAlphaBlendFactor must be a valid VkBlendFactor value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-parameter)
VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-parameter
If the dual source blending feature is not enabled, srcColorBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-srcColorBlendFactor-00608)
VUID-VkPipelineColorBlendAttachmentState-srcColorBlendFactor-00608
srcColorBlendFactor must be a valid VkBlendFactor value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendAttachmentState-srcColorBlendFactor-parameter)
VUID-VkPipelineColorBlendAttachmentState-srcColorBlendFactor-parameter
VUID-VkPipelineColorBlendStateCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendStateCreateInfo-flags-zerobitmask)
If the logic operations feature is not enabled, logicOpEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendStateCreateInfo-logicOpEnable-00606)
VUID-VkPipelineColorBlendStateCreateInfo-logicOpEnable-00606
If logicOpEnable is VK_TRUE, logicOp must be a valid VkLogicOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendStateCreateInfo-logicOpEnable-00607)
VUID-VkPipelineColorBlendStateCreateInfo-logicOpEnable-00607
VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-00605
If the independent blending feature is not enabled, all elements of pAttachments must be identical (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-00605)
VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter
If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkPipelineColorBlendAttachmentState structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter)
pNext must be NULL or a pointer to a valid instance of VkPipelineColorBlendAdvancedStateCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendStateCreateInfo-pNext-pNext)
VUID-VkPipelineColorBlendStateCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineColorBlendStateCreateInfo-sType-sType)
VUID-VkPipelineColorBlendStateCreateInfo-sType-sType
VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationMode-parameter
coverageModulationMode must be a valid VkCoverageModulationModeNV value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationMode-parameter)
VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationTableCount-arraylength
coverageModulationTableCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationTableCount-arraylength)
VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationTableEnable-01405
If coverageModulationTableEnable is VK_TRUE, coverageModulationTableCount must be equal to the number of rasterization samples divided by the number of color samples in the subpass. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageModulationStateCreateInfoNV-coverageModulationTableEnable-01405)
VUID-VkPipelineCoverageModulationStateCreateInfoNV-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageModulationStateCreateInfoNV-flags-zerobitmask)
sType must be VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageModulationStateCreateInfoNV-sType-sType)
VUID-VkPipelineCoverageModulationStateCreateInfoNV-sType-sType
VUID-VkPipelineCoverageToColorStateCreateInfoNV-coverageToColorEnable-01404
If coverageToColorEnable is VK_TRUE, then the render pass subpass indicated by VkGraphicsPipelineCreateInfo::renderPass and VkGraphicsPipelineCreateInfo::subpass must have a color attachment at the location selected by coverageToColorLocation, with a VkFormat of VK_FORMAT_R8_UINT, VK_FORMAT_R8_SINT, VK_FORMAT_R16_UINT, VK_FORMAT_R16_SINT, VK_FORMAT_R32_UINT, or VK_FORMAT_R32_SINT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageToColorStateCreateInfoNV-coverageToColorEnable-01404)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageToColorStateCreateInfoNV-flags-zerobitmask)
VUID-VkPipelineCoverageToColorStateCreateInfoNV-flags-zerobitmask
VUID-VkPipelineCoverageToColorStateCreateInfoNV-sType-sType
sType must be VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineCoverageToColorStateCreateInfoNV-sType-sType)
back must be a valid VkStencilOpState structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter)
VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter
If the depth bounds testing feature is not enabled, depthBoundsTestEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDepthStencilStateCreateInfo-depthBoundsTestEnable-00598)
VUID-VkPipelineDepthStencilStateCreateInfo-depthBoundsTestEnable-00598
VUID-VkPipelineDepthStencilStateCreateInfo-depthCompareOp-parameter
depthCompareOp must be a valid VkCompareOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDepthStencilStateCreateInfo-depthCompareOp-parameter)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDepthStencilStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineDepthStencilStateCreateInfo-flags-zerobitmask
VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter
front must be a valid VkStencilOpState structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDepthStencilStateCreateInfo-pNext-pNext)
VUID-VkPipelineDepthStencilStateCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDepthStencilStateCreateInfo-sType-sType)
VUID-VkPipelineDepthStencilStateCreateInfo-sType-sType
VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleCount-00582
discardRectangleCount must be between 0 and VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleCount-00582)
VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleMode-parameter
discardRectangleMode must be a valid VkDiscardRectangleModeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleMode-parameter)
VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-flags-zerobitmask)
VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-sType-sType)
VUID-VkPipelineDynamicStateCreateInfo-dynamicStateCount-arraylength
dynamicStateCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDynamicStateCreateInfo-dynamicStateCount-arraylength)
VUID-VkPipelineDynamicStateCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDynamicStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineDynamicStateCreateInfo-pDynamicStates-01442
Each element of pDynamicStates must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDynamicStateCreateInfo-pDynamicStates-01442)
VUID-VkPipelineDynamicStateCreateInfo-pDynamicStates-parameter
pDynamicStates must be a valid pointer to an array of dynamicStateCount valid VkDynamicState values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDynamicStateCreateInfo-pDynamicStates-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDynamicStateCreateInfo-pNext-pNext)
VUID-VkPipelineDynamicStateCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineDynamicStateCreateInfo-sType-sType)
VUID-VkPipelineDynamicStateCreateInfo-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineInputAssemblyStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineInputAssemblyStateCreateInfo-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineInputAssemblyStateCreateInfo-pNext-pNext)
VUID-VkPipelineInputAssemblyStateCreateInfo-pNext-pNext
sType must be VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineInputAssemblyStateCreateInfo-sType-sType)
VUID-VkPipelineInputAssemblyStateCreateInfo-sType-sType
VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00428
If topology is VK_PRIMITIVE_TOPOLOGY_POINT_LIST, VK_PRIMITIVE_TOPOLOGY_LINE_LIST, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, primitiveRestartEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00428)
VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00429
If the geometry shaders feature is not enabled, topology must not be any of VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00429)
VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00430
If the tessellation shaders feature is not enabled, topology must not be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00430)
VUID-VkPipelineInputAssemblyStateCreateInfo-topology-parameter
topology must be a valid VkPrimitiveTopology value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineInputAssemblyStateCreateInfo-topology-parameter)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03016
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03016)
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03017)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03017
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03018)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03018
VUID-VkPipelineLayoutCreateInfo-descriptorType-03019
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03019)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03020
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03020)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03021
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03021)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03022
The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSamplers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03022)
The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindUniformBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03023)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03023
The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03024)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03024
VUID-VkPipelineLayoutCreateInfo-descriptorType-03025
The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindSampledImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03025)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03026
The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindStorageImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03026)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03027
The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxPerStageDescriptorUpdateAfterBindInputAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03027)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03028
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSamplers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03028)
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03029)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03029
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03030)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03030
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03031)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03031
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03032)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03032
VUID-VkPipelineLayoutCreateInfo-descriptorType-03033
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSampledImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03033)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03034
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03034)
VUID-VkPipelineLayoutCreateInfo-descriptorType-03035
The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-descriptorType-03035)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-flags-zerobitmask)
VUID-VkPipelineLayoutCreateInfo-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pNext-pNext)
VUID-VkPipelineLayoutCreateInfo-pNext-pNext
Any two elements of pPushConstantRanges must not include the same stage in stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pPushConstantRanges-00292)
VUID-VkPipelineLayoutCreateInfo-pPushConstantRanges-00292
VUID-VkPipelineLayoutCreateInfo-pPushConstantRanges-parameter
If pushConstantRangeCount is not 0, pPushConstantRanges must be a valid pointer to an array of pushConstantRangeCount valid VkPushConstantRange structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pPushConstantRanges-parameter)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00287
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00287)
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00288)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00288
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00289)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00289
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00290
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00290)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00291
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00291)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00293
pSetLayouts must not contain more than one descriptor set layout that was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-00293)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01676
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01676)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01677
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSamplers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01677)
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01678)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01678
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01679)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01679
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01680)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01680
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01681)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01681
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01682
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSampledImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01682)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01683
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetStorageImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01683)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01684
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-01684)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03036
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSamplers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03036)
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03037)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03037
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03038)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03038
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03039)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03039
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03040)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03040
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03041
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindSampledImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03041)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03042
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindStorageImages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03042)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03043
The total number of descriptors of the type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingPropertiesEXT::maxDescriptorSetUpdateAfterBindInputAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03043)
VUID-VkPipelineLayoutCreateInfo-pSetLayouts-parameter
If setLayoutCount is not 0, pSetLayouts must be a valid pointer to an array of setLayoutCount valid VkDescriptorSetLayout handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-pSetLayouts-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-sType-sType)
VUID-VkPipelineLayoutCreateInfo-sType-sType
setLayoutCount must be less than or equal to VkPhysicalDeviceLimits::maxBoundDescriptorSets (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineLayoutCreateInfo-setLayoutCount-00286)
VUID-VkPipelineLayoutCreateInfo-setLayoutCount-00286
VUID-VkPipelineMultisampleStateCreateInfo-alphaToOneEnable-00785
If the alpha to one feature is not enabled, alphaToOneEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-alphaToOneEnable-00785)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineMultisampleStateCreateInfo-flags-zerobitmask
minSampleShading must be in the range [0,1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-minSampleShading-00786)
VUID-VkPipelineMultisampleStateCreateInfo-minSampleShading-00786
VUID-VkPipelineMultisampleStateCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPipelineCoverageModulationStateCreateInfoNV, VkPipelineCoverageToColorStateCreateInfoNV, or VkPipelineSampleLocationsStateCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-pNext-pNext)
VUID-VkPipelineMultisampleStateCreateInfo-pSampleMask-parameter
If pSampleMask is not NULL, pSampleMask must be a valid pointer to an array of (rasterizationSamples/32) VkSampleMask values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-pSampleMask-parameter)
VUID-VkPipelineMultisampleStateCreateInfo-rasterizationSamples-01415
If the subpass has any color attachments and rasterizationSamples is greater than the number of color samples, then sampleShadingEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-rasterizationSamples-01415)
VUID-VkPipelineMultisampleStateCreateInfo-rasterizationSamples-parameter
rasterizationSamples must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-rasterizationSamples-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-sType-sType)
VUID-VkPipelineMultisampleStateCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-sType-unique)
VUID-VkPipelineMultisampleStateCreateInfo-sType-unique
If the sample rate shading feature is not enabled, sampleShadingEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineMultisampleStateCreateInfo-sampleShadingEnable-00784)
VUID-VkPipelineMultisampleStateCreateInfo-sampleShadingEnable-00784
VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-conservativeRasterizationMode-parameter
conservativeRasterizationMode must be a valid VkConservativeRasterizationModeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-conservativeRasterizationMode-parameter)
VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-extraPrimitiveOverestimationSize-01769
extraPrimitiveOverestimationSize must be in the range of 0.0 to VkPhysicalDeviceConservativeRasterizationPropertiesEXT::maxExtraPrimitiveOverestimationSize inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-extraPrimitiveOverestimationSize-01769)
VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-flags-zerobitmask)
sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-sType-sType)
VUID-VkPipelineRasterizationConservativeStateCreateInfoEXT-sType-sType
VUID-VkPipelineRasterizationStateCreateInfo-cullMode-parameter
cullMode must be a valid combination of VkCullModeFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-cullMode-parameter)
VUID-VkPipelineRasterizationStateCreateInfo-depthClampEnable-00782
If the depth clamping feature is not enabled, depthClampEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-depthClampEnable-00782)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineRasterizationStateCreateInfo-flags-zerobitmask
frontFace must be a valid VkFrontFace value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-frontFace-parameter)
VUID-VkPipelineRasterizationStateCreateInfo-frontFace-parameter
VUID-VkPipelineRasterizationStateCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPipelineRasterizationConservativeStateCreateInfoEXT or VkPipelineRasterizationStateRasterizationOrderAMD (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-pNext-pNext)
VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01413
If the non-solid fill modes feature is not enabled, polygonMode must be VK_POLYGON_MODE_FILL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01413)
VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01414
If the VK_NV_fill_rectangle extension is not enabled, polygonMode must not be VK_POLYGON_MODE_FILL_RECTANGLE_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01414)
VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01507
If the non-solid fill modes feature is not enabled, polygonMode must be VK_POLYGON_MODE_FILL or VK_POLYGON_MODE_FILL_RECTANGLE_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01507)
VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-parameter
polygonMode must be a valid VkPolygonMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-sType-sType)
VUID-VkPipelineRasterizationStateCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateCreateInfo-sType-unique)
VUID-VkPipelineRasterizationStateCreateInfo-sType-unique
VUID-VkPipelineRasterizationStateRasterizationOrderAMD-rasterizationOrder-parameter
rasterizationOrder must be a valid VkRasterizationOrderAMD value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateRasterizationOrderAMD-rasterizationOrder-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineRasterizationStateRasterizationOrderAMD-sType-sType)
VUID-VkPipelineRasterizationStateRasterizationOrderAMD-sType-sType
sType must be VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sType-sType)
VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sType-sType
VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter
sampleLocationsInfo must be a valid VkSampleLocationsInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter)
VUID-VkPipelineShaderStageCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-flags-zerobitmask)
If the identified entry point includes any variable in its interface that is declared with the ClipDistance BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxClipDistances (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-maxClipDistances-00708)
VUID-VkPipelineShaderStageCreateInfo-maxClipDistances-00708
VUID-VkPipelineShaderStageCreateInfo-maxCombinedClipAndCullDistances-00710
If the identified entry point includes any variables in its interface that are declared with the ClipDistance or CullDistance BuiltIn decoration, those variables must not have array sizes which sum to more than VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-maxCombinedClipAndCullDistances-00710)
If the identified entry point includes any variable in its interface that is declared with the CullDistance BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxCullDistances (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-maxCullDistances-00709)
VUID-VkPipelineShaderStageCreateInfo-maxCullDistances-00709
VUID-VkPipelineShaderStageCreateInfo-maxSampleMaskWords-00711
If the identified entry point includes any variable in its interface that is declared with the SampleMask BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxSampleMaskWords (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-maxSampleMaskWords-00711)
module must be a valid VkShaderModule handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-module-parameter)
VUID-VkPipelineShaderStageCreateInfo-module-parameter
pName must be the name of an OpEntryPoint in module with an execution model that matches stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-pName-00707)
VUID-VkPipelineShaderStageCreateInfo-pName-00707
pName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-pName-parameter)
VUID-VkPipelineShaderStageCreateInfo-pName-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-pNext-pNext)
VUID-VkPipelineShaderStageCreateInfo-pNext-pNext
VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter
If pSpecializationInfo is not NULL, pSpecializationInfo must be a valid pointer to a valid VkSpecializationInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-sType-sType)
VUID-VkPipelineShaderStageCreateInfo-sType-sType
If the geometry shaders feature is not enabled, stage must not be VK_SHADER_STAGE_GEOMETRY_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00704)
VUID-VkPipelineShaderStageCreateInfo-stage-00704
VUID-VkPipelineShaderStageCreateInfo-stage-00705
If the tessellation shaders feature is not enabled, stage must not be VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00705)
VUID-VkPipelineShaderStageCreateInfo-stage-00706
stage must not be VK_SHADER_STAGE_ALL_GRAPHICS, or VK_SHADER_STAGE_ALL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00706)
VUID-VkPipelineShaderStageCreateInfo-stage-00712
If stage is VK_SHADER_STAGE_VERTEX_BIT, the identified entry point must not include any input variable in its interface that is decorated with CullDistance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00712)
VUID-VkPipelineShaderStageCreateInfo-stage-00713
If stage is VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, and the identified entry point has an OpExecutionMode instruction that specifies a patch size with OutputVertices, the patch size must be greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxTessellationPatchSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00713)
VUID-VkPipelineShaderStageCreateInfo-stage-00714
If stage is VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must have an OpExecutionMode instruction that specifies a maximum output vertex count that is greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxGeometryOutputVertices (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00714)
VUID-VkPipelineShaderStageCreateInfo-stage-00715
If stage is VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must have an OpExecutionMode instruction that specifies an invocation count that is greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxGeometryShaderInvocations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00715)
VUID-VkPipelineShaderStageCreateInfo-stage-00716
If stage is VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to Layer for any primitive, it must write the same value to Layer for all vertices of a given primitive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00716)
If stage is VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to ViewportIndex for any primitive, it must write the same value to ViewportIndex for all vertices of a given primitive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00717)
VUID-VkPipelineShaderStageCreateInfo-stage-00717
VUID-VkPipelineShaderStageCreateInfo-stage-00718
If stage is VK_SHADER_STAGE_FRAGMENT_BIT, the identified entry point must not include any output variables in its interface decorated with CullDistance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00718)
VUID-VkPipelineShaderStageCreateInfo-stage-00719
If stage is VK_SHADER_STAGE_FRAGMENT_BIT, and the identified entry point writes to FragDepth in any execution path, it must write to FragDepth in all execution paths (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-00719)
VUID-VkPipelineShaderStageCreateInfo-stage-01511
If stage is VK_SHADER_STAGE_FRAGMENT_BIT, and the identified entry point writes to FragStencilRefEXT in any execution path, it must write to FragStencilRefEXT in all execution paths (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-01511)
stage must be a valid VkShaderStageFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineShaderStageCreateInfo-stage-parameter)
VUID-VkPipelineShaderStageCreateInfo-stage-parameter
VUID-VkPipelineTessellationDomainOriginStateCreateInfo-domainOrigin-parameter
domainOrigin must be a valid VkTessellationDomainOrigin value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineTessellationDomainOriginStateCreateInfo-domainOrigin-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineTessellationDomainOriginStateCreateInfo-sType-sType)
VUID-VkPipelineTessellationDomainOriginStateCreateInfo-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineTessellationStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineTessellationStateCreateInfo-flags-zerobitmask
pNext must be NULL or a pointer to a valid instance of VkPipelineTessellationDomainOriginStateCreateInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineTessellationStateCreateInfo-pNext-pNext)
VUID-VkPipelineTessellationStateCreateInfo-pNext-pNext
VUID-VkPipelineTessellationStateCreateInfo-patchControlPoints-01214
patchControlPoints must be greater than zero and less than or equal to VkPhysicalDeviceLimits::maxTessellationPatchSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineTessellationStateCreateInfo-patchControlPoints-01214)
sType must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineTessellationStateCreateInfo-sType-sType)
VUID-VkPipelineTessellationStateCreateInfo-sType-sType
VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-pVertexBindingDivisors-parameter
pVertexBindingDivisors must be a valid pointer to an array of vertexBindingDivisorCount VkVertexInputBindingDivisorDescriptionEXT structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-pVertexBindingDivisors-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-sType-sType)
VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-sType-sType
VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-vertexBindingDivisorCount-arraylength
vertexBindingDivisorCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputDivisorStateCreateInfoEXT-vertexBindingDivisorCount-arraylength)
VUID-VkPipelineVertexInputStateCreateInfo-binding-00615
For every binding specified by each element of pVertexAttributeDescriptions, a VkVertexInputBindingDescription must exist in pVertexBindingDescriptions with the same value of binding (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-binding-00615)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineVertexInputStateCreateInfo-flags-zerobitmask
pNext must be NULL or a pointer to a valid instance of VkPipelineVertexInputDivisorStateCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-pNext-pNext)
VUID-VkPipelineVertexInputStateCreateInfo-pNext-pNext
VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-00617
All elements of pVertexAttributeDescriptions must describe distinct attribute locations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-00617)
VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-parameter
If vertexAttributeDescriptionCount is not 0, pVertexAttributeDescriptions must be a valid pointer to an array of vertexAttributeDescriptionCount valid VkVertexInputAttributeDescription structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-parameter)
VUID-VkPipelineVertexInputStateCreateInfo-pVertexBindingDescriptions-00616
All elements of pVertexBindingDescriptions must describe distinct binding numbers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-pVertexBindingDescriptions-00616)
VUID-VkPipelineVertexInputStateCreateInfo-pVertexBindingDescriptions-parameter
If vertexBindingDescriptionCount is not 0, pVertexBindingDescriptions must be a valid pointer to an array of vertexBindingDescriptionCount valid VkVertexInputBindingDescription structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-pVertexBindingDescriptions-parameter)
sType must be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-sType-sType)
VUID-VkPipelineVertexInputStateCreateInfo-sType-sType
VUID-VkPipelineVertexInputStateCreateInfo-vertexAttributeDescriptionCount-00614
vertexAttributeDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputAttributes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-vertexAttributeDescriptionCount-00614)
VUID-VkPipelineVertexInputStateCreateInfo-vertexBindingDescriptionCount-00613
vertexBindingDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineVertexInputStateCreateInfo-vertexBindingDescriptionCount-00613)
VUID-VkPipelineViewportStateCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-flags-zerobitmask)
VUID-VkPipelineViewportStateCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkPipelineViewportSwizzleStateCreateInfoNV or VkPipelineViewportWScalingStateCreateInfoNV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-sType-sType)
VUID-VkPipelineViewportStateCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-sType-unique)
VUID-VkPipelineViewportStateCreateInfo-sType-unique
VUID-VkPipelineViewportStateCreateInfo-scissorCount-01217
If the multiple viewports feature is not enabled, scissorCount must be 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-scissorCount-01217)
VUID-VkPipelineViewportStateCreateInfo-scissorCount-01219
scissorCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-scissorCount-01219)
VUID-VkPipelineViewportStateCreateInfo-scissorCount-01220
scissorCount and viewportCount must be identical (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-scissorCount-01220)
VUID-VkPipelineViewportStateCreateInfo-scissorCount-arraylength
scissorCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-scissorCount-arraylength)
If the multiple viewports feature is not enabled, viewportCount must be 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-viewportCount-01216)
VUID-VkPipelineViewportStateCreateInfo-viewportCount-01216
VUID-VkPipelineViewportStateCreateInfo-viewportCount-01218
viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-viewportCount-01218)
VUID-VkPipelineViewportStateCreateInfo-viewportCount-arraylength
viewportCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-viewportCount-arraylength)
VUID-VkPipelineViewportStateCreateInfo-viewportWScalingEnable-01726
If the viewportWScalingEnable member of a VkPipelineViewportWScalingStateCreateInfoNV structure chained to the pNext chain is VK_TRUE, the viewportCount member of the VkPipelineViewportWScalingStateCreateInfoNV structure must be equal to viewportCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportStateCreateInfo-viewportWScalingEnable-01726)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportSwizzleStateCreateInfoNV-flags-zerobitmask)
VUID-VkPipelineViewportSwizzleStateCreateInfoNV-flags-zerobitmask
sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportSwizzleStateCreateInfoNV-sType-sType)
VUID-VkPipelineViewportSwizzleStateCreateInfoNV-sType-sType
VUID-VkPipelineViewportSwizzleStateCreateInfoNV-viewportCount-01215
viewportCount must match the viewportCount set in VkPipelineViewportStateCreateInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportSwizzleStateCreateInfoNV-viewportCount-01215)
VUID-VkPipelineViewportSwizzleStateCreateInfoNV-viewportCount-arraylength
viewportCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportSwizzleStateCreateInfoNV-viewportCount-arraylength)
VUID-VkPipelineViewportWScalingStateCreateInfoNV-sType-sType
sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportWScalingStateCreateInfoNV-sType-sType)
VUID-VkPipelineViewportWScalingStateCreateInfoNV-viewportCount-arraylength
viewportCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPipelineViewportWScalingStateCreateInfoNV-viewportCount-arraylength)
VUID-VkPresentInfoKHR-commonparent
Both of the elements of pSwapchains, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-commonparent)
Each element of pImageIndices must be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pSwapchains array, and the presented image subresource must be in the VK_IMAGE_LAYOUT_PRESENT_SRC_KHR layout at the time the operation is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-pImageIndices-01296)
VUID-VkPresentInfoKHR-pImageIndices-01296
VUID-VkPresentInfoKHR-pImageIndices-01430
Each element of pImageIndices must be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pSwapchains array, and the presented image subresource must be in the VK_IMAGE_LAYOUT_PRESENT_SRC_KHR or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR layout at the time the operation is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-pImageIndices-01430)
pImageIndices must be a valid pointer to an array of swapchainCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-pImageIndices-parameter)
VUID-VkPresentInfoKHR-pImageIndices-parameter
VUID-VkPresentInfoKHR-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupPresentInfoKHR, VkDisplayPresentInfoKHR, VkPresentRegionsKHR, or VkPresentTimesInfoGOOGLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-pNext-pNext)
VUID-VkPresentInfoKHR-pResults-parameter
If pResults is not NULL, pResults must be a valid pointer to an array of swapchainCount VkResult values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-pResults-parameter)
pSwapchains must be a valid pointer to an array of swapchainCount valid VkSwapchainKHR handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-pSwapchains-parameter)
VUID-VkPresentInfoKHR-pSwapchains-parameter
If waitSemaphoreCount is not 0, pWaitSemaphores must be a valid pointer to an array of waitSemaphoreCount valid VkSemaphore handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-pWaitSemaphores-parameter)
VUID-VkPresentInfoKHR-pWaitSemaphores-parameter
sType must be VK_STRUCTURE_TYPE_PRESENT_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-sType-sType)
VUID-VkPresentInfoKHR-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-sType-unique)
VUID-VkPresentInfoKHR-sType-unique
VUID-VkPresentInfoKHR-swapchainCount-arraylength
swapchainCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentInfoKHR-swapchainCount-arraylength)
VUID-VkPresentRegionKHR-pRectangles-parameter
If rectangleCount is not 0, and pRectangles is not NULL, pRectangles must be a valid pointer to an array of rectangleCount valid VkRectLayerKHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentRegionKHR-pRectangles-parameter)
VUID-VkPresentRegionsKHR-pRegions-parameter
If pRegions is not NULL, pRegions must be a valid pointer to an array of swapchainCount valid VkPresentRegionKHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentRegionsKHR-pRegions-parameter)
sType must be VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentRegionsKHR-sType-sType)
VUID-VkPresentRegionsKHR-sType-sType
VUID-VkPresentRegionsKHR-swapchainCount-01260
swapchainCount must be the same value as VkPresentInfoKHR::swapchainCount, where VkPresentInfoKHR is in the pNext-chain of this VkPresentRegionsKHR structure. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentRegionsKHR-swapchainCount-01260)
swapchainCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentRegionsKHR-swapchainCount-arraylength)
VUID-VkPresentRegionsKHR-swapchainCount-arraylength
VUID-VkPresentTimesInfoGOOGLE-pTimes-parameter
If pTimes is not NULL, pTimes must be a valid pointer to an array of swapchainCount VkPresentTimeGOOGLE structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentTimesInfoGOOGLE-pTimes-parameter)
sType must be VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentTimesInfoGOOGLE-sType-sType)
VUID-VkPresentTimesInfoGOOGLE-sType-sType
swapchainCount must be the same value as VkPresentInfoKHR::swapchainCount, where VkPresentInfoKHR is in the pNext chain of this VkPresentTimesInfoGOOGLE structure. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentTimesInfoGOOGLE-swapchainCount-01247)
VUID-VkPresentTimesInfoGOOGLE-swapchainCount-01247
swapchainCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPresentTimesInfoGOOGLE-swapchainCount-arraylength)
VUID-VkPresentTimesInfoGOOGLE-swapchainCount-arraylength
VUID-VkProtectedSubmitInfo-pNext-01819
If the VkSubmitInfo::pNext chain does not include a VkProtectedSubmitInfo structure, then each element of the command buffer of the pCommandBuffers array must be an unprotected command buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkProtectedSubmitInfo-pNext-01819)
VUID-VkProtectedSubmitInfo-protectedSubmit-01816
If the protected memory feature is not enabled, protectedSubmit must not be VK_TRUE. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkProtectedSubmitInfo-protectedSubmit-01816)
VUID-VkProtectedSubmitInfo-protectedSubmit-01817
If protectedSubmit is VK_TRUE, then each element of the pCommandBuffers array must be a protected command buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkProtectedSubmitInfo-protectedSubmit-01817)
VUID-VkProtectedSubmitInfo-protectedSubmit-01818
If protectedSubmit is VK_FALSE, then each element of the pCommandBuffers array must be an unprotected command buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkProtectedSubmitInfo-protectedSubmit-01818)
sType must be VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkProtectedSubmitInfo-sType-sType)
VUID-VkProtectedSubmitInfo-sType-sType
VUID-VkPushConstantRange-offset-00294
offset must be less than VkPhysicalDeviceLimits::maxPushConstantsSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-offset-00294)
VUID-VkPushConstantRange-offset-00295
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-offset-00295)
VUID-VkPushConstantRange-size-00296
size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-size-00296)
VUID-VkPushConstantRange-size-00297
size must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-size-00297)
VUID-VkPushConstantRange-size-00298
size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-size-00298)
VUID-VkPushConstantRange-stageFlags-parameter
stageFlags must be a valid combination of VkShaderStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-stageFlags-parameter)
VUID-VkPushConstantRange-stageFlags-requiredbitmask
stageFlags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkPushConstantRange-stageFlags-requiredbitmask)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueryPoolCreateInfo-flags-zerobitmask)
VUID-VkQueryPoolCreateInfo-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueryPoolCreateInfo-pNext-pNext)
VUID-VkQueryPoolCreateInfo-pNext-pNext
VUID-VkQueryPoolCreateInfo-queryType-00791
If the pipeline statistics queries feature is not enabled, queryType must not be VK_QUERY_TYPE_PIPELINE_STATISTICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueryPoolCreateInfo-queryType-00791)
If queryType is VK_QUERY_TYPE_PIPELINE_STATISTICS, pipelineStatistics must be a valid combination of VkQueryPipelineStatisticFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueryPoolCreateInfo-queryType-00792)
VUID-VkQueryPoolCreateInfo-queryType-00792
queryType must be a valid VkQueryType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueryPoolCreateInfo-queryType-parameter)
VUID-VkQueryPoolCreateInfo-queryType-parameter
sType must be VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueryPoolCreateInfo-sType-sType)
VUID-VkQueryPoolCreateInfo-sType-sType
pNext must be NULL or a pointer to a valid instance of VkQueueFamilyCheckpointPropertiesNV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueueFamilyProperties2-pNext-pNext)
VUID-VkQueueFamilyProperties2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkQueueFamilyProperties2-sType-sType)
VUID-VkQueueFamilyProperties2-sType-sType
VUID-VkRectLayerKHR-layer-01262
layer must be less than imageArrayLayers member of the VkSwapchainCreateInfoKHR structure given to vkCreateSwapchainKHR. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRectLayerKHR-layer-01262)
VUID-VkRectLayerKHR-offset-01261
The sum of offset and extent must be no greater than the imageExtent member of the VkSwapchainCreateInfoKHR structure given to vkCreateSwapchainKHR. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRectLayerKHR-offset-01261)
clearValueCount must be greater than the largest attachment index in renderPass that specifies a loadOp (or stencilLoadOp, if the attachment has a depth/stencil format) of VK_ATTACHMENT_LOAD_OP_CLEAR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-clearValueCount-00902)
VUID-VkRenderPassBeginInfo-clearValueCount-00902
If clearValueCount is not 0, pClearValues must be a valid pointer to an array of clearValueCount valid VkClearValue unions (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-clearValueCount-00903)
VUID-VkRenderPassBeginInfo-clearValueCount-00903
VUID-VkRenderPassBeginInfo-commonparent
Both of framebuffer, and renderPass must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-commonparent)
framebuffer must be a valid VkFramebuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-framebuffer-parameter)
VUID-VkRenderPassBeginInfo-framebuffer-parameter
VUID-VkRenderPassBeginInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupRenderPassBeginInfo or VkRenderPassSampleLocationsBeginInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-pNext-pNext)
VUID-VkRenderPassBeginInfo-renderPass-00904
renderPass must be compatible with the renderPass member of the VkFramebufferCreateInfo structure specified when creating framebuffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-renderPass-00904)
renderPass must be a valid VkRenderPass handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-renderPass-parameter)
VUID-VkRenderPassBeginInfo-renderPass-parameter
sType must be VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-sType-sType)
VUID-VkRenderPassBeginInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-sType-unique)
VUID-VkRenderPassBeginInfo-sType-unique
VUID-VkRenderPassCreateInfo-None-00832
If any two subpasses operate on attachments with overlapping ranges of the same VkDeviceMemory object, and at least one subpass writes to that area of VkDeviceMemory, a subpass dependency must be included (either directly or via some intermediate subpasses) between them (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-None-00832)
VUID-VkRenderPassCreateInfo-attachment-00833
If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or the attachment indexed by any element of pPreserveAttachments in any element of pSubpasses is bound to a range of a VkDeviceMemory object that overlaps with any other attachment in any subpass (including the same subpass), the VkAttachmentDescription structures describing them must include VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT in flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-attachment-00833)
VUID-VkRenderPassCreateInfo-attachment-00834
If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or any element of pPreserveAttachments in any element of pSubpasses is not VK_ATTACHMENT_UNUSED, it must be less than attachmentCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-attachment-00834)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-flags-zerobitmask)
VUID-VkRenderPassCreateInfo-flags-zerobitmask
VUID-VkRenderPassCreateInfo-pAttachments-00836
For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pAttachments-00836)
For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pAttachments-01566)
VUID-VkRenderPassCreateInfo-pAttachments-01566
VUID-VkRenderPassCreateInfo-pAttachments-01567
For any member of pAttachments with a stencilLoadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pAttachments-01567)
VUID-VkRenderPassCreateInfo-pAttachments-parameter
If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkAttachmentDescription structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pAttachments-parameter)
For any element of pDependencies, if the srcSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the srcStageMask member of that dependency must be a pipeline stage supported by the pipeline identified by the pipelineBindPoint member of the source subpass. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pDependencies-00837)
VUID-VkRenderPassCreateInfo-pDependencies-00837
For any element of pDependencies, if the dstSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the dstStageMask member of that dependency must be a pipeline stage supported by the pipeline identified by the pipelineBindPoint member of the source subpass. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pDependencies-00838)
VUID-VkRenderPassCreateInfo-pDependencies-00838
VUID-VkRenderPassCreateInfo-pDependencies-parameter
If dependencyCount is not 0, pDependencies must be a valid pointer to an array of dependencyCount valid VkSubpassDependency structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pDependencies-parameter)
VUID-VkRenderPassCreateInfo-pNext-01926
If the pNext chain includes an instance of VkRenderPassInputAttachmentAspectCreateInfo, the subpass member of each element of its pAspectReferences member must be less than subpassCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pNext-01926)
VUID-VkRenderPassCreateInfo-pNext-01927
If the pNext chain includes an instance of VkRenderPassInputAttachmentAspectCreateInfo, the inputAttachmentIndex member of each element of its pAspectReferences member must be less than the value of inputAttachmentCount in the member of pSubpasses identified by its subpass member (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pNext-01927)
VUID-VkRenderPassCreateInfo-pNext-01928
If the pNext chain includes an instance of VkRenderPassMultiviewCreateInfo, and its subpassCount member is not zero, that member must be equal to the value of subpassCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pNext-01928)
VUID-VkRenderPassCreateInfo-pNext-01929
If the pNext chain includes an instance of VkRenderPassMultiviewCreateInfo, if its dependencyCount member is not zero, it must be equal to dependencyCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pNext-01929)
If the pNext chain includes an instance of VkRenderPassMultiviewCreateInfo, for each non-zero element of pViewOffsets, the srcSubpass and dstSubpass members of pDependencies at the same index must not be equal (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pNext-01930)
VUID-VkRenderPassCreateInfo-pNext-01930
If the pNext chain includes an instance of VkRenderPassInputAttachmentAspectCreateInfo, the aspectMask member of any element of pAspectReferences must only include aspects that are present in images of the format of the input attachment specified by the subpass and inputAttachment of the same element of pAspectReferences (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pNext-01963)
VUID-VkRenderPassCreateInfo-pNext-01963
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkRenderPassInputAttachmentAspectCreateInfo or VkRenderPassMultiviewCreateInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pNext-pNext)
VUID-VkRenderPassCreateInfo-pNext-pNext
VUID-VkRenderPassCreateInfo-pPreserveAttachments-00835
The value of each element of the pPreserveAttachments member in each element of pSubpasses must not be VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pPreserveAttachments-00835)
VUID-VkRenderPassCreateInfo-pSubpasses-parameter
pSubpasses must be a valid pointer to an array of subpassCount valid VkSubpassDescription structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-pSubpasses-parameter)
sType must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-sType-sType)
VUID-VkRenderPassCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-sType-unique)
VUID-VkRenderPassCreateInfo-sType-unique
subpassCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo-subpassCount-arraylength)
VUID-VkRenderPassCreateInfo-subpassCount-arraylength
VUID-VkRenderPassCreateInfo2KHR-None-03049
If any two subpasses operate on attachments with overlapping ranges of the same VkDeviceMemory object, and at least one subpass writes to that area of VkDeviceMemory, a subpass dependency must be included (either directly or via some intermediate subpasses) between them (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-None-03049)
VUID-VkRenderPassCreateInfo2KHR-attachment-03050
If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or the attachment indexed by any element of pPreserveAttachments in any given element of pSubpasses is bound to a range of a VkDeviceMemory object that overlaps with any other attachment in any subpass (including the same subpass), the VkAttachmentDescription2KHR structures describing them must include VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT in flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-attachment-03050)
VUID-VkRenderPassCreateInfo2KHR-attachment-03051
If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or any element of pPreserveAttachments in any given element of pSubpasses is not VK_ATTACHMENT_UNUSED, it must be less than attachmentCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-attachment-03051)
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-flags-zerobitmask)
VUID-VkRenderPassCreateInfo2KHR-flags-zerobitmask
VUID-VkRenderPassCreateInfo2KHR-pAttachments-03053
For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pAttachments-03053)
If attachmentCount is not 0, pAttachments must be a valid pointer to an array of attachmentCount valid VkAttachmentDescription2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pAttachments-parameter)
VUID-VkRenderPassCreateInfo2KHR-pAttachments-parameter
The set of bits included in any element of pCorrelatedViewMasks must not overlap with the set of bits included in any other element of pCorrelatedViewMasks (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pCorrelatedViewMasks-03056)
VUID-VkRenderPassCreateInfo2KHR-pCorrelatedViewMasks-03056
VUID-VkRenderPassCreateInfo2KHR-pCorrelatedViewMasks-parameter
If correlatedViewMaskCount is not 0, pCorrelatedViewMasks must be a valid pointer to an array of correlatedViewMaskCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pCorrelatedViewMasks-parameter)
For any element of pDependencies, if the srcSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the srcStageMask member of that dependency must be a pipeline stage supported by the pipeline identified by the pipelineBindPoint member of the source subpass. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pDependencies-03054)
VUID-VkRenderPassCreateInfo2KHR-pDependencies-03054
For any element of pDependencies, if the dstSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the dstStageMask member of that dependency must be a pipeline stage supported by the pipeline identified by the pipelineBindPoint member of the source subpass. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pDependencies-03055)
VUID-VkRenderPassCreateInfo2KHR-pDependencies-03055
VUID-VkRenderPassCreateInfo2KHR-pDependencies-03060
For any element of pDependencies where its srcSubpass member equals its dstSubpass member, if the viewMask member of the corresponding element of pSubpasses includes more than one bit, its dependencyFlags member must include VK_DEPENDENCY_VIEW_LOCAL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pDependencies-03060)
VUID-VkRenderPassCreateInfo2KHR-pDependencies-parameter
If dependencyCount is not 0, pDependencies must be a valid pointer to an array of dependencyCount valid VkSubpassDependency2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pDependencies-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pNext-pNext)
VUID-VkRenderPassCreateInfo2KHR-pNext-pNext
VUID-VkRenderPassCreateInfo2KHR-pPreserveAttachments-03052
The value of any element of the pPreserveAttachments member in any given element of pSubpasses must not be VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pPreserveAttachments-03052)
pSubpasses must be a valid pointer to an array of subpassCount valid VkSubpassDescription2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-pSubpasses-parameter)
VUID-VkRenderPassCreateInfo2KHR-pSubpasses-parameter
sType must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-sType-sType)
VUID-VkRenderPassCreateInfo2KHR-sType-sType
VUID-VkRenderPassCreateInfo2KHR-subpassCount-arraylength
subpassCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-subpassCount-arraylength)
VUID-VkRenderPassCreateInfo2KHR-viewMask-03057
If the VkSubpassDescription2KHR::viewMask member of all elements of pSubpasses is 0, correlatedViewMaskCount must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-viewMask-03057)
VUID-VkRenderPassCreateInfo2KHR-viewMask-03058
The VkSubpassDescription2KHR::viewMask member of all elements of pSubpasses must either all be 0, or all not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-viewMask-03058)
VUID-VkRenderPassCreateInfo2KHR-viewMask-03059
If the VkSubpassDescription2KHR::viewMask member of all elements of pSubpasses is 0, the dependencyFlags member of any element of pDependencies must not include VK_DEPENDENCY_VIEW_LOCAL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassCreateInfo2KHR-viewMask-03059)
aspectReferenceCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassInputAttachmentAspectCreateInfo-aspectReferenceCount-arraylength)
VUID-VkRenderPassInputAttachmentAspectCreateInfo-aspectReferenceCount-arraylength
VUID-VkRenderPassInputAttachmentAspectCreateInfo-pAspectReferences-parameter
pAspectReferences must be a valid pointer to an array of aspectReferenceCount valid VkInputAttachmentAspectReference structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassInputAttachmentAspectCreateInfo-pAspectReferences-parameter)
sType must be VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassInputAttachmentAspectCreateInfo-sType-sType)
VUID-VkRenderPassInputAttachmentAspectCreateInfo-sType-sType
VUID-VkRenderPassMultiviewCreateInfo-pCorrelationMasks-00841
Each view index must not be set in more than one element of pCorrelationMasks (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassMultiviewCreateInfo-pCorrelationMasks-00841)
VUID-VkRenderPassMultiviewCreateInfo-pCorrelationMasks-parameter
If correlationMaskCount is not 0, pCorrelationMasks must be a valid pointer to an array of correlationMaskCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassMultiviewCreateInfo-pCorrelationMasks-parameter)
If subpassCount is not 0, pViewMasks must be a valid pointer to an array of subpassCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassMultiviewCreateInfo-pViewMasks-parameter)
VUID-VkRenderPassMultiviewCreateInfo-pViewMasks-parameter
VUID-VkRenderPassMultiviewCreateInfo-pViewOffsets-parameter
If dependencyCount is not 0, pViewOffsets must be a valid pointer to an array of dependencyCount int32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassMultiviewCreateInfo-pViewOffsets-parameter)
sType must be VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassMultiviewCreateInfo-sType-sType)
VUID-VkRenderPassMultiviewCreateInfo-sType-sType
VUID-VkRenderPassSampleLocationsBeginInfoEXT-pAttachmentInitialSampleLocations-parameter
If attachmentInitialSampleLocationsCount is not 0, pAttachmentInitialSampleLocations must be a valid pointer to an array of attachmentInitialSampleLocationsCount valid VkAttachmentSampleLocationsEXT structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassSampleLocationsBeginInfoEXT-pAttachmentInitialSampleLocations-parameter)
VUID-VkRenderPassSampleLocationsBeginInfoEXT-pPostSubpassSampleLocations-parameter
If postSubpassSampleLocationsCount is not 0, pPostSubpassSampleLocations must be a valid pointer to an array of postSubpassSampleLocationsCount valid VkSubpassSampleLocationsEXT structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassSampleLocationsBeginInfoEXT-pPostSubpassSampleLocations-parameter)
VUID-VkRenderPassSampleLocationsBeginInfoEXT-sType-sType
sType must be VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkRenderPassSampleLocationsBeginInfoEXT-sType-sType)
VUID-VkSampleLocationsInfoEXT-pSampleLocations-parameter
pSampleLocations must be a valid pointer to an array of sampleLocationsCount VkSampleLocationEXT structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSampleLocationsInfoEXT-pSampleLocations-parameter)
sType must be VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSampleLocationsInfoEXT-sType-sType)
VUID-VkSampleLocationsInfoEXT-sType-sType
VUID-VkSampleLocationsInfoEXT-sampleLocationsCount-01527
sampleLocationsCount must equal sampleLocationsPerPixel {times} sampleLocationGridSize.width {times} sampleLocationGridSize.height (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSampleLocationsInfoEXT-sampleLocationsCount-01527)
sampleLocationsCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSampleLocationsInfoEXT-sampleLocationsCount-arraylength)
VUID-VkSampleLocationsInfoEXT-sampleLocationsCount-arraylength
VUID-VkSampleLocationsInfoEXT-sampleLocationsPerPixel-01526
sampleLocationsPerPixel must be a bit value that is set in VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSampleCounts (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSampleLocationsInfoEXT-sampleLocationsPerPixel-01526)
VUID-VkSampleLocationsInfoEXT-sampleLocationsPerPixel-parameter
sampleLocationsPerPixel must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSampleLocationsInfoEXT-sampleLocationsPerPixel-parameter)
VUID-VkSamplerCreateInfo-None-01647
The sampler reduction mode must be set to VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT if sampler Y'CBCR conversion is enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-None-01647)
VUID-VkSamplerCreateInfo-addressModeU-01078
If any of addressModeU, addressModeV or addressModeW are VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, borderColor must be a valid VkBorderColor value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-addressModeU-01078)
VUID-VkSamplerCreateInfo-addressModeU-01079
If the VK_KHR_sampler_mirror_clamp_to_edge extension is not enabled, addressModeU, addressModeV and addressModeW must not be VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-addressModeU-01079)
VUID-VkSamplerCreateInfo-addressModeU-01646
If sampler Y'CBCR conversion is enabled, addressModeU, addressModeV, and addressModeW must be VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE, anisotropyEnable must be VK_FALSE, and unnormalizedCoordinates must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-addressModeU-01646)
addressModeU must be a valid VkSamplerAddressMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-addressModeU-parameter)
VUID-VkSamplerCreateInfo-addressModeU-parameter
addressModeV must be a valid VkSamplerAddressMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-addressModeV-parameter)
VUID-VkSamplerCreateInfo-addressModeV-parameter
addressModeW must be a valid VkSamplerAddressMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-addressModeW-parameter)
VUID-VkSamplerCreateInfo-addressModeW-parameter
If the anisotropic sampling feature is not enabled, anisotropyEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-anisotropyEnable-01070)
VUID-VkSamplerCreateInfo-anisotropyEnable-01070
If anisotropyEnable is VK_TRUE, maxAnisotropy must be between 1.0 and VkPhysicalDeviceLimits::maxSamplerAnisotropy, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-anisotropyEnable-01071)
VUID-VkSamplerCreateInfo-anisotropyEnable-01071
If compareEnable is VK_TRUE, compareOp must be a valid VkCompareOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-compareEnable-01080)
VUID-VkSamplerCreateInfo-compareEnable-01080
VUID-VkSamplerCreateInfo-compareEnable-01423
If compareEnable is VK_TRUE, the reductionMode member of VkSamplerReductionModeCreateInfoEXT must be VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-compareEnable-01423)
VUID-VkSamplerCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-flags-zerobitmask)
If either magFilter or minFilter is VK_FILTER_CUBIC_IMG, anisotropyEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-magFilter-01081)
VUID-VkSamplerCreateInfo-magFilter-01081
VUID-VkSamplerCreateInfo-magFilter-01422
If either magFilter or minFilter is VK_FILTER_CUBIC_IMG, the reductionMode member of VkSamplerReductionModeCreateInfoEXT must be VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-magFilter-01422)
magFilter must be a valid VkFilter value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-magFilter-parameter)
VUID-VkSamplerCreateInfo-magFilter-parameter
VUID-VkSamplerCreateInfo-maxLod-01973
maxLod must be greater than or equal to minLod (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-maxLod-01973)
VUID-VkSamplerCreateInfo-minFilter-01645
If sampler Y'CBCR conversion is enabled and VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT is not set for the format, minFilter and magFilter must be equal to the sampler Y'CBCR conversion's chromaFilter (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-minFilter-01645)
minFilter must be a valid VkFilter value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-minFilter-parameter)
VUID-VkSamplerCreateInfo-minFilter-parameter
The absolute value of mipLodBias must be less than or equal to VkPhysicalDeviceLimits::maxSamplerLodBias (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-mipLodBias-01069)
VUID-VkSamplerCreateInfo-mipLodBias-01069
mipmapMode must be a valid VkSamplerMipmapMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-mipmapMode-parameter)
VUID-VkSamplerCreateInfo-mipmapMode-parameter
VUID-VkSamplerCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkSamplerReductionModeCreateInfoEXT or VkSamplerYcbcrConversionInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-sType-sType)
VUID-VkSamplerCreateInfo-sType-sType
VUID-VkSamplerCreateInfo-sType-unique
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-sType-unique)
If unnormalizedCoordinates is VK_TRUE, minFilter and magFilter must be equal (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01072)
VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01072
If unnormalizedCoordinates is VK_TRUE, mipmapMode must be VK_SAMPLER_MIPMAP_MODE_NEAREST (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01073)
VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01073
If unnormalizedCoordinates is VK_TRUE, minLod and maxLod must be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01074)
VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01074
VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01075
If unnormalizedCoordinates is VK_TRUE, addressModeU and addressModeV must each be either VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE or VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01075)
If unnormalizedCoordinates is VK_TRUE, anisotropyEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01076)
VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01076
If unnormalizedCoordinates is VK_TRUE, compareEnable must be VK_FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01077)
VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01077
VUID-VkSamplerReductionModeCreateInfoEXT-reductionMode-parameter
reductionMode must be a valid VkSamplerReductionModeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerReductionModeCreateInfoEXT-reductionMode-parameter)
sType must be VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerReductionModeCreateInfoEXT-sType-sType)
VUID-VkSamplerReductionModeCreateInfoEXT-sType-sType
VUID-VkSamplerYcbcrConversionCreateInfo-None-01654
If the format has a _422 or _420 suffix: (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-None-01654)
VUID-VkSamplerYcbcrConversionCreateInfo-chromaFilter-01657
If the format does not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT, chromaFilter must be VK_FILTER_NEAREST (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-chromaFilter-01657)
chromaFilter must be a valid VkFilter value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-chromaFilter-parameter)
VUID-VkSamplerYcbcrConversionCreateInfo-chromaFilter-parameter
VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter
components must be a valid VkComponentMapping structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter)
VUID-VkSamplerYcbcrConversionCreateInfo-forceExplicitReconstruction-01656
If the format does not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT, forceExplicitReconstruction must be FALSE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-forceExplicitReconstruction-01656)
format must not be VK_FORMAT_UNDEFINED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-format-01649)
VUID-VkSamplerYcbcrConversionCreateInfo-format-01649
format must support VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT or VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-format-01650)
VUID-VkSamplerYcbcrConversionCreateInfo-format-01650
format must represent unsigned normalized values (i.e. the format must be a UNORM format) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-format-01653)
VUID-VkSamplerYcbcrConversionCreateInfo-format-01653
VUID-VkSamplerYcbcrConversionCreateInfo-format-01904
If an external format conversion is being created, format must be VK_FORMAT_UNDEFINED, otherwise it must not be VK_FORMAT_UNDEFINED. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-format-01904)
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-format-parameter)
VUID-VkSamplerYcbcrConversionCreateInfo-format-parameter
VUID-VkSamplerYcbcrConversionCreateInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkExternalFormatANDROID (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-sType-sType)
VUID-VkSamplerYcbcrConversionCreateInfo-sType-sType
VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-01651
If the format does not support VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT, xChromaOffset and yChromaOffset must not be VK_CHROMA_LOCATION_COSITED_EVEN (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-01651)
If the format does not support VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT, xChromaOffset and yChromaOffset must not be VK_CHROMA_LOCATION_MIDPOINT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-01652)
VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-01652
xChromaOffset must be a valid VkChromaLocation value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-parameter)
VUID-VkSamplerYcbcrConversionCreateInfo-xChromaOffset-parameter
yChromaOffset must be a valid VkChromaLocation value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-yChromaOffset-parameter)
VUID-VkSamplerYcbcrConversionCreateInfo-yChromaOffset-parameter
VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-01655
If ycbcrModel is not VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY, then components.r, components.g, and components.b must correspond to channels of the format; that is, components.r, components.g, and components.b must not be VK_COMPONENT_SWIZZLE_ZERO or VK_COMPONENT_SWIZZLE_ONE, and must not correspond to a channel which contains zero or one as a consequence of conversion to RGBA (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-01655)
VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-parameter
ycbcrModel must be a valid VkSamplerYcbcrModelConversion value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-parameter)
ycbcrRange must be a valid VkSamplerYcbcrRange value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrRange-parameter)
VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrRange-parameter
sType must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionImageFormatProperties-sType-sType)
VUID-VkSamplerYcbcrConversionImageFormatProperties-sType-sType
VUID-VkSamplerYcbcrConversionInfo-conversion-parameter
conversion must be a valid VkSamplerYcbcrConversion handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionInfo-conversion-parameter)
sType must be VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSamplerYcbcrConversionInfo-sType-sType)
VUID-VkSamplerYcbcrConversionInfo-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreCreateInfo-flags-zerobitmask)
VUID-VkSemaphoreCreateInfo-flags-zerobitmask
VUID-VkSemaphoreCreateInfo-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkExportSemaphoreCreateInfo or VkExportSemaphoreWin32HandleInfoKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreCreateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreCreateInfo-sType-sType)
VUID-VkSemaphoreCreateInfo-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreCreateInfo-sType-unique)
VUID-VkSemaphoreCreateInfo-sType-unique
handleType must have been included in VkExportSemaphoreCreateInfo::handleTypes when semaphore's current payload was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-handleType-01132)
VUID-VkSemaphoreGetFdInfoKHR-handleType-01132
VUID-VkSemaphoreGetFdInfoKHR-handleType-01134
If handleType refers to a handle type with copy payload transference semantics, as defined below in Importing Semaphore Payloads, there must be no queue waiting on semaphore. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-handleType-01134)
VUID-VkSemaphoreGetFdInfoKHR-handleType-01135
If handleType refers to a handle type with copy payload transference semantics, semaphore must be signaled, or have an associated semaphore signal operation pending execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-handleType-01135)
handleType must be defined as a POSIX file descriptor handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-handleType-01136)
VUID-VkSemaphoreGetFdInfoKHR-handleType-01136
handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-handleType-parameter)
VUID-VkSemaphoreGetFdInfoKHR-handleType-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-pNext-pNext)
VUID-VkSemaphoreGetFdInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-sType-sType)
VUID-VkSemaphoreGetFdInfoKHR-sType-sType
VUID-VkSemaphoreGetFdInfoKHR-semaphore-01133
semaphore must not currently have its payload replaced by an imported payload as described below in Importing Semaphore Payloads unless that imported payload's handle type was included in VkExternalSemaphoreProperties::exportFromImportedHandleTypes for handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-semaphore-01133)
semaphore must be a valid VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetFdInfoKHR-semaphore-parameter)
VUID-VkSemaphoreGetFdInfoKHR-semaphore-parameter
VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01126
handleType must have been included in VkExportSemaphoreCreateInfo::handleTypes when the semaphore's current payload was created. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01126)
VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01127
If handleType is defined as an NT handle, vkGetSemaphoreWin32HandleKHR must be called no more than once for each valid unique combination of semaphore and handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01127)
VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01129
If handleType refers to a handle type with copy payload transference semantics, as defined below in Importing Semaphore Payloads, there must be no queue waiting on semaphore. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01129)
VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01130
If handleType refers to a handle type with copy payload transference semantics, semaphore must be signaled, or have an associated semaphore signal operation pending execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01130)
VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01131
handleType must be defined as an NT handle or a global share handle. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-01131)
handleType must be a valid VkExternalSemaphoreHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-parameter)
VUID-VkSemaphoreGetWin32HandleInfoKHR-handleType-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-pNext-pNext)
VUID-VkSemaphoreGetWin32HandleInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-sType-sType)
VUID-VkSemaphoreGetWin32HandleInfoKHR-sType-sType
VUID-VkSemaphoreGetWin32HandleInfoKHR-semaphore-01128
semaphore must not currently have its payload replaced by an imported payload as described below in Importing Semaphore Payloads unless that imported payload's handle type was included in VkExternalSemaphoreProperties::exportFromImportedHandleTypes for handleType. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-semaphore-01128)
semaphore must be a valid VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSemaphoreGetWin32HandleInfoKHR-semaphore-parameter)
VUID-VkSemaphoreGetWin32HandleInfoKHR-semaphore-parameter
VUID-VkShaderModuleCreateInfo-codeSize-01085
codeSize must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-codeSize-01085)
VUID-VkShaderModuleCreateInfo-codeSize-01086
codeSize must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-codeSize-01086)
VUID-VkShaderModuleCreateInfo-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-flags-zerobitmask)
VUID-VkShaderModuleCreateInfo-pCode-01087
pCode must point to valid SPIR-V code, formatted and packed as described by the Khronos SPIR-V Specification (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01087)
VUID-VkShaderModuleCreateInfo-pCode-01088
pCode must adhere to the validation rules described by the Validation Rules within a Module section of the SPIR-V Environment appendix (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01088)
pCode must declare the Shader capability for SPIR-V code (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01089)
VUID-VkShaderModuleCreateInfo-pCode-01089
pCode must not declare any capability that is not supported by the API, as described by the Capabilities section of the SPIR-V Environment appendix (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01090)
VUID-VkShaderModuleCreateInfo-pCode-01090
If pCode declares any of the capabilities listed as optional in the SPIR-V Environment appendix, the corresponding feature(s) must be enabled. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01091)
VUID-VkShaderModuleCreateInfo-pCode-01091
VUID-VkShaderModuleCreateInfo-pCode-01376
If pCode points to SPIR-V code, codeSize must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01376)
VUID-VkShaderModuleCreateInfo-pCode-01377
pCode must point to either valid SPIR-V code, formatted and packed as described by the Khronos SPIR-V Specification or valid GLSL code which must be written to the GL_KHR_vulkan_glsl extension specification (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01377)
If pCode points to SPIR-V code, that code must adhere to the validation rules described by the Validation Rules within a Module section of the SPIR-V Environment appendix (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01378)
VUID-VkShaderModuleCreateInfo-pCode-01378
If pCode points to GLSL code, it must be valid GLSL code written to the GL_KHR_vulkan_glsl GLSL extension specification (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-01379)
VUID-VkShaderModuleCreateInfo-pCode-01379
pCode must be a valid pointer to an array of (codeSize/4) uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pCode-parameter)
VUID-VkShaderModuleCreateInfo-pCode-parameter
VUID-VkShaderModuleCreateInfo-pNext-pNext
pNext must be NULL or a pointer to a valid instance of VkShaderModuleValidationCacheCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-pNext-pNext)
sType must be VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleCreateInfo-sType-sType)
VUID-VkShaderModuleCreateInfo-sType-sType
sType must be VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleValidationCacheCreateInfoEXT-sType-sType)
VUID-VkShaderModuleValidationCacheCreateInfoEXT-sType-sType
VUID-VkShaderModuleValidationCacheCreateInfoEXT-validationCache-parameter
validationCache must be a valid VkValidationCacheEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkShaderModuleValidationCacheCreateInfoEXT-validationCache-parameter)
sType must be VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSharedPresentSurfaceCapabilitiesKHR-sType-sType)
VUID-VkSharedPresentSurfaceCapabilitiesKHR-sType-sType
VUID-VkSparseBufferMemoryBindInfo-bindCount-arraylength
bindCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseBufferMemoryBindInfo-bindCount-arraylength)
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseBufferMemoryBindInfo-buffer-parameter)
VUID-VkSparseBufferMemoryBindInfo-buffer-parameter
VUID-VkSparseBufferMemoryBindInfo-pBinds-parameter
pBinds must be a valid pointer to an array of bindCount valid VkSparseMemoryBind structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseBufferMemoryBindInfo-pBinds-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageFormatProperties2-pNext-pNext)
VUID-VkSparseImageFormatProperties2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageFormatProperties2-sType-sType)
VUID-VkSparseImageFormatProperties2-sType-sType
extent.width must either be a multiple of the sparse image block width of the image, or else (extent.width + offset.x) must equal the width of the image subresource (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-extent-01108)
VUID-VkSparseImageMemoryBind-extent-01108
VUID-VkSparseImageMemoryBind-extent-01110
extent.height must either be a multiple of the sparse image block height of the image, or else (extent.height + offset.y) must equal the height of the image subresource (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-extent-01110)
extent.depth must either be a multiple of the sparse image block depth of the image, or else (extent.depth + offset.z) must equal the depth of the image subresource (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-extent-01112)
VUID-VkSparseImageMemoryBind-extent-01112
flags must be a valid combination of VkSparseMemoryBindFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-flags-parameter)
VUID-VkSparseImageMemoryBind-flags-parameter
If the sparse aliased residency feature is not enabled, and if any other resources are bound to ranges of memory, the range of memory being bound must not overlap with those bound ranges (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-memory-01104)
VUID-VkSparseImageMemoryBind-memory-01104
memory and memoryOffset must match the memory requirements of the calling command's image, as described in section Resource Memory Association (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-memory-01105)
VUID-VkSparseImageMemoryBind-memory-01105
If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-memory-parameter)
VUID-VkSparseImageMemoryBind-memory-parameter
offset.x must be a multiple of the sparse image block width (VkSparseImageFormatProperties::imageGranularity.width) of the image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-offset-01107)
VUID-VkSparseImageMemoryBind-offset-01107
VUID-VkSparseImageMemoryBind-offset-01109
offset.y must be a multiple of the sparse image block height (VkSparseImageFormatProperties::imageGranularity.height) of the image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-offset-01109)
offset.z must be a multiple of the sparse image block depth (VkSparseImageFormatProperties::imageGranularity.depth) of the image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-offset-01111)
VUID-VkSparseImageMemoryBind-offset-01111
VUID-VkSparseImageMemoryBind-subresource-01106
subresource must be a valid image subresource for image (see Image Views) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-subresource-01106)
VUID-VkSparseImageMemoryBind-subresource-parameter
subresource must be a valid VkImageSubresource structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBind-subresource-parameter)
VUID-VkSparseImageMemoryBindInfo-bindCount-arraylength
bindCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBindInfo-bindCount-arraylength)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBindInfo-image-parameter)
VUID-VkSparseImageMemoryBindInfo-image-parameter
VUID-VkSparseImageMemoryBindInfo-pBinds-parameter
pBinds must be a valid pointer to an array of bindCount valid VkSparseImageMemoryBind structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBindInfo-pBinds-parameter)
The subresource.mipLevel member of each element of pBinds must be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBindInfo-subresource-01722)
VUID-VkSparseImageMemoryBindInfo-subresource-01722
VUID-VkSparseImageMemoryBindInfo-subresource-01723
The subresource.arrayLayer member of each element of pBinds must be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryBindInfo-subresource-01723)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryRequirements2-pNext-pNext)
VUID-VkSparseImageMemoryRequirements2-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageMemoryRequirements2-sType-sType)
VUID-VkSparseImageMemoryRequirements2-sType-sType
VUID-VkSparseImageOpaqueMemoryBindInfo-bindCount-arraylength
bindCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageOpaqueMemoryBindInfo-bindCount-arraylength)
VUID-VkSparseImageOpaqueMemoryBindInfo-image-parameter
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageOpaqueMemoryBindInfo-image-parameter)
VUID-VkSparseImageOpaqueMemoryBindInfo-pBinds-01103
If the flags member of any element of pBinds contains VK_SPARSE_MEMORY_BIND_METADATA_BIT, the binding range defined must be within the mip tail region of the metadata aspect of image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageOpaqueMemoryBindInfo-pBinds-01103)
VUID-VkSparseImageOpaqueMemoryBindInfo-pBinds-parameter
pBinds must be a valid pointer to an array of bindCount valid VkSparseMemoryBind structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseImageOpaqueMemoryBindInfo-pBinds-parameter)
flags must be a valid combination of VkSparseMemoryBindFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-flags-parameter)
VUID-VkSparseMemoryBind-flags-parameter
VUID-VkSparseMemoryBind-memory-01096
If memory is not VK_NULL_HANDLE, memory and memoryOffset must match the memory requirements of the resource, as described in section Resource Memory Association (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-memory-01096)
VUID-VkSparseMemoryBind-memory-01097
If memory is not VK_NULL_HANDLE, memory must not have been created with a memory type that reports VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-memory-01097)
If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-memory-parameter)
VUID-VkSparseMemoryBind-memory-parameter
memoryOffset must be less than the size of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-memoryOffset-01101)
VUID-VkSparseMemoryBind-memoryOffset-01101
resourceOffset must be less than the size of the resource (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-resourceOffset-01099)
VUID-VkSparseMemoryBind-resourceOffset-01099
size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-size-01098)
VUID-VkSparseMemoryBind-size-01098
size must be less than or equal to the size of the resource minus resourceOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-size-01100)
VUID-VkSparseMemoryBind-size-01100
VUID-VkSparseMemoryBind-size-01102
size must be less than or equal to the size of memory minus memoryOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSparseMemoryBind-size-01102)
The offset member of each element of pMapEntries must be less than dataSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSpecializationInfo-offset-00773)
VUID-VkSpecializationInfo-offset-00773
If dataSize is not 0, pData must be a valid pointer to an array of dataSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSpecializationInfo-pData-parameter)
VUID-VkSpecializationInfo-pData-parameter
The size member of each element of pMapEntries must be less than or equal to dataSize minus offset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSpecializationInfo-pMapEntries-00774)
VUID-VkSpecializationInfo-pMapEntries-00774
VUID-VkSpecializationInfo-pMapEntries-parameter
If mapEntryCount is not 0, pMapEntries must be a valid pointer to an array of mapEntryCount valid VkSpecializationMapEntry structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSpecializationInfo-pMapEntries-parameter)
VUID-VkSpecializationMapEntry-constantID-00776
For a constantID specialization constant declared in a shader, size must match the byte size of the constantID. If the specialization constant is of type boolean, size must be the byte size of VkBool32 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSpecializationMapEntry-constantID-00776)
VUID-VkStencilOpState-compareOp-parameter
compareOp must be a valid VkCompareOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkStencilOpState-compareOp-parameter)
depthFailOp must be a valid VkStencilOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkStencilOpState-depthFailOp-parameter)
VUID-VkStencilOpState-depthFailOp-parameter
failOp must be a valid VkStencilOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkStencilOpState-failOp-parameter)
VUID-VkStencilOpState-failOp-parameter
passOp must be a valid VkStencilOp value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkStencilOpState-passOp-parameter)
VUID-VkStencilOpState-passOp-parameter
VUID-VkSubmitInfo-commonparent
Each of the elements of pCommandBuffers, the elements of pSignalSemaphores, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-commonparent)
VUID-VkSubmitInfo-pCommandBuffers-00075
Each element of pCommandBuffers must not have been allocated with VK_COMMAND_BUFFER_LEVEL_SECONDARY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pCommandBuffers-00075)
If commandBufferCount is not 0, pCommandBuffers must be a valid pointer to an array of commandBufferCount valid VkCommandBuffer handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pCommandBuffers-parameter)
VUID-VkSubmitInfo-pCommandBuffers-parameter
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkD3D12FenceSubmitInfoKHR, VkDeviceGroupSubmitInfo, VkProtectedSubmitInfo, VkWin32KeyedMutexAcquireReleaseInfoKHR, or VkWin32KeyedMutexAcquireReleaseInfoNV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pNext-pNext)
If signalSemaphoreCount is not 0, pSignalSemaphores must be a valid pointer to an array of signalSemaphoreCount valid VkSemaphore handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pSignalSemaphores-parameter)
VUID-VkSubmitInfo-pSignalSemaphores-parameter
VUID-VkSubmitInfo-pWaitDstStageMask-00076
If the geometry shaders feature is not enabled, each element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pWaitDstStageMask-00076)
VUID-VkSubmitInfo-pWaitDstStageMask-00077
If the tessellation shaders feature is not enabled, each element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pWaitDstStageMask-00077)
VUID-VkSubmitInfo-pWaitDstStageMask-00078
Each element of pWaitDstStageMask must not include VK_PIPELINE_STAGE_HOST_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pWaitDstStageMask-00078)
VUID-VkSubmitInfo-pWaitDstStageMask-parameter
If waitSemaphoreCount is not 0, pWaitDstStageMask must be a valid pointer to an array of waitSemaphoreCount valid combinations of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pWaitDstStageMask-parameter)
VUID-VkSubmitInfo-pWaitDstStageMask-requiredbitmask
Each element of pWaitDstStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pWaitDstStageMask-requiredbitmask)
VUID-VkSubmitInfo-pWaitSemaphores-parameter
If waitSemaphoreCount is not 0, pWaitSemaphores must be a valid pointer to an array of waitSemaphoreCount valid VkSemaphore handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-pWaitSemaphores-parameter)
sType must be VK_STRUCTURE_TYPE_SUBMIT_INFO (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-sType-sType)
VUID-VkSubmitInfo-sType-unique
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubmitInfo-sType-unique)
contents must be a valid VkSubpassContents value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassBeginInfoKHR-contents-parameter)
VUID-VkSubpassBeginInfoKHR-contents-parameter
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassBeginInfoKHR-pNext-pNext)
VUID-VkSubpassBeginInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassBeginInfoKHR-sType-sType)
VUID-VkSubpassBeginInfoKHR-sType-sType
VUID-VkSubpassDependency-dependencyFlags-00870
If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, then both srcSubpass and dstSubpass must not equal VK_SUBPASS_EXTERNAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dependencyFlags-00870)
If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, then the render pass must have multiview enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dependencyFlags-00871)
VUID-VkSubpassDependency-dependencyFlags-00871
VUID-VkSubpassDependency-dependencyFlags-parameter
dependencyFlags must be a valid combination of VkDependencyFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dependencyFlags-parameter)
Any access flag included in dstAccessMask must be supported by one of the pipeline stages in dstStageMask, as specified in the table of supported access types. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dstAccessMask-00869)
VUID-VkSubpassDependency-dstAccessMask-00869
dstAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dstAccessMask-parameter)
VUID-VkSubpassDependency-dstAccessMask-parameter
If the geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dstStageMask-00861)
VUID-VkSubpassDependency-dstStageMask-00861
If the tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dstStageMask-00863)
VUID-VkSubpassDependency-dstStageMask-00863
dstStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dstStageMask-parameter)
VUID-VkSubpassDependency-dstStageMask-parameter
dstStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dstStageMask-requiredbitmask)
VUID-VkSubpassDependency-dstStageMask-requiredbitmask
If dstSubpass is not VK_SUBPASS_EXTERNAL, dstStageMask must not include VK_PIPELINE_STAGE_HOST_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-dstSubpass-00859)
VUID-VkSubpassDependency-dstSubpass-00859
Any access flag included in srcAccessMask must be supported by one of the pipeline stages in srcStageMask, as specified in the table of supported access types. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcAccessMask-00868)
VUID-VkSubpassDependency-srcAccessMask-00868
srcAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcAccessMask-parameter)
VUID-VkSubpassDependency-srcAccessMask-parameter
If the geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcStageMask-00860)
VUID-VkSubpassDependency-srcStageMask-00860
If the tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcStageMask-00862)
VUID-VkSubpassDependency-srcStageMask-00862
srcStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcStageMask-parameter)
VUID-VkSubpassDependency-srcStageMask-parameter
srcStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcStageMask-requiredbitmask)
VUID-VkSubpassDependency-srcStageMask-requiredbitmask
If srcSubpass is not VK_SUBPASS_EXTERNAL, srcStageMask must not include VK_PIPELINE_STAGE_HOST_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcSubpass-00858)
VUID-VkSubpassDependency-srcSubpass-00858
VUID-VkSubpassDependency-srcSubpass-00864
srcSubpass must be less than or equal to dstSubpass, unless one of them is VK_SUBPASS_EXTERNAL, to avoid cyclic dependencies and ensure a valid execution order (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcSubpass-00864)
srcSubpass and dstSubpass must not both be equal to VK_SUBPASS_EXTERNAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcSubpass-00865)
VUID-VkSubpassDependency-srcSubpass-00865
VUID-VkSubpassDependency-srcSubpass-00867
If srcSubpass is equal to dstSubpass and not all of the stages in srcStageMask and dstStageMask are framebuffer-space stages, the logically latest pipeline stage in srcStageMask must be logically earlier than or equal to the logically earliest pipeline stage in dstStageMask (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcSubpass-00867)
If srcSubpass equals dstSubpass and that subpass has more than one bit set in the view mask, then dependencyFlags must include VK_DEPENDENCY_VIEW_LOCAL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcSubpass-00872)
VUID-VkSubpassDependency-srcSubpass-00872
If srcSubpass is equal to dstSubpass, srcStageMask and dstStageMask must not set any bits that are not VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT, or not one of the graphics pipeline stages (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency-srcSubpass-01989)
VUID-VkSubpassDependency-srcSubpass-01989
If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, srcSubpass must not be equal to VK_SUBPASS_EXTERNAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dependencyFlags-03090)
VUID-VkSubpassDependency2KHR-dependencyFlags-03090
If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, dstSubpass must not be equal to VK_SUBPASS_EXTERNAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dependencyFlags-03091)
VUID-VkSubpassDependency2KHR-dependencyFlags-03091
VUID-VkSubpassDependency2KHR-dependencyFlags-03092
If dependencyFlags does not include VK_DEPENDENCY_VIEW_LOCAL_BIT, viewOffset must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dependencyFlags-03092)
VUID-VkSubpassDependency2KHR-dependencyFlags-parameter
dependencyFlags must be a valid combination of VkDependencyFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dependencyFlags-parameter)
Any access flag included in dstAccessMask must be supported by one of the pipeline stages in dstStageMask, as specified in the table of supported access types (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dstAccessMask-03089)
VUID-VkSubpassDependency2KHR-dstAccessMask-03089
dstAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dstAccessMask-parameter)
VUID-VkSubpassDependency2KHR-dstAccessMask-parameter
If the geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dstStageMask-03081)
VUID-VkSubpassDependency2KHR-dstStageMask-03081
If the tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dstStageMask-03083)
VUID-VkSubpassDependency2KHR-dstStageMask-03083
dstStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dstStageMask-parameter)
VUID-VkSubpassDependency2KHR-dstStageMask-parameter
dstStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dstStageMask-requiredbitmask)
VUID-VkSubpassDependency2KHR-dstStageMask-requiredbitmask
If dstSubpass is not VK_SUBPASS_EXTERNAL, dstStageMask must not include VK_PIPELINE_STAGE_HOST_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-dstSubpass-03079)
VUID-VkSubpassDependency2KHR-dstSubpass-03079
sType must be VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-sType-sType)
VUID-VkSubpassDependency2KHR-sType-sType
Any access flag included in srcAccessMask must be supported by one of the pipeline stages in srcStageMask, as specified in the table of supported access types (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcAccessMask-03088)
VUID-VkSubpassDependency2KHR-srcAccessMask-03088
srcAccessMask must be a valid combination of VkAccessFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcAccessMask-parameter)
VUID-VkSubpassDependency2KHR-srcAccessMask-parameter
If the geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcStageMask-03080)
VUID-VkSubpassDependency2KHR-srcStageMask-03080
If the tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcStageMask-03082)
VUID-VkSubpassDependency2KHR-srcStageMask-03082
srcStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcStageMask-parameter)
VUID-VkSubpassDependency2KHR-srcStageMask-parameter
srcStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcStageMask-requiredbitmask)
VUID-VkSubpassDependency2KHR-srcStageMask-requiredbitmask
If srcSubpass is not VK_SUBPASS_EXTERNAL, srcStageMask must not include VK_PIPELINE_STAGE_HOST_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcSubpass-03078)
VUID-VkSubpassDependency2KHR-srcSubpass-03078
VUID-VkSubpassDependency2KHR-srcSubpass-03084
srcSubpass must be less than or equal to dstSubpass, unless one of them is VK_SUBPASS_EXTERNAL, to avoid cyclic dependencies and ensure a valid execution order (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcSubpass-03084)
srcSubpass and dstSubpass must not both be equal to VK_SUBPASS_EXTERNAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcSubpass-03085)
VUID-VkSubpassDependency2KHR-srcSubpass-03085
VUID-VkSubpassDependency2KHR-srcSubpass-03086
If srcSubpass is equal to dstSubpass, srcStageMask and dstStageMask must only contain one of VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT, VK_PIPELINE_STAGE_VERTEX_INPUT_BIT, VK_PIPELINE_STAGE_VERTEX_SHADER_BIT, VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT, VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT, VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT, VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, or VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcSubpass-03086)
VUID-VkSubpassDependency2KHR-srcSubpass-03087
If srcSubpass is equal to dstSubpass and not all of the stages in srcStageMask and dstStageMask are framebuffer-space stages, the logically latest pipeline stage in srcStageMask must be logically earlier than or equal to the logically earliest pipeline stage in dstStageMask (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-srcSubpass-03087)
If viewOffset is not 0, srcSubpass must not be equal to dstSubpass. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDependency2KHR-viewOffset-03093)
VUID-VkSubpassDependency2KHR-viewOffset-03093
If any input attachments are VK_ATTACHMENT_UNUSED, then any pipelines bound during the subpass must not access those input attachments from the fragment shader (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-None-00852)
VUID-VkSubpassDescription-None-00852
The attachment member of each element of pPreserveAttachments must not be VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-attachment-00853)
VUID-VkSubpassDescription-attachment-00853
colorAttachmentCount must be less than or equal to VkPhysicalDeviceLimits::maxColorAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-colorAttachmentCount-00845)
VUID-VkSubpassDescription-colorAttachmentCount-00845
VUID-VkSubpassDescription-flags-00856
If flags includes VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX, it must also include VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-flags-00856)
flags must be a valid combination of VkSubpassDescriptionFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-flags-parameter)
VUID-VkSubpassDescription-flags-parameter
VUID-VkSubpassDescription-layout-00855
If any attachment is used as both an input attachment and a color or depth/stencil attachment, then each use must use the same layout (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-layout-00855)
VUID-VkSubpassDescription-loadOp-00846
If the first use of an attachment in this render pass is as an input attachment, and the attachment is not also used as a color or depth/stencil attachment in the same subpass, then loadOp must not be VK_ATTACHMENT_LOAD_OP_CLEAR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-loadOp-00846)
All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have the same sample count (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pColorAttachments-01417)
VUID-VkSubpassDescription-pColorAttachments-01417
VUID-VkSubpassDescription-pColorAttachments-01506
All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have a sample count that is smaller than or equal to the sample count of pDepthStencilAttachment if it is not VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pColorAttachments-01506)
If colorAttachmentCount is not 0, pColorAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pColorAttachments-parameter)
VUID-VkSubpassDescription-pColorAttachments-parameter
VUID-VkSubpassDescription-pDepthStencilAttachment-01418
If pDepthStencilAttachment is not VK_ATTACHMENT_UNUSED and any attachments in pColorAttachments are not VK_ATTACHMENT_UNUSED, they must have the same sample count (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pDepthStencilAttachment-01418)
VUID-VkSubpassDescription-pDepthStencilAttachment-parameter
If pDepthStencilAttachment is not NULL, pDepthStencilAttachment must be a valid pointer to a valid VkAttachmentReference structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pDepthStencilAttachment-parameter)
If inputAttachmentCount is not 0, pInputAttachments must be a valid pointer to an array of inputAttachmentCount valid VkAttachmentReference structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pInputAttachments-parameter)
VUID-VkSubpassDescription-pInputAttachments-parameter
VUID-VkSubpassDescription-pPreserveAttachments-00854
Each element of pPreserveAttachments must not also be an element of any other member of the subpass description (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pPreserveAttachments-00854)
VUID-VkSubpassDescription-pPreserveAttachments-parameter
If preserveAttachmentCount is not 0, pPreserveAttachments must be a valid pointer to an array of preserveAttachmentCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pPreserveAttachments-parameter)
VUID-VkSubpassDescription-pResolveAttachments-00847
If pResolveAttachments is not NULL, for each resolve attachment that does not have the value VK_ATTACHMENT_UNUSED, the corresponding color attachment must not have the value VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pResolveAttachments-00847)
VUID-VkSubpassDescription-pResolveAttachments-00848
If pResolveAttachments is not NULL, the sample count of each element of pColorAttachments must be anything other than VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pResolveAttachments-00848)
VUID-VkSubpassDescription-pResolveAttachments-00849
Each element of pResolveAttachments must have a sample count of VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pResolveAttachments-00849)
VUID-VkSubpassDescription-pResolveAttachments-00850
Each element of pResolveAttachments must have the same VkFormat as its corresponding color attachment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pResolveAttachments-00850)
VUID-VkSubpassDescription-pResolveAttachments-parameter
If colorAttachmentCount is not 0, and pResolveAttachments is not NULL, pResolveAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pResolveAttachments-parameter)
pipelineBindPoint must be VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pipelineBindPoint-00844)
VUID-VkSubpassDescription-pipelineBindPoint-00844
VUID-VkSubpassDescription-pipelineBindPoint-parameter
pipelineBindPoint must be a valid VkPipelineBindPoint value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription-pipelineBindPoint-parameter)
VUID-VkSubpassDescription2KHR-None-03072
If any input attachments are VK_ATTACHMENT_UNUSED, then any pipelines bound during the subpass must not access those input attachments from the fragment shader (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-None-03072)
The aspectMask member of any element of pInputAttachments must be a valid combination of VkImageAspectFlagBits (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-aspectMask-03175)
VUID-VkSubpassDescription2KHR-aspectMask-03175
The aspectMask member of any element of pInputAttachments must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-aspectMask-03176)
VUID-VkSubpassDescription2KHR-aspectMask-03176
The attachment member of any element of pPreserveAttachments must not be VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-attachment-03073)
VUID-VkSubpassDescription2KHR-attachment-03073
VUID-VkSubpassDescription2KHR-colorAttachmentCount-03063
colorAttachmentCount must be less than or equal to VkPhysicalDeviceLimits::maxColorAttachments (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-colorAttachmentCount-03063)
If flags includes VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX, it must also include VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-flags-03076)
VUID-VkSubpassDescription2KHR-flags-03076
flags must be a valid combination of VkSubpassDescriptionFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-flags-parameter)
VUID-VkSubpassDescription2KHR-flags-parameter
VUID-VkSubpassDescription2KHR-layout-03075
If any attachment is used as both an input attachment and a color or depth/stencil attachment, then each use must use the same layout (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-layout-03075)
VUID-VkSubpassDescription2KHR-loadOp-03064
If the first use of an attachment in this render pass is as an input attachment, and the attachment is not also used as a color or depth/stencil attachment in the same subpass, then loadOp must not be VK_ATTACHMENT_LOAD_OP_CLEAR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-loadOp-03064)
All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have the same sample count (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pColorAttachments-03069)
VUID-VkSubpassDescription2KHR-pColorAttachments-03069
VUID-VkSubpassDescription2KHR-pColorAttachments-03070
All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have a sample count that is smaller than or equal to the sample count of pDepthStencilAttachment if it is not VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pColorAttachments-03070)
If colorAttachmentCount is not 0, pColorAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pColorAttachments-parameter)
VUID-VkSubpassDescription2KHR-pColorAttachments-parameter
VUID-VkSubpassDescription2KHR-pDepthStencilAttachment-03071
If pDepthStencilAttachment is not VK_ATTACHMENT_UNUSED and any attachments in pColorAttachments are not VK_ATTACHMENT_UNUSED, they must have the same sample count (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pDepthStencilAttachment-03071)
VUID-VkSubpassDescription2KHR-pDepthStencilAttachment-parameter
If pDepthStencilAttachment is not NULL, pDepthStencilAttachment must be a valid pointer to a valid VkAttachmentReference2KHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pDepthStencilAttachment-parameter)
If inputAttachmentCount is not 0, pInputAttachments must be a valid pointer to an array of inputAttachmentCount valid VkAttachmentReference2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pInputAttachments-parameter)
VUID-VkSubpassDescription2KHR-pInputAttachments-parameter
VUID-VkSubpassDescription2KHR-pPreserveAttachments-03074
Any given element of pPreserveAttachments must not also be an element of any other member of the subpass description (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pPreserveAttachments-03074)
VUID-VkSubpassDescription2KHR-pPreserveAttachments-parameter
If preserveAttachmentCount is not 0, pPreserveAttachments must be a valid pointer to an array of preserveAttachmentCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pPreserveAttachments-parameter)
VUID-VkSubpassDescription2KHR-pResolveAttachments-03065
If pResolveAttachments is not NULL, for each resolve attachment that does not have the value VK_ATTACHMENT_UNUSED, the corresponding color attachment must not have the value VK_ATTACHMENT_UNUSED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pResolveAttachments-03065)
VUID-VkSubpassDescription2KHR-pResolveAttachments-03066
If pResolveAttachments is not NULL, the sample count of each element of pColorAttachments must be anything other than VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pResolveAttachments-03066)
VUID-VkSubpassDescription2KHR-pResolveAttachments-03067
Any given element of pResolveAttachments must have a sample count of VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pResolveAttachments-03067)
VUID-VkSubpassDescription2KHR-pResolveAttachments-03068
Any given element of pResolveAttachments must have the same VkFormat as its corresponding color attachment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pResolveAttachments-03068)
VUID-VkSubpassDescription2KHR-pResolveAttachments-parameter
If colorAttachmentCount is not 0, and pResolveAttachments is not NULL, pResolveAttachments must be a valid pointer to an array of colorAttachmentCount valid VkAttachmentReference2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pResolveAttachments-parameter)
pipelineBindPoint must be VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pipelineBindPoint-03062)
VUID-VkSubpassDescription2KHR-pipelineBindPoint-03062
VUID-VkSubpassDescription2KHR-pipelineBindPoint-parameter
pipelineBindPoint must be a valid VkPipelineBindPoint value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-pipelineBindPoint-parameter)
sType must be VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassDescription2KHR-sType-sType)
VUID-VkSubpassDescription2KHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassEndInfoKHR-pNext-pNext)
VUID-VkSubpassEndInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassEndInfoKHR-sType-sType)
VUID-VkSubpassEndInfoKHR-sType-sType
VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter
sampleLocationsInfo must be a valid VkSampleLocationsInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter)
VUID-VkSubpassSampleLocationsEXT-subpassIndex-01532
subpassIndex must be less than the subpassCount specified in VkRenderPassCreateInfo the render pass specified by VkRenderPassBeginInfo::renderPass was created with (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSubpassSampleLocationsEXT-subpassIndex-01532)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSurfaceCapabilities2EXT-pNext-pNext)
VUID-VkSurfaceCapabilities2EXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSurfaceCapabilities2EXT-sType-sType)
VUID-VkSurfaceCapabilities2EXT-sType-sType
VUID-VkSurfaceCapabilities2EXT-supportedSurfaceCounters-01246
supportedSurfaceCounters must not include VK_SURFACE_COUNTER_VBLANK_EXT unless the surface queried is a display surface. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSurfaceCapabilities2EXT-supportedSurfaceCounters-01246)
pNext must be NULL or a pointer to a valid instance of VkSharedPresentSurfaceCapabilitiesKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSurfaceCapabilities2KHR-pNext-pNext)
VUID-VkSurfaceCapabilities2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSurfaceCapabilities2KHR-sType-sType)
VUID-VkSurfaceCapabilities2KHR-sType-sType
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSurfaceFormat2KHR-pNext-pNext)
VUID-VkSurfaceFormat2KHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSurfaceFormat2KHR-sType-sType)
VUID-VkSurfaceFormat2KHR-sType-sType
sType must be VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCounterCreateInfoEXT-sType-sType)
VUID-VkSwapchainCounterCreateInfoEXT-sType-sType
VUID-VkSwapchainCounterCreateInfoEXT-surfaceCounters-01244
The bits in surfaceCounters must be supported by VkSwapchainCreateInfoKHR::surface, as reported by vkGetPhysicalDeviceSurfaceCapabilities2EXT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCounterCreateInfoEXT-surfaceCounters-01244)
surfaceCounters must be a valid combination of VkSurfaceCounterFlagBitsEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCounterCreateInfoEXT-surfaceCounters-parameter)
VUID-VkSwapchainCounterCreateInfoEXT-surfaceCounters-parameter
VUID-VkSwapchainCreateInfoKHR-commonparent
Both of oldSwapchain, and surface that are valid handles must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-commonparent)
compositeAlpha must be one of the bits present in the supportedCompositeAlpha member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-compositeAlpha-01280)
VUID-VkSwapchainCreateInfoKHR-compositeAlpha-01280
VUID-VkSwapchainCreateInfoKHR-compositeAlpha-parameter
compositeAlpha must be a valid VkCompositeAlphaFlagBitsKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-compositeAlpha-parameter)
flags must be a valid combination of VkSwapchainCreateFlagBitsKHR values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-flags-parameter)
VUID-VkSwapchainCreateInfoKHR-flags-parameter
VUID-VkSwapchainCreateInfoKHR-imageArrayLayers-01275
imageArrayLayers must be greater than 0 and less than or equal to the maxImageArrayLayers member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageArrayLayers-01275)
VUID-VkSwapchainCreateInfoKHR-imageColorSpace-parameter
imageColorSpace must be a valid VkColorSpaceKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageColorSpace-parameter)
VUID-VkSwapchainCreateInfoKHR-imageExtent-01274
imageExtent must be between minImageExtent and maxImageExtent, inclusive, where minImageExtent and maxImageExtent are members of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageExtent-01274)
VUID-VkSwapchainCreateInfoKHR-imageExtent-01689
imageExtent members width and height must both be non-zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageExtent-01689)
VUID-VkSwapchainCreateInfoKHR-imageFormat-01273
imageFormat and imageColorSpace must match the format and colorSpace members, respectively, of one of the VkSurfaceFormatKHR structures returned by vkGetPhysicalDeviceSurfaceFormatsKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageFormat-01273)
imageFormat, imageUsage, imageExtent, and imageArrayLayers must be supported for VK_IMAGE_TYPE_2D VK_IMAGE_TILING_OPTIMAL images as reported by vkGetPhysicalDeviceImageFormatProperties. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageFormat-01778)
VUID-VkSwapchainCreateInfoKHR-imageFormat-01778
VUID-VkSwapchainCreateInfoKHR-imageFormat-parameter
imageFormat must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageFormat-parameter)
VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01277
If imageSharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a valid pointer to an array of queueFamilyIndexCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01277)
VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01278
If imageSharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01278)
VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01393
If imageSharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the physicalDevice that was used to create device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01393)
VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01428
If imageSharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than pQueueFamilyPropertyCount returned by either vkGetPhysicalDeviceQueueFamilyProperties or vkGetPhysicalDeviceQueueFamilyProperties2 for the physicalDevice that was used to create device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01428)
imageSharingMode must be a valid VkSharingMode value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageSharingMode-parameter)
VUID-VkSwapchainCreateInfoKHR-imageSharingMode-parameter
imageUsage must be a subset of the supported usage flags present in the supportedUsageFlags member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageUsage-01276)
VUID-VkSwapchainCreateInfoKHR-imageUsage-01276
VUID-VkSwapchainCreateInfoKHR-imageUsage-01384
If presentMode is VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR or VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR, imageUsage must be a subset of the supported usage flags present in the sharedPresentSupportedUsageFlags member of the VkSharedPresentSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilities2KHR for surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageUsage-01384)
VUID-VkSwapchainCreateInfoKHR-imageUsage-parameter
imageUsage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageUsage-parameter)
imageUsage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-imageUsage-requiredbitmask)
VUID-VkSwapchainCreateInfoKHR-imageUsage-requiredbitmask
VUID-VkSwapchainCreateInfoKHR-minImageCount-01271
minImageCount must be greater than or equal to the value returned in the minImageCount member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-minImageCount-01271)
minImageCount must be less than or equal to the value returned in the maxImageCount member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface if the returned maxImageCount is not zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-minImageCount-01272)
VUID-VkSwapchainCreateInfoKHR-minImageCount-01272
VUID-VkSwapchainCreateInfoKHR-minImageCount-01383
minImageCount must be 1 if presentMode is either VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR or VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-minImageCount-01383)
VUID-VkSwapchainCreateInfoKHR-oldSwapchain-01933
If oldSwapchain is not VK_NULL_HANDLE, oldSwapchain must be a non-retired swapchain associated with native window referred to by surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-oldSwapchain-01933)
If oldSwapchain is not VK_NULL_HANDLE, oldSwapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-oldSwapchain-parameter)
VUID-VkSwapchainCreateInfoKHR-oldSwapchain-parameter
If oldSwapchain is a valid handle, it must have been created, allocated, or retrieved from surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-oldSwapchain-parent)
VUID-VkSwapchainCreateInfoKHR-oldSwapchain-parent
VUID-VkSwapchainCreateInfoKHR-pNext-pNext
Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkDeviceGroupSwapchainCreateInfoKHR or VkSwapchainCounterCreateInfoEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-pNext-pNext)
VUID-VkSwapchainCreateInfoKHR-physicalDeviceCount-01429
If the logical device was created with VkDeviceGroupDeviceCreateInfo::physicalDeviceCount equal to 1, flags must not contain VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-physicalDeviceCount-01429)
VUID-VkSwapchainCreateInfoKHR-preTransform-01279
preTransform must be one of the bits present in the supportedTransforms member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-preTransform-01279)
preTransform must be a valid VkSurfaceTransformFlagBitsKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-preTransform-parameter)
VUID-VkSwapchainCreateInfoKHR-preTransform-parameter
presentMode must be one of the VkPresentModeKHR values returned by vkGetPhysicalDeviceSurfacePresentModesKHR for the surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-presentMode-01281)
VUID-VkSwapchainCreateInfoKHR-presentMode-01281
VUID-VkSwapchainCreateInfoKHR-presentMode-01427
If presentMode is VK_PRESENT_MODE_IMMEDIATE_KHR, VK_PRESENT_MODE_MAILBOX_KHR, VK_PRESENT_MODE_FIFO_KHR or VK_PRESENT_MODE_FIFO_RELAXED_KHR, imageUsage must be a subset of the supported usage flags present in the supportedUsageFlags member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-presentMode-01427)
presentMode must be a valid VkPresentModeKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-presentMode-parameter)
VUID-VkSwapchainCreateInfoKHR-presentMode-parameter
sType must be VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-sType-sType)
VUID-VkSwapchainCreateInfoKHR-sType-sType
Each sType member in the pNext chain must be unique (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-sType-unique)
VUID-VkSwapchainCreateInfoKHR-sType-unique
VUID-VkSwapchainCreateInfoKHR-surface-01270
surface must be a surface that is supported by the device as determined using vkGetPhysicalDeviceSurfaceSupportKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-surface-01270)
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkSwapchainCreateInfoKHR-surface-parameter)
VUID-VkSwapchainCreateInfoKHR-surface-parameter
VUID-VkValidationCacheCreateInfoEXT-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationCacheCreateInfoEXT-flags-zerobitmask)
VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01534
If initialDataSize is not 0, it must be equal to the size of pInitialData, as returned by vkGetValidationCacheDataEXT when pInitialData was originally retrieved (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01534)
If initialDataSize is not 0, pInitialData must have been retrieved from a previous call to vkGetValidationCacheDataEXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01535)
VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01535
VUID-VkValidationCacheCreateInfoEXT-pInitialData-parameter
If initialDataSize is not 0, pInitialData must be a valid pointer to an array of initialDataSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationCacheCreateInfoEXT-pInitialData-parameter)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationCacheCreateInfoEXT-pNext-pNext)
VUID-VkValidationCacheCreateInfoEXT-pNext-pNext
sType must be VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationCacheCreateInfoEXT-sType-sType)
VUID-VkValidationCacheCreateInfoEXT-sType-sType
disabledValidationCheckCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationFlagsEXT-disabledValidationCheckCount-arraylength)
VUID-VkValidationFlagsEXT-disabledValidationCheckCount-arraylength
VUID-VkValidationFlagsEXT-pDisabledValidationChecks-parameter
pDisabledValidationChecks must be a valid pointer to an array of disabledValidationCheckCount valid VkValidationCheckEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationFlagsEXT-pDisabledValidationChecks-parameter)
sType must be VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkValidationFlagsEXT-sType-sType)
VUID-VkValidationFlagsEXT-sType-sType
VUID-VkVertexInputAttributeDescription-binding-00621
binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputAttributeDescription-binding-00621)
VUID-VkVertexInputAttributeDescription-format-00623
format must be allowed as a vertex buffer format, as specified by the VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputAttributeDescription-format-00623)
VUID-VkVertexInputAttributeDescription-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputAttributeDescription-format-parameter)
location must be less than VkPhysicalDeviceLimits::maxVertexInputAttributes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputAttributeDescription-location-00620)
VUID-VkVertexInputAttributeDescription-location-00620
VUID-VkVertexInputAttributeDescription-offset-00622
offset must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputAttributeOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputAttributeDescription-offset-00622)
VUID-VkVertexInputBindingDescription-binding-00618
binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputBindingDescription-binding-00618)
inputRate must be a valid VkVertexInputRate value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputBindingDescription-inputRate-parameter)
VUID-VkVertexInputBindingDescription-inputRate-parameter
stride must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindingStride (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputBindingDescription-stride-00619)
VUID-VkVertexInputBindingDescription-stride-00619
VUID-VkVertexInputBindingDivisorDescriptionEXT-binding-01869
binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputBindingDivisorDescriptionEXT-binding-01869)
VUID-VkVertexInputBindingDivisorDescriptionEXT-divisor-01870
divisor must be a value between 1 and VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::maxVertexAttribDivisor, inclusive. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputBindingDivisorDescriptionEXT-divisor-01870)
VkVertexInputBindingDescription::inputRate must be of type VK_VERTEX_INPUT_RATE_INSTANCE for this binding. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkVertexInputBindingDivisorDescriptionEXT-inputRate-01871)
VUID-VkVertexInputBindingDivisorDescriptionEXT-inputRate-01871
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViSurfaceCreateInfoNN-flags-zerobitmask)
VUID-VkViSurfaceCreateInfoNN-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViSurfaceCreateInfoNN-pNext-pNext)
VUID-VkViSurfaceCreateInfoNN-pNext-pNext
sType must be VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViSurfaceCreateInfoNN-sType-sType)
VUID-VkViSurfaceCreateInfoNN-sType-sType
window must be a valid nn::vi::NativeWindowHandle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViSurfaceCreateInfoNN-window-01318)
VUID-VkViSurfaceCreateInfoNN-window-01318
height must be greater than 0.0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-height-01772)
The absolute value of height must be less than or equal to VkPhysicalDeviceLimits::maxViewportDimensions[1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-height-01773)
maxDepth must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-maxDepth-01235)
VUID-VkViewport-maxDepth-01235
VUID-VkViewport-maxDepth-01235[!(VK_EXT_depth_range_unrestricted)]
Unless VK_EXT_depth_range_unrestricted extension is enabled maxDepth must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-maxDepth-01235)
VUID-VkViewport-maxDepth-01235[(VK_EXT_depth_range_unrestricted)]
minDepth must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-minDepth-01234)
VUID-VkViewport-minDepth-01234
VUID-VkViewport-minDepth-01234[!(VK_EXT_depth_range_unrestricted)]
Unless VK_EXT_depth_range_unrestricted extension is enabled minDepth must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-minDepth-01234)
VUID-VkViewport-minDepth-01234[(VK_EXT_depth_range_unrestricted)]
width must be greater than 0.0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-width-01770)
width must be less than or equal to VkPhysicalDeviceLimits::maxViewportDimensions[0] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-width-01771)
(x + width) must be less than or equal to viewportBoundsRange[1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-x-01232)
x must be greater than or equal to viewportBoundsRange[0] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-x-01774)
(y + height) must be less than or equal to viewportBoundsRange[1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-y-01233)
y must be greater than or equal to viewportBoundsRange[0] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-y-01775)
y must be less than or equal to viewportBoundsRange[1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-y-01776)
(y + height) must be greater than or equal to viewportBoundsRange[0] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewport-y-01777)
w must be a valid VkViewportCoordinateSwizzleNV value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewportSwizzleNV-w-parameter)
VUID-VkViewportSwizzleNV-w-parameter
x must be a valid VkViewportCoordinateSwizzleNV value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewportSwizzleNV-x-parameter)
VUID-VkViewportSwizzleNV-x-parameter
y must be a valid VkViewportCoordinateSwizzleNV value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewportSwizzleNV-y-parameter)
VUID-VkViewportSwizzleNV-y-parameter
z must be a valid VkViewportCoordinateSwizzleNV value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkViewportSwizzleNV-z-parameter)
VUID-VkViewportSwizzleNV-z-parameter
display must point to a valid Wayland wl_display. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWaylandSurfaceCreateInfoKHR-display-01304)
VUID-VkWaylandSurfaceCreateInfoKHR-display-01304
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWaylandSurfaceCreateInfoKHR-flags-zerobitmask)
VUID-VkWaylandSurfaceCreateInfoKHR-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWaylandSurfaceCreateInfoKHR-pNext-pNext)
VUID-VkWaylandSurfaceCreateInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWaylandSurfaceCreateInfoKHR-sType-sType)
VUID-VkWaylandSurfaceCreateInfoKHR-sType-sType
surface must point to a valid Wayland wl_surface. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWaylandSurfaceCreateInfoKHR-surface-01305)
VUID-VkWaylandSurfaceCreateInfoKHR-surface-01305
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-commonparent
Both of the elements of pAcquireSyncs, and the elements of pReleaseSyncs that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-commonparent)
If acquireCount is not 0, pAcquireKeys must be a valid pointer to an array of acquireCount uint64_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireKeys-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireKeys-parameter
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireSyncs-00081
Each member of pAcquireSyncs and pReleaseSyncs must be a device memory object imported by setting VkImportMemoryWin32HandleInfoKHR::handleType to VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireSyncs-00081)
If acquireCount is not 0, pAcquireSyncs must be a valid pointer to an array of acquireCount valid VkDeviceMemory handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireSyncs-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireSyncs-parameter
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireTimeouts-parameter
If acquireCount is not 0, pAcquireTimeouts must be a valid pointer to an array of acquireCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pAcquireTimeouts-parameter)
If releaseCount is not 0, pReleaseKeys must be a valid pointer to an array of releaseCount uint64_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pReleaseKeys-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pReleaseKeys-parameter
If releaseCount is not 0, pReleaseSyncs must be a valid pointer to an array of releaseCount valid VkDeviceMemory handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pReleaseSyncs-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-pReleaseSyncs-parameter
sType must be VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-sType-sType)
VUID-VkWin32KeyedMutexAcquireReleaseInfoKHR-sType-sType
VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-commonparent
Both of the elements of pAcquireSyncs, and the elements of pReleaseSyncs that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-commonparent)
If acquireCount is not 0, pAcquireKeys must be a valid pointer to an array of acquireCount uint64_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireKeys-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireKeys-parameter
If acquireCount is not 0, pAcquireSyncs must be a valid pointer to an array of acquireCount valid VkDeviceMemory handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireSyncs-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireSyncs-parameter
VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireTimeoutMilliseconds-parameter
If acquireCount is not 0, pAcquireTimeoutMilliseconds must be a valid pointer to an array of acquireCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pAcquireTimeoutMilliseconds-parameter)
If releaseCount is not 0, pReleaseKeys must be a valid pointer to an array of releaseCount uint64_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pReleaseKeys-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pReleaseKeys-parameter
If releaseCount is not 0, pReleaseSyncs must be a valid pointer to an array of releaseCount valid VkDeviceMemory handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pReleaseSyncs-parameter)
VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-pReleaseSyncs-parameter
sType must be VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-sType-sType)
VUID-VkWin32KeyedMutexAcquireReleaseInfoNV-sType-sType
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32SurfaceCreateInfoKHR-flags-zerobitmask)
VUID-VkWin32SurfaceCreateInfoKHR-flags-zerobitmask
VUID-VkWin32SurfaceCreateInfoKHR-hinstance-01307
hinstance must be a valid Win32 HINSTANCE. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32SurfaceCreateInfoKHR-hinstance-01307)
VUID-VkWin32SurfaceCreateInfoKHR-hwnd-01308
hwnd must be a valid Win32 HWND. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32SurfaceCreateInfoKHR-hwnd-01308)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32SurfaceCreateInfoKHR-pNext-pNext)
VUID-VkWin32SurfaceCreateInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWin32SurfaceCreateInfoKHR-sType-sType)
VUID-VkWin32SurfaceCreateInfoKHR-sType-sType
VUID-VkWriteDescriptorSet-commonparent
Both of dstSet, and the elements of pTexelBufferView that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-commonparent)
VUID-VkWriteDescriptorSet-descriptorCount-00317
All consecutive bindings updated via a single VkWriteDescriptorSet structure, except those with a descriptorCount of zero, must have identical descriptorType and stageFlags. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorCount-00317)
All consecutive bindings updated via a single VkWriteDescriptorSet structure, except those with a descriptorCount of zero, must all either use immutable samplers or must all not use immutable samplers. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorCount-00318)
VUID-VkWriteDescriptorSet-descriptorCount-00318
VUID-VkWriteDescriptorSet-descriptorCount-03048
All consecutive bindings updated via a single VkWriteDescriptorSet structure, except those with a descriptorCount of zero, must have identical VkDescriptorBindingFlagBitsEXT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorCount-03048)
descriptorCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorCount-arraylength)
VUID-VkWriteDescriptorSet-descriptorCount-arraylength
descriptorType must match the type of dstBinding within dstSet (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00319)
VUID-VkWriteDescriptorSet-descriptorType-00319
VUID-VkWriteDescriptorSet-descriptorType-00322
If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, pImageInfo must be a valid pointer to an array of descriptorCount valid VkDescriptorImageInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00322)
VUID-VkWriteDescriptorSet-descriptorType-00323
If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, pTexelBufferView must be a valid pointer to an array of descriptorCount valid VkBufferView handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00323)
VUID-VkWriteDescriptorSet-descriptorType-00324
If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, pBufferInfo must be a valid pointer to an array of descriptorCount valid VkDescriptorBufferInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00324)
VUID-VkWriteDescriptorSet-descriptorType-00325
If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and dstSet was not allocated with a layout that included immutable samplers for dstBinding with descriptorType, the sampler member of each element of pImageInfo must be a valid VkSampler object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00325)
VUID-VkWriteDescriptorSet-descriptorType-00326
If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView and imageLayout members of each element of pImageInfo must be a valid VkImageView and VkImageLayout, respectively (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00326)
If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the offset member of each element of pBufferInfo must be a multiple of VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00327)
VUID-VkWriteDescriptorSet-descriptorType-00327
If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the offset member of each element of pBufferInfo must be a multiple of VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00328)
VUID-VkWriteDescriptorSet-descriptorType-00328
VUID-VkWriteDescriptorSet-descriptorType-00329
If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, and the buffer member of any element of pBufferInfo is the handle of a non-sparse buffer, then that buffer must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00329)
If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00330)
VUID-VkWriteDescriptorSet-descriptorType-00330
If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00331)
VUID-VkWriteDescriptorSet-descriptorType-00331
If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the range member of each element of pBufferInfo, or the effective range if range is VK_WHOLE_SIZE, must be less than or equal to VkPhysicalDeviceLimits::maxUniformBufferRange (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00332)
VUID-VkWriteDescriptorSet-descriptorType-00332
If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the range member of each element of pBufferInfo, or the effective range if range is VK_WHOLE_SIZE, must be less than or equal to VkPhysicalDeviceLimits::maxStorageBufferRange (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00333)
VUID-VkWriteDescriptorSet-descriptorType-00333
If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, the VkBuffer that each element of pTexelBufferView was created from must have been created with VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00334)
VUID-VkWriteDescriptorSet-descriptorType-00334
If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, the VkBuffer that each element of pTexelBufferView was created from must have been created with VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00335)
VUID-VkWriteDescriptorSet-descriptorType-00335
VUID-VkWriteDescriptorSet-descriptorType-00336
If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView member of each element of pImageInfo must have been created with the identity swizzle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00336)
VUID-VkWriteDescriptorSet-descriptorType-00337
If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, the imageView member of each element of pImageInfo must have been created with VK_IMAGE_USAGE_SAMPLED_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00337)
VUID-VkWriteDescriptorSet-descriptorType-00338
If descriptorType is VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView member of each element of pImageInfo must have been created with VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00338)
VUID-VkWriteDescriptorSet-descriptorType-00339
If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, the imageView member of each element of pImageInfo must have been created with VK_IMAGE_USAGE_STORAGE_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-00339)
VUID-VkWriteDescriptorSet-descriptorType-01402
If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, for each descriptor that will be accessed via load or store operations the imageLayout member for corresponding elements of pImageInfo must be VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-01402)
VUID-VkWriteDescriptorSet-descriptorType-01403
If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, the imageLayout member of each element of pImageInfo must be VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-01403)
VUID-VkWriteDescriptorSet-descriptorType-01946
If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, then the imageView member of each pImageInfo element must have been created without a VkSamplerYcbcrConversionInfo structure in its pNext chain (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-01946)
VUID-VkWriteDescriptorSet-descriptorType-01947
If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and if any element of pImageInfo has a imageView member that was created with a VkSamplerYcbcrConversionInfo structure in its pNext chain, then dstSet must have been allocated with a layout that included immutable samplers for dstBinding (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-01947)
VUID-VkWriteDescriptorSet-descriptorType-01948
If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and dstSet was allocated with a layout that included immutable samplers for dstBinding, then the imageView member of each element of pImageInfo which corresponds to a immutable sampler that enables sampler Y'CBCR conversion must have been created with a VkSamplerYcbcrConversionInfo structure in its pNext chain with an identically defined VkSamplerYcbcrConversionInfo to the corresponding immutable sampler (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-01948)
VUID-VkWriteDescriptorSet-descriptorType-parameter
descriptorType must be a valid VkDescriptorType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-descriptorType-parameter)
VUID-VkWriteDescriptorSet-dstArrayElement-00321
The sum of dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by dstBinding, and all applicable consecutive bindings, as described by consecutive binding updates (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-dstArrayElement-00321)
VUID-VkWriteDescriptorSet-dstBinding-00315
dstBinding must be less than or equal to the maximum value of binding of all VkDescriptorSetLayoutBinding structures specified when dstSet's descriptor set layout was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-dstBinding-00315)
dstBinding must be a binding with a non-zero descriptorCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-dstBinding-00316)
VUID-VkWriteDescriptorSet-dstBinding-00316
VUID-VkWriteDescriptorSet-dstSet-00320
dstSet must be a valid VkDescriptorSet handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-dstSet-00320)
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-pNext-pNext)
VUID-VkWriteDescriptorSet-pNext-pNext
sType must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkWriteDescriptorSet-sType-sType)
VUID-VkWriteDescriptorSet-sType-sType
connection must point to a valid X11 xcb_connection_t. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXcbSurfaceCreateInfoKHR-connection-01310)
VUID-VkXcbSurfaceCreateInfoKHR-connection-01310
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXcbSurfaceCreateInfoKHR-flags-zerobitmask)
VUID-VkXcbSurfaceCreateInfoKHR-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXcbSurfaceCreateInfoKHR-pNext-pNext)
VUID-VkXcbSurfaceCreateInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXcbSurfaceCreateInfoKHR-sType-sType)
VUID-VkXcbSurfaceCreateInfoKHR-sType-sType
VUID-VkXcbSurfaceCreateInfoKHR-window-01311
window must be a valid X11 xcb_window_t. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXcbSurfaceCreateInfoKHR-window-01311)
dpy must point to a valid Xlib Display. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXlibSurfaceCreateInfoKHR-dpy-01313)
VUID-VkXlibSurfaceCreateInfoKHR-dpy-01313
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXlibSurfaceCreateInfoKHR-flags-zerobitmask)
VUID-VkXlibSurfaceCreateInfoKHR-flags-zerobitmask
pNext must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXlibSurfaceCreateInfoKHR-pNext-pNext)
VUID-VkXlibSurfaceCreateInfoKHR-pNext-pNext
sType must be VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXlibSurfaceCreateInfoKHR-sType-sType)
VUID-VkXlibSurfaceCreateInfoKHR-sType-sType
VUID-VkXlibSurfaceCreateInfoKHR-window-01314
window must be a valid Xlib Window. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-VkXlibSurfaceCreateInfoKHR-window-01314)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImage2KHR-device-parameter)
VUID-vkAcquireNextImage2KHR-device-parameter
pAcquireInfo must be a valid pointer to a valid VkAcquireNextImageInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImage2KHR-pAcquireInfo-parameter)
VUID-vkAcquireNextImage2KHR-pAcquireInfo-parameter
VUID-vkAcquireNextImage2KHR-pImageIndex-parameter
pImageIndex must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImage2KHR-pImageIndex-parameter)
VUID-vkAcquireNextImage2KHR-swapchain-01803
If the number of currently acquired images is greater than the difference between the number of images in the swapchain member of pAcquireInfo and the value of VkSurfaceCapabilitiesKHR::minImageCount as returned by a call to vkGetPhysicalDeviceSurfaceCapabilities2KHR with the surface used to create swapchain, the timeout member of pAcquireInfo must not be UINT64_MAX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImage2KHR-swapchain-01803)
Both of device, and swapchain that are valid handles must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-commonparent)
VUID-vkAcquireNextImageKHR-commonparent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-device-parameter)
VUID-vkAcquireNextImageKHR-device-parameter
VUID-vkAcquireNextImageKHR-fence-01287
If fence is not VK_NULL_HANDLE it must be unsignaled and must not be associated with any other queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-fence-01287)
If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-fence-parameter)
VUID-vkAcquireNextImageKHR-fence-parameter
VUID-vkAcquireNextImageKHR-fence-parent
If fence is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-fence-parent)
VUID-vkAcquireNextImageKHR-pImageIndex-parameter
pImageIndex must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-pImageIndex-parameter)
VUID-vkAcquireNextImageKHR-semaphore-01286
If semaphore is not VK_NULL_HANDLE it must be unsignaled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-semaphore-01286)
VUID-vkAcquireNextImageKHR-semaphore-01779
If semaphore is not VK_NULL_HANDLE it must not have any uncompleted signal or wait operations pending (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-semaphore-01779)
semaphore and fence must not both be equal to VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
VUID-vkAcquireNextImageKHR-semaphore-01780
If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-semaphore-parameter)
VUID-vkAcquireNextImageKHR-semaphore-parameter
If semaphore is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-semaphore-parent)
VUID-vkAcquireNextImageKHR-semaphore-parent
swapchain must not be in the retired state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-swapchain-01285)
VUID-vkAcquireNextImageKHR-swapchain-01285
VUID-vkAcquireNextImageKHR-swapchain-01802
If the number of currently acquired images is greater than the difference between the number of images in swapchain and the value of VkSurfaceCapabilitiesKHR::minImageCount as returned by a call to vkGetPhysicalDeviceSurfaceCapabilities2KHR with the surface used to create swapchain, timeout must not be UINT64_MAX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-swapchain-01802)
VUID-vkAcquireNextImageKHR-swapchain-parameter
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireNextImageKHR-swapchain-parameter)
display must be a valid VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireXlibDisplayEXT-display-parameter)
VUID-vkAcquireXlibDisplayEXT-display-parameter
VUID-vkAcquireXlibDisplayEXT-dpy-parameter
dpy must be a valid pointer to a Display value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireXlibDisplayEXT-dpy-parameter)
VUID-vkAcquireXlibDisplayEXT-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAcquireXlibDisplayEXT-physicalDevice-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateCommandBuffers-device-parameter)
VUID-vkAllocateCommandBuffers-device-parameter
pAllocateInfo must be a valid pointer to a valid VkCommandBufferAllocateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateCommandBuffers-pAllocateInfo-parameter)
VUID-vkAllocateCommandBuffers-pAllocateInfo-parameter
pCommandBuffers must be a valid pointer to an array of pAllocateInfo::commandBufferCount VkCommandBuffer handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateCommandBuffers-pCommandBuffers-parameter)
VUID-vkAllocateCommandBuffers-pCommandBuffers-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateDescriptorSets-device-parameter)
VUID-vkAllocateDescriptorSets-device-parameter
pAllocateInfo must be a valid pointer to a valid VkDescriptorSetAllocateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateDescriptorSets-pAllocateInfo-parameter)
VUID-vkAllocateDescriptorSets-pAllocateInfo-parameter
pDescriptorSets must be a valid pointer to an array of pAllocateInfo::descriptorSetCount VkDescriptorSet handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateDescriptorSets-pDescriptorSets-parameter)
VUID-vkAllocateDescriptorSets-pDescriptorSets-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateMemory-device-parameter)
VUID-vkAllocateMemory-device-parameter
VUID-vkAllocateMemory-pAllocateInfo-01713
pAllocateInfo->allocationSize must be less than or equal to VkPhysicalDeviceMemoryProperties::memoryHeaps[pAllocateInfo->memoryTypeIndex].size as returned by vkGetPhysicalDeviceMemoryProperties for the VkPhysicalDevice that device was created from. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateMemory-pAllocateInfo-01713)
VUID-vkAllocateMemory-pAllocateInfo-01714
pAllocateInfo->memoryTypeIndex must be less than VkPhysicalDeviceMemoryProperties::memoryTypeCount as returned by vkGetPhysicalDeviceMemoryProperties for the VkPhysicalDevice that device was created from. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateMemory-pAllocateInfo-01714)
pAllocateInfo must be a valid pointer to a valid VkMemoryAllocateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateMemory-pAllocateInfo-parameter)
VUID-vkAllocateMemory-pAllocateInfo-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateMemory-pAllocator-parameter)
VUID-vkAllocateMemory-pAllocator-parameter
VUID-vkAllocateMemory-pMemory-parameter
pMemory must be a valid pointer to a VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkAllocateMemory-pMemory-parameter)
commandBuffer must not be in the recording or pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00049)
VUID-vkBeginCommandBuffer-commandBuffer-00049
VUID-vkBeginCommandBuffer-commandBuffer-00050
If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00050)
VUID-vkBeginCommandBuffer-commandBuffer-00051
If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00051)
VUID-vkBeginCommandBuffer-commandBuffer-00052
If commandBuffer is a secondary command buffer and either the occlusionQueryEnable member of the pInheritanceInfo member of pBeginInfo is VK_FALSE, or the precise occlusion queries feature is not enabled, the queryFlags member of the pInheritanceInfo member pBeginInfo must not contain VK_QUERY_CONTROL_PRECISE_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-00052)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-commandBuffer-parameter)
VUID-vkBeginCommandBuffer-commandBuffer-parameter
pBeginInfo must be a valid pointer to a valid VkCommandBufferBeginInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBeginCommandBuffer-pBeginInfo-parameter)
VUID-vkBeginCommandBuffer-pBeginInfo-parameter
If buffer was created with the VK_BUFFER_CREATE_PROTECTED_BIT bit set, the buffer must be bound to a memory object allocated with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-None-01898)
VUID-vkBindBufferMemory-None-01898
If buffer was created with the VK_BUFFER_CREATE_PROTECTED_BIT bit not set, the buffer must not be bound to a memory object created with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-None-01899)
VUID-vkBindBufferMemory-None-01899
buffer must not already be backed by a memory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-buffer-01029)
VUID-vkBindBufferMemory-buffer-01029
VUID-vkBindBufferMemory-buffer-01030
buffer must not have been created with any sparse memory binding flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-buffer-01030)
VUID-vkBindBufferMemory-buffer-01038
If buffer was created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::buffer equal to a buffer handle created with identical creation parameters to buffer and memoryOffset must be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-buffer-01038)
VUID-vkBindBufferMemory-buffer-01039
If buffer was not created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-buffer-01039)
VUID-vkBindBufferMemory-buffer-01444
If buffer requires a dedicated allocation(as reported by vkGetBufferMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for buffer), memory must have been created with VkMemoryDedicatedAllocateInfo::buffer equal to buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-buffer-01444)
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-buffer-parameter)
VUID-vkBindBufferMemory-buffer-parameter
buffer must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-buffer-parent)
VUID-vkBindBufferMemory-buffer-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-device-parameter)
VUID-vkBindBufferMemory-device-parameter
VUID-vkBindBufferMemory-memory-01035
memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-memory-01035)
VUID-vkBindBufferMemory-memory-01508
If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::buffer was not VK_NULL_HANDLE, then buffer must equal VkMemoryDedicatedAllocateInfo::buffer, and memoryOffset must be zero. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-memory-01508)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-memory-parameter)
VUID-vkBindBufferMemory-memory-parameter
memory must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-memory-parent)
VUID-vkBindBufferMemory-memory-parent
memoryOffset must be less than the size of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-memoryOffset-01031)
VUID-vkBindBufferMemory-memoryOffset-01031
VUID-vkBindBufferMemory-memoryOffset-01036
memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-memoryOffset-01036)
The size member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer must be less than or equal to the size of memory minus memoryOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory-size-01037)
VUID-vkBindBufferMemory-size-01037
VUID-vkBindBufferMemory2-bindInfoCount-arraylength
bindInfoCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory2-bindInfoCount-arraylength)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory2-device-parameter)
VUID-vkBindBufferMemory2-device-parameter
pBindInfos must be a valid pointer to an array of bindInfoCount valid VkBindBufferMemoryInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindBufferMemory2-pBindInfos-parameter)
VUID-vkBindBufferMemory2-pBindInfos-parameter
If image was created with the VK_IMAGE_CREATE_PROTECTED_BIT bit set, the image must be bound to a memory object allocated with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-None-01901)
VUID-vkBindImageMemory-None-01901
VUID-vkBindImageMemory-None-01902
If image was created with the VK_IMAGE_CREATE_PROTECTED_BIT bit not set, the image must not be bound to a memory object created with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-None-01902)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-device-parameter)
VUID-vkBindImageMemory-device-parameter
image must not already be backed by a memory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-01044)
VUID-vkBindImageMemory-image-01044
VUID-vkBindImageMemory-image-01045
image must not have been created with any sparse memory binding flags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-01045)
VUID-vkBindImageMemory-image-01050
If image was created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::image equal to an image handle created with identical creation parameters to image and memoryOffset must be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-01050)
If image was not created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-01051)
VUID-vkBindImageMemory-image-01051
VUID-vkBindImageMemory-image-01445
If image requires a dedicated allocation (as reported by vkGetImageMemoryRequirements2 in VkMemoryDedicatedRequirements::requiresDedicatedAllocation for image), memory must have been created with VkMemoryDedicatedAllocateInfo::image equal to image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-01445)
VUID-vkBindImageMemory-image-01608
image must not have been created with the VK_IMAGE_CREATE_DISJOINT_BIT set. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-01608)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-parameter)
VUID-vkBindImageMemory-image-parameter
VUID-vkBindImageMemory-image-parent
image must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-image-parent)
VUID-vkBindImageMemory-memory-01047
memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-memory-01047)
VUID-vkBindImageMemory-memory-01509
If the VkMemoryAllocateInfo provided when memory was allocated included an instance of VkMemoryDedicatedAllocateInfo in its pNext chain, and VkMemoryDedicatedAllocateInfo::image was not VK_NULL_HANDLE, then image must equal VkMemoryDedicatedAllocateInfo::image and memoryOffset must be zero. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-memory-01509)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-memory-parameter)
VUID-vkBindImageMemory-memory-parameter
memory must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-memory-parent)
VUID-vkBindImageMemory-memory-parent
memoryOffset must be less than the size of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-memoryOffset-01046)
VUID-vkBindImageMemory-memoryOffset-01046
VUID-vkBindImageMemory-memoryOffset-01048
memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-memoryOffset-01048)
The size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image must be less than or equal to the size of memory minus memoryOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory-size-01049)
VUID-vkBindImageMemory-size-01049
bindInfoCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory2-bindInfoCount-arraylength)
VUID-vkBindImageMemory2-bindInfoCount-arraylength
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory2-device-parameter)
VUID-vkBindImageMemory2-device-parameter
VUID-vkBindImageMemory2-pBindInfos-parameter
pBindInfos must be a valid pointer to an array of bindInfoCount valid VkBindImageMemoryInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkBindImageMemory2-pBindInfos-parameter)
VUID-vkCmdBeginConditionalRenderingEXT-None-01980
Conditional rendering must not already be active (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginConditionalRenderingEXT-None-01980)
VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-parameter)
VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-parameter
VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-recording
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginConditionalRenderingEXT-commandBuffer-recording)
VUID-vkCmdBeginConditionalRenderingEXT-pConditionalRenderingBegin-parameter
pConditionalRenderingBegin must be a valid pointer to a valid VkConditionalRenderingBeginInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginConditionalRenderingEXT-pConditionalRenderingBegin-parameter)
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-cmdpool)
VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-cmdpool
VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-parameter
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-parameter)
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-recording)
VUID-vkCmdBeginDebugUtilsLabelEXT-commandBuffer-recording
pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginDebugUtilsLabelEXT-pLabelInfo-parameter)
VUID-vkCmdBeginDebugUtilsLabelEXT-pLabelInfo-parameter
VUID-vkCmdBeginQuery-None-00807
All queries used by the command must be unavailable (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-None-00807)
commandBuffer must not be a protected command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-commandBuffer-01885)
VUID-vkCmdBeginQuery-commandBuffer-01885
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-commandBuffer-cmdpool)
VUID-vkCmdBeginQuery-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-commandBuffer-parameter)
VUID-vkCmdBeginQuery-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-commandBuffer-recording)
VUID-vkCmdBeginQuery-commandBuffer-recording
Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-commonparent)
VUID-vkCmdBeginQuery-commonparent
flags must be a valid combination of VkQueryControlFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-flags-parameter)
VUID-vkCmdBeginQuery-flags-parameter
VUID-vkCmdBeginQuery-query-00802
query must be less than the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-query-00802)
VUID-vkCmdBeginQuery-query-00808
If vkCmdBeginQuery is called within a render pass instance, the sum of query and the number of bits set in the current subpass's view mask must be less than or equal to the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-query-00808)
VUID-vkCmdBeginQuery-queryPool-01922
queryPool must have been created with a queryType that differs from that of any queries that are active within commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-queryPool-01922)
queryPool must be a valid VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-queryPool-parameter)
VUID-vkCmdBeginQuery-queryPool-parameter
VUID-vkCmdBeginQuery-queryType-00800
If the precise occlusion queries feature is not enabled, or the queryType used to create queryPool was not VK_QUERY_TYPE_OCCLUSION, flags must not contain VK_QUERY_CONTROL_PRECISE_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-queryType-00800)
If the queryType used to create queryPool was VK_QUERY_TYPE_OCCLUSION, the VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-queryType-00803)
VUID-vkCmdBeginQuery-queryType-00803
VUID-vkCmdBeginQuery-queryType-00804
If the queryType used to create queryPool was VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pipelineStatistics indicate graphics operations, the VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-queryType-00804)
VUID-vkCmdBeginQuery-queryType-00805
If the queryType used to create queryPool was VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pipelineStatistics indicate compute operations, the VkCommandPool that commandBuffer was allocated from must support compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginQuery-queryType-00805)
commandBuffer must be a primary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-bufferlevel)
VUID-vkCmdBeginRenderPass-bufferlevel
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-commandBuffer-cmdpool)
VUID-vkCmdBeginRenderPass-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-commandBuffer-parameter)
VUID-vkCmdBeginRenderPass-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-commandBuffer-recording)
VUID-vkCmdBeginRenderPass-commandBuffer-recording
contents must be a valid VkSubpassContents value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-contents-parameter)
VUID-vkCmdBeginRenderPass-contents-parameter
VUID-vkCmdBeginRenderPass-initialLayout-00895
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-initialLayout-00895)
VUID-vkCmdBeginRenderPass-initialLayout-00896
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-initialLayout-00896)
VUID-vkCmdBeginRenderPass-initialLayout-00897
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-initialLayout-00897)
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-initialLayout-00898)
VUID-vkCmdBeginRenderPass-initialLayout-00898
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-initialLayout-00899)
VUID-vkCmdBeginRenderPass-initialLayout-00899
VUID-vkCmdBeginRenderPass-initialLayout-00900
If any of the initialLayout members of the VkAttachmentDescription structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is not VK_IMAGE_LAYOUT_UNDEFINED, then each such initialLayout must be equal to the current layout of the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-initialLayout-00900)
VUID-vkCmdBeginRenderPass-initialLayout-01758
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-initialLayout-01758)
pRenderPassBegin must be a valid pointer to a valid VkRenderPassBeginInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-pRenderPassBegin-parameter)
VUID-vkCmdBeginRenderPass-pRenderPassBegin-parameter
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-renderpass)
VUID-vkCmdBeginRenderPass-renderpass
VUID-vkCmdBeginRenderPass-srcStageMask-00901
The srcStageMask and dstStageMask members of any element of the pDependencies member of VkRenderPassCreateInfo used to create renderPass must be supported by the capabilities of the queue family identified by the queueFamilyIndex member of the VkCommandPoolCreateInfo used to create the command pool which commandBuffer was allocated from. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass-srcStageMask-00901)
commandBuffer must be a primary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-bufferlevel)
VUID-vkCmdBeginRenderPass2KHR-bufferlevel
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-commandBuffer-cmdpool)
VUID-vkCmdBeginRenderPass2KHR-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-commandBuffer-parameter)
VUID-vkCmdBeginRenderPass2KHR-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-commandBuffer-recording)
VUID-vkCmdBeginRenderPass2KHR-commandBuffer-recording
VUID-vkCmdBeginRenderPass2KHR-initialLayout-03094
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-initialLayout-03094)
VUID-vkCmdBeginRenderPass2KHR-initialLayout-03095
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-initialLayout-03095)
VUID-vkCmdBeginRenderPass2KHR-initialLayout-03096
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-initialLayout-03096)
VUID-vkCmdBeginRenderPass2KHR-initialLayout-03097
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-initialLayout-03097)
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-initialLayout-03098)
VUID-vkCmdBeginRenderPass2KHR-initialLayout-03098
If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-initialLayout-03099)
VUID-vkCmdBeginRenderPass2KHR-initialLayout-03099
VUID-vkCmdBeginRenderPass2KHR-initialLayout-03100
If any of the initialLayout members of the VkAttachmentDescription structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is not VK_IMAGE_LAYOUT_UNDEFINED, then each such initialLayout must be equal to the current layout of the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-initialLayout-03100)
pRenderPassBegin must be a valid pointer to a valid VkRenderPassBeginInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-pRenderPassBegin-parameter)
VUID-vkCmdBeginRenderPass2KHR-pRenderPassBegin-parameter
pSubpassBeginInfo must be a valid pointer to a valid VkSubpassBeginInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-pSubpassBeginInfo-parameter)
VUID-vkCmdBeginRenderPass2KHR-pSubpassBeginInfo-parameter
VUID-vkCmdBeginRenderPass2KHR-renderpass
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-renderpass)
VUID-vkCmdBeginRenderPass2KHR-srcStageMask-03101
The srcStageMask and dstStageMask members of any element of the pDependencies member of VkRenderPassCreateInfo used to create renderPass must be supported by the capabilities of the queue family identified by the queueFamilyIndex member of the VkCommandPoolCreateInfo used to create the command pool which commandBuffer was allocated from. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBeginRenderPass2KHR-srcStageMask-03101)
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-commandBuffer-cmdpool)
VUID-vkCmdBindDescriptorSets-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-commandBuffer-parameter)
VUID-vkCmdBindDescriptorSets-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-commandBuffer-recording)
VUID-vkCmdBindDescriptorSets-commandBuffer-recording
VUID-vkCmdBindDescriptorSets-commonparent
Each of commandBuffer, layout, and the elements of pDescriptorSets must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-commonparent)
VUID-vkCmdBindDescriptorSets-descriptorSetCount-arraylength
descriptorSetCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-descriptorSetCount-arraylength)
VUID-vkCmdBindDescriptorSets-dynamicOffsetCount-00359
dynamicOffsetCount must be equal to the total number of dynamic descriptors in pDescriptorSets (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-dynamicOffsetCount-00359)
The sum of firstSet and descriptorSetCount must be less than or equal to VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-firstSet-00360)
VUID-vkCmdBindDescriptorSets-firstSet-00360
layout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-layout-parameter)
VUID-vkCmdBindDescriptorSets-layout-parameter
VUID-vkCmdBindDescriptorSets-pDescriptorSets-00358
Each element of pDescriptorSets must have been allocated with a VkDescriptorSetLayout that matches (is the same as, or identically defined as) the VkDescriptorSetLayout at set n in layout, where n is the sum of firstSet and the index into pDescriptorSets (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pDescriptorSets-00358)
For each dynamic uniform or storage buffer binding in pDescriptorSets, the sum of the effective offset, as defined above, and the range of the binding must be less than or equal to the size of the buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pDescriptorSets-01979)
VUID-vkCmdBindDescriptorSets-pDescriptorSets-01979
VUID-vkCmdBindDescriptorSets-pDescriptorSets-parameter
pDescriptorSets must be a valid pointer to an array of descriptorSetCount valid VkDescriptorSet handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pDescriptorSets-parameter)
Each element of pDynamicOffsets which corresponds to a descriptor binding with type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC must be a multiple of VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pDynamicOffsets-01971)
VUID-vkCmdBindDescriptorSets-pDynamicOffsets-01971
Each element of pDynamicOffsets which corresponds to a descriptor binding with type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC must be a multiple of VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pDynamicOffsets-01972)
VUID-vkCmdBindDescriptorSets-pDynamicOffsets-01972
VUID-vkCmdBindDescriptorSets-pDynamicOffsets-parameter
If dynamicOffsetCount is not 0, pDynamicOffsets must be a valid pointer to an array of dynamicOffsetCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pDynamicOffsets-parameter)
pipelineBindPoint must be supported by the commandBuffer's parent VkCommandPool's queue family (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pipelineBindPoint-00361)
VUID-vkCmdBindDescriptorSets-pipelineBindPoint-00361
pipelineBindPoint must be a valid VkPipelineBindPoint value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindDescriptorSets-pipelineBindPoint-parameter)
VUID-vkCmdBindDescriptorSets-pipelineBindPoint-parameter
VUID-vkCmdBindIndexBuffer-buffer-00433
buffer must have been created with the VK_BUFFER_USAGE_INDEX_BUFFER_BIT flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-buffer-00433)
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-buffer-00434)
VUID-vkCmdBindIndexBuffer-buffer-00434
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-buffer-parameter)
VUID-vkCmdBindIndexBuffer-buffer-parameter
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-commandBuffer-cmdpool)
VUID-vkCmdBindIndexBuffer-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-commandBuffer-parameter)
VUID-vkCmdBindIndexBuffer-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-commandBuffer-recording)
VUID-vkCmdBindIndexBuffer-commandBuffer-recording
Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-commonparent)
VUID-vkCmdBindIndexBuffer-commonparent
indexType must be a valid VkIndexType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-indexType-parameter)
VUID-vkCmdBindIndexBuffer-indexType-parameter
VUID-vkCmdBindIndexBuffer-offset-00431
offset must be less than the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-offset-00431)
VUID-vkCmdBindIndexBuffer-offset-00432
The sum of offset and the address of the range of VkDeviceMemory object that is backing buffer, must be a multiple of the type indicated by indexType (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindIndexBuffer-offset-00432)
VUID-vkCmdBindPipeline-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-commandBuffer-parameter)
VUID-vkCmdBindPipeline-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-commandBuffer-recording)
VUID-vkCmdBindPipeline-commandBuffer-recording
VUID-vkCmdBindPipeline-commonparent
Both of commandBuffer, and pipeline must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-commonparent)
If the variable multisample rate feature is not supported, pipeline is a graphics pipeline, the current subpass has no attachments, and this is not the first call to this function with a graphics pipeline after transitioning to the current subpass, then the sample count specified by this pipeline must match that set in the previous pipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-pipeline-00781)
VUID-vkCmdBindPipeline-pipeline-00781
VUID-vkCmdBindPipeline-pipeline-parameter
pipeline must be a valid VkPipeline handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-pipeline-parameter)
VUID-vkCmdBindPipeline-pipelineBindPoint-00777
If pipelineBindPoint is VK_PIPELINE_BIND_POINT_COMPUTE, the VkCommandPool that commandBuffer was allocated from must support compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-pipelineBindPoint-00777)
VUID-vkCmdBindPipeline-pipelineBindPoint-00778
If pipelineBindPoint is VK_PIPELINE_BIND_POINT_GRAPHICS, the VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-pipelineBindPoint-00778)
VUID-vkCmdBindPipeline-pipelineBindPoint-00779
If pipelineBindPoint is VK_PIPELINE_BIND_POINT_COMPUTE, pipeline must be a compute pipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-pipelineBindPoint-00779)
If pipelineBindPoint is VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline must be a graphics pipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-pipelineBindPoint-00780)
VUID-vkCmdBindPipeline-pipelineBindPoint-00780
VUID-vkCmdBindPipeline-pipelineBindPoint-parameter
pipelineBindPoint must be a valid VkPipelineBindPoint value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-pipelineBindPoint-parameter)
VUID-vkCmdBindPipeline-variableSampleLocations-01525
If VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations is VK_FALSE, and pipeline is a graphics pipeline created with a VkPipelineSampleLocationsStateCreateInfoEXT structure having its sampleLocationsEnable member set to VK_TRUE but without VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT enabled then the current render pass instance must have been begun by specifying a VkRenderPassSampleLocationsBeginInfoEXT structure whose pPostSubpassSampleLocations member contains an element with a subpassIndex matching the current subpass index and the sampleLocationsInfo member of that element must match the sampleLocationsInfo specified in VkPipelineSampleLocationsStateCreateInfoEXT when the pipeline was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindPipeline-variableSampleLocations-01525)
bindingCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-bindingCount-arraylength)
VUID-vkCmdBindVertexBuffers-bindingCount-arraylength
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-commandBuffer-cmdpool)
VUID-vkCmdBindVertexBuffers-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-commandBuffer-parameter)
VUID-vkCmdBindVertexBuffers-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-commandBuffer-recording)
VUID-vkCmdBindVertexBuffers-commandBuffer-recording
Both of commandBuffer, and the elements of pBuffers must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-commonparent)
VUID-vkCmdBindVertexBuffers-commonparent
VUID-vkCmdBindVertexBuffers-firstBinding-00624
firstBinding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-firstBinding-00624)
VUID-vkCmdBindVertexBuffers-firstBinding-00625
The sum of firstBinding and bindingCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindings (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-firstBinding-00625)
All elements of pBuffers must have been created with the VK_BUFFER_USAGE_VERTEX_BUFFER_BIT flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-pBuffers-00627)
VUID-vkCmdBindVertexBuffers-pBuffers-00627
Each element of pBuffers that is non-sparse must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-pBuffers-00628)
VUID-vkCmdBindVertexBuffers-pBuffers-00628
pBuffers must be a valid pointer to an array of bindingCount valid VkBuffer handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-pBuffers-parameter)
VUID-vkCmdBindVertexBuffers-pBuffers-parameter
All elements of pOffsets must be less than the size of the corresponding element in pBuffers (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-pOffsets-00626)
VUID-vkCmdBindVertexBuffers-pOffsets-00626
pOffsets must be a valid pointer to an array of bindingCount VkDeviceSize values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBindVertexBuffers-pOffsets-parameter)
VUID-vkCmdBindVertexBuffers-pOffsets-parameter
If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-commandBuffer-01834)
VUID-vkCmdBlitImage-commandBuffer-01834
If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-commandBuffer-01835)
VUID-vkCmdBlitImage-commandBuffer-01835
If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-commandBuffer-01836)
VUID-vkCmdBlitImage-commandBuffer-01836
VUID-vkCmdBlitImage-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-commandBuffer-parameter)
VUID-vkCmdBlitImage-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-commandBuffer-recording)
VUID-vkCmdBlitImage-commandBuffer-recording
Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-commonparent)
VUID-vkCmdBlitImage-commonparent
dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImage-00224)
VUID-vkCmdBlitImage-dstImage-00224
If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImage-00225)
VUID-vkCmdBlitImage-dstImage-00225
dstImage must have been created with a samples value of VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImage-00234)
VUID-vkCmdBlitImage-dstImage-00234
dstImage must not use a format listed in Formats requiring sampler Y'CBCR conversion for VK_IMAGE_ASPECT_COLOR_BIT image views (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImage-01562)
VUID-vkCmdBlitImage-dstImage-01562
The format features of dstImage must contain VK_FORMAT_FEATURE_BLIT_DST_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImage-02000)
VUID-vkCmdBlitImage-dstImage-02000
dstImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImage-parameter)
VUID-vkCmdBlitImage-dstImage-parameter
dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImageLayout-00226)
VUID-vkCmdBlitImage-dstImageLayout-00226
dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImageLayout-00227)
VUID-vkCmdBlitImage-dstImageLayout-00227
dstImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImageLayout-01399)
VUID-vkCmdBlitImage-dstImageLayout-01399
dstImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstImageLayout-parameter)
VUID-vkCmdBlitImage-dstImageLayout-parameter
The dstSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstSubresource-01706)
VUID-vkCmdBlitImage-dstSubresource-01706
The dstSubresource.baseArrayLayer + dstSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-dstSubresource-01708)
VUID-vkCmdBlitImage-dstSubresource-01708
VUID-vkCmdBlitImage-filter-00237
If filter is VK_FILTER_CUBIC_IMG, srcImage must have a VkImageType of VK_IMAGE_TYPE_2D (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-filter-00237)
VUID-vkCmdBlitImage-filter-02001
If filter is VK_FILTER_LINEAR, then the format features of srcImage must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-filter-02001)
VUID-vkCmdBlitImage-filter-02002
If filter is VK_FILTER_CUBIC_IMG, then the format features of srcImage must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-filter-02002)
VUID-vkCmdBlitImage-filter-parameter
filter must be a valid VkFilter value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-filter-parameter)
The source region specified by each element of pRegions must be a region that is contained within srcImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-pRegions-00215)
VUID-vkCmdBlitImage-pRegions-00215
The destination region specified by each element of pRegions must be a region that is contained within dstImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-pRegions-00216)
VUID-vkCmdBlitImage-pRegions-00216
VUID-vkCmdBlitImage-pRegions-00217
The union of all destination regions, specified by the elements of pRegions, must not overlap in memory with any texel that may be sampled during the blit operation (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-pRegions-00217)
pRegions must be a valid pointer to an array of regionCount valid VkImageBlit structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-pRegions-parameter)
VUID-vkCmdBlitImage-pRegions-parameter
regionCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-regionCount-arraylength)
VUID-vkCmdBlitImage-regionCount-arraylength
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-renderpass)
VUID-vkCmdBlitImage-renderpass
srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00219)
VUID-vkCmdBlitImage-srcImage-00219
If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00220)
VUID-vkCmdBlitImage-srcImage-00220
The sample count of srcImage and dstImage must both be equal to VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00228)
VUID-vkCmdBlitImage-srcImage-00228
VUID-vkCmdBlitImage-srcImage-00229
If either of srcImage or dstImage was created with a signed integer VkFormat, the other must also have been created with a signed integer VkFormat (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00229)
VUID-vkCmdBlitImage-srcImage-00230
If either of srcImage or dstImage was created with an unsigned integer VkFormat, the other must also have been created with an unsigned integer VkFormat (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00230)
If either of srcImage or dstImage was created with a depth/stencil format, the other must have exactly the same format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00231)
VUID-vkCmdBlitImage-srcImage-00231
If srcImage was created with a depth/stencil format, filter must be VK_FILTER_NEAREST (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00232)
VUID-vkCmdBlitImage-srcImage-00232
srcImage must have been created with a samples value of VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-00233)
VUID-vkCmdBlitImage-srcImage-00233
srcImage must not use a format listed in Formats requiring sampler Y'CBCR conversion for VK_IMAGE_ASPECT_COLOR_BIT image views (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-01561)
VUID-vkCmdBlitImage-srcImage-01561
The format features of srcImage must contain VK_FORMAT_FEATURE_BLIT_SRC_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-01999)
VUID-vkCmdBlitImage-srcImage-01999
srcImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImage-parameter)
VUID-vkCmdBlitImage-srcImage-parameter
srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImageLayout-00221)
VUID-vkCmdBlitImage-srcImageLayout-00221
srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImageLayout-00222)
VUID-vkCmdBlitImage-srcImageLayout-00222
srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImageLayout-01398)
VUID-vkCmdBlitImage-srcImageLayout-01398
srcImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcImageLayout-parameter)
VUID-vkCmdBlitImage-srcImageLayout-parameter
The srcSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcSubresource-01705)
VUID-vkCmdBlitImage-srcSubresource-01705
The srcSubresource.baseArrayLayer + srcSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdBlitImage-srcSubresource-01707)
VUID-vkCmdBlitImage-srcSubresource-01707
VUID-vkCmdClearAttachments-aspectMask-00015
If the aspectMask member of any element of pAttachments contains VK_IMAGE_ASPECT_COLOR_BIT, the colorAttachment member of that element must refer to a valid color attachment in the current subpass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-aspectMask-00015)
attachmentCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-attachmentCount-arraylength)
VUID-vkCmdClearAttachments-attachmentCount-arraylength
If the render pass instance this is recorded in uses multiview, then baseArrayLayer must be zero and layerCount must be one. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-baseArrayLayer-00018)
VUID-vkCmdClearAttachments-baseArrayLayer-00018
VUID-vkCmdClearAttachments-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-commandBuffer-parameter)
VUID-vkCmdClearAttachments-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-commandBuffer-recording)
VUID-vkCmdClearAttachments-commandBuffer-recording
The layerCount member of each element of pRects must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-layerCount-01934)
VUID-vkCmdClearAttachments-layerCount-01934
pAttachments must be a valid pointer to an array of attachmentCount valid VkClearAttachment structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-pAttachments-parameter)
VUID-vkCmdClearAttachments-pAttachments-parameter
VUID-vkCmdClearAttachments-pRects-00016
The rectangular region specified by each element of pRects must be contained within the render area of the current render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-pRects-00016)
VUID-vkCmdClearAttachments-pRects-00017
The layers specified by each element of pRects must be contained within every attachment that pAttachments refers to (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-pRects-00017)
pRects must be a valid pointer to an array of rectCount VkClearRect structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-pRects-parameter)
VUID-vkCmdClearAttachments-pRects-parameter
VUID-vkCmdClearAttachments-rectCount-arraylength
rectCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-rectCount-arraylength)
VUID-vkCmdClearAttachments-renderpass
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearAttachments-renderpass)
VUID-vkCmdClearColorImage-baseArrayLayer-01472
The VkImageSubresourceRange::baseArrayLayer members of the elements of the pRanges array must each be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-baseArrayLayer-01472)
The VkImageSubresourceRange::baseMipLevel members of the elements of the pRanges array must each be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-baseMipLevel-01470)
VUID-vkCmdClearColorImage-baseMipLevel-01470
If commandBuffer is an unprotected command buffer, then image must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-commandBuffer-01805)
VUID-vkCmdClearColorImage-commandBuffer-01805
If commandBuffer is a protected command buffer, then image must not be an unprotected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-commandBuffer-01806)
VUID-vkCmdClearColorImage-commandBuffer-01806
VUID-vkCmdClearColorImage-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-commandBuffer-parameter)
VUID-vkCmdClearColorImage-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-commandBuffer-recording)
VUID-vkCmdClearColorImage-commandBuffer-recording
VUID-vkCmdClearColorImage-commonparent
Both of commandBuffer, and image must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-commonparent)
image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-image-00002)
VUID-vkCmdClearColorImage-image-00002
If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-image-00003)
VUID-vkCmdClearColorImage-image-00003
VUID-vkCmdClearColorImage-image-00007
image must not have a compressed or depth/stencil format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-image-00007)
VUID-vkCmdClearColorImage-image-01545
image must not use a format listed in Formats requiring sampler Y'CBCR conversion for VK_IMAGE_ASPECT_COLOR_BIT image views (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-image-01545)
VUID-vkCmdClearColorImage-image-01993
The format features of image must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-image-01993)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-image-parameter)
VUID-vkCmdClearColorImage-image-parameter
imageLayout must specify the layout of the image subresource ranges of image specified in pRanges at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-imageLayout-00004)
VUID-vkCmdClearColorImage-imageLayout-00004
VUID-vkCmdClearColorImage-imageLayout-00005
imageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-imageLayout-00005)
imageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-imageLayout-01394)
VUID-vkCmdClearColorImage-imageLayout-01394
imageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-imageLayout-parameter)
VUID-vkCmdClearColorImage-imageLayout-parameter
pColor must be a valid pointer to a valid VkClearColorValue union (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-pColor-parameter)
VUID-vkCmdClearColorImage-pColor-parameter
For each VkImageSubresourceRange element of pRanges, if the levelCount member is not VK_REMAINING_MIP_LEVELS, then baseMipLevel + levelCount must be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-pRanges-01692)
VUID-vkCmdClearColorImage-pRanges-01692
VUID-vkCmdClearColorImage-pRanges-01693
For each VkImageSubresourceRange element of pRanges, if the layerCount member is not VK_REMAINING_ARRAY_LAYERS, then baseArrayLayer + layerCount must be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-pRanges-01693)
pRanges must be a valid pointer to an array of rangeCount valid VkImageSubresourceRange structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-pRanges-parameter)
VUID-vkCmdClearColorImage-pRanges-parameter
rangeCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-rangeCount-arraylength)
VUID-vkCmdClearColorImage-rangeCount-arraylength
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearColorImage-renderpass)
VUID-vkCmdClearColorImage-renderpass
VUID-vkCmdClearDepthStencilImage-baseArrayLayer-01476
The VkImageSubresourceRange::baseArrayLayer members of the elements of the pRanges array must each be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-baseArrayLayer-01476)
VUID-vkCmdClearDepthStencilImage-baseMipLevel-01474
The VkImageSubresourceRange::baseMipLevel members of the elements of the pRanges array must each be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-baseMipLevel-01474)
If commandBuffer is an unprotected command buffer, then image must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-commandBuffer-01807)
VUID-vkCmdClearDepthStencilImage-commandBuffer-01807
If commandBuffer is a protected command buffer, then image must not be an unprotected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-commandBuffer-01808)
VUID-vkCmdClearDepthStencilImage-commandBuffer-01808
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-commandBuffer-cmdpool)
VUID-vkCmdClearDepthStencilImage-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-commandBuffer-parameter)
VUID-vkCmdClearDepthStencilImage-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-commandBuffer-recording)
VUID-vkCmdClearDepthStencilImage-commandBuffer-recording
Both of commandBuffer, and image must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-commonparent)
VUID-vkCmdClearDepthStencilImage-commonparent
VUID-vkCmdClearDepthStencilImage-image-00009
image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-image-00009)
VUID-vkCmdClearDepthStencilImage-image-00010
If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-image-00010)
image must have a depth/stencil format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-image-00014)
VUID-vkCmdClearDepthStencilImage-image-00014
VUID-vkCmdClearDepthStencilImage-image-01994
The format features of image must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-image-01994)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-image-parameter)
VUID-vkCmdClearDepthStencilImage-image-parameter
VUID-vkCmdClearDepthStencilImage-imageLayout-00011
imageLayout must specify the layout of the image subresource ranges of image specified in pRanges at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-imageLayout-00011)
VUID-vkCmdClearDepthStencilImage-imageLayout-00012
imageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-imageLayout-00012)
imageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-imageLayout-parameter)
VUID-vkCmdClearDepthStencilImage-imageLayout-parameter
pDepthStencil must be a valid pointer to a valid VkClearDepthStencilValue structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-pDepthStencil-parameter)
VUID-vkCmdClearDepthStencilImage-pDepthStencil-parameter
VUID-vkCmdClearDepthStencilImage-pRanges-01694
For each VkImageSubresourceRange element of pRanges, if the levelCount member is not VK_REMAINING_MIP_LEVELS, then baseMipLevel + levelCount must be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-pRanges-01694)
VUID-vkCmdClearDepthStencilImage-pRanges-01695
For each VkImageSubresourceRange element of pRanges, if the layerCount member is not VK_REMAINING_ARRAY_LAYERS, then baseArrayLayer + layerCount must be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-pRanges-01695)
pRanges must be a valid pointer to an array of rangeCount valid VkImageSubresourceRange structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-pRanges-parameter)
VUID-vkCmdClearDepthStencilImage-pRanges-parameter
VUID-vkCmdClearDepthStencilImage-rangeCount-arraylength
rangeCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-rangeCount-arraylength)
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdClearDepthStencilImage-renderpass)
VUID-vkCmdClearDepthStencilImage-renderpass
If commandBuffer is an unprotected command buffer, then srcBuffer must not be a protected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-commandBuffer-01822)
VUID-vkCmdCopyBuffer-commandBuffer-01822
If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-commandBuffer-01823)
VUID-vkCmdCopyBuffer-commandBuffer-01823
If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-commandBuffer-01824)
VUID-vkCmdCopyBuffer-commandBuffer-01824
VUID-vkCmdCopyBuffer-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-commandBuffer-parameter)
VUID-vkCmdCopyBuffer-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-commandBuffer-recording)
VUID-vkCmdCopyBuffer-commandBuffer-recording
VUID-vkCmdCopyBuffer-commonparent
Each of commandBuffer, dstBuffer, and srcBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-commonparent)
dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-dstBuffer-00120)
VUID-vkCmdCopyBuffer-dstBuffer-00120
If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-dstBuffer-00121)
VUID-vkCmdCopyBuffer-dstBuffer-00121
dstBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-dstBuffer-parameter)
VUID-vkCmdCopyBuffer-dstBuffer-parameter
The dstOffset member of each element of pRegions must be less than the size of dstBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-dstOffset-00114)
VUID-vkCmdCopyBuffer-dstOffset-00114
VUID-vkCmdCopyBuffer-pRegions-00117
The union of the source regions, and the union of the destination regions, specified by the elements of pRegions, must not overlap in memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-pRegions-00117)
VUID-vkCmdCopyBuffer-pRegions-parameter
pRegions must be a valid pointer to an array of regionCount valid VkBufferCopy structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-pRegions-parameter)
VUID-vkCmdCopyBuffer-regionCount-arraylength
regionCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-regionCount-arraylength)
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-renderpass)
VUID-vkCmdCopyBuffer-renderpass
The size member of each element of pRegions must be less than or equal to the size of srcBuffer minus srcOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-size-00115)
VUID-vkCmdCopyBuffer-size-00115
The size member of each element of pRegions must be less than or equal to the size of dstBuffer minus dstOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-size-00116)
VUID-vkCmdCopyBuffer-size-00116
srcBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-srcBuffer-00118)
VUID-vkCmdCopyBuffer-srcBuffer-00118
If srcBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-srcBuffer-00119)
VUID-vkCmdCopyBuffer-srcBuffer-00119
srcBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-srcBuffer-parameter)
VUID-vkCmdCopyBuffer-srcBuffer-parameter
The srcOffset member of each element of pRegions must be less than the size of srcBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBuffer-srcOffset-00113)
VUID-vkCmdCopyBuffer-srcOffset-00113
If commandBuffer is an unprotected command buffer, then srcBuffer must not be a protected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-commandBuffer-01828)
VUID-vkCmdCopyBufferToImage-commandBuffer-01828
If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-commandBuffer-01829)
VUID-vkCmdCopyBufferToImage-commandBuffer-01829
If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-commandBuffer-01830)
VUID-vkCmdCopyBufferToImage-commandBuffer-01830
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-commandBuffer-cmdpool)
VUID-vkCmdCopyBufferToImage-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-commandBuffer-parameter)
VUID-vkCmdCopyBufferToImage-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-commandBuffer-recording)
VUID-vkCmdCopyBufferToImage-commandBuffer-recording
Each of commandBuffer, dstImage, and srcBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-commonparent)
VUID-vkCmdCopyBufferToImage-commonparent
dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImage-00177)
VUID-vkCmdCopyBufferToImage-dstImage-00177
If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImage-00178)
VUID-vkCmdCopyBufferToImage-dstImage-00178
dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImage-00179)
VUID-vkCmdCopyBufferToImage-dstImage-00179
The format features of dstImage must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImage-01997)
VUID-vkCmdCopyBufferToImage-dstImage-01997
dstImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImage-parameter)
VUID-vkCmdCopyBufferToImage-dstImage-parameter
dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImageLayout-00180)
VUID-vkCmdCopyBufferToImage-dstImageLayout-00180
dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImageLayout-00181)
VUID-vkCmdCopyBufferToImage-dstImageLayout-00181
VUID-vkCmdCopyBufferToImage-dstImageLayout-01396
dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImageLayout-01396)
dstImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-dstImageLayout-parameter)
VUID-vkCmdCopyBufferToImage-dstImageLayout-parameter
The imageOffset and imageExtent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer's command pool's queue family, as described in VkQueueFamilyProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-imageOffset-01793)
VUID-vkCmdCopyBufferToImage-imageOffset-01793
The imageSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-imageSubresource-01701)
VUID-vkCmdCopyBufferToImage-imageSubresource-01701
The imageSubresource.baseArrayLayer + imageSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-imageSubresource-01702)
VUID-vkCmdCopyBufferToImage-imageSubresource-01702
srcBuffer must be large enough to contain all buffer locations that are accessed according to Buffer and Image Addressing, for each element of pRegions (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-pRegions-00171)
VUID-vkCmdCopyBufferToImage-pRegions-00171
The image region specified by each element of pRegions must be a region that is contained within dstImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-pRegions-00172)
VUID-vkCmdCopyBufferToImage-pRegions-00172
The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-pRegions-00173)
VUID-vkCmdCopyBufferToImage-pRegions-00173
pRegions must be a valid pointer to an array of regionCount valid VkBufferImageCopy structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-pRegions-parameter)
VUID-vkCmdCopyBufferToImage-pRegions-parameter
regionCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-regionCount-arraylength)
VUID-vkCmdCopyBufferToImage-regionCount-arraylength
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-renderpass)
VUID-vkCmdCopyBufferToImage-renderpass
srcBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-srcBuffer-00174)
VUID-vkCmdCopyBufferToImage-srcBuffer-00174
If srcBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-srcBuffer-00176)
VUID-vkCmdCopyBufferToImage-srcBuffer-00176
srcBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyBufferToImage-srcBuffer-parameter)
VUID-vkCmdCopyBufferToImage-srcBuffer-parameter
VUID-vkCmdCopyImage-None-01549
In a copy to or from a plane of a multi-planar image, the VkFormat of the image and plane must be compatible according to the description of compatible planes for the plane being copied (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-None-01549)
VUID-vkCmdCopyImage-aspectMask-01550
When a copy is performed to or from an image with a multi-planar format, the aspectMask of the srcSubresource and/or dstSubresource that refers to the multi-planar image must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT, or VK_IMAGE_ASPECT_PLANE_2_BIT (with VK_IMAGE_ASPECT_PLANE_2_BIT valid only for a VkFormat with three planes) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-aspectMask-01550)
If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-commandBuffer-01825)
VUID-vkCmdCopyImage-commandBuffer-01825
If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-commandBuffer-01826)
VUID-vkCmdCopyImage-commandBuffer-01826
If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-commandBuffer-01827)
VUID-vkCmdCopyImage-commandBuffer-01827
VUID-vkCmdCopyImage-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-commandBuffer-parameter)
VUID-vkCmdCopyImage-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-commandBuffer-recording)
VUID-vkCmdCopyImage-commandBuffer-recording
Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-commonparent)
VUID-vkCmdCopyImage-commonparent
dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImage-00131)
VUID-vkCmdCopyImage-dstImage-00131
If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImage-00132)
VUID-vkCmdCopyImage-dstImage-00132
VUID-vkCmdCopyImage-dstImage-01547
If dstImage is non-sparse then the image or disjoint plane that is the destination of the copy must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImage-01547)
The format features of dstImage must contain VK_FORMAT_FEATURE_TRANSFER_DST_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImage-01996)
VUID-vkCmdCopyImage-dstImage-01996
dstImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImage-parameter)
VUID-vkCmdCopyImage-dstImage-parameter
dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImageLayout-00133)
VUID-vkCmdCopyImage-dstImageLayout-00133
dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImageLayout-00134)
VUID-vkCmdCopyImage-dstImageLayout-00134
dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImageLayout-01395)
VUID-vkCmdCopyImage-dstImageLayout-01395
dstImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstImageLayout-parameter)
VUID-vkCmdCopyImage-dstImageLayout-parameter
The dstOffset and extent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer's command pool's queue family, as described in VkQueueFamilyProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstOffset-01784)
VUID-vkCmdCopyImage-dstOffset-01784
The dstSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstSubresource-01697)
VUID-vkCmdCopyImage-dstSubresource-01697
The dstSubresource.baseArrayLayer + dstSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-dstSubresource-01699)
VUID-vkCmdCopyImage-dstSubresource-01699
The source region specified by each element of pRegions must be a region that is contained within srcImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-pRegions-00122)
VUID-vkCmdCopyImage-pRegions-00122
The destination region specified by each element of pRegions must be a region that is contained within dstImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-pRegions-00123)
VUID-vkCmdCopyImage-pRegions-00123
The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-pRegions-00124)
VUID-vkCmdCopyImage-pRegions-00124
pRegions must be a valid pointer to an array of regionCount valid VkImageCopy structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-pRegions-parameter)
VUID-vkCmdCopyImage-pRegions-parameter
regionCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-regionCount-arraylength)
VUID-vkCmdCopyImage-regionCount-arraylength
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-renderpass)
VUID-vkCmdCopyImage-renderpass
srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-00126)
VUID-vkCmdCopyImage-srcImage-00126
If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-00127)
VUID-vkCmdCopyImage-srcImage-00127
VUID-vkCmdCopyImage-srcImage-00135
The VkFormat of each of srcImage and dstImage must be compatible, as defined below (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-00135)
VUID-vkCmdCopyImage-srcImage-00136
The sample count of srcImage and dstImage must match (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-00136)
VUID-vkCmdCopyImage-srcImage-01546
If srcImage is non-sparse then the image or disjoint plane to be copied must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-01546)
VUID-vkCmdCopyImage-srcImage-01548
If the VkFormat of each of srcImage and dstImage is not a multi-planar format, the VkFormat of each of srcImage and dstImage must be compatible, as defined below (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-01548)
The format features of srcImage must contain VK_FORMAT_FEATURE_TRANSFER_SRC_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-01995)
VUID-vkCmdCopyImage-srcImage-01995
srcImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImage-parameter)
VUID-vkCmdCopyImage-srcImage-parameter
srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImageLayout-00128)
VUID-vkCmdCopyImage-srcImageLayout-00128
srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImageLayout-00129)
VUID-vkCmdCopyImage-srcImageLayout-00129
srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, VK_IMAGE_LAYOUT_GENERAL, or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImageLayout-01917)
VUID-vkCmdCopyImage-srcImageLayout-01917
srcImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcImageLayout-parameter)
VUID-vkCmdCopyImage-srcImageLayout-parameter
The srcOffset and extent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer's command pool's queue family, as described in VkQueueFamilyProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcOffset-01783)
VUID-vkCmdCopyImage-srcOffset-01783
The srcSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcSubresource-01696)
VUID-vkCmdCopyImage-srcSubresource-01696
The srcSubresource.baseArrayLayer + srcSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImage-srcSubresource-01698)
VUID-vkCmdCopyImage-srcSubresource-01698
If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-commandBuffer-01831)
VUID-vkCmdCopyImageToBuffer-commandBuffer-01831
If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-commandBuffer-01832)
VUID-vkCmdCopyImageToBuffer-commandBuffer-01832
If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-commandBuffer-01833)
VUID-vkCmdCopyImageToBuffer-commandBuffer-01833
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-commandBuffer-cmdpool)
VUID-vkCmdCopyImageToBuffer-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-commandBuffer-parameter)
VUID-vkCmdCopyImageToBuffer-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-commandBuffer-recording)
VUID-vkCmdCopyImageToBuffer-commandBuffer-recording
Each of commandBuffer, dstBuffer, and srcImage must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-commonparent)
VUID-vkCmdCopyImageToBuffer-commonparent
dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-dstBuffer-00191)
VUID-vkCmdCopyImageToBuffer-dstBuffer-00191
If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-dstBuffer-00192)
VUID-vkCmdCopyImageToBuffer-dstBuffer-00192
dstBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-dstBuffer-parameter)
VUID-vkCmdCopyImageToBuffer-dstBuffer-parameter
The imageOffset and imageExtent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer's command pool's queue family, as described in VkQueueFamilyProperties (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-imageOffset-01794)
VUID-vkCmdCopyImageToBuffer-imageOffset-01794
The imageSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-imageSubresource-01703)
VUID-vkCmdCopyImageToBuffer-imageSubresource-01703
The imageSubresource.baseArrayLayer + imageSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-imageSubresource-01704)
VUID-vkCmdCopyImageToBuffer-imageSubresource-01704
The image region specified by each element of pRegions must be a region that is contained within srcImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-pRegions-00182)
VUID-vkCmdCopyImageToBuffer-pRegions-00182
dstBuffer must be large enough to contain all buffer locations that are accessed according to Buffer and Image Addressing, for each element of pRegions (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-pRegions-00183)
VUID-vkCmdCopyImageToBuffer-pRegions-00183
The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-pRegions-00184)
VUID-vkCmdCopyImageToBuffer-pRegions-00184
pRegions must be a valid pointer to an array of regionCount valid VkBufferImageCopy structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-pRegions-parameter)
VUID-vkCmdCopyImageToBuffer-pRegions-parameter
regionCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-regionCount-arraylength)
VUID-vkCmdCopyImageToBuffer-regionCount-arraylength
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-renderpass)
VUID-vkCmdCopyImageToBuffer-renderpass
srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImage-00186)
VUID-vkCmdCopyImageToBuffer-srcImage-00186
If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImage-00187)
VUID-vkCmdCopyImageToBuffer-srcImage-00187
srcImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImage-00188)
VUID-vkCmdCopyImageToBuffer-srcImage-00188
The format features of srcImage must contain VK_FORMAT_FEATURE_TRANSFER_SRC_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImage-01998)
VUID-vkCmdCopyImageToBuffer-srcImage-01998
srcImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImage-parameter)
VUID-vkCmdCopyImageToBuffer-srcImage-parameter
srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImageLayout-00189)
VUID-vkCmdCopyImageToBuffer-srcImageLayout-00189
srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImageLayout-00190)
VUID-vkCmdCopyImageToBuffer-srcImageLayout-00190
srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImageLayout-01397)
VUID-vkCmdCopyImageToBuffer-srcImageLayout-01397
srcImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyImageToBuffer-srcImageLayout-parameter)
VUID-vkCmdCopyImageToBuffer-srcImageLayout-parameter
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-commandBuffer-cmdpool)
VUID-vkCmdCopyQueryPoolResults-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-commandBuffer-parameter)
VUID-vkCmdCopyQueryPoolResults-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-commandBuffer-recording)
VUID-vkCmdCopyQueryPoolResults-commandBuffer-recording
Each of commandBuffer, dstBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-commonparent)
VUID-vkCmdCopyQueryPoolResults-commonparent
dstBuffer must have enough storage, from dstOffset, to contain the result of each query, as described here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-dstBuffer-00824)
VUID-vkCmdCopyQueryPoolResults-dstBuffer-00824
dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-dstBuffer-00825)
VUID-vkCmdCopyQueryPoolResults-dstBuffer-00825
If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-dstBuffer-00826)
VUID-vkCmdCopyQueryPoolResults-dstBuffer-00826
dstBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-dstBuffer-parameter)
VUID-vkCmdCopyQueryPoolResults-dstBuffer-parameter
dstOffset must be less than the size of dstBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-dstOffset-00819)
VUID-vkCmdCopyQueryPoolResults-dstOffset-00819
firstQuery must be less than the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-firstQuery-00820)
VUID-vkCmdCopyQueryPoolResults-firstQuery-00820
VUID-vkCmdCopyQueryPoolResults-firstQuery-00821
The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-firstQuery-00821)
If VK_QUERY_RESULT_64_BIT is not set in flags then dstOffset and stride must be multiples of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-flags-00822)
VUID-vkCmdCopyQueryPoolResults-flags-00822
VUID-vkCmdCopyQueryPoolResults-flags-00823
If VK_QUERY_RESULT_64_BIT is set in flags then dstOffset and stride must be multiples of 8 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-flags-00823)
flags must be a valid combination of VkQueryResultFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-flags-parameter)
VUID-vkCmdCopyQueryPoolResults-flags-parameter
queryPool must be a valid VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-queryPool-parameter)
VUID-vkCmdCopyQueryPoolResults-queryPool-parameter
If the queryType used to create queryPool was VK_QUERY_TYPE_TIMESTAMP, flags must not contain VK_QUERY_RESULT_PARTIAL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-queryType-00827)
VUID-vkCmdCopyQueryPoolResults-queryType-00827
VUID-vkCmdCopyQueryPoolResults-renderpass
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdCopyQueryPoolResults-renderpass)
VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-parameter)
VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-recording)
VUID-vkCmdDebugMarkerBeginEXT-commandBuffer-recording
VUID-vkCmdDebugMarkerBeginEXT-pMarkerInfo-parameter
pMarkerInfo must be a valid pointer to a valid VkDebugMarkerMarkerInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerBeginEXT-pMarkerInfo-parameter)
VUID-vkCmdDebugMarkerEndEXT-commandBuffer-01239
There must be an outstanding vkCmdDebugMarkerBeginEXT command prior to the vkCmdDebugMarkerEndEXT on the queue that commandBuffer is submitted to (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerEndEXT-commandBuffer-01239)
VUID-vkCmdDebugMarkerEndEXT-commandBuffer-01240
If commandBuffer is a secondary command buffer, there must be an outstanding vkCmdDebugMarkerBeginEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdDebugMarkerEndEXT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerEndEXT-commandBuffer-01240)
VUID-vkCmdDebugMarkerEndEXT-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerEndEXT-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerEndEXT-commandBuffer-parameter)
VUID-vkCmdDebugMarkerEndEXT-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerEndEXT-commandBuffer-recording)
VUID-vkCmdDebugMarkerEndEXT-commandBuffer-recording
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-cmdpool)
VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-parameter)
VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-recording)
VUID-vkCmdDebugMarkerInsertEXT-commandBuffer-recording
pMarkerInfo must be a valid pointer to a valid VkDebugMarkerMarkerInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDebugMarkerInsertEXT-pMarkerInfo-parameter)
VUID-vkCmdDebugMarkerInsertEXT-pMarkerInfo-parameter
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00389)
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00390)
A valid compute pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_COMPUTE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00391)
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must have been set for VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for push constants with the one used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00392)
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00393)
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00394)
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00395)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00396)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00397)
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-00400)
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-02005)
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-None-02006)
VUID-vkCmdDispatch-commandBuffer-01844
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-commandBuffer-01844)
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-commandBuffer-01845)
VUID-vkCmdDispatch-commandBuffer-01845
VUID-vkCmdDispatch-commandBuffer-01846
If commandBuffer is a protected command buffer, and any pipeline stage other than the compute pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE reads from any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-commandBuffer-01846)
VUID-vkCmdDispatch-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-commandBuffer-parameter)
VUID-vkCmdDispatch-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-commandBuffer-recording)
VUID-vkCmdDispatch-commandBuffer-recording
groupCountX must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-groupCountX-00386)
VUID-vkCmdDispatch-groupCountX-00386
groupCountY must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-groupCountY-00387)
VUID-vkCmdDispatch-groupCountY-00387
groupCountZ must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-groupCountZ-00388)
VUID-vkCmdDispatch-groupCountZ-00388
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatch-renderpass)
VUID-vkCmdDispatchBase-None-00420
All valid usage rules from vkCmdDispatch apply (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-None-00420)
baseGroupX must be less than VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-baseGroupX-00421)
VUID-vkCmdDispatchBase-baseGroupX-00421
baseGroupX must be less than VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-baseGroupX-00422)
VUID-vkCmdDispatchBase-baseGroupX-00422
If any of baseGroupX, baseGroupY, or baseGroupZ are not zero, then the bound compute pipeline must have been created with the VK_PIPELINE_CREATE_DISPATCH_BASE flag. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-baseGroupX-00427)
VUID-vkCmdDispatchBase-baseGroupX-00427
baseGroupZ must be less than VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2] (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-baseGroupZ-00423)
VUID-vkCmdDispatchBase-baseGroupZ-00423
VUID-vkCmdDispatchBase-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-commandBuffer-parameter)
VUID-vkCmdDispatchBase-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-commandBuffer-recording)
VUID-vkCmdDispatchBase-commandBuffer-recording
groupCountX must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0] minus baseGroupX (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-groupCountX-00424)
VUID-vkCmdDispatchBase-groupCountX-00424
groupCountY must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1] minus baseGroupY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-groupCountY-00425)
VUID-vkCmdDispatchBase-groupCountY-00425
groupCountZ must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2] minus baseGroupZ (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-groupCountZ-00426)
VUID-vkCmdDispatchBase-groupCountZ-00426
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchBase-renderpass)
VUID-vkCmdDispatchBase-renderpass
VUID-vkCmdDispatchIndirect-None-00402
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00402)
VUID-vkCmdDispatchIndirect-None-00403
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00403)
A valid compute pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_COMPUTE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00404)
VUID-vkCmdDispatchIndirect-None-00404
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must have been set for VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for push constants with the one used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00408)
VUID-vkCmdDispatchIndirect-None-00408
VUID-vkCmdDispatchIndirect-None-00409
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00409)
VUID-vkCmdDispatchIndirect-None-00410
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00410)
VUID-vkCmdDispatchIndirect-None-00411
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00411)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00412)
VUID-vkCmdDispatchIndirect-None-00412
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00413)
VUID-vkCmdDispatchIndirect-None-00413
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-00416)
VUID-vkCmdDispatchIndirect-None-00416
VUID-vkCmdDispatchIndirect-None-02007
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-02007)
VUID-vkCmdDispatchIndirect-None-02008
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-None-02008)
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-buffer-00401)
VUID-vkCmdDispatchIndirect-buffer-00401
VUID-vkCmdDispatchIndirect-buffer-00405
buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-buffer-00405)
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-buffer-parameter)
VUID-vkCmdDispatchIndirect-buffer-parameter
VUID-vkCmdDispatchIndirect-commandBuffer-01847
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_COMPUTE reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-commandBuffer-01847)
VUID-vkCmdDispatchIndirect-commandBuffer-01848
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-commandBuffer-01848)
VUID-vkCmdDispatchIndirect-commandBuffer-01849
If commandBuffer is a protected command buffer, and any pipeline stage other than the compute pipeline stage in the VkPipeline object bound to VK_PIPELINE_POINT_COMPUTE reads from any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-commandBuffer-01849)
The VkCommandPool that commandBuffer was allocated from must support compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-commandBuffer-cmdpool)
VUID-vkCmdDispatchIndirect-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-commandBuffer-parameter)
VUID-vkCmdDispatchIndirect-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-commandBuffer-recording)
VUID-vkCmdDispatchIndirect-commandBuffer-recording
Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-commonparent)
VUID-vkCmdDispatchIndirect-commonparent
VUID-vkCmdDispatchIndirect-offset-00406
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-offset-00406)
VUID-vkCmdDispatchIndirect-offset-00407
The sum of offset and the size of VkDispatchIndirectCommand must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-offset-00407)
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDispatchIndirect-renderpass)
VUID-vkCmdDispatchIndirect-renderpass
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00437)
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00438)
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00439)
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00440)
For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Vertex Input Description (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00441)
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00442)
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00443)
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00444)
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00445)
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00446)
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00447)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00448)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00449)
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-00452)
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-01499)
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-02009)
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-None-02010)
VUID-vkCmdDraw-commandBuffer-01850
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-01850)
VUID-vkCmdDraw-commandBuffer-01851
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-01851)
VUID-vkCmdDraw-commandBuffer-01852
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-01852)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-cmdpool)
VUID-vkCmdDraw-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-parameter)
VUID-vkCmdDraw-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-commandBuffer-recording)
VUID-vkCmdDraw-commandBuffer-recording
VUID-vkCmdDraw-maxMultiviewInstanceIndex-00453
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-maxMultiviewInstanceIndex-00453)
VUID-vkCmdDraw-renderPass-00435
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-renderPass-00435)
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-renderpass)
VUID-vkCmdDraw-sampleLocationsEnable-01512
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-sampleLocationsEnable-01512)
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDraw-subpass-00436)
VUID-vkCmdDrawIndexed-None-00456
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00456)
VUID-vkCmdDrawIndexed-None-00457
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00457)
VUID-vkCmdDrawIndexed-None-00458
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00458)
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00459)
VUID-vkCmdDrawIndexed-None-00459
VUID-vkCmdDrawIndexed-None-00460
For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Vertex Input Description (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00460)
VUID-vkCmdDrawIndexed-None-00461
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00461)
VUID-vkCmdDrawIndexed-None-00462
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00462)
VUID-vkCmdDrawIndexed-None-00464
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00464)
VUID-vkCmdDrawIndexed-None-00465
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00465)
VUID-vkCmdDrawIndexed-None-00466
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00466)
VUID-vkCmdDrawIndexed-None-00467
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00467)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00468)
VUID-vkCmdDrawIndexed-None-00468
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00469)
VUID-vkCmdDrawIndexed-None-00469
VUID-vkCmdDrawIndexed-None-00472
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-00472)
VUID-vkCmdDrawIndexed-None-01500
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-01500)
VUID-vkCmdDrawIndexed-None-02011
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-02011)
VUID-vkCmdDrawIndexed-None-02012
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-None-02012)
VUID-vkCmdDrawIndexed-commandBuffer-01853
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-commandBuffer-01853)
VUID-vkCmdDrawIndexed-commandBuffer-01854
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-commandBuffer-01854)
VUID-vkCmdDrawIndexed-commandBuffer-01855
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-commandBuffer-01855)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-commandBuffer-cmdpool)
VUID-vkCmdDrawIndexed-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-commandBuffer-parameter)
VUID-vkCmdDrawIndexed-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-commandBuffer-recording)
VUID-vkCmdDrawIndexed-commandBuffer-recording
VUID-vkCmdDrawIndexed-indexSize-00463
(indexSize * (firstIndex + indexCount) + offset) must be less than or equal to the size of the bound index buffer, with indexSize being based on the type specified by indexType, where the index buffer, indexType, and offset are specified via vkCmdBindIndexBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-indexSize-00463)
VUID-vkCmdDrawIndexed-maxMultiviewInstanceIndex-00473
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-maxMultiviewInstanceIndex-00473)
VUID-vkCmdDrawIndexed-renderPass-00454
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderPass-00454)
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-renderpass)
VUID-vkCmdDrawIndexed-renderpass
VUID-vkCmdDrawIndexed-sampleLocationsEnable-01513
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-sampleLocationsEnable-01513)
VUID-vkCmdDrawIndexed-subpass-00455
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexed-subpass-00455)
VUID-vkCmdDrawIndexedIndirect-None-00533
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00533)
VUID-vkCmdDrawIndexedIndirect-None-00534
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00534)
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00535)
VUID-vkCmdDrawIndexedIndirect-None-00535
VUID-vkCmdDrawIndexedIndirect-None-00536
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00536)
VUID-vkCmdDrawIndexedIndirect-None-00537
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00537)
VUID-vkCmdDrawIndexedIndirect-None-00538
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00538)
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00542)
VUID-vkCmdDrawIndexedIndirect-None-00542
VUID-vkCmdDrawIndexedIndirect-None-00543
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00543)
VUID-vkCmdDrawIndexedIndirect-None-00544
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00544)
VUID-vkCmdDrawIndexedIndirect-None-00545
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00545)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00546)
VUID-vkCmdDrawIndexedIndirect-None-00546
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00547)
VUID-vkCmdDrawIndexedIndirect-None-00547
VUID-vkCmdDrawIndexedIndirect-None-00550
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-00550)
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-01503)
VUID-vkCmdDrawIndexedIndirect-None-01503
VUID-vkCmdDrawIndexedIndirect-None-02018
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-02018)
VUID-vkCmdDrawIndexedIndirect-None-02019
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-None-02019)
VUID-vkCmdDrawIndexedIndirect-buffer-00526
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-buffer-00526)
buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-buffer-01665)
VUID-vkCmdDrawIndexedIndirect-buffer-01665
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-buffer-parameter)
VUID-vkCmdDrawIndexedIndirect-buffer-parameter
VUID-vkCmdDrawIndexedIndirect-commandBuffer-01862
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-commandBuffer-01862)
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-commandBuffer-01863)
VUID-vkCmdDrawIndexedIndirect-commandBuffer-01863
VUID-vkCmdDrawIndexedIndirect-commandBuffer-01864
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-commandBuffer-01864)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-commandBuffer-cmdpool)
VUID-vkCmdDrawIndexedIndirect-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-commandBuffer-parameter)
VUID-vkCmdDrawIndexedIndirect-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-commandBuffer-recording)
VUID-vkCmdDrawIndexedIndirect-commandBuffer-recording
Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-commonparent)
VUID-vkCmdDrawIndexedIndirect-commonparent
If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndexedIndirectCommand) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-drawCount-00528)
VUID-vkCmdDrawIndexedIndirect-drawCount-00528
VUID-vkCmdDrawIndexedIndirect-drawCount-00529
If the multi-draw indirect feature is not enabled, drawCount must be 0 or 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-drawCount-00529)
If drawCount is equal to 1, (offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-drawCount-00539)
VUID-vkCmdDrawIndexedIndirect-drawCount-00539
VUID-vkCmdDrawIndexedIndirect-drawCount-00540
If drawCount is greater than 1, (stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-drawCount-00540)
VUID-vkCmdDrawIndexedIndirect-drawCount-00541
drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-drawCount-00541)
VUID-vkCmdDrawIndexedIndirect-firstInstance-00530
If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-firstInstance-00530)
VUID-vkCmdDrawIndexedIndirect-maxMultiviewInstanceIndex-00551
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-maxMultiviewInstanceIndex-00551)
VUID-vkCmdDrawIndexedIndirect-offset-00527
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-offset-00527)
VUID-vkCmdDrawIndexedIndirect-renderPass-00531
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-renderPass-00531)
VUID-vkCmdDrawIndexedIndirect-renderpass
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-renderpass)
VUID-vkCmdDrawIndexedIndirect-sampleLocationsEnable-01516
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-sampleLocationsEnable-01516)
VUID-vkCmdDrawIndexedIndirect-subpass-00532
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirect-subpass-00532)
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00562)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00562
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00563)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00563
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00564)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00564
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00565)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00565
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00566)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00566
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00567)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00567
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00571)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00571
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00572)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00572
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00573)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00573
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00574)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00574
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00575)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00575
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-00576)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-00576
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-01504)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-01504
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-None-02022)
VUID-vkCmdDrawIndexedIndirectCountAMD-None-02022
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-01666)
VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-01666
buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-01667)
VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-01667
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-parameter)
VUID-vkCmdDrawIndexedIndirectCountAMD-buffer-parameter
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-01865)
VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-01865
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-01866)
VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-01866
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-01867)
VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-01867
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-cmdpool)
VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-parameter)
VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-recording)
VUID-vkCmdDrawIndexedIndirectCountAMD-commandBuffer-recording
Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-commonparent)
VUID-vkCmdDrawIndexedIndirectCountAMD-commonparent
If count stored in countBuffer is equal to 1, (offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-00568)
VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-00568
If count stored in countBuffer is greater than 1, (stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-00569)
VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-00569
If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-01668)
VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-01668
countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-01669)
VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-01669
countBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-parameter)
VUID-vkCmdDrawIndexedIndirectCountAMD-countBuffer-parameter
countBufferOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-countBufferOffset-00556)
VUID-vkCmdDrawIndexedIndirectCountAMD-countBufferOffset-00556
drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-drawCount-00570)
VUID-vkCmdDrawIndexedIndirectCountAMD-drawCount-00570
If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-firstInstance-00559)
VUID-vkCmdDrawIndexedIndirectCountAMD-firstInstance-00559
If maxDrawCount is greater than or equal to 1, (stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-maxDrawCount-00558)
VUID-vkCmdDrawIndexedIndirectCountAMD-maxDrawCount-00558
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-maxMultiviewInstanceIndex-00578)
VUID-vkCmdDrawIndexedIndirectCountAMD-maxMultiviewInstanceIndex-00578
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-offset-00555)
VUID-vkCmdDrawIndexedIndirectCountAMD-offset-00555
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-renderPass-00560)
VUID-vkCmdDrawIndexedIndirectCountAMD-renderPass-00560
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-renderpass)
VUID-vkCmdDrawIndexedIndirectCountAMD-renderpass
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-sampleLocationsEnable-01517)
VUID-vkCmdDrawIndexedIndirectCountAMD-sampleLocationsEnable-01517
stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndexedIndirectCommand) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-stride-00557)
VUID-vkCmdDrawIndexedIndirectCountAMD-stride-00557
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountAMD-subpass-00561)
VUID-vkCmdDrawIndexedIndirectCountAMD-subpass-00561
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-02020)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-02020
VUID-vkCmdDrawIndexedIndirectCountKHR-None-02021
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-02021)
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03147)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03147
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03148)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03148
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03149)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03149
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03150)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03150
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03151)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03151
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03152)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03152
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03156)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03156
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03157)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03157
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03158)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03158
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03159)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03159
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03160)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03160
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03161)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03161
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03163)
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03163
VUID-vkCmdDrawIndexedIndirectCountKHR-None-03173
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-None-03173)
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-03136)
VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-03136
buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-03137)
VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-03137
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-parameter)
VUID-vkCmdDrawIndexedIndirectCountKHR-buffer-parameter
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-03165)
VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-03165
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-03166)
VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-03166
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-03167)
VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-03167
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-cmdpool)
VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-parameter)
VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-recording)
VUID-vkCmdDrawIndexedIndirectCountKHR-commandBuffer-recording
Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-commonparent)
VUID-vkCmdDrawIndexedIndirectCountKHR-commonparent
If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03138)
VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03138
countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03139)
VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03139
If count stored in countBuffer is equal to 1, (offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03153)
VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03153
If count stored in countBuffer is greater than 1, (stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03154)
VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-03154
countBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-parameter)
VUID-vkCmdDrawIndexedIndirectCountKHR-countBuffer-parameter
countBufferOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-countBufferOffset-03141)
VUID-vkCmdDrawIndexedIndirectCountKHR-countBufferOffset-03141
drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-drawCount-03155)
VUID-vkCmdDrawIndexedIndirectCountKHR-drawCount-03155
If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-firstInstance-03144)
VUID-vkCmdDrawIndexedIndirectCountKHR-firstInstance-03144
If maxDrawCount is greater than or equal to 1, (stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-maxDrawCount-03143)
VUID-vkCmdDrawIndexedIndirectCountKHR-maxDrawCount-03143
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-maxMultiviewInstanceIndex-03164)
VUID-vkCmdDrawIndexedIndirectCountKHR-maxMultiviewInstanceIndex-03164
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-offset-03140)
VUID-vkCmdDrawIndexedIndirectCountKHR-offset-03140
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-renderPass-03145)
VUID-vkCmdDrawIndexedIndirectCountKHR-renderPass-03145
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-renderpass)
VUID-vkCmdDrawIndexedIndirectCountKHR-renderpass
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-sampleLocationsEnable-03174)
VUID-vkCmdDrawIndexedIndirectCountKHR-sampleLocationsEnable-03174
stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndexedIndirectCommand) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-stride-03142)
VUID-vkCmdDrawIndexedIndirectCountKHR-stride-03142
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndexedIndirectCountKHR-subpass-03146)
VUID-vkCmdDrawIndexedIndirectCountKHR-subpass-03146
VUID-vkCmdDrawIndirect-None-00481
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00481)
VUID-vkCmdDrawIndirect-None-00482
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00482)
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00483)
VUID-vkCmdDrawIndirect-None-00483
VUID-vkCmdDrawIndirect-None-00484
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00484)
VUID-vkCmdDrawIndirect-None-00485
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00485)
VUID-vkCmdDrawIndirect-None-00486
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00486)
VUID-vkCmdDrawIndirect-None-00490
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00490)
VUID-vkCmdDrawIndirect-None-00491
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00491)
VUID-vkCmdDrawIndirect-None-00492
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00492)
VUID-vkCmdDrawIndirect-None-00493
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00493)
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00494)
VUID-vkCmdDrawIndirect-None-00494
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00495)
VUID-vkCmdDrawIndirect-None-00495
VUID-vkCmdDrawIndirect-None-00498
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-00498)
VUID-vkCmdDrawIndirect-None-01501
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-01501)
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-02013)
VUID-vkCmdDrawIndirect-None-02013
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-None-02014)
VUID-vkCmdDrawIndirect-None-02014
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-buffer-00474)
VUID-vkCmdDrawIndirect-buffer-00474
VUID-vkCmdDrawIndirect-buffer-01660
buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-buffer-01660)
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-buffer-parameter)
VUID-vkCmdDrawIndirect-buffer-parameter
VUID-vkCmdDrawIndirect-commandBuffer-01856
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-commandBuffer-01856)
VUID-vkCmdDrawIndirect-commandBuffer-01857
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-commandBuffer-01857)
VUID-vkCmdDrawIndirect-commandBuffer-01858
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-commandBuffer-01858)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-commandBuffer-cmdpool)
VUID-vkCmdDrawIndirect-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-commandBuffer-parameter)
VUID-vkCmdDrawIndirect-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-commandBuffer-recording)
VUID-vkCmdDrawIndirect-commandBuffer-recording
VUID-vkCmdDrawIndirect-commonparent
Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-commonparent)
If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-drawCount-00476)
VUID-vkCmdDrawIndirect-drawCount-00476
If the multi-draw indirect feature is not enabled, drawCount must be 0 or 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-drawCount-00477)
VUID-vkCmdDrawIndirect-drawCount-00477
VUID-vkCmdDrawIndirect-drawCount-00487
If drawCount is equal to 1, (offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-drawCount-00487)
VUID-vkCmdDrawIndirect-drawCount-00488
If drawCount is greater than 1, (stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-drawCount-00488)
drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-drawCount-00489)
VUID-vkCmdDrawIndirect-drawCount-00489
VUID-vkCmdDrawIndirect-firstInstance-00478
If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-firstInstance-00478)
VUID-vkCmdDrawIndirect-maxMultiviewInstanceIndex-00499
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-maxMultiviewInstanceIndex-00499)
VUID-vkCmdDrawIndirect-offset-00475
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-offset-00475)
VUID-vkCmdDrawIndirect-renderPass-00479
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-renderPass-00479)
VUID-vkCmdDrawIndirect-renderpass
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-renderpass)
VUID-vkCmdDrawIndirect-sampleLocationsEnable-01514
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-sampleLocationsEnable-01514)
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirect-subpass-00480)
VUID-vkCmdDrawIndirect-subpass-00480
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00509)
VUID-vkCmdDrawIndirectCountAMD-None-00509
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00510)
VUID-vkCmdDrawIndirectCountAMD-None-00510
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00511)
VUID-vkCmdDrawIndirectCountAMD-None-00511
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00512)
VUID-vkCmdDrawIndirectCountAMD-None-00512
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00513)
VUID-vkCmdDrawIndirectCountAMD-None-00513
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00514)
VUID-vkCmdDrawIndirectCountAMD-None-00514
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00518)
VUID-vkCmdDrawIndirectCountAMD-None-00518
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00519)
VUID-vkCmdDrawIndirectCountAMD-None-00519
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00520)
VUID-vkCmdDrawIndirectCountAMD-None-00520
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00521)
VUID-vkCmdDrawIndirectCountAMD-None-00521
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00522)
VUID-vkCmdDrawIndirectCountAMD-None-00522
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-00523)
VUID-vkCmdDrawIndirectCountAMD-None-00523
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-01502)
VUID-vkCmdDrawIndirectCountAMD-None-01502
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-None-02017)
VUID-vkCmdDrawIndirectCountAMD-None-02017
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-buffer-01661)
VUID-vkCmdDrawIndirectCountAMD-buffer-01661
buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-buffer-01662)
VUID-vkCmdDrawIndirectCountAMD-buffer-01662
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-buffer-parameter)
VUID-vkCmdDrawIndirectCountAMD-buffer-parameter
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-commandBuffer-01859)
VUID-vkCmdDrawIndirectCountAMD-commandBuffer-01859
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-commandBuffer-01860)
VUID-vkCmdDrawIndirectCountAMD-commandBuffer-01860
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-commandBuffer-01861)
VUID-vkCmdDrawIndirectCountAMD-commandBuffer-01861
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-commandBuffer-cmdpool)
VUID-vkCmdDrawIndirectCountAMD-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-commandBuffer-parameter)
VUID-vkCmdDrawIndirectCountAMD-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-commandBuffer-recording)
VUID-vkCmdDrawIndirectCountAMD-commandBuffer-recording
Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-commonparent)
VUID-vkCmdDrawIndirectCountAMD-commonparent
If the count stored in countBuffer is equal to 1, (offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-countBuffer-00515)
VUID-vkCmdDrawIndirectCountAMD-countBuffer-00515
If the count stored in countBuffer is greater than 1, (stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-countBuffer-00516)
VUID-vkCmdDrawIndirectCountAMD-countBuffer-00516
The count stored in countBuffer must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-countBuffer-00517)
VUID-vkCmdDrawIndirectCountAMD-countBuffer-00517
If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-countBuffer-01663)
VUID-vkCmdDrawIndirectCountAMD-countBuffer-01663
countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-countBuffer-01664)
VUID-vkCmdDrawIndirectCountAMD-countBuffer-01664
countBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-countBuffer-parameter)
VUID-vkCmdDrawIndirectCountAMD-countBuffer-parameter
countBufferOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-countBufferOffset-00503)
VUID-vkCmdDrawIndirectCountAMD-countBufferOffset-00503
If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-firstInstance-00506)
VUID-vkCmdDrawIndirectCountAMD-firstInstance-00506
If maxDrawCount is greater than or equal to 1, (stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-maxDrawCount-00505)
VUID-vkCmdDrawIndirectCountAMD-maxDrawCount-00505
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-maxMultiviewInstanceIndex-00525)
VUID-vkCmdDrawIndirectCountAMD-maxMultiviewInstanceIndex-00525
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-offset-00502)
VUID-vkCmdDrawIndirectCountAMD-offset-00502
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-renderPass-00507)
VUID-vkCmdDrawIndirectCountAMD-renderPass-00507
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-renderpass)
VUID-vkCmdDrawIndirectCountAMD-renderpass
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-sampleLocationsEnable-01515)
VUID-vkCmdDrawIndirectCountAMD-sampleLocationsEnable-01515
stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-stride-00504)
VUID-vkCmdDrawIndirectCountAMD-stride-00504
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountAMD-subpass-00508)
VUID-vkCmdDrawIndirectCountAMD-subpass-00508
If a VkImageView is sampled with with VK_FILTER_LINEAR as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-02015)
VUID-vkCmdDrawIndirectCountKHR-None-02015
VUID-vkCmdDrawIndirectCountKHR-None-02016
If a VkImageView is sampled with with VK_FILTER_CUBIC_IMG as a result of this command, then the image view's format features must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-02016)
For each set n that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03115)
VUID-vkCmdDrawIndirectCountKHR-None-03115
For each push constant that is statically used by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in Pipeline Layout Compatibility (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03116)
VUID-vkCmdDrawIndirectCountKHR-None-03116
Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the bound VkPipeline object, specified via vkCmdBindPipeline (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03117)
VUID-vkCmdDrawIndirectCountKHR-None-03117
All vertex input bindings accessed via vertex input variables declared in the vertex shader entry point's interface must have valid buffers bound (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03118)
VUID-vkCmdDrawIndirectCountKHR-None-03118
A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03119)
VUID-vkCmdDrawIndirectCountKHR-None-03119
If the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03120)
VUID-vkCmdDrawIndirectCountKHR-None-03120
Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03124)
VUID-vkCmdDrawIndirectCountKHR-None-03124
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03125)
VUID-vkCmdDrawIndirectCountKHR-None-03125
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03126)
VUID-vkCmdDrawIndirectCountKHR-None-03126
If any VkSampler object that is accessed from a shader by the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03127)
VUID-vkCmdDrawIndirectCountKHR-None-03127
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03128)
VUID-vkCmdDrawIndirectCountKHR-None-03128
If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the bound descriptor set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03129)
VUID-vkCmdDrawIndirectCountKHR-None-03129
Image subresources used as attachments in the current render pass must not be accessed in any way other than as an attachment by this command. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03131)
VUID-vkCmdDrawIndirectCountKHR-None-03131
VUID-vkCmdDrawIndirectCountKHR-None-03170
Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-None-03170)
If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-buffer-03104)
VUID-vkCmdDrawIndirectCountKHR-buffer-03104
buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-buffer-03105)
VUID-vkCmdDrawIndirectCountKHR-buffer-03105
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-buffer-parameter)
VUID-vkCmdDrawIndirectCountKHR-buffer-parameter
If commandBuffer is an unprotected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, that image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-commandBuffer-03133)
VUID-vkCmdDrawIndirectCountKHR-commandBuffer-03133
If commandBuffer is a protected command buffer, and any pipeline stage in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS writes to any image or buffer, that image or buffer must not be an unprotected image or unprotected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-commandBuffer-03134)
VUID-vkCmdDrawIndirectCountKHR-commandBuffer-03134
If commandBuffer is a protected command buffer, and any pipeline stage other than the framebuffer-space pipeline stages in the VkPipeline object bound to VK_PIPELINE_BIND_POINT_GRAPHICS reads from or writes to any image or buffer, the image or buffer must not be a protected image or protected buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-commandBuffer-03135)
VUID-vkCmdDrawIndirectCountKHR-commandBuffer-03135
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-commandBuffer-cmdpool)
VUID-vkCmdDrawIndirectCountKHR-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-commandBuffer-parameter)
VUID-vkCmdDrawIndirectCountKHR-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-commandBuffer-recording)
VUID-vkCmdDrawIndirectCountKHR-commandBuffer-recording
Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-commonparent)
VUID-vkCmdDrawIndirectCountKHR-commonparent
If countBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-countBuffer-03106)
VUID-vkCmdDrawIndirectCountKHR-countBuffer-03106
countBuffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-countBuffer-03107)
VUID-vkCmdDrawIndirectCountKHR-countBuffer-03107
If the count stored in countBuffer is equal to 1, (offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-countBuffer-03121)
VUID-vkCmdDrawIndirectCountKHR-countBuffer-03121
If the count stored in countBuffer is greater than 1, (stride {times} (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-countBuffer-03122)
VUID-vkCmdDrawIndirectCountKHR-countBuffer-03122
The count stored in countBuffer must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-countBuffer-03123)
VUID-vkCmdDrawIndirectCountKHR-countBuffer-03123
countBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-countBuffer-parameter)
VUID-vkCmdDrawIndirectCountKHR-countBuffer-parameter
countBufferOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-countBufferOffset-03109)
VUID-vkCmdDrawIndirectCountKHR-countBufferOffset-03109
If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-firstInstance-03112)
VUID-vkCmdDrawIndirectCountKHR-firstInstance-03112
If maxDrawCount is greater than or equal to 1, (stride {times} (maxDrawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-maxDrawCount-03111)
VUID-vkCmdDrawIndirectCountKHR-maxDrawCount-03111
If the draw is recorded in a render pass instance with multiview enabled, the maximum instance index must be less than or equal to VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-maxMultiviewInstanceIndex-03132)
VUID-vkCmdDrawIndirectCountKHR-maxMultiviewInstanceIndex-03132
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-offset-03108)
VUID-vkCmdDrawIndirectCountKHR-offset-03108
The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-renderPass-03113)
VUID-vkCmdDrawIndirectCountKHR-renderPass-03113
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-renderpass)
VUID-vkCmdDrawIndirectCountKHR-renderpass
If the bound graphics pipeline was created with VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable set to VK_TRUE and the current subpass has a depth/stencil attachment, then that attachment must have been created with the VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-sampleLocationsEnable-03171)
VUID-vkCmdDrawIndirectCountKHR-sampleLocationsEnable-03171
stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand) (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-stride-03110)
VUID-vkCmdDrawIndirectCountKHR-stride-03110
The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline bound to VK_PIPELINE_BIND_POINT_GRAPHICS. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdDrawIndirectCountKHR-subpass-03114)
VUID-vkCmdDrawIndirectCountKHR-subpass-03114
Conditional rendering must be active (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndConditionalRenderingEXT-None-01985)
VUID-vkCmdEndConditionalRenderingEXT-None-01985
If conditional rendering was made active outside of a render pass instance, it must not be ended inside a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndConditionalRenderingEXT-None-01986)
VUID-vkCmdEndConditionalRenderingEXT-None-01986
If conditional rendering was made active within a subpass it must be ended in the same subpass (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndConditionalRenderingEXT-None-01987)
VUID-vkCmdEndConditionalRenderingEXT-None-01987
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-cmdpool)
VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-parameter)
VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-recording)
VUID-vkCmdEndConditionalRenderingEXT-commandBuffer-recording
VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01912
There must be an outstanding vkCmdBeginDebugUtilsLabelEXT command prior to the vkCmdEndDebugUtilsLabelEXT on the queue that commandBuffer is submitted to (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01912)
VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01913
If commandBuffer is a secondary command buffer, there must be an outstanding vkCmdBeginDebugUtilsLabelEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdEndDebugUtilsLabelEXT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01913)
VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-parameter)
VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-recording)
VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-recording
All queries used by the command must be active (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-None-01923)
commandBuffer must not be a protected command buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-commandBuffer-01886)
VUID-vkCmdEndQuery-commandBuffer-01886
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-commandBuffer-cmdpool)
VUID-vkCmdEndQuery-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-commandBuffer-parameter)
VUID-vkCmdEndQuery-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-commandBuffer-recording)
VUID-vkCmdEndQuery-commandBuffer-recording
VUID-vkCmdEndQuery-commonparent
Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-commonparent)
VUID-vkCmdEndQuery-query-00810
query must be less than the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-query-00810)
VUID-vkCmdEndQuery-query-00812
If vkCmdEndQuery is called within a render pass instance, the sum of query and the number of bits set in the current subpass's view mask must be less than or equal to the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-query-00812)
queryPool must be a valid VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndQuery-queryPool-parameter)
VUID-vkCmdEndQuery-queryPool-parameter
VUID-vkCmdEndRenderPass-None-00910
The current subpass index must be equal to the number of subpasses in the render pass minus one (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass-None-00910)
VUID-vkCmdEndRenderPass-bufferlevel
commandBuffer must be a primary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass-bufferlevel)
VUID-vkCmdEndRenderPass-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass-commandBuffer-parameter)
VUID-vkCmdEndRenderPass-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass-commandBuffer-recording)
VUID-vkCmdEndRenderPass-commandBuffer-recording
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass-renderpass)
VUID-vkCmdEndRenderPass-renderpass
VUID-vkCmdEndRenderPass2KHR-None-03103
The current subpass index must be equal to the number of subpasses in the render pass minus one (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass2KHR-None-03103)
VUID-vkCmdEndRenderPass2KHR-bufferlevel
commandBuffer must be a primary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass2KHR-bufferlevel)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass2KHR-commandBuffer-cmdpool)
VUID-vkCmdEndRenderPass2KHR-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass2KHR-commandBuffer-parameter)
VUID-vkCmdEndRenderPass2KHR-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass2KHR-commandBuffer-recording)
VUID-vkCmdEndRenderPass2KHR-commandBuffer-recording
pSubpassEndInfo must be a valid pointer to a valid VkSubpassEndInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass2KHR-pSubpassEndInfo-parameter)
VUID-vkCmdEndRenderPass2KHR-pSubpassEndInfo-parameter
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdEndRenderPass2KHR-renderpass)
VUID-vkCmdEndRenderPass2KHR-renderpass
commandBuffer must be a primary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-bufferlevel)
VUID-vkCmdExecuteCommands-bufferlevel
commandBuffer must have been allocated with a level of VK_COMMAND_BUFFER_LEVEL_PRIMARY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-00087)
VUID-vkCmdExecuteCommands-commandBuffer-00087
VUID-vkCmdExecuteCommands-commandBuffer-00101
If the inherited queries feature is not enabled, commandBuffer must not have any queries active (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-00101)
VUID-vkCmdExecuteCommands-commandBuffer-00102
If commandBuffer has a VK_QUERY_TYPE_OCCLUSION query active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::occlusionQueryEnable set to VK_TRUE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-00102)
VUID-vkCmdExecuteCommands-commandBuffer-00103
If commandBuffer has a VK_QUERY_TYPE_OCCLUSION query active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::queryFlags having all bits set that are set for the query (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-00103)
VUID-vkCmdExecuteCommands-commandBuffer-00104
If commandBuffer has a VK_QUERY_TYPE_PIPELINE_STATISTICS query active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::pipelineStatistics having all bits set that are set in the VkQueryPool the query uses (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-00104)
VUID-vkCmdExecuteCommands-commandBuffer-01820
If commandBuffer is a protected command buffer, then each element of pCommandBuffers must be a protected command buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-01820)
If commandBuffer is an unprotected command buffer, then each element of pCommandBuffers must be an unprotected command buffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-01821)
VUID-vkCmdExecuteCommands-commandBuffer-01821
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-cmdpool)
VUID-vkCmdExecuteCommands-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-parameter)
VUID-vkCmdExecuteCommands-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBuffer-recording)
VUID-vkCmdExecuteCommands-commandBuffer-recording
commandBufferCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commandBufferCount-arraylength)
VUID-vkCmdExecuteCommands-commandBufferCount-arraylength
Both of commandBuffer, and the elements of pCommandBuffers must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-commonparent)
VUID-vkCmdExecuteCommands-commonparent
If vkCmdExecuteCommands is being called within a render pass instance, that render pass instance must have been begun with the contents parameter of vkCmdBeginRenderPass set to VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-contents-00095)
VUID-vkCmdExecuteCommands-contents-00095
VUID-vkCmdExecuteCommands-pCommandBuffers-00088
Each element of pCommandBuffers must have been allocated with a level of VK_COMMAND_BUFFER_LEVEL_SECONDARY (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00088)
VUID-vkCmdExecuteCommands-pCommandBuffers-00089
Each element of pCommandBuffers must be in the pending or executable state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00089)
VUID-vkCmdExecuteCommands-pCommandBuffers-00090
If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, and it was recorded into any other primary command buffer, that primary command buffer must not be in the pending state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00090)
VUID-vkCmdExecuteCommands-pCommandBuffers-00091
If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, it must not be in the pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00091)
VUID-vkCmdExecuteCommands-pCommandBuffers-00092
If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, it must not have already been recorded to commandBuffer. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00092)
VUID-vkCmdExecuteCommands-pCommandBuffers-00093
If any element of pCommandBuffers was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag, it must not appear more than once in pCommandBuffers. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00093)
Each element of pCommandBuffers must have been allocated from a VkCommandPool that was created for the same queue family as the VkCommandPool from which commandBuffer was allocated (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00094)
VUID-vkCmdExecuteCommands-pCommandBuffers-00094
If vkCmdExecuteCommands is being called within a render pass instance, each element of pCommandBuffers must have been recorded with the VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00096)
VUID-vkCmdExecuteCommands-pCommandBuffers-00096
VUID-vkCmdExecuteCommands-pCommandBuffers-00097
If vkCmdExecuteCommands is being called within a render pass instance, each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::subpass set to the index of the subpass which the given command buffer will be executed in (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00097)
VUID-vkCmdExecuteCommands-pCommandBuffers-00099
If vkCmdExecuteCommands is being called within a render pass instance, and any element of pCommandBuffers was recorded with VkCommandBufferInheritanceInfo::framebuffer not equal to VK_NULL_HANDLE, that VkFramebuffer must match the VkFramebuffer used in the current render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00099)
VUID-vkCmdExecuteCommands-pCommandBuffers-00100
If vkCmdExecuteCommands is not being called within a render pass instance, each element of pCommandBuffers must not have been recorded with the VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00100)
VUID-vkCmdExecuteCommands-pCommandBuffers-00105
Each element of pCommandBuffers must not begin any query types that are active in commandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-00105)
VUID-vkCmdExecuteCommands-pCommandBuffers-parameter
pCommandBuffers must be a valid pointer to an array of commandBufferCount valid VkCommandBuffer handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pCommandBuffers-parameter)
VUID-vkCmdExecuteCommands-pInheritanceInfo-00098
If vkCmdExecuteCommands is being called within a render pass instance, the render passes specified in the pBeginInfo::pInheritanceInfo::renderPass members of the vkBeginCommandBuffer commands used to begin recording each element of pCommandBuffers must be compatible with the current render pass. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdExecuteCommands-pInheritanceInfo-00098)
VUID-vkCmdFillBuffer-commandBuffer-00030
The VkCommandPool that commandBuffer was allocated from must support graphics or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-commandBuffer-00030)
If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-commandBuffer-01811)
VUID-vkCmdFillBuffer-commandBuffer-01811
If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-commandBuffer-01812)
VUID-vkCmdFillBuffer-commandBuffer-01812
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-commandBuffer-cmdpool)
VUID-vkCmdFillBuffer-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-commandBuffer-parameter)
VUID-vkCmdFillBuffer-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-commandBuffer-recording)
VUID-vkCmdFillBuffer-commandBuffer-recording
Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-commonparent)
VUID-vkCmdFillBuffer-commonparent
dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-dstBuffer-00029)
VUID-vkCmdFillBuffer-dstBuffer-00029
If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-dstBuffer-00031)
VUID-vkCmdFillBuffer-dstBuffer-00031
dstBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-dstBuffer-parameter)
VUID-vkCmdFillBuffer-dstBuffer-parameter
VUID-vkCmdFillBuffer-dstOffset-00024
dstOffset must be less than the size of dstBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-dstOffset-00024)
VUID-vkCmdFillBuffer-dstOffset-00025
dstOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-dstOffset-00025)
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-renderpass)
VUID-vkCmdFillBuffer-renderpass
If size is not equal to VK_WHOLE_SIZE, size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-size-00026)
VUID-vkCmdFillBuffer-size-00026
If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to the size of dstBuffer minus dstOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-size-00027)
VUID-vkCmdFillBuffer-size-00027
VUID-vkCmdFillBuffer-size-00028
If size is not equal to VK_WHOLE_SIZE, size must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdFillBuffer-size-00028)
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-cmdpool)
VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-cmdpool
VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-parameter
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-parameter)
VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-recording
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdInsertDebugUtilsLabelEXT-commandBuffer-recording)
pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdInsertDebugUtilsLabelEXT-pLabelInfo-parameter)
VUID-vkCmdInsertDebugUtilsLabelEXT-pLabelInfo-parameter
VUID-vkCmdNextSubpass-None-00909
The current subpass index must be less than the number of subpasses in the render pass minus one (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass-None-00909)
VUID-vkCmdNextSubpass-bufferlevel
commandBuffer must be a primary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass-bufferlevel)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass-commandBuffer-cmdpool)
VUID-vkCmdNextSubpass-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass-commandBuffer-parameter)
VUID-vkCmdNextSubpass-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass-commandBuffer-recording)
VUID-vkCmdNextSubpass-commandBuffer-recording
VUID-vkCmdNextSubpass-contents-parameter
contents must be a valid VkSubpassContents value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass-contents-parameter)
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass-renderpass)
VUID-vkCmdNextSubpass-renderpass
VUID-vkCmdNextSubpass2KHR-None-03102
The current subpass index must be less than the number of subpasses in the render pass minus one (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-None-03102)
commandBuffer must be a primary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-bufferlevel)
VUID-vkCmdNextSubpass2KHR-bufferlevel
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-commandBuffer-cmdpool)
VUID-vkCmdNextSubpass2KHR-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-commandBuffer-parameter)
VUID-vkCmdNextSubpass2KHR-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-commandBuffer-recording)
VUID-vkCmdNextSubpass2KHR-commandBuffer-recording
pSubpassBeginInfo must be a valid pointer to a valid VkSubpassBeginInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-pSubpassBeginInfo-parameter)
VUID-vkCmdNextSubpass2KHR-pSubpassBeginInfo-parameter
VUID-vkCmdNextSubpass2KHR-pSubpassEndInfo-parameter
pSubpassEndInfo must be a valid pointer to a valid VkSubpassEndInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-pSubpassEndInfo-parameter)
VUID-vkCmdNextSubpass2KHR-renderpass
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdNextSubpass2KHR-renderpass)
VUID-vkCmdPipelineBarrier-bufferMemoryBarrierCount-01178
If vkCmdPipelineBarrier is called within a render pass instance, bufferMemoryBarrierCount must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-bufferMemoryBarrierCount-01178)
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-commandBuffer-cmdpool)
VUID-vkCmdPipelineBarrier-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-commandBuffer-parameter)
VUID-vkCmdPipelineBarrier-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-commandBuffer-recording)
VUID-vkCmdPipelineBarrier-commandBuffer-recording
VUID-vkCmdPipelineBarrier-dependencyFlags-01186
If vkCmdPipelineBarrier is called outside of a render pass instance, dependencyFlags must not include VK_DEPENDENCY_VIEW_LOCAL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-dependencyFlags-01186)
dependencyFlags must be a valid combination of VkDependencyFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-dependencyFlags-parameter)
VUID-vkCmdPipelineBarrier-dependencyFlags-parameter
If the geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-dstStageMask-01169)
VUID-vkCmdPipelineBarrier-dstStageMask-01169
If the tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-dstStageMask-01171)
VUID-vkCmdPipelineBarrier-dstStageMask-01171
dstStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-dstStageMask-parameter)
VUID-vkCmdPipelineBarrier-dstStageMask-parameter
dstStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-dstStageMask-requiredbitmask)
VUID-vkCmdPipelineBarrier-dstStageMask-requiredbitmask
VUID-vkCmdPipelineBarrier-image-01179
If vkCmdPipelineBarrier is called within a render pass instance, the image member of any element of pImageMemoryBarriers must be equal to one of the elements of pAttachments that the current framebuffer was created with, that is also referred to by one of the elements of the pColorAttachments, pResolveAttachments or pDepthStencilAttachment members of the VkSubpassDescription instance that the current subpass was created with (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-image-01179)
VUID-vkCmdPipelineBarrier-oldLayout-01180
If vkCmdPipelineBarrier is called within a render pass instance, the oldLayout and newLayout members of any element of pImageMemoryBarriers must be equal to the layout member of an element of the pColorAttachments, pResolveAttachments or pDepthStencilAttachment members of the VkSubpassDescription instance that the current subpass was created with, that refers to the same image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-oldLayout-01180)
VUID-vkCmdPipelineBarrier-oldLayout-01181
If vkCmdPipelineBarrier is called within a render pass instance, the oldLayout and newLayout members of an element of pImageMemoryBarriers must be equal (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-oldLayout-01181)
VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-parameter
If bufferMemoryBarrierCount is not 0, pBufferMemoryBarriers must be a valid pointer to an array of bufferMemoryBarrierCount valid VkBufferMemoryBarrier structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-parameter)
VUID-vkCmdPipelineBarrier-pDependencies-02024
If vkCmdPipelineBarrier is called within a render pass instance, the render pass must have been created with at least one VkSubpassDependency instance in VkRenderPassCreateInfo::pDependencies that expresses a dependency from the current subpass to itself, and for which srcStageMask contains a subset of the bit values in VkSubpassDependency::srcStageMask, dstStageMask contains a subset of the bit values in VkSubpassDependency::dstStageMask, and dependencyFlags is equal to VkSubpassDependency::dependencyFlags. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-pDependencies-02024)
VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-parameter
If imageMemoryBarrierCount is not 0, pImageMemoryBarriers must be a valid pointer to an array of imageMemoryBarrierCount valid VkImageMemoryBarrier structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-parameter)
Each element of pMemoryBarriers, pBufferMemoryBarriers and pImageMemoryBarriers must not have any access flag included in its srcAccessMask member if that bit is not supported by any of the pipeline stages in srcStageMask, as specified in the table of supported access types. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-pMemoryBarriers-01184)
VUID-vkCmdPipelineBarrier-pMemoryBarriers-01184
Each element of pMemoryBarriers, pBufferMemoryBarriers and pImageMemoryBarriers must not have any access flag included in its dstAccessMask member if that bit is not supported by any of the pipeline stages in dstStageMask, as specified in the table of supported access types. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-pMemoryBarriers-01185)
VUID-vkCmdPipelineBarrier-pMemoryBarriers-01185
VUID-vkCmdPipelineBarrier-pMemoryBarriers-parameter
If memoryBarrierCount is not 0, pMemoryBarriers must be a valid pointer to an array of memoryBarrierCount valid VkMemoryBarrier structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-pMemoryBarriers-parameter)
VUID-vkCmdPipelineBarrier-srcQueueFamilyIndex-01182
If vkCmdPipelineBarrier is called within a render pass instance, the srcQueueFamilyIndex and dstQueueFamilyIndex members of any element of pImageMemoryBarriers must be VK_QUEUE_FAMILY_IGNORED (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-srcQueueFamilyIndex-01182)
If the geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-srcStageMask-01168)
VUID-vkCmdPipelineBarrier-srcStageMask-01168
If the tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-srcStageMask-01170)
VUID-vkCmdPipelineBarrier-srcStageMask-01170
VUID-vkCmdPipelineBarrier-srcStageMask-01183
Any pipeline stage included in srcStageMask or dstStageMask must be supported by the capabilities of the queue family specified by the queueFamilyIndex member of the VkCommandPoolCreateInfo structure that was used to create the VkCommandPool that commandBuffer was allocated from, as specified in the table of supported pipeline stages. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-srcStageMask-01183)
srcStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-srcStageMask-parameter)
VUID-vkCmdPipelineBarrier-srcStageMask-parameter
srcStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPipelineBarrier-srcStageMask-requiredbitmask)
VUID-vkCmdPipelineBarrier-srcStageMask-requiredbitmask
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdProcessCommandsNVX-commandBuffer-cmdpool)
VUID-vkCmdProcessCommandsNVX-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdProcessCommandsNVX-commandBuffer-parameter)
VUID-vkCmdProcessCommandsNVX-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdProcessCommandsNVX-commandBuffer-recording)
VUID-vkCmdProcessCommandsNVX-commandBuffer-recording
pProcessCommandsInfo must be a valid pointer to a valid VkCmdProcessCommandsInfoNVX structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdProcessCommandsNVX-pProcessCommandsInfo-parameter)
VUID-vkCmdProcessCommandsNVX-pProcessCommandsInfo-parameter
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdProcessCommandsNVX-renderpass)
VUID-vkCmdProcessCommandsNVX-renderpass
VUID-vkCmdPushConstants-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-commandBuffer-parameter)
VUID-vkCmdPushConstants-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-commandBuffer-recording)
VUID-vkCmdPushConstants-commandBuffer-recording
VUID-vkCmdPushConstants-commonparent
Both of commandBuffer, and layout must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-commonparent)
VUID-vkCmdPushConstants-layout-parameter
layout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-layout-parameter)
VUID-vkCmdPushConstants-offset-00368
offset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-00368)
offset must be less than VkPhysicalDeviceLimits::maxPushConstantsSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-00370)
VUID-vkCmdPushConstants-offset-00370
VUID-vkCmdPushConstants-offset-01795
For each byte in the range specified by offset and size and for each shader stage in stageFlags, there must be a push constant range in layout that includes that byte and that stage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01795)
VUID-vkCmdPushConstants-offset-01796
For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-offset-01796)
pValues must be a valid pointer to an array of size bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-pValues-parameter)
VUID-vkCmdPushConstants-pValues-parameter
VUID-vkCmdPushConstants-size-00369
size must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-size-00369)
VUID-vkCmdPushConstants-size-00371
size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-size-00371)
size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-size-arraylength)
VUID-vkCmdPushConstants-size-arraylength
stageFlags must be a valid combination of VkShaderStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-stageFlags-parameter)
VUID-vkCmdPushConstants-stageFlags-parameter
stageFlags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushConstants-stageFlags-requiredbitmask)
VUID-vkCmdPushConstants-stageFlags-requiredbitmask
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-commandBuffer-cmdpool)
VUID-vkCmdPushDescriptorSetKHR-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-commandBuffer-parameter)
VUID-vkCmdPushDescriptorSetKHR-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-commandBuffer-recording)
VUID-vkCmdPushDescriptorSetKHR-commandBuffer-recording
Both of commandBuffer, and layout must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-commonparent)
VUID-vkCmdPushDescriptorSetKHR-commonparent
descriptorWriteCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-descriptorWriteCount-arraylength)
VUID-vkCmdPushDescriptorSetKHR-descriptorWriteCount-arraylength
layout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-layout-parameter)
VUID-vkCmdPushDescriptorSetKHR-layout-parameter
pDescriptorWrites must be a valid pointer to an array of descriptorWriteCount valid VkWriteDescriptorSet structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-pDescriptorWrites-parameter)
VUID-vkCmdPushDescriptorSetKHR-pDescriptorWrites-parameter
VUID-vkCmdPushDescriptorSetKHR-pipelineBindPoint-00363
pipelineBindPoint must be supported by the commandBuffer's parent VkCommandPool's queue family (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-pipelineBindPoint-00363)
pipelineBindPoint must be a valid VkPipelineBindPoint value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-pipelineBindPoint-parameter)
VUID-vkCmdPushDescriptorSetKHR-pipelineBindPoint-parameter
set must be less than VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-set-00364)
VUID-vkCmdPushDescriptorSetKHR-set-00364
set must be the unique set number in the pipeline layout that uses a descriptor set layout that was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetKHR-set-00365)
VUID-vkCmdPushDescriptorSetKHR-set-00365
VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-00366
The pipelineBindPoint specified during the creation of the descriptor update template must be supported by the commandBuffer's parent VkCommandPool's queue family (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-00366)
VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-cmdpool)
VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-parameter
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-parameter)
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-recording)
VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-recording
VUID-vkCmdPushDescriptorSetWithTemplateKHR-commonparent
Each of commandBuffer, descriptorUpdateTemplate, and layout must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-commonparent)
VUID-vkCmdPushDescriptorSetWithTemplateKHR-descriptorUpdateTemplate-parameter
descriptorUpdateTemplate must be a valid VkDescriptorUpdateTemplate handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-descriptorUpdateTemplate-parameter)
VUID-vkCmdPushDescriptorSetWithTemplateKHR-layout-parameter
layout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-layout-parameter)
VUID-vkCmdPushDescriptorSetWithTemplateKHR-pData-01686
pData must be a valid pointer to a memory that contains one or more valid instances of VkDescriptorImageInfo, VkDescriptorBufferInfo, or VkBufferView in a layout defined by descriptorUpdateTemplate when it was created with vkCreateDescriptorUpdateTemplateKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdPushDescriptorSetWithTemplateKHR-pData-01686)
commandBuffer must be a secondary VkCommandBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-bufferlevel)
VUID-vkCmdReserveSpaceForCommandsNVX-bufferlevel
The provided commandBuffer must not have had a prior space reservation since its creation or the last reset. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-01329)
VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-01329
VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-01330
The state of the commandBuffer must be legal to execute all commands within the sequence provided by the indirectCommandsLayout member of pProcessCommandsInfo. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-01330)
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-cmdpool)
VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-parameter)
VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-recording)
VUID-vkCmdReserveSpaceForCommandsNVX-commandBuffer-recording
VUID-vkCmdReserveSpaceForCommandsNVX-pReserveSpaceInfo-parameter
pReserveSpaceInfo must be a valid pointer to a valid VkCmdReserveSpaceForCommandsInfoNVX structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-pReserveSpaceInfo-parameter)
This command must only be called inside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdReserveSpaceForCommandsNVX-renderpass)
VUID-vkCmdReserveSpaceForCommandsNVX-renderpass
commandBuffer's current device mask must include exactly one physical device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-commandBuffer-01157)
VUID-vkCmdResetEvent-commandBuffer-01157
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-commandBuffer-cmdpool)
VUID-vkCmdResetEvent-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-commandBuffer-parameter)
VUID-vkCmdResetEvent-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-commandBuffer-recording)
VUID-vkCmdResetEvent-commandBuffer-recording
VUID-vkCmdResetEvent-commonparent
Both of commandBuffer, and event must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-commonparent)
VUID-vkCmdResetEvent-event-01156
When this command executes, event must not be waited on by a vkCmdWaitEvents command that is currently executing (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-event-01156)
event must be a valid VkEvent handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-event-parameter)
VUID-vkCmdResetEvent-event-parameter
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-renderpass)
VUID-vkCmdResetEvent-renderpass
stageMask must not include VK_PIPELINE_STAGE_HOST_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-stageMask-01153)
VUID-vkCmdResetEvent-stageMask-01153
VUID-vkCmdResetEvent-stageMask-01154
If the geometry shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-stageMask-01154)
VUID-vkCmdResetEvent-stageMask-01155
If the tessellation shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-stageMask-01155)
stageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-stageMask-parameter)
VUID-vkCmdResetEvent-stageMask-parameter
VUID-vkCmdResetEvent-stageMask-requiredbitmask
stageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetEvent-stageMask-requiredbitmask)
VUID-vkCmdResetQueryPool-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-commandBuffer-parameter)
VUID-vkCmdResetQueryPool-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-commandBuffer-recording)
VUID-vkCmdResetQueryPool-commandBuffer-recording
Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-commonparent)
VUID-vkCmdResetQueryPool-commonparent
VUID-vkCmdResetQueryPool-firstQuery-00796
firstQuery must be less than the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-firstQuery-00796)
The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-firstQuery-00797)
VUID-vkCmdResetQueryPool-firstQuery-00797
queryPool must be a valid VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-queryPool-parameter)
VUID-vkCmdResetQueryPool-queryPool-parameter
VUID-vkCmdResetQueryPool-renderpass
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResetQueryPool-renderpass)
If commandBuffer is an unprotected command buffer, then srcImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-commandBuffer-01837)
VUID-vkCmdResolveImage-commandBuffer-01837
If commandBuffer is an unprotected command buffer, then dstImage must not be a protected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-commandBuffer-01838)
VUID-vkCmdResolveImage-commandBuffer-01838
If commandBuffer is a protected command buffer, then dstImage must not be an unprotected image (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-commandBuffer-01839)
VUID-vkCmdResolveImage-commandBuffer-01839
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-commandBuffer-cmdpool)
VUID-vkCmdResolveImage-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-commandBuffer-parameter)
VUID-vkCmdResolveImage-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-commandBuffer-recording)
VUID-vkCmdResolveImage-commandBuffer-recording
Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-commonparent)
VUID-vkCmdResolveImage-commonparent
If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImage-00258)
VUID-vkCmdResolveImage-dstImage-00258
VUID-vkCmdResolveImage-dstImage-00259
dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImage-00259)
VUID-vkCmdResolveImage-dstImage-02003
The format features of dstImage must contain VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImage-02003)
dstImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImage-parameter)
VUID-vkCmdResolveImage-dstImage-parameter
dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImageLayout-00262)
VUID-vkCmdResolveImage-dstImageLayout-00262
dstImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImageLayout-00263)
VUID-vkCmdResolveImage-dstImageLayout-00263
dstImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImageLayout-01401)
VUID-vkCmdResolveImage-dstImageLayout-01401
dstImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstImageLayout-parameter)
VUID-vkCmdResolveImage-dstImageLayout-parameter
The dstSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstSubresource-01710)
VUID-vkCmdResolveImage-dstSubresource-01710
The dstSubresource.baseArrayLayer + dstSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when dstImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-dstSubresource-01712)
VUID-vkCmdResolveImage-dstSubresource-01712
The source region specified by each element of pRegions must be a region that is contained within srcImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-pRegions-00253)
VUID-vkCmdResolveImage-pRegions-00253
VUID-vkCmdResolveImage-pRegions-00254
The destination region specified by each element of pRegions must be a region that is contained within dstImage (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-pRegions-00254)
VUID-vkCmdResolveImage-pRegions-00255
The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-pRegions-00255)
VUID-vkCmdResolveImage-pRegions-parameter
pRegions must be a valid pointer to an array of regionCount valid VkImageResolve structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-pRegions-parameter)
VUID-vkCmdResolveImage-regionCount-arraylength
regionCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-regionCount-arraylength)
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-renderpass)
VUID-vkCmdResolveImage-renderpass
If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImage-00256)
VUID-vkCmdResolveImage-srcImage-00256
srcImage must have a sample count equal to any valid sample count value other than VK_SAMPLE_COUNT_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImage-00257)
VUID-vkCmdResolveImage-srcImage-00257
srcImage and dstImage must have been created with the same image format (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImage-01386)
VUID-vkCmdResolveImage-srcImage-01386
srcImage must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImage-parameter)
VUID-vkCmdResolveImage-srcImage-parameter
srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImageLayout-00260)
VUID-vkCmdResolveImage-srcImageLayout-00260
srcImageLayout must be VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImageLayout-00261)
VUID-vkCmdResolveImage-srcImageLayout-00261
srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImageLayout-01400)
VUID-vkCmdResolveImage-srcImageLayout-01400
srcImageLayout must be a valid VkImageLayout value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcImageLayout-parameter)
VUID-vkCmdResolveImage-srcImageLayout-parameter
The srcSubresource.mipLevel member of each element of pRegions must be less than the mipLevels specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcSubresource-01709)
VUID-vkCmdResolveImage-srcSubresource-01709
The srcSubresource.baseArrayLayer + srcSubresource.layerCount of each element of pRegions must be less than or equal to the arrayLayers specified in VkImageCreateInfo when srcImage was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdResolveImage-srcSubresource-01711)
VUID-vkCmdResolveImage-srcSubresource-01711
VUID-vkCmdSetBlendConstants-None-00612
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_BLEND_CONSTANTS dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetBlendConstants-None-00612)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetBlendConstants-commandBuffer-cmdpool)
VUID-vkCmdSetBlendConstants-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetBlendConstants-commandBuffer-parameter)
VUID-vkCmdSetBlendConstants-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetBlendConstants-commandBuffer-recording)
VUID-vkCmdSetBlendConstants-commandBuffer-recording
The VkCommandPool that commandBuffer was allocated from must support graphics, compute, or transfer operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetCheckpointNV-commandBuffer-cmdpool)
VUID-vkCmdSetCheckpointNV-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetCheckpointNV-commandBuffer-parameter)
VUID-vkCmdSetCheckpointNV-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetCheckpointNV-commandBuffer-recording)
VUID-vkCmdSetCheckpointNV-commandBuffer-recording
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DEPTH_BIAS dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBias-None-00789)
VUID-vkCmdSetDepthBias-None-00789
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBias-commandBuffer-cmdpool)
VUID-vkCmdSetDepthBias-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBias-commandBuffer-parameter)
VUID-vkCmdSetDepthBias-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBias-commandBuffer-recording)
VUID-vkCmdSetDepthBias-commandBuffer-recording
If the depth bias clamping feature is not enabled, depthBiasClamp must be 0.0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBias-depthBiasClamp-00790)
VUID-vkCmdSetDepthBias-depthBiasClamp-00790
VUID-vkCmdSetDepthBounds-None-00599
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBounds-None-00599)
VUID-vkCmdSetDepthBounds-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBounds-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBounds-commandBuffer-parameter)
VUID-vkCmdSetDepthBounds-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBounds-commandBuffer-recording)
VUID-vkCmdSetDepthBounds-commandBuffer-recording
VUID-vkCmdSetDepthBounds-maxDepthBounds-00601
VUID-vkCmdSetDepthBounds-maxDepthBounds-00601[!(VK_EXT_depth_range_unrestricted)]
Unless the VK_EXT_depth_range_unrestricted extension is enabled maxDepthBounds must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBounds-maxDepthBounds-00601)
VUID-vkCmdSetDepthBounds-maxDepthBounds-00601[(VK_EXT_depth_range_unrestricted)]
VUID-vkCmdSetDepthBounds-minDepthBounds-00600
VUID-vkCmdSetDepthBounds-minDepthBounds-00600[!(VK_EXT_depth_range_unrestricted)]
Unless the VK_EXT_depth_range_unrestricted extension is enabled minDepthBounds must be between 0.0 and 1.0, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDepthBounds-minDepthBounds-00600)
VUID-vkCmdSetDepthBounds-minDepthBounds-00600[(VK_EXT_depth_range_unrestricted)]
VUID-vkCmdSetDeviceMask-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics, compute, or transfer operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDeviceMask-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDeviceMask-commandBuffer-parameter)
VUID-vkCmdSetDeviceMask-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDeviceMask-commandBuffer-recording)
VUID-vkCmdSetDeviceMask-commandBuffer-recording
deviceMask must be a valid device mask value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDeviceMask-deviceMask-00108)
VUID-vkCmdSetDeviceMask-deviceMask-00108
deviceMask must not be zero (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDeviceMask-deviceMask-00109)
VUID-vkCmdSetDeviceMask-deviceMask-00109
deviceMask must not include any set bits that were not in the VkDeviceGroupCommandBufferBeginInfo::deviceMask value when the command buffer began recording. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDeviceMask-deviceMask-00110)
VUID-vkCmdSetDeviceMask-deviceMask-00110
If vkCmdSetDeviceMask is called inside a render pass instance, deviceMask must not include any set bits that were not in the VkDeviceGroupRenderPassBeginInfo::deviceMask value when the render pass instance began recording. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDeviceMask-deviceMask-00111)
VUID-vkCmdSetDeviceMask-deviceMask-00111
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-None-00583)
VUID-vkCmdSetDiscardRectangleEXT-None-00583
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-cmdpool)
VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-parameter)
VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-recording)
VUID-vkCmdSetDiscardRectangleEXT-commandBuffer-recording
discardRectangleCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-discardRectangleCount-arraylength)
VUID-vkCmdSetDiscardRectangleEXT-discardRectangleCount-arraylength
VUID-vkCmdSetDiscardRectangleEXT-firstDiscardRectangle-00585
The sum of firstDiscardRectangle and discardRectangleCount must be less than or equal to VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-firstDiscardRectangle-00585)
Evaluation of (offset.x + extent.width) in each VkRect2D element of pDiscardRectangles must not cause a signed integer addition overflow (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-offset-00588)
VUID-vkCmdSetDiscardRectangleEXT-offset-00588
Evaluation of (offset.y + extent.height) in each VkRect2D element of pDiscardRectangles must not cause a signed integer addition overflow (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-offset-00589)
VUID-vkCmdSetDiscardRectangleEXT-offset-00589
pDiscardRectangles must be a valid pointer to an array of discardRectangleCount VkRect2D structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-pDiscardRectangles-parameter)
VUID-vkCmdSetDiscardRectangleEXT-pDiscardRectangles-parameter
The x and y member of offset in each VkRect2D element of pDiscardRectangles must be greater than or equal to 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetDiscardRectangleEXT-x-00587)
VUID-vkCmdSetDiscardRectangleEXT-x-00587
VUID-vkCmdSetEvent-commandBuffer-01152
commandBuffer's current device mask must include exactly one physical device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-commandBuffer-01152)
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-commandBuffer-cmdpool)
VUID-vkCmdSetEvent-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-commandBuffer-parameter)
VUID-vkCmdSetEvent-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-commandBuffer-recording)
VUID-vkCmdSetEvent-commandBuffer-recording
Both of commandBuffer, and event must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-commonparent)
VUID-vkCmdSetEvent-commonparent
event must be a valid VkEvent handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-event-parameter)
VUID-vkCmdSetEvent-event-parameter
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-renderpass)
VUID-vkCmdSetEvent-stageMask-01149
stageMask must not include VK_PIPELINE_STAGE_HOST_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-stageMask-01149)
VUID-vkCmdSetEvent-stageMask-01150
If the geometry shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-stageMask-01150)
If the tessellation shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-stageMask-01151)
VUID-vkCmdSetEvent-stageMask-01151
VUID-vkCmdSetEvent-stageMask-parameter
stageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-stageMask-parameter)
VUID-vkCmdSetEvent-stageMask-requiredbitmask
stageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetEvent-stageMask-requiredbitmask)
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_LINE_WIDTH dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetLineWidth-None-00787)
VUID-vkCmdSetLineWidth-None-00787
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetLineWidth-commandBuffer-cmdpool)
VUID-vkCmdSetLineWidth-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetLineWidth-commandBuffer-parameter)
VUID-vkCmdSetLineWidth-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetLineWidth-commandBuffer-recording)
VUID-vkCmdSetLineWidth-commandBuffer-recording
VUID-vkCmdSetLineWidth-lineWidth-00788
If the wide lines feature is not enabled, lineWidth must be 1.0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetLineWidth-lineWidth-00788)
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetSampleLocationsEXT-None-01528)
VUID-vkCmdSetSampleLocationsEXT-None-01528
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetSampleLocationsEXT-commandBuffer-cmdpool)
VUID-vkCmdSetSampleLocationsEXT-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetSampleLocationsEXT-commandBuffer-parameter)
VUID-vkCmdSetSampleLocationsEXT-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetSampleLocationsEXT-commandBuffer-recording)
VUID-vkCmdSetSampleLocationsEXT-commandBuffer-recording
VUID-vkCmdSetSampleLocationsEXT-pSampleLocationsInfo-parameter
pSampleLocationsInfo must be a valid pointer to a valid VkSampleLocationsInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetSampleLocationsEXT-pSampleLocationsInfo-parameter)
VUID-vkCmdSetSampleLocationsEXT-sampleLocationsPerPixel-01529
The sampleLocationsPerPixel member of pSampleLocationsInfo must equal the rasterizationSamples member of the VkPipelineMultisampleStateCreateInfo structure the bound graphics pipeline has been created with (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetSampleLocationsEXT-sampleLocationsPerPixel-01529)
VUID-vkCmdSetSampleLocationsEXT-variableSampleLocations-01530
If VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations is VK_FALSE then the current render pass must have been begun by specifying a VkRenderPassSampleLocationsBeginInfoEXT structure whose pPostSubpassSampleLocations member contains an element with a subpassIndex matching the current subpass index and the sampleLocationsInfo member of that element must match the sample locations state pointed to by pSampleLocationsInfo (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetSampleLocationsEXT-variableSampleLocations-01530)
VUID-vkCmdSetScissor-None-00590
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_SCISSOR dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-None-00590)
VUID-vkCmdSetScissor-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-commandBuffer-parameter)
VUID-vkCmdSetScissor-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-commandBuffer-recording)
VUID-vkCmdSetScissor-commandBuffer-recording
VUID-vkCmdSetScissor-firstScissor-00591
firstScissor must be less than VkPhysicalDeviceLimits::maxViewports (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-firstScissor-00591)
VUID-vkCmdSetScissor-firstScissor-00592
The sum of firstScissor and scissorCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-firstScissor-00592)
If the multiple viewports feature is not enabled, firstScissor must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-firstScissor-00593)
VUID-vkCmdSetScissor-firstScissor-00593
VUID-vkCmdSetScissor-offset-00596
Evaluation of (offset.x + extent.width) must not cause a signed integer addition overflow (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-offset-00596)
Evaluation of (offset.y + extent.height) must not cause a signed integer addition overflow (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-offset-00597)
VUID-vkCmdSetScissor-offset-00597
VUID-vkCmdSetScissor-pScissors-parameter
pScissors must be a valid pointer to an array of scissorCount VkRect2D structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-pScissors-parameter)
If the multiple viewports feature is not enabled, scissorCount must be 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-scissorCount-00594)
VUID-vkCmdSetScissor-scissorCount-00594
VUID-vkCmdSetScissor-scissorCount-arraylength
scissorCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-scissorCount-arraylength)
The x and y members of offset must be greater than or equal to 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetScissor-x-00595)
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilCompareMask-None-00602)
VUID-vkCmdSetStencilCompareMask-None-00602
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilCompareMask-commandBuffer-cmdpool)
VUID-vkCmdSetStencilCompareMask-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilCompareMask-commandBuffer-parameter)
VUID-vkCmdSetStencilCompareMask-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilCompareMask-commandBuffer-recording)
VUID-vkCmdSetStencilCompareMask-commandBuffer-recording
faceMask must be a valid combination of VkStencilFaceFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilCompareMask-faceMask-parameter)
VUID-vkCmdSetStencilCompareMask-faceMask-parameter
VUID-vkCmdSetStencilCompareMask-faceMask-requiredbitmask
faceMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilCompareMask-faceMask-requiredbitmask)
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_REFERENCE dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilReference-None-00604)
VUID-vkCmdSetStencilReference-None-00604
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilReference-commandBuffer-cmdpool)
VUID-vkCmdSetStencilReference-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilReference-commandBuffer-parameter)
VUID-vkCmdSetStencilReference-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilReference-commandBuffer-recording)
VUID-vkCmdSetStencilReference-commandBuffer-recording
faceMask must be a valid combination of VkStencilFaceFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilReference-faceMask-parameter)
VUID-vkCmdSetStencilReference-faceMask-parameter
faceMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilReference-faceMask-requiredbitmask)
VUID-vkCmdSetStencilReference-faceMask-requiredbitmask
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_WRITE_MASK dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilWriteMask-None-00603)
VUID-vkCmdSetStencilWriteMask-None-00603
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilWriteMask-commandBuffer-cmdpool)
VUID-vkCmdSetStencilWriteMask-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilWriteMask-commandBuffer-parameter)
VUID-vkCmdSetStencilWriteMask-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilWriteMask-commandBuffer-recording)
VUID-vkCmdSetStencilWriteMask-commandBuffer-recording
faceMask must be a valid combination of VkStencilFaceFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilWriteMask-faceMask-parameter)
VUID-vkCmdSetStencilWriteMask-faceMask-parameter
faceMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetStencilWriteMask-faceMask-requiredbitmask)
VUID-vkCmdSetStencilWriteMask-faceMask-requiredbitmask
VUID-vkCmdSetViewport-None-01221
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_VIEWPORT dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-None-01221)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-commandBuffer-cmdpool)
VUID-vkCmdSetViewport-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-commandBuffer-parameter)
VUID-vkCmdSetViewport-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-commandBuffer-recording)
VUID-vkCmdSetViewport-commandBuffer-recording
VUID-vkCmdSetViewport-firstViewport-01222
firstViewport must be less than VkPhysicalDeviceLimits::maxViewports (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-firstViewport-01222)
VUID-vkCmdSetViewport-firstViewport-01223
The sum of firstViewport and viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-firstViewport-01223)
If the multiple viewports feature is not enabled, firstViewport must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-firstViewport-01224)
VUID-vkCmdSetViewport-firstViewport-01224
pViewports must be a valid pointer to an array of viewportCount valid VkViewport structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-pViewports-parameter)
VUID-vkCmdSetViewport-pViewports-parameter
If the multiple viewports feature is not enabled, viewportCount must be 1 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-viewportCount-01225)
VUID-vkCmdSetViewport-viewportCount-01225
viewportCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewport-viewportCount-arraylength)
VUID-vkCmdSetViewport-viewportCount-arraylength
VUID-vkCmdSetViewportWScalingNV-None-01322
The bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV dynamic state enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-None-01322)
The VkCommandPool that commandBuffer was allocated from must support graphics operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-commandBuffer-cmdpool)
VUID-vkCmdSetViewportWScalingNV-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-commandBuffer-parameter)
VUID-vkCmdSetViewportWScalingNV-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-commandBuffer-recording)
VUID-vkCmdSetViewportWScalingNV-commandBuffer-recording
firstViewport must be less than VkPhysicalDeviceLimits::maxViewports (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-firstViewport-01323)
VUID-vkCmdSetViewportWScalingNV-firstViewport-01323
VUID-vkCmdSetViewportWScalingNV-firstViewport-01324
The sum of firstViewport and viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-firstViewport-01324)
VUID-vkCmdSetViewportWScalingNV-pViewportWScalings-parameter
pViewportWScalings must be a valid pointer to an array of viewportCount VkViewportWScalingNV structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-pViewportWScalings-parameter)
viewportCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdSetViewportWScalingNV-viewportCount-arraylength)
VUID-vkCmdSetViewportWScalingNV-viewportCount-arraylength
If commandBuffer is an unprotected command buffer, then dstBuffer must not be a protected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-commandBuffer-01813)
VUID-vkCmdUpdateBuffer-commandBuffer-01813
If commandBuffer is a protected command buffer, then dstBuffer must not be an unprotected buffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-commandBuffer-01814)
VUID-vkCmdUpdateBuffer-commandBuffer-01814
VUID-vkCmdUpdateBuffer-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-commandBuffer-parameter)
VUID-vkCmdUpdateBuffer-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-commandBuffer-recording)
VUID-vkCmdUpdateBuffer-commandBuffer-recording
Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-commonparent)
VUID-vkCmdUpdateBuffer-commonparent
dataSize must be less than or equal to the size of dstBuffer minus dstOffset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dataSize-00033)
VUID-vkCmdUpdateBuffer-dataSize-00033
VUID-vkCmdUpdateBuffer-dataSize-00037
dataSize must be less than or equal to 65536 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dataSize-00037)
VUID-vkCmdUpdateBuffer-dataSize-00038
dataSize must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dataSize-00038)
VUID-vkCmdUpdateBuffer-dataSize-arraylength
dataSize must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dataSize-arraylength)
VUID-vkCmdUpdateBuffer-dstBuffer-00034
dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dstBuffer-00034)
VUID-vkCmdUpdateBuffer-dstBuffer-00035
If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dstBuffer-00035)
VUID-vkCmdUpdateBuffer-dstBuffer-parameter
dstBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dstBuffer-parameter)
VUID-vkCmdUpdateBuffer-dstOffset-00032
dstOffset must be less than the size of dstBuffer (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dstOffset-00032)
VUID-vkCmdUpdateBuffer-dstOffset-00036
dstOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-dstOffset-00036)
VUID-vkCmdUpdateBuffer-pData-parameter
pData must be a valid pointer to an array of dataSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-pData-parameter)
This command must only be called outside of a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdUpdateBuffer-renderpass)
VUID-vkCmdUpdateBuffer-renderpass
commandBuffer's current device mask must include exactly one physical device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-commandBuffer-01167)
VUID-vkCmdWaitEvents-commandBuffer-01167
The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-commandBuffer-cmdpool)
VUID-vkCmdWaitEvents-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-commandBuffer-parameter)
VUID-vkCmdWaitEvents-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-commandBuffer-recording)
VUID-vkCmdWaitEvents-commandBuffer-recording
VUID-vkCmdWaitEvents-commonparent
Both of commandBuffer, and the elements of pEvents must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-commonparent)
If the geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-dstStageMask-01160)
VUID-vkCmdWaitEvents-dstStageMask-01160
If the tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-dstStageMask-01162)
VUID-vkCmdWaitEvents-dstStageMask-01162
dstStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-dstStageMask-parameter)
VUID-vkCmdWaitEvents-dstStageMask-parameter
dstStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-dstStageMask-requiredbitmask)
VUID-vkCmdWaitEvents-dstStageMask-requiredbitmask
eventCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-eventCount-arraylength)
VUID-vkCmdWaitEvents-eventCount-arraylength
VUID-vkCmdWaitEvents-pBufferMemoryBarriers-parameter
If bufferMemoryBarrierCount is not 0, pBufferMemoryBarriers must be a valid pointer to an array of bufferMemoryBarrierCount valid VkBufferMemoryBarrier structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-pBufferMemoryBarriers-parameter)
If pEvents includes one or more events that will be signaled by vkSetEvent after commandBuffer has been submitted to a queue, then vkCmdWaitEvents must not be called inside a render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-pEvents-01163)
VUID-vkCmdWaitEvents-pEvents-01163
pEvents must be a valid pointer to an array of eventCount valid VkEvent handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-pEvents-parameter)
VUID-vkCmdWaitEvents-pEvents-parameter
VUID-vkCmdWaitEvents-pImageMemoryBarriers-parameter
If imageMemoryBarrierCount is not 0, pImageMemoryBarriers must be a valid pointer to an array of imageMemoryBarrierCount valid VkImageMemoryBarrier structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-pImageMemoryBarriers-parameter)
Each element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its srcAccessMask member if that bit is not supported by any of the pipeline stages in srcStageMask, as specified in the table of supported access types. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-pMemoryBarriers-01165)
VUID-vkCmdWaitEvents-pMemoryBarriers-01165
Each element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its dstAccessMask member if that bit is not supported by any of the pipeline stages in dstStageMask, as specified in the table of supported access types. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-pMemoryBarriers-01166)
VUID-vkCmdWaitEvents-pMemoryBarriers-01166
VUID-vkCmdWaitEvents-pMemoryBarriers-parameter
If memoryBarrierCount is not 0, pMemoryBarriers must be a valid pointer to an array of memoryBarrierCount valid VkMemoryBarrier structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-pMemoryBarriers-parameter)
srcStageMask must be the bitwise OR of the stageMask parameter used in previous calls to vkCmdSetEvent with any of the members of pEvents and VK_PIPELINE_STAGE_HOST_BIT if any of the members of pEvents was set using vkSetEvent (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-srcStageMask-01158)
VUID-vkCmdWaitEvents-srcStageMask-01158
If the geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-srcStageMask-01159)
VUID-vkCmdWaitEvents-srcStageMask-01159
If the tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-srcStageMask-01161)
VUID-vkCmdWaitEvents-srcStageMask-01161
VUID-vkCmdWaitEvents-srcStageMask-01164
Any pipeline stage included in srcStageMask or dstStageMask must be supported by the capabilities of the queue family specified by the queueFamilyIndex member of the VkCommandPoolCreateInfo structure that was used to create the VkCommandPool that commandBuffer was allocated from, as specified in the table of supported pipeline stages. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-srcStageMask-01164)
srcStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-srcStageMask-parameter)
VUID-vkCmdWaitEvents-srcStageMask-parameter
srcStageMask must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-srcStageMask-requiredbitmask)
VUID-vkCmdWaitEvents-srcStageMask-requiredbitmask
VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-cmdpool
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-cmdpool)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-parameter)
VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-recording)
VUID-vkCmdWriteBufferMarkerAMD-commandBuffer-recording
Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-commonparent)
VUID-vkCmdWriteBufferMarkerAMD-commonparent
dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-01799)
VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-01799
If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-01800)
VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-01800
dstBuffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-parameter)
VUID-vkCmdWriteBufferMarkerAMD-dstBuffer-parameter
dstOffset must be less than or equal to the size of dstBuffer minus 4. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-dstOffset-01798)
VUID-vkCmdWriteBufferMarkerAMD-dstOffset-01798
dstOffset must be a multiple of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-dstOffset-01801)
VUID-vkCmdWriteBufferMarkerAMD-dstOffset-01801
VUID-vkCmdWriteBufferMarkerAMD-pipelineStage-parameter
pipelineStage must be a valid VkPipelineStageFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteBufferMarkerAMD-pipelineStage-parameter)
All queries used by the command must be unavailable (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-None-00830)
VUID-vkCmdWriteTimestamp-None-00830
The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-commandBuffer-cmdpool)
VUID-vkCmdWriteTimestamp-commandBuffer-cmdpool
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-commandBuffer-parameter)
VUID-vkCmdWriteTimestamp-commandBuffer-parameter
commandBuffer must be in the recording state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-commandBuffer-recording)
VUID-vkCmdWriteTimestamp-commandBuffer-recording
Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-commonparent)
VUID-vkCmdWriteTimestamp-commonparent
VUID-vkCmdWriteTimestamp-pipelineStage-parameter
pipelineStage must be a valid VkPipelineStageFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-pipelineStage-parameter)
If vkCmdWriteTimestamp is called within a render pass instance, the sum of query and the number of bits set in the current subpass's view mask must be less than or equal to the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-query-00831)
VUID-vkCmdWriteTimestamp-query-00831
VUID-vkCmdWriteTimestamp-queryPool-00828
The query identified by queryPool and query must be unavailable (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-queryPool-00828)
VUID-vkCmdWriteTimestamp-queryPool-01416
queryPool must have been created with a queryType of VK_QUERY_TYPE_TIMESTAMP (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-queryPool-01416)
queryPool must be a valid VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-queryPool-parameter)
VUID-vkCmdWriteTimestamp-queryPool-parameter
VUID-vkCmdWriteTimestamp-timestampValidBits-00829
The command pool's queue family must support a non-zero timestampValidBits (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCmdWriteTimestamp-timestampValidBits-00829)
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateAndroidSurfaceKHR-instance-parameter)
VUID-vkCreateAndroidSurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter)
VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkAndroidSurfaceCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateAndroidSurfaceKHR-pCreateInfo-parameter)
VUID-vkCreateAndroidSurfaceKHR-pCreateInfo-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateAndroidSurfaceKHR-pSurface-parameter)
VUID-vkCreateAndroidSurfaceKHR-pSurface-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBuffer-device-parameter)
VUID-vkCreateBuffer-device-parameter
VUID-vkCreateBuffer-flags-00911
If the flags member of pCreateInfo includes VK_BUFFER_CREATE_SPARSE_BINDING_BIT, creating this VkBuffer must not cause the total required sparse memory for all currently valid sparse resources on the device to exceed VkPhysicalDeviceLimits::sparseAddressSpaceSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBuffer-flags-00911)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBuffer-pAllocator-parameter)
VUID-vkCreateBuffer-pAllocator-parameter
pBuffer must be a valid pointer to a VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBuffer-pBuffer-parameter)
VUID-vkCreateBuffer-pBuffer-parameter
pCreateInfo must be a valid pointer to a valid VkBufferCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBuffer-pCreateInfo-parameter)
VUID-vkCreateBuffer-pCreateInfo-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBufferView-device-parameter)
VUID-vkCreateBufferView-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBufferView-pAllocator-parameter)
VUID-vkCreateBufferView-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkBufferViewCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBufferView-pCreateInfo-parameter)
VUID-vkCreateBufferView-pCreateInfo-parameter
pView must be a valid pointer to a VkBufferView handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateBufferView-pView-parameter)
VUID-vkCreateBufferView-pView-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateCommandPool-device-parameter)
VUID-vkCreateCommandPool-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateCommandPool-pAllocator-parameter)
VUID-vkCreateCommandPool-pAllocator-parameter
pCommandPool must be a valid pointer to a VkCommandPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateCommandPool-pCommandPool-parameter)
VUID-vkCreateCommandPool-pCommandPool-parameter
pCreateInfo must be a valid pointer to a valid VkCommandPoolCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateCommandPool-pCreateInfo-parameter)
VUID-vkCreateCommandPool-pCreateInfo-parameter
VUID-vkCreateCommandPool-queueFamilyIndex-01937
pCreateInfo::queueFamilyIndex must be the index of a queue family available in the logical device device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateCommandPool-queueFamilyIndex-01937)
createInfoCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-createInfoCount-arraylength)
VUID-vkCreateComputePipelines-createInfoCount-arraylength
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-device-parameter)
VUID-vkCreateComputePipelines-device-parameter
If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the basePipelineIndex member of that same element is not -1, basePipelineIndex must be less than the index into pCreateInfos that corresponds to that element (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-flags-00695)
VUID-vkCreateComputePipelines-flags-00695
VUID-vkCreateComputePipelines-flags-00696
If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, the base pipeline must have been created with the VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-flags-00696)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-pAllocator-parameter)
VUID-vkCreateComputePipelines-pAllocator-parameter
pCreateInfos must be a valid pointer to an array of createInfoCount valid VkComputePipelineCreateInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-pCreateInfos-parameter)
VUID-vkCreateComputePipelines-pCreateInfos-parameter
pPipelines must be a valid pointer to an array of createInfoCount VkPipeline handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-pPipelines-parameter)
VUID-vkCreateComputePipelines-pPipelines-parameter
VUID-vkCreateComputePipelines-pipelineCache-parameter
If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-pipelineCache-parameter)
If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateComputePipelines-pipelineCache-parent)
VUID-vkCreateComputePipelines-pipelineCache-parent
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugReportCallbackEXT-instance-parameter)
VUID-vkCreateDebugReportCallbackEXT-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter)
VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter
VUID-vkCreateDebugReportCallbackEXT-pCallback-parameter
pCallback must be a valid pointer to a VkDebugReportCallbackEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugReportCallbackEXT-pCallback-parameter)
pCreateInfo must be a valid pointer to a valid VkDebugReportCallbackCreateInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugReportCallbackEXT-pCreateInfo-parameter)
VUID-vkCreateDebugReportCallbackEXT-pCreateInfo-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugUtilsMessengerEXT-instance-parameter)
VUID-vkCreateDebugUtilsMessengerEXT-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter)
VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkDebugUtilsMessengerCreateInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugUtilsMessengerEXT-pCreateInfo-parameter)
VUID-vkCreateDebugUtilsMessengerEXT-pCreateInfo-parameter
VUID-vkCreateDebugUtilsMessengerEXT-pMessenger-parameter
pMessenger must be a valid pointer to a VkDebugUtilsMessengerEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDebugUtilsMessengerEXT-pMessenger-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorPool-device-parameter)
VUID-vkCreateDescriptorPool-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorPool-pAllocator-parameter)
VUID-vkCreateDescriptorPool-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkDescriptorPoolCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorPool-pCreateInfo-parameter)
VUID-vkCreateDescriptorPool-pCreateInfo-parameter
pDescriptorPool must be a valid pointer to a VkDescriptorPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorPool-pDescriptorPool-parameter)
VUID-vkCreateDescriptorPool-pDescriptorPool-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorSetLayout-device-parameter)
VUID-vkCreateDescriptorSetLayout-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorSetLayout-pAllocator-parameter)
VUID-vkCreateDescriptorSetLayout-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkDescriptorSetLayoutCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorSetLayout-pCreateInfo-parameter)
VUID-vkCreateDescriptorSetLayout-pCreateInfo-parameter
pSetLayout must be a valid pointer to a VkDescriptorSetLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorSetLayout-pSetLayout-parameter)
VUID-vkCreateDescriptorSetLayout-pSetLayout-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorUpdateTemplate-device-parameter)
VUID-vkCreateDescriptorUpdateTemplate-device-parameter
VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter)
pCreateInfo must be a valid pointer to a valid VkDescriptorUpdateTemplateCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorUpdateTemplate-pCreateInfo-parameter)
VUID-vkCreateDescriptorUpdateTemplate-pCreateInfo-parameter
VUID-vkCreateDescriptorUpdateTemplate-pDescriptorUpdateTemplate-parameter
pDescriptorUpdateTemplate must be a valid pointer to a VkDescriptorUpdateTemplate handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDescriptorUpdateTemplate-pDescriptorUpdateTemplate-parameter)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDevice-pAllocator-parameter)
VUID-vkCreateDevice-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkDeviceCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDevice-pCreateInfo-parameter)
VUID-vkCreateDevice-pCreateInfo-parameter
pDevice must be a valid pointer to a VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDevice-pDevice-parameter)
VUID-vkCreateDevice-pDevice-parameter
VUID-vkCreateDevice-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDevice-physicalDevice-parameter)
VUID-vkCreateDevice-ppEnabledExtensionNames-01387
All required extensions for each extension in the VkDeviceCreateInfo::ppEnabledExtensionNames list must also be present in that list. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDevice-ppEnabledExtensionNames-01387)
display must be a valid VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayModeKHR-display-parameter)
VUID-vkCreateDisplayModeKHR-display-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayModeKHR-pAllocator-parameter)
VUID-vkCreateDisplayModeKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkDisplayModeCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayModeKHR-pCreateInfo-parameter)
VUID-vkCreateDisplayModeKHR-pCreateInfo-parameter
pMode must be a valid pointer to a VkDisplayModeKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayModeKHR-pMode-parameter)
VUID-vkCreateDisplayModeKHR-pMode-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayModeKHR-physicalDevice-parameter)
VUID-vkCreateDisplayModeKHR-physicalDevice-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayPlaneSurfaceKHR-instance-parameter)
VUID-vkCreateDisplayPlaneSurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter)
VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter
VUID-vkCreateDisplayPlaneSurfaceKHR-pCreateInfo-parameter
pCreateInfo must be a valid pointer to a valid VkDisplaySurfaceCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayPlaneSurfaceKHR-pCreateInfo-parameter)
VUID-vkCreateDisplayPlaneSurfaceKHR-pSurface-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateDisplayPlaneSurfaceKHR-pSurface-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateEvent-device-parameter)
VUID-vkCreateEvent-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateEvent-pAllocator-parameter)
VUID-vkCreateEvent-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkEventCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateEvent-pCreateInfo-parameter)
VUID-vkCreateEvent-pCreateInfo-parameter
pEvent must be a valid pointer to a VkEvent handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateEvent-pEvent-parameter)
VUID-vkCreateEvent-pEvent-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFence-device-parameter)
VUID-vkCreateFence-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFence-pAllocator-parameter)
VUID-vkCreateFence-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkFenceCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFence-pCreateInfo-parameter)
VUID-vkCreateFence-pCreateInfo-parameter
pFence must be a valid pointer to a VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFence-pFence-parameter)
VUID-vkCreateFence-pFence-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFramebuffer-device-parameter)
VUID-vkCreateFramebuffer-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFramebuffer-pAllocator-parameter)
VUID-vkCreateFramebuffer-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkFramebufferCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFramebuffer-pCreateInfo-parameter)
VUID-vkCreateFramebuffer-pCreateInfo-parameter
pFramebuffer must be a valid pointer to a VkFramebuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateFramebuffer-pFramebuffer-parameter)
VUID-vkCreateFramebuffer-pFramebuffer-parameter
createInfoCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-createInfoCount-arraylength)
VUID-vkCreateGraphicsPipelines-createInfoCount-arraylength
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-device-parameter)
VUID-vkCreateGraphicsPipelines-device-parameter
VUID-vkCreateGraphicsPipelines-flags-00720
If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the basePipelineIndex member of that same element is not -1, basePipelineIndex must be less than the index into pCreateInfos that corresponds to that element (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-flags-00720)
VUID-vkCreateGraphicsPipelines-flags-00721
If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, the base pipeline must have been created with the VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-flags-00721)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-pAllocator-parameter)
VUID-vkCreateGraphicsPipelines-pAllocator-parameter
VUID-vkCreateGraphicsPipelines-pCreateInfos-parameter
pCreateInfos must be a valid pointer to an array of createInfoCount valid VkGraphicsPipelineCreateInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-pCreateInfos-parameter)
VUID-vkCreateGraphicsPipelines-pPipelines-parameter
pPipelines must be a valid pointer to an array of createInfoCount VkPipeline handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-pPipelines-parameter)
VUID-vkCreateGraphicsPipelines-pipelineCache-parameter
If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-pipelineCache-parameter)
VUID-vkCreateGraphicsPipelines-pipelineCache-parent
If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateGraphicsPipelines-pipelineCache-parent)
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIOSSurfaceMVK-instance-parameter)
VUID-vkCreateIOSSurfaceMVK-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter)
VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkIOSSurfaceCreateInfoMVK structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIOSSurfaceMVK-pCreateInfo-parameter)
VUID-vkCreateIOSSurfaceMVK-pCreateInfo-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIOSSurfaceMVK-pSurface-parameter)
VUID-vkCreateIOSSurfaceMVK-pSurface-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImage-device-parameter)
VUID-vkCreateImage-device-parameter
VUID-vkCreateImage-flags-00939
If the flags member of pCreateInfo includes VK_IMAGE_CREATE_SPARSE_BINDING_BIT, creating this VkImage must not cause the total required sparse memory for all currently valid sparse resources on the device to exceed VkPhysicalDeviceLimits::sparseAddressSpaceSize (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImage-flags-00939)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImage-pAllocator-parameter)
VUID-vkCreateImage-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkImageCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImage-pCreateInfo-parameter)
VUID-vkCreateImage-pCreateInfo-parameter
pImage must be a valid pointer to a VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImage-pImage-parameter)
VUID-vkCreateImage-pImage-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImageView-device-parameter)
VUID-vkCreateImageView-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImageView-pAllocator-parameter)
VUID-vkCreateImageView-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkImageViewCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImageView-pCreateInfo-parameter)
VUID-vkCreateImageView-pCreateInfo-parameter
pView must be a valid pointer to a VkImageView handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateImageView-pView-parameter)
VUID-vkCreateImageView-pView-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIndirectCommandsLayoutNVX-device-parameter)
VUID-vkCreateIndirectCommandsLayoutNVX-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIndirectCommandsLayoutNVX-pAllocator-parameter)
VUID-vkCreateIndirectCommandsLayoutNVX-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkIndirectCommandsLayoutCreateInfoNVX structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIndirectCommandsLayoutNVX-pCreateInfo-parameter)
VUID-vkCreateIndirectCommandsLayoutNVX-pCreateInfo-parameter
VUID-vkCreateIndirectCommandsLayoutNVX-pIndirectCommandsLayout-parameter
pIndirectCommandsLayout must be a valid pointer to a VkIndirectCommandsLayoutNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateIndirectCommandsLayoutNVX-pIndirectCommandsLayout-parameter)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateInstance-pAllocator-parameter)
VUID-vkCreateInstance-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkInstanceCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateInstance-pCreateInfo-parameter)
VUID-vkCreateInstance-pCreateInfo-parameter
pInstance must be a valid pointer to a VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateInstance-pInstance-parameter)
VUID-vkCreateInstance-pInstance-parameter
VUID-vkCreateInstance-ppEnabledExtensionNames-01388
All required extensions for each extension in the VkInstanceCreateInfo::ppEnabledExtensionNames list must also be present in that list. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateInstance-ppEnabledExtensionNames-01388)
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMacOSSurfaceMVK-instance-parameter)
VUID-vkCreateMacOSSurfaceMVK-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter)
VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkMacOSSurfaceCreateInfoMVK structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMacOSSurfaceMVK-pCreateInfo-parameter)
VUID-vkCreateMacOSSurfaceMVK-pCreateInfo-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMacOSSurfaceMVK-pSurface-parameter)
VUID-vkCreateMacOSSurfaceMVK-pSurface-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMirSurfaceKHR-instance-parameter)
VUID-vkCreateMirSurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMirSurfaceKHR-pAllocator-parameter)
VUID-vkCreateMirSurfaceKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkMirSurfaceCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMirSurfaceKHR-pCreateInfo-parameter)
VUID-vkCreateMirSurfaceKHR-pCreateInfo-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateMirSurfaceKHR-pSurface-parameter)
VUID-vkCreateMirSurfaceKHR-pSurface-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateObjectTableNVX-device-parameter)
VUID-vkCreateObjectTableNVX-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateObjectTableNVX-pAllocator-parameter)
VUID-vkCreateObjectTableNVX-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkObjectTableCreateInfoNVX structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateObjectTableNVX-pCreateInfo-parameter)
VUID-vkCreateObjectTableNVX-pCreateInfo-parameter
VUID-vkCreateObjectTableNVX-pObjectTable-parameter
pObjectTable must be a valid pointer to a VkObjectTableNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateObjectTableNVX-pObjectTable-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineCache-device-parameter)
VUID-vkCreatePipelineCache-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineCache-pAllocator-parameter)
VUID-vkCreatePipelineCache-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkPipelineCacheCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineCache-pCreateInfo-parameter)
VUID-vkCreatePipelineCache-pCreateInfo-parameter
VUID-vkCreatePipelineCache-pPipelineCache-parameter
pPipelineCache must be a valid pointer to a VkPipelineCache handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineCache-pPipelineCache-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineLayout-device-parameter)
VUID-vkCreatePipelineLayout-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineLayout-pAllocator-parameter)
VUID-vkCreatePipelineLayout-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkPipelineLayoutCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineLayout-pCreateInfo-parameter)
VUID-vkCreatePipelineLayout-pCreateInfo-parameter
pPipelineLayout must be a valid pointer to a VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreatePipelineLayout-pPipelineLayout-parameter)
VUID-vkCreatePipelineLayout-pPipelineLayout-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateQueryPool-device-parameter)
VUID-vkCreateQueryPool-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateQueryPool-pAllocator-parameter)
VUID-vkCreateQueryPool-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkQueryPoolCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateQueryPool-pCreateInfo-parameter)
VUID-vkCreateQueryPool-pCreateInfo-parameter
pQueryPool must be a valid pointer to a VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateQueryPool-pQueryPool-parameter)
VUID-vkCreateQueryPool-pQueryPool-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass-device-parameter)
VUID-vkCreateRenderPass-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass-pAllocator-parameter)
VUID-vkCreateRenderPass-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkRenderPassCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass-pCreateInfo-parameter)
VUID-vkCreateRenderPass-pCreateInfo-parameter
pRenderPass must be a valid pointer to a VkRenderPass handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass-pRenderPass-parameter)
VUID-vkCreateRenderPass-pRenderPass-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass2KHR-device-parameter)
VUID-vkCreateRenderPass2KHR-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass2KHR-pAllocator-parameter)
VUID-vkCreateRenderPass2KHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkRenderPassCreateInfo2KHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass2KHR-pCreateInfo-parameter)
VUID-vkCreateRenderPass2KHR-pCreateInfo-parameter
VUID-vkCreateRenderPass2KHR-pRenderPass-parameter
pRenderPass must be a valid pointer to a VkRenderPass handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateRenderPass2KHR-pRenderPass-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSampler-device-parameter)
VUID-vkCreateSampler-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSampler-pAllocator-parameter)
VUID-vkCreateSampler-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkSamplerCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSampler-pCreateInfo-parameter)
VUID-vkCreateSampler-pCreateInfo-parameter
pSampler must be a valid pointer to a VkSampler handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSampler-pSampler-parameter)
VUID-vkCreateSampler-pSampler-parameter
The sampler Y'CBCR conversion feature must be enabled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSamplerYcbcrConversion-None-01648)
VUID-vkCreateSamplerYcbcrConversion-None-01648
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSamplerYcbcrConversion-device-parameter)
VUID-vkCreateSamplerYcbcrConversion-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter)
VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkSamplerYcbcrConversionCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSamplerYcbcrConversion-pCreateInfo-parameter)
VUID-vkCreateSamplerYcbcrConversion-pCreateInfo-parameter
pYcbcrConversion must be a valid pointer to a VkSamplerYcbcrConversion handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSamplerYcbcrConversion-pYcbcrConversion-parameter)
VUID-vkCreateSamplerYcbcrConversion-pYcbcrConversion-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSemaphore-device-parameter)
VUID-vkCreateSemaphore-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSemaphore-pAllocator-parameter)
VUID-vkCreateSemaphore-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkSemaphoreCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSemaphore-pCreateInfo-parameter)
VUID-vkCreateSemaphore-pCreateInfo-parameter
pSemaphore must be a valid pointer to a VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSemaphore-pSemaphore-parameter)
VUID-vkCreateSemaphore-pSemaphore-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateShaderModule-device-parameter)
VUID-vkCreateShaderModule-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateShaderModule-pAllocator-parameter)
VUID-vkCreateShaderModule-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkShaderModuleCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateShaderModule-pCreateInfo-parameter)
VUID-vkCreateShaderModule-pCreateInfo-parameter
VUID-vkCreateShaderModule-pShaderModule-parameter
pShaderModule must be a valid pointer to a VkShaderModule handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateShaderModule-pShaderModule-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSharedSwapchainsKHR-device-parameter)
VUID-vkCreateSharedSwapchainsKHR-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter)
VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter
VUID-vkCreateSharedSwapchainsKHR-pCreateInfos-parameter
pCreateInfos must be a valid pointer to an array of swapchainCount valid VkSwapchainCreateInfoKHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSharedSwapchainsKHR-pCreateInfos-parameter)
pSwapchains must be a valid pointer to an array of swapchainCount VkSwapchainKHR handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSharedSwapchainsKHR-pSwapchains-parameter)
VUID-vkCreateSharedSwapchainsKHR-pSwapchains-parameter
VUID-vkCreateSharedSwapchainsKHR-swapchainCount-arraylength
swapchainCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSharedSwapchainsKHR-swapchainCount-arraylength)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSwapchainKHR-device-parameter)
VUID-vkCreateSwapchainKHR-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSwapchainKHR-pAllocator-parameter)
VUID-vkCreateSwapchainKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkSwapchainCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSwapchainKHR-pCreateInfo-parameter)
VUID-vkCreateSwapchainKHR-pCreateInfo-parameter
pSwapchain must be a valid pointer to a VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateSwapchainKHR-pSwapchain-parameter)
VUID-vkCreateSwapchainKHR-pSwapchain-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateValidationCacheEXT-device-parameter)
VUID-vkCreateValidationCacheEXT-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateValidationCacheEXT-pAllocator-parameter)
VUID-vkCreateValidationCacheEXT-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkValidationCacheCreateInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateValidationCacheEXT-pCreateInfo-parameter)
VUID-vkCreateValidationCacheEXT-pCreateInfo-parameter
pValidationCache must be a valid pointer to a VkValidationCacheEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateValidationCacheEXT-pValidationCache-parameter)
VUID-vkCreateValidationCacheEXT-pValidationCache-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateViSurfaceNN-instance-parameter)
VUID-vkCreateViSurfaceNN-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateViSurfaceNN-pAllocator-parameter)
VUID-vkCreateViSurfaceNN-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkViSurfaceCreateInfoNN structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateViSurfaceNN-pCreateInfo-parameter)
VUID-vkCreateViSurfaceNN-pCreateInfo-parameter
VUID-vkCreateViSurfaceNN-pSurface-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateViSurfaceNN-pSurface-parameter)
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWaylandSurfaceKHR-instance-parameter)
VUID-vkCreateWaylandSurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter)
VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkWaylandSurfaceCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWaylandSurfaceKHR-pCreateInfo-parameter)
VUID-vkCreateWaylandSurfaceKHR-pCreateInfo-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWaylandSurfaceKHR-pSurface-parameter)
VUID-vkCreateWaylandSurfaceKHR-pSurface-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWin32SurfaceKHR-instance-parameter)
VUID-vkCreateWin32SurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter)
VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkWin32SurfaceCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWin32SurfaceKHR-pCreateInfo-parameter)
VUID-vkCreateWin32SurfaceKHR-pCreateInfo-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateWin32SurfaceKHR-pSurface-parameter)
VUID-vkCreateWin32SurfaceKHR-pSurface-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXcbSurfaceKHR-instance-parameter)
VUID-vkCreateXcbSurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter)
VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkXcbSurfaceCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXcbSurfaceKHR-pCreateInfo-parameter)
VUID-vkCreateXcbSurfaceKHR-pCreateInfo-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXcbSurfaceKHR-pSurface-parameter)
VUID-vkCreateXcbSurfaceKHR-pSurface-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXlibSurfaceKHR-instance-parameter)
VUID-vkCreateXlibSurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter)
VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter
pCreateInfo must be a valid pointer to a valid VkXlibSurfaceCreateInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXlibSurfaceKHR-pCreateInfo-parameter)
VUID-vkCreateXlibSurfaceKHR-pCreateInfo-parameter
VUID-vkCreateXlibSurfaceKHR-pSurface-parameter
pSurface must be a valid pointer to a VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkCreateXlibSurfaceKHR-pSurface-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugMarkerSetObjectNameEXT-device-parameter)
VUID-vkDebugMarkerSetObjectNameEXT-device-parameter
VUID-vkDebugMarkerSetObjectNameEXT-pNameInfo-parameter
pNameInfo must be a valid pointer to a valid VkDebugMarkerObjectNameInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugMarkerSetObjectNameEXT-pNameInfo-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugMarkerSetObjectTagEXT-device-parameter)
VUID-vkDebugMarkerSetObjectTagEXT-device-parameter
pTagInfo must be a valid pointer to a valid VkDebugMarkerObjectTagInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugMarkerSetObjectTagEXT-pTagInfo-parameter)
VUID-vkDebugMarkerSetObjectTagEXT-pTagInfo-parameter
flags must be a valid combination of VkDebugReportFlagBitsEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-flags-parameter)
VUID-vkDebugReportMessageEXT-flags-parameter
VUID-vkDebugReportMessageEXT-flags-requiredbitmask
flags must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-flags-requiredbitmask)
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-instance-parameter)
VUID-vkDebugReportMessageEXT-instance-parameter
object must be a Vulkan object or VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-object-01241)
VUID-vkDebugReportMessageEXT-object-01241
VUID-vkDebugReportMessageEXT-objectType-01498
If objectType is not VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT and object is not VK_NULL_HANDLE, object must be a Vulkan object of the corresponding type associated with objectType as defined in VkDebugReportObjectTypeEXT and Vulkan Handle Relationship. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-objectType-01498)
VUID-vkDebugReportMessageEXT-objectType-parameter
objectType must be a valid VkDebugReportObjectTypeEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-objectType-parameter)
pLayerPrefix must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-pLayerPrefix-parameter)
VUID-vkDebugReportMessageEXT-pLayerPrefix-parameter
pMessage must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDebugReportMessageEXT-pMessage-parameter)
VUID-vkDebugReportMessageEXT-pMessage-parameter
VUID-vkDestroyBuffer-buffer-00922
All submitted commands that refer to buffer, either directly or via a VkBufferView, must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBuffer-buffer-00922)
If VkAllocationCallbacks were provided when buffer was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBuffer-buffer-00923)
VUID-vkDestroyBuffer-buffer-00923
If no VkAllocationCallbacks were provided when buffer was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBuffer-buffer-00924)
VUID-vkDestroyBuffer-buffer-00924
If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBuffer-buffer-parameter)
VUID-vkDestroyBuffer-buffer-parameter
VUID-vkDestroyBuffer-buffer-parent
If buffer is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBuffer-buffer-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBuffer-device-parameter)
VUID-vkDestroyBuffer-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBuffer-pAllocator-parameter)
VUID-vkDestroyBuffer-pAllocator-parameter
All submitted commands that refer to bufferView must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBufferView-bufferView-00936)
VUID-vkDestroyBufferView-bufferView-00936
If VkAllocationCallbacks were provided when bufferView was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBufferView-bufferView-00937)
VUID-vkDestroyBufferView-bufferView-00937
If no VkAllocationCallbacks were provided when bufferView was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBufferView-bufferView-00938)
VUID-vkDestroyBufferView-bufferView-00938
If bufferView is not VK_NULL_HANDLE, bufferView must be a valid VkBufferView handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBufferView-bufferView-parameter)
VUID-vkDestroyBufferView-bufferView-parameter
If bufferView is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBufferView-bufferView-parent)
VUID-vkDestroyBufferView-bufferView-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBufferView-device-parameter)
VUID-vkDestroyBufferView-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyBufferView-pAllocator-parameter)
VUID-vkDestroyBufferView-pAllocator-parameter
All VkCommandBuffer objects allocated from commandPool must not be in the pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyCommandPool-commandPool-00041)
VUID-vkDestroyCommandPool-commandPool-00041
If VkAllocationCallbacks were provided when commandPool was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyCommandPool-commandPool-00042)
VUID-vkDestroyCommandPool-commandPool-00042
If no VkAllocationCallbacks were provided when commandPool was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyCommandPool-commandPool-00043)
VUID-vkDestroyCommandPool-commandPool-00043
If commandPool is not VK_NULL_HANDLE, commandPool must be a valid VkCommandPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyCommandPool-commandPool-parameter)
VUID-vkDestroyCommandPool-commandPool-parameter
If commandPool is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyCommandPool-commandPool-parent)
VUID-vkDestroyCommandPool-commandPool-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyCommandPool-device-parameter)
VUID-vkDestroyCommandPool-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyCommandPool-pAllocator-parameter)
VUID-vkDestroyCommandPool-pAllocator-parameter
VUID-vkDestroyDebugReportCallbackEXT-callback-parameter
callback must be a valid VkDebugReportCallbackEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugReportCallbackEXT-callback-parameter)
callback must have been created, allocated, or retrieved from instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugReportCallbackEXT-callback-parent)
VUID-vkDestroyDebugReportCallbackEXT-callback-parent
VUID-vkDestroyDebugReportCallbackEXT-instance-01242
If VkAllocationCallbacks were provided when callback was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugReportCallbackEXT-instance-01242)
If no VkAllocationCallbacks were provided when callback was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugReportCallbackEXT-instance-01243)
VUID-vkDestroyDebugReportCallbackEXT-instance-01243
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugReportCallbackEXT-instance-parameter)
VUID-vkDestroyDebugReportCallbackEXT-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter)
VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugUtilsMessengerEXT-instance-parameter)
VUID-vkDestroyDebugUtilsMessengerEXT-instance-parameter
VUID-vkDestroyDebugUtilsMessengerEXT-messenger-01915
If VkAllocationCallbacks were provided when messenger was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugUtilsMessengerEXT-messenger-01915)
VUID-vkDestroyDebugUtilsMessengerEXT-messenger-01916
If no VkAllocationCallbacks were provided when messenger was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugUtilsMessengerEXT-messenger-01916)
VUID-vkDestroyDebugUtilsMessengerEXT-messenger-parameter
messenger must be a valid VkDebugUtilsMessengerEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugUtilsMessengerEXT-messenger-parameter)
messenger must have been created, allocated, or retrieved from instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugUtilsMessengerEXT-messenger-parent)
VUID-vkDestroyDebugUtilsMessengerEXT-messenger-parent
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter)
VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter
VUID-vkDestroyDescriptorPool-descriptorPool-00303
All submitted commands that refer to descriptorPool (via any allocated descriptor sets) must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorPool-descriptorPool-00303)
If VkAllocationCallbacks were provided when descriptorPool was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorPool-descriptorPool-00304)
VUID-vkDestroyDescriptorPool-descriptorPool-00304
If no VkAllocationCallbacks were provided when descriptorPool was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorPool-descriptorPool-00305)
VUID-vkDestroyDescriptorPool-descriptorPool-00305
If descriptorPool is not VK_NULL_HANDLE, descriptorPool must be a valid VkDescriptorPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorPool-descriptorPool-parameter)
VUID-vkDestroyDescriptorPool-descriptorPool-parameter
If descriptorPool is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorPool-descriptorPool-parent)
VUID-vkDestroyDescriptorPool-descriptorPool-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorPool-device-parameter)
VUID-vkDestroyDescriptorPool-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorPool-pAllocator-parameter)
VUID-vkDestroyDescriptorPool-pAllocator-parameter
VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-00284
If VkAllocationCallbacks were provided when descriptorSetLayout was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-00284)
VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-00285
If no VkAllocationCallbacks were provided when descriptorSetLayout was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-00285)
VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-parameter
If descriptorSetLayout is not VK_NULL_HANDLE, descriptorSetLayout must be a valid VkDescriptorSetLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-parameter)
If descriptorSetLayout is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-parent)
VUID-vkDestroyDescriptorSetLayout-descriptorSetLayout-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorSetLayout-device-parameter)
VUID-vkDestroyDescriptorSetLayout-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter)
VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter
VUID-vkDestroyDescriptorUpdateTemplate-descriptorSetLayout-00356
If VkAllocationCallbacks were provided when descriptorSetLayout was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorUpdateTemplate-descriptorSetLayout-00356)
VUID-vkDestroyDescriptorUpdateTemplate-descriptorSetLayout-00357
If no VkAllocationCallbacks were provided when descriptorSetLayout was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorUpdateTemplate-descriptorSetLayout-00357)
VUID-vkDestroyDescriptorUpdateTemplate-descriptorUpdateTemplate-parameter
If descriptorUpdateTemplate is not VK_NULL_HANDLE, descriptorUpdateTemplate must be a valid VkDescriptorUpdateTemplate handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorUpdateTemplate-descriptorUpdateTemplate-parameter)
VUID-vkDestroyDescriptorUpdateTemplate-descriptorUpdateTemplate-parent
If descriptorUpdateTemplate is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorUpdateTemplate-descriptorUpdateTemplate-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorUpdateTemplate-device-parameter)
VUID-vkDestroyDescriptorUpdateTemplate-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter)
VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter
VUID-vkDestroyDevice-device-00378
All child objects created on device must have been destroyed prior to destroying device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00378)
If VkAllocationCallbacks were provided when device was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00379)
VUID-vkDestroyDevice-device-00379
If no VkAllocationCallbacks were provided when device was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-00380)
VUID-vkDestroyDevice-device-00380
VUID-vkDestroyDevice-device-parameter
If device is not NULL, device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-device-parameter)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyDevice-pAllocator-parameter)
VUID-vkDestroyDevice-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyEvent-device-parameter)
VUID-vkDestroyEvent-device-parameter
VUID-vkDestroyEvent-event-01145
All submitted commands that refer to event must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyEvent-event-01145)
If VkAllocationCallbacks were provided when event was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyEvent-event-01146)
VUID-vkDestroyEvent-event-01146
If no VkAllocationCallbacks were provided when event was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyEvent-event-01147)
VUID-vkDestroyEvent-event-01147
If event is not VK_NULL_HANDLE, event must be a valid VkEvent handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyEvent-event-parameter)
VUID-vkDestroyEvent-event-parameter
If event is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyEvent-event-parent)
VUID-vkDestroyEvent-event-parent
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyEvent-pAllocator-parameter)
VUID-vkDestroyEvent-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFence-device-parameter)
VUID-vkDestroyFence-device-parameter
VUID-vkDestroyFence-fence-01120
All queue submission commands that refer to fence must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFence-fence-01120)
If VkAllocationCallbacks were provided when fence was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFence-fence-01121)
VUID-vkDestroyFence-fence-01121
If no VkAllocationCallbacks were provided when fence was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFence-fence-01122)
VUID-vkDestroyFence-fence-01122
If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFence-fence-parameter)
VUID-vkDestroyFence-fence-parameter
If fence is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFence-fence-parent)
VUID-vkDestroyFence-fence-parent
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFence-pAllocator-parameter)
VUID-vkDestroyFence-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFramebuffer-device-parameter)
VUID-vkDestroyFramebuffer-device-parameter
All submitted commands that refer to framebuffer must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFramebuffer-framebuffer-00892)
VUID-vkDestroyFramebuffer-framebuffer-00892
If VkAllocationCallbacks were provided when framebuffer was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFramebuffer-framebuffer-00893)
VUID-vkDestroyFramebuffer-framebuffer-00893
If no VkAllocationCallbacks were provided when framebuffer was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFramebuffer-framebuffer-00894)
VUID-vkDestroyFramebuffer-framebuffer-00894
If framebuffer is not VK_NULL_HANDLE, framebuffer must be a valid VkFramebuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFramebuffer-framebuffer-parameter)
VUID-vkDestroyFramebuffer-framebuffer-parameter
If framebuffer is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFramebuffer-framebuffer-parent)
VUID-vkDestroyFramebuffer-framebuffer-parent
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyFramebuffer-pAllocator-parameter)
VUID-vkDestroyFramebuffer-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImage-device-parameter)
VUID-vkDestroyImage-device-parameter
All submitted commands that refer to image, either directly or via a VkImageView, must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImage-image-01000)
VUID-vkDestroyImage-image-01000
If VkAllocationCallbacks were provided when image was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImage-image-01001)
VUID-vkDestroyImage-image-01001
If no VkAllocationCallbacks were provided when image was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImage-image-01002)
VUID-vkDestroyImage-image-01002
If image is not VK_NULL_HANDLE, image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImage-image-parameter)
VUID-vkDestroyImage-image-parameter
If image is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImage-image-parent)
VUID-vkDestroyImage-image-parent
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImage-pAllocator-parameter)
VUID-vkDestroyImage-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImageView-device-parameter)
VUID-vkDestroyImageView-device-parameter
All submitted commands that refer to imageView must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImageView-imageView-01026)
VUID-vkDestroyImageView-imageView-01026
If VkAllocationCallbacks were provided when imageView was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImageView-imageView-01027)
VUID-vkDestroyImageView-imageView-01027
If no VkAllocationCallbacks were provided when imageView was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImageView-imageView-01028)
VUID-vkDestroyImageView-imageView-01028
If imageView is not VK_NULL_HANDLE, imageView must be a valid VkImageView handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImageView-imageView-parameter)
VUID-vkDestroyImageView-imageView-parameter
If imageView is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImageView-imageView-parent)
VUID-vkDestroyImageView-imageView-parent
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyImageView-pAllocator-parameter)
VUID-vkDestroyImageView-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyIndirectCommandsLayoutNVX-device-parameter)
VUID-vkDestroyIndirectCommandsLayoutNVX-device-parameter
All submitted commands that refer to indirectCommandsLayout must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-01352)
VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-01352
VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-parameter
indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-parameter)
VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-parent
indirectCommandsLayout must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyIndirectCommandsLayoutNVX-indirectCommandsLayout-parent)
VUID-vkDestroyIndirectCommandsLayoutNVX-objectTable-01353
If VkAllocationCallbacks were provided when objectTable was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyIndirectCommandsLayoutNVX-objectTable-01353)
If no VkAllocationCallbacks were provided when objectTable was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyIndirectCommandsLayoutNVX-objectTable-01354)
VUID-vkDestroyIndirectCommandsLayoutNVX-objectTable-01354
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyIndirectCommandsLayoutNVX-pAllocator-parameter)
VUID-vkDestroyIndirectCommandsLayoutNVX-pAllocator-parameter
VUID-vkDestroyInstance-instance-00629
All child objects created using instance must have been destroyed prior to destroying instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyInstance-instance-00629)
If VkAllocationCallbacks were provided when instance was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyInstance-instance-00630)
VUID-vkDestroyInstance-instance-00630
If no VkAllocationCallbacks were provided when instance was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyInstance-instance-00631)
VUID-vkDestroyInstance-instance-00631
VUID-vkDestroyInstance-instance-parameter
If instance is not NULL, instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyInstance-instance-parameter)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyInstance-pAllocator-parameter)
VUID-vkDestroyInstance-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyObjectTableNVX-device-parameter)
VUID-vkDestroyObjectTableNVX-device-parameter
VUID-vkDestroyObjectTableNVX-objectTable-01361
All submitted commands that refer to objectTable must have completed execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyObjectTableNVX-objectTable-01361)
If VkAllocationCallbacks were provided when objectTable was created, a compatible set of callbacks must be provided here. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyObjectTableNVX-objectTable-01362)
VUID-vkDestroyObjectTableNVX-objectTable-01362
VUID-vkDestroyObjectTableNVX-objectTable-01363
If no VkAllocationCallbacks were provided when objectTable was created, pAllocator must be NULL. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyObjectTableNVX-objectTable-01363)
objectTable must be a valid VkObjectTableNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyObjectTableNVX-objectTable-parameter)
VUID-vkDestroyObjectTableNVX-objectTable-parameter
VUID-vkDestroyObjectTableNVX-objectTable-parent
objectTable must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyObjectTableNVX-objectTable-parent)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyObjectTableNVX-pAllocator-parameter)
VUID-vkDestroyObjectTableNVX-pAllocator-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-device-parameter)
VUID-vkDestroyPipeline-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pAllocator-parameter)
VUID-vkDestroyPipeline-pAllocator-parameter
VUID-vkDestroyPipeline-pipeline-00765
All submitted commands that refer to pipeline must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pipeline-00765)
If VkAllocationCallbacks were provided when pipeline was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pipeline-00766)
VUID-vkDestroyPipeline-pipeline-00766
If no VkAllocationCallbacks were provided when pipeline was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pipeline-00767)
VUID-vkDestroyPipeline-pipeline-00767
If pipeline is not VK_NULL_HANDLE, pipeline must be a valid VkPipeline handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pipeline-parameter)
VUID-vkDestroyPipeline-pipeline-parameter
If pipeline is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipeline-pipeline-parent)
VUID-vkDestroyPipeline-pipeline-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineCache-device-parameter)
VUID-vkDestroyPipelineCache-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineCache-pAllocator-parameter)
VUID-vkDestroyPipelineCache-pAllocator-parameter
VUID-vkDestroyPipelineCache-pipelineCache-00771
If VkAllocationCallbacks were provided when pipelineCache was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineCache-pipelineCache-00771)
If no VkAllocationCallbacks were provided when pipelineCache was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineCache-pipelineCache-00772)
VUID-vkDestroyPipelineCache-pipelineCache-00772
If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineCache-pipelineCache-parameter)
VUID-vkDestroyPipelineCache-pipelineCache-parameter
VUID-vkDestroyPipelineCache-pipelineCache-parent
If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineCache-pipelineCache-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineLayout-device-parameter)
VUID-vkDestroyPipelineLayout-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineLayout-pAllocator-parameter)
VUID-vkDestroyPipelineLayout-pAllocator-parameter
If VkAllocationCallbacks were provided when pipelineLayout was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineLayout-pipelineLayout-00299)
VUID-vkDestroyPipelineLayout-pipelineLayout-00299
If no VkAllocationCallbacks were provided when pipelineLayout was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineLayout-pipelineLayout-00300)
VUID-vkDestroyPipelineLayout-pipelineLayout-00300
VUID-vkDestroyPipelineLayout-pipelineLayout-02004
pipelineLayout must not have been passed to any vkCmd* command for any command buffers that are still in the recording state when vkDestroyPipelineLayout is called (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineLayout-pipelineLayout-02004)
If pipelineLayout is not VK_NULL_HANDLE, pipelineLayout must be a valid VkPipelineLayout handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineLayout-pipelineLayout-parameter)
VUID-vkDestroyPipelineLayout-pipelineLayout-parameter
If pipelineLayout is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyPipelineLayout-pipelineLayout-parent)
VUID-vkDestroyPipelineLayout-pipelineLayout-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyQueryPool-device-parameter)
VUID-vkDestroyQueryPool-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyQueryPool-pAllocator-parameter)
VUID-vkDestroyQueryPool-pAllocator-parameter
All submitted commands that refer to queryPool must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyQueryPool-queryPool-00793)
VUID-vkDestroyQueryPool-queryPool-00793
If VkAllocationCallbacks were provided when queryPool was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyQueryPool-queryPool-00794)
VUID-vkDestroyQueryPool-queryPool-00794
If no VkAllocationCallbacks were provided when queryPool was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyQueryPool-queryPool-00795)
VUID-vkDestroyQueryPool-queryPool-00795
If queryPool is not VK_NULL_HANDLE, queryPool must be a valid VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyQueryPool-queryPool-parameter)
VUID-vkDestroyQueryPool-queryPool-parameter
If queryPool is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyQueryPool-queryPool-parent)
VUID-vkDestroyQueryPool-queryPool-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyRenderPass-device-parameter)
VUID-vkDestroyRenderPass-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyRenderPass-pAllocator-parameter)
VUID-vkDestroyRenderPass-pAllocator-parameter
All submitted commands that refer to renderPass must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyRenderPass-renderPass-00873)
VUID-vkDestroyRenderPass-renderPass-00873
If VkAllocationCallbacks were provided when renderPass was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyRenderPass-renderPass-00874)
VUID-vkDestroyRenderPass-renderPass-00874
If no VkAllocationCallbacks were provided when renderPass was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyRenderPass-renderPass-00875)
VUID-vkDestroyRenderPass-renderPass-00875
If renderPass is not VK_NULL_HANDLE, renderPass must be a valid VkRenderPass handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyRenderPass-renderPass-parameter)
VUID-vkDestroyRenderPass-renderPass-parameter
If renderPass is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyRenderPass-renderPass-parent)
VUID-vkDestroyRenderPass-renderPass-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySampler-device-parameter)
VUID-vkDestroySampler-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySampler-pAllocator-parameter)
VUID-vkDestroySampler-pAllocator-parameter
VUID-vkDestroySampler-sampler-01082
All submitted commands that refer to sampler must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySampler-sampler-01082)
If VkAllocationCallbacks were provided when sampler was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySampler-sampler-01083)
VUID-vkDestroySampler-sampler-01083
VUID-vkDestroySampler-sampler-01084
If no VkAllocationCallbacks were provided when sampler was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySampler-sampler-01084)
VUID-vkDestroySampler-sampler-parameter
If sampler is not VK_NULL_HANDLE, sampler must be a valid VkSampler handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySampler-sampler-parameter)
VUID-vkDestroySampler-sampler-parent
If sampler is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySampler-sampler-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySamplerYcbcrConversion-device-parameter)
VUID-vkDestroySamplerYcbcrConversion-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter)
VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter
VUID-vkDestroySamplerYcbcrConversion-ycbcrConversion-parameter
If ycbcrConversion is not VK_NULL_HANDLE, ycbcrConversion must be a valid VkSamplerYcbcrConversion handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySamplerYcbcrConversion-ycbcrConversion-parameter)
If ycbcrConversion is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySamplerYcbcrConversion-ycbcrConversion-parent)
VUID-vkDestroySamplerYcbcrConversion-ycbcrConversion-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-device-parameter)
VUID-vkDestroySemaphore-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-pAllocator-parameter)
VUID-vkDestroySemaphore-pAllocator-parameter
VUID-vkDestroySemaphore-semaphore-01137
All submitted batches that refer to semaphore must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-semaphore-01137)
If VkAllocationCallbacks were provided when semaphore was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-semaphore-01138)
VUID-vkDestroySemaphore-semaphore-01138
If no VkAllocationCallbacks were provided when semaphore was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-semaphore-01139)
VUID-vkDestroySemaphore-semaphore-01139
If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-semaphore-parameter)
VUID-vkDestroySemaphore-semaphore-parameter
If semaphore is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySemaphore-semaphore-parent)
VUID-vkDestroySemaphore-semaphore-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyShaderModule-device-parameter)
VUID-vkDestroyShaderModule-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyShaderModule-pAllocator-parameter)
VUID-vkDestroyShaderModule-pAllocator-parameter
VUID-vkDestroyShaderModule-shaderModule-01092
If VkAllocationCallbacks were provided when shaderModule was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyShaderModule-shaderModule-01092)
VUID-vkDestroyShaderModule-shaderModule-01093
If no VkAllocationCallbacks were provided when shaderModule was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyShaderModule-shaderModule-01093)
VUID-vkDestroyShaderModule-shaderModule-parameter
If shaderModule is not VK_NULL_HANDLE, shaderModule must be a valid VkShaderModule handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyShaderModule-shaderModule-parameter)
VUID-vkDestroyShaderModule-shaderModule-parent
If shaderModule is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyShaderModule-shaderModule-parent)
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySurfaceKHR-instance-parameter)
VUID-vkDestroySurfaceKHR-instance-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySurfaceKHR-pAllocator-parameter)
VUID-vkDestroySurfaceKHR-pAllocator-parameter
VUID-vkDestroySurfaceKHR-surface-01266
All VkSwapchainKHR objects created for surface must have been destroyed prior to destroying surface (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySurfaceKHR-surface-01266)
VUID-vkDestroySurfaceKHR-surface-01267
If VkAllocationCallbacks were provided when surface was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySurfaceKHR-surface-01267)
VUID-vkDestroySurfaceKHR-surface-01268
If no VkAllocationCallbacks were provided when surface was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySurfaceKHR-surface-01268)
VUID-vkDestroySurfaceKHR-surface-parameter
If surface is not VK_NULL_HANDLE, surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySurfaceKHR-surface-parameter)
If surface is a valid handle, it must have been created, allocated, or retrieved from instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySurfaceKHR-surface-parent)
VUID-vkDestroySurfaceKHR-surface-parent
Both of device, and swapchain that are valid handles must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySwapchainKHR-commonparent)
VUID-vkDestroySwapchainKHR-commonparent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySwapchainKHR-device-parameter)
VUID-vkDestroySwapchainKHR-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySwapchainKHR-pAllocator-parameter)
VUID-vkDestroySwapchainKHR-pAllocator-parameter
VUID-vkDestroySwapchainKHR-swapchain-01282
All uses of presentable images acquired from swapchain must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySwapchainKHR-swapchain-01282)
VUID-vkDestroySwapchainKHR-swapchain-01283
If VkAllocationCallbacks were provided when swapchain was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySwapchainKHR-swapchain-01283)
VUID-vkDestroySwapchainKHR-swapchain-01284
If no VkAllocationCallbacks were provided when swapchain was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySwapchainKHR-swapchain-01284)
If swapchain is not VK_NULL_HANDLE, swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroySwapchainKHR-swapchain-parameter)
VUID-vkDestroySwapchainKHR-swapchain-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyValidationCacheEXT-device-parameter)
VUID-vkDestroyValidationCacheEXT-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyValidationCacheEXT-pAllocator-parameter)
VUID-vkDestroyValidationCacheEXT-pAllocator-parameter
VUID-vkDestroyValidationCacheEXT-validationCache-01537
If VkAllocationCallbacks were provided when validationCache was created, a compatible set of callbacks must be provided here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyValidationCacheEXT-validationCache-01537)
VUID-vkDestroyValidationCacheEXT-validationCache-01538
If no VkAllocationCallbacks were provided when validationCache was created, pAllocator must be NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyValidationCacheEXT-validationCache-01538)
VUID-vkDestroyValidationCacheEXT-validationCache-parameter
If validationCache is not VK_NULL_HANDLE, validationCache must be a valid VkValidationCacheEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyValidationCacheEXT-validationCache-parameter)
If validationCache is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDestroyValidationCacheEXT-validationCache-parent)
VUID-vkDestroyValidationCacheEXT-validationCache-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDeviceWaitIdle-device-parameter)
VUID-vkDeviceWaitIdle-device-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDisplayPowerControlEXT-device-parameter)
VUID-vkDisplayPowerControlEXT-device-parameter
display must be a valid VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDisplayPowerControlEXT-display-parameter)
VUID-vkDisplayPowerControlEXT-display-parameter
pDisplayPowerInfo must be a valid pointer to a valid VkDisplayPowerInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkDisplayPowerControlEXT-pDisplayPowerInfo-parameter)
VUID-vkDisplayPowerControlEXT-pDisplayPowerInfo-parameter
VUID-vkEndCommandBuffer-None-01978
Conditional rendering must not be active (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEndCommandBuffer-None-01978)
commandBuffer must be in the recording state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEndCommandBuffer-commandBuffer-00059)
VUID-vkEndCommandBuffer-commandBuffer-00059
If commandBuffer is a primary command buffer, there must not be an active render pass instance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEndCommandBuffer-commandBuffer-00060)
VUID-vkEndCommandBuffer-commandBuffer-00060
VUID-vkEndCommandBuffer-commandBuffer-00061
All queries made active during the recording of commandBuffer must have been made inactive (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEndCommandBuffer-commandBuffer-00061)
VUID-vkEndCommandBuffer-commandBuffer-00062
If commandBuffer is a secondary command buffer, there must not be an outstanding vkCmdDebugMarkerBeginEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdDebugMarkerEndEXT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEndCommandBuffer-commandBuffer-00062)
VUID-vkEndCommandBuffer-commandBuffer-01815
If commandBuffer is a secondary command buffer, there must not be an outstanding vkCmdBeginDebugUtilsLabelEXT command recorded to commandBuffer that has not previously been ended by a call to vkCmdEndDebugUtilsLabelEXT. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEndCommandBuffer-commandBuffer-01815)
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEndCommandBuffer-commandBuffer-parameter)
VUID-vkEndCommandBuffer-commandBuffer-parameter
VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter
If pLayerName is not NULL, pLayerName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter)
VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkExtensionProperties structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter)
VUID-vkEnumerateDeviceExtensionProperties-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateDeviceExtensionProperties-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateDeviceExtensionProperties-physicalDevice-parameter)
VUID-vkEnumerateDeviceExtensionProperties-physicalDevice-parameter
VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkLayerProperties structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter)
VUID-vkEnumerateDeviceLayerProperties-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateDeviceLayerProperties-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateDeviceLayerProperties-physicalDevice-parameter)
VUID-vkEnumerateDeviceLayerProperties-physicalDevice-parameter
VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter
If pLayerName is not NULL, pLayerName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter)
VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkExtensionProperties structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter)
VUID-vkEnumerateInstanceExtensionProperties-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateInstanceExtensionProperties-pPropertyCount-parameter)
VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkLayerProperties structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter)
VUID-vkEnumerateInstanceLayerProperties-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateInstanceLayerProperties-pPropertyCount-parameter)
pApiVersion must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumerateInstanceVersion-pApiVersion-parameter)
VUID-vkEnumerateInstanceVersion-pApiVersion-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumeratePhysicalDeviceGroups-instance-parameter)
VUID-vkEnumeratePhysicalDeviceGroups-instance-parameter
VUID-vkEnumeratePhysicalDeviceGroups-pPhysicalDeviceGroupCount-parameter
pPhysicalDeviceGroupCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumeratePhysicalDeviceGroups-pPhysicalDeviceGroupCount-parameter)
VUID-vkEnumeratePhysicalDeviceGroups-pPhysicalDeviceGroupProperties-parameter
If the value referenced by pPhysicalDeviceGroupCount is not 0, and pPhysicalDeviceGroupProperties is not NULL, pPhysicalDeviceGroupProperties must be a valid pointer to an array of pPhysicalDeviceGroupCount VkPhysicalDeviceGroupProperties structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumeratePhysicalDeviceGroups-pPhysicalDeviceGroupProperties-parameter)
VUID-vkEnumeratePhysicalDevices-instance-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumeratePhysicalDevices-instance-parameter)
pPhysicalDeviceCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumeratePhysicalDevices-pPhysicalDeviceCount-parameter)
VUID-vkEnumeratePhysicalDevices-pPhysicalDeviceCount-parameter
VUID-vkEnumeratePhysicalDevices-pPhysicalDevices-parameter
If the value referenced by pPhysicalDeviceCount is not 0, and pPhysicalDevices is not NULL, pPhysicalDevices must be a valid pointer to an array of pPhysicalDeviceCount VkPhysicalDevice handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkEnumeratePhysicalDevices-pPhysicalDevices-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFlushMappedMemoryRanges-device-parameter)
VUID-vkFlushMappedMemoryRanges-device-parameter
VUID-vkFlushMappedMemoryRanges-memoryRangeCount-arraylength
memoryRangeCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFlushMappedMemoryRanges-memoryRangeCount-arraylength)
VUID-vkFlushMappedMemoryRanges-pMemoryRanges-parameter
pMemoryRanges must be a valid pointer to an array of memoryRangeCount valid VkMappedMemoryRange structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFlushMappedMemoryRanges-pMemoryRanges-parameter)
commandBufferCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-commandBufferCount-arraylength)
VUID-vkFreeCommandBuffers-commandBufferCount-arraylength
VUID-vkFreeCommandBuffers-commandPool-parameter
commandPool must be a valid VkCommandPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-commandPool-parameter)
commandPool must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-commandPool-parent)
VUID-vkFreeCommandBuffers-commandPool-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-device-parameter)
VUID-vkFreeCommandBuffers-device-parameter
All elements of pCommandBuffers must not be in the pending state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-pCommandBuffers-00047)
VUID-vkFreeCommandBuffers-pCommandBuffers-00047
VUID-vkFreeCommandBuffers-pCommandBuffers-00048
pCommandBuffers must be a valid pointer to an array of commandBufferCount VkCommandBuffer handles, each element of which must either be a valid handle or NULL (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-pCommandBuffers-00048)
Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeCommandBuffers-pCommandBuffers-parent)
VUID-vkFreeCommandBuffers-pCommandBuffers-parent
descriptorPool must have been created with the VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT flag (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-descriptorPool-00312)
VUID-vkFreeDescriptorSets-descriptorPool-00312
VUID-vkFreeDescriptorSets-descriptorPool-parameter
descriptorPool must be a valid VkDescriptorPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-descriptorPool-parameter)
descriptorPool must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-descriptorPool-parent)
VUID-vkFreeDescriptorSets-descriptorPool-parent
descriptorSetCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-descriptorSetCount-arraylength)
VUID-vkFreeDescriptorSets-descriptorSetCount-arraylength
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-device-parameter)
VUID-vkFreeDescriptorSets-device-parameter
All submitted commands that refer to any element of pDescriptorSets must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-pDescriptorSets-00309)
VUID-vkFreeDescriptorSets-pDescriptorSets-00309
pDescriptorSets must be a valid pointer to an array of descriptorSetCount VkDescriptorSet handles, each element of which must either be a valid handle or VK_NULL_HANDLE (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-pDescriptorSets-00310)
VUID-vkFreeDescriptorSets-pDescriptorSets-00310
Each valid handle in pDescriptorSets must have been allocated from descriptorPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-pDescriptorSets-00311)
VUID-vkFreeDescriptorSets-pDescriptorSets-00311
Each element of pDescriptorSets that is a valid handle must have been created, allocated, or retrieved from descriptorPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeDescriptorSets-pDescriptorSets-parent)
VUID-vkFreeDescriptorSets-pDescriptorSets-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeMemory-device-parameter)
VUID-vkFreeMemory-device-parameter
VUID-vkFreeMemory-memory-00677
All submitted commands that refer to memory (via images or buffers) must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeMemory-memory-00677)
If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeMemory-memory-parameter)
VUID-vkFreeMemory-memory-parameter
VUID-vkFreeMemory-memory-parent
If memory is a valid handle, it must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeMemory-memory-parent)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkFreeMemory-pAllocator-parameter)
VUID-vkFreeMemory-pAllocator-parameter
VUID-vkGetAndroidHardwareBufferPropertiesANDROID-buffer-01884
buffer must be a valid Android hardware buffer object with at least one of the AHARDWAREBUFFER_USAGE_GPU_* usage flags. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetAndroidHardwareBufferPropertiesANDROID-buffer-01884)
VUID-vkGetAndroidHardwareBufferPropertiesANDROID-buffer-parameter
buffer must be a valid pointer to a valid AHardwareBuffer value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetAndroidHardwareBufferPropertiesANDROID-buffer-parameter)
VUID-vkGetAndroidHardwareBufferPropertiesANDROID-device-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetAndroidHardwareBufferPropertiesANDROID-device-parameter)
VUID-vkGetAndroidHardwareBufferPropertiesANDROID-pProperties-parameter
pProperties must be a valid pointer to a VkAndroidHardwareBufferPropertiesANDROID structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetAndroidHardwareBufferPropertiesANDROID-pProperties-parameter)
buffer must be a valid VkBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetBufferMemoryRequirements-buffer-parameter)
VUID-vkGetBufferMemoryRequirements-buffer-parameter
buffer must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetBufferMemoryRequirements-buffer-parent)
VUID-vkGetBufferMemoryRequirements-buffer-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetBufferMemoryRequirements-device-parameter)
VUID-vkGetBufferMemoryRequirements-device-parameter
VUID-vkGetBufferMemoryRequirements-pMemoryRequirements-parameter
pMemoryRequirements must be a valid pointer to a VkMemoryRequirements structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetBufferMemoryRequirements-pMemoryRequirements-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetBufferMemoryRequirements2-device-parameter)
VUID-vkGetBufferMemoryRequirements2-device-parameter
pInfo must be a valid pointer to a valid VkBufferMemoryRequirementsInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetBufferMemoryRequirements2-pInfo-parameter)
VUID-vkGetBufferMemoryRequirements2-pInfo-parameter
VUID-vkGetBufferMemoryRequirements2-pMemoryRequirements-parameter
pMemoryRequirements must be a valid pointer to a VkMemoryRequirements2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetBufferMemoryRequirements2-pMemoryRequirements-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDescriptorSetLayoutSupport-device-parameter)
VUID-vkGetDescriptorSetLayoutSupport-device-parameter
VUID-vkGetDescriptorSetLayoutSupport-pCreateInfo-parameter
pCreateInfo must be a valid pointer to a valid VkDescriptorSetLayoutCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDescriptorSetLayoutSupport-pCreateInfo-parameter)
pSupport must be a valid pointer to a VkDescriptorSetLayoutSupport structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDescriptorSetLayoutSupport-pSupport-parameter)
VUID-vkGetDescriptorSetLayoutSupport-pSupport-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPeerMemoryFeatures-device-parameter)
VUID-vkGetDeviceGroupPeerMemoryFeatures-device-parameter
VUID-vkGetDeviceGroupPeerMemoryFeatures-heapIndex-00691
heapIndex must be less than memoryHeapCount (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPeerMemoryFeatures-heapIndex-00691)
VUID-vkGetDeviceGroupPeerMemoryFeatures-localDeviceIndex-00692
localDeviceIndex must be a valid device index (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPeerMemoryFeatures-localDeviceIndex-00692)
VUID-vkGetDeviceGroupPeerMemoryFeatures-localDeviceIndex-00694
localDeviceIndex must not equal remoteDeviceIndex (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPeerMemoryFeatures-localDeviceIndex-00694)
VUID-vkGetDeviceGroupPeerMemoryFeatures-pPeerMemoryFeatures-parameter
pPeerMemoryFeatures must be a valid pointer to a VkPeerMemoryFeatureFlags value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPeerMemoryFeatures-pPeerMemoryFeatures-parameter)
VUID-vkGetDeviceGroupPeerMemoryFeatures-remoteDeviceIndex-00693
remoteDeviceIndex must be a valid device index (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPeerMemoryFeatures-remoteDeviceIndex-00693)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPresentCapabilitiesKHR-device-parameter)
VUID-vkGetDeviceGroupPresentCapabilitiesKHR-device-parameter
VUID-vkGetDeviceGroupPresentCapabilitiesKHR-pDeviceGroupPresentCapabilities-parameter
pDeviceGroupPresentCapabilities must be a valid pointer to a VkDeviceGroupPresentCapabilitiesKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupPresentCapabilitiesKHR-pDeviceGroupPresentCapabilities-parameter)
Both of device, and surface must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupSurfacePresentModesKHR-commonparent)
VUID-vkGetDeviceGroupSurfacePresentModesKHR-commonparent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupSurfacePresentModesKHR-device-parameter)
VUID-vkGetDeviceGroupSurfacePresentModesKHR-device-parameter
VUID-vkGetDeviceGroupSurfacePresentModesKHR-pModes-parameter
pModes must be a valid pointer to a VkDeviceGroupPresentModeFlagsKHR value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupSurfacePresentModesKHR-pModes-parameter)
VUID-vkGetDeviceGroupSurfacePresentModesKHR-surface-parameter
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceGroupSurfacePresentModesKHR-surface-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceMemoryCommitment-device-parameter)
VUID-vkGetDeviceMemoryCommitment-device-parameter
VUID-vkGetDeviceMemoryCommitment-memory-00690
memory must have been created with a memory type that reports VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceMemoryCommitment-memory-00690)
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceMemoryCommitment-memory-parameter)
VUID-vkGetDeviceMemoryCommitment-memory-parameter
VUID-vkGetDeviceMemoryCommitment-memory-parent
memory must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceMemoryCommitment-memory-parent)
VUID-vkGetDeviceMemoryCommitment-pCommittedMemoryInBytes-parameter
pCommittedMemoryInBytes must be a valid pointer to a VkDeviceSize value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceMemoryCommitment-pCommittedMemoryInBytes-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceProcAddr-device-parameter)
VUID-vkGetDeviceProcAddr-device-parameter
pName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceProcAddr-pName-parameter)
VUID-vkGetDeviceProcAddr-pName-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue-device-parameter)
VUID-vkGetDeviceQueue-device-parameter
VUID-vkGetDeviceQueue-flags-01841
VkDeviceQueueCreateInfo::flags must have been set to zero when device was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue-flags-01841)
VUID-vkGetDeviceQueue-pQueue-parameter
pQueue must be a valid pointer to a VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue-pQueue-parameter)
queueFamilyIndex must be one of the queue family indices specified when device was created, via the VkDeviceQueueCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue-queueFamilyIndex-00384)
VUID-vkGetDeviceQueue-queueFamilyIndex-00384
VUID-vkGetDeviceQueue-queueIndex-00385
queueIndex must be less than the number of queues created for the specified queue family index when device was created, via the queueCount member of the VkDeviceQueueCreateInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue-queueIndex-00385)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue2-device-parameter)
VUID-vkGetDeviceQueue2-device-parameter
VUID-vkGetDeviceQueue2-pQueue-parameter
pQueue must be a valid pointer to a VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue2-pQueue-parameter)
pQueueInfo must be a valid pointer to a valid VkDeviceQueueInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDeviceQueue2-pQueueInfo-parameter)
VUID-vkGetDeviceQueue2-pQueueInfo-parameter
VUID-vkGetDisplayModeProperties2KHR-display-parameter
display must be a valid VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModeProperties2KHR-display-parameter)
VUID-vkGetDisplayModeProperties2KHR-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayModeProperties2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModeProperties2KHR-pProperties-parameter)
VUID-vkGetDisplayModeProperties2KHR-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModeProperties2KHR-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModeProperties2KHR-physicalDevice-parameter)
VUID-vkGetDisplayModeProperties2KHR-physicalDevice-parameter
display must be a valid VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModePropertiesKHR-display-parameter)
VUID-vkGetDisplayModePropertiesKHR-display-parameter
VUID-vkGetDisplayModePropertiesKHR-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayModePropertiesKHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModePropertiesKHR-pProperties-parameter)
VUID-vkGetDisplayModePropertiesKHR-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModePropertiesKHR-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayModePropertiesKHR-physicalDevice-parameter)
VUID-vkGetDisplayModePropertiesKHR-physicalDevice-parameter
VUID-vkGetDisplayPlaneCapabilities2KHR-pCapabilities-parameter
pCapabilities must be a valid pointer to a VkDisplayPlaneCapabilities2KHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneCapabilities2KHR-pCapabilities-parameter)
pDisplayPlaneInfo must be a valid pointer to a valid VkDisplayPlaneInfo2KHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneCapabilities2KHR-pDisplayPlaneInfo-parameter)
VUID-vkGetDisplayPlaneCapabilities2KHR-pDisplayPlaneInfo-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneCapabilities2KHR-physicalDevice-parameter)
VUID-vkGetDisplayPlaneCapabilities2KHR-physicalDevice-parameter
mode must be a valid VkDisplayModeKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneCapabilitiesKHR-mode-parameter)
VUID-vkGetDisplayPlaneCapabilitiesKHR-mode-parameter
pCapabilities must be a valid pointer to a VkDisplayPlaneCapabilitiesKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneCapabilitiesKHR-pCapabilities-parameter)
VUID-vkGetDisplayPlaneCapabilitiesKHR-pCapabilities-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneCapabilitiesKHR-physicalDevice-parameter)
VUID-vkGetDisplayPlaneCapabilitiesKHR-physicalDevice-parameter
VUID-vkGetDisplayPlaneSupportedDisplaysKHR-pDisplayCount-parameter
pDisplayCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneSupportedDisplaysKHR-pDisplayCount-parameter)
VUID-vkGetDisplayPlaneSupportedDisplaysKHR-pDisplays-parameter
If the value referenced by pDisplayCount is not 0, and pDisplays is not NULL, pDisplays must be a valid pointer to an array of pDisplayCount VkDisplayKHR handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneSupportedDisplaysKHR-pDisplays-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneSupportedDisplaysKHR-physicalDevice-parameter)
VUID-vkGetDisplayPlaneSupportedDisplaysKHR-physicalDevice-parameter
VUID-vkGetDisplayPlaneSupportedDisplaysKHR-planeIndex-01249
planeIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetDisplayPlaneSupportedDisplaysKHR-planeIndex-01249)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetEventStatus-device-parameter)
VUID-vkGetEventStatus-device-parameter
event must be a valid VkEvent handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetEventStatus-event-parameter)
VUID-vkGetEventStatus-event-parameter
event must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetEventStatus-event-parent)
VUID-vkGetEventStatus-event-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceFdKHR-device-parameter)
VUID-vkGetFenceFdKHR-device-parameter
VUID-vkGetFenceFdKHR-pFd-parameter
pFd must be a valid pointer to a int value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceFdKHR-pFd-parameter)
pGetFdInfo must be a valid pointer to a valid VkFenceGetFdInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceFdKHR-pGetFdInfo-parameter)
VUID-vkGetFenceFdKHR-pGetFdInfo-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceStatus-device-parameter)
VUID-vkGetFenceStatus-device-parameter
fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceStatus-fence-parameter)
VUID-vkGetFenceStatus-fence-parameter
fence must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceStatus-fence-parent)
VUID-vkGetFenceStatus-fence-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceWin32HandleKHR-device-parameter)
VUID-vkGetFenceWin32HandleKHR-device-parameter
pGetWin32HandleInfo must be a valid pointer to a valid VkFenceGetWin32HandleInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceWin32HandleKHR-pGetWin32HandleInfo-parameter)
VUID-vkGetFenceWin32HandleKHR-pGetWin32HandleInfo-parameter
pHandle must be a valid pointer to a HANDLE value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetFenceWin32HandleKHR-pHandle-parameter)
VUID-vkGetFenceWin32HandleKHR-pHandle-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements-device-parameter)
VUID-vkGetImageMemoryRequirements-device-parameter
image must not have been created with the VK_IMAGE_CREATE_DISJOINT_BIT flag set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements-image-01588)
VUID-vkGetImageMemoryRequirements-image-01588
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements-image-parameter)
VUID-vkGetImageMemoryRequirements-image-parameter
image must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements-image-parent)
VUID-vkGetImageMemoryRequirements-image-parent
VUID-vkGetImageMemoryRequirements-pMemoryRequirements-parameter
pMemoryRequirements must be a valid pointer to a VkMemoryRequirements structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements-pMemoryRequirements-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements2-device-parameter)
VUID-vkGetImageMemoryRequirements2-device-parameter
pInfo must be a valid pointer to a valid VkImageMemoryRequirementsInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements2-pInfo-parameter)
VUID-vkGetImageMemoryRequirements2-pInfo-parameter
VUID-vkGetImageMemoryRequirements2-pMemoryRequirements-parameter
pMemoryRequirements must be a valid pointer to a VkMemoryRequirements2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageMemoryRequirements2-pMemoryRequirements-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements-device-parameter)
VUID-vkGetImageSparseMemoryRequirements-device-parameter
VUID-vkGetImageSparseMemoryRequirements-image-parameter
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements-image-parameter)
image must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements-image-parent)
VUID-vkGetImageSparseMemoryRequirements-image-parent
VUID-vkGetImageSparseMemoryRequirements-pSparseMemoryRequirementCount-parameter
pSparseMemoryRequirementCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements-pSparseMemoryRequirementCount-parameter)
VUID-vkGetImageSparseMemoryRequirements-pSparseMemoryRequirements-parameter
If the value referenced by pSparseMemoryRequirementCount is not 0, and pSparseMemoryRequirements is not NULL, pSparseMemoryRequirements must be a valid pointer to an array of pSparseMemoryRequirementCount VkSparseImageMemoryRequirements structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements-pSparseMemoryRequirements-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements2-device-parameter)
VUID-vkGetImageSparseMemoryRequirements2-device-parameter
VUID-vkGetImageSparseMemoryRequirements2-pInfo-parameter
pInfo must be a valid pointer to a valid VkImageSparseMemoryRequirementsInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements2-pInfo-parameter)
VUID-vkGetImageSparseMemoryRequirements2-pSparseMemoryRequirementCount-parameter
pSparseMemoryRequirementCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements2-pSparseMemoryRequirementCount-parameter)
VUID-vkGetImageSparseMemoryRequirements2-pSparseMemoryRequirements-parameter
If the value referenced by pSparseMemoryRequirementCount is not 0, and pSparseMemoryRequirements is not NULL, pSparseMemoryRequirements must be a valid pointer to an array of pSparseMemoryRequirementCount VkSparseImageMemoryRequirements2 structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSparseMemoryRequirements2-pSparseMemoryRequirements-parameter)
VUID-vkGetImageSubresourceLayout-arrayLayer-01717
The arrayLayer member of pSubresource must be less than the arrayLayers specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-arrayLayer-01717)
VUID-vkGetImageSubresourceLayout-aspectMask-00997
The aspectMask member of pSubresource must only have a single bit set (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-aspectMask-00997)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-device-parameter)
VUID-vkGetImageSubresourceLayout-device-parameter
VUID-vkGetImageSubresourceLayout-format-01581
If the format of image is a multi-planar format with two planes, the aspectMask member of pSubresource must be VK_IMAGE_ASPECT_PLANE_0_BIT or VK_IMAGE_ASPECT_PLANE_1_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-format-01581)
VUID-vkGetImageSubresourceLayout-format-01582
If the format of image is a multi-planar format with three planes, the aspectMask member of pSubresource must be VK_IMAGE_ASPECT_PLANE_0_BIT, VK_IMAGE_ASPECT_PLANE_1_BIT or VK_IMAGE_ASPECT_PLANE_2_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-format-01582)
image must have been created with tiling equal to VK_IMAGE_TILING_LINEAR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-image-00996)
VUID-vkGetImageSubresourceLayout-image-00996
VUID-vkGetImageSubresourceLayout-image-01895
If image was created with the VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID external memory handle type, then image must be bound to memory. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-image-01895)
image must be a valid VkImage handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-image-parameter)
VUID-vkGetImageSubresourceLayout-image-parameter
image must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-image-parent)
VUID-vkGetImageSubresourceLayout-image-parent
The mipLevel member of pSubresource must be less than the mipLevels specified in VkImageCreateInfo when image was created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-mipLevel-01716)
VUID-vkGetImageSubresourceLayout-mipLevel-01716
pLayout must be a valid pointer to a VkSubresourceLayout structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-pLayout-parameter)
VUID-vkGetImageSubresourceLayout-pLayout-parameter
pSubresource must be a valid pointer to a valid VkImageSubresource structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetImageSubresourceLayout-pSubresource-parameter)
VUID-vkGetImageSubresourceLayout-pSubresource-parameter
If instance is not NULL, instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetInstanceProcAddr-instance-parameter)
VUID-vkGetInstanceProcAddr-instance-parameter
pName must be a null-terminated UTF-8 string (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetInstanceProcAddr-pName-parameter)
VUID-vkGetInstanceProcAddr-pName-parameter
VUID-vkGetMemoryAndroidHardwareBufferANDROID-device-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryAndroidHardwareBufferANDROID-device-parameter)
pBuffer must be a valid pointer to a valid pointer to a AHardwareBuffer value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryAndroidHardwareBufferANDROID-pBuffer-parameter)
VUID-vkGetMemoryAndroidHardwareBufferANDROID-pBuffer-parameter
pInfo must be a valid pointer to a valid VkMemoryGetAndroidHardwareBufferInfoANDROID structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryAndroidHardwareBufferANDROID-pInfo-parameter)
VUID-vkGetMemoryAndroidHardwareBufferANDROID-pInfo-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdKHR-device-parameter)
VUID-vkGetMemoryFdKHR-device-parameter
pFd must be a valid pointer to a int value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdKHR-pFd-parameter)
VUID-vkGetMemoryFdKHR-pFd-parameter
pGetFdInfo must be a valid pointer to a valid VkMemoryGetFdInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdKHR-pGetFdInfo-parameter)
VUID-vkGetMemoryFdKHR-pGetFdInfo-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdPropertiesKHR-device-parameter)
VUID-vkGetMemoryFdPropertiesKHR-device-parameter
fd must be an external memory handle created outside of the Vulkan API. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdPropertiesKHR-fd-00673)
VUID-vkGetMemoryFdPropertiesKHR-fd-00673
VUID-vkGetMemoryFdPropertiesKHR-handleType-00674
handleType must not be VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdPropertiesKHR-handleType-00674)
VUID-vkGetMemoryFdPropertiesKHR-handleType-parameter
handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdPropertiesKHR-handleType-parameter)
pMemoryFdProperties must be a valid pointer to a VkMemoryFdPropertiesKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryFdPropertiesKHR-pMemoryFdProperties-parameter)
VUID-vkGetMemoryFdPropertiesKHR-pMemoryFdProperties-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryHostPointerPropertiesEXT-device-parameter)
VUID-vkGetMemoryHostPointerPropertiesEXT-device-parameter
VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01752
handleType must be VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT or VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01752)
If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT, pHostPointer must be a pointer to host memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01754)
VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01754
If handleType is VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT, pHostPointer must be a pointer to host mapped foreign memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01755)
VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-01755
handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-parameter)
VUID-vkGetMemoryHostPointerPropertiesEXT-handleType-parameter
VUID-vkGetMemoryHostPointerPropertiesEXT-pHostPointer-01753
pHostPointer must be a pointer aligned to an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryHostPointerPropertiesEXT-pHostPointer-01753)
pMemoryHostPointerProperties must be a valid pointer to a VkMemoryHostPointerPropertiesEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryHostPointerPropertiesEXT-pMemoryHostPointerProperties-parameter)
VUID-vkGetMemoryHostPointerPropertiesEXT-pMemoryHostPointerProperties-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleKHR-device-parameter)
VUID-vkGetMemoryWin32HandleKHR-device-parameter
pGetWin32HandleInfo must be a valid pointer to a valid VkMemoryGetWin32HandleInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleKHR-pGetWin32HandleInfo-parameter)
VUID-vkGetMemoryWin32HandleKHR-pGetWin32HandleInfo-parameter
pHandle must be a valid pointer to a HANDLE value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleKHR-pHandle-parameter)
VUID-vkGetMemoryWin32HandleKHR-pHandle-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleNV-device-parameter)
VUID-vkGetMemoryWin32HandleNV-device-parameter
VUID-vkGetMemoryWin32HandleNV-handleType-01326
handleType must be a flag specified in VkExportMemoryAllocateInfoNV::handleTypes when allocating memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleNV-handleType-01326)
VUID-vkGetMemoryWin32HandleNV-handleType-parameter
handleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleNV-handleType-parameter)
handleType must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleNV-handleType-requiredbitmask)
VUID-vkGetMemoryWin32HandleNV-handleType-requiredbitmask
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleNV-memory-parameter)
VUID-vkGetMemoryWin32HandleNV-memory-parameter
memory must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleNV-memory-parent)
VUID-vkGetMemoryWin32HandleNV-memory-parent
pHandle must be a valid pointer to a HANDLE value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandleNV-pHandle-parameter)
VUID-vkGetMemoryWin32HandleNV-pHandle-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandlePropertiesKHR-device-parameter)
VUID-vkGetMemoryWin32HandlePropertiesKHR-device-parameter
handle must be an external memory handle created outside of the Vulkan API. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandlePropertiesKHR-handle-00665)
VUID-vkGetMemoryWin32HandlePropertiesKHR-handle-00665
VUID-vkGetMemoryWin32HandlePropertiesKHR-handleType-00666
handleType must not be one of the handle types defined as opaque. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandlePropertiesKHR-handleType-00666)
handleType must be a valid VkExternalMemoryHandleTypeFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandlePropertiesKHR-handleType-parameter)
VUID-vkGetMemoryWin32HandlePropertiesKHR-handleType-parameter
pMemoryWin32HandleProperties must be a valid pointer to a VkMemoryWin32HandlePropertiesKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetMemoryWin32HandlePropertiesKHR-pMemoryWin32HandleProperties-parameter)
VUID-vkGetMemoryWin32HandlePropertiesKHR-pMemoryWin32HandleProperties-parameter
Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPastPresentationTimingGOOGLE-commonparent)
VUID-vkGetPastPresentationTimingGOOGLE-commonparent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPastPresentationTimingGOOGLE-device-parameter)
VUID-vkGetPastPresentationTimingGOOGLE-device-parameter
VUID-vkGetPastPresentationTimingGOOGLE-pPresentationTimingCount-parameter
pPresentationTimingCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPastPresentationTimingGOOGLE-pPresentationTimingCount-parameter)
VUID-vkGetPastPresentationTimingGOOGLE-pPresentationTimings-parameter
If the value referenced by pPresentationTimingCount is not 0, and pPresentationTimings is not NULL, pPresentationTimings must be a valid pointer to an array of pPresentationTimingCount VkPastPresentationTimingGOOGLE structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPastPresentationTimingGOOGLE-pPresentationTimings-parameter)
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPastPresentationTimingGOOGLE-swapchain-parameter)
VUID-vkGetPastPresentationTimingGOOGLE-swapchain-parameter
VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayPlaneProperties2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-pProperties-parameter)
VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceDisplayPlaneProperties2KHR-physicalDevice-parameter
VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayPlanePropertiesKHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-pProperties-parameter)
VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceDisplayPlanePropertiesKHR-physicalDevice-parameter
VUID-vkGetPhysicalDeviceDisplayProperties2KHR-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayProperties2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayProperties2KHR-pProperties-parameter)
VUID-vkGetPhysicalDeviceDisplayProperties2KHR-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayProperties2KHR-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayProperties2KHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceDisplayProperties2KHR-physicalDevice-parameter
VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkDisplayPropertiesKHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-pProperties-parameter)
VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceDisplayPropertiesKHR-physicalDevice-parameter
VUID-vkGetPhysicalDeviceExternalBufferProperties-pExternalBufferInfo-parameter
pExternalBufferInfo must be a valid pointer to a valid VkPhysicalDeviceExternalBufferInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalBufferProperties-pExternalBufferInfo-parameter)
VUID-vkGetPhysicalDeviceExternalBufferProperties-pExternalBufferProperties-parameter
pExternalBufferProperties must be a valid pointer to a VkExternalBufferProperties structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalBufferProperties-pExternalBufferProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalBufferProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceExternalBufferProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceExternalFenceProperties-pExternalFenceInfo-parameter
pExternalFenceInfo must be a valid pointer to a valid VkPhysicalDeviceExternalFenceInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalFenceProperties-pExternalFenceInfo-parameter)
VUID-vkGetPhysicalDeviceExternalFenceProperties-pExternalFenceProperties-parameter
pExternalFenceProperties must be a valid pointer to a VkExternalFenceProperties structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalFenceProperties-pExternalFenceProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalFenceProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceExternalFenceProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-externalHandleType-parameter
externalHandleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-externalHandleType-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-flags-parameter
flags must be a valid combination of VkImageCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-flags-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-format-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-pExternalImageFormatProperties-parameter
pExternalImageFormatProperties must be a valid pointer to a VkExternalImageFormatPropertiesNV structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-pExternalImageFormatProperties-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-tiling-parameter
tiling must be a valid VkImageTiling value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-tiling-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-type-parameter
type must be a valid VkImageType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-type-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-usage-parameter
usage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-usage-parameter)
VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-usage-requiredbitmask
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalImageFormatPropertiesNV-usage-requiredbitmask)
VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-pExternalSemaphoreInfo-parameter
pExternalSemaphoreInfo must be a valid pointer to a valid VkPhysicalDeviceExternalSemaphoreInfo structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-pExternalSemaphoreInfo-parameter)
VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-pExternalSemaphoreProperties-parameter
pExternalSemaphoreProperties must be a valid pointer to a VkExternalSemaphoreProperties structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-pExternalSemaphoreProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceExternalSemaphoreProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceFeatures-pFeatures-parameter
pFeatures must be a valid pointer to a VkPhysicalDeviceFeatures structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFeatures-pFeatures-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFeatures-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceFeatures-physicalDevice-parameter
VUID-vkGetPhysicalDeviceFeatures2-pFeatures-parameter
pFeatures must be a valid pointer to a VkPhysicalDeviceFeatures2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFeatures2-pFeatures-parameter)
VUID-vkGetPhysicalDeviceFeatures2-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFeatures2-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceFormatProperties-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFormatProperties-format-parameter)
VUID-vkGetPhysicalDeviceFormatProperties-pFormatProperties-parameter
pFormatProperties must be a valid pointer to a VkFormatProperties structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFormatProperties-pFormatProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFormatProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceFormatProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceFormatProperties2-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFormatProperties2-format-parameter)
VUID-vkGetPhysicalDeviceFormatProperties2-pFormatProperties-parameter
pFormatProperties must be a valid pointer to a VkFormatProperties2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFormatProperties2-pFormatProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceFormatProperties2-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceFormatProperties2-physicalDevice-parameter
VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-pFeatures-parameter
pFeatures must be a valid pointer to a VkDeviceGeneratedCommandsFeaturesNVX structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-pFeatures-parameter)
VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-pLimits-parameter
pLimits must be a valid pointer to a VkDeviceGeneratedCommandsLimitsNVX structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-pLimits-parameter)
VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties-flags-parameter
flags must be a valid combination of VkImageCreateFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-flags-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-format-parameter)
pImageFormatProperties must be a valid pointer to a VkImageFormatProperties structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-pImageFormatProperties-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties-pImageFormatProperties-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceImageFormatProperties-tiling-parameter
tiling must be a valid VkImageTiling value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-tiling-parameter)
type must be a valid VkImageType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-type-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties-type-parameter
VUID-vkGetPhysicalDeviceImageFormatProperties-usage-parameter
usage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-usage-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties-usage-requiredbitmask
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties-usage-requiredbitmask)
VUID-vkGetPhysicalDeviceImageFormatProperties2-pImageFormatInfo-parameter
pImageFormatInfo must be a valid pointer to a valid VkPhysicalDeviceImageFormatInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties2-pImageFormatInfo-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties2-pImageFormatProperties-parameter
pImageFormatProperties must be a valid pointer to a VkImageFormatProperties2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties2-pImageFormatProperties-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties2-pNext-01868
If the pNext chain of pImageFormatProperties contains an instance of VkAndroidHardwareBufferUsageANDROID, the pNext chain of pImageFormatInfo must contain an instance of VkPhysicalDeviceExternalImageFormatInfo with handleType set to VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties2-pNext-01868)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceImageFormatProperties2-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceImageFormatProperties2-physicalDevice-parameter
pMemoryProperties must be a valid pointer to a VkPhysicalDeviceMemoryProperties structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMemoryProperties-pMemoryProperties-parameter)
VUID-vkGetPhysicalDeviceMemoryProperties-pMemoryProperties-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMemoryProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceMemoryProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceMemoryProperties2-pMemoryProperties-parameter
pMemoryProperties must be a valid pointer to a VkPhysicalDeviceMemoryProperties2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMemoryProperties2-pMemoryProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMemoryProperties2-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceMemoryProperties2-physicalDevice-parameter
connection must be a valid pointer to a MirConnection value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMirPresentationSupportKHR-connection-parameter)
VUID-vkGetPhysicalDeviceMirPresentationSupportKHR-connection-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMirPresentationSupportKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceMirPresentationSupportKHR-physicalDevice-parameter
queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMirPresentationSupportKHR-queueFamilyIndex-01265)
VUID-vkGetPhysicalDeviceMirPresentationSupportKHR-queueFamilyIndex-01265
VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-pMultisampleProperties-parameter
pMultisampleProperties must be a valid pointer to a VkMultisamplePropertiesEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-pMultisampleProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-physicalDevice-parameter
samples must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-samples-parameter)
VUID-vkGetPhysicalDeviceMultisamplePropertiesEXT-samples-parameter
VUID-vkGetPhysicalDevicePresentRectanglesKHR-commonparent
Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDevicePresentRectanglesKHR-commonparent)
pRectCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDevicePresentRectanglesKHR-pRectCount-parameter)
VUID-vkGetPhysicalDevicePresentRectanglesKHR-pRectCount-parameter
VUID-vkGetPhysicalDevicePresentRectanglesKHR-pRects-parameter
If the value referenced by pRectCount is not 0, and pRects is not NULL, pRects must be a valid pointer to an array of pRectCount VkRect2D structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDevicePresentRectanglesKHR-pRects-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDevicePresentRectanglesKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDevicePresentRectanglesKHR-physicalDevice-parameter
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDevicePresentRectanglesKHR-surface-parameter)
VUID-vkGetPhysicalDevicePresentRectanglesKHR-surface-parameter
VUID-vkGetPhysicalDeviceProperties-pProperties-parameter
pProperties must be a valid pointer to a VkPhysicalDeviceProperties structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceProperties-pProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceProperties2-pProperties-parameter
pProperties must be a valid pointer to a VkPhysicalDeviceProperties2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceProperties2-pProperties-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceProperties2-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceProperties2-physicalDevice-parameter
VUID-vkGetPhysicalDeviceQueueFamilyProperties-pQueueFamilyProperties-parameter
If the value referenced by pQueueFamilyPropertyCount is not 0, and pQueueFamilyProperties is not NULL, pQueueFamilyProperties must be a valid pointer to an array of pQueueFamilyPropertyCount VkQueueFamilyProperties structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceQueueFamilyProperties-pQueueFamilyProperties-parameter)
VUID-vkGetPhysicalDeviceQueueFamilyProperties-pQueueFamilyPropertyCount-parameter
pQueueFamilyPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceQueueFamilyProperties-pQueueFamilyPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceQueueFamilyProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceQueueFamilyProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceQueueFamilyProperties2-pQueueFamilyProperties-parameter
If the value referenced by pQueueFamilyPropertyCount is not 0, and pQueueFamilyProperties is not NULL, pQueueFamilyProperties must be a valid pointer to an array of pQueueFamilyPropertyCount VkQueueFamilyProperties2 structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceQueueFamilyProperties2-pQueueFamilyProperties-parameter)
VUID-vkGetPhysicalDeviceQueueFamilyProperties2-pQueueFamilyPropertyCount-parameter
pQueueFamilyPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceQueueFamilyProperties2-pQueueFamilyPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceQueueFamilyProperties2-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceQueueFamilyProperties2-physicalDevice-parameter
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-format-parameter
format must be a valid VkFormat value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-format-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkSparseImageFormatProperties structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-pProperties-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-pPropertyCount-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-physicalDevice-parameter
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-samples-01094
samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, and usage equal to those in this command and flags equal to the value that is set in VkImageCreateInfo::flags when the image is created (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-samples-01094)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-samples-parameter
samples must be a valid VkSampleCountFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-samples-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-tiling-parameter
tiling must be a valid VkImageTiling value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-tiling-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-type-parameter
type must be a valid VkImageType value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-type-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-usage-parameter
usage must be a valid combination of VkImageUsageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-usage-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties-usage-requiredbitmask
usage must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties-usage-requiredbitmask)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pFormatInfo-parameter
pFormatInfo must be a valid pointer to a valid VkPhysicalDeviceSparseImageFormatInfo2 structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pFormatInfo-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pProperties-parameter
If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkSparseImageFormatProperties2 structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pProperties-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pPropertyCount-parameter
pPropertyCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-pPropertyCount-parameter)
VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSparseImageFormatProperties2-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-commonparent
Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-commonparent)
pSurfaceCapabilities must be a valid pointer to a VkSurfaceCapabilities2EXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-pSurfaceCapabilities-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-pSurfaceCapabilities-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-physicalDevice-parameter
VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-surface-parameter
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilities2EXT-surface-parameter)
pSurfaceCapabilities must be a valid pointer to a VkSurfaceCapabilities2KHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceCapabilities-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceCapabilities-parameter
pSurfaceInfo must be a valid pointer to a valid VkPhysicalDeviceSurfaceInfo2KHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceInfo-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceInfo-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-physicalDevice-parameter
Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-commonparent)
VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-commonparent
VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-pSurfaceCapabilities-parameter
pSurfaceCapabilities must be a valid pointer to a VkSurfaceCapabilitiesKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-pSurfaceCapabilities-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-physicalDevice-parameter
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-surface-parameter)
VUID-vkGetPhysicalDeviceSurfaceCapabilitiesKHR-surface-parameter
VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceFormatCount-parameter
pSurfaceFormatCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceFormatCount-parameter)
VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceFormats-parameter
If the value referenced by pSurfaceFormatCount is not 0, and pSurfaceFormats is not NULL, pSurfaceFormats must be a valid pointer to an array of pSurfaceFormatCount VkSurfaceFormat2KHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceFormats-parameter)
VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceInfo-parameter
pSurfaceInfo must be a valid pointer to a valid VkPhysicalDeviceSurfaceInfo2KHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-pSurfaceInfo-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfaceFormats2KHR-physicalDevice-parameter
Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-commonparent)
VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-commonparent
VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-pSurfaceFormatCount-parameter
pSurfaceFormatCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-pSurfaceFormatCount-parameter)
VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-pSurfaceFormats-parameter
If the value referenced by pSurfaceFormatCount is not 0, and pSurfaceFormats is not NULL, pSurfaceFormats must be a valid pointer to an array of pSurfaceFormatCount VkSurfaceFormatKHR structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-pSurfaceFormats-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-physicalDevice-parameter
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-surface-parameter)
VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-surface-parameter
Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-commonparent)
VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-commonparent
VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-pPresentModeCount-parameter
pPresentModeCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-pPresentModeCount-parameter)
VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-pPresentModes-parameter
If the value referenced by pPresentModeCount is not 0, and pPresentModes is not NULL, pPresentModes must be a valid pointer to an array of pPresentModeCount VkPresentModeKHR values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-pPresentModes-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-physicalDevice-parameter
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-surface-parameter)
VUID-vkGetPhysicalDeviceSurfacePresentModesKHR-surface-parameter
Both of physicalDevice, and surface must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceSupportKHR-commonparent)
VUID-vkGetPhysicalDeviceSurfaceSupportKHR-commonparent
pSupported must be a valid pointer to a VkBool32 value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceSupportKHR-pSupported-parameter)
VUID-vkGetPhysicalDeviceSurfaceSupportKHR-pSupported-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceSupportKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceSurfaceSupportKHR-physicalDevice-parameter
VUID-vkGetPhysicalDeviceSurfaceSupportKHR-queueFamilyIndex-01269
queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceSupportKHR-queueFamilyIndex-01269)
surface must be a valid VkSurfaceKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceSurfaceSupportKHR-surface-parameter)
VUID-vkGetPhysicalDeviceSurfaceSupportKHR-surface-parameter
VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-display-parameter
display must be a valid pointer to a wl_display value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-display-parameter)
VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-queueFamilyIndex-01306
queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceWaylandPresentationSupportKHR-queueFamilyIndex-01306)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceWin32PresentationSupportKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceWin32PresentationSupportKHR-physicalDevice-parameter
VUID-vkGetPhysicalDeviceWin32PresentationSupportKHR-queueFamilyIndex-01309
queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceWin32PresentationSupportKHR-queueFamilyIndex-01309)
VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-connection-parameter
connection must be a valid pointer to a xcb_connection_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-connection-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-physicalDevice-parameter
queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-queueFamilyIndex-01312)
VUID-vkGetPhysicalDeviceXcbPresentationSupportKHR-queueFamilyIndex-01312
VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-dpy-parameter
dpy must be a valid pointer to a Display value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-dpy-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-physicalDevice-parameter)
VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-physicalDevice-parameter
VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-queueFamilyIndex-01315
queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-queueFamilyIndex-01315)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPipelineCacheData-device-parameter)
VUID-vkGetPipelineCacheData-device-parameter
VUID-vkGetPipelineCacheData-pData-parameter
If the value referenced by pDataSize is not 0, and pData is not NULL, pData must be a valid pointer to an array of pDataSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPipelineCacheData-pData-parameter)
pDataSize must be a valid pointer to a size_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPipelineCacheData-pDataSize-parameter)
VUID-vkGetPipelineCacheData-pDataSize-parameter
pipelineCache must be a valid VkPipelineCache handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPipelineCacheData-pipelineCache-parameter)
VUID-vkGetPipelineCacheData-pipelineCache-parameter
VUID-vkGetPipelineCacheData-pipelineCache-parent
pipelineCache must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetPipelineCacheData-pipelineCache-parent)
VUID-vkGetQueryPoolResults-dataSize-00817
dataSize must be large enough to contain the result of each query, as described here (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-dataSize-00817)
VUID-vkGetQueryPoolResults-dataSize-arraylength
dataSize must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-dataSize-arraylength)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-device-parameter)
VUID-vkGetQueryPoolResults-device-parameter
VUID-vkGetQueryPoolResults-firstQuery-00813
firstQuery must be less than the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-firstQuery-00813)
VUID-vkGetQueryPoolResults-firstQuery-00816
The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-firstQuery-00816)
VUID-vkGetQueryPoolResults-flags-00814
If VK_QUERY_RESULT_64_BIT is not set in flags then pData and stride must be multiples of 4 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-flags-00814)
VUID-vkGetQueryPoolResults-flags-00815
If VK_QUERY_RESULT_64_BIT is set in flags then pData and stride must be multiples of 8 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-flags-00815)
flags must be a valid combination of VkQueryResultFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-flags-parameter)
VUID-vkGetQueryPoolResults-flags-parameter
pData must be a valid pointer to an array of dataSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-pData-parameter)
VUID-vkGetQueryPoolResults-pData-parameter
queryPool must be a valid VkQueryPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-queryPool-parameter)
VUID-vkGetQueryPoolResults-queryPool-parameter
VUID-vkGetQueryPoolResults-queryPool-parent
queryPool must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-queryPool-parent)
VUID-vkGetQueryPoolResults-queryType-00818
If the queryType used to create queryPool was VK_QUERY_TYPE_TIMESTAMP, flags must not contain VK_QUERY_RESULT_PARTIAL_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueryPoolResults-queryType-00818)
VUID-vkGetQueueCheckpointDataNV-pCheckpointData-parameter
If the value referenced by pCheckpointDataCount is not 0, and pCheckpointData is not NULL, pCheckpointData must be a valid pointer to an array of pCheckpointDataCount VkCheckpointDataNV structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueueCheckpointDataNV-pCheckpointData-parameter)
pCheckpointDataCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueueCheckpointDataNV-pCheckpointDataCount-parameter)
VUID-vkGetQueueCheckpointDataNV-pCheckpointDataCount-parameter
The device that queue belongs to must be in the lost state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueueCheckpointDataNV-queue-02025)
VUID-vkGetQueueCheckpointDataNV-queue-02025
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetQueueCheckpointDataNV-queue-parameter)
VUID-vkGetQueueCheckpointDataNV-queue-parameter
dpy must be a valid pointer to a Display value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRandROutputDisplayEXT-dpy-parameter)
VUID-vkGetRandROutputDisplayEXT-dpy-parameter
VUID-vkGetRandROutputDisplayEXT-pDisplay-parameter
pDisplay must be a valid pointer to a VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRandROutputDisplayEXT-pDisplay-parameter)
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRandROutputDisplayEXT-physicalDevice-parameter)
VUID-vkGetRandROutputDisplayEXT-physicalDevice-parameter
Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRefreshCycleDurationGOOGLE-commonparent)
VUID-vkGetRefreshCycleDurationGOOGLE-commonparent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRefreshCycleDurationGOOGLE-device-parameter)
VUID-vkGetRefreshCycleDurationGOOGLE-device-parameter
VUID-vkGetRefreshCycleDurationGOOGLE-pDisplayTimingProperties-parameter
pDisplayTimingProperties must be a valid pointer to a VkRefreshCycleDurationGOOGLE structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRefreshCycleDurationGOOGLE-pDisplayTimingProperties-parameter)
VUID-vkGetRefreshCycleDurationGOOGLE-swapchain-parameter
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRefreshCycleDurationGOOGLE-swapchain-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRenderAreaGranularity-device-parameter)
VUID-vkGetRenderAreaGranularity-device-parameter
pGranularity must be a valid pointer to a VkExtent2D structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRenderAreaGranularity-pGranularity-parameter)
VUID-vkGetRenderAreaGranularity-pGranularity-parameter
VUID-vkGetRenderAreaGranularity-renderPass-parameter
renderPass must be a valid VkRenderPass handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRenderAreaGranularity-renderPass-parameter)
renderPass must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetRenderAreaGranularity-renderPass-parent)
VUID-vkGetRenderAreaGranularity-renderPass-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSemaphoreFdKHR-device-parameter)
VUID-vkGetSemaphoreFdKHR-device-parameter
VUID-vkGetSemaphoreFdKHR-pFd-parameter
pFd must be a valid pointer to a int value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSemaphoreFdKHR-pFd-parameter)
pGetFdInfo must be a valid pointer to a valid VkSemaphoreGetFdInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSemaphoreFdKHR-pGetFdInfo-parameter)
VUID-vkGetSemaphoreFdKHR-pGetFdInfo-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSemaphoreWin32HandleKHR-device-parameter)
VUID-vkGetSemaphoreWin32HandleKHR-device-parameter
VUID-vkGetSemaphoreWin32HandleKHR-pGetWin32HandleInfo-parameter
pGetWin32HandleInfo must be a valid pointer to a valid VkSemaphoreGetWin32HandleInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSemaphoreWin32HandleKHR-pGetWin32HandleInfo-parameter)
VUID-vkGetSemaphoreWin32HandleKHR-pHandle-parameter
pHandle must be a valid pointer to a HANDLE value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSemaphoreWin32HandleKHR-pHandle-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetShaderInfoAMD-device-parameter)
VUID-vkGetShaderInfoAMD-device-parameter
VUID-vkGetShaderInfoAMD-infoType-parameter
infoType must be a valid VkShaderInfoTypeAMD value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetShaderInfoAMD-infoType-parameter)
VUID-vkGetShaderInfoAMD-pInfo-parameter
If the value referenced by pInfoSize is not 0, and pInfo is not NULL, pInfo must be a valid pointer to an array of pInfoSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetShaderInfoAMD-pInfo-parameter)
VUID-vkGetShaderInfoAMD-pInfoSize-parameter
pInfoSize must be a valid pointer to a size_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetShaderInfoAMD-pInfoSize-parameter)
pipeline must be a valid VkPipeline handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetShaderInfoAMD-pipeline-parameter)
VUID-vkGetShaderInfoAMD-pipeline-parameter
pipeline must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetShaderInfoAMD-pipeline-parent)
VUID-vkGetShaderInfoAMD-pipeline-parent
VUID-vkGetShaderInfoAMD-shaderStage-parameter
shaderStage must be a valid VkShaderStageFlagBits value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetShaderInfoAMD-shaderStage-parameter)
Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainCounterEXT-commonparent)
VUID-vkGetSwapchainCounterEXT-commonparent
counter must be a valid VkSurfaceCounterFlagBitsEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainCounterEXT-counter-parameter)
VUID-vkGetSwapchainCounterEXT-counter-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainCounterEXT-device-parameter)
VUID-vkGetSwapchainCounterEXT-device-parameter
pCounterValue must be a valid pointer to a uint64_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainCounterEXT-pCounterValue-parameter)
VUID-vkGetSwapchainCounterEXT-pCounterValue-parameter
VUID-vkGetSwapchainCounterEXT-swapchain-01245
One or more present commands on swapchain must have been processed by the presentation engine. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainCounterEXT-swapchain-01245)
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainCounterEXT-swapchain-parameter)
VUID-vkGetSwapchainCounterEXT-swapchain-parameter
Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainImagesKHR-commonparent)
VUID-vkGetSwapchainImagesKHR-commonparent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainImagesKHR-device-parameter)
VUID-vkGetSwapchainImagesKHR-device-parameter
pSwapchainImageCount must be a valid pointer to a uint32_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainImagesKHR-pSwapchainImageCount-parameter)
VUID-vkGetSwapchainImagesKHR-pSwapchainImageCount-parameter
If the value referenced by pSwapchainImageCount is not 0, and pSwapchainImages is not NULL, pSwapchainImages must be a valid pointer to an array of pSwapchainImageCount VkImage handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainImagesKHR-pSwapchainImages-parameter)
VUID-vkGetSwapchainImagesKHR-pSwapchainImages-parameter
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainImagesKHR-swapchain-parameter)
VUID-vkGetSwapchainImagesKHR-swapchain-parameter
Both of device, and swapchain must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainStatusKHR-commonparent)
VUID-vkGetSwapchainStatusKHR-commonparent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainStatusKHR-device-parameter)
VUID-vkGetSwapchainStatusKHR-device-parameter
swapchain must be a valid VkSwapchainKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetSwapchainStatusKHR-swapchain-parameter)
VUID-vkGetSwapchainStatusKHR-swapchain-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetValidationCacheDataEXT-device-parameter)
VUID-vkGetValidationCacheDataEXT-device-parameter
VUID-vkGetValidationCacheDataEXT-pData-parameter
If the value referenced by pDataSize is not 0, and pData is not NULL, pData must be a valid pointer to an array of pDataSize bytes (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetValidationCacheDataEXT-pData-parameter)
VUID-vkGetValidationCacheDataEXT-pDataSize-parameter
pDataSize must be a valid pointer to a size_t value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetValidationCacheDataEXT-pDataSize-parameter)
validationCache must be a valid VkValidationCacheEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetValidationCacheDataEXT-validationCache-parameter)
VUID-vkGetValidationCacheDataEXT-validationCache-parameter
VUID-vkGetValidationCacheDataEXT-validationCache-parent
validationCache must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkGetValidationCacheDataEXT-validationCache-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportFenceFdKHR-device-parameter)
VUID-vkImportFenceFdKHR-device-parameter
VUID-vkImportFenceFdKHR-fence-01463
fence must not be associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportFenceFdKHR-fence-01463)
pImportFenceFdInfo must be a valid pointer to a valid VkImportFenceFdInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportFenceFdKHR-pImportFenceFdInfo-parameter)
VUID-vkImportFenceFdKHR-pImportFenceFdInfo-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportFenceWin32HandleKHR-device-parameter)
VUID-vkImportFenceWin32HandleKHR-device-parameter
VUID-vkImportFenceWin32HandleKHR-pImportFenceWin32HandleInfo-parameter
pImportFenceWin32HandleInfo must be a valid pointer to a valid VkImportFenceWin32HandleInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportFenceWin32HandleKHR-pImportFenceWin32HandleInfo-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportSemaphoreFdKHR-device-parameter)
VUID-vkImportSemaphoreFdKHR-device-parameter
pImportSemaphoreFdInfo must be a valid pointer to a valid VkImportSemaphoreFdInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportSemaphoreFdKHR-pImportSemaphoreFdInfo-parameter)
VUID-vkImportSemaphoreFdKHR-pImportSemaphoreFdInfo-parameter
VUID-vkImportSemaphoreFdKHR-semaphore-01142
semaphore must not be associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportSemaphoreFdKHR-semaphore-01142)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportSemaphoreWin32HandleKHR-device-parameter)
VUID-vkImportSemaphoreWin32HandleKHR-device-parameter
VUID-vkImportSemaphoreWin32HandleKHR-pImportSemaphoreWin32HandleInfo-parameter
pImportSemaphoreWin32HandleInfo must be a valid pointer to a valid VkImportSemaphoreWin32HandleInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkImportSemaphoreWin32HandleKHR-pImportSemaphoreWin32HandleInfo-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkInvalidateMappedMemoryRanges-device-parameter)
VUID-vkInvalidateMappedMemoryRanges-device-parameter
VUID-vkInvalidateMappedMemoryRanges-memoryRangeCount-arraylength
memoryRangeCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkInvalidateMappedMemoryRanges-memoryRangeCount-arraylength)
VUID-vkInvalidateMappedMemoryRanges-pMemoryRanges-parameter
pMemoryRanges must be a valid pointer to an array of memoryRangeCount valid VkMappedMemoryRange structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkInvalidateMappedMemoryRanges-pMemoryRanges-parameter)
VUID-vkMapMemory-device-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-device-parameter)
VUID-vkMapMemory-flags-zerobitmask
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-flags-zerobitmask)
memory must not be currently mapped (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-memory-00678)
memory must have been created with a memory type that reports VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-memory-00682)
memory must not have been allocated with multiple instances. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-memory-00683)
VUID-vkMapMemory-memory-parameter
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-memory-parameter)
memory must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-memory-parent)
VUID-vkMapMemory-memory-parent
offset must be less than the size of memory (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-offset-00679)
VUID-vkMapMemory-ppData-parameter
ppData must be a valid pointer to a pointer value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-ppData-parameter)
If size is not equal to VK_WHOLE_SIZE, size must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-size-00680)
If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to the size of the memory minus offset (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMapMemory-size-00681)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergePipelineCaches-device-parameter)
VUID-vkMergePipelineCaches-device-parameter
VUID-vkMergePipelineCaches-dstCache-00770
dstCache must not appear in the list of source caches (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergePipelineCaches-dstCache-00770)
dstCache must be a valid VkPipelineCache handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergePipelineCaches-dstCache-parameter)
VUID-vkMergePipelineCaches-dstCache-parameter
dstCache must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergePipelineCaches-dstCache-parent)
VUID-vkMergePipelineCaches-dstCache-parent
VUID-vkMergePipelineCaches-pSrcCaches-parameter
pSrcCaches must be a valid pointer to an array of srcCacheCount valid VkPipelineCache handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergePipelineCaches-pSrcCaches-parameter)
Each element of pSrcCaches must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergePipelineCaches-pSrcCaches-parent)
VUID-vkMergePipelineCaches-pSrcCaches-parent
srcCacheCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergePipelineCaches-srcCacheCount-arraylength)
VUID-vkMergePipelineCaches-srcCacheCount-arraylength
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergeValidationCachesEXT-device-parameter)
VUID-vkMergeValidationCachesEXT-device-parameter
dstCache must not appear in the list of source caches (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergeValidationCachesEXT-dstCache-01536)
VUID-vkMergeValidationCachesEXT-dstCache-01536
dstCache must be a valid VkValidationCacheEXT handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergeValidationCachesEXT-dstCache-parameter)
VUID-vkMergeValidationCachesEXT-dstCache-parameter
VUID-vkMergeValidationCachesEXT-dstCache-parent
dstCache must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergeValidationCachesEXT-dstCache-parent)
VUID-vkMergeValidationCachesEXT-pSrcCaches-parameter
pSrcCaches must be a valid pointer to an array of srcCacheCount valid VkValidationCacheEXT handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergeValidationCachesEXT-pSrcCaches-parameter)
VUID-vkMergeValidationCachesEXT-pSrcCaches-parent
Each element of pSrcCaches must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergeValidationCachesEXT-pSrcCaches-parent)
srcCacheCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkMergeValidationCachesEXT-srcCacheCount-arraylength)
VUID-vkMergeValidationCachesEXT-srcCacheCount-arraylength
VUID-vkQueueBeginDebugUtilsLabelEXT-pLabelInfo-parameter
pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBeginDebugUtilsLabelEXT-pLabelInfo-parameter)
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBeginDebugUtilsLabelEXT-queue-parameter)
VUID-vkQueueBeginDebugUtilsLabelEXT-queue-parameter
VUID-vkQueueBindSparse-commonparent
Both of fence, and queue that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-commonparent)
VUID-vkQueueBindSparse-fence-01113
If fence is not VK_NULL_HANDLE, fence must be unsignaled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-fence-01113)
If fence is not VK_NULL_HANDLE, fence must not be associated with any other queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-fence-01114)
VUID-vkQueueBindSparse-fence-01114
VUID-vkQueueBindSparse-fence-parameter
If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-fence-parameter)
VUID-vkQueueBindSparse-pBindInfo-parameter
If bindInfoCount is not 0, pBindInfo must be a valid pointer to an array of bindInfoCount valid VkBindSparseInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-pBindInfo-parameter)
VUID-vkQueueBindSparse-pSignalSemaphores-01115
Each element of the pSignalSemaphores member of each element of pBindInfo must be unsignaled when the semaphore signal operation it defines is executed on the device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-pSignalSemaphores-01115)
VUID-vkQueueBindSparse-pWaitSemaphores-01116
When a semaphore unsignal operation defined by any element of the pWaitSemaphores member of any element of pBindInfo executes on queue, no other queue must be waiting on the same semaphore. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-pWaitSemaphores-01116)
VUID-vkQueueBindSparse-pWaitSemaphores-01117
All elements of the pWaitSemaphores member of all elements of pBindInfo must be semaphores that are signaled, or have semaphore signal operations previously submitted for execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-pWaitSemaphores-01117)
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-queue-parameter)
VUID-vkQueueBindSparse-queue-parameter
VUID-vkQueueBindSparse-queuetype
The queue must support sparse binding operations (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueBindSparse-queuetype)
VUID-vkQueueEndDebugUtilsLabelEXT-None-01911
There must be an outstanding vkQueueBeginDebugUtilsLabelEXT command prior to the vkQueueEndDebugUtilsLabelEXT on the queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueEndDebugUtilsLabelEXT-None-01911)
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueEndDebugUtilsLabelEXT-queue-parameter)
VUID-vkQueueEndDebugUtilsLabelEXT-queue-parameter
pLabelInfo must be a valid pointer to a valid VkDebugUtilsLabelEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueInsertDebugUtilsLabelEXT-pLabelInfo-parameter)
VUID-vkQueueInsertDebugUtilsLabelEXT-pLabelInfo-parameter
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueInsertDebugUtilsLabelEXT-queue-parameter)
VUID-vkQueueInsertDebugUtilsLabelEXT-queue-parameter
VUID-vkQueuePresentKHR-pPresentInfo-parameter
pPresentInfo must be a valid pointer to a valid VkPresentInfoKHR structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueuePresentKHR-pPresentInfo-parameter)
VUID-vkQueuePresentKHR-pSwapchains-01292
Each element of pSwapchains member of pPresentInfo must be a swapchain that is created for a surface for which presentation is supported from queue as determined using a call to vkGetPhysicalDeviceSurfaceSupportKHR (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueuePresentKHR-pSwapchains-01292)
If more than one member of pSwapchains was created from a display surface, all display surfaces referenced that refer to the same display must use the same display mode (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueuePresentKHR-pSwapchains-01293)
VUID-vkQueuePresentKHR-pSwapchains-01293
VUID-vkQueuePresentKHR-pWaitSemaphores-01294
When a semaphore unsignal operation defined by the elements of the pWaitSemaphores member of pPresentInfo executes on queue, no other queue must be waiting on the same semaphore. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueuePresentKHR-pWaitSemaphores-01294)
VUID-vkQueuePresentKHR-pWaitSemaphores-01295
All elements of the pWaitSemaphores member of pPresentInfo must be semaphores that are signaled, or have semaphore signal operations previously submitted for execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueuePresentKHR-pWaitSemaphores-01295)
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueuePresentKHR-queue-parameter)
VUID-vkQueuePresentKHR-queue-parameter
Both of fence, and queue that are valid handles must have been created, allocated, or retrieved from the same VkDevice (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-commonparent)
VUID-vkQueueSubmit-commonparent
VUID-vkQueueSubmit-fence-00063
If fence is not VK_NULL_HANDLE, fence must be unsignaled (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-fence-00063)
VUID-vkQueueSubmit-fence-00064
If fence is not VK_NULL_HANDLE, fence must not be associated with any other queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-fence-00064)
VUID-vkQueueSubmit-fence-parameter
If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-fence-parameter)
VUID-vkQueueSubmit-pCommandBuffers
If any element of pSubmits->pCommandBuffers includes a Queue Family Transfer Acquire Operation, there must exist a previously submitted Queue Family Transfer Release Operation on a queue in the queue family identified by the acquire operation, with parameters matching the acquire operation as defined in the definition of such acquire operations, and which happens before the acquire operation. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pCommandBuffers)
VUID-vkQueueSubmit-pCommandBuffers-00065
Any calls to vkCmdSetEvent, vkCmdResetEvent or vkCmdWaitEvents that have been recorded into any of the command buffer elements of the pCommandBuffers member of any element of pSubmits, must not reference any VkEvent that is referenced by any of those commands in a command buffer that has been submitted to another queue and is still in the pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pCommandBuffers-00065)
VUID-vkQueueSubmit-pCommandBuffers-00070
Each element of the pCommandBuffers member of each element of pSubmits must be in the pending or executable state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pCommandBuffers-00070)
If any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pCommandBuffers-00071)
VUID-vkQueueSubmit-pCommandBuffers-00071
Any secondary command buffers recorded into any element of the pCommandBuffers member of any element of pSubmits must be in the pending or executable state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pCommandBuffers-00072)
VUID-vkQueueSubmit-pCommandBuffers-00072
VUID-vkQueueSubmit-pCommandBuffers-00073
If any secondary command buffers recorded into any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pCommandBuffers-00073)
VUID-vkQueueSubmit-pCommandBuffers-00074
Each element of the pCommandBuffers member of each element of pSubmits must have been allocated from a VkCommandPool that was created for the same queue family queue belongs to. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pCommandBuffers-00074)
VUID-vkQueueSubmit-pSignalSemaphores-00067
Each element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
VUID-vkQueueSubmit-pSubmits-parameter
If submitCount is not 0, pSubmits must be a valid pointer to an array of submitCount valid VkSubmitInfo structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pSubmits-parameter)
VUID-vkQueueSubmit-pWaitDstStageMask-00066
Any stage flag included in any element of the pWaitDstStageMask member of any element of pSubmits must be a pipeline stage supported by one of the capabilities of queue, as specified in the table of supported pipeline stages. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pWaitDstStageMask-00066)
VUID-vkQueueSubmit-pWaitSemaphores-00068
When a semaphore unsignal operation defined by any element of the pWaitSemaphores member of any element of pSubmits executes on queue, no other queue must be waiting on the same semaphore. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pWaitSemaphores-00068)
All elements of the pWaitSemaphores member of all elements of pSubmits must be semaphores that are signaled, or have semaphore signal operations previously submitted for execution. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-pWaitSemaphores-00069)
VUID-vkQueueSubmit-pWaitSemaphores-00069
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueSubmit-queue-parameter)
VUID-vkQueueSubmit-queue-parameter
queue must be a valid VkQueue handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkQueueWaitIdle-queue-parameter)
VUID-vkQueueWaitIdle-queue-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDeviceEventEXT-device-parameter)
VUID-vkRegisterDeviceEventEXT-device-parameter
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDeviceEventEXT-pAllocator-parameter)
VUID-vkRegisterDeviceEventEXT-pAllocator-parameter
VUID-vkRegisterDeviceEventEXT-pDeviceEventInfo-parameter
pDeviceEventInfo must be a valid pointer to a valid VkDeviceEventInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDeviceEventEXT-pDeviceEventInfo-parameter)
VUID-vkRegisterDeviceEventEXT-pFence-parameter
pFence must be a valid pointer to a VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDeviceEventEXT-pFence-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDisplayEventEXT-device-parameter)
VUID-vkRegisterDisplayEventEXT-device-parameter
VUID-vkRegisterDisplayEventEXT-display-parameter
display must be a valid VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDisplayEventEXT-display-parameter)
If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDisplayEventEXT-pAllocator-parameter)
VUID-vkRegisterDisplayEventEXT-pAllocator-parameter
pDisplayEventInfo must be a valid pointer to a valid VkDisplayEventInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDisplayEventEXT-pDisplayEventInfo-parameter)
VUID-vkRegisterDisplayEventEXT-pDisplayEventInfo-parameter
pFence must be a valid pointer to a VkFence handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterDisplayEventEXT-pFence-parameter)
VUID-vkRegisterDisplayEventEXT-pFence-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-device-parameter)
VUID-vkRegisterObjectsNVX-device-parameter
objectCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-objectCount-arraylength)
VUID-vkRegisterObjectsNVX-objectCount-arraylength
objectTable must be a valid VkObjectTableNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-objectTable-parameter)
VUID-vkRegisterObjectsNVX-objectTable-parameter
objectTable must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-objectTable-parent)
VUID-vkRegisterObjectsNVX-objectTable-parent
At any pObjectIndices there must not be a registered resource already. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-pObjectIndices-01365)
VUID-vkRegisterObjectsNVX-pObjectIndices-01365
VUID-vkRegisterObjectsNVX-pObjectIndices-01366
Any value inside pObjectIndices must be below the appropriate VkObjectTableCreateInfoNVX::pObjectEntryCounts limits provided at objectTable creation time. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-pObjectIndices-01366)
pObjectIndices must be a valid pointer to an array of objectCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-pObjectIndices-parameter)
VUID-vkRegisterObjectsNVX-pObjectIndices-parameter
The contents of pObjectTableEntry must yield plausible bindings supported by the device. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-pObjectTableEntry-01364)
VUID-vkRegisterObjectsNVX-pObjectTableEntry-01364
VUID-vkRegisterObjectsNVX-ppObjectTableEntries-parameter
ppObjectTableEntries must be a valid pointer to an array of objectCount valid VkObjectTableEntryNVX structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkRegisterObjectsNVX-ppObjectTableEntries-parameter)
display must be a valid VkDisplayKHR handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkReleaseDisplayEXT-display-parameter)
VUID-vkReleaseDisplayEXT-display-parameter
VUID-vkReleaseDisplayEXT-physicalDevice-parameter
physicalDevice must be a valid VkPhysicalDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkReleaseDisplayEXT-physicalDevice-parameter)
commandBuffer must not be in the pending state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandBuffer-commandBuffer-00045)
VUID-vkResetCommandBuffer-commandBuffer-00045
commandBuffer must have been allocated from a pool that was created with the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandBuffer-commandBuffer-00046)
VUID-vkResetCommandBuffer-commandBuffer-00046
commandBuffer must be a valid VkCommandBuffer handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandBuffer-commandBuffer-parameter)
VUID-vkResetCommandBuffer-commandBuffer-parameter
flags must be a valid combination of VkCommandBufferResetFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandBuffer-flags-parameter)
VUID-vkResetCommandBuffer-flags-parameter
VUID-vkResetCommandPool-commandPool-00040
All VkCommandBuffer objects allocated from commandPool must not be in the pending state (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandPool-commandPool-00040)
commandPool must be a valid VkCommandPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandPool-commandPool-parameter)
VUID-vkResetCommandPool-commandPool-parameter
commandPool must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandPool-commandPool-parent)
VUID-vkResetCommandPool-commandPool-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandPool-device-parameter)
VUID-vkResetCommandPool-device-parameter
flags must be a valid combination of VkCommandPoolResetFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetCommandPool-flags-parameter)
VUID-vkResetCommandPool-flags-parameter
VUID-vkResetDescriptorPool-descriptorPool-00313
All uses of descriptorPool (via any allocated descriptor sets) must have completed execution (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetDescriptorPool-descriptorPool-00313)
VUID-vkResetDescriptorPool-descriptorPool-parameter
descriptorPool must be a valid VkDescriptorPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetDescriptorPool-descriptorPool-parameter)
descriptorPool must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetDescriptorPool-descriptorPool-parent)
VUID-vkResetDescriptorPool-descriptorPool-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetDescriptorPool-device-parameter)
VUID-vkResetDescriptorPool-device-parameter
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetDescriptorPool-flags-zerobitmask)
VUID-vkResetDescriptorPool-flags-zerobitmask
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetEvent-device-parameter)
VUID-vkResetEvent-device-parameter
event must not be waited on by a vkCmdWaitEvents command that is currently executing (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetEvent-event-01148)
VUID-vkResetEvent-event-parameter
event must be a valid VkEvent handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetEvent-event-parameter)
VUID-vkResetEvent-event-parent
event must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetEvent-event-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-device-parameter)
VUID-vkResetFences-device-parameter
VUID-vkResetFences-fenceCount-arraylength
fenceCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-fenceCount-arraylength)
VUID-vkResetFences-pFences-01123
Each element of pFences must not be currently associated with any queue command that has not yet completed execution on that queue (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-01123)
VUID-vkResetFences-pFences-parameter
pFences must be a valid pointer to an array of fenceCount valid VkFence handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-parameter)
VUID-vkResetFences-pFences-parent
Each element of pFences must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkResetFences-pFences-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetDebugUtilsObjectNameEXT-device-parameter)
VUID-vkSetDebugUtilsObjectNameEXT-device-parameter
pNameInfo must be a valid pointer to a valid VkDebugUtilsObjectNameInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-parameter)
VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetDebugUtilsObjectTagEXT-device-parameter)
VUID-vkSetDebugUtilsObjectTagEXT-device-parameter
pTagInfo must be a valid pointer to a valid VkDebugUtilsObjectTagInfoEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetDebugUtilsObjectTagEXT-pTagInfo-parameter)
VUID-vkSetDebugUtilsObjectTagEXT-pTagInfo-parameter
VUID-vkSetEvent-device-parameter
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetEvent-device-parameter)
VUID-vkSetEvent-event-parameter
event must be a valid VkEvent handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetEvent-event-parameter)
event must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetEvent-event-parent)
VUID-vkSetHdrMetadataEXT-commonparent
Both of device, and the elements of pSwapchains must have been created, allocated, or retrieved from the same VkInstance (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetHdrMetadataEXT-commonparent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetHdrMetadataEXT-device-parameter)
VUID-vkSetHdrMetadataEXT-device-parameter
VUID-vkSetHdrMetadataEXT-pMetadata-parameter
pMetadata must be a valid pointer to an array of swapchainCount valid VkHdrMetadataEXT structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetHdrMetadataEXT-pMetadata-parameter)
pSwapchains must be a valid pointer to an array of swapchainCount valid VkSwapchainKHR handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetHdrMetadataEXT-pSwapchains-parameter)
VUID-vkSetHdrMetadataEXT-pSwapchains-parameter
swapchainCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSetHdrMetadataEXT-swapchainCount-arraylength)
VUID-vkSetHdrMetadataEXT-swapchainCount-arraylength
VUID-vkSubmitDebugUtilsMessageEXT-instance-parameter
instance must be a valid VkInstance handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSubmitDebugUtilsMessageEXT-instance-parameter)
VUID-vkSubmitDebugUtilsMessageEXT-messageSeverity-parameter
messageSeverity must be a valid VkDebugUtilsMessageSeverityFlagBitsEXT value (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSubmitDebugUtilsMessageEXT-messageSeverity-parameter)
VUID-vkSubmitDebugUtilsMessageEXT-messageTypes-parameter
messageTypes must be a valid combination of VkDebugUtilsMessageTypeFlagBitsEXT values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSubmitDebugUtilsMessageEXT-messageTypes-parameter)
VUID-vkSubmitDebugUtilsMessageEXT-messageTypes-requiredbitmask
messageTypes must not be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSubmitDebugUtilsMessageEXT-messageTypes-requiredbitmask)
pCallbackData must be a valid pointer to a valid VkDebugUtilsMessengerCallbackDataEXT structure (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkSubmitDebugUtilsMessageEXT-pCallbackData-parameter)
VUID-vkSubmitDebugUtilsMessageEXT-pCallbackData-parameter
commandPool must be a valid VkCommandPool handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkTrimCommandPool-commandPool-parameter)
VUID-vkTrimCommandPool-commandPool-parameter
commandPool must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkTrimCommandPool-commandPool-parent)
VUID-vkTrimCommandPool-commandPool-parent
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkTrimCommandPool-device-parameter)
VUID-vkTrimCommandPool-device-parameter
flags must be 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkTrimCommandPool-flags-zerobitmask)
VUID-vkTrimCommandPool-flags-zerobitmask
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnmapMemory-device-parameter)
VUID-vkUnmapMemory-device-parameter
VUID-vkUnmapMemory-memory-00689
memory must be currently mapped (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnmapMemory-memory-00689)
VUID-vkUnmapMemory-memory-parameter
memory must be a valid VkDeviceMemory handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnmapMemory-memory-parameter)
VUID-vkUnmapMemory-memory-parent
memory must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnmapMemory-memory-parent)
All operations on the device using the registered resource must have been completed. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-None-01375)
VUID-vkUnregisterObjectsNVX-None-01375
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-device-parameter)
VUID-vkUnregisterObjectsNVX-device-parameter
objectCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-objectCount-arraylength)
VUID-vkUnregisterObjectsNVX-objectCount-arraylength
objectTable must be a valid VkObjectTableNVX handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-objectTable-parameter)
VUID-vkUnregisterObjectsNVX-objectTable-parameter
objectTable must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-objectTable-parent)
VUID-vkUnregisterObjectsNVX-objectTable-parent
The pObjectEntryTypes of the resource at pObjectIndices must match. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-pObjectEntryTypes-01374)
VUID-vkUnregisterObjectsNVX-pObjectEntryTypes-01374
VUID-vkUnregisterObjectsNVX-pObjectEntryTypes-parameter
pObjectEntryTypes must be a valid pointer to an array of objectCount valid VkObjectEntryTypeNVX values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-pObjectEntryTypes-parameter)
At any pObjectIndices there must be a registered resource already. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-pObjectIndices-01373)
VUID-vkUnregisterObjectsNVX-pObjectIndices-01373
VUID-vkUnregisterObjectsNVX-pObjectIndices-parameter
pObjectIndices must be a valid pointer to an array of objectCount uint32_t values (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUnregisterObjectsNVX-pObjectIndices-parameter)
descriptorSet must be a valid VkDescriptorSet handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSetWithTemplate-descriptorSet-parameter)
VUID-vkUpdateDescriptorSetWithTemplate-descriptorSet-parameter
VUID-vkUpdateDescriptorSetWithTemplate-descriptorUpdateTemplate-parameter
descriptorUpdateTemplate must be a valid VkDescriptorUpdateTemplate handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSetWithTemplate-descriptorUpdateTemplate-parameter)
VUID-vkUpdateDescriptorSetWithTemplate-descriptorUpdateTemplate-parent
descriptorUpdateTemplate must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSetWithTemplate-descriptorUpdateTemplate-parent)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSetWithTemplate-device-parameter)
VUID-vkUpdateDescriptorSetWithTemplate-device-parameter
VUID-vkUpdateDescriptorSetWithTemplate-pData-01685
pData must be a valid pointer to a memory that contains one or more valid instances of VkDescriptorImageInfo, VkDescriptorBufferInfo, or VkBufferView in a layout defined by descriptorUpdateTemplate when it was created with vkCreateDescriptorUpdateTemplate (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSetWithTemplate-pData-01685)
VUID-vkUpdateDescriptorSets-None-03047
Descriptor bindings updated by this command which were created without the VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT or VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT bits set must not be used by any command that was recorded to a command buffer which is in the pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSets-None-03047)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSets-device-parameter)
VUID-vkUpdateDescriptorSets-device-parameter
VUID-vkUpdateDescriptorSets-dstSet-00314
The dstSet member of each element of pDescriptorWrites or pDescriptorCopies must not be used by any command that was recorded to a command buffer which is in the pending state. (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSets-dstSet-00314)
VUID-vkUpdateDescriptorSets-pDescriptorCopies-parameter
If descriptorCopyCount is not 0, pDescriptorCopies must be a valid pointer to an array of descriptorCopyCount valid VkCopyDescriptorSet structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSets-pDescriptorCopies-parameter)
VUID-vkUpdateDescriptorSets-pDescriptorWrites-parameter
If descriptorWriteCount is not 0, pDescriptorWrites must be a valid pointer to an array of descriptorWriteCount valid VkWriteDescriptorSet structures (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkUpdateDescriptorSets-pDescriptorWrites-parameter)
device must be a valid VkDevice handle (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkWaitForFences-device-parameter)
VUID-vkWaitForFences-device-parameter
fenceCount must be greater than 0 (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkWaitForFences-fenceCount-arraylength)
VUID-vkWaitForFences-fenceCount-arraylength
pFences must be a valid pointer to an array of fenceCount valid VkFence handles (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkWaitForFences-pFences-parameter)
VUID-vkWaitForFences-pFences-parameter
VUID-vkWaitForFences-pFences-parent
Each element of pFences must have been created, allocated, or retrieved from device (https://www.khronos.org/registry/vulkan/specs/1.1-extensions/html/vkspec.html#VUID-vkWaitForFences-pFences-parent)
vkEnumerateInstanceExtensionProperties
vkEnumerateInstanceLayerProperties
vkCreateInstance
vkGetImageMemoryRequirements2KHR
vkGetBufferMemoryRequirements2KHR
vkGetImageSparseMemoryRequirements2KHR
vkCreateSamplerYcbcrConversionKHR
vkDestroySamplerYcbcrConversionKHR
vkBindBufferMemory2KHR
vkBindImageMemory2KHR
vkGetDescriptorSetLayoutSupportKHR
vkCmdDrawIndirectCountKHR
vkCmdDrawIndexedIndirectCountKHR
vkCreateDebugReportCallbackEXT
vkDestroyDebugReportCallbackEXT
vkDebugReportMessageEXT
vkDebugMarkerSetObjectTagEXT
vkDebugMarkerSetObjectNameEXT
vkCmdDebugMarkerBeginEXT
vkCmdDebugMarkerEndEXT
vkCmdProcessCommandsNVX
vkCmdReserveSpaceForCommandsNVX
vkCreateIndirectCommandsLayoutNVX
vkDestroyIndirectCommandsLayoutNVX
vkCreateObjectTableNVX
vkDestroyObjectTableNVX
vkRegisterObjectsNVX
vkUnregisterObjectsNVX
vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX
vkGetShaderInfoAMD
vkGetPhysicalDeviceExternalImageFormatPropertiesNV
vkCmdBeginConditionalRenderingEXT
vkCmdEndConditionalRenderingEXT
vkCmdDrawIndirectCountAMD
vkCmdDrawIndexedIndirectCountAMD
vkCmdDebugMarkerInsertEXT
vkCmdSetViewportWScalingNV
vkReleaseDisplayEXT
vkAcquireXlibDisplayEXT
vkGetRandROutputDisplayEXT
vkGetPhysicalDeviceSurfaceCapabilities2EXT
vkDisplayPowerControlEXT
vkRegisterDeviceEventEXT
vkRegisterDisplayEventEXT
vkGetSwapchainCounterEXT
vkGetRefreshCycleDurationGOOGLE
vkGetPastPresentationTimingGOOGLE
vkCmdSetDiscardRectangleEXT
vkSetHdrMetadataEXT
vkSetDebugUtilsObjectNameEXT
vkSetDebugUtilsObjectTagEXT
vkQueueBeginDebugUtilsLabelEXT
vkQueueEndDebugUtilsLabelEXT
vkQueueInsertDebugUtilsLabelEXT
vkCmdBeginDebugUtilsLabelEXT
vkCmdEndDebugUtilsLabelEXT
vkSubmitDebugUtilsMessageEXT
vkCmdSetSampleLocationsEXT
vkGetPhysicalDeviceMultisamplePropertiesEXT
vkCreateValidationCacheEXT
vkDestroyValidationCacheEXT
vkMergeValidationCachesEXT
vkGetValidationCacheDataEXT
vkGetMemoryHostPointerPropertiesEXT
vkCmdWriteBufferMarkerAMD
vkCreateDebugUtilsMessengerEXT
vkDestroyDebugUtilsMessengerEXT
vkCmdInsertDebugUtilsLabelEXT
vkCmdSetCheckpointNV
vkGetQueueCheckpointDataNV
vkCmdSetStencilWriteMask
vkCmdSetStencilReference
vkCmdBindDescriptorSets
vkCmdBindIndexBuffer
vkCmdBindVertexBuffers
vkCmdDraw
vkCmdDrawIndexed
vkCmdDrawIndirect
vkCmdDrawIndexedIndirect
vkCmdDispatch
vkCmdDispatchIndirect
vkCmdCopyBuffer
vkCmdCopyImage
vkCmdBlitImage
vkCmdCopyBufferToImage
vkCmdCopyImageToBuffer
vkCmdUpdateBuffer
vkCmdFillBuffer
vkCmdClearColorImage
vkCmdClearDepthStencilImage
vkCmdClearAttachments
vkCmdResolveImage
vkCmdSetEvent
vkCmdResetEvent
vkCmdWaitEvents
vkCmdPipelineBarrier
vkCmdBeginQuery
vkCmdEndQuery
vkCmdResetQueryPool
vkCmdWriteTimestamp
vkCmdCopyQueryPoolResults
vkCmdPushConstants
vkCmdBeginRenderPass
vkCmdNextSubpass
vkCmdEndRenderPass
vkGetPhysicalDeviceImageFormatProperties2
vkGetPhysicalDeviceQueueFamilyProperties2
vkGetPhysicalDeviceMemoryProperties2
vkGetPhysicalDeviceSparseImageFormatProperties2
vkTrimCommandPool
vkGetDeviceQueue2
vkCreateSamplerYcbcrConversion
vkDestroySamplerYcbcrConversion
vkCreateDescriptorUpdateTemplate
vkDestroyDescriptorUpdateTemplate
vkUpdateDescriptorSetWithTemplate
vkGetPhysicalDeviceExternalBufferProperties
vkGetPhysicalDeviceExternalFenceProperties
vkGetPhysicalDeviceExternalSemaphoreProperties
vkGetDescriptorSetLayoutSupport
vkDestroySurfaceKHR
vkGetPhysicalDeviceSurfaceSupportKHR
vkCmdDispatchBase
vkEnumeratePhysicalDeviceGroups
vkGetImageMemoryRequirements2
vkGetBufferMemoryRequirements2
vkGetImageSparseMemoryRequirements2
vkGetPhysicalDeviceFeatures2
vkGetPhysicalDeviceProperties2
vkGetPhysicalDeviceFormatProperties2
vkBindBufferMemory2
vkBindImageMemory2
vkGetDeviceGroupPeerMemoryFeatures
vkCmdSetDeviceMask
vkCmdExecuteCommands
vkGetPhysicalDeviceSurfaceCapabilitiesKHR
vkGetPhysicalDeviceSurfaceFormatsKHR
vkGetPhysicalDeviceSurfacePresentModesKHR
vkCreateSwapchainKHR
vkDestroySwapchainKHR
vkGetSwapchainImagesKHR
vkAcquireNextImageKHR
vkQueuePresentKHR
vkGetDeviceGroupPresentCapabilitiesKHR
vkGetDeviceGroupSurfacePresentModesKHR
vkGetPhysicalDevicePresentRectanglesKHR
vkAcquireNextImage2KHR
vkGetPhysicalDeviceDisplayPropertiesKHR
vkGetPhysicalDeviceDisplayPlanePropertiesKHR
vkGetDisplayPlaneSupportedDisplaysKHR
vkGetDisplayModePropertiesKHR
vkCreateDisplayModeKHR
vkGetDisplayPlaneCapabilitiesKHR
vkCreateDisplayPlaneSurfaceKHR
vkCreateSharedSwapchainsKHR
vkCreateXlibSurfaceKHR
vkGetPhysicalDeviceXlibPresentationSupportKHR
vkCreateXcbSurfaceKHR
vkGetPhysicalDeviceXcbPresentationSupportKHR
vkCreateWaylandSurfaceKHR
vkGetPhysicalDeviceWaylandPresentationSupportKHR
vkGetPhysicalDeviceFeatures2KHR
vkGetPhysicalDeviceProperties2KHR
vkGetPhysicalDeviceFormatProperties2KHR
vkGetPhysicalDeviceImageFormatProperties2KHR
vkGetPhysicalDeviceQueueFamilyProperties2KHR
vkGetPhysicalDeviceMemoryProperties2KHR
vkGetPhysicalDeviceSparseImageFormatProperties2KHR
vkGetDeviceGroupPeerMemoryFeaturesKHR
vkCmdSetDeviceMaskKHR
vkCmdDispatchBaseKHR
vkTrimCommandPoolKHR
vkEnumeratePhysicalDeviceGroupsKHR
vkGetPhysicalDeviceExternalBufferPropertiesKHR
vkGetMemoryFdKHR
vkGetMemoryFdPropertiesKHR
vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
vkImportSemaphoreFdKHR
vkGetSemaphoreFdKHR
vkCmdPushDescriptorSetKHR
vkCmdPushDescriptorSetWithTemplateKHR
vkCreateDescriptorUpdateTemplateKHR
vkDestroyDescriptorUpdateTemplateKHR
vkUpdateDescriptorSetWithTemplateKHR
vkCreateRenderPass2KHR
vkCmdBeginRenderPass2KHR
vkCmdNextSubpass2KHR
vkCmdEndRenderPass2KHR
vkGetSwapchainStatusKHR
vkGetPhysicalDeviceExternalFencePropertiesKHR
vkImportFenceFdKHR
vkGetFenceFdKHR
vkGetPhysicalDeviceSurfaceCapabilities2KHR
vkGetPhysicalDeviceSurfaceFormats2KHR
vkGetPhysicalDeviceDisplayProperties2KHR
vkGetPhysicalDeviceDisplayPlaneProperties2KHR
vkGetDisplayModeProperties2KHR
vkGetDisplayPlaneCapabilities2KHR
vkResetFences
vkGetFenceStatus
vkWaitForFences
vkCreateSemaphore
vkDestroySemaphore
vkCreateEvent
vkDestroyEvent
vkGetEventStatus
vkSetEvent
vkResetEvent
vkCreateQueryPool
vkDestroyQueryPool
vkGetQueryPoolResults
vkCreateBuffer
vkDestroyBuffer
vkCreateBufferView
vkDestroyBufferView
vkCreateImage
vkDestroyImage
vkGetImageSubresourceLayout
vkCreateImageView
vkDestroyImageView
vkCreateShaderModule
vkDestroyShaderModule
vkCreatePipelineCache
vkDestroyPipelineCache
vkGetPipelineCacheData
vkMergePipelineCaches
vkCreateGraphicsPipelines
vkCreateComputePipelines
vkDestroyPipeline
vkCreatePipelineLayout
vkDestroyPipelineLayout
vkCreateSampler
vkDestroySampler
vkCreateDescriptorSetLayout
vkDestroyDescriptorSetLayout
vkCreateDescriptorPool
vkDestroyDescriptorPool
vkResetDescriptorPool
vkAllocateDescriptorSets
vkFreeDescriptorSets
vkUpdateDescriptorSets
vkCreateFramebuffer
vkDestroyFramebuffer
vkCreateRenderPass
vkDestroyRenderPass
vkGetRenderAreaGranularity
vkCreateCommandPool
vkDestroyCommandPool
vkResetCommandPool
vkAllocateCommandBuffers
vkFreeCommandBuffers
vkBeginCommandBuffer
vkEndCommandBuffer
vkResetCommandBuffer
vkCmdBindPipeline
vkCmdSetViewport
vkCmdSetScissor
vkCmdSetLineWidth
vkCmdSetDepthBias
vkCmdSetBlendConstants
vkCmdSetDepthBounds
vkCmdSetStencilCompareMask
vkAllocateMemory
vkFreeMemory
vkMapMemory
vkUnmapMemory
vkFlushMappedMemoryRanges
vkInvalidateMappedMemoryRanges
vkGetDeviceMemoryCommitment
vkBindBufferMemory
vkBindImageMemory
vkGetBufferMemoryRequirements
vkGetImageMemoryRequirements
vkGetImageSparseMemoryRequirements
vkGetPhysicalDeviceSparseImageFormatProperties
vkQueueBindSparse
vkCreateFence
vkDestroyFence
vkGetPhysicalDeviceQueueFamilyProperties
vkGetPhysicalDeviceMemoryProperties
vkCreateDevice
vkDestroyDevice
vkGetDeviceQueue
vkQueueSubmit
vkQueueWaitIdle
vkDeviceWaitIdle
vkGetPhysicalDeviceFeatures
vkGetPhysicalDeviceFormatProperties
vkDestroyInstance
vkEnumeratePhysicalDevices
vkGetPhysicalDeviceImageFormatProperties
vkGetPhysicalDeviceProperties
Object: 0x
 (Name = 
 : Type = 
 (Type = 
basic_string::append
VUID_Undefined
Destroyed messenger\n
DebugUtilsMessenger
Destroyed callback\n
DebugReport
Added callback
lunarg_layer_factory
vkGetMemoryWin32HandleKHR
VK_KHR_external_memory_win32
vkGetSemaphoreWin32HandleKHR
vkImportFenceWin32HandleKHR
VK_KHR_external_fence_win32
vkGetFenceWin32HandleKHR
VK_NV_external_memory_win32
vkGetMemoryWin32HandleNV
VK_DBG_LAYER_ACTION_IGNORE
VK_DBG_LAYER_ACTION_CALLBACK
VK_DBG_LAYER_ACTION_LOG_MSG
VK_DBG_LAYER_ACTION_BREAK
VK_DBG_LAYER_ACTION_DEFAULT
warn
perf
error
debug
VUID-VkBufferCopy-size-01988
VUID-VkImageCopy-extent-00140
VUID-VkImageCopy-extent-00158
VUID-VkImageCopy-extent-00159
VUID-VkImageCopy-extent-00160
VUID-VkImageCopy-extent-00163
VUID-VkImageCopy-extent-00164
VUID-VkImageCopy-extent-00165
VUID-VkSubmitInfo-pNext-pNext
VUID-VkSubmitInfo-sType-sType
VUID-VkViewport-height-01772
VUID-VkViewport-height-01773
VUID-VkViewport-width-01770
VUID-VkViewport-width-01771
VUID-VkViewport-x-01232
VUID-VkViewport-x-01774
VUID-VkViewport-y-01233
VUID-VkViewport-y-01775
VUID-VkViewport-y-01776
VUID-VkViewport-y-01777
VUID-vkCmdDispatch-None-00389
VUID-vkCmdDispatch-None-00390
VUID-vkCmdDispatch-None-00391
VUID-vkCmdDispatch-None-00392
VUID-vkCmdDispatch-None-00393
VUID-vkCmdDispatch-None-00394
VUID-vkCmdDispatch-None-00395
VUID-vkCmdDispatch-None-00396
VUID-vkCmdDispatch-None-00397
VUID-vkCmdDispatch-None-00400
VUID-vkCmdDispatch-None-02005
VUID-vkCmdDispatch-None-02006
VUID-vkCmdDispatch-renderpass
VUID-vkCmdDraw-None-00437
VUID-vkCmdDraw-None-00438
VUID-vkCmdDraw-None-00439
VUID-vkCmdDraw-None-00440
VUID-vkCmdDraw-None-00441
VUID-vkCmdDraw-None-00442
VUID-vkCmdDraw-None-00443
VUID-vkCmdDraw-None-00444
VUID-vkCmdDraw-None-00445
VUID-vkCmdDraw-None-00446
VUID-vkCmdDraw-None-00447
VUID-vkCmdDraw-None-00448
VUID-vkCmdDraw-None-00449
VUID-vkCmdDraw-None-00452
VUID-vkCmdDraw-None-01499
VUID-vkCmdDraw-None-02009
VUID-vkCmdDraw-None-02010
VUID-vkCmdDraw-renderpass
VUID-vkCmdDraw-subpass-00436
VUID-vkCmdEndQuery-None-01923
VUID-vkCmdSetEvent-renderpass
VUID-vkCmdSetScissor-x-00595
VUID-vkMapMemory-memory-00678
VUID-vkMapMemory-memory-00682
VUID-vkMapMemory-memory-00683
VUID-vkMapMemory-offset-00679
VUID-vkMapMemory-size-00680
VUID-vkMapMemory-size-00681
VUID-vkResetEvent-event-01148
VUID-vkSetEvent-event-parent
vkGetInstanceProcAddr
vkGetDeviceProcAddr
VK_EXT_acquire_xlib_display
VK_EXT_debug_report
VK_EXT_debug_utils
VK_EXT_direct_mode_display
VK_EXT_swapchain_colorspace
VK_EXT_validation_flags
VK_KHR_device_group_creation
VK_KHR_display
VK_KHR_surface
VK_KHR_wayland_surface
VK_KHR_xcb_surface
VK_KHR_xlib_surface
VK_EXT_display_surface_counter
VK_KHR_external_fence_capabilities
VK_KHR_external_memory_capabilities
VK_KHR_external_semaphore_capabilities
VK_KHR_get_display_properties2
VK_KHR_get_physical_device_properties2
VK_KHR_get_surface_capabilities2
VK_NV_external_memory_capabilities
VK_AMD_buffer_marker
VK_AMD_draw_indirect_count
VK_AMD_gcn_shader
VK_AMD_gpu_shader_half_float
VK_AMD_gpu_shader_int16
VK_AMD_rasterization_order
VK_AMD_shader_ballot
VK_AMD_shader_core_properties
VK_AMD_shader_fragment_mask
VK_AMD_shader_info
VK_AMD_shader_trinary_minmax
VK_EXT_conditional_rendering
VK_EXT_debug_marker
VK_EXT_descriptor_indexing
VK_EXT_discard_rectangles
VK_EXT_display_control
VK_EXT_external_memory_host
VK_EXT_global_priority
VK_EXT_hdr_metadata
VK_EXT_post_depth_coverage
VK_EXT_queue_family_foreign
VK_EXT_sample_locations
VK_EXT_sampler_filter_minmax
VK_EXT_shader_stencil_export
VK_EXT_shader_subgroup_ballot
VK_EXT_shader_subgroup_vote
VK_EXT_validation_cache
VK_GOOGLE_display_timing
VK_IMG_filter_cubic
VK_IMG_format_pvrtc
VK_KHR_16bit_storage
VK_KHR_8bit_storage
VK_KHR_bind_memory2
VK_KHR_create_renderpass2
VK_KHR_dedicated_allocation
VK_KHR_device_group
VK_KHR_display_swapchain
VK_KHR_draw_indirect_count
VK_KHR_external_fence
VK_KHR_external_fence_fd
VK_KHR_external_memory
VK_KHR_external_memory_fd
VK_KHR_external_semaphore
VK_KHR_external_semaphore_fd
VK_KHR_image_format_list
VK_KHR_incremental_present
VK_KHR_maintenance1
VK_KHR_maintenance2
VK_KHR_maintenance3
VK_KHR_multiview
VK_KHR_push_descriptor
VK_KHR_relaxed_block_layout
VK_KHR_shader_draw_parameters
VK_KHR_swapchain
VK_KHR_variable_pointers
VK_NV_clip_space_w_scaling
VK_NV_dedicated_allocation
VK_NV_external_memory
VK_NV_fill_rectangle
VK_NV_glsl_shader
VK_NV_viewport_array2
VK_NV_viewport_swizzle
VK_AMD_mixed_attachment_samples
VK_AMD_negative_viewport_height
VK_AMD_shader_explicit_vertex_parameter
VK_AMD_shader_image_load_store_lod
VK_AMD_texture_gather_bias_lod
VK_EXT_blend_operation_advanced
VK_EXT_conservative_rasterization
VK_EXT_depth_range_unrestricted
VK_EXT_external_memory_dma_buf
VK_EXT_shader_viewport_index_layer
VK_EXT_vertex_attribute_divisor
VK_KHR_descriptor_update_template
VK_KHR_get_memory_requirements2
VK_KHR_sampler_mirror_clamp_to_edge
VK_KHR_sampler_ycbcr_conversion
VK_KHR_shared_presentable_image
VK_KHR_storage_buffer_storage_class
VK_NVX_device_generated_commands
VK_NVX_multiview_per_view_attributes
VK_NV_device_diagnostic_checkpoints
VK_NV_fragment_coverage_to_color
VK_NV_framebuffer_mixed_samples
VK_NV_geometry_shader_passthrough
VK_NV_sample_mask_override_coverage
VK_NV_shader_subgroup_partitioned
VK_EXT_debug_report
VK_LAYER_LUNARG_layer_factory
LunarG Layer Factory Layer
CVK_ENVEXTENSIONS_INSTANCE_APPEND
VK_ENVEXTENSIONS_DEVICE_APPEND
instance[%d] = %s\n
device[%d] = %s\n
13layer_factory
13EnvExtensions
Unknown
Instance
PhysicalDevice
Device
Queue
Semaphore
CommandBuffer
Fence
DeviceMemory
Buffer
Image
Event
QueryPool
BufferView
ImageView
ShaderModule
PipelineCache
PipelineLayout
RenderPass
Pipeline
DescriptorSetLayout
Sampler
DescriptorPool
DescriptorSet
Framebuffer
CommandPool
SamplerYcbcrConversion
DescriptorUpdateTemplate
SurfaceKHR
SwapchainKHR
DisplayKHR
DisplayModeKHR
DebugReportCallbackEXT
ObjectTableNVX
IndirectCommandsLayoutNVX
DebugUtilsMessengerEXT
ValidationCacheEXT
;VUID_Undefined
Object: 0x
 (Name = 
 : Type = 
 (Type = 
Object: VK_NULL_HANDLE (Type = 
SrcObject name = 
Layer Internal Message
Added messenger
DebugReport
Added callback
%s(%s): msg_code: %d: %s\n
%s(%s / %s): msgNum: %d - %s\n
    Objects: %d\n
       [%d] 0x%lx, type: %d, name: %s\n
.report_flags
.debug_action
.log_filename
/home/andres/git/Vulkan-ValidationLayers/layers/vk_layer_utils.cpp
chain_info != NULL
vector::_M_realloc_insert
basic_string::_M_construct null not valid
VK_DBG_LAYER_ACTION_IGNORE
VK_DBG_LAYER_ACTION_CALLBACK
VK_DBG_LAYER_ACTION_LOG_MSG
VK_DBG_LAYER_ACTION_BREAK
VK_DBG_LAYER_ACTION_DEFAULT
warn
info
perf
error
debug
VkLayerInstanceCreateInfo* get_chain_info(const VkInstanceCreateInfo*, VkLayerFunction)
VkLayerDeviceCreateInfo* get_chain_info(const VkDeviceCreateInfo*, VkLayerFunction)
stdout
 ERROR: Bad output filename specified: 
. Writing to STDOUT instead
lunarg_core_validation.report_flags
error
lunarg_object_tracker.report_flags
lunarg_parameter_validation.report_flags
google_threading.report_flags
google_unique_objects.report_flags
lunarg_core_validation.debug_action
VK_DBG_LAYER_ACTION_DEFAULT,VK_DBG_LAYER_ACTION_LOG_MSG
lunarg_object_tracker.debug_action
lunarg_parameter_validation.debug_action
google_threading.debug_action
google_unique_objects.debug_action
lunarg_core_validation.log_filename
lunarg_object_tracker.log_filename
lunarg_parameter_validation.log_filename
google_threading.log_filename
google_unique_objects.log_filename
VK_LAYER_SETTINGS_PATH
/vk_layer_settings.txt
vk_layer_settings.txt
 %511[^\n\t =] = %511[^\n \t]
VK_DBG_LAYER_ACTION_IGNORE
VK_DBG_LAYER_ACTION_CALLBACK
VK_DBG_LAYER_ACTION_LOG_MSG
VK_DBG_LAYER_ACTION_BREAK
VK_DBG_LAYER_ACTION_DEFAULT
warn
info
perf
debug
StubCreateSwapchainKHR(VkDevice_T*, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
StubDestroySwapchainKHR(VkDevice_T*, VkSwapchainKHR_T*, VkAllocationCallbacks const*)
StubAcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)
StubQueuePresentKHR(VkQueue_T*, VkPresentInfoKHR const*)
StubGetDeviceGroupSurfacePresentModesKHR(VkDevice_T*, VkSurfaceKHR_T*, unsigned int*)
StubCreateSharedSwapchainsKHR(VkDevice_T*, unsigned int, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
StubGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
StubCmdSetDeviceMaskKHR(VkCommandBuffer_T*, unsigned int)
StubCmdDispatchBaseKHR(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
StubTrimCommandPoolKHR(VkDevice_T*, VkCommandPool_T*, unsigned int)
StubGetMemoryFdPropertiesKHR(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*)
StubCmdPushDescriptorSetKHR(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkWriteDescriptorSet const*)
StubCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer_T*, VkDescriptorUpdateTemplate_T*, VkPipelineLayout_T*, unsigned int, void const*)
StubUpdateDescriptorSetWithTemplateKHR(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
StubCmdEndRenderPass2KHR(VkCommandBuffer_T*, VkSubpassEndInfoKHR const*)
StubBindBufferMemory2KHR(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
StubCmdDrawIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
StubCmdDebugMarkerEndEXT(VkCommandBuffer_T*)
StubGetShaderInfoAMD(VkDevice_T*, VkPipeline_T*, VkShaderStageFlagBits, VkShaderInfoTypeAMD, unsigned long*, void*)
StubRegisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectTableEntryNVX const* const*, unsigned int const*)
StubCmdSetViewportWScalingNV(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewportWScalingNV const*)
StubRegisterDisplayEventEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
StubGetSwapchainCounterEXT(VkDevice_T*, VkSwapchainKHR_T*, VkSurfaceCounterFlagBitsEXT, unsigned long*)
StubSetHdrMetadataEXT(VkDevice_T*, unsigned int, VkSwapchainKHR_T* const*, VkHdrMetadataEXT const*)
StubGetMemoryHostPointerPropertiesEXT(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, void const*, VkMemoryHostPointerPropertiesEXT*)
StubCmdWriteBufferMarkerAMD(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkBuffer_T*, unsigned long, unsigned int)
vulkan_layer_factory::global_layer
vulkan_layer_factory::instance_extensions
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag) (.isra.203)
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_construct<char*>(char*, char*, std::forward_iterator_tag) (.isra.364)
StubMergeValidationCachesEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned int, VkValidationCacheEXT_T* const*)
StubCmdSetDiscardRectangleEXT(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
StubUnregisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectEntryTypeNVX const*, unsigned int const*)
StubCmdEndConditionalRenderingEXT(VkCommandBuffer_T*)
StubCmdDrawIndexedIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
StubBindImageMemory2KHR(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
StubCmdDebugMarkerInsertEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
StubGetImageSparseMemoryRequirements2KHR(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
StubGetFenceFdKHR(VkDevice_T*, VkFenceGetFdInfoKHR const*, int*)
StubImportSemaphoreFdKHR(VkDevice_T*, VkImportSemaphoreFdInfoKHR const*)
StubDestroyIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutNVX_T*, VkAllocationCallbacks const*)
StubCreateRenderPass2KHR(VkDevice_T*, VkRenderPassCreateInfo2KHR const*, VkAllocationCallbacks const*, VkRenderPass_T**)
StubCmdDrawIndexedIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
StubCmdDrawIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
StubCreateObjectTableNVX(VkDevice_T*, VkObjectTableCreateInfoNVX const*, VkAllocationCallbacks const*, VkObjectTableNVX_T**)
StubRegisterDeviceEventEXT(VkDevice_T*, VkDeviceEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
StubGetPastPresentationTimingGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkPastPresentationTimingGOOGLE*)
StubCreateIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutCreateInfoNVX const*, VkAllocationCallbacks const*, VkIndirectCommandsLayoutNVX_T**)
StubCreateValidationCacheEXT(VkDevice_T*, VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT_T**)
StubGetValidationCacheDataEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned long*, void*)
StubCreateSamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
StubGetSwapchainImagesKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkImage_T**)
StubCreateDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
StubGetRefreshCycleDurationGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, VkRefreshCycleDurationGOOGLE*)
StubDisplayPowerControlEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayPowerInfoEXT const*)
StubAcquireNextImage2KHR(VkDevice_T*, VkAcquireNextImageInfoKHR const*, unsigned int*)
StubGetMemoryFdKHR(VkDevice_T*, VkMemoryGetFdInfoKHR const*, int*)
StubGetSemaphoreFdKHR(VkDevice_T*, VkSemaphoreGetFdInfoKHR const*, int*)
StubDestroySamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
StubGetDescriptorSetLayoutSupportKHR(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
StubDebugMarkerSetObjectTagEXT(VkDevice_T*, VkDebugMarkerObjectTagInfoEXT const*)
StubDebugMarkerSetObjectNameEXT(VkDevice_T*, VkDebugMarkerObjectNameInfoEXT const*)
StubGetDeviceGroupPresentCapabilitiesKHR(VkDevice_T*, VkDeviceGroupPresentCapabilitiesKHR*)
StubImportFenceFdKHR(VkDevice_T*, VkImportFenceFdInfoKHR const*)
StubCmdNextSubpass2KHR(VkCommandBuffer_T*, VkSubpassBeginInfoKHR const*, VkSubpassEndInfoKHR const*)
StubGetSwapchainStatusKHR(VkDevice_T*, VkSwapchainKHR_T*)
StubDestroyObjectTableNVX(VkDevice_T*, VkObjectTableNVX_T*, VkAllocationCallbacks const*)
StubDestroyDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
StubCmdBeginRenderPass2KHR(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassBeginInfoKHR const*)
StubGetImageMemoryRequirements2KHR(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
StubGetBufferMemoryRequirements2KHR(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
StubDestroyValidationCacheEXT(VkDevice_T*, VkValidationCacheEXT_T*, VkAllocationCallbacks const*)
StubGetQueueCheckpointDataNV(VkQueue_T*, unsigned int*, VkCheckpointDataNV*)
StubCmdSetCheckpointNV(VkCommandBuffer_T*, void const*)
StubCmdSetSampleLocationsEXT(VkCommandBuffer_T*, VkSampleLocationsInfoEXT const*)
StubCmdProcessCommandsNVX(VkCommandBuffer_T*, VkCmdProcessCommandsInfoNVX const*)
StubCmdReserveSpaceForCommandsNVX(VkCommandBuffer_T*, VkCmdReserveSpaceForCommandsInfoNVX const*)
StubCmdBeginConditionalRenderingEXT(VkCommandBuffer_T*, VkConditionalRenderingBeginInfoEXT const*)
StubCmdDebugMarkerBeginEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>>::vector(std::initializer_list<DeviceExtensions::DeviceReq>, std::allocator<DeviceExtensions::DeviceReq> const&) (.constprop.1127)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) (.constprop.1130)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(char const*, std::allocator<char> const&) (.isra.205)
debug_log_msg(_debug_report_data const*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, char const*, char const*, char const*) (.constprop.1129)
device_layer_data* GetLayerDataPtr<device_layer_data>(void*, std::unordered_map<void*, device_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, device_layer_data*>>>&) (.constprop.560)
device_layer_data_map
vulkan_layer_factory::global_lock
instance_layer_data* GetLayerDataPtr<instance_layer_data>(void*, std::unordered_map<void*, instance_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, instance_layer_data*>>>&) (.constprop.559)
instance_layer_data_map
._241
._242
._243
._244
._245
._246
._247
._248
._249
._250
._251
._252
._253
._254
._255
._256
._257
._258
._259
._260
._261
._262
._263
._264
._265
._266
._267
._268
._269
._270
._271
._272
._273
._274
._275
._276
._277
._278
._279
._280
._281
._282
._283
._284
._285
._286
._287
._288
._289
._290
._291
._292
__static_initialization_and_destruction_0(int, int) (.constprop.557)
api_extension_map
debug_actions_option_definitions
report_flags_option_definitions
kInstanceExtensionNames
kDeviceExtensionNames
_GLOBAL__sub_I_layer_factory.cpp
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string(char const*, std::allocator<char> const&) (.isra.73)
__static_initialization_and_destruction_0(int, int) (.constprop.167)
_GLOBAL__sub_I_extensions.cpp
crtstuff.c
deregister_tm_clones
__do_global_dtors_aux
completed.7696
__do_global_dtors_aux_fini_array_entry
frame_dummy
__frame_dummy_init_array_entry
vk_layer_extension_utils.cpp
std::piecewise_construct
std::allocator_arg
std::ignore
object_string
get_debug_report_enum
get_object_type_enum
convertDebugReportObjectToCoreObject(VkDebugReportObjectTypeEXT)
convertCoreObjectToDebugReportObject(VkObjectType)
kVUIDUndefined
DebugReportFlagsToAnnotFlags(unsigned int, bool, unsigned int*, unsigned int*)
AddDebugCallbackNode(_debug_report_data*, VkLayerDbgFunctionNode_**, VkLayerDbgFunctionNode_*)
debug_log_msg(_debug_report_data const*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, char const*, char const*, char const*)
DebugAnnotFlagsToReportFlags(VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, unsigned int*)
debug_messenger_log_msg(_debug_report_data const*, VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT*)
layer_create_messenger_callback(_debug_report_data*, bool, VkDebugUtilsMessengerCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugUtilsMessengerEXT_T**)
unsigned long HandleToUint64<VkDebugUtilsMessengerEXT_T>(VkDebugUtilsMessengerEXT_T*)
layer_create_report_callback(_debug_report_data*, bool, VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT_T**)
report_log_callback(unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*, void*)
report_win32_debug_output_msg(unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*, void*)
DebugBreakCallback(unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*, void*)
messenger_log_callback(VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*, void*)
messenger_win32_debug_output_msg(VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*, void*)
UTF8_ONE_BYTE_CODE
UTF8_ONE_BYTE_MASK
UTF8_TWO_BYTE_CODE
UTF8_TWO_BYTE_MASK
UTF8_THREE_BYTE_CODE
UTF8_THREE_BYTE_MASK
UTF8_DATA_BYTE_CODE
UTF8_DATA_BYTE_MASK
get_chain_info(VkInstanceCreateInfo const*, VkLayerFunction_)::__PRETTY_FUNCTION__
get_chain_info(VkDeviceCreateInfo const*, VkLayerFunction_)::__PRETTY_FUNCTION__
__static_initialization_and_destruction_0(int, int)
_GLOBAL__sub_I_vk_layer_utils.cpp
std::__ioinit
g_configFileObj
_GLOBAL__sub_I_vk_layer_config.cpp
__FRAME_END__
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::end() const
std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::push_back(VkDebugUtilsMessengerEXT_T* const&)
std::_Hashtable<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_before_node(unsigned long, VkCommandBuffer_T* const&, unsigned long) const
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_Hashtable_ebo_helper<std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::allocator<std::pair<void* const, _debug_report_data*>>::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>(std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>> const&)
void std::_Destroy<VkDebugUtilsMessengerEXT_T**>(VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**)
VkDebugUtilsMessengerEXT_T** std::__copy_move_a2<true, VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**>(VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**)
std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_end() const
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::end() const
std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>>(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>>::type&)
std::tuple_element<0ul, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::type& std::get<0ul, VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_lower_bound(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, std::_Rb_tree_node_base const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::__detail::_Hash_node_value_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_v() const
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::tuple<void, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
__gnu_cxx::__aligned_buffer<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_addr() const
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>&>(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>&>::type&)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_begin() const
std::__detail::_Node_iterator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
bool std::__detail::operator!=<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>(std::__detail::_Node_iterator_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> const&, std::__detail::_Node_iterator_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_leftmost()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_put_node(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*)
__gnu_cxx::__normal_iterator<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>>::__normal_iterator(VkDebugReportCallbackEXT_T** const&)
std::__detail::_Equal_helper<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, unsigned long, false>::_S_equals(std::equal_to<unsigned long> const&, std::__detail::_Select1st const&, unsigned long const&, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>*)
std::_Rb_tree_key_compare<std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_key_compare()
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&& std::forward<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>>(std::remove_reference<std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>>::type&)
std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_Hashtable_ebo_helper<std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::unordered_map<VkQueue_T*, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>, std::hash<VkQueue_T*>, std::equal_to<VkQueue_T*>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>>::find(VkQueue_T* const&)
decltype(get<0>(forward<std::pair<void* const, _debug_report_data*>&>(fp))) std::__detail::_Select1st::operator()<std::pair<void* const, _debug_report_data*>&>(std::pair<void* const, _debug_report_data*>&) const
__gnu_cxx::__aligned_buffer<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_addr()
std::_Tuple_impl<0ul, void*&&>::_Tuple_impl<void*>(void*&&)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::end()
std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&)
__gnu_cxx::__aligned_buffer<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_ptr()
get_chain_info(VkDeviceCreateInfo const*, VkLayerFunction_)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>(std::piecewise_construct_t, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>, std::tuple<>)
std::tuple<void*&&>::tuple(std::tuple<void*&&>&&)
std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true>>::_M_eq() const
_debug_report_data* GetLayerDataPtr<_debug_report_data>(void*, std::unordered_map<void*, _debug_report_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, _debug_report_data*>>>&)
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned long, unsigned long) const
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::allocate(unsigned long, void const*)
void* const& std::__pair_get<0ul>::__const_get<void* const, _debug_report_data*>(std::pair<void* const, _debug_report_data*> const&)
std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&) const
std::__detail::_Equal_helper<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, unsigned long, false>::_S_equals(std::equal_to<VkQueue_T*> const&, std::__detail::_Select1st const&, VkQueue_T* const&, unsigned long, std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::end()
__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::_M_addr()
std::__detail::_Hash_node_value_base<std::pair<void* const, _debug_report_data*>>::_Hash_node_value_base()
util_GetLayerProperties
ConfigFile::getOption(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::allocator<std::pair<void* const, _debug_report_data*>>::~allocator()
std::__detail::_Select1st const& std::forward<std::__detail::_Select1st const&>(std::remove_reference<std::__detail::_Select1st const&>::type&)
std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::_Rb_tree_const_iterator(std::_Rb_tree_node_base const*)
std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>::_Node_const_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>::_Hash_node()
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(void* const&, unsigned long, unsigned long) const
std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::~allocator()
VkDebugReportCallbackEXT_T** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<VkDebugReportCallbackEXT_T*>(VkDebugReportCallbackEXT_T* const*, VkDebugReportCallbackEXT_T* const*, VkDebugReportCallbackEXT_T**)
__stat
std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const& std::forward<std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::remove_reference<std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>::type&)
std::tuple_element<0ul, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>>::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&)
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::_Tuple_impl(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&)
std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
void std::allocator_traits<std::allocator<VkDebugReportCallbackEXT_T*>>::construct<VkDebugReportCallbackEXT_T*, VkDebugReportCallbackEXT_T* const&>(std::allocator<VkDebugReportCallbackEXT_T*>&, VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T* const&)
std::allocator_traits<std::allocator<VkDebugUtilsMessengerEXT_T*>>::allocate(std::allocator<VkDebugUtilsMessengerEXT_T*>&, unsigned long)
std::__detail::_Hashtable_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_equals(unsigned long const&, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>*) const
std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const
get_chain_info(VkInstanceCreateInfo const*, VkLayerFunction_)
std::allocator_traits<std::allocator<VkDebugUtilsMessengerEXT_T*>>::max_size(std::allocator<VkDebugUtilsMessengerEXT_T*> const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_S_left(std::_Rb_tree_node_base const*)
bool std::operator< <char, std::char_traits<char>, std::allocator<char>>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::hash<VkQueue_T*>::operator()(VkQueue_T*) const
std::_Head_base<0ul, void*&&, false>::_Head_base<void*>(void*&&)
__GNU_EH_FRAME_HDR
std::__detail::_Node_const_iterator<std::pair<void* const, _debug_report_data*>, false, false>::_Node_const_iterator(std::__detail::_Node_iterator<std::pair<void* const, _debug_report_data*>, false, false> const&)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_deallocate_buckets()
std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::_M_valptr()
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::~_Hashtable_alloc()
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_iterator(std::_Rb_tree_node_base*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, 0ul>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)
std::unordered_map<void*, _debug_report_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, _debug_report_data*>>>::operator[](void*&&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_begin()
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::new_allocator()
std::_Hashtable<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_node(unsigned long, unsigned long const&, unsigned long) const
std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags)
std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::allocator()
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&> std::forward_as_tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
std::__detail::_Hashtable_ebo_helper<0, std::equal_to<VkQueue_T*>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<VkQueue_T*>, true> const&)
std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
void __gnu_cxx::new_allocator<VkDebugUtilsMessengerEXT_T*>::destroy<VkDebugUtilsMessengerEXT_T*>(VkDebugUtilsMessengerEXT_T**)
std::__detail::_Hash_node_base::_Hash_node_base()
VkDebugReportCallbackEXT_T** std::__uninitialized_copy_a<std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T*>(std::move_iterator<VkDebugReportCallbackEXT_T**>, std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**, std::allocator<VkDebugReportCallbackEXT_T*>&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::new_allocator(__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
std::_Hashtable<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::end()
__gnu_cxx::__normal_iterator<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>>::__normal_iterator(VkDebugUtilsMessengerEXT_T** const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable(std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::~new_allocator()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::pair(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::map()
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::__detail::_Mod_range_hashing const& std::forward<std::__detail::_Mod_range_hashing const&>(std::remove_reference<std::__detail::_Mod_range_hashing const&>::type&)
std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>, true>::~_Hashtable_ebo_helper()
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>::allocate(unsigned long, void const*)
std::piecewise_construct_t const& std::forward<std::piecewise_construct_t const&>(std::remove_reference<std::piecewise_construct_t const&>::type&)
std::hash<unsigned long>::operator()(unsigned long) const
__gnu_cxx::__aligned_buffer<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_ptr() const
std::allocator<std::__detail::_Hash_node_base*>::~allocator()
__gnu_cxx::new_allocator<VkDebugUtilsMessengerEXT_T*>::allocate(unsigned long, void const*)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::__detail::_Equal_helper<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, unsigned long, false>::_S_equals(std::equal_to<VkCommandBuffer_T*> const&, std::__detail::_Select1st const&, VkCommandBuffer_T* const&, unsigned long, std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::~_Hashtable()
std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable_base(std::__detail::_Select1st const&, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_begin() const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>(std::piecewise_construct_t, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>, std::tuple<>)
std::equal_to<VkQueue_T*>::operator()(VkQueue_T* const&, VkQueue_T* const&) const
decltype(get<0>(forward<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>&>(fp))) std::__detail::_Select1st::operator()<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>&>(std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>&) const
VkDebugReportCallbackEXT_T* const& std::forward<VkDebugReportCallbackEXT_T* const&>(std::remove_reference<VkDebugReportCallbackEXT_T* const&>::type&)
std::pair<void* const, _debug_report_data*>& std::forward<std::pair<void* const, _debug_report_data*>&>(std::remove_reference<std::pair<void* const, _debug_report_data*>&>::type&)
ConfigFile::parseFile(char const*)
std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_get_node()
std::__detail::_Prime_rehash_policy::_M_state() const
VkDebugUtilsMessengerEXT_T** std::__uninitialized_move_if_noexcept_a<VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**, std::allocator<VkDebugUtilsMessengerEXT_T*>>(VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**, std::allocator<VkDebugUtilsMessengerEXT_T*>&)
std::allocator<std::pair<void* const, _debug_report_data*>>::~allocator()
std::tuple_element<0ul, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::type const& std::get<0ul, VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&)
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const& std::forward<std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::remove_reference<std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>::type&)
__gnu_cxx::__normal_iterator<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>>::__normal_iterator(VkDebugUtilsMessengerEXT_T** const&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator()
bool __gnu_cxx::__is_null_pointer<char>(char*)
__gnu_cxx::new_allocator<VkDebugUtilsMessengerEXT_T*>::max_size() const
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::unordered_map(std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
void __gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, false>::_Head_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
std::__detail::_Hash_code_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false> const*, unsigned long) const
std::move_iterator<VkDebugUtilsMessengerEXT_T**>::base() const
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::~new_allocator()
std::move_iterator<VkDebugReportCallbackEXT_T**>::base() const
std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::operator==(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&) const
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::~_Rb_tree_impl()
__gnu_cxx::__aligned_buffer<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_addr()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>& std::__get_helper<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, >&)
void std::allocator_traits<std::allocator<std::pair<void* const, _debug_report_data*>>>::destroy<std::pair<void* const, _debug_report_data*>>(std::allocator<std::pair<void* const, _debug_report_data*>>&, std::pair<void* const, _debug_report_data*>*)
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::operator--()
std::__detail::_Hash_code_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const
std::__detail::_Hash_node_value_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_valptr()
std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>(std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>> const&)
std::__detail::_Hashtable_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_eq() const
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>::deallocate(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*, unsigned long)
setLayerOption
std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>>::allocate(std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>&, unsigned long)
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node_base*&, std::_Rb_tree_node_base*&)
void __gnu_cxx::new_allocator<std::pair<void* const, _debug_report_data*>>::construct<std::pair<void* const, _debug_report_data*>, std::piecewise_construct_t const&, std::tuple<void*&&>, std::tuple<>>(std::pair<void* const, _debug_report_data*>*, std::piecewise_construct_t const&, std::tuple<void*&&>&&, std::tuple<>&&)
std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::push_back(VkDebugReportCallbackEXT_T* const&)
__gnu_cxx::__aligned_buffer<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_addr() const
layer_debug_report_actions
std::__detail::_Node_iterator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>*)
std::pair<void* const, _debug_report_data*> const& std::forward<std::pair<void* const, _debug_report_data*> const&>(std::remove_reference<std::pair<void* const, _debug_report_data*> const&>::type&)
VkDebugUtilsMessengerEXT_T** std::copy<std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**>(std::move_iterator<VkDebugUtilsMessengerEXT_T**>, std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**)
__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::max_size() const
bool&& std::forward<bool>(std::remove_reference<bool>::type&)
__gnu_cxx::new_allocator<std::pair<void* const, _debug_report_data*>>::new_allocator()
std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>& std::forward<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>&>(std::remove_reference<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>&>::type&)
std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>::_Hash_node()
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const
std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>::_M_next() const
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>, std::tuple<>>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&, std::tuple<>&&)
std::allocator_traits<std::allocator<VkDebugReportCallbackEXT_T*>>::max_size(std::allocator<VkDebugReportCallbackEXT_T*> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable(std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_find_before_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned long) const
std::__detail::_Node_iterator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false, false>::operator->() const
std::iterator_traits<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>::iterator_category std::__iterator_category<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const* const&)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*)
std::__detail::_Equal_helper<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::equal_to<void*>, unsigned long, false>::_S_equals(std::equal_to<void*> const&, std::__detail::_Select1st const&, void* const&, unsigned long, std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::_M_v()
std::__detail::_Hashtable_ebo_helper<0, std::equal_to<void*>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<void*>, true> const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::end() const
__dso_handle
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_before_node(unsigned long, void* const&, unsigned long) const
std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags)
ConfigFile::~ConfigFile()
std::__detail::_Hashtable_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_equals(void* const&, unsigned long, std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*) const
std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>(std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>> const&)
std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>&)
std::__detail::_Hash_node_value_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_valptr()
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::new_allocator()
std::__detail::_Hash_code_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(unsigned long const&, unsigned long, unsigned long) const
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::find(void* const&)
VkDebugReportCallbackEXT_T** std::uninitialized_copy<std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**>(std::move_iterator<VkDebugReportCallbackEXT_T**>, std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**)
__gnu_cxx::new_allocator<std::pair<void* const, _debug_report_data*>>::~new_allocator()
std::__detail::_Map_base<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](void*&&)
void std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::_M_realloc_insert<VkDebugReportCallbackEXT_T* const&>(__gnu_cxx::__normal_iterator<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>>, VkDebugReportCallbackEXT_T* const&)
std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*>>::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long)
VkQueue_T* const& std::__pair_get<0ul>::__get<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&)
std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>::_Node_const_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
__gnu_cxx::new_allocator<std::pair<void* const, _debug_report_data*>>::new_allocator()
__gnu_cxx::__normal_iterator<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>>::difference_type __gnu_cxx::operator-<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>>(__gnu_cxx::__normal_iterator<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>> const&, __gnu_cxx::__normal_iterator<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>> const&)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::operator==(std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&) const
VkDebugReportCallbackEXT_T** std::__uninitialized_move_if_noexcept_a<VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**, std::allocator<VkDebugReportCallbackEXT_T*>>(VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**, std::allocator<VkDebugReportCallbackEXT_T*>&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_S_right(std::_Rb_tree_node_base*)
std::iterator_traits<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>::difference_type std::__detail::__distance_fw<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*)
std::tuple_element<0ul, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::type const& std::get<0ul, VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&)
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~new_allocator()
std::tuple_element<0ul, std::pair<void* const, _debug_report_data*>>::type const& std::get<0ul, void* const, _debug_report_data*>(std::pair<void* const, _debug_report_data*> const&)
std::__detail::_Node_iterator_base<std::pair<void* const, _debug_report_data*>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::operator~(std::_Ios_Fmtflags)
std::__detail::_Hash_code_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const
std::equal_to<unsigned long>::operator()(unsigned long const&, unsigned long const&) const
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*) const
void __gnu_cxx::new_allocator<VkDebugUtilsMessengerEXT_T*>::construct<VkDebugUtilsMessengerEXT_T*, VkDebugUtilsMessengerEXT_T* const&>(VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T* const&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::max_size() const
void std::allocator_traits<std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>(std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
std::__detail::_Hash_code_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const
DW.ref.__gxx_personality_v0
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
VkDebugUtilsMessengerEXT_T** std::uninitialized_copy<std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**>(std::move_iterator<VkDebugUtilsMessengerEXT_T**>, std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**)
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::tuple(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&)
std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>& std::forward<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>(std::remove_reference<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>::type&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::~new_allocator()
std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_AllocNode(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>&)
VkDebugReportCallbackEXT_T** std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**>(std::move_iterator<VkDebugReportCallbackEXT_T**>, std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**)
void*& std::__get_helper<0ul, void*&&>(std::_Tuple_impl<0ul, void*&&, >&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_Rb_tree_impl()
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::end()
__gnu_cxx::__normal_iterator<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>>::difference_type __gnu_cxx::operator-<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>>(__gnu_cxx::__normal_iterator<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>> const&, __gnu_cxx::__normal_iterator<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>> const&)
std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::end()
std::tuple_element<0ul, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>&)
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>, std::tuple<>>(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&, std::tuple<>&&)
std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::_M_check_len(unsigned long, char const*) const
std::allocator_traits<std::allocator<VkDebugUtilsMessengerEXT_T*>>::deallocate(std::allocator<VkDebugUtilsMessengerEXT_T*>&, VkDebugUtilsMessengerEXT_T**, unsigned long)
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_create_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>, std::tuple<>>(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&, std::tuple<>&&)
std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, false>::_Head_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
std::__detail::_Node_iterator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::__detail::_Prime_rehash_policy::_M_reset(unsigned long)
layer_debug_messenger_actions
std::tuple_element<0ul, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::type const& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
unsigned long const& std::__pair_get<0ul>::__get<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::~new_allocator()
std::_Head_base<0ul, void*&&, false>::_M_head(std::_Head_base<0ul, void*&&, false>&)
std::__detail::_Node_iterator_base<std::pair<void* const, _debug_report_data*>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*>>::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long)
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_valptr() const
std::_Vector_base<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::_M_get_Tp_allocator()
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*, unsigned long) const
std::__detail::_Node_const_iterator<std::pair<void* const, _debug_report_data*>, false, false>::operator->() const
std::__detail::_Hashtable_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_equals(VkCommandBuffer_T* const&, unsigned long, std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*) const
std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_S_key(std::_Rb_tree_node_base const*)
std::_Hashtable<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*) const
void* const& std::__pair_get<0ul>::__get<void* const, _debug_report_data*>(std::pair<void* const, _debug_report_data*>&)
VkCommandBuffer_T* const& std::__pair_get<0ul>::__get<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&)
void std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::_M_realloc_insert<VkDebugUtilsMessengerEXT_T* const&>(__gnu_cxx::__normal_iterator<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>>, VkDebugUtilsMessengerEXT_T* const&)
bool std::__detail::operator==<std::pair<void* const, _debug_report_data*>, false>(std::__detail::_Node_iterator_base<std::pair<void* const, _debug_report_data*>, false> const&, std::__detail::_Node_iterator_base<std::pair<void* const, _debug_report_data*>, false> const&)
std::_Hashtable<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::end()
bool std::__detail::operator!=<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>(std::__detail::_Node_iterator_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false> const&, std::__detail::_Node_iterator_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false> const&)
std::__detail::_Insert_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_conjure_hashtable()
decltype(get<0>(forward<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>(fp))) std::__detail::_Select1st::operator()<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>(std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&) const
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*&, std::_Rb_tree_node_base*&)
std::__detail::_Node_iterator_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>*)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::lower_bound(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag)
decltype(get<0>(forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>&>(fp))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>&) const
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::operator*() const
std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::max_size() const
void __gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>, std::tuple<>>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&, std::tuple<>&&)
ConfigFile::setOption(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__detail::_Hashtable_ebo_helper<1, std::hash<unsigned long>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<unsigned long>, true> const&)
std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::size() const
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>>::_M_allocate_buckets(unsigned long)
std::unordered_map<VkCommandBuffer_T*, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>, std::hash<VkCommandBuffer_T*>, std::equal_to<VkCommandBuffer_T*>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>>::end()
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const
std::__detail::_Hash_code_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
__gnu_cxx::new_allocator<VkDebugReportCallbackEXT_T*>::max_size() const
std::_Tuple_impl<0ul, void*&&>::_M_head(std::_Tuple_impl<0ul, void*&&>&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::~_Hashtable()
std::_Hashtable<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::find(VkQueue_T* const&)
std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>, true>&)
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true> const*, unsigned long) const
std::move_iterator<VkDebugReportCallbackEXT_T**>::move_iterator(VkDebugReportCallbackEXT_T**)
__gnu_cxx::__normal_iterator<VkDebugUtilsMessengerEXT_T**, std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>>::base() const
std::tuple_element<0ul, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::type& std::get<0ul, VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&)
std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const& std::forward<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::remove_reference<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>::type&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_find_node(unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned long) const
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(void* const&, unsigned long) const
std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>>::_M_allocate_node<std::piecewise_construct_t const&, std::tuple<void*&&>, std::tuple<>>(std::piecewise_construct_t const&, std::tuple<void*&&>&&, std::tuple<>&&)
std::__detail::_Hash_node_value_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_v()
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node_base* const&, std::_Rb_tree_node_base*&)
std::_Vector_base<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::_M_get_Tp_allocator()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~_Rb_tree()
PrintMessageType
std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true> const&)
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::tuple(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&)
VkQueue_T* const& std::__pair_get<0ul>::__const_get<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&)
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::_Tuple_impl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const
std::pair<void* const, _debug_report_data*>::pair<void*&&>(std::piecewise_construct_t, std::tuple<void*&&>, std::tuple<>)
std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::allocator()
std::__detail::_Hash_node_base::_Hash_node_base()
std::hash<void*>::operator()(void*) const
std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*)
ConfigFile::ConfigFile()
std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::size() const
std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::operator()(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&) const
void __gnu_cxx::new_allocator<std::pair<void* const, _debug_report_data*>>::destroy<std::pair<void* const, _debug_report_data*>>(std::pair<void* const, _debug_report_data*>*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, VkDebugReportFlagBitsEXT, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, VkDebugReportFlagBitsEXT&&)
VkCommandBuffer_T* const& std::__pair_get<0ul>::__const_get<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>(std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&)
std::__detail::_Insert_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::allocator()
std::__detail::_Hash_node_value_base<std::pair<void* const, _debug_report_data*>>::_M_v()
std::__detail::_Hash_node_value_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_v() const
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::~_Alloc_hider()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::~pair()
__gnu_cxx::new_allocator<VkDebugUtilsMessengerEXT_T*>::deallocate(VkDebugUtilsMessengerEXT_T**, unsigned long)
std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>&, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*, unsigned long)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::map()
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::_Tuple_impl<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
void __gnu_cxx::new_allocator<VkDebugReportCallbackEXT_T*>::destroy<VkDebugReportCallbackEXT_T*>(VkDebugReportCallbackEXT_T**)
std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>, true>::~_Hashtable_ebo_helper()
void std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_construct_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>, std::tuple<>>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&, std::tuple<>&&)
std::_Hashtable<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(unsigned long const&, unsigned long) const
bool std::__detail::operator!=<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>(std::__detail::_Node_iterator_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false> const&, std::__detail::_Node_iterator_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false> const&)
decltype(get<0>(forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>(fp))) std::__detail::_Select1st::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&) const
__gnu_cxx::new_allocator<VkDebugReportCallbackEXT_T*>::allocate(unsigned long, void const*)
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::new_allocator()
std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true> const&)
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::max_size() const
std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~allocator()
std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::allocator(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true> const&)
std::allocator<std::__detail::_Hash_node_base*>::~allocator()
VkDebugReportCallbackEXT_T** std::__miter_base<VkDebugReportCallbackEXT_T**>(VkDebugReportCallbackEXT_T**)
__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long)
__gnu_cxx::__aligned_buffer<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_ptr()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*)
std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*)
std::__detail::_Hash_code_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const
std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::max_size() const
__gnu_cxx::__normal_iterator<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>>::__normal_iterator(VkDebugReportCallbackEXT_T** const&)
std::__detail::_Node_iterator<std::pair<void* const, _debug_report_data*>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>, bool, true>(std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>&&, bool&&)
PrintMessageSeverity
void*&& std::forward<void*&&>(std::remove_reference<void*&&>::type&)
std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, false>::_Head_base(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__detail::_Hashtable_ebo_helper<1, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_Hashtable_ebo_helper<std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::~new_allocator()
decltype(get<0>(forward<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>(fp))) std::__detail::_Select1st::operator()<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>(std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&) const
std::_Vector_base<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::_M_deallocate(VkDebugUtilsMessengerEXT_T**, unsigned long)
getLayerOption
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~new_allocator()
void std::allocator_traits<std::allocator<VkDebugUtilsMessengerEXT_T*>>::destroy<VkDebugUtilsMessengerEXT_T*>(std::allocator<VkDebugUtilsMessengerEXT_T*>&, VkDebugUtilsMessengerEXT_T**)
VkDebugUtilsMessengerEXT_T** std::__uninitialized_copy<true>::__uninit_copy<std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**>(std::move_iterator<VkDebugUtilsMessengerEXT_T**>, std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**)
std::__detail::_Hashtable_ebo_helper<0, std::equal_to<unsigned long>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<unsigned long>, true> const&)
std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::begin() const
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_Rb_tree()
std::__detail::_Hashtable_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_eq() const
std::tuple<void*&&> std::forward_as_tuple<void*>(void*&&)
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
void std::allocator_traits<std::allocator<VkDebugReportCallbackEXT_T*>>::destroy<VkDebugReportCallbackEXT_T*>(std::allocator<VkDebugReportCallbackEXT_T*>&, VkDebugReportCallbackEXT_T**)
std::__detail::_Node_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>::operator->() const
std::__detail::_Hashtable_ebo_helper<1, std::hash<void*>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<void*>, true> const&)
std::_Hashtable<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*) const
std::__detail::_Hash_node_value_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_valptr() const
VkDebugReportCallbackEXT_T** std::copy<std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**>(std::move_iterator<VkDebugReportCallbackEXT_T**>, std::move_iterator<VkDebugReportCallbackEXT_T**>, VkDebugReportCallbackEXT_T**)
std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, false>::_Head_base(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_Alloc_hider::~_Alloc_hider()
std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>* std::addressof<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_S_key(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const*)
std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>* std::__addressof<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>&)
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::end() const
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_begin() const
__gnu_cxx::__aligned_membuf<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_addr()
std::pair<void* const, _debug_report_data*>::pair<void*&&>(std::piecewise_construct_t, std::tuple<void*&&>, std::tuple<>)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::begin()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_S_value(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const*)
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node_base*&, std::_Rb_tree_node_base* const&)
std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>, bool> std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_insert<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>> const&, std::integral_constant<bool, true>)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~map()
std::__detail::_Hash_code_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(VkQueue_T* const&) const
unsigned long const& std::__pair_get<0ul>::__const_get<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::__detail::_Node_iterator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false, false>::operator->() const
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::__detail::_Hash_node_value_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_valptr() const
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::~pair()
std::_Vector_base<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::_M_allocate(unsigned long)
std::_Hashtable<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_before_node(unsigned long, unsigned long const&, unsigned long) const
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, 0ul>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::clear()
std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
bool std::__detail::operator==<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>(std::__detail::_Node_iterator_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> const&, std::__detail::_Node_iterator_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> const&)
std::__detail::_Hash_code_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const
std::__detail::_Hash_node_value_base<std::pair<void* const, _debug_report_data*>>::_M_valptr() const
VkDebugReportCallbackEXT_T** std::__copy_move_a<true, VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**>(VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**)
std::_Hashtable<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>*) const
std::__detail::_Hash_code_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(VkCommandBuffer_T* const&) const
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_S_key(std::_Rb_tree_node_base const*)
std::__detail::_Node_iterator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_valptr()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_S_right(std::_Rb_tree_node_base const*)
std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::operator!=(std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&) const
std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const& std::forward<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>(std::remove_reference<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>::type&)
__gnu_cxx::__aligned_buffer<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_ptr() const
std::_Hash_impl::hash(void const*, unsigned long, unsigned long)
std::tuple_element<0ul, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>>::type& std::get<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)
_DYNAMIC
std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable_base(std::__detail::_Select1st const&, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
__TMC_END__
std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>* std::addressof<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>&)
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>, std::tuple<>>(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&, std::tuple<>&&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_S_left(std::_Rb_tree_node_base*)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>&&)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>>::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_M_allocate_buckets(unsigned long)
std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true> const&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::new_allocator(__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
std::allocator_traits<std::allocator<VkDebugReportCallbackEXT_T*>>::deallocate(std::allocator<VkDebugReportCallbackEXT_T*>&, VkDebugReportCallbackEXT_T**, unsigned long)
__gnu_cxx::__aligned_membuf<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_ptr()
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::deallocate(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*, unsigned long)
std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_const_iterator()
__gnu_cxx::__aligned_membuf<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_addr() const
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::unordered_map(std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::__detail::_Node_iterator_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>*)
std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>::operator[](unsigned long)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_get_Node_allocator()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::key_comp() const
std::_Vector_base<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::_M_allocate(unsigned long)
decltype(get<0>(forward<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>(fp))) std::__detail::_Select1st::operator()<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>(std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&) const
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::new_allocator()
std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_Hashtable_ebo_helper<std::__detail::_Mod_range_hashing const&>(std::__detail::_Mod_range_hashing const&)
getEnvironment[abi:cxx11](char const*)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_destroy_node(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*)
getLayerLogOutput
std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>>::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>&, std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*, unsigned long)
std::_Head_base<0ul, void*&&, false>::_Head_base<void*>(void*&&)
std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::_Hash_node_value_base()
std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::size() const
std::tuple_element<0ul, std::pair<void* const, _debug_report_data*>>::type& std::get<0ul, void* const, _debug_report_data*>(std::pair<void* const, _debug_report_data*>&)
std::__detail::_Node_const_iterator<std::pair<void* const, _debug_report_data*>, false, false>::_Node_const_iterator(std::__detail::_Node_iterator<std::pair<void* const, _debug_report_data*>, false, false> const&)
std::iterator_traits<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>::difference_type std::__distance<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::random_access_iterator_tag)
std::move_iterator<VkDebugReportCallbackEXT_T**>::move_iterator(VkDebugReportCallbackEXT_T**)
__gnu_cxx::__aligned_buffer<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_ptr()
std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const
decltype(get<0>(forward<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(fp))) std::__detail::_Select1st::operator()<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&) const
std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~allocator()
std::__detail::_Node_iterator_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::_Rb_tree_header::_M_reset()
std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_AllocNode(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::type&)
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const
std::_Hashtable<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::find(unsigned long const&)
std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::lower_bound(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const& std::__pair_get<0ul>::__const_get<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
std::tuple_element<0ul, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::type& std::get<0ul, unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>&)
std::pointer_traits<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*>::pointer_to(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>&)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~map()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>(std::piecewise_construct_t, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>, std::tuple<>)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_M_node_allocator()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const& std::__pair_get<0ul>::__get<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>&)
std::_Hashtable<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(VkCommandBuffer_T* const&, unsigned long) const
std::pair<void* const, _debug_report_data*>::pair<void*&&, 0ul>(std::tuple<void*&&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_construct<char*>(char*, char*)
std::__cxx11::to_string(int)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::~_Rb_tree_impl()
std::pair<void* const, _debug_report_data*>::pair<void*&&, 0ul>(std::tuple<void*&&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_end()
std::__detail::_Hashtable_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_eq() const
__gnu_cxx::__aligned_buffer<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_addr() const
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::tuple(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&)
std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>::_M_next() const
std::__detail::_Hash_node_value_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_v()
VkDebugReportCallbackEXT_T** std::__niter_base<VkDebugReportCallbackEXT_T**>(VkDebugReportCallbackEXT_T**)
std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::operator==(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&) const
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_allocate_buckets(unsigned long)
std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::allocate(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>&, unsigned long)
std::__detail::_Hash_node_base** std::__addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&)
std::remove_reference<void*&>::type&& std::move<void*&>(void*&)
__gnu_cxx::__aligned_buffer<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::_M_ptr()
std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>::_M_next() const
std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>::_Hash_node()
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::_M_head(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&)
unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
__gnu_cxx::__aligned_buffer<std::pair<void* const, _debug_report_data*>>::_M_ptr()
std::_Rb_tree_node_base*& std::forward<std::_Rb_tree_node_base*&>(std::remove_reference<std::_Rb_tree_node_base*&>::type&)
white_list
std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>& std::forward<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>(std::remove_reference<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>&>::type&)
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node_base* const&, std::_Rb_tree_node_base*&)
__gnu_cxx::new_allocator<VkDebugReportCallbackEXT_T*>::deallocate(VkDebugReportCallbackEXT_T**, unsigned long)
std::equal_to<void*>::operator()(void* const&, void* const&) const
std::tuple<void*&&>::tuple<void*, true>(void*&&)
std::iterator_traits<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>::difference_type std::__detail::__distance_fw<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::forward_iterator_tag)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_drop_node(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*)
void std::_Destroy_aux<true>::__destroy<VkDebugUtilsMessengerEXT_T**>(VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**)
std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>(std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*& std::forward<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*&>(std::remove_reference<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*&>::type&)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::key_comp() const
void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::_M_construct_aux<char*>(char*, char*, std::__false_type)
std::move_iterator<VkDebugUtilsMessengerEXT_T**>::move_iterator(VkDebugUtilsMessengerEXT_T**)
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*&, std::_Rb_tree_node_base*&)
std::_Vector_base<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::_M_deallocate(VkDebugReportCallbackEXT_T**, unsigned long)
std::__detail::_Hashtable_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_eq() const
std::iterator_traits<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>::difference_type std::distance<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_node(unsigned long, void* const&, unsigned long) const
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::new_allocator()
__gnu_cxx::__aligned_buffer<std::pair<void* const, _debug_report_data*>>::_M_addr() const
std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_create_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>, std::tuple<>>(std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&, std::tuple<>&&)
std::__detail::_Hashtable_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true>>::_M_equals(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*) const
std::_Hashtable<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::find(VkCommandBuffer_T* const&)
std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_M_allocate_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
std::tuple<void*&&>::tuple(std::tuple<void*&&>&&)
std::move_iterator<VkDebugReportCallbackEXT_T**> std::__make_move_if_noexcept_iterator<VkDebugReportCallbackEXT_T*, std::move_iterator<VkDebugReportCallbackEXT_T**>>(VkDebugReportCallbackEXT_T**)
std::hash<VkCommandBuffer_T*>::operator()(VkCommandBuffer_T*) const
std::__detail::_Hash_code_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false> const*, unsigned long) const
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, VkDebugReportFlagBitsEXT, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, VkDebugReportFlagBitsEXT&&)
void std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>>::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>, std::tuple<>>(std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&, std::tuple<>&&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_insert_node(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*)
std::tuple<void*&&>&& std::forward<std::tuple<void*&&>>(std::remove_reference<std::tuple<void*&&>>::type&)
std::allocator_traits<std::allocator<VkDebugReportCallbackEXT_T*>>::allocate(std::allocator<VkDebugReportCallbackEXT_T*>&, unsigned long)
std::__detail::_Hashtable_ebo_helper<1, std::hash<VkCommandBuffer_T*>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<VkCommandBuffer_T*>, true> const&)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>>::_M_deallocate_node(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::__detail::_Hash_node_value_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_valptr()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_S_value(std::_Rb_tree_node_base const*)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*) const
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>(std::piecewise_construct_t, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>, std::tuple<>)
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::tuple(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&)
std::_Vector_base<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::_M_get_Tp_allocator() const
std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const& std::forward<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>(std::remove_reference<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>::type&)
std::unordered_map<void*, _debug_report_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, _debug_report_data*>>>::end()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~_Rb_tree()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, VkLayerDbgActionBits, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, VkLayerDbgActionBits&&)
std::equal_to<VkCommandBuffer_T*>::operator()(VkCommandBuffer_T* const&, VkCommandBuffer_T* const&) const
std::_Rb_tree_header::_Rb_tree_header()
void std::_Destroy<VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T*>(VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**, std::allocator<VkDebugReportCallbackEXT_T*>&)
std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_const_iterator(std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&)
std::__detail::_Hash_code_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const
std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::begin()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::size() const
__gnu_cxx::__aligned_buffer<std::pair<void* const, _debug_report_data*>>::_M_addr()
std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>::_Hash_node()
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::type&)
std::char_traits<char>::compare(char const*, char const*, unsigned long)
void std::_Destroy<VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T*>(VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**, std::allocator<VkDebugUtilsMessengerEXT_T*>&)
std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::allocator()
ConfigFile::ConfigFile()
std::__detail::_Hash_node_value_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_v() const
std::__detail::_Hash_code_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(VkQueue_T* const&, unsigned long, unsigned long) const
std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>::_M_next() const
std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
VkDebugUtilsMessengerEXT_T** std::__niter_base<VkDebugUtilsMessengerEXT_T**>(VkDebugUtilsMessengerEXT_T**)
VkDebugUtilsMessengerEXT_T** std::__miter_base<VkDebugUtilsMessengerEXT_T**>(VkDebugUtilsMessengerEXT_T**)
std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::_Rb_tree_const_iterator(std::_Rb_tree_node_base const*)
std::_Hashtable<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_node(unsigned long, VkCommandBuffer_T* const&, unsigned long) const
std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_const_iterator()
decltype(__miter_base(fp.base())) std::__miter_base<VkDebugUtilsMessengerEXT_T**>(std::move_iterator<VkDebugUtilsMessengerEXT_T**>)
std::__detail::_Hash_code_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(unsigned long const&) const
std::__detail::_Hashtable_ebo_helper<1, std::hash<VkQueue_T*>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<1, std::hash<VkQueue_T*>, true> const&)
std::tuple_element<0ul, std::tuple<void*&&>>::type& std::get<0ul, void*&&>(std::tuple<void*&&>&)
__gnu_cxx::__normal_iterator<VkDebugReportCallbackEXT_T**, std::vector<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>>::base() const
std::_Hashtable<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_bucket_index(VkQueue_T* const&, unsigned long) const
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::_Tuple_impl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::allocator<std::pair<void* const, _debug_report_data*>>::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>(std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>> const&)
std::_Vector_base<VkDebugReportCallbackEXT_T*, std::allocator<VkDebugReportCallbackEXT_T*>>::_M_get_Tp_allocator() const
std::tuple<>&& std::forward<std::tuple<>>(std::remove_reference<std::tuple<>>::type&)
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::_Tuple_impl(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&)
std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>>::deallocate(std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>&, std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*, unsigned long)
std::__detail::_Node_iterator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false, false>::operator->() const
void std::allocator_traits<std::allocator<std::pair<void* const, _debug_report_data*>>>::construct<std::pair<void* const, _debug_report_data*>, std::piecewise_construct_t const&, std::tuple<void*&&>, std::tuple<>>(std::allocator<std::pair<void* const, _debug_report_data*>>&, std::pair<void* const, _debug_report_data*>*, std::piecewise_construct_t const&, std::tuple<void*&&>&&, std::tuple<>&&)
std::unordered_map<unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::find(unsigned long const&)
std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>, true>::_S_get(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>, true>&)
std::__detail::_Node_iterator<std::pair<void* const, _debug_report_data*>, false, false>::operator->() const
std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>::_M_next() const
__gnu_cxx::__aligned_membuf<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::_M_ptr() const
std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::begin()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::end() const
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>::max_size() const
VkDebugUtilsMessengerEXT_T** std::__copy_move_a<true, VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**>(VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T**)
void std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>>::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>(std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*)
operator new(unsigned long, void*)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&& std::forward<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>(std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::type&)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::~_Hashtable_alloc()
std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>>::allocate(std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>&, unsigned long)
void*&& std::forward<void*>(std::remove_reference<void*>::type&)
std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>(std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::__detail::_Hashtable_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, false, true>>::_M_equals(VkQueue_T* const&, unsigned long, std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*) const
__gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_Rb_tree()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_lower_bound(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*, std::_Rb_tree_node_base*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_Hash_code_base(std::__detail::_Select1st const&, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_Rb_tree_impl<std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_Rb_tree_impl()
std::__detail::_Hash_code_base<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const
std::__detail::_Node_const_iterator<std::pair<void* const, _debug_report_data*>, false, false>::_Node_const_iterator()
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::_Tuple_impl(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&&)
decltype(get<0>(forward<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>(fp))) std::__detail::_Select1st::operator()<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&>(std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>> const&) const
std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>* std::__addressof<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>&)
std::move_iterator<VkDebugUtilsMessengerEXT_T**>::move_iterator(VkDebugUtilsMessengerEXT_T**)
__gnu_cxx::__aligned_buffer<std::pair<void* const, _debug_report_data*>>::_M_ptr() const
std::ios_base::setf(std::_Ios_Fmtflags, std::_Ios_Fmtflags)
std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>, true>::_Hashtable_ebo_helper<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>&&)
vk_string_validate
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_deallocate_buckets()
std::__detail::_Hashtable_ebo_helper<0, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, true>::_Hashtable_ebo_helper<std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&>(std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_S_value(std::_Rb_tree_node_base const*)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>>>::_M_node_allocator()
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::new_allocator()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, 0ul>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_iterator(std::_Rb_tree_node_base*)
VkDebugUtilsMessengerEXT_T* const& std::forward<VkDebugUtilsMessengerEXT_T* const&>(std::remove_reference<VkDebugUtilsMessengerEXT_T* const&>::type&)
std::_Hashtable<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_node(unsigned long, VkQueue_T* const&, unsigned long) const
void std::allocator_traits<std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>(std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>*)
decltype(__miter_base(fp.base())) std::__miter_base<VkDebugReportCallbackEXT_T**>(std::move_iterator<VkDebugReportCallbackEXT_T**>)
__gnu_cxx::__aligned_membuf<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_ptr() const
std::_Rb_tree_key_compare<std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_Rb_tree_key_compare()
__gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::allocate(unsigned long, void const*)
__gnu_cxx::new_allocator<std::pair<void* const, _debug_report_data*>>::~new_allocator()
std::__detail::_Hash_node_value_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_v()
std::_Tuple_impl<0ul, void*&&>::_Tuple_impl<void*>(void*&&)
std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::~allocator()
std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>&&)
std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_store_code(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*, unsigned long) const
std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, false>::_M_head(std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, false>&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const& std::__get_helper<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, >&)
std::unordered_map<unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::end()
void std::allocator_traits<std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>>::construct<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>, std::tuple<>>(std::allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>&, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&, std::tuple<>&&)
std::__detail::_Node_iterator<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false>*)
std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>&& std::forward<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>>(std::remove_reference<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>>::type&)
std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::_M_valptr() const
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_allocate_buckets(unsigned long)
std::__detail::_Hashtable_ebo_helper<0, std::equal_to<VkCommandBuffer_T*>, true>::_S_cget(std::__detail::_Hashtable_ebo_helper<0, std::equal_to<VkCommandBuffer_T*>, true> const&)
std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
PrintMessageFlags
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node_base*&, std::_Rb_tree_node_base* const&)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_M_deallocate_node(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::~allocator()
void std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_construct_node<std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>, std::tuple<>>(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*, std::piecewise_construct_t const&, std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&, std::tuple<>&&)
decltype(get<0>(forward<std::pair<void* const, _debug_report_data*> const&>(fp))) std::__detail::_Select1st::operator()<std::pair<void* const, _debug_report_data*> const&>(std::pair<void* const, _debug_report_data*> const&) const
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract()
VkDebugUtilsMessengerEXT_T** std::__uninitialized_copy_a<std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T*>(std::move_iterator<VkDebugUtilsMessengerEXT_T**>, std::move_iterator<VkDebugUtilsMessengerEXT_T**>, VkDebugUtilsMessengerEXT_T**, std::allocator<VkDebugUtilsMessengerEXT_T*>&)
void std::_Destroy<VkDebugReportCallbackEXT_T**>(VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**)
std::_Hashtable<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkCommandBuffer_T*>, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::end()
GetLayerOptionFlags
std::__detail::_Hash_node_value_base<std::pair<void* const, _debug_report_data*>>::_M_valptr()
std::pair<std::__decay_and_strip<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>>::__type, std::__decay_and_strip<bool>::__type> std::make_pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>, bool>(std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>&&, bool&&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_bucket_index(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned long) const
std::__detail::_Hash_node_value_base<std::pair<void* const, _debug_report_data*>>::_M_v() const
VkDebugReportCallbackEXT_T** std::__copy_move_a2<true, VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**>(VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**)
std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>&& std::forward<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>(std::remove_reference<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::type&)
std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_const_cast() const
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::_M_head(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&)
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
VkDebugReportFlagBitsEXT&& std::forward<VkDebugReportFlagBitsEXT>(std::remove_reference<VkDebugReportFlagBitsEXT>::type&)
std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags)
std::__detail::_Node_iterator<std::pair<void* const, _debug_report_data*>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false>*)
std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>, true>::_Hashtable_ebo_helper<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>&&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, 0ul>(std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>&, std::tuple<>&, std::_Index_tuple<0ul>, std::_Index_tuple<>)
std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_Hashtable_ebo_helper<std::__detail::_Select1st const&>(std::__detail::_Select1st const&)
std::tuple<void*&&>::tuple<void*, true>(void*&&)
std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, false>::_M_head(std::_Head_base<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, false>&)
std::__detail::_Node_iterator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false, false>::_Node_iterator(std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::end()
std::_Tuple_impl<0ul, void*&&>::_Tuple_impl(std::_Tuple_impl<0ul, void*&&>&&)
bool std::__detail::operator!=<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>(std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true> const&, std::__detail::_Node_iterator_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true> const&)
__gnu_cxx::__aligned_membuf<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::_M_addr() const
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::__detail::_Prime_rehash_policy::_M_bkt_for_elements(unsigned long) const
std::_Rb_tree_header::_Rb_tree_header()
__gnu_cxx::__aligned_buffer<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_addr()
std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>>::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::unordered_map<void*, _debug_report_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, _debug_report_data*>>>::find(void* const&)
VkDebugUtilsMessengerEXT_T** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<VkDebugUtilsMessengerEXT_T*>(VkDebugUtilsMessengerEXT_T* const*, VkDebugUtilsMessengerEXT_T* const*, VkDebugUtilsMessengerEXT_T**)
std::move_iterator<VkDebugUtilsMessengerEXT_T**> std::__make_move_if_noexcept_iterator<VkDebugUtilsMessengerEXT_T*, std::move_iterator<VkDebugUtilsMessengerEXT_T**>>(VkDebugUtilsMessengerEXT_T**)
std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::~allocator()
std::vector<VkDebugUtilsMessengerEXT_T*, std::allocator<VkDebugUtilsMessengerEXT_T*>>::_M_check_len(unsigned long, char const*) const
std::__detail::_Hash_code_base<VkCommandBuffer_T*, std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::__detail::_Select1st, std::hash<VkCommandBuffer_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(VkCommandBuffer_T* const&, unsigned long, unsigned long) const
std::__detail::_Hash_node_value_base<std::pair<void* const, _debug_report_data*>>::_Hash_node_value_base()
ConfigFile::~ConfigFile()
std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float)
void std::_Destroy_aux<true>::__destroy<VkDebugReportCallbackEXT_T**>(VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T**)
std::_Hashtable<void*, std::pair<void* const, _debug_report_data*>, std::allocator<std::pair<void* const, _debug_report_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::operator++()
std::__detail::_Node_iterator_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, VkLayerDbgActionBits, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&, VkLayerDbgActionBits&&)
_GLOBAL_OFFSET_TABLE_
std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>::size() const
VkLayerDbgActionBits&& std::forward<VkLayerDbgActionBits>(std::remove_reference<VkLayerDbgActionBits>::type&)
std::__detail::_Hash_node_value_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::_Hash_node_value_base()
void __gnu_cxx::new_allocator<VkDebugReportCallbackEXT_T*>::construct<VkDebugReportCallbackEXT_T*, VkDebugReportCallbackEXT_T* const&>(VkDebugReportCallbackEXT_T**, VkDebugReportCallbackEXT_T* const&)
std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&)
std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&)
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>::_Tuple_impl(std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>&&>&&)
std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>::allocator(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_S_key(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*)
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>::pair(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&)
void std::allocator_traits<std::allocator<VkDebugUtilsMessengerEXT_T*>>::construct<VkDebugUtilsMessengerEXT_T*, VkDebugUtilsMessengerEXT_T* const&>(std::allocator<VkDebugUtilsMessengerEXT_T*>&, VkDebugUtilsMessengerEXT_T**, VkDebugUtilsMessengerEXT_T* const&)
std::__detail::_Hash_code_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, false> const*, unsigned long) const
operator delete(void*, void*)
std::__detail::_Hash_node_value_base<std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_valptr() const
__gnu_cxx::__aligned_buffer<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>::_M_ptr() const
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::unordered_map<VkCommandBuffer_T*, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>, std::hash<VkCommandBuffer_T*>, std::equal_to<VkCommandBuffer_T*>, std::allocator<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>>::find(VkCommandBuffer_T* const&)
std::pointer_traits<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>&)
std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_Hashtable_ebo_helper<std::__detail::_Mod_range_hashing const&>(std::__detail::_Mod_range_hashing const&)
std::hex(std::ios_base&)
std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::operator->() const
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*>::pair<std::_Rb_tree_node_base*&, std::_Rb_tree_node_base*&, true>(std::_Rb_tree_node_base*&, std::_Rb_tree_node_base*&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
std::_Tuple_impl<0ul, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::_Tuple_impl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_Hashtable_ebo_helper<std::__detail::_Select1st const&>(std::__detail::_Select1st const&)
std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>>(std::allocator<std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>> const&)
void __gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::destroy<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>*)
std::_Tuple_impl<0ul, void*&&>::_Tuple_impl(std::_Tuple_impl<0ul, void*&&>&&)
std::__detail::_Node_const_iterator<std::pair<void* const, _debug_report_data*>, false, false>::_Node_const_iterator()
std::__detail::_Node_iterator_base<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
__gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator()
std::__detail::_Node_iterator_base<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<VkCommandBuffer_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, false>*)
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_S_value(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*)
std::__detail::_Hash_code_base<unsigned long, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Select1st, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const
std::_Hashtable<VkQueue_T*, std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>, std::__detail::_Select1st, std::equal_to<VkQueue_T*>, std::hash<VkQueue_T*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_find_before_node(unsigned long, VkQueue_T* const&, unsigned long) const
std::tuple_element<0ul, std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::type const& std::get<0ul, unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>(std::pair<unsigned long const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::__detail::_Hash_code_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_Hash_code_base(std::__detail::_Select1st const&, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable(std::initializer_list<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::tuple<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>::tuple<void, true>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
util_GetExtensionProperties
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable(std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(void* const&) const
std::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>, bool, true>(std::__detail::_Node_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, false, true>&&, bool&&)
std::unordered_map<VkQueue_T*, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>, std::hash<VkQueue_T*>, std::equal_to<VkQueue_T*>, std::allocator<std::pair<VkQueue_T* const, std::vector<_LoggingLabelData, std::allocator<_LoggingLabelData>>>>>::end()
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::_M_rightmost()
std::__detail::_Hash_code_base<void*, std::pair<void* const, _debug_report_data*>, std::__detail::_Select1st, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<std::pair<void* const, _debug_report_data*>, false> const*, unsigned long) const
__gnu_cxx::new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::deallocate(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const& std::forward<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>(std::remove_reference<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const&>::type&)
__gnu_cxx::new_allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>::~new_allocator()
std::__detail::_Equal_helper<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, unsigned long, true>::_S_equals(std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, unsigned long, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, true>*)
__printf_chk@@GLIBC_2.3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [193], true>(char const (&) [48], char const (&) [193])
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_erase(std::_Rb_tree_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>*)
_Znam@@GLIBCXX_3.4
layer_factory::PostCallCmdDrawIndexed(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [160], true>(char const (&) [39], char const (&) [160])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [229], true>(char const (&) [42], char const (&) [229])
std::unique_lock<std::mutex>::unlock()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [248], true>(char const (&) [64], char const (&) [248])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [180], true>(char const (&) [47], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [236], true>(char const (&) [51], char const (&) [236])
vulkan_layer_factory::CreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
layer_factory::PostCallCmdSetBlendConstants(VkCommandBuffer_T*, float const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [243], true>(char const (&) [58], char const (&) [243])
vulkan_layer_factory::CmdDrawIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::unordered_map<void*, device_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, device_layer_data*>>>::~unordered_map()
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareERKS4_@@GLIBCXX_3.4.21
vulkan_layer_factory::CreateSampler(VkDevice_T*, VkSamplerCreateInfo const*, VkAllocationCallbacks const*, VkSampler_T**)
layer_factory::PostCallCreateWaylandSurfaceKHR(VkInstance_T*, VkWaylandSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PostCallGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkSampleCountFlagBits, unsigned int, VkImageTiling, unsigned int*, VkSparseImageFormatProperties*)
vulkan_layer_factory::CmdEndQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int)
layer_factory::PostCallGetImageMemoryRequirements2(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [242], true>(char const (&) [49], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [225], true>(char const (&) [35], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [173], true>(char const (&) [43], char const (&) [173])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_@@GLIBCXX_3.4.21
layer_factory::PreCallDebugReportMessageEXT(VkInstance_T*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*)
vulkan_layer_factory::GetImageSubresourceLayout(VkDevice_T*, VkImage_T*, VkImageSubresource const*, VkSubresourceLayout*)
vulkan_layer_factory::CreateDescriptorPool(VkDevice_T*, VkDescriptorPoolCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorPool_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [174], true>(char const (&) [49], char const (&) [174])
layer_factory::PreCallGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [186], true>(char const (&) [58], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [153], true>(char const (&) [42], char const (&) [153])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [274], true>(char const (&) [44], char const (&) [274])
vulkan_layer_factory::GetPhysicalDeviceFormatProperties(VkPhysicalDevice_T*, VkFormat, VkFormatProperties*)
vulkan_layer_factory::CmdProcessCommandsNVX(VkCommandBuffer_T*, VkCmdProcessCommandsInfoNVX const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [186], true>(char const (&) [48], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [295], true>(char const (&) [51], char const (&) [295])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [395], true>(char const (&) [58], char const (&) [395])
layer_factory::PostCallDestroyFence(VkDevice_T*, VkFence_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CmdDrawIndexedIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [215], true>(char const (&) [54], char const (&) [215])
layer_factory::PreCallResetFences(VkDevice_T*, unsigned int, VkFence_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [279], true>(char const (&) [32], char const (&) [279])
layer_factory::PostCallGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [173], true>(char const (&) [54], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [203], true>(char const (&) [68], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [25], char const (&) [28], true>(char const (&) [25], char const (&) [28])
layer_factory::PostCallGetMemoryFdKHR(VkDevice_T*, VkMemoryGetFdInfoKHR const*, int*)
stdout@@GLIBC_2.2.5
std::unordered_map<void*, instance_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, instance_layer_data*>>>::~unordered_map()
vulkan_layer_factory::CmdDispatchBaseKHR(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [215], true>(char const (&) [40], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [29], char const (&) [141], true>(char const (&) [29], char const (&) [141])
vulkan_layer_factory::EnumeratePhysicalDeviceGroupsKHR(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [260], true>(char const (&) [48], char const (&) [260])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [371], true>(char const (&) [34], char const (&) [371])
layer_factory::PreCallDestroyDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
vlf_report_data
layer_factory::PreCallCmdReserveSpaceForCommandsNVX(VkCommandBuffer_T*, VkCmdReserveSpaceForCommandsInfoNVX const*)
vulkan_layer_factory::CmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer_T*, VkDescriptorUpdateTemplate_T*, VkPipelineLayout_T*, unsigned int, void const*)
layer_factory::PreCallGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
layer_factory::PostCallResetCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [228], true>(char const (&) [37], char const (&) [228])
vulkan_layer_factory::CmdDispatch(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [255], true>(char const (&) [32], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [231], true>(char const (&) [49], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [199], true>(char const (&) [64], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [440], true>(char const (&) [58], char const (&) [440])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [239], true>(char const (&) [54], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [193], true>(char const (&) [41], char const (&) [193])
guard variable for InstanceExtensions::get_info(char const*)::empty_info
vulkan_layer_factory::BindBufferMemory2(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [188], true>(char const (&) [46], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [193], true>(char const (&) [35], char const (&) [193])
layer_factory::PostCallDestroyBufferView(VkDevice_T*, VkBufferView_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [338], true>(char const (&) [47], char const (&) [338])
vulkan_layer_factory::CmdSetDeviceMask(VkCommandBuffer_T*, unsigned int)
layer_factory::PostCallGetDescriptorSetLayoutSupport(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [234], true>(char const (&) [47], char const (&) [234])
layer_factory::PostCallCmdSetCheckpointNV(VkCommandBuffer_T*, void const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [270], true>(char const (&) [42], char const (&) [270])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [186], true>(char const (&) [45], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [199], true>(char const (&) [59], char const (&) [199])
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
layer_factory::PostCallCmdResetQueryPool(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [104], char const (&) [425], true>(char const (&) [104], char const (&) [425])
std::_Hashtable<void*, std::pair<void* const, instance_layer_data*>, std::allocator<std::pair<void* const, instance_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, instance_layer_data*>, false>*)
vulkan_layer_factory::GetPhysicalDeviceFeatures2(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
layer_factory::PreCallGetImageSparseMemoryRequirements2(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [253], true>(char const (&) [33], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [186], true>(char const (&) [40], char const (&) [186])
vulkan_layer_factory::QueueInsertDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PreCallGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
layer_factory::PostCallGetShaderInfoAMD(VkDevice_T*, VkPipeline_T*, VkShaderStageFlagBits, VkShaderInfoTypeAMD, unsigned long*, void*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [251], true>(char const (&) [51], char const (&) [251])
layer_factory::PreCallGetDeviceProcAddr(VkDevice_T*, char const*)
EnvExtensions::~EnvExtensions()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [172], true>(char const (&) [53], char const (&) [172])
vulkan_layer_factory::BeginCommandBuffer(VkCommandBuffer_T*, VkCommandBufferBeginInfo const*)
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_@@GLIBCXX_3.4
_ZNSaIcED2Ev@@GLIBCXX_3.4
layer_factory::PostCallQueuePresentKHR(VkQueue_T*, VkPresentInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [224], true>(char const (&) [56], char const (&) [224])
vulkan_layer_factory::GetImageMemoryRequirements2KHR(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [408], true>(char const (&) [50], char const (&) [408])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [217], true>(char const (&) [53], char const (&) [217])
vtable for layer_factory
layer_factory::PreCallCmdDebugMarkerEndEXT(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [163], true>(char const (&) [44], char const (&) [163])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [375], true>(char const (&) [30], char const (&) [375])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [236], true>(char const (&) [38], char const (&) [236])
global_interceptor_list
vulkan_layer_factory::UnregisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectEntryTypeNVX const*, unsigned int const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::~pair()
layer_factory::PreCallGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, VkImageFormatProperties*)
EnvExtensions::~EnvExtensions()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [222], true>(char const (&) [45], char const (&) [222])
_ZSt11_Hash_bytesPKvmm@@CXXABI_1.3.5
layer_factory::PreCallGetRandROutputDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, unsigned long, VkDisplayKHR_T**)
layer_factory::PreCallDestroyPipelineCache(VkDevice_T*, VkPipelineCache_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [195], true>(char const (&) [60], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [249], true>(char const (&) [56], char const (&) [249])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [212], true>(char const (&) [55], char const (&) [212])
layer_factory::PreCallGetPhysicalDeviceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceProperties*)
vulkan_layer_factory::ImportSemaphoreFdKHR(VkDevice_T*, VkImportSemaphoreFdInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [151], true>(char const (&) [52], char const (&) [151])
layer_factory::PostCallGetDisplayModePropertiesKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModePropertiesKHR*)
DeviceExtensions::get_info(char const*)
_ZTVSt9basic_iosIcSt11char_traitsIcEE@@GLIBCXX_3.4
void FreeLayerDataPtr<device_layer_data>(void*, std::unordered_map<void*, device_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, device_layer_data*>>>&)
vulkan_layer_factory::CreateDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT_T**)
layer_factory::PreCallGetDescriptorSetLayoutSupportKHR(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
vulkan_layer_factory::GetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [143], true>(char const (&) [35], char const (&) [143])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [271], true>(char const (&) [41], char const (&) [271])
layer_factory::PostCallCmdEndConditionalRenderingEXT(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [209], true>(char const (&) [47], char const (&) [209])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [308], true>(char const (&) [42], char const (&) [308])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [410], true>(char const (&) [50], char const (&) [410])
layer_factory::PreCallDestroyPipeline(VkDevice_T*, VkPipeline_T*, VkAllocationCallbacks const*)
layer_factory::PostCallMapMemory(VkDevice_T*, VkDeviceMemory_T*, unsigned long, unsigned long, unsigned int, void**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [176], true>(char const (&) [39], char const (&) [176])
layer_factory::PreCallCreatePipelineLayout(VkDevice_T*, VkPipelineLayoutCreateInfo const*, VkAllocationCallbacks const*, VkPipelineLayout_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [423], true>(char const (&) [50], char const (&) [423])
layer_factory::PreCallCmdWaitEvents(VkCommandBuffer_T*, unsigned int, VkEvent_T* const*, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [165], true>(char const (&) [35], char const (&) [165])
layer_factory::PreCallDestroyRenderPass(VkDevice_T*, VkRenderPass_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateXlibSurfaceKHR(VkInstance_T*, VkXlibSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
vulkan_layer_factory::BindBufferMemory(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [161], true>(char const (&) [61], char const (&) [161])
layer_factory::PostCallCreateDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugUtilsMessengerEXT_T**)
layer_factory::PostCallCmdDrawIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [398], true>(char const (&) [43], char const (&) [398])
layer_factory::PostCallCmdResolveImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageResolve const*)
layer_factory::PreCallGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [232], true>(char const (&) [67], char const (&) [232])
layer_factory::PreCallGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [195], true>(char const (&) [35], char const (&) [195])
layer_factory::PostCallGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice_T*, unsigned int, VkSurfaceKHR_T*, unsigned int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [184], true>(char const (&) [62], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [165], true>(char const (&) [41], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [198], true>(char const (&) [47], char const (&) [198])
layer_factory::PostCallGetSemaphoreFdKHR(VkDevice_T*, VkSemaphoreGetFdInfoKHR const*, int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [233], true>(char const (&) [67], char const (&) [233])
vulkan_layer_factory::EnumeratePhysicalDeviceGroups(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
vulkan_layer_factory::DestroyValidationCacheEXT(VkDevice_T*, VkValidationCacheEXT_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [404], true>(char const (&) [48], char const (&) [404])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEmm@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [189], true>(char const (&) [43], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [190], true>(char const (&) [54], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [178], true>(char const (&) [41], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [249], true>(char const (&) [60], char const (&) [249])
layer_factory::PostCallCreateDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [179], true>(char const (&) [57], char const (&) [179])
layer_factory::PreCallGetEventStatus(VkDevice_T*, VkEvent_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [170], true>(char const (&) [44], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [180], true>(char const (&) [42], char const (&) [180])
layer_factory::PostCallDestroyRenderPass(VkDevice_T*, VkRenderPass_T*, VkAllocationCallbacks const*)
layer_factory::PostCallEnumeratePhysicalDeviceGroups(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
_ZNSolsEm@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [165], true>(char const (&) [48], char const (&) [165])
layer_factory::PostCallCreateFence(VkDevice_T*, VkFenceCreateInfo const*, VkAllocationCallbacks const*, VkFence_T**)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [306], true>(char const (&) [49], char const (&) [306])
vulkan_layer_factory::DestroyFramebuffer(VkDevice_T*, VkFramebuffer_T*, VkAllocationCallbacks const*)
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [213], true>(char const (&) [39], char const (&) [213])
_edata
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [183], true>(char const (&) [58], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::pair<char const*, InstanceExtensions::InstanceInfo, true>(std::pair<char const*, InstanceExtensions::InstanceInfo>&&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [339], true>(char const (&) [46], char const (&) [339])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEmPKc@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [154], true>(char const (&) [36], char const (&) [154])
_ZNSt14basic_ifstreamIcSt11char_traitsIcEED1Ev@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [443], true>(char const (&) [40], char const (&) [443])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [321], true>(char const (&) [56], char const (&) [321])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [204], true>(char const (&) [39], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [189], true>(char const (&) [64], char const (&) [189])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [196], true>(char const (&) [42], char const (&) [196])
layer_factory::PreCallCmdBeginRenderPass(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassContents)
layer_factory::PostCallBindBufferMemory2KHR(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
layer_factory::PreCallCreateBufferView(VkDevice_T*, VkBufferViewCreateInfo const*, VkAllocationCallbacks const*, VkBufferView_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [219], true>(char const (&) [41], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [207], true>(char const (&) [52], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [267], true>(char const (&) [36], char const (&) [267])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [238], true>(char const (&) [57], char const (&) [238])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [217], true>(char const (&) [35], char const (&) [217])
layer_factory::PostCallQueueEndDebugUtilsLabelEXT(VkQueue_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [199], true>(char const (&) [50], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [210], true>(char const (&) [56], char const (&) [210])
layer_factory::PreCallFreeMemory(VkDevice_T*, VkDeviceMemory_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateSamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
layer_factory::PreCallGetImageMemoryRequirements2KHR(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [182], true>(char const (&) [49], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [145], true>(char const (&) [49], char const (&) [145])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [248], true>(char const (&) [33], char const (&) [248])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [211], true>(char const (&) [44], char const (&) [211])
std::vector<layer_factory*, std::allocator<layer_factory*>>::~vector()
vulkan_layer_factory::CmdDispatchBase(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [268], true>(char const (&) [42], char const (&) [268])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [178], true>(char const (&) [53], char const (&) [178])
layer_factory::PostCallQueueBeginDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [188], true>(char const (&) [43], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [193], true>(char const (&) [47], char const (&) [193])
layer_factory::PostCallCmdDraw(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int)
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::~set()
vulkan_layer_factory::CreateBufferView(VkDevice_T*, VkBufferViewCreateInfo const*, VkAllocationCallbacks const*, VkBufferView_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [181], true>(char const (&) [35], char const (&) [181])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [264], true>(char const (&) [41], char const (&) [264])
vulkan_layer_factory::GetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
layer_factory::PreCallCreateWaylandSurfaceKHR(VkInstance_T*, VkWaylandSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
_ZNSi7getlineEPcl@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [160], true>(char const (&) [43], char const (&) [160])
layer_factory::PreCallQueueSubmit(VkQueue_T*, unsigned int, VkSubmitInfo const*, VkFence_T*)
layer_factory::PostCallDebugMarkerSetObjectNameEXT(VkDevice_T*, VkDebugMarkerObjectNameInfoEXT const*)
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, InstanceExtensions::InstanceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>>::~unordered_map()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [220], true>(char const (&) [61], char const (&) [220])
_ZNSt8ios_baseC2Ev@@GLIBCXX_3.4
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_@@GLIBCXX_3.4.21
layer_factory::PostCallGetPhysicalDeviceFormatProperties2(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [165], true>(char const (&) [58], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [192], true>(char const (&) [35], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [154], true>(char const (&) [30], char const (&) [154])
layer_factory::PreCallGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
vulkan_layer_factory::GetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice_T*, unsigned int, unsigned int*, VkDisplayKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [269], true>(char const (&) [41], char const (&) [269])
vulkan_layer_factory::CreateComputePipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkComputePipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
vulkan_layer_factory::BindBufferMemory2KHR(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
layer_factory::PreCallGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice_T*, unsigned int, VkSurfaceKHR_T*, unsigned int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [256], true>(char const (&) [60], char const (&) [256])
layer_factory::PreCallGetQueryPoolResults(VkDevice_T*, VkQueryPool_T*, unsigned int, unsigned int, unsigned long, void*, unsigned long, unsigned int)
layer_factory::PreCallGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkSampleCountFlagBits, unsigned int, VkImageTiling, unsigned int*, VkSparseImageFormatProperties*)
vulkan_layer_factory::GetFenceStatus(VkDevice_T*, VkFence_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [174], true>(char const (&) [55], char const (&) [174])
layer_factory::PostCallGetPipelineCacheData(VkDevice_T*, VkPipelineCache_T*, unsigned long*, void*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [288], true>(char const (&) [49], char const (&) [288])
vulkan_layer_factory::FreeDescriptorSets(VkDevice_T*, VkDescriptorPool_T*, unsigned int, VkDescriptorSet_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [195], true>(char const (&) [62], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [159], true>(char const (&) [40], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [189], true>(char const (&) [46], char const (&) [189])
layer_factory::PreCallGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlanePropertiesKHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [221], true>(char const (&) [57], char const (&) [221])
layer_factory::PostCallCmdDispatchIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [215], true>(char const (&) [52], char const (&) [215])
layer_factory::PreCallGetRefreshCycleDurationGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, VkRefreshCycleDurationGOOGLE*)
layer_factory::PostCallGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PostCallCmdCopyQueryPoolResults(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@@GLIBCXX_3.4.21
layer_factory::PostCallGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice_T*, VkDisplayModeKHR_T*, unsigned int, VkDisplayPlaneCapabilitiesKHR*)
layer_factory::PostCallGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [195], true>(char const (&) [49], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [139], true>(char const (&) [40], char const (&) [139])
layer_factory::PreCallCmdResolveImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageResolve const*)
EnvExtensions::PostCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
layer_factory::PreCallCmdEndRenderPass(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [306], true>(char const (&) [34], char const (&) [306])
layer_factory::PreCallDestroyQueryPool(VkDevice_T*, VkQueryPool_T*, VkAllocationCallbacks const*)
layer_factory::PreCallFreeCommandBuffers(VkDevice_T*, VkCommandPool_T*, unsigned int, VkCommandBuffer_T* const*)
vulkan_layer_factory::CmdWriteTimestamp(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkQueryPool_T*, unsigned int)
vulkan_layer_factory::DestroyBufferView(VkDevice_T*, VkBufferView_T*, VkAllocationCallbacks const*)
layer_factory::PreCallDestroyImage(VkDevice_T*, VkImage_T*, VkAllocationCallbacks const*)
layer_factory::PreCallBindImageMemory2KHR(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
layer_factory::PreCallAllocateMemory(VkDevice_T*, VkMemoryAllocateInfo const*, VkAllocationCallbacks const*, VkDeviceMemory_T**)
DeviceExtensions::DeviceInfo::~DeviceInfo()
layer_factory::PreCallAllocateCommandBuffers(VkDevice_T*, VkCommandBufferAllocateInfo const*, VkCommandBuffer_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [147], true>(char const (&) [48], char const (&) [147])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [81], char const (&) [244], true>(char const (&) [81], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [436], true>(char const (&) [49], char const (&) [436])
vulkan_layer_factory::GetPhysicalDeviceMemoryProperties(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [239], true>(char const (&) [41], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::~pair()
_ZNSt8ios_baseD2Ev@@GLIBCXX_3.4
vulkan_layer_factory::GetPhysicalDeviceMemoryProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
vulkan_layer_factory::GetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, _XDisplay*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [191], true>(char const (&) [40], char const (&) [191])
vulkan_layer_factory::QueuePresentKHR(VkQueue_T*, VkPresentInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [172], true>(char const (&) [46], char const (&) [172])
_ZNSolsEPFRSt8ios_baseS0_E@@GLIBCXX_3.4
layer_factory::PostCallDestroyShaderModule(VkDevice_T*, VkShaderModule_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateFramebuffer(VkDevice_T*, VkFramebufferCreateInfo const*, VkAllocationCallbacks const*, VkFramebuffer_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [75], char const (&) [210], true>(char const (&) [75], char const (&) [210])
layer_factory::PostCallCreateSamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [173], true>(char const (&) [48], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [415], true>(char const (&) [36], char const (&) [415])
layer_factory::PostCallGetQueueCheckpointDataNV(VkQueue_T*, unsigned int*, VkCheckpointDataNV*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [185], true>(char const (&) [52], char const (&) [185])
_ZTTNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE@@GLIBCXX_3.4.21
layer_factory::PreCallImportFenceFdKHR(VkDevice_T*, VkImportFenceFdInfoKHR const*)
vulkan_layer_factory::CmdResetQueryPool(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [216], true>(char const (&) [49], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [283], true>(char const (&) [49], char const (&) [283])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [338], true>(char const (&) [41], char const (&) [338])
void FreeLayerDataPtr<instance_layer_data>(void*, std::unordered_map<void*, instance_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, instance_layer_data*>>>&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [223], true>(char const (&) [44], char const (&) [223])
layer_factory::PreCallCmdSetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
_ZSt17__throw_bad_allocv@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [344], true>(char const (&) [47], char const (&) [344])
layer_factory::PostCallCreateDisplayPlaneSurfaceKHR(VkInstance_T*, VkDisplaySurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [157], true>(char const (&) [61], char const (&) [157])
layer_factory::PostCallGetDescriptorSetLayoutSupportKHR(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
layer_factory::PreCallGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice_T*, unsigned int, unsigned int*, VkDisplayKHR_T**)
layer_factory::PostCallCreateObjectTableNVX(VkDevice_T*, VkObjectTableCreateInfoNVX const*, VkAllocationCallbacks const*, VkObjectTableNVX_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [218], true>(char const (&) [36], char const (&) [218])
strchr@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [383], true>(char const (&) [38], char const (&) [383])
layer_factory::PreCallCreateBuffer(VkDevice_T*, VkBufferCreateInfo const*, VkAllocationCallbacks const*, VkBuffer_T**)
layer_factory::PreCallCreateDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT_T**)
layer_factory::PreCallGetShaderInfoAMD(VkDevice_T*, VkPipeline_T*, VkShaderStageFlagBits, VkShaderInfoTypeAMD, unsigned long*, void*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [373], true>(char const (&) [47], char const (&) [373])
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, DeviceExtensions::DeviceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>>::~unordered_map()
vulkan_layer_factory::DestroyObjectTableNVX(VkDevice_T*, VkObjectTableNVX_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateObjectTableNVX(VkDevice_T*, VkObjectTableCreateInfoNVX const*, VkAllocationCallbacks const*, VkObjectTableNVX_T**)
layer_factory::PreCallCmdEndConditionalRenderingEXT(VkCommandBuffer_T*)
guard variable for DeviceExtensions::get_info(char const*)::info_map[abi:cxx11]
vulkan_layer_factory::CmdSetLineWidth(VkCommandBuffer_T*, float)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [234], true>(char const (&) [53], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [179], true>(char const (&) [51], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [228], true>(char const (&) [40], char const (&) [228])
vulkan_layer_factory::QueueBindSparse(VkQueue_T*, unsigned int, VkBindSparseInfo const*, VkFence_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [158], true>(char const (&) [44], char const (&) [158])
layer_factory::PostCallWaitForFences(VkDevice_T*, unsigned int, VkFence_T* const*, unsigned int, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [213], true>(char const (&) [51], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [189], true>(char const (&) [57], char const (&) [189])
vulkan_layer_factory::GetMemoryFdKHR(VkDevice_T*, VkMemoryGetFdInfoKHR const*, int*)
layer_factory::PostCallDeviceWaitIdle(VkDevice_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [167], true>(char const (&) [50], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [255], true>(char const (&) [52], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [236], true>(char const (&) [49], char const (&) [236])
layer_factory::PostCallAcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)
layer_factory::PreCallGetPhysicalDeviceFormatProperties(VkPhysicalDevice_T*, VkFormat, VkFormatProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [172], true>(char const (&) [38], char const (&) [172])
layer_factory::PostCallCmdEndRenderPass(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [313], true>(char const (&) [48], char const (&) [313])
vulkan_layer_factory::CmdBeginRenderPass(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassContents)
vulkan_layer_factory::GetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
layer_factory::PostCallCreateIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutCreateInfoNVX const*, VkAllocationCallbacks const*, VkIndirectCommandsLayoutNVX_T**)
vulkan_layer_factory::DestroyPipeline(VkDevice_T*, VkPipeline_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [227], true>(char const (&) [35], char const (&) [227])
layer_factory::PreCallCmdEndRenderPass2KHR(VkCommandBuffer_T*, VkSubpassEndInfoKHR const*)
layer_factory::PostCallSetEvent(VkDevice_T*, VkEvent_T*)
layer_factory::PreCallGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [293], true>(char const (&) [58], char const (&) [293])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [21], char const (&) [20], true>(char const (&) [21], char const (&) [20])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [215], true>(char const (&) [51], char const (&) [215])
__cxa_begin_catch@@CXXABI_1.3
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [199], true>(char const (&) [67], char const (&) [199])
vulkan_layer_factory::DebugMarkerSetObjectNameEXT(VkDevice_T*, VkDebugMarkerObjectNameInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [355], true>(char const (&) [32], char const (&) [355])
layer_factory::PostCallCmdDispatch(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int)
layer_factory::PostCallEnumeratePhysicalDevices(VkInstance_T*, unsigned int*, VkPhysicalDevice_T**)
vulkan_layer_factory::CmdDebugMarkerEndEXT(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [295], true>(char const (&) [59], char const (&) [295])
layer_factory::PreCallRegisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectTableEntryNVX const* const*, unsigned int const*)
layer_factory::PostCallCmdCopyImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageCopy const*)
InstanceExtensions::get_info(char const*)::empty_info
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [217], true>(char const (&) [48], char const (&) [217])
layer_factory::PostCallGetDeviceProcAddr(VkDevice_T*, char const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [235], true>(char const (&) [52], char const (&) [235])
vulkan_layer_factory::CmdSetStencilWriteMask(VkCommandBuffer_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [188], true>(char const (&) [64], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [196], true>(char const (&) [47], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [308], true>(char const (&) [41], char const (&) [308])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [205], true>(char const (&) [34], char const (&) [205])
layer_factory::PreCallDestroyObjectTableNVX(VkDevice_T*, VkObjectTableNVX_T*, VkAllocationCallbacks const*)
layer_factory::PostCallCmdUpdateBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, void const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [308], true>(char const (&) [40], char const (&) [308])
layer_factory::PreCallGetDeviceGroupSurfacePresentModesKHR(VkDevice_T*, VkSurfaceKHR_T*, unsigned int*)
layer_factory::PostCallBeginCommandBuffer(VkCommandBuffer_T*, VkCommandBufferBeginInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [178], true>(char const (&) [50], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [189], true>(char const (&) [47], char const (&) [189])
vk_layerGetPhysicalDeviceProcAddr(VkInstance_T*, char const*)
__cxa_finalize@@GLIBC_2.2.5
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [234], true>(char const (&) [49], char const (&) [234])
std::_Hashtable<void*, std::pair<void* const, device_layer_data*>, std::allocator<std::pair<void* const, device_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_insert_unique_node(unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<void* const, device_layer_data*>, false>*)
layer_factory::PostCallInvalidateMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
strlen@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [184], true>(char const (&) [60], char const (&) [184])
layer_factory::PreCallCmdDrawIndexedIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [211], true>(char const (&) [37], char const (&) [211])
memcmp@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [315], true>(char const (&) [49], char const (&) [315])
layer_factory::PreCallGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PostCallCmdSetDeviceMask(VkCommandBuffer_T*, unsigned int)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&)
layer_factory::PostCallDestroyImageView(VkDevice_T*, VkImageView_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayout_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [309], true>(char const (&) [42], char const (&) [309])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [314], true>(char const (&) [41], char const (&) [314])
layer_factory::PreCallCmdBindVertexBuffers(VkCommandBuffer_T*, unsigned int, unsigned int, VkBuffer_T* const*, unsigned long const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [173], true>(char const (&) [51], char const (&) [173])
layer_factory::PreCallGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilities2EXT*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [307], true>(char const (&) [58], char const (&) [307])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [222], true>(char const (&) [35], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [162], true>(char const (&) [57], char const (&) [162])
vulkan_layer_factory::CmdWriteBufferMarkerAMD(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkBuffer_T*, unsigned long, unsigned int)
layer_factory::PostCallEnumeratePhysicalDeviceGroupsKHR(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
vulkan_layer_factory::GetDeviceGroupPeerMemoryFeaturesKHR(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
vulkan_layer_factory::CmdDrawIndexed(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [223], true>(char const (&) [53], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [195], true>(char const (&) [39], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [192], true>(char const (&) [54], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [186], true>(char const (&) [53], char const (&) [186])
layer_factory::PostCallGetEventStatus(VkDevice_T*, VkEvent_T*)
layer_factory::PostCallFreeMemory(VkDevice_T*, VkDeviceMemory_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetPipelineCacheData(VkDevice_T*, VkPipelineCache_T*, unsigned long*, void*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [403], true>(char const (&) [47], char const (&) [403])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [316], true>(char const (&) [48], char const (&) [316])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [23], char const (&) [26], true>(char const (&) [23], char const (&) [26])
layer_factory::PreCallGetQueueCheckpointDataNV(VkQueue_T*, unsigned int*, VkCheckpointDataNV*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [333], true>(char const (&) [35], char const (&) [333])
vulkan_layer_factory::AcquireNextImage2KHR(VkDevice_T*, VkAcquireNextImageInfoKHR const*, unsigned int*)
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_@@GLIBCXX_3.4
vulkan_layer_factory::CmdBeginDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [233], true>(char const (&) [50], char const (&) [233])
vulkan_layer_factory::DestroyIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutNVX_T*, VkAllocationCallbacks const*)
layer_factory::PostCallGetDeviceMemoryCommitment(VkDevice_T*, VkDeviceMemory_T*, unsigned long*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [224], true>(char const (&) [36], char const (&) [224])
layer_factory::PreCallEnumerateInstanceLayerProperties(unsigned int*, VkLayerProperties*)
layer_factory::PreCallGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, wl_display*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [196], true>(char const (&) [49], char const (&) [196])
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, void*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>>::~unordered_map()
layer_factory::PostCallGetBufferMemoryRequirements2(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::~pair()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [300], true>(char const (&) [34], char const (&) [300])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [213], true>(char const (&) [59], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [137], true>(char const (&) [38], char const (&) [137])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [177], true>(char const (&) [55], char const (&) [177])
layer_factory::PreCallDestroySurfaceKHR(VkInstance_T*, VkSurfaceKHR_T*, VkAllocationCallbacks const*)
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::initializer_list<InstanceExtensions::InstanceReq>, std::allocator<InstanceExtensions::InstanceReq> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [229], true>(char const (&) [43], char const (&) [229])
vulkan_layer_factory::CreateImageView(VkDevice_T*, VkImageViewCreateInfo const*, VkAllocationCallbacks const*, VkImageView_T**)
layer_factory::PreCallCmdClearAttachments(VkCommandBuffer_T*, unsigned int, VkClearAttachment const*, unsigned int, VkClearRect const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [156], true>(char const (&) [37], char const (&) [156])
vulkan_layer_factory::CreateValidationCacheEXT(VkDevice_T*, VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT_T**)
layer_factory::PostCallCreateXcbSurfaceKHR(VkInstance_T*, VkXcbSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [146], true>(char const (&) [46], char const (&) [146])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [190], true>(char const (&) [47], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [174], true>(char const (&) [46], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [167], true>(char const (&) [48], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [225], true>(char const (&) [62], char const (&) [225])
layer_factory::PostCallCmdEndDebugUtilsLabelEXT(VkCommandBuffer_T*)
vulkan_layer_factory::CmdBlitImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageBlit const*, VkFilter)
layer_factory::PreCallCmdDispatch(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [109], char const (&) [441], true>(char const (&) [109], char const (&) [441])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [170], true>(char const (&) [42], char const (&) [170])
layer_factory::PreCallGetPhysicalDeviceFormatProperties2(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
layer_factory::PreCallGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPropertiesKHR*)
layer_factory::PostCallCmdDispatchBaseKHR(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PreCallCreateValidationCacheEXT(VkDevice_T*, VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [225], true>(char const (&) [42], char const (&) [225])
std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>>::vector(std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [202], true>(char const (&) [67], char const (&) [202])
layer_factory::PreCallGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, _XDisplay*, unsigned long)
layer_factory::PostCallGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkSurfaceFormatKHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [171], true>(char const (&) [48], char const (&) [171])
vulkan_layer_factory::GetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, unsigned int*, VkSurfaceFormat2KHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [27], true>(char const (&) [33], char const (&) [27])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [241], true>(char const (&) [60], char const (&) [241])
typeinfo name for EnvExtensions
layer_factory::PostCallCreateDisplayModeKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, VkDisplayModeCreateInfoKHR const*, VkAllocationCallbacks const*, VkDisplayModeKHR_T**)
layer_factory::PostCallTrimCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [418], true>(char const (&) [39], char const (&) [418])
vulkan_layer_factory::CmdUpdateBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, void const*)
vulkan_layer_factory::CmdEndDebugUtilsLabelEXT(VkCommandBuffer_T*)
_ZSt20__throw_length_errorPKc@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [171], true>(char const (&) [42], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [329], true>(char const (&) [49], char const (&) [329])
vulkan_layer_factory::GetMemoryFdPropertiesKHR(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*)
layer_factory::PreCallDebugMarkerSetObjectNameEXT(VkDevice_T*, VkDebugMarkerObjectNameInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [220], true>(char const (&) [53], char const (&) [220])
DeviceExtensions::InitFromDeviceCreateInfo(InstanceExtensions const*, unsigned int, VkDeviceCreateInfo const*)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [231], true>(char const (&) [46], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [229], true>(char const (&) [47], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [206], true>(char const (&) [43], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [77], char const (&) [212], true>(char const (&) [77], char const (&) [212])
layer_factory::PreCallCreateXcbSurfaceKHR(VkInstance_T*, VkXcbSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [177], true>(char const (&) [58], char const (&) [177])
vulkan_layer_factory::DestroyCommandPool(VkDevice_T*, VkCommandPool_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [223], true>(char const (&) [41], char const (&) [223])
vulkan_layer_factory::DestroyFence(VkDevice_T*, VkFence_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [198], true>(char const (&) [46], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [143], true>(char const (&) [44], char const (&) [143])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [205], true>(char const (&) [55], char const (&) [205])
memset@@GLIBC_2.2.5
layer_factory::PostCallMergeValidationCachesEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned int, VkValidationCacheEXT_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [311], true>(char const (&) [32], char const (&) [311])
layer_factory::PreCallGetSwapchainImagesKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkImage_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [169], true>(char const (&) [44], char const (&) [169])
vulkan_layer_factory::CreateShaderModule(VkDevice_T*, VkShaderModuleCreateInfo const*, VkAllocationCallbacks const*, VkShaderModule_T**)
EnvExtensions::PreCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [269], true>(char const (&) [68], char const (&) [269])
vulkan_layer_factory::GetDescriptorSetLayoutSupportKHR(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
layer_factory::PostCallEndCommandBuffer(VkCommandBuffer_T*)
vulkan_layer_factory::GetDeviceGroupPresentCapabilitiesKHR(VkDevice_T*, VkDeviceGroupPresentCapabilitiesKHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [187], true>(char const (&) [63], char const (&) [187])
layer_factory::PostCallGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [250], true>(char const (&) [48], char const (&) [250])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [180], true>(char const (&) [61], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [232], true>(char const (&) [47], char const (&) [232])
layer_factory::PreCallDestroyImageView(VkDevice_T*, VkImageView_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice_T*, VkDisplayModeKHR_T*, unsigned int, VkDisplayPlaneCapabilitiesKHR*)
layer_factory::PreCallGetFenceFdKHR(VkDevice_T*, VkFenceGetFdInfoKHR const*, int*)
layer_factory::PreCallGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [255], true>(char const (&) [59], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [216], true>(char const (&) [41], char const (&) [216])
vkEnumerateDeviceLayerProperties
vulkan_layer_factory::GetPhysicalDeviceFeatures(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [77], char const (&) [360], true>(char const (&) [77], char const (&) [360])
layer_factory::PostCallCreateXlibSurfaceKHR(VkInstance_T*, VkXlibSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
vulkan_layer_factory::CmdDispatchIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [180], true>(char const (&) [46], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [175], true>(char const (&) [40], char const (&) [175])
layer_factory::PostCallGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [146], true>(char const (&) [50], char const (&) [146])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [247], true>(char const (&) [53], char const (&) [247])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [232], true>(char const (&) [51], char const (&) [232])
vulkan_layer_factory::CmdExecuteCommands(VkCommandBuffer_T*, unsigned int, VkCommandBuffer_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [156], true>(char const (&) [39], char const (&) [156])
layer_factory::PreCallCreatePipelineCache(VkDevice_T*, VkPipelineCacheCreateInfo const*, VkAllocationCallbacks const*, VkPipelineCache_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [516], true>(char const (&) [53], char const (&) [516])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [158], true>(char const (&) [62], char const (&) [158])
layer_factory::PostCallBindImageMemory2(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [220], true>(char const (&) [44], char const (&) [220])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [229], true>(char const (&) [50], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [204], true>(char const (&) [43], char const (&) [204])
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [254], true>(char const (&) [50], char const (&) [254])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [162], true>(char const (&) [55], char const (&) [162])
layer_factory::PreCallDestroySamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PostCallGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, _XDisplay*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [160], true>(char const (&) [60], char const (&) [160])
vulkan_layer_factory::GetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
layer_factory::PostCallDestroyBuffer(VkDevice_T*, VkBuffer_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [241], true>(char const (&) [50], char const (&) [241])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [142], true>(char const (&) [46], char const (&) [142])
layer_factory::PreCallCreateIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutCreateInfoNVX const*, VkAllocationCallbacks const*, VkIndirectCommandsLayoutNVX_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [367], true>(char const (&) [32], char const (&) [367])
layer_factory::PostCallGetRandROutputDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, unsigned long, VkDisplayKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [199], true>(char const (&) [37], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [207], true>(char const (&) [71], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [332], true>(char const (&) [55], char const (&) [332])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [154], true>(char const (&) [37], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [200], true>(char const (&) [51], char const (&) [200])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [242], true>(char const (&) [35], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [301], true>(char const (&) [34], char const (&) [301])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [211], true>(char const (&) [56], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [212], true>(char const (&) [41], char const (&) [212])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [191], true>(char const (&) [45], char const (&) [191])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [159], true>(char const (&) [42], char const (&) [159])
layer_factory::PreCallGetImageSparseMemoryRequirements(VkDevice_T*, VkImage_T*, unsigned int*, VkSparseImageMemoryRequirements*)
layer_factory::PreCallCmdResetQueryPool(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
layer_factory::PreCallCmdSetStencilCompareMask(VkCommandBuffer_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [251], true>(char const (&) [46], char const (&) [251])
layer_factory::PreCallImportSemaphoreFdKHR(VkDevice_T*, VkImportSemaphoreFdInfoKHR const*)
layer_factory::PreCallCreateDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [183], true>(char const (&) [44], char const (&) [183])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@@GLIBCXX_3.4.21
vkGetDeviceProcAddr
layer_factory::PostCallCmdSetDeviceMaskKHR(VkCommandBuffer_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [196], true>(char const (&) [41], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [236], true>(char const (&) [54], char const (&) [236])
vsnprintf@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [511], true>(char const (&) [49], char const (&) [511])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [170], true>(char const (&) [46], char const (&) [170])
_ZNSt14basic_ifstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode@@GLIBCXX_3.4
vulkan_layer_factory::CmdSetViewport(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewport const*)
vulkan_layer_factory::DestroyDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetDisplayPlaneCapabilities2KHR(VkPhysicalDevice_T*, VkDisplayPlaneInfo2KHR const*, VkDisplayPlaneCapabilities2KHR*)
__cxa_guard_abort@@CXXABI_1.3
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [240], true>(char const (&) [48], char const (&) [240])
vulkan_layer_factory::CreateRenderPass2KHR(VkDevice_T*, VkRenderPassCreateInfo2KHR const*, VkAllocationCallbacks const*, VkRenderPass_T**)
layer_factory::PreCallDestroyCommandPool(VkDevice_T*, VkCommandPool_T*, VkAllocationCallbacks const*)
layer_factory::PostCallDestroyDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerEXT_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [230], true>(char const (&) [46], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [275], true>(char const (&) [51], char const (&) [275])
layer_factory::PreCallCmdDrawIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [235], true>(char const (&) [50], char const (&) [235])
layer_factory::PostCallGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlanePropertiesKHR*)
_ZTVSt15basic_streambufIcSt11char_traitsIcEE@@GLIBCXX_3.4
layer_factory::PostCallGetDeviceQueue(VkDevice_T*, unsigned int, unsigned int, VkQueue_T**)
__cxa_guard_release@@CXXABI_1.3
vulkan_layer_factory::GetDescriptorSetLayoutSupport(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [253], true>(char const (&) [46], char const (&) [253])
layer_factory::PreCallCmdCopyImageToBuffer(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkBuffer_T*, unsigned int, VkBufferImageCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [277], true>(char const (&) [55], char const (&) [277])
layer_factory::PostCallGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPropertiesKHR*)
__assert_fail@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [197], true>(char const (&) [54], char const (&) [197])
layer_factory::PreCallCmdBindDescriptorSets(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkDescriptorSet_T* const*, unsigned int, unsigned int const*)
layer_factory::PreCallCmdDrawIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::CmdSetViewportWScalingNV(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewportWScalingNV const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [141], true>(char const (&) [45], char const (&) [141])
vulkan_layer_factory::CmdCopyBuffer(VkCommandBuffer_T*, VkBuffer_T*, VkBuffer_T*, unsigned int, VkBufferCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [330], true>(char const (&) [40], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [166], true>(char const (&) [47], char const (&) [166])
vulkan_layer_factory::WaitForFences(VkDevice_T*, unsigned int, VkFence_T* const*, unsigned int, unsigned long)
calloc@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [28], char const (&) [24], true>(char const (&) [28], char const (&) [24])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [221], true>(char const (&) [52], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [376], true>(char const (&) [51], char const (&) [376])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [177], true>(char const (&) [47], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [218], true>(char const (&) [46], char const (&) [218])
_ZSt20__throw_system_errori@@GLIBCXX_3.4.11
layer_factory::PostCallCmdDebugMarkerBeginEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [605], true>(char const (&) [46], char const (&) [605])
layer_factory::PreCallGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilitiesKHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [204], true>(char const (&) [53], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [192], true>(char const (&) [57], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [142], true>(char const (&) [43], char const (&) [142])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [214], true>(char const (&) [48], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [191], true>(char const (&) [44], char const (&) [191])
vulkan_layer_factory::CreateSemaphore(VkDevice_T*, VkSemaphoreCreateInfo const*, VkAllocationCallbacks const*, VkSemaphore_T**)
layer_factory::PreCallGetImageMemoryRequirements(VkDevice_T*, VkImage_T*, VkMemoryRequirements*)
layer_factory::PostCallCmdReserveSpaceForCommandsNVX(VkCommandBuffer_T*, VkCmdReserveSpaceForCommandsInfoNVX const*)
_ZNSo9_M_insertImEERSoT_@@GLIBCXX_3.4.9
layer_factory::PreCallGetDeviceQueue2(VkDevice_T*, VkDeviceQueueInfo2 const*, VkQueue_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [228], true>(char const (&) [43], char const (&) [228])
layer_factory::PreCallCmdDrawIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::GetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [201], true>(char const (&) [40], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [275], true>(char const (&) [43], char const (&) [275])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [186], true>(char const (&) [61], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [159], true>(char const (&) [36], char const (&) [159])
std::_Hashtable<void*, std::pair<void* const, device_layer_data*>, std::allocator<std::pair<void* const, device_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [219], true>(char const (&) [54], char const (&) [219])
vulkan_layer_factory::GetDisplayModePropertiesKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModePropertiesKHR*)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>> const&)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEm@@GLIBCXX_3.4.21
layer_factory::PostCallGetImageMemoryRequirements2KHR(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base@@GLIBCXX_3.4
layer_factory::PreCallCreateComputePipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkComputePipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv@@GLIBCXX_3.4.21
vulkan_layer_factory::GetMemoryHostPointerPropertiesEXT(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, void const*, VkMemoryHostPointerPropertiesEXT*)
vulkan_layer_factory::CmdDrawIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [208], true>(char const (&) [39], char const (&) [208])
_ZTVN10__cxxabiv117__class_type_infoE@@CXXABI_1.3
layer_factory::PostCallCreateCommandPool(VkDevice_T*, VkCommandPoolCreateInfo const*, VkAllocationCallbacks const*, VkCommandPool_T**)
layer_factory::PostCallCmdPipelineBarrier(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEm@@GLIBCXX_3.4.18
layer_factory::PreCallCmdSetDeviceMaskKHR(VkCommandBuffer_T*, unsigned int)
_ZSt19__throw_logic_errorPKc@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [169], true>(char const (&) [46], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [73], char const (&) [296], true>(char const (&) [73], char const (&) [296])
layer_factory::PostCallCreateFramebuffer(VkDevice_T*, VkFramebufferCreateInfo const*, VkAllocationCallbacks const*, VkFramebuffer_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [249], true>(char const (&) [47], char const (&) [249])
sscanf@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [164], true>(char const (&) [39], char const (&) [164])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [242], true>(char const (&) [71], char const (&) [242])
layer_factory::PostCallCmdClearAttachments(VkCommandBuffer_T*, unsigned int, VkClearAttachment const*, unsigned int, VkClearRect const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [259], true>(char const (&) [33], char const (&) [259])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [171], true>(char const (&) [38], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [225], true>(char const (&) [40], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [195], true>(char const (&) [38], char const (&) [195])
_fini
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [179], true>(char const (&) [33], char const (&) [179])
layer_factory::PreCallCreateDisplayPlaneSurfaceKHR(VkInstance_T*, VkDisplaySurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PreCallCmdClearDepthStencilImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearDepthStencilValue const*, unsigned int, VkImageSubresourceRange const*)
layer_factory::PreCallCmdInsertDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallCmdBindVertexBuffers(VkCommandBuffer_T*, unsigned int, unsigned int, VkBuffer_T* const*, unsigned long const*)
layer_factory::PreCallGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
layer_factory::PreCallCmdBindIndexBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkIndexType)
vkNegotiateLoaderLayerInterfaceVersion
layer_factory::PreCallBindImageMemory2(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [229], true>(char const (&) [38], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [183], true>(char const (&) [45], char const (&) [183])
layer_factory::PreCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
layer_factory::PostCallCreateRenderPass2KHR(VkDevice_T*, VkRenderPassCreateInfo2KHR const*, VkAllocationCallbacks const*, VkRenderPass_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [230], true>(char const (&) [32], char const (&) [230])
layer_factory::PostCallGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, wl_display*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [443], true>(char const (&) [39], char const (&) [443])
layer_factory::PostCallCreateBuffer(VkDevice_T*, VkBufferCreateInfo const*, VkAllocationCallbacks const*, VkBuffer_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [207], true>(char const (&) [44], char const (&) [207])
vulkan_layer_factory::DestroyDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
layer_factory::PostCallCmdSetScissor(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
layer_factory::PreCallDestroyFence(VkDevice_T*, VkFence_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [224], true>(char const (&) [63], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [391], true>(char const (&) [38], char const (&) [391])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [167], true>(char const (&) [42], char const (&) [167])
_ZNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEED1Ev@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [243], true>(char const (&) [60], char const (&) [243])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [246], true>(char const (&) [61], char const (&) [246])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [170], true>(char const (&) [47], char const (&) [170])
layer_factory::PreCallGetImageSparseMemoryRequirements2KHR(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
pthread_mutex_unlock@@GLIBC_2.2.5
layer_factory::PreCallBindBufferMemory(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned long)
layer_factory::PreCallRegisterDeviceEventEXT(VkDevice_T*, VkDeviceEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [312], true>(char const (&) [44], char const (&) [312])
vulkan_layer_factory::GetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkSurfaceFormatKHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [228], true>(char const (&) [64], char const (&) [228])
layer_factory::PreCallGetDescriptorSetLayoutSupport(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [23], char const (&) [20], true>(char const (&) [23], char const (&) [20])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [223], true>(char const (&) [38], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [222], true>(char const (&) [53], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [155], true>(char const (&) [44], char const (&) [155])
layer_factory::PostCallGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, unsigned int*, VkSurfaceFormat2KHR*)
layer_factory::PostCallDestroySemaphore(VkDevice_T*, VkSemaphore_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [244], true>(char const (&) [48], char const (&) [244])
layer_factory::PreCallGetPhysicalDeviceFeatures2(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [175], true>(char const (&) [43], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [317], true>(char const (&) [57], char const (&) [317])
vulkan_layer_factory::CmdSetDepthBounds(VkCommandBuffer_T*, float, float)
std::_Hashtable<void*, std::pair<void* const, instance_layer_data*>, std::allocator<std::pair<void* const, instance_layer_data*>>, std::__detail::_Select1st, std::equal_to<void*>, std::hash<void*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [79], char const (&) [245], true>(char const (&) [79], char const (&) [245])
typeinfo for layer_factory
vulkan_layer_factory::GetRenderAreaGranularity(VkDevice_T*, VkRenderPass_T*, VkExtent2D*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [209], true>(char const (&) [55], char const (&) [209])
vulkan_layer_factory::CreateXlibSurfaceKHR(VkInstance_T*, VkXlibSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PreCallDestroySampler(VkDevice_T*, VkSampler_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayProperties2KHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [276], true>(char const (&) [44], char const (&) [276])
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>> const&)
layer_factory::PostCallImportSemaphoreFdKHR(VkDevice_T*, VkImportSemaphoreFdInfoKHR const*)
vulkan_layer_factory::DestroySemaphore(VkDevice_T*, VkSemaphore_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [154], true>(char const (&) [35], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [451], true>(char const (&) [66], char const (&) [451])
vulkan_layer_factory::AllocateMemory(VkDevice_T*, VkMemoryAllocateInfo const*, VkAllocationCallbacks const*, VkDeviceMemory_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [155], true>(char const (&) [36], char const (&) [155])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [204], true>(char const (&) [33], char const (&) [204])
layer_factory::PreCallCmdDrawIndexedIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [170], true>(char const (&) [53], char const (&) [170])
layer_factory::PreCallGetDisplayModeProperties2KHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModeProperties2KHR*)
layer_factory::PreCallGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
vulkan_layer_factory::GetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayProperties2KHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [156], true>(char const (&) [51], char const (&) [156])
vulkan_layer_factory::GetBufferMemoryRequirements2(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [194], true>(char const (&) [42], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [225], true>(char const (&) [48], char const (&) [225])
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [226], true>(char const (&) [41], char const (&) [226])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [69], char const (&) [239], true>(char const (&) [69], char const (&) [239])
layer_factory::PreCallCmdSetStencilWriteMask(VkCommandBuffer_T*, unsigned int, unsigned int)
vulkan_layer_factory::UpdateDescriptorSets(VkDevice_T*, unsigned int, VkWriteDescriptorSet const*, unsigned int, VkCopyDescriptorSet const*)
vulkan_layer_factory::GetImageSparseMemoryRequirements2(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [297], true>(char const (&) [39], char const (&) [297])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [179], true>(char const (&) [46], char const (&) [179])
layer_factory::PostCallGetPhysicalDeviceMemoryProperties(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [472], true>(char const (&) [53], char const (&) [472])
layer_factory::PreCallGetPhysicalDeviceFeatures(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures*)
vulkan_layer_factory::SubmitDebugUtilsMessageEXT(VkInstance_T*, VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [285], true>(char const (&) [51], char const (&) [285])
layer_factory::PostCallFreeDescriptorSets(VkDevice_T*, VkDescriptorPool_T*, unsigned int, VkDescriptorSet_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::~pair()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [135], true>(char const (&) [36], char const (&) [135])
vulkan_layer_factory::DestroyDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayout_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::DestroyImageView(VkDevice_T*, VkImageView_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [188], true>(char const (&) [50], char const (&) [188])
layer_factory::PostCallGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [227], true>(char const (&) [32], char const (&) [227])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [165], true>(char const (&) [50], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [146], true>(char const (&) [47], char const (&) [146])
vulkan_layer_factory::DestroySurfaceKHR(VkInstance_T*, VkSurfaceKHR_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [163], true>(char const (&) [34], char const (&) [163])
layer_factory::PreCallGetMemoryFdPropertiesKHR(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*)
layer_factory::PreCallGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
layer_factory::PostCallRegisterDeviceEventEXT(VkDevice_T*, VkDeviceEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, void*, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>>::~unordered_map()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [197], true>(char const (&) [50], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [162], true>(char const (&) [51], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [344], true>(char const (&) [41], char const (&) [344])
std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>>::vector(std::vector<DeviceExtensions::DeviceReq, std::allocator<DeviceExtensions::DeviceReq>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [325], true>(char const (&) [37], char const (&) [325])
layer_factory::PostCallGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkPresentModeKHR*)
layer_factory::PostCallCreatePipelineCache(VkDevice_T*, VkPipelineCacheCreateInfo const*, VkAllocationCallbacks const*, VkPipelineCache_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [179], true>(char const (&) [42], char const (&) [179])
vulkan_layer_factory::GetDeviceProcAddr(VkDevice_T*, char const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [229], true>(char const (&) [60], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [195], true>(char const (&) [52], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [383], true>(char const (&) [50], char const (&) [383])
vulkan_layer_factory::GetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [177], true>(char const (&) [40], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [222], true>(char const (&) [41], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [206], true>(char const (&) [54], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [428], true>(char const (&) [42], char const (&) [428])
layer_factory::PreCallAcquireNextImage2KHR(VkDevice_T*, VkAcquireNextImageInfoKHR const*, unsigned int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [187], true>(char const (&) [55], char const (&) [187])
layer_factory::PreCallGetPipelineCacheData(VkDevice_T*, VkPipelineCache_T*, unsigned long*, void*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [164], true>(char const (&) [45], char const (&) [164])
vulkan_layer_factory::ReleaseDisplayEXT(VkPhysicalDevice_T*, VkDisplayKHR_T*)
__vsnprintf_chk@@GLIBC_2.3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [200], true>(char const (&) [42], char const (&) [200])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [177], true>(char const (&) [30], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [304], true>(char const (&) [42], char const (&) [304])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [203], true>(char const (&) [48], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [228], true>(char const (&) [53], char const (&) [228])
memcpy@@GLIBC_2.14
layer_factory::PreCallEnumeratePhysicalDeviceGroups(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [204], true>(char const (&) [49], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [257], true>(char const (&) [58], char const (&) [257])
layer_factory::PostCallCmdDebugMarkerInsertEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [235], true>(char const (&) [53], char const (&) [235])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [184], true>(char const (&) [53], char const (&) [184])
layer_factory::PostCallSetDebugUtilsObjectNameEXT(VkDevice_T*, VkDebugUtilsObjectNameInfoEXT const*)
vulkan_layer_factory::FreeMemory(VkDevice_T*, VkDeviceMemory_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [210], true>(char const (&) [62], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [488], true>(char const (&) [49], char const (&) [488])
layer_factory::PostCallCreateGraphicsPipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkGraphicsPipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
layer_factory::PreCallDebugMarkerSetObjectTagEXT(VkDevice_T*, VkDebugMarkerObjectTagInfoEXT const*)
layer_factory::PostCallDestroySwapchainKHR(VkDevice_T*, VkSwapchainKHR_T*, VkAllocationCallbacks const*)
layer_factory::PostCallCmdBlitImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageBlit const*, VkFilter)
vkEnumerateInstanceExtensionProperties
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [175], true>(char const (&) [56], char const (&) [175])
std::vector<layer_factory*, std::allocator<layer_factory*>>::~vector()
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
layer_factory::PostCallCmdCopyBufferToImage(VkCommandBuffer_T*, VkBuffer_T*, VkImage_T*, VkImageLayout, unsigned int, VkBufferImageCopy const*)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc@@GLIBCXX_3.4.21
layer_factory::PostCallGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties*)
layer_factory::PreCallCmdClearColorImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearColorValue const*, unsigned int, VkImageSubresourceRange const*)
_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [144], true>(char const (&) [45], char const (&) [144])
vulkan_layer_factory::GetQueryPoolResults(VkDevice_T*, VkQueryPool_T*, unsigned int, unsigned int, unsigned long, void*, unsigned long, unsigned int)
layer_factory::PostCallCreateQueryPool(VkDevice_T*, VkQueryPoolCreateInfo const*, VkAllocationCallbacks const*, VkQueryPool_T**)
vulkan_layer_factory::EnumerateInstanceLayerProperties(unsigned int*, VkLayerProperties*)
layer_factory::PreCallQueueInsertDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
vulkan_layer_factory::CmdDraw(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PreCallBindBufferMemory2(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
vulkan_layer_factory::UpdateDescriptorSetWithTemplateKHR(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
layer_factory::PostCallCreatePipelineLayout(VkDevice_T*, VkPipelineLayoutCreateInfo const*, VkAllocationCallbacks const*, VkPipelineLayout_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [190], true>(char const (&) [38], char const (&) [190])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [174], true>(char const (&) [41], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::pair<char const*, DeviceExtensions::DeviceInfo, true>(std::pair<char const*, DeviceExtensions::DeviceInfo>&&)
layer_factory::PostCallQueueSubmit(VkQueue_T*, unsigned int, VkSubmitInfo const*, VkFence_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [178], true>(char const (&) [45], char const (&) [178])
layer_factory::PostCallEnumerateDeviceExtensionProperties(VkPhysicalDevice_T*, char const*, unsigned int*, VkExtensionProperties*)
vulkan_layer_factory::GetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [197], true>(char const (&) [45], char const (&) [197])
vulkan_layer_factory::CmdPipelineBarrier(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
layer_factory::PreCallGetSwapchainCounterEXT(VkDevice_T*, VkSwapchainKHR_T*, VkSurfaceCounterFlagBitsEXT, unsigned long*)
layer_factory::PostCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [183], true>(char const (&) [48], char const (&) [183])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [230], true>(char const (&) [45], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [213], true>(char const (&) [44], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [294], true>(char const (&) [32], char const (&) [294])
layer_factory::PostCallCreateImageView(VkDevice_T*, VkImageViewCreateInfo const*, VkAllocationCallbacks const*, VkImageView_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [74], char const (&) [209], true>(char const (&) [74], char const (&) [209])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [221], true>(char const (&) [42], char const (&) [221])
layer_factory::PostCallGetMemoryFdPropertiesKHR(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*)
layer_factory::PostCallUpdateDescriptorSets(VkDevice_T*, unsigned int, VkWriteDescriptorSet const*, unsigned int, VkCopyDescriptorSet const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [175], true>(char const (&) [46], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [388], true>(char const (&) [51], char const (&) [388])
vulkan_layer_factory::CreateEvent(VkDevice_T*, VkEventCreateInfo const*, VkAllocationCallbacks const*, VkEvent_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [340], true>(char const (&) [52], char const (&) [340])
vulkan_layer_factory::DestroySwapchainKHR(VkDevice_T*, VkSwapchainKHR_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [181], true>(char const (&) [56], char const (&) [181])
layer_factory::PostCallGetImageSubresourceLayout(VkDevice_T*, VkImage_T*, VkImageSubresource const*, VkSubresourceLayout*)
layer_factory::PreCallCmdSetViewportWScalingNV(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewportWScalingNV const*)
layer_factory::PostCallGetDeviceGroupPeerMemoryFeatures(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
__cxa_atexit@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [198], true>(char const (&) [63], char const (&) [198])
layer_factory::PreCallGetPhysicalDeviceProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKNSt7__cxx1112basic_stringIS4_S5_T1_EE@@GLIBCXX_3.4.21
vulkan_layer_factory::FreeCommandBuffers(VkDevice_T*, VkCommandPool_T*, unsigned int, VkCommandBuffer_T* const*)
vulkan_layer_factory::DeviceWaitIdle(VkDevice_T*)
vulkan_layer_factory::ImportFenceFdKHR(VkDevice_T*, VkImportFenceFdInfoKHR const*)
vulkan_layer_factory::CreateRenderPass(VkDevice_T*, VkRenderPassCreateInfo const*, VkAllocationCallbacks const*, VkRenderPass_T**)
layer_factory::PreCallCmdPipelineBarrier(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
layer_factory::PostCallAllocateDescriptorSets(VkDevice_T*, VkDescriptorSetAllocateInfo const*, VkDescriptorSet_T**)
vulkan_layer_factory::GetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, unsigned int, VkExternalImageFormatPropertiesNV*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [210], true>(char const (&) [61], char const (&) [210])
layer_factory::PostCallGetPhysicalDeviceFormatProperties(VkPhysicalDevice_T*, VkFormat, VkFormatProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [183], true>(char const (&) [53], char const (&) [183])
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&) const
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [172], true>(char const (&) [47], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [214], true>(char const (&) [45], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [215], true>(char const (&) [58], char const (&) [215])
EnvExtensions::PostCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
layer_factory::PostCallCmdSetViewport(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewport const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [219], true>(char const (&) [60], char const (&) [219])
layer_factory::PreCallCmdDispatchIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [309], true>(char const (&) [48], char const (&) [309])
vulkan_layer_factory::name_to_funcptr_map[abi:cxx11]
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [76], char const (&) [211], true>(char const (&) [76], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [187], true>(char const (&) [45], char const (&) [187])
__pthread_key_create
layer_factory::PreCallCreateRenderPass(VkDevice_T*, VkRenderPassCreateInfo const*, VkAllocationCallbacks const*, VkRenderPass_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [262], true>(char const (&) [45], char const (&) [262])
layer_factory::PostCallCmdDebugMarkerEndEXT(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [165], true>(char const (&) [40], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [221], true>(char const (&) [63], char const (&) [221])
vulkan_layer_factory::GetSemaphoreFdKHR(VkDevice_T*, VkSemaphoreGetFdInfoKHR const*, int*)
layer_factory::PreCallDestroySemaphore(VkDevice_T*, VkSemaphore_T*, VkAllocationCallbacks const*)
layer_factory::PreCallBindBufferMemory2KHR(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
layer_factory::PreCallCmdWriteTimestamp(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkQueryPool_T*, unsigned int)
layer_factory::PostCallCmdEndQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [148], true>(char const (&) [49], char const (&) [148])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [177], true>(char const (&) [41], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [178], true>(char const (&) [48], char const (&) [178])
layer_factory::PostCallCreateSemaphore(VkDevice_T*, VkSemaphoreCreateInfo const*, VkAllocationCallbacks const*, VkSemaphore_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [275], true>(char const (&) [49], char const (&) [275])
layer_factory::PostCallCmdDrawIndexedIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [365], true>(char const (&) [67], char const (&) [365])
layer_factory::PreCallDestroyDevice(VkDevice_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [176], true>(char const (&) [45], char const (&) [176])
vulkan_layer_factory::CreatePipelineLayout(VkDevice_T*, VkPipelineLayoutCreateInfo const*, VkAllocationCallbacks const*, VkPipelineLayout_T**)
vulkan_layer_factory::CreateQueryPool(VkDevice_T*, VkQueryPoolCreateInfo const*, VkAllocationCallbacks const*, VkQueryPool_T**)
guard variable for InstanceExtensions::get_info(char const*)::info_map[abi:cxx11]
vulkan_layer_factory::CmdInsertDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallCmdSetDepthBounds(VkCommandBuffer_T*, float, float)
layer_factory::PreCallCmdPushConstants(VkCommandBuffer_T*, VkPipelineLayout_T*, unsigned int, unsigned int, unsigned int, void const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [159], true>(char const (&) [39], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [212], true>(char const (&) [49], char const (&) [212])
vulkan_layer_factory::GetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPropertiesKHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [264], true>(char const (&) [33], char const (&) [264])
layer_factory::PostCallGetImageSparseMemoryRequirements2(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
_ZdlPv@@GLIBCXX_3.4
layer_factory::PostCallDestroyObjectTableNVX(VkDevice_T*, VkObjectTableNVX_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCmdDispatchBase(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [465], true>(char const (&) [42], char const (&) [465])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [171], true>(char const (&) [39], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [167], true>(char const (&) [35], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [201], true>(char const (&) [50], char const (&) [201])
layer_factory::PreCallGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, VkSurfaceCapabilities2KHR*)
vulkan_layer_factory::EnumerateDeviceExtensionProperties(VkPhysicalDevice_T*, char const*, unsigned int*, VkExtensionProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [192], true>(char const (&) [43], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [206], true>(char const (&) [46], char const (&) [206])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [232], true>(char const (&) [41], char const (&) [232])
layer_factory::PreCallQueueBindSparse(VkQueue_T*, unsigned int, VkBindSparseInfo const*, VkFence_T*)
guard variable for DeviceExtensions::get_info(char const*)::empty_info
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [278], true>(char const (&) [41], char const (&) [278])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEPKc@@GLIBCXX_3.4.21
vulkan_layer_factory::CmdSetDepthBias(VkCommandBuffer_T*, float, float, float)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [82], char const (&) [206], true>(char const (&) [82], char const (&) [206])
InstanceExtensions::InstanceInfo::~InstanceInfo()
vkGetInstanceProcAddr
layer_factory::PreCallCmdSetLineWidth(VkCommandBuffer_T*, float)
layer_factory::PreCallEndCommandBuffer(VkCommandBuffer_T*)
vulkan_layer_factory::DestroyRenderPass(VkDevice_T*, VkRenderPass_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateSharedSwapchainsKHR(VkDevice_T*, unsigned int, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
layer_factory::PreCallCmdSetBlendConstants(VkCommandBuffer_T*, float const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [206], true>(char const (&) [44], char const (&) [206])
layer_factory::PostCallEnumerateDeviceLayerProperties(VkPhysicalDevice_T*, unsigned int*, VkLayerProperties*)
layer_factory::PreCallGetPastPresentationTimingGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkPastPresentationTimingGOOGLE*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [461], true>(char const (&) [38], char const (&) [461])
std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::_Identity<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
layer_factory::PostCallCmdBeginQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
layer_factory::PreCallEnumeratePhysicalDevices(VkInstance_T*, unsigned int*, VkPhysicalDevice_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [285], true>(char const (&) [54], char const (&) [285])
vulkan_layer_factory::CreateIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutCreateInfoNVX const*, VkAllocationCallbacks const*, VkIndirectCommandsLayoutNVX_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [184], true>(char const (&) [44], char const (&) [184])
vulkan_layer_factory::GetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [249], true>(char const (&) [51], char const (&) [249])
_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE@@GLIBCXX_3.4.21
layer_factory::PreCallSetDebugUtilsObjectTagEXT(VkDevice_T*, VkDebugUtilsObjectTagInfoEXT const*)
layer_factory::PreCallUpdateDescriptorSetWithTemplate(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
vulkan_layer_factory::DestroyDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [202], true>(char const (&) [53], char const (&) [202])
layer_factory::PreCallGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, unsigned int, VkExternalImageFormatPropertiesNV*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [198], true>(char const (&) [53], char const (&) [198])
layer_factory::PostCallDestroyDevice(VkDevice_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [214], true>(char const (&) [40], char const (&) [214])
vulkan_layer_factory::CmdDrawIndexedIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [224], true>(char const (&) [55], char const (&) [224])
layer_factory::PreCallGetFenceStatus(VkDevice_T*, VkFence_T*)
layer_factory::PostCallCmdClearDepthStencilImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearDepthStencilValue const*, unsigned int, VkImageSubresourceRange const*)
vulkan_layer_factory::MapMemory(VkDevice_T*, VkDeviceMemory_T*, unsigned long, unsigned long, unsigned int, void**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [245], true>(char const (&) [41], char const (&) [245])
vulkan_layer_factory::CreateDisplayModeKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, VkDisplayModeCreateInfoKHR const*, VkAllocationCallbacks const*, VkDisplayModeKHR_T**)
layer_factory::PreCallGetSwapchainStatusKHR(VkDevice_T*, VkSwapchainKHR_T*)
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@@GLIBCXX_3.4
layer_factory::PreCallGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlaneProperties2KHR*)
_Znwm@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [161], true>(char const (&) [47], char const (&) [161])
vulkan_layer_factory::GetPhysicalDeviceProcAddr(VkInstance_T*, char const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [356], true>(char const (&) [49], char const (&) [356])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [199], true>(char const (&) [51], char const (&) [199])
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>> const&)
layer_factory::PostCallFlushMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
__xstat@@GLIBC_2.2.5
guard variable for DeviceExtensions::InitFromDeviceCreateInfo(InstanceExtensions const*, unsigned int, VkDeviceCreateInfo const*)::V_1_0_promoted_device_extensions
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [172], true>(char const (&) [42], char const (&) [172])
layer_factory::PreCallSubmitDebugUtilsMessageEXT(VkInstance_T*, VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*)
layer_factory::PreCallGetDisplayModePropertiesKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModePropertiesKHR*)
vulkan_layer_factory::GetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkRect2D*)
layer_factory::PreCallCmdSetSampleLocationsEXT(VkCommandBuffer_T*, VkSampleLocationsInfoEXT const*)
layer_factory::PostCallGetPastPresentationTimingGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkPastPresentationTimingGOOGLE*)
layer_factory::PostCallGetPhysicalDeviceProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
raise@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [179], true>(char const (&) [54], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [210], true>(char const (&) [54], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [243], true>(char const (&) [44], char const (&) [243])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::pair<char const*, InstanceExtensions::InstanceInfo, true>(std::pair<char const*, InstanceExtensions::InstanceInfo>&&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [173], true>(char const (&) [50], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [195], true>(char const (&) [42], char const (&) [195])
layer_factory::PostCallGetFenceFdKHR(VkDevice_T*, VkFenceGetFdInfoKHR const*, int*)
vulkan_layer_factory::GetPhysicalDeviceFormatProperties2(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
vulkan_layer_factory::DestroyPipelineLayout(VkDevice_T*, VkPipelineLayout_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [189], true>(char const (&) [40], char const (&) [189])
layer_factory::PreCallCreateDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugUtilsMessengerEXT_T**)
layer_factory::PostCallUpdateDescriptorSetWithTemplate(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, void*>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [219], true>(char const (&) [44], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [328], true>(char const (&) [51], char const (&) [328])
vulkan_layer_factory::DestroyImage(VkDevice_T*, VkImage_T*, VkAllocationCallbacks const*)
_ZTVNSt7__cxx1118basic_stringstreamIcSt11char_traitsIcESaIcEEE@@GLIBCXX_3.4.21
vulkan_layer_factory::FlushMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
vulkan_layer_factory::CmdSetScissor(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@@GLIBCXX_3.4.21
layer_factory::PostCallGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayProperties2KHR*)
vulkan_layer_factory::GetEventStatus(VkDevice_T*, VkEvent_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [224], true>(char const (&) [39], char const (&) [224])
layer_factory::PreCallCmdBeginQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [230], true>(char const (&) [58], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [212], true>(char const (&) [45], char const (&) [212])
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [167], true>(char const (&) [47], char const (&) [167])
vulkan_layer_factory::CreateXcbSurfaceKHR(VkInstance_T*, VkXcbSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [243], true>(char const (&) [43], char const (&) [243])
layer_factory::PreCallGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [504], true>(char const (&) [42], char const (&) [504])
_ZNSolsEPFRSoS_E@@GLIBCXX_3.4
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>> const&)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_@@GLIBCXX_3.4.21
layer_factory::PostCallCmdWriteBufferMarkerAMD(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkBuffer_T*, unsigned long, unsigned int)
layer_factory::PostCallCmdSetDepthBias(VkCommandBuffer_T*, float, float, float)
layer_factory::PreCallGetBufferMemoryRequirements(VkDevice_T*, VkBuffer_T*, VkMemoryRequirements*)
typeinfo name for layer_factory
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [213], true>(char const (&) [46], char const (&) [213])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [237], true>(char const (&) [52], char const (&) [237])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [330], true>(char const (&) [32], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [201], true>(char const (&) [66], char const (&) [201])
layer_factory::PreCallCreateDisplayModeKHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, VkDisplayModeCreateInfoKHR const*, VkAllocationCallbacks const*, VkDisplayModeKHR_T**)
layer_factory::PreCallCreateImage(VkDevice_T*, VkImageCreateInfo const*, VkAllocationCallbacks const*, VkImage_T**)
vulkan_layer_factory::CmdDrawIndexedIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [279], true>(char const (&) [56], char const (&) [279])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [65], char const (&) [189], true>(char const (&) [65], char const (&) [189])
vulkan_layer_factory::GetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties*)
vulkan_layer_factory::UnmapMemory(VkDevice_T*, VkDeviceMemory_T*)
layer_factory::PostCallBindImageMemory(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [178], true>(char const (&) [59], char const (&) [178])
layer_factory::PostCallMergePipelineCaches(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkPipelineCache_T* const*)
_ZNSaIcED1Ev@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [233], true>(char const (&) [48], char const (&) [233])
layer_factory::PostCallGetPhysicalDeviceFeatures(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [166], true>(char const (&) [49], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [225], true>(char const (&) [53], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [185], true>(char const (&) [39], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [170], true>(char const (&) [51], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [168], true>(char const (&) [43], char const (&) [168])
layer_factory::PostCallGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilitiesKHR*)
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [191], true>(char const (&) [47], char const (&) [191])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [165], true>(char const (&) [46], char const (&) [165])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [303], true>(char const (&) [35], char const (&) [303])
vulkan_layer_factory::CreateSamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [235], true>(char const (&) [32], char const (&) [235])
_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE@@GLIBCXX_3.4.21
layer_factory::PreCallCreateSemaphore(VkDevice_T*, VkSemaphoreCreateInfo const*, VkAllocationCallbacks const*, VkSemaphore_T**)
layer_factory::PostCallDestroyEvent(VkDevice_T*, VkEvent_T*, VkAllocationCallbacks const*)
layer_factory::PostCallUnregisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectEntryTypeNVX const*, unsigned int const*)
layer_factory::PostCallCreateDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorSetLayout_T**)
layer_factory::PreCallGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, xcb_connection_t*, unsigned int)
layer_factory::PreCallGetDeviceQueue(VkDevice_T*, unsigned int, unsigned int, VkQueue_T**)
layer_factory::PreCallUnregisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectEntryTypeNVX const*, unsigned int const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [225], true>(char const (&) [46], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [293], true>(char const (&) [42], char const (&) [293])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [184], true>(char const (&) [47], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [241], true>(char const (&) [51], char const (&) [241])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [230], true>(char const (&) [54], char const (&) [230])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [249], true>(char const (&) [49], char const (&) [249])
layer_factory::PostCallGetSwapchainCounterEXT(VkDevice_T*, VkSwapchainKHR_T*, VkSurfaceCounterFlagBitsEXT, unsigned long*)
layer_factory::PostCallGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice_T*, VkDisplayPlaneInfo2KHR const*, VkDisplayPlaneCapabilities2KHR*)
layer_factory::PostCallEnumerateInstanceExtensionProperties(char const*, unsigned int*, VkExtensionProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [200], true>(char const (&) [46], char const (&) [200])
DeviceExtensions::InitFromDeviceCreateInfo(InstanceExtensions const*, unsigned int, VkDeviceCreateInfo const*)::V_1_0_promoted_device_extensions
layer_factory::PostCallGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
layer_factory::PreCallUpdateDescriptorSets(VkDevice_T*, unsigned int, VkWriteDescriptorSet const*, unsigned int, VkCopyDescriptorSet const*)
layer_factory::PreCallCmdDispatchBaseKHR(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PreCallDestroyShaderModule(VkDevice_T*, VkShaderModule_T*, VkAllocationCallbacks const*)
layer_factory::PostCallGetMemoryHostPointerPropertiesEXT(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, void const*, VkMemoryHostPointerPropertiesEXT*)
layer_factory::PostCallGetValidationCacheDataEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned long*, void*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [313], true>(char const (&) [30], char const (&) [313])
layer_factory::PreCallResetDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [445], true>(char const (&) [39], char const (&) [445])
layer_factory::PreCallCmdDebugMarkerInsertEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
vulkan_layer_factory::DestroyBuffer(VkDevice_T*, VkBuffer_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetRenderAreaGranularity(VkDevice_T*, VkRenderPass_T*, VkExtent2D*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [137], true>(char const (&) [41], char const (&) [137])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [177], true>(char const (&) [44], char const (&) [177])
vkEnumerateInstanceLayerProperties
vulkan_layer_factory::CmdResetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
__stack_chk_fail@@GLIBC_2.4
vulkan_layer_factory::CmdNextSubpass2KHR(VkCommandBuffer_T*, VkSubpassBeginInfoKHR const*, VkSubpassEndInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [203], true>(char const (&) [32], char const (&) [203])
vulkan_layer_factory::ResetEvent(VkDevice_T*, VkEvent_T*)
_init
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [269], true>(char const (&) [49], char const (&) [269])
layer_factory::PostCallGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilities2EXT*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [72], char const (&) [207], true>(char const (&) [72], char const (&) [207])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [176], true>(char const (&) [43], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [183], true>(char const (&) [43], char const (&) [183])
layer_factory::PreCallDestroyDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayout_T*, VkAllocationCallbacks const*)
void std::vector<layer_factory*, std::allocator<layer_factory*>>::_M_realloc_insert<layer_factory*>(__gnu_cxx::__normal_iterator<layer_factory**, std::vector<layer_factory*, std::allocator<layer_factory*>>>, layer_factory*&&)
vulkan_layer_factory::CreateObjectTableNVX(VkDevice_T*, VkObjectTableCreateInfoNVX const*, VkAllocationCallbacks const*, VkObjectTableNVX_T**)
vulkan_layer_factory::CreateSamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [215], true>(char const (&) [43], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [179], true>(char const (&) [32], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [155], true>(char const (&) [56], char const (&) [155])
layer_factory::PostCallDestroyImage(VkDevice_T*, VkImage_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetDeviceGroupSurfacePresentModesKHR(VkDevice_T*, VkSurfaceKHR_T*, unsigned int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [149], true>(char const (&) [53], char const (&) [149])
vulkan_layer_factory::GetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice_T*, VkDeviceGeneratedCommandsFeaturesNVX*, VkDeviceGeneratedCommandsLimitsNVX*)
_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1Ev@@GLIBCXX_3.4
vulkan_layer_factory::GetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@@GLIBCXX_3.4.9
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [175], true>(char const (&) [57], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [205], true>(char const (&) [44], char const (&) [205])
vulkan_layer_factory::DestroyPipelineCache(VkDevice_T*, VkPipelineCache_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateWaylandSurfaceKHR(VkInstance_T*, VkWaylandSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
vulkan_layer_factory::GetShaderInfoAMD(VkDevice_T*, VkPipeline_T*, VkShaderStageFlagBits, VkShaderInfoTypeAMD, unsigned long*, void*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [195], true>(char const (&) [58], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [224], true>(char const (&) [58], char const (&) [224])
vulkan_layer_factory::CmdReserveSpaceForCommandsNVX(VkCommandBuffer_T*, VkCmdReserveSpaceForCommandsInfoNVX const*)
vulkan_layer_factory::BindImageMemory2KHR(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [222], true>(char const (&) [34], char const (&) [222])
DeviceExtensions::DeviceInfo::~DeviceInfo()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [242], true>(char const (&) [62], char const (&) [242])
void std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_M_assign<std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_Hashtable(std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>> const&)::'lambda'(std::__detail::_Hash_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, true> const*)>(std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>> const&, std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_Hashtable(std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>> const&)::'lambda'(std::__detail::_Hash_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, true> const*) const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [234], true>(char const (&) [58], char const (&) [234])
layer_factory::PostCallDestroyValidationCacheEXT(VkDevice_T*, VkValidationCacheEXT_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [187], true>(char const (&) [59], char const (&) [187])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [176], true>(char const (&) [51], char const (&) [176])
vulkan_layer_factory::GetInstanceProcAddr(VkInstance_T*, char const*)
InstanceExtensions::get_info(char const*)::info_map[abi:cxx11]
std::unordered_map<void*, device_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, device_layer_data*>>>::~unordered_map()
vulkan_layer_factory::QueueSubmit(VkQueue_T*, unsigned int, VkSubmitInfo const*, VkFence_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [234], true>(char const (&) [35], char const (&) [234])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [238], true>(char const (&) [47], char const (&) [238])
layer_factory::PostCallCmdBindPipeline(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipeline_T*)
vulkan_layer_factory::CmdSetDeviceMaskKHR(VkCommandBuffer_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [330], true>(char const (&) [48], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [171], true>(char const (&) [52], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [223], true>(char const (&) [54], char const (&) [223])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [255], true>(char const (&) [48], char const (&) [255])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [285], true>(char const (&) [45], char const (&) [285])
vulkan_layer_factory::GetRandROutputDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, unsigned long, VkDisplayKHR_T**)
vulkan_layer_factory::CreateSwapchainKHR(VkDevice_T*, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [237], true>(char const (&) [54], char const (&) [237])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [213], true>(char const (&) [42], char const (&) [213])
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~unordered_map()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [317], true>(char const (&) [38], char const (&) [317])
fflush@@GLIBC_2.2.5
InstanceExtensions::InitFromInstanceCreateInfo(unsigned int, VkInstanceCreateInfo const*)::V_1_0_promoted_instance_extensions
layer_factory::PostCallCmdSetDiscardRectangleEXT(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [158], true>(char const (&) [55], char const (&) [158])
fopen@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [264], true>(char const (&) [43], char const (&) [264])
layer_factory::PostCallBindImageMemory2KHR(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [203], true>(char const (&) [39], char const (&) [203])
vulkan_layer_factory::AcquireXlibDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, VkDisplayKHR_T*)
layer_factory::PostCallDestroySamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PostCallCreateSampler(VkDevice_T*, VkSamplerCreateInfo const*, VkAllocationCallbacks const*, VkSampler_T**)
layer_factory::PostCallCmdCopyImageToBuffer(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkBuffer_T*, unsigned int, VkBufferImageCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [262], true>(char const (&) [36], char const (&) [262])
layer_factory::PreCallGetMemoryHostPointerPropertiesEXT(VkDevice_T*, VkExternalMemoryHandleTypeFlagBits, void const*, VkMemoryHostPointerPropertiesEXT*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [199], true>(char const (&) [47], char const (&) [199])
vulkan_layer_factory::CmdDrawIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PreCallQueuePresentKHR(VkQueue_T*, VkPresentInfoKHR const*)
free@@GLIBC_2.2.5
layer_factory::PreCallDestroyBufferView(VkDevice_T*, VkBufferView_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [283], true>(char const (&) [58], char const (&) [283])
layer_factory::PreCallCreateQueryPool(VkDevice_T*, VkQueryPoolCreateInfo const*, VkAllocationCallbacks const*, VkQueryPool_T**)
layer_factory::PreCallCmdEndQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [224], true>(char const (&) [42], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [214], true>(char const (&) [50], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [198], true>(char const (&) [51], char const (&) [198])
vulkan_layer_factory::QueueEndDebugUtilsLabelEXT(VkQueue_T*)
layer_factory::PreCallGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice_T*, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*)
layer_factory::PreCallResetCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [173], true>(char const (&) [46], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [203], true>(char const (&) [54], char const (&) [203])
layer_factory::PreCallCmdNextSubpass2KHR(VkCommandBuffer_T*, VkSubpassBeginInfoKHR const*, VkSubpassEndInfoKHR const*)
layer_factory::PreCallCmdBlitImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageBlit const*, VkFilter)
void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [154], true>(char const (&) [55], char const (&) [154])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [176], true>(char const (&) [48], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [195], true>(char const (&) [43], char const (&) [195])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [27], char const (&) [24], true>(char const (&) [27], char const (&) [24])
getenv@@GLIBC_2.2.5
layer_factory::PostCallCreateImage(VkDevice_T*, VkImageCreateInfo const*, VkAllocationCallbacks const*, VkImage_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [178], true>(char const (&) [49], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [184], true>(char const (&) [37], char const (&) [184])
vulkan_layer_factory::EnumerateInstanceExtensionProperties(char const*, unsigned int*, VkExtensionProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [609], true>(char const (&) [50], char const (&) [609])
layer_factory::PostCallResetEvent(VkDevice_T*, VkEvent_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [177], true>(char const (&) [52], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [313], true>(char const (&) [45], char const (&) [313])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [188], true>(char const (&) [53], char const (&) [188])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [265], true>(char const (&) [42], char const (&) [265])
vulkan_layer_factory::CmdWaitEvents(VkCommandBuffer_T*, unsigned int, VkEvent_T* const*, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
layer_factory::PreCallCreateGraphicsPipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkGraphicsPipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [256], true>(char const (&) [35], char const (&) [256])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [219], true>(char const (&) [66], char const (&) [219])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [501], true>(char const (&) [53], char const (&) [501])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [223], true>(char const (&) [58], char const (&) [223])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv@@GLIBCXX_3.4.21
layer_factory::PreCallCreateDescriptorPool(VkDevice_T*, VkDescriptorPoolCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorPool_T**)
layer_factory::PostCallGetRefreshCycleDurationGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, VkRefreshCycleDurationGOOGLE*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [134], true>(char const (&) [35], char const (&) [134])
layer_factory::PostCallGetFenceStatus(VkDevice_T*, VkFence_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [201], true>(char const (&) [35], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [169], true>(char const (&) [53], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [233], true>(char const (&) [36], char const (&) [233])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [150], true>(char const (&) [51], char const (&) [150])
layer_factory::PostCallCmdDrawIndexedIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [293], true>(char const (&) [51], char const (&) [293])
vulkan_layer_factory::GetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, xcb_connection_t*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [179], true>(char const (&) [48], char const (&) [179])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [136], true>(char const (&) [37], char const (&) [136])
layer_factory::PreCallDestroyDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackEXT_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetPastPresentationTimingGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkPastPresentationTimingGOOGLE*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [31], char const (&) [178], true>(char const (&) [31], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [198], true>(char const (&) [55], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [200], true>(char const (&) [52], char const (&) [200])
vulkan_layer_factory::CmdSetStencilReference(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PreCallDestroyFramebuffer(VkDevice_T*, VkFramebuffer_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::SetHdrMetadataEXT(VkDevice_T*, unsigned int, VkSwapchainKHR_T* const*, VkHdrMetadataEXT const*)
layer_factory::PreCallCmdEndDebugUtilsLabelEXT(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [225], true>(char const (&) [52], char const (&) [225])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [242], true>(char const (&) [44], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [207], true>(char const (&) [55], char const (&) [207])
layer_factory::PreCallCmdProcessCommandsNVX(VkCommandBuffer_T*, VkCmdProcessCommandsInfoNVX const*)
vulkan_layer_factory::CmdEndConditionalRenderingEXT(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [197], true>(char const (&) [64], char const (&) [197])
layer_factory::PostCallDebugMarkerSetObjectTagEXT(VkDevice_T*, VkDebugMarkerObjectTagInfoEXT const*)
layer_factory::PreCallGetImageSubresourceLayout(VkDevice_T*, VkImage_T*, VkImageSubresource const*, VkSubresourceLayout*)
layer_factory::PreCallGetSemaphoreFdKHR(VkDevice_T*, VkSemaphoreGetFdInfoKHR const*, int*)
layer_factory::PostCallGetSwapchainStatusKHR(VkDevice_T*, VkSwapchainKHR_T*)
layer_factory::PreCallCreateSampler(VkDevice_T*, VkSamplerCreateInfo const*, VkAllocationCallbacks const*, VkSampler_T**)
layer_factory::PreCallCmdPushDescriptorSetKHR(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkWriteDescriptorSet const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [212], true>(char const (&) [57], char const (&) [212])
layer_factory::PostCallCmdPushConstants(VkCommandBuffer_T*, VkPipelineLayout_T*, unsigned int, unsigned int, unsigned int, void const*)
vulkan_layer_factory::GetImageSparseMemoryRequirements(VkDevice_T*, VkImage_T*, unsigned int*, VkSparseImageMemoryRequirements*)
layer_factory::PreCallInvalidateMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [202], true>(char const (&) [52], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [175], true>(char const (&) [58], char const (&) [175])
vulkan_layer_factory::DestroyShaderModule(VkDevice_T*, VkShaderModule_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [241], true>(char const (&) [45], char const (&) [241])
_ZSt4cout@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [226], true>(char const (&) [48], char const (&) [226])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [179], true>(char const (&) [41], char const (&) [179])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_@@GLIBCXX_3.4.21
layer_factory::PreCallGetDeviceGroupPresentCapabilitiesKHR(VkDevice_T*, VkDeviceGroupPresentCapabilitiesKHR*)
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::~unordered_map()
vulkan_layer_factory::ResetFences(VkDevice_T*, unsigned int, VkFence_T* const*)
_ZdaPv@@GLIBCXX_3.4
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [237], true>(char const (&) [56], char const (&) [237])
_ZTVN10__cxxabiv120__si_class_type_infoE@@CXXABI_1.3
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [244], true>(char const (&) [55], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [187], true>(char const (&) [54], char const (&) [187])
layer_factory::PostCallUnmapMemory(VkDevice_T*, VkDeviceMemory_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [322], true>(char const (&) [39], char const (&) [322])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [186], true>(char const (&) [39], char const (&) [186])
layer_factory::PostCallCmdSetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
layer_factory::PostCallGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [239], true>(char const (&) [40], char const (&) [239])
layer_factory::PostCallDestroySamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCreateSwapchainKHR(VkDevice_T*, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [311], true>(char const (&) [35], char const (&) [311])
layer_factory::PostCallCmdSetStencilWriteMask(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PostCallDestroyDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [184], true>(char const (&) [52], char const (&) [184])
layer_factory::PreCallGetImageMemoryRequirements2(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [188], true>(char const (&) [55], char const (&) [188])
vulkan_layer_factory::ResetCommandBuffer(VkCommandBuffer_T*, unsigned int)
layer_factory::PreCallGetPhysicalDeviceMemoryProperties(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties*)
layer_factory::PostCallDestroyInstance(VkInstance_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [216], true>(char const (&) [32], char const (&) [216])
_ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEE7_M_syncEPcmm@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [235], true>(char const (&) [44], char const (&) [235])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [242], true>(char const (&) [57], char const (&) [242])
layer_factory::PreCallFreeDescriptorSets(VkDevice_T*, VkDescriptorPool_T*, unsigned int, VkDescriptorSet_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [199], true>(char const (&) [46], char const (&) [199])
vulkan_layer_factory::CmdSetSampleLocationsEXT(VkCommandBuffer_T*, VkSampleLocationsInfoEXT const*)
vulkan_layer_factory::CmdSetBlendConstants(VkCommandBuffer_T*, float const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [184], true>(char const (&) [43], char const (&) [184])
vulkan_layer_factory::GetValidationCacheDataEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned long*, void*)
vulkan_layer_factory::TrimCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [202], true>(char const (&) [32], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [171], true>(char const (&) [47], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [222], true>(char const (&) [47], char const (&) [222])
vulkan_layer_factory::DestroyQueryPool(VkDevice_T*, VkQueryPool_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [227], true>(char const (&) [39], char const (&) [227])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [26], char const (&) [372], true>(char const (&) [26], char const (&) [372])
_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEmmm@@GLIBCXX_3.4.18
layer_factory::PreCallEnumeratePhysicalDeviceGroupsKHR(VkInstance_T*, unsigned int*, VkPhysicalDeviceGroupProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [209], true>(char const (&) [56], char const (&) [209])
layer_factory::PreCallCmdDraw(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int)
layer_factory::PostCallAllocateCommandBuffers(VkDevice_T*, VkCommandBufferAllocateInfo const*, VkCommandBuffer_T**)
vulkan_layer_factory::GetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkSampleCountFlagBits, unsigned int, VkImageTiling, unsigned int*, VkSparseImageFormatProperties*)
vulkan_layer_factory::GetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, VkSurfaceCapabilities2KHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [167], true>(char const (&) [44], char const (&) [167])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [224], true>(char const (&) [49], char const (&) [224])
malloc@@GLIBC_2.2.5
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, unsigned int, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>>::~unordered_map()
layer_factory::PostCallUpdateDescriptorSetWithTemplateKHR(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
layer_factory::PostCallRegisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectTableEntryNVX const* const*, unsigned int const*)
layer_factory::PreCallGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [208], true>(char const (&) [41], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [302], true>(char const (&) [32], char const (&) [302])
layer_factory::PreCallCmdFillBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
layer_factory::PostCallGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlaneProperties2KHR*)
layer_factory::PostCallGetDisplayModeProperties2KHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModeProperties2KHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [485], true>(char const (&) [39], char const (&) [485])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [73], char const (&) [208], true>(char const (&) [73], char const (&) [208])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [24], char const (&) [162], true>(char const (&) [24], char const (&) [162])
vulkan_layer_factory::CmdEndRenderPass2KHR(VkCommandBuffer_T*, VkSubpassEndInfoKHR const*)
layer_factory::PreCallQueueWaitIdle(VkQueue_T*)
std::vector<char const*, std::allocator<char const*>>::~vector()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [217], true>(char const (&) [34], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [240], true>(char const (&) [59], char const (&) [240])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [170], true>(char const (&) [45], char const (&) [170])
_ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_E@@GLIBCXX_3.4
layer_factory::PostCallGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [190], true>(char const (&) [46], char const (&) [190])
DeviceExtensions::get_info(char const*)::empty_info
layer_factory::PostCallCmdPushDescriptorSetKHR(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkWriteDescriptorSet const*)
InstanceExtensions::get_info(char const*)
layer_factory::PreCallEnumerateInstanceExtensionProperties(char const*, unsigned int*, VkExtensionProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [304], true>(char const (&) [39], char const (&) [304])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [219], true>(char const (&) [43], char const (&) [219])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc@@GLIBCXX_3.4.21
layer_factory::PreCallCmdExecuteCommands(VkCommandBuffer_T*, unsigned int, VkCommandBuffer_T* const*)
vulkan_layer_factory::CmdPushConstants(VkCommandBuffer_T*, VkPipelineLayout_T*, unsigned int, unsigned int, unsigned int, void const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [230], true>(char const (&) [34], char const (&) [230])
vuid_to_error_text_map[abi:cxx11]
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [272], true>(char const (&) [49], char const (&) [272])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [170], true>(char const (&) [52], char const (&) [170])
vulkan_layer_factory::GetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::initializer_list<InstanceExtensions::InstanceReq>, std::allocator<InstanceExtensions::InstanceReq> const&)
layer_factory::PostCallGetSwapchainImagesKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkImage_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [181], true>(char const (&) [48], char const (&) [181])
layer_factory::PostCallCreateDescriptorPool(VkDevice_T*, VkDescriptorPoolCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorPool_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [166], true>(char const (&) [45], char const (&) [166])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [231], true>(char const (&) [32], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [199], true>(char const (&) [41], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [281], true>(char const (&) [67], char const (&) [281])
layer_factory::PreCallGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
layer_factory::PreCallResetCommandBuffer(VkCommandBuffer_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [383], true>(char const (&) [58], char const (&) [383])
layer_factory::PostCallCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer_T*, VkDescriptorUpdateTemplate_T*, VkPipelineLayout_T*, unsigned int, void const*)
layer_factory::PostCallReleaseDisplayEXT(VkPhysicalDevice_T*, VkDisplayKHR_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [162], true>(char const (&) [42], char const (&) [162])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [161], true>(char const (&) [54], char const (&) [161])
layer_factory::PostCallBindBufferMemory2(VkDevice_T*, unsigned int, VkBindBufferMemoryInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [222], true>(char const (&) [44], char const (&) [222])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [549], true>(char const (&) [53], char const (&) [549])
layer_factory::PreCallMergeValidationCachesEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned int, VkValidationCacheEXT_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [253], true>(char const (&) [66], char const (&) [253])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [181], true>(char const (&) [34], char const (&) [181])
_end
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [163], true>(char const (&) [49], char const (&) [163])
layer_factory::PostCallCmdSetViewportWScalingNV(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewportWScalingNV const*)
vkEnumerateDeviceExtensionProperties
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [193], true>(char const (&) [40], char const (&) [193])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@@GLIBCXX_3.4.21
layer_factory::PostCallCmdProcessCommandsNVX(VkCommandBuffer_T*, VkCmdProcessCommandsInfoNVX const*)
std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf()
layer_factory::PreCallGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, unsigned int*, VkSurfaceFormat2KHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [264], true>(char const (&) [46], char const (&) [264])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [288], true>(char const (&) [60], char const (&) [288])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [333], true>(char const (&) [45], char const (&) [333])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [157], true>(char const (&) [50], char const (&) [157])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [387], true>(char const (&) [41], char const (&) [387])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [156], true>(char const (&) [60], char const (&) [156])
layer_factory::PreCallCreateSamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [247], true>(char const (&) [44], char const (&) [247])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [172], true>(char const (&) [48], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [34], true>(char const (&) [37], char const (&) [34])
vulkan_layer_factory::CmdCopyQueryPoolResults(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [152], true>(char const (&) [39], char const (&) [152])
layer_factory::PostCallGetRenderAreaGranularity(VkDevice_T*, VkRenderPass_T*, VkExtent2D*)
layer_factory::PostCallDestroyFramebuffer(VkDevice_T*, VkFramebuffer_T*, VkAllocationCallbacks const*)
strcmp@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [192], true>(char const (&) [46], char const (&) [192])
layer_factory::PreCallDestroyPipelineLayout(VkDevice_T*, VkPipelineLayout_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetDeviceMemoryCommitment(VkDevice_T*, VkDeviceMemory_T*, unsigned long*)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, unsigned int>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
layer_factory::PostCallCreateBufferView(VkDevice_T*, VkBufferViewCreateInfo const*, VkAllocationCallbacks const*, VkBufferView_T**)
vulkan_layer_factory::GetDeviceQueue2(VkDevice_T*, VkDeviceQueueInfo2 const*, VkQueue_T**)
vulkan_layer_factory::SetDebugUtilsObjectNameEXT(VkDevice_T*, VkDebugUtilsObjectNameInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [26], char const (&) [27], true>(char const (&) [26], char const (&) [27])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [229], true>(char const (&) [44], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [17], true>(char const (&) [39], char const (&) [17])
layer_factory::PostCallCreateValidationCacheEXT(VkDevice_T*, VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [179], true>(char const (&) [49], char const (&) [179])
vulkan_layer_factory::CmdCopyImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [145], true>(char const (&) [46], char const (&) [145])
layer_factory::PreCallBindImageMemory(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [155], true>(char const (&) [38], char const (&) [155])
_ZNSt6localeD1Ev@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [394], true>(char const (&) [40], char const (&) [394])
layer_factory::PreCallReleaseDisplayEXT(VkPhysicalDevice_T*, VkDisplayKHR_T*)
layer_factory::PreCallDestroySamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PostCallCmdFillBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
layer_factory::PreCallDeviceWaitIdle(VkDevice_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [214], true>(char const (&) [51], char const (&) [214])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [170], true>(char const (&) [48], char const (&) [170])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [187], true>(char const (&) [46], char const (&) [187])
layer_factory::PreCallDestroySwapchainKHR(VkDevice_T*, VkSwapchainKHR_T*, VkAllocationCallbacks const*)
layer_factory::PostCallSetDebugUtilsObjectTagEXT(VkDevice_T*, VkDebugUtilsObjectTagInfoEXT const*)
layer_factory::PreCallAllocateDescriptorSets(VkDevice_T*, VkDescriptorSetAllocateInfo const*, VkDescriptorSet_T**)
vtable for EnvExtensions
__cxa_throw_bad_array_new_length@@CXXABI_1.3.8
layer_factory::PostCallCmdBeginRenderPass2KHR(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassBeginInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [265], true>(char const (&) [35], char const (&) [265])
std::unordered_map<void*, instance_layer_data*, std::hash<void*>, std::equal_to<void*>, std::allocator<std::pair<void* const, instance_layer_data*>>>::~unordered_map()
layer_factory::PreCallCmdWriteBufferMarkerAMD(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkBuffer_T*, unsigned long, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [218], true>(char const (&) [43], char const (&) [218])
layer_factory::PreCallDestroyEvent(VkDevice_T*, VkEvent_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::CreateDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugUtilsMessengerEXT_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [435], true>(char const (&) [49], char const (&) [435])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [66], char const (&) [162], true>(char const (&) [66], char const (&) [162])
vulkan_layer_factory::DisplayPowerControlEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayPowerInfoEXT const*)
fprintf@@GLIBC_2.2.5
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [241], true>(char const (&) [71], char const (&) [241])
layer_factory::PostCallGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSurfaceInfo2KHR const*, VkSurfaceCapabilities2KHR*)
layer_factory::PreCallCmdSetDepthBounds(VkCommandBuffer_T*, float, float)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [65], char const (&) [228], true>(char const (&) [65], char const (&) [228])
vulkan_layer_factory::CreateDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
vulkan_layer_factory::CmdNextSubpass(VkCommandBuffer_T*, VkSubpassContents)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [157], true>(char const (&) [38], char const (&) [157])
vulkan_layer_factory::GetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlaneProperties2KHR*)
layer_factory::PostCallGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
vulkan_layer_factory::UpdateDescriptorSetWithTemplate(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
layer_factory::PreCallCmdCopyQueryPoolResults(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [194], true>(char const (&) [45], char const (&) [194])
layer_factory::PostCallGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
layer_factory::PostCallGetBufferMemoryRequirements(VkDevice_T*, VkBuffer_T*, VkMemoryRequirements*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [196], true>(char const (&) [45], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [183], true>(char const (&) [52], char const (&) [183])
layer_factory::PreCallGetPhysicalDeviceProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [253], true>(char const (&) [48], char const (&) [253])
vulkan_layer_factory::GetPhysicalDeviceProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [254], true>(char const (&) [67], char const (&) [254])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [379], true>(char const (&) [33], char const (&) [379])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [190], true>(char const (&) [57], char const (&) [190])
layer_factory::PreCallCmdBeginRenderPass2KHR(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassBeginInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [203], true>(char const (&) [44], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [226], true>(char const (&) [43], char const (&) [226])
__cxa_rethrow@@CXXABI_1.3
vulkan_layer_factory::GetPhysicalDeviceImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, VkImageFormatProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [240], true>(char const (&) [44], char const (&) [240])
vulkan_layer_factory::GetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice_T*, VkDisplayModeKHR_T*, unsigned int, VkDisplayPlaneCapabilitiesKHR*)
layer_factory::PreCallCmdSetScissor(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
pthread_mutex_lock@@GLIBC_2.2.5
layer_factory::PreCallMapMemory(VkDevice_T*, VkDeviceMemory_T*, unsigned long, unsigned long, unsigned int, void**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [185], true>(char const (&) [36], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [188], true>(char const (&) [42], char const (&) [188])
vulkan_layer_factory::GetImageSparseMemoryRequirements2KHR(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
layer_factory::PostCallGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice_T*, unsigned int, unsigned int*, VkDisplayKHR_T**)
vulkan_layer_factory::CreateBuffer(VkDevice_T*, VkBufferCreateInfo const*, VkAllocationCallbacks const*, VkBuffer_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [203], true>(char const (&) [43], char const (&) [203])
env_extensions_layer
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::pair<char const*, DeviceExtensions::DeviceInfo, true>(std::pair<char const*, DeviceExtensions::DeviceInfo>&&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [32], char const (&) [224], true>(char const (&) [32], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [246], true>(char const (&) [40], char const (&) [246])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [32], true>(char const (&) [34], char const (&) [32])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [364], true>(char const (&) [60], char const (&) [364])
vulkan_layer_factory::CreateDisplayPlaneSurfaceKHR(VkInstance_T*, VkDisplaySurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR_T**)
layer_factory::PostCallGetInstanceProcAddr(VkInstance_T*, char const*)
layer_factory::PreCallCreateDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorSetLayout_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [215], true>(char const (&) [48], char const (&) [215])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [196], true>(char const (&) [63], char const (&) [196])
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::set(std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [147], true>(char const (&) [51], char const (&) [147])
layer_factory::PreCallTrimCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PostCallAllocateMemory(VkDevice_T*, VkMemoryAllocateInfo const*, VkAllocationCallbacks const*, VkDeviceMemory_T**)
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [172], true>(char const (&) [39], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [290], true>(char const (&) [60], char const (&) [290])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [213], true>(char const (&) [56], char const (&) [213])
vulkan_layer_factory::DestroySamplerYcbcrConversionKHR(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetValidationCacheDataEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned long*, void*)
layer_factory::PostCallGetImageSparseMemoryRequirements2KHR(VkDevice_T*, VkImageSparseMemoryRequirementsInfo2 const*, unsigned int*, VkSparseImageMemoryRequirements2*)
__bss_start
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [246], true>(char const (&) [57], char const (&) [246])
layer_factory::PreCallGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice_T*, VkDeviceGeneratedCommandsFeaturesNVX*, VkDeviceGeneratedCommandsLimitsNVX*)
vulkan_layer_factory::CreateGraphicsPipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkGraphicsPipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [149], true>(char const (&) [41], char const (&) [149])
layer_factory::PreCallEnumerateDeviceExtensionProperties(VkPhysicalDevice_T*, char const*, unsigned int*, VkExtensionProperties*)
layer_factory::PostCallCreateDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
layer_factory::PostCallCmdResetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [208], true>(char const (&) [47], char const (&) [208])
layer_factory::PostCallDestroySurfaceKHR(VkInstance_T*, VkSurfaceKHR_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [158], true>(char const (&) [39], char const (&) [158])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [82], char const (&) [180], true>(char const (&) [82], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [196], true>(char const (&) [35], char const (&) [196])
vulkan_layer_factory::GetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, wl_display*)
layer_factory::PreCallGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkSurfaceFormatKHR*)
layer_factory::PreCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [218], true>(char const (&) [41], char const (&) [218])
vulkan_layer_factory::CmdBindDescriptorSets(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkDescriptorSet_T* const*, unsigned int, unsigned int const*)
vulkan_layer_factory::CmdBindIndexBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkIndexType)
layer_factory::PreCallCreateFence(VkDevice_T*, VkFenceCreateInfo const*, VkAllocationCallbacks const*, VkFence_T**)
layer_factory::PostCallGetBufferMemoryRequirements2KHR(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [201], true>(char const (&) [52], char const (&) [201])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [198], true>(char const (&) [45], char const (&) [198])
vulkan_layer_factory::RegisterDisplayEventEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
vulkan_layer_factory::DestroyEvent(VkDevice_T*, VkEvent_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::QueueBeginDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
vulkan_layer_factory::MergePipelineCaches(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkPipelineCache_T* const*)
vulkan_layer_factory::CmdEndRenderPass(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [185], true>(char const (&) [38], char const (&) [185])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [22], char const (&) [20], true>(char const (&) [22], char const (&) [20])
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Identity, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, true, true>>::_M_rehash(unsigned long, unsigned long const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [205], true>(char const (&) [60], char const (&) [205])
_ZNSt8ios_base4InitC1Ev@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [335], true>(char const (&) [51], char const (&) [335])
layer_factory::PostCallCmdBeginRenderPass(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassContents)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [217], true>(char const (&) [42], char const (&) [217])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@@GLIBCXX_3.4.21
layer_factory::PostCallCreateComputePipelines(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkComputePipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline_T**)
vulkan_layer_factory::GetSwapchainCounterEXT(VkDevice_T*, VkSwapchainKHR_T*, VkSurfaceCounterFlagBitsEXT, unsigned long*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [199], true>(char const (&) [39], char const (&) [199])
layer_factory::PreCallGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkPresentModeKHR*)
vulkan_layer_factory::GetBufferMemoryRequirements2KHR(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
layer_factory::PostCallCmdSetLineWidth(VkCommandBuffer_T*, float)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [208], true>(char const (&) [63], char const (&) [208])
vulkan_layer_factory::GetRefreshCycleDurationGOOGLE(VkDevice_T*, VkSwapchainKHR_T*, VkRefreshCycleDurationGOOGLE*)
layer_factory::PreCallCreateDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
vulkan_layer_factory::GetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice_T*, unsigned int, VkSurfaceKHR_T*, unsigned int*)
layer_factory::PostCallGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, VkImageFormatProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [26], char const (&) [23], true>(char const (&) [26], char const (&) [23])
vulkan_layer_factory::EndCommandBuffer(VkCommandBuffer_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [80], char const (&) [261], true>(char const (&) [80], char const (&) [261])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [297], true>(char const (&) [48], char const (&) [297])
layer_factory::PostCallFreeCommandBuffers(VkDevice_T*, VkCommandPool_T*, unsigned int, VkCommandBuffer_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [368], true>(char const (&) [50], char const (&) [368])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [203], true>(char const (&) [53], char const (&) [203])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [153], true>(char const (&) [54], char const (&) [153])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [174], true>(char const (&) [45], char const (&) [174])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [202], true>(char const (&) [44], char const (&) [202])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [211], true>(char const (&) [38], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [206], true>(char const (&) [37], char const (&) [206])
layer_factory::PostCallCreateEvent(VkDevice_T*, VkEventCreateInfo const*, VkAllocationCallbacks const*, VkEvent_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [219], true>(char const (&) [50], char const (&) [219])
layer_factory::PostCallApiFunction(char const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [317], true>(char const (&) [44], char const (&) [317])
vulkan_layer_factory::CmdBindVertexBuffers(VkCommandBuffer_T*, unsigned int, unsigned int, VkBuffer_T* const*, unsigned long const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [277], true>(char const (&) [37], char const (&) [277])
layer_factory::PostCallGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkRect2D*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [194], true>(char const (&) [48], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [70], char const (&) [345], true>(char const (&) [70], char const (&) [345])
vulkan_layer_factory::GetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [273], true>(char const (&) [44], char const (&) [273])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [175], true>(char const (&) [48], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [181], true>(char const (&) [47], char const (&) [181])
vulkan_layer_factory::GetDeviceGroupPeerMemoryFeatures(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
vulkan_layer_factory::CmdSetStencilCompareMask(VkCommandBuffer_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [198], true>(char const (&) [49], char const (&) [198])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [220], true>(char const (&) [43], char const (&) [220])
layer_factory::PostCallGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [260], true>(char const (&) [44], char const (&) [260])
vulkan_layer_factory::QueueWaitIdle(VkQueue_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [211], true>(char const (&) [57], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [206], true>(char const (&) [71], char const (&) [206])
layer_factory::PreCallGetBufferMemoryRequirements2KHR(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [224], true>(char const (&) [34], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [250], true>(char const (&) [63], char const (&) [250])
vulkan_layer_factory::CreateFence(VkDevice_T*, VkFenceCreateInfo const*, VkAllocationCallbacks const*, VkFence_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [249], true>(char const (&) [39], char const (&) [249])
vulkan_layer_factory::GetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilities2EXT*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [279], true>(char const (&) [49], char const (&) [279])
layer_factory::PostCallGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice_T*, unsigned int*, VkQueueFamilyProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [187], true>(char const (&) [62], char const (&) [187])
layer_factory::PreCallEnumerateDeviceLayerProperties(VkPhysicalDevice_T*, unsigned int*, VkLayerProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [358], true>(char const (&) [39], char const (&) [358])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [31], char const (&) [159], true>(char const (&) [31], char const (&) [159])
layer_factory::PostCallCreateInstance(VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance_T**)
layer_factory::PreCallCmdDrawIndexed(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, int, unsigned int)
layer_factory::PreCallGetBufferMemoryRequirements2(VkDevice_T*, VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [152], true>(char const (&) [53], char const (&) [152])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [160], true>(char const (&) [41], char const (&) [160])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [254], true>(char const (&) [48], char const (&) [254])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [210], true>(char const (&) [46], char const (&) [210])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [238], true>(char const (&) [53], char const (&) [238])
vulkan_layer_factory::CmdPushDescriptorSetKHR(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkWriteDescriptorSet const*)
layer_factory::PostCallCmdWaitEvents(VkCommandBuffer_T*, unsigned int, VkEvent_T* const*, unsigned int, unsigned int, unsigned int, VkMemoryBarrier const*, unsigned int, VkBufferMemoryBarrier const*, unsigned int, VkImageMemoryBarrier const*)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_M_rehash(unsigned long, unsigned long const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [259], true>(char const (&) [45], char const (&) [259])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [276], true>(char const (&) [39], char const (&) [276])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [170], true>(char const (&) [37], char const (&) [170])
layer_factory::PreCallAcquireXlibDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, VkDisplayKHR_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [140], true>(char const (&) [41], char const (&) [140])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [400], true>(char const (&) [52], char const (&) [400])
layer_factory::PreCallGetMemoryFdKHR(VkDevice_T*, VkMemoryGetFdInfoKHR const*, int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [242], true>(char const (&) [42], char const (&) [242])
layer_factory::PreCallSetHdrMetadataEXT(VkDevice_T*, unsigned int, VkSwapchainKHR_T* const*, VkHdrMetadataEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [167], true>(char const (&) [52], char const (&) [167])
layer_factory::PreCallRegisterDisplayEventEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [229], true>(char const (&) [68], char const (&) [229])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [166], true>(char const (&) [43], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [221], true>(char const (&) [54], char const (&) [221])
vulkan_layer_factory::CreatePipelineCache(VkDevice_T*, VkPipelineCacheCreateInfo const*, VkAllocationCallbacks const*, VkPipelineCache_T**)
vulkan_layer_factory::DestroyDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackEXT_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [171], true>(char const (&) [37], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [191], true>(char const (&) [48], char const (&) [191])
layer_factory::PreCallCmdResetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [226], true>(char const (&) [64], char const (&) [226])
layer_factory::PostCallGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceSparseImageFormatInfo2 const*, unsigned int*, VkSparseImageFormatProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [192], true>(char const (&) [47], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [216], true>(char const (&) [51], char const (&) [216])
layer_factory::PreCallCmdDrawIndexedIndirectCountAMD(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [70], char const (&) [205], true>(char const (&) [70], char const (&) [205])
memmove@@GLIBC_2.2.5
layer_factory::PreCallCmdCopyBufferToImage(VkCommandBuffer_T*, VkBuffer_T*, VkImage_T*, VkImageLayout, unsigned int, VkBufferImageCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [337], true>(char const (&) [48], char const (&) [337])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [198], true>(char const (&) [50], char const (&) [198])
std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf()
__cxa_end_catch@@CXXABI_1.3
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [322], true>(char const (&) [36], char const (&) [322])
vulkan_layer_factory::GetDeviceMemoryCommitment(VkDevice_T*, VkDeviceMemory_T*, unsigned long*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [176], true>(char const (&) [40], char const (&) [176])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [224], true>(char const (&) [59], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [177], true>(char const (&) [49], char const (&) [177])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [240], true>(char const (&) [55], char const (&) [240])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [228], true>(char const (&) [38], char const (&) [228])
vulkan_layer_factory::CmdCopyImageToBuffer(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkBuffer_T*, unsigned int, VkBufferImageCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [225], true>(char const (&) [63], char const (&) [225])
layer_factory::PostCallEnumerateInstanceLayerProperties(unsigned int*, VkLayerProperties*)
layer_factory::PostCallGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice_T*, VkFormat, VkImageType, VkImageTiling, unsigned int, unsigned int, unsigned int, VkExternalImageFormatPropertiesNV*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [481], true>(char const (&) [42], char const (&) [481])
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::set(std::initializer_list<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&)
vulkan_layer_factory::GetSwapchainImagesKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned int*, VkImage_T**)
layer_factory::PostCallGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice_T*, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>::~pair()
__gxx_personality_v0@@CXXABI_1.3
layer_factory::PreCallDestroyBuffer(VkDevice_T*, VkBuffer_T*, VkAllocationCallbacks const*)
layer_factory::PreCallCmdSetStencilReference(VkCommandBuffer_T*, unsigned int, unsigned int)
layer_factory::PreCallGetInstanceProcAddr(VkInstance_T*, char const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [166], true>(char const (&) [38], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [174], true>(char const (&) [39], char const (&) [174])
layer_factory::PostCallCmdDrawIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
vulkan_layer_factory::CreateDescriptorUpdateTemplateKHR(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
layer_factory::PreCallResetEvent(VkDevice_T*, VkEvent_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [269], true>(char const (&) [36], char const (&) [269])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [245], true>(char const (&) [60], char const (&) [245])
vulkan_layer_factory::EnumerateDeviceLayerProperties(VkPhysicalDevice_T*, unsigned int*, VkLayerProperties*)
layer_factory::PreCallCmdDebugMarkerBeginEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
layer_factory::PostCallRegisterDisplayEventEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [178], true>(char const (&) [55], char const (&) [178])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [316], true>(char const (&) [56], char const (&) [316])
layer_factory::PostCallCreateShaderModule(VkDevice_T*, VkShaderModuleCreateInfo const*, VkAllocationCallbacks const*, VkShaderModule_T**)
layer_factory::PostCallGetImageSparseMemoryRequirements(VkDevice_T*, VkImage_T*, unsigned int*, VkSparseImageMemoryRequirements*)
layer_factory::PostCallCmdInsertDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallSetHdrMetadataEXT(VkDevice_T*, unsigned int, VkSwapchainKHR_T* const*, VkHdrMetadataEXT const*)
vulkan_layer_factory::SetDebugUtilsObjectTagEXT(VkDevice_T*, VkDebugUtilsObjectTagInfoEXT const*)
vulkan_layer_factory::GetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PostCallQueueBindSparse(VkQueue_T*, unsigned int, VkBindSparseInfo const*, VkFence_T*)
layer_factory::PostCallCmdSetSampleLocationsEXT(VkCommandBuffer_T*, VkSampleLocationsInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [355], true>(char const (&) [47], char const (&) [355])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [63], char const (&) [338], true>(char const (&) [63], char const (&) [338])
layer_factory::PreCallGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice_T*, VkDisplayPlaneInfo2KHR const*, VkDisplayPlaneCapabilities2KHR*)
layer_factory::PreCallQueueEndDebugUtilsLabelEXT(VkQueue_T*)
layer_factory::PostCallGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [182], true>(char const (&) [50], char const (&) [182])
std::vector<char const*, std::allocator<char const*>>::~vector()
vulkan_layer_factory::GetFenceFdKHR(VkDevice_T*, VkFenceGetFdInfoKHR const*, int*)
layer_factory::PostCallGetDeviceGroupSurfacePresentModesKHR(VkDevice_T*, VkSurfaceKHR_T*, unsigned int*)
DeviceExtensions::get_info(char const*)::info_map[abi:cxx11]
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [325], true>(char const (&) [48], char const (&) [325])
layer_factory::PreCallCmdSetCheckpointNV(VkCommandBuffer_T*, void const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [149], true>(char const (&) [50], char const (&) [149])
layer_factory::PostCallResetDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [194], true>(char const (&) [61], char const (&) [194])
layer_factory::PreCallCmdBeginConditionalRenderingEXT(VkCommandBuffer_T*, VkConditionalRenderingBeginInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [285], true>(char const (&) [40], char const (&) [285])
layer_factory::PreCallDestroyInstance(VkInstance_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [232], true>(char const (&) [44], char const (&) [232])
layer_factory::PostCallCmdDrawIndexedIndirectCountKHR(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [198], true>(char const (&) [42], char const (&) [198])
layer_factory::PostCallGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice_T*, unsigned int, xcb_connection_t*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [184], true>(char const (&) [51], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [216], true>(char const (&) [59], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [167], true>(char const (&) [36], char const (&) [167])
layer_factory::PreCallQueueBeginDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [316], true>(char const (&) [49], char const (&) [316])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [300], true>(char const (&) [35], char const (&) [300])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [52], char const (&) [169], true>(char const (&) [52], char const (&) [169])
_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate@@GLIBCXX_3.4
vulkan_layer_factory::CmdSetEvent(VkCommandBuffer_T*, VkEvent_T*, unsigned int)
_ZNKSt9basic_iosIcSt11char_traitsIcEE4goodEv@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [227], true>(char const (&) [42], char const (&) [227])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [245], true>(char const (&) [44], char const (&) [245])
vulkan_layer_factory::GetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, VkSurfaceCapabilitiesKHR*)
layer_factory::PostCallCmdBeginDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PostCallCmdBindDescriptorSets(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipelineLayout_T*, unsigned int, unsigned int, VkDescriptorSet_T* const*, unsigned int, unsigned int const*)
vulkan_layer_factory::GetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
typeinfo for EnvExtensions
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [290], true>(char const (&) [41], char const (&) [290])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [162], true>(char const (&) [43], char const (&) [162])
layer_factory::PostCallDisplayPowerControlEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayPowerInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [246], true>(char const (&) [53], char const (&) [246])
layer_factory::PostCallCmdDispatchBase(VkCommandBuffer_T*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [180], true>(char const (&) [55], char const (&) [180])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [186], true>(char const (&) [44], char const (&) [186])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [221], true>(char const (&) [47], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [233], true>(char const (&) [43], char const (&) [233])
layer_factory::PostCallCreateSwapchainKHR(VkDevice_T*, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
layer_factory::PostCallDestroyIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutNVX_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [183], true>(char const (&) [50], char const (&) [183])
vulkan_layer_factory::CmdBeginConditionalRenderingEXT(VkCommandBuffer_T*, VkConditionalRenderingBeginInfoEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [163], true>(char const (&) [41], char const (&) [163])
vulkan_layer_factory::ResetDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, unsigned int)
layer_factory::PreCallCmdCopyBuffer(VkCommandBuffer_T*, VkBuffer_T*, VkBuffer_T*, unsigned int, VkBufferCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [380], true>(char const (&) [34], char const (&) [380])
vulkan_layer_factory::CmdResolveImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageResolve const*)
layer_factory::PostCallCreateSamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion_T**)
layer_factory::PostCallCmdBindIndexBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, VkIndexType)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [472], true>(char const (&) [49], char const (&) [472])
layer_factory::PreCallCreateEvent(VkDevice_T*, VkEventCreateInfo const*, VkAllocationCallbacks const*, VkEvent_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [253], true>(char const (&) [35], char const (&) [253])
vulkan_layer_factory::DestroyInstance(VkInstance_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::DestroySamplerYcbcrConversion(VkDevice_T*, VkSamplerYcbcrConversion_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetQueueCheckpointDataNV(VkQueue_T*, unsigned int*, VkCheckpointDataNV*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [205], true>(char const (&) [54], char const (&) [205])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [168], true>(char const (&) [42], char const (&) [168])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [172], true>(char const (&) [40], char const (&) [172])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [330], true>(char const (&) [47], char const (&) [330])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [68], char const (&) [236], true>(char const (&) [68], char const (&) [236])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [230], true>(char const (&) [51], char const (&) [230])
vulkan_layer_factory::AllocateDescriptorSets(VkDevice_T*, VkDescriptorSetAllocateInfo const*, VkDescriptorSet_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [388], true>(char const (&) [42], char const (&) [388])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [62], char const (&) [162], true>(char const (&) [62], char const (&) [162])
vulkan_layer_factory::GetPhysicalDeviceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceProperties*)
vulkan_layer_factory::GetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkPresentModeKHR*)
layer_factory::PostCallAcquireNextImage2KHR(VkDevice_T*, VkAcquireNextImageInfoKHR const*, unsigned int*)
vulkan_layer_factory::SetEvent(VkDevice_T*, VkEvent_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [169], true>(char const (&) [37], char const (&) [169])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [171], true>(char const (&) [46], char const (&) [171])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [183], true>(char const (&) [51], char const (&) [183])
layer_factory::PreCallFlushMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
vulkan_layer_factory::GetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice_T*, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*)
layer_factory::PreCallCmdBeginDebugUtilsLabelEXT(VkCommandBuffer_T*, VkDebugUtilsLabelEXT const*)
layer_factory::PreCallGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice_T*, VkSurfaceKHR_T*, unsigned int*, VkRect2D*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [429], true>(char const (&) [42], char const (&) [429])
layer_factory::PreCallGetDeviceGroupPeerMemoryFeatures(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
layer_factory::PostCallQueueWaitIdle(VkQueue_T*)
vulkan_layer_factory::RegisterDeviceEventEXT(VkDevice_T*, VkDeviceEventInfoEXT const*, VkAllocationCallbacks const*, VkFence_T**)
_ITM_deregisterTMCloneTable
layer_factory::PreCallDestroyValidationCacheEXT(VkDevice_T*, VkValidationCacheEXT_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [143], true>(char const (&) [47], char const (&) [143])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [216], true>(char const (&) [43], char const (&) [216])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [236], true>(char const (&) [61], char const (&) [236])
InstanceExtensions::InstanceInfo::~InstanceInfo()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [25], char const (&) [23], true>(char const (&) [25], char const (&) [23])
layer_factory::PostCallDebugReportMessageEXT(VkInstance_T*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*)
_Unwind_Resume@@GCC_3.0
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [58], char const (&) [193], true>(char const (&) [58], char const (&) [193])
layer_factory::PostCallDestroyDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::GetImageMemoryRequirements2(VkDevice_T*, VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2*)
_ZNSaIcEC1Ev@@GLIBCXX_3.4
layer_factory::PostCallGetPhysicalDeviceFeatures2(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
layer_factory::PreCallCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer_T*, VkDescriptorUpdateTemplate_T*, VkPipelineLayout_T*, unsigned int, void const*)
layer_factory::PostCallDestroyDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [203], true>(char const (&) [56], char const (&) [203])
std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>>::vector(std::vector<InstanceExtensions::InstanceReq, std::allocator<InstanceExtensions::InstanceReq>> const&)
layer_factory::PostCallGetPhysicalDeviceProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [194], true>(char const (&) [46], char const (&) [194])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [166], true>(char const (&) [41], char const (&) [166])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [433], true>(char const (&) [51], char const (&) [433])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [60], char const (&) [234], true>(char const (&) [60], char const (&) [234])
layer_factory::PostCallCmdClearColorImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearColorValue const*, unsigned int, VkImageSubresourceRange const*)
layer_factory::PostCallCmdBeginConditionalRenderingEXT(VkCommandBuffer_T*, VkConditionalRenderingBeginInfoEXT const*)
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@@GLIBCXX_3.4.21
vulkan_layer_factory::EnumeratePhysicalDevices(VkInstance_T*, unsigned int*, VkPhysicalDevice_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [375], true>(char const (&) [50], char const (&) [375])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [199], true>(char const (&) [44], char const (&) [199])
layer_factory::PostCallCreateSharedSwapchainsKHR(VkDevice_T*, unsigned int, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [380], true>(char const (&) [39], char const (&) [380])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [347], true>(char const (&) [40], char const (&) [347])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [225], true>(char const (&) [38], char const (&) [225])
vulkan_layer_factory::GetPhysicalDeviceFeatures2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceFeatures2*)
vulkan_layer_factory::CmdSetCheckpointNV(VkCommandBuffer_T*, void const*)
layer_factory::PostCallDestroyCommandPool(VkDevice_T*, VkCommandPool_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [69], char const (&) [237], true>(char const (&) [69], char const (&) [237])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [199], true>(char const (&) [53], char const (&) [199])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [184], true>(char const (&) [46], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [444], true>(char const (&) [59], char const (&) [444])
layer_factory::PostCallCmdDrawIndirect(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned int, unsigned int)
layer_factory::PostCallBindBufferMemory(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned long)
__cxa_guard_acquire@@CXXABI_1.3
vulkan_layer_factory::CreateFramebuffer(VkDevice_T*, VkFramebufferCreateInfo const*, VkAllocationCallbacks const*, VkFramebuffer_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [37], char const (&) [187], true>(char const (&) [37], char const (&) [187])
layer_factory::PreCallCreateImageView(VkDevice_T*, VkImageViewCreateInfo const*, VkAllocationCallbacks const*, VkImageView_T**)
layer_factory::PostCallGetQueryPoolResults(VkDevice_T*, VkQueryPool_T*, unsigned int, unsigned int, unsigned long, void*, unsigned long, unsigned int)
layer_factory::PreCallMergePipelineCaches(VkDevice_T*, VkPipelineCache_T*, unsigned int, VkPipelineCache_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [161], true>(char const (&) [42], char const (&) [161])
vulkan_layer_factory::CmdClearAttachments(VkCommandBuffer_T*, unsigned int, VkClearAttachment const*, unsigned int, VkClearRect const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [173], true>(char const (&) [41], char const (&) [173])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [182], true>(char const (&) [54], char const (&) [182])
vulkan_layer_factory::CreateDescriptorSetLayout(VkDevice_T*, VkDescriptorSetLayoutCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorSetLayout_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [179], true>(char const (&) [56], char const (&) [179])
layer_factory::PreCallCreateRenderPass2KHR(VkDevice_T*, VkRenderPassCreateInfo2KHR const*, VkAllocationCallbacks const*, VkRenderPass_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [204], true>(char const (&) [45], char const (&) [204])
vulkan_layer_factory::GetSwapchainStatusKHR(VkDevice_T*, VkSwapchainKHR_T*)
layer_factory::PreCallUpdateDescriptorSetWithTemplateKHR(VkDevice_T*, VkDescriptorSet_T*, VkDescriptorUpdateTemplate_T*, void const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [45], char const (&) [303], true>(char const (&) [45], char const (&) [303])
layer_factory::PostCallCmdWriteTimestamp(VkCommandBuffer_T*, VkPipelineStageFlagBits, VkQueryPool_T*, unsigned int)
layer_factory::PostCallGetImageMemoryRequirements(VkDevice_T*, VkImage_T*, VkMemoryRequirements*)
layer_factory::PostCallCmdExecuteCommands(VkCommandBuffer_T*, unsigned int, VkCommandBuffer_T* const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [23], char const (&) [33], true>(char const (&) [23], char const (&) [33])
vulkan_layer_factory::CmdBindPipeline(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipeline_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [221], true>(char const (&) [61], char const (&) [221])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [59], char const (&) [210], true>(char const (&) [59], char const (&) [210])
layer_factory::PreCallApiFunction(char const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [253], true>(char const (&) [51], char const (&) [253])
layer_factory::PreCallGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice_T*, VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties*)
layer_factory::PreCallTrimCommandPoolKHR(VkDevice_T*, VkCommandPool_T*, unsigned int)
layer_factory::PostCallResetCommandBuffer(VkCommandBuffer_T*, unsigned int)
layer_factory::PreCallCmdSetDiscardRectangleEXT(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
layer_factory::PreCallUnmapMemory(VkDevice_T*, VkDeviceMemory_T*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [64], char const (&) [244], true>(char const (&) [64], char const (&) [244])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [34], char const (&) [184], true>(char const (&) [34], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>::~pair()
layer_factory::PreCallGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice_T*, unsigned int, unsigned int, unsigned int, unsigned int*)
layer_factory::PreCallWaitForFences(VkDevice_T*, unsigned int, VkFence_T* const*, unsigned int, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [175], true>(char const (&) [50], char const (&) [175])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [192], true>(char const (&) [67], char const (&) [192])
vulkan_layer_factory::GetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice_T*, unsigned int*, VkDisplayPlanePropertiesKHR*)
_ZNKSt9basic_iosIcSt11char_traitsIcEE3eofEv@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [71], char const (&) [211], true>(char const (&) [71], char const (&) [211])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [395], true>(char const (&) [49], char const (&) [395])
vulkan_layer_factory::CreateImage(VkDevice_T*, VkImageCreateInfo const*, VkAllocationCallbacks const*, VkImage_T**)
_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [167], true>(char const (&) [43], char const (&) [167])
layer_factory::PostCallDestroySampler(VkDevice_T*, VkSampler_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [180], true>(char const (&) [48], char const (&) [180])
vulkan_layer_factory::RegisterObjectsNVX(VkDevice_T*, VkObjectTableNVX_T*, unsigned int, VkObjectTableEntryNVX const* const*, unsigned int const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [413], true>(char const (&) [41], char const (&) [413])
vulkan_layer_factory::MergeValidationCachesEXT(VkDevice_T*, VkValidationCacheEXT_T*, unsigned int, VkValidationCacheEXT_T* const*)
std::set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>::~set()
layer_factory::PreCallDestroyDescriptorPool(VkDevice_T*, VkDescriptorPool_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [278], true>(char const (&) [42], char const (&) [278])
vulkan_layer_factory::CreateCommandPool(VkDevice_T*, VkCommandPoolCreateInfo const*, VkAllocationCallbacks const*, VkCommandPool_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [197], true>(char const (&) [57], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [38], char const (&) [226], true>(char const (&) [38], char const (&) [226])
layer_factory::PreCallDestroyDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplate_T*, VkAllocationCallbacks const*)
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, InstanceExtensions::InstanceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>>::~unordered_map()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [159], true>(char const (&) [67], char const (&) [159])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [305], true>(char const (&) [35], char const (&) [305])
layer_factory::PostCallGetDeviceQueue2(VkDevice_T*, VkDeviceQueueInfo2 const*, VkQueue_T**)
vulkan_layer_factory::DebugMarkerSetObjectTagEXT(VkDevice_T*, VkDebugMarkerObjectTagInfoEXT const*)
layer_factory::PreCallDestroyDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerEXT_T*, VkAllocationCallbacks const*)
guard variable for InstanceExtensions::InitFromInstanceCreateInfo(unsigned int, VkInstanceCreateInfo const*)::V_1_0_promoted_instance_extensions
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>> const&)
layer_factory::PreCallAcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)
vulkan_layer_factory::GetPhysicalDeviceProperties2(VkPhysicalDevice_T*, VkPhysicalDeviceProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [24], char const (&) [33], true>(char const (&) [24], char const (&) [33])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [53], char const (&) [177], true>(char const (&) [53], char const (&) [177])
vulkan_layer_factory::CmdFillBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, unsigned int)
layer_factory::PreCallCmdCopyImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkImage_T*, VkImageLayout, unsigned int, VkImageCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [138], true>(char const (&) [39], char const (&) [138])
layer_factory::PostCallDestroyDebugReportCallbackEXT(VkInstance_T*, VkDebugReportCallbackEXT_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [231], true>(char const (&) [51], char const (&) [231])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [239], true>(char const (&) [43], char const (&) [239])
layer_factory::PostCallCreateRenderPass(VkDevice_T*, VkRenderPassCreateInfo const*, VkAllocationCallbacks const*, VkRenderPass_T**)
layer_factory::PostCallCmdSetStencilCompareMask(VkCommandBuffer_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [242], true>(char const (&) [54], char const (&) [242])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [183], true>(char const (&) [55], char const (&) [183])
layer_factory::PostCallGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice_T*, VkFormat, VkFormatProperties2*)
layer_factory::PostCallCmdCopyBuffer(VkCommandBuffer_T*, VkBuffer_T*, VkBuffer_T*, unsigned int, VkBufferCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [200], true>(char const (&) [43], char const (&) [200])
layer_factory::PreCallBeginCommandBuffer(VkCommandBuffer_T*, VkCommandBufferBeginInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [276], true>(char const (&) [42], char const (&) [276])
vulkan_layer_factory::CmdBeginRenderPass2KHR(VkCommandBuffer_T*, VkRenderPassBeginInfo const*, VkSubpassBeginInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [54], char const (&) [222], true>(char const (&) [54], char const (&) [222])
vulkan_layer_factory::GetBufferMemoryRequirements(VkDevice_T*, VkBuffer_T*, VkMemoryRequirements*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [314], true>(char const (&) [48], char const (&) [314])
layer_factory::PreCallCmdSetDeviceMask(VkCommandBuffer_T*, unsigned int)
vulkan_layer_factory::CmdCopyBufferToImage(VkCommandBuffer_T*, VkBuffer_T*, VkImage_T*, VkImageLayout, unsigned int, VkBufferImageCopy const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [223], true>(char const (&) [48], char const (&) [223])
__gmon_start__
vulkan_layer_factory::GetImageMemoryRequirements(VkDevice_T*, VkImage_T*, VkMemoryRequirements*)
layer_factory::PostCallResetFences(VkDevice_T*, unsigned int, VkFence_T* const*)
vulkan_layer_factory::AcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [252], true>(char const (&) [49], char const (&) [252])
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>>>::~unordered_map()
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [287], true>(char const (&) [42], char const (&) [287])
layer_factory::PostCallGetPhysicalDeviceProperties(VkPhysicalDevice_T*, VkPhysicalDeviceProperties*)
layer_factory::PostCallCreateDescriptorUpdateTemplate(VkDevice_T*, VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [224], true>(char const (&) [43], char const (&) [224])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [69], char const (&) [231], true>(char const (&) [69], char const (&) [231])
void std::vector<char const*, std::allocator<char const*>>::_M_realloc_insert<char const* const&>(__gnu_cxx::__normal_iterator<char const**, std::vector<char const*, std::allocator<char const*>>>, char const* const&)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [67], char const (&) [268], true>(char const (&) [67], char const (&) [268])
layer_factory::PostCallTrimCommandPoolKHR(VkDevice_T*, VkCommandPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [244], true>(char const (&) [41], char const (&) [244])
vulkan_layer_factory::DestroySampler(VkDevice_T*, VkSampler_T*, VkAllocationCallbacks const*)
vulkan_layer_factory::InvalidateMappedMemoryRanges(VkDevice_T*, unsigned int, VkMappedMemoryRange const*)
layer_factory::PostCallQueueInsertDebugUtilsLabelEXT(VkQueue_T*, VkDebugUtilsLabelEXT const*)
_ITM_registerTMCloneTable
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [185], true>(char const (&) [44], char const (&) [185])
layer_factory::PostCallCmdEndRenderPass2KHR(VkCommandBuffer_T*, VkSubpassEndInfoKHR const*)
vulkan_layer_factory::CmdClearColorImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearColorValue const*, unsigned int, VkImageSubresourceRange const*)
vulkan_layer_factory::BindImageMemory(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, unsigned long)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [236], true>(char const (&) [40], char const (&) [236])
vulkan_layer_factory::CreateSharedSwapchainsKHR(VkDevice_T*, unsigned int, VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR_T**)
vulkan_layer_factory::DestroyDevice(VkDevice_T*, VkAllocationCallbacks const*)
std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, DeviceExtensions::DeviceInfo, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, DeviceExtensions::DeviceInfo>>>::~unordered_map()
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc@@GLIBCXX_3.4.21
vulkan_layer_factory::CmdClearDepthStencilImage(VkCommandBuffer_T*, VkImage_T*, VkImageLayout, VkClearDepthStencilValue const*, unsigned int, VkImageSubresourceRange const*)
layer_factory::PreCallCmdNextSubpass(VkCommandBuffer_T*, VkSubpassContents)
layer_factory::PostCallCmdNextSubpass(VkCommandBuffer_T*, VkSubpassContents)
std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>>, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>>::_Hashtable<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*>(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo> const*, unsigned long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>> const&, std::__detail::_Select1st const&, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, InstanceExtensions::InstanceInfo>> const&)
layer_factory::PreCallCmdSetDepthBias(VkCommandBuffer_T*, float, float, float)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [204], true>(char const (&) [46], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [210], true>(char const (&) [48], char const (&) [210])
layer_factory::PostCallSubmitDebugUtilsMessageEXT(VkInstance_T*, VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [251], true>(char const (&) [42], char const (&) [251])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [168], true>(char const (&) [49], char const (&) [168])
vulkan_layer_factory::ResetCommandPool(VkDevice_T*, VkCommandPool_T*, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [182], true>(char const (&) [57], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [176], true>(char const (&) [57], char const (&) [176])
vulkan_layer_factory::CmdDebugMarkerInsertEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
layer_factory::PreCallCreateCommandPool(VkDevice_T*, VkCommandPoolCreateInfo const*, VkAllocationCallbacks const*, VkCommandPool_T**)
layer_factory::PostCallGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice_T*, VkPhysicalDeviceMemoryProperties2*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [169], true>(char const (&) [50], char const (&) [169])
layer_factory::PreCallCmdSetViewport(VkCommandBuffer_T*, unsigned int, unsigned int, VkViewport const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [43], char const (&) [182], true>(char const (&) [43], char const (&) [182])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [184], true>(char const (&) [48], char const (&) [184])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [40], char const (&) [197], true>(char const (&) [40], char const (&) [197])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [273], true>(char const (&) [41], char const (&) [273])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [47], char const (&) [211], true>(char const (&) [47], char const (&) [211])
vulkan_layer_factory::DestroyDebugUtilsMessengerEXT(VkInstance_T*, VkDebugUtilsMessengerEXT_T*, VkAllocationCallbacks const*)
layer_factory::PostCallCmdNextSubpass2KHR(VkCommandBuffer_T*, VkSubpassBeginInfoKHR const*, VkSubpassEndInfoKHR const*)
layer_factory::PostCallDestroyPipelineCache(VkDevice_T*, VkPipelineCache_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [44], char const (&) [159], true>(char const (&) [44], char const (&) [159])
layer_factory::PreCallCmdBindPipeline(VkCommandBuffer_T*, VkPipelineBindPoint, VkPipeline_T*)
layer_factory::PostCallAcquireXlibDisplayEXT(VkPhysicalDevice_T*, _XDisplay*, VkDisplayKHR_T*)
vulkan_layer_factory::GetDisplayModeProperties2KHR(VkPhysicalDevice_T*, VkDisplayKHR_T*, unsigned int*, VkDisplayModeProperties2KHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [22], char const (&) [17], true>(char const (&) [22], char const (&) [17])
vulkan_layer_factory::CmdDebugMarkerBeginEXT(VkCommandBuffer_T*, VkDebugMarkerMarkerInfoEXT const*)
vulkan_layer_factory::GetDeviceQueue(VkDevice_T*, unsigned int, unsigned int, VkQueue_T**)
layer_factory::PostCallGetDeviceGroupPresentCapabilitiesKHR(VkDevice_T*, VkDeviceGroupPresentCapabilitiesKHR*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [177], true>(char const (&) [50], char const (&) [177])
vulkan_layer_factory::TrimCommandPoolKHR(VkDevice_T*, VkCommandPool_T*, unsigned int)
vulkan_layer_factory::CmdBeginQuery(VkCommandBuffer_T*, VkQueryPool_T*, unsigned int, unsigned int)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [57], char const (&) [187], true>(char const (&) [57], char const (&) [187])
layer_factory::PostCallImportFenceFdKHR(VkDevice_T*, VkImportFenceFdInfoKHR const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [42], char const (&) [204], true>(char const (&) [42], char const (&) [204])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [56], char const (&) [189], true>(char const (&) [56], char const (&) [189])
vulkan_layer_factory::DebugReportMessageEXT(VkInstance_T*, unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [61], char const (&) [196], true>(char const (&) [61], char const (&) [196])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [55], char const (&) [208], true>(char const (&) [55], char const (&) [208])
vulkan_layer_factory::BindImageMemory2(VkDevice_T*, unsigned int, VkBindImageMemoryInfo const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [192], true>(char const (&) [48], char const (&) [192])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [36], char const (&) [168], true>(char const (&) [36], char const (&) [168])
EnvExtensions::PreCallCreateDevice(VkPhysicalDevice_T*, VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice_T**)
vulkan_layer_factory::AllocateCommandBuffers(VkDevice_T*, VkCommandBufferAllocateInfo const*, VkCommandBuffer_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [239], true>(char const (&) [48], char const (&) [239])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [50], char const (&) [303], true>(char const (&) [50], char const (&) [303])
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEm@@GLIBCXX_3.4.21
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [35], char const (&) [152], true>(char const (&) [35], char const (&) [152])
layer_factory::PostCallGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice_T*, VkDeviceGeneratedCommandsFeaturesNVX*, VkDeviceGeneratedCommandsLimitsNVX*)
layer_factory::PreCallDisplayPowerControlEXT(VkDevice_T*, VkDisplayKHR_T*, VkDisplayPowerInfoEXT const*)
_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE@@GLIBCXX_3.4.21
_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcm@@GLIBCXX_3.4.21
layer_factory::PostCallDestroyPipeline(VkDevice_T*, VkPipeline_T*, VkAllocationCallbacks const*)
layer_factory::PreCallGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice_T*, VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties*)
layer_factory::PreCallCmdUpdateBuffer(VkCommandBuffer_T*, VkBuffer_T*, unsigned long, unsigned long, void const*)
layer_factory::PreCallDestroyIndirectCommandsLayoutNVX(VkDevice_T*, VkIndirectCommandsLayoutNVX_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [33], char const (&) [230], true>(char const (&) [33], char const (&) [230])
layer_factory::PostCallDestroyQueryPool(VkDevice_T*, VkQueryPool_T*, VkAllocationCallbacks const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [302], true>(char const (&) [41], char const (&) [302])
layer_factory::PostCallDestroyPipelineLayout(VkDevice_T*, VkPipelineLayout_T*, VkAllocationCallbacks const*)
std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char>>::~basic_stringbuf()
layer_factory::PreCallSetDebugUtilsObjectNameEXT(VkDevice_T*, VkDebugUtilsObjectNameInfoEXT const*)
vulkan_layer_factory::CmdSetDiscardRectangleEXT(VkCommandBuffer_T*, unsigned int, unsigned int, VkRect2D const*)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [48], char const (&) [396], true>(char const (&) [48], char const (&) [396])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [39], char const (&) [173], true>(char const (&) [39], char const (&) [173])
layer_factory::PostCallCmdSetStencilReference(VkCommandBuffer_T*, unsigned int, unsigned int)
_ZNSt6localeC1Ev@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [51], char const (&) [239], true>(char const (&) [51], char const (&) [239])
layer_factory::PreCallSetEvent(VkDevice_T*, VkEvent_T*)
_ZNSt8ios_base4InitD1Ev@@GLIBCXX_3.4
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [41], char const (&) [238], true>(char const (&) [41], char const (&) [238])
layer_factory::PreCallCreateShaderModule(VkDevice_T*, VkShaderModuleCreateInfo const*, VkAllocationCallbacks const*, VkShaderModule_T**)
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [30], char const (&) [325], true>(char const (&) [30], char const (&) [325])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [49], char const (&) [217], true>(char const (&) [49], char const (&) [217])
std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>>::pair<char const (&) [46], char const (&) [263], true>(char const (&) [46], char const (&) [263])
GCC: (Ubuntu 7.3.0-16ubuntu3) 7.3.0
