 B __bss_start
 B _edata
 B _end
 SDL_GetError
 SDL_GetPowerInfo
 SDL_SetThreadPriority
 T HmdSystemFactory
 T VRClientCoreFactory
 T xrNegotiateLoaderRuntimeInterface
 V typeinfo for bool (*)(char)
 V typeinfo for bool (char)
 V typeinfo for void (*)(char const*, char const*, unsigned int, bool, void*, bool*)
 V typeinfo for void (char const*, char const*, unsigned int, bool, void*, bool*)
 V typeinfo name for bool (*)(char)
 V typeinfo name for bool (char)
 V typeinfo name for void (*)(char const*, char const*, unsigned int, bool, void*, bool*)
 V typeinfo name for void (char const*, char const*, unsigned int, bool, void*, bool*)
 VTT for std::basic_ifstream<char, std::char_traits<char> >
 VTT for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >
 VTT for std::basic_ofstream<char, std::char_traits<char> >
 VTT for std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >
 VTT for std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >
 _ITM_deregisterTMCloneTable
 _ITM_registerTMCloneTable
 __assert_fail
 __cxa_allocate_exception
 __cxa_atexit
 __cxa_bad_cast
 __cxa_begin_catch
 __cxa_end_catch
 __cxa_finalize
 __cxa_free_exception
 __cxa_guard_abort
 __cxa_guard_acquire
 __cxa_guard_release
 __cxa_pure_virtual
 __cxa_rethrow
 __cxa_throw
 __cxa_throw_bad_array_new_length
 __dynamic_cast
 __errno_location
 __fprintf_chk
 __fxstat
 __gmon_start__
 __gxx_personality_v0
 __isoc99_sscanf
 __printf_chk
 __pthread_key_create
 __snprintf_chk
 __sprintf_chk
 __stack_chk_fail
 __tls_get_addr
 __vsnprintf_chk
 __xstat
 __xstat64
 _exit
 abort
 accept
 acosf
 alphasort
 asinf
 atan2
 atan2f
 atanf
 b (anonymous namespace)::CPackedBoneTransforms_descriptor_
 b (anonymous namespace)::CPackedBoneTransforms_reflection_
 b (anonymous namespace)::CVRMsg_AbortApplicationTransition_descriptor_
 b (anonymous namespace)::CVRMsg_AbortApplicationTransition_reflection_
 b (anonymous namespace)::CVRMsg_AcknowledgeQuit_Exiting_descriptor_
 b (anonymous namespace)::CVRMsg_AcknowledgeQuit_Exiting_reflection_
 b (anonymous namespace)::CVRMsg_ApplicationInfo_Manifest_descriptor_
 b (anonymous namespace)::CVRMsg_ApplicationInfo_Manifest_reflection_
 b (anonymous namespace)::CVRMsg_ApplicationInfo_Options_descriptor_
 b (anonymous namespace)::CVRMsg_ApplicationInfo_Options_reflection_
 b (anonymous namespace)::CVRMsg_ApplicationInfo_descriptor_
 b (anonymous namespace)::CVRMsg_ApplicationInfo_reflection_
 b (anonymous namespace)::CVRMsg_ApplicationManifestRequest_descriptor_
 b (anonymous namespace)::CVRMsg_ApplicationManifestRequest_reflection_
 b (anonymous namespace)::CVRMsg_ApplicationManifestResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ApplicationManifestResponse_reflection_
 b (anonymous namespace)::CVRMsg_CancelApplicationLaunchResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CancelApplicationLaunchResponse_reflection_
 b (anonymous namespace)::CVRMsg_CancelApplicationLaunch_descriptor_
 b (anonymous namespace)::CVRMsg_CancelApplicationLaunch_reflection_
 b (anonymous namespace)::CVRMsg_ChangeAppTypeResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ChangeAppTypeResponse_reflection_
 b (anonymous namespace)::CVRMsg_ChangeAppType_descriptor_
 b (anonymous namespace)::CVRMsg_ChangeAppType_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_GetNextMessageResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_GetNextMessageResponse_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_GetNextMessage_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_GetNextMessage_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_RegisterMailboxResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_RegisterMailboxResponse_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_RegisterMailbox_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_RegisterMailbox_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_SendMailboxMessageResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_SendMailboxMessageResponse_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_SendMailboxMessage_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_SendMailboxMessage_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_UnregisterMailboxResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_UnregisterMailboxResponse_reflection_
 b (anonymous namespace)::CVRMsg_ClientMailbox_UnregisterMailbox_descriptor_
 b (anonymous namespace)::CVRMsg_ClientMailbox_UnregisterMailbox_reflection_
 b (anonymous namespace)::CVRMsg_CompositorBringToFront_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorBringToFront_reflection_
 b (anonymous namespace)::CVRMsg_CompositorClearFrameBuffer_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorClearFrameBuffer_reflection_
 b (anonymous namespace)::CVRMsg_CompositorConnectResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorConnectResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorConnect_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorConnect_reflection_
 b (anonymous namespace)::CVRMsg_CompositorDumpImagesAll_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorDumpImagesAll_reflection_
 b (anonymous namespace)::CVRMsg_CompositorDumpImages_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorDumpImages_reflection_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyFilenameResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyFilenameResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyFilename_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyFilename_reflection_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyTypeResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyTypeResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyType_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorGetScreenshotPropertyType_reflection_
 b (anonymous namespace)::CVRMsg_CompositorGoToBack_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorGoToBack_reflection_
 b (anonymous namespace)::CVRMsg_CompositorHookScreenshotResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorHookScreenshotResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorHookScreenshot_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorHookScreenshot_reflection_
 b (anonymous namespace)::CVRMsg_CompositorKeyboardShownResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorKeyboardShownResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorKeyboardShown_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorKeyboardShown_reflection_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedBufferResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedBufferResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedBuffer_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedBuffer_reflection_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedImageResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedImageResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedImage_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedImage_reflection_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedSemaphoreResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedSemaphoreResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedSemaphore_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorNewSharedSemaphore_reflection_
 b (anonymous namespace)::CVRMsg_CompositorQuit_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorQuit_reflection_
 b (anonymous namespace)::CVRMsg_CompositorRefSharedResourceResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorRefSharedResourceResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorRefSharedResource_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorRefSharedResource_reflection_
 b (anonymous namespace)::CVRMsg_CompositorRequestScreenshotResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorRequestScreenshotResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorRequestScreenshot_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorRequestScreenshot_reflection_
 b (anonymous namespace)::CVRMsg_CompositorSetDashboardVisibilityResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorSetDashboardVisibilityResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorSubmitScreenshotResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorSubmitScreenshotResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorSubmitScreenshot_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorSubmitScreenshot_reflection_
 b (anonymous namespace)::CVRMsg_CompositorTakeStereoScreenshotResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorTakeStereoScreenshotResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorTakeStereoScreenshot_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorTakeStereoScreenshot_reflection_
 b (anonymous namespace)::CVRMsg_CompositorUnrefSharedResourceResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorUnrefSharedResourceResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorUnrefSharedResource_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorUnrefSharedResource_reflection_
 b (anonymous namespace)::CVRMsg_CompositorUpdateScreenshotProgressResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorUpdateScreenshotProgressResponse_reflection_
 b (anonymous namespace)::CVRMsg_CompositorUpdateScreenshotProgress_descriptor_
 b (anonymous namespace)::CVRMsg_CompositorUpdateScreenshotProgress_reflection_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatchedResponse_OutputCoord_descriptor_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatchedResponse_OutputCoord_reflection_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatchedResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatchedResponse_reflection_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatched_InputCoord_descriptor_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatched_InputCoord_reflection_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatched_descriptor_
 b (anonymous namespace)::CVRMsg_ComputeDistortionBatched_reflection_
 b (anonymous namespace)::CVRMsg_ComputeDistortionResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ComputeDistortionResponse_reflection_
 b (anonymous namespace)::CVRMsg_ComputeDistortion_descriptor_
 b (anonymous namespace)::CVRMsg_ComputeDistortion_reflection_
 b (anonymous namespace)::CVRMsg_ConnectResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ConnectResponse_reflection_
 b (anonymous namespace)::CVRMsg_Connect_descriptor_
 b (anonymous namespace)::CVRMsg_Connect_reflection_
 b (anonymous namespace)::CVRMsg_CreateSwapTextureSetResponse_descriptor_
 b (anonymous namespace)::CVRMsg_CreateSwapTextureSetResponse_reflection_
 b (anonymous namespace)::CVRMsg_CreateSwapTextureSet_descriptor_
 b (anonymous namespace)::CVRMsg_CreateSwapTextureSet_reflection_
 b (anonymous namespace)::CVRMsg_DashboardStarted_descriptor_
 b (anonymous namespace)::CVRMsg_DashboardStarted_reflection_
 b (anonymous namespace)::CVRMsg_DefaultBinding_descriptor_
 b (anonymous namespace)::CVRMsg_DefaultBinding_reflection_
 b (anonymous namespace)::CVRMsg_DestroySwapTextureSet_descriptor_
 b (anonymous namespace)::CVRMsg_DestroySwapTextureSet_reflection_
 b (anonymous namespace)::CVRMsg_DriverDebugRequest_descriptor_
 b (anonymous namespace)::CVRMsg_DriverDebugRequest_reflection_
 b (anonymous namespace)::CVRMsg_DriverDebugResponse_descriptor_
 b (anonymous namespace)::CVRMsg_DriverDebugResponse_reflection_
 b (anonymous namespace)::CVRMsg_GetApplicationInfo_descriptor_
 b (anonymous namespace)::CVRMsg_GetApplicationInfo_reflection_
 b (anonymous namespace)::CVRMsg_GetApplicationLaunchArgumentsResponse_descriptor_
 b (anonymous namespace)::CVRMsg_GetApplicationLaunchArgumentsResponse_reflection_
 b (anonymous namespace)::CVRMsg_GetApplicationLaunchArguments_descriptor_
 b (anonymous namespace)::CVRMsg_GetApplicationLaunchArguments_reflection_
 b (anonymous namespace)::CVRMsg_GetDisplayInfoResponse_DisplayInfo_descriptor_
 b (anonymous namespace)::CVRMsg_GetDisplayInfoResponse_DisplayInfo_reflection_
 b (anonymous namespace)::CVRMsg_GetDisplayInfoResponse_descriptor_
 b (anonymous namespace)::CVRMsg_GetDisplayInfoResponse_reflection_
 b (anonymous namespace)::CVRMsg_GetDisplayInfo_descriptor_
 b (anonymous namespace)::CVRMsg_GetDisplayInfo_reflection_
 b (anonymous namespace)::CVRMsg_GetDriverDetailResponse_descriptor_
 b (anonymous namespace)::CVRMsg_GetDriverDetailResponse_reflection_
 b (anonymous namespace)::CVRMsg_GetDriverDetail_descriptor_
 b (anonymous namespace)::CVRMsg_GetDriverDetail_reflection_
 b (anonymous namespace)::CVRMsg_GetDriverInfoResponse_DriverInfo_descriptor_
 b (anonymous namespace)::CVRMsg_GetDriverInfoResponse_DriverInfo_reflection_
 b (anonymous namespace)::CVRMsg_GetDriverInfoResponse_descriptor_
 b (anonymous namespace)::CVRMsg_GetDriverInfoResponse_reflection_
 b (anonymous namespace)::CVRMsg_GetDriverInfo_descriptor_
 b (anonymous namespace)::CVRMsg_GetDriverInfo_reflection_
 b (anonymous namespace)::CVRMsg_Input_GetActionBindingsResponse_LoadResult_descriptor_
 b (anonymous namespace)::CVRMsg_Input_GetActionBindingsResponse_descriptor_
 b (anonymous namespace)::CVRMsg_Input_GetActionBindingsResponse_reflection_
 b (anonymous namespace)::CVRMsg_Input_GetActionBindings_descriptor_
 b (anonymous namespace)::CVRMsg_Input_GetActionBindings_reflection_
 b (anonymous namespace)::CVRMsg_Input_GetOriginLocalizedNameResponse_descriptor_
 b (anonymous namespace)::CVRMsg_Input_GetOriginLocalizedNameResponse_reflection_
 b (anonymous namespace)::CVRMsg_Input_GetOriginLocalizedName_descriptor_
 b (anonymous namespace)::CVRMsg_Input_GetOriginLocalizedName_reflection_
 b (anonymous namespace)::CVRMsg_Input_SetActionManifestPathResponse_descriptor_
 b (anonymous namespace)::CVRMsg_Input_SetActionManifestPathResponse_reflection_
 b (anonymous namespace)::CVRMsg_Input_SetActionManifestPath_descriptor_
 b (anonymous namespace)::CVRMsg_Input_SetActionManifestPath_reflection_
 b (anonymous namespace)::CVRMsg_Input_SetXrInputConfig_descriptor_
 b (anonymous namespace)::CVRMsg_Input_SetXrInputConfig_reflection_
 b (anonymous namespace)::CVRMsg_LaunchApplicationForMimeTypeResponse_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchApplicationForMimeTypeResponse_reflection_
 b (anonymous namespace)::CVRMsg_LaunchApplicationForMimeType_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchApplicationForMimeType_reflection_
 b (anonymous namespace)::CVRMsg_LaunchApplicationResponse_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchApplicationResponse_reflection_
 b (anonymous namespace)::CVRMsg_LaunchApplication_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchApplication_reflection_
 b (anonymous namespace)::CVRMsg_LaunchInternalProcessResponse_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchInternalProcessResponse_reflection_
 b (anonymous namespace)::CVRMsg_LaunchInternalProcess_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchInternalProcess_reflection_
 b (anonymous namespace)::CVRMsg_LaunchTemplateApplicationResponse_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchTemplateApplicationResponse_reflection_
 b (anonymous namespace)::CVRMsg_LaunchTemplateApplication_AppOverrideKey_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchTemplateApplication_AppOverrideKey_reflection_
 b (anonymous namespace)::CVRMsg_LaunchTemplateApplication_descriptor_
 b (anonymous namespace)::CVRMsg_LaunchTemplateApplication_reflection_
 b (anonymous namespace)::CVRMsg_LogMessageToServer_descriptor_
 b (anonymous namespace)::CVRMsg_LogMessageToServer_reflection_
 b (anonymous namespace)::CVRMsg_MimeType_descriptor_
 b (anonymous namespace)::CVRMsg_MimeType_reflection_
 b (anonymous namespace)::CVRMsg_NoResponse_descriptor_
 b (anonymous namespace)::CVRMsg_NoResponse_reflection_
 b (anonymous namespace)::CVRMsg_OculusSDKStart_descriptor_
 b (anonymous namespace)::CVRMsg_OculusSDKStart_reflection_
 b (anonymous namespace)::CVRMsg_Path_HandleToStringResponse_descriptor_
 b (anonymous namespace)::CVRMsg_Path_HandleToStringResponse_reflection_
 b (anonymous namespace)::CVRMsg_Path_HandleToString_descriptor_
 b (anonymous namespace)::CVRMsg_Path_HandleToString_reflection_
 b (anonymous namespace)::CVRMsg_Path_StringToHandleResponse_descriptor_
 b (anonymous namespace)::CVRMsg_Path_StringToHandleResponse_reflection_
 b (anonymous namespace)::CVRMsg_Path_StringToHandle_descriptor_
 b (anonymous namespace)::CVRMsg_Path_StringToHandle_reflection_
 b (anonymous namespace)::CVRMsg_PerformApplicationPrelaunchCheckResponse_descriptor_
 b (anonymous namespace)::CVRMsg_PerformApplicationPrelaunchCheckResponse_reflection_
 b (anonymous namespace)::CVRMsg_PerformApplicationPrelaunchCheck_descriptor_
 b (anonymous namespace)::CVRMsg_PerformApplicationPrelaunchCheck_reflection_
 b (anonymous namespace)::CVRMsg_PowerOffTrackedDevice_descriptor_
 b (anonymous namespace)::CVRMsg_PowerOffTrackedDevice_reflection_
 b (anonymous namespace)::CVRMsg_PrismPrioritySet_descriptor_
 b (anonymous namespace)::CVRMsg_PrismPrioritySet_reflection_
 b (anonymous namespace)::CVRMsg_QuitProcessRequest_descriptor_
 b (anonymous namespace)::CVRMsg_QuitProcessRequest_reflection_
 b (anonymous namespace)::CVRMsg_QuitProcessResponse_descriptor_
 b (anonymous namespace)::CVRMsg_QuitProcessResponse_reflection_
 b (anonymous namespace)::CVRMsg_RegisterExternalWebRoot_descriptor_
 b (anonymous namespace)::CVRMsg_RegisterExternalWebRoot_reflection_
 b (anonymous namespace)::CVRMsg_ReloadChaperone_descriptor_
 b (anonymous namespace)::CVRMsg_ReloadChaperone_reflection_
 b (anonymous namespace)::CVRMsg_SendWebMessage_descriptor_
 b (anonymous namespace)::CVRMsg_SendWebMessage_reflection_
 b (anonymous namespace)::CVRMsg_ServiceConnectResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ServiceConnectResponse_reflection_
 b (anonymous namespace)::CVRMsg_ServiceConnect_descriptor_
 b (anonymous namespace)::CVRMsg_ServiceConnect_reflection_
 b (anonymous namespace)::CVRMsg_SetApplicationOptionsResponse_descriptor_
 b (anonymous namespace)::CVRMsg_SetApplicationOptionsResponse_reflection_
 b (anonymous namespace)::CVRMsg_SetApplicationOptions_descriptor_
 b (anonymous namespace)::CVRMsg_SetApplicationOptions_reflection_
 b (anonymous namespace)::CVRMsg_SetApplicationProcessIdResponse_descriptor_
 b (anonymous namespace)::CVRMsg_SetApplicationProcessIdResponse_reflection_
 b (anonymous namespace)::CVRMsg_SetApplicationProcessId_descriptor_
 b (anonymous namespace)::CVRMsg_SetApplicationProcessId_reflection_
 b (anonymous namespace)::CVRMsg_SetDefaultApplicationForMimeTypeResponse_descriptor_
 b (anonymous namespace)::CVRMsg_SetDefaultApplicationForMimeTypeResponse_reflection_
 b (anonymous namespace)::CVRMsg_SetDefaultApplicationForMimeType_descriptor_
 b (anonymous namespace)::CVRMsg_SetDefaultApplicationForMimeType_reflection_
 b (anonymous namespace)::CVRMsg_SetMasterProcessResponse_descriptor_
 b (anonymous namespace)::CVRMsg_SetMasterProcessResponse_reflection_
 b (anonymous namespace)::CVRMsg_SetMasterProcessRestartHintResponse_descriptor_
 b (anonymous namespace)::CVRMsg_SetMasterProcessRestartHintResponse_reflection_
 b (anonymous namespace)::CVRMsg_SetMasterProcessRestartHint_descriptor_
 b (anonymous namespace)::CVRMsg_SetMasterProcessRestartHint_reflection_
 b (anonymous namespace)::CVRMsg_SetMasterProcess_descriptor_
 b (anonymous namespace)::CVRMsg_SetMasterProcess_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetBool_Response_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetBool_Response_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetBool_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetBool_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetNumeric_Response_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetNumeric_Response_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetNumeric_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetNumeric_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetString_Response_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetString_Response_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetString_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetString_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetValueType_Response_default_oneof_instance_
 b (anonymous namespace)::CVRMsg_Settings_GetValueType_Response_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetValueType_Response_reflection_
 b (anonymous namespace)::CVRMsg_Settings_GetValueType_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_GetValueType_reflection_
 b (anonymous namespace)::CVRMsg_Settings_RemoveKeyInSection_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_RemoveKeyInSection_reflection_
 b (anonymous namespace)::CVRMsg_Settings_RemoveSection_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_RemoveSection_reflection_
 b (anonymous namespace)::CVRMsg_Settings_SetBool_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_SetBool_reflection_
 b (anonymous namespace)::CVRMsg_Settings_SetNumeric_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_SetNumeric_reflection_
 b (anonymous namespace)::CVRMsg_Settings_SetString_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_SetString_reflection_
 b (anonymous namespace)::CVRMsg_Settings_SetValue_Response_descriptor_
 b (anonymous namespace)::CVRMsg_Settings_SetValue_Response_reflection_
 b (anonymous namespace)::CVRMsg_ShouldKillTheaterPancakeProcessResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ShouldKillTheaterPancakeProcessResponse_reflection_
 b (anonymous namespace)::CVRMsg_ShouldKillTheaterPancakeProcess_descriptor_
 b (anonymous namespace)::CVRMsg_ShouldKillTheaterPancakeProcess_reflection_
 b (anonymous namespace)::CVRMsg_ShutdownSystemResponse_descriptor_
 b (anonymous namespace)::CVRMsg_ShutdownSystemResponse_reflection_
 b (anonymous namespace)::CVRMsg_ShutdownSystem_descriptor_
 b (anonymous namespace)::CVRMsg_ShutdownSystem_reflection_
 b (anonymous namespace)::CVRMsg_StartAutolaunchOverlays_descriptor_
 b (anonymous namespace)::CVRMsg_StartAutolaunchOverlays_reflection_
 b (anonymous namespace)::CVRMsg_StartDashboardResponse_descriptor_
 b (anonymous namespace)::CVRMsg_StartDashboardResponse_reflection_
 b (anonymous namespace)::CVRMsg_StartDashboard_descriptor_
 b (anonymous namespace)::CVRMsg_StartDashboard_reflection_
 b (anonymous namespace)::CVRMsg_StartHomeAppResponse_descriptor_
 b (anonymous namespace)::CVRMsg_StartHomeAppResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_AcquireVideoStreamingService_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_AcquireVideoStreamingService_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_EnableResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_EnableResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_Enable_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_Enable_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortionResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortionResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortion_InputCoord_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortion_InputCoord_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortion_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetDistortion_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFormatDimensionsResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFormatDimensionsResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFormatDimensions_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFormatDimensions_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFrameBoundsResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFrameBoundsResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFrameBounds_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetFrameBounds_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetIntrinsicsResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetIntrinsicsResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetIntrinsics_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetIntrinsics_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetProjectionResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetProjectionResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetProjection_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetProjection_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetVideoStreamFormatResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetVideoStreamFormatResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetVideoStreamFormat_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_GetVideoStreamFormat_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_IsVideoStreamActiveResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_IsVideoStreamActiveResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_IsVideoStreamActive_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_IsVideoStreamActive_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_PauseVideoStreamResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_PauseVideoStreamResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_PauseVideoStream_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_PauseVideoStream_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ReleaseVideoStreamingService_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ReleaseVideoStreamingService_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ResumeVideoStreamResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ResumeVideoStreamResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ResumeVideoStream_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_ResumeVideoStream_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetAutoExposureResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetAutoExposureResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetAutoExposure_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetAutoExposure_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetCompatibilityModeResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetCompatibilityModeResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetCompatibilityMode_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetCompatibilityMode_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetVideoStreamFormatResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetVideoStreamFormatResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetVideoStreamFormat_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_SetVideoStreamFormat_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StartVideoStreamResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StartVideoStreamResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StartVideoStream_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StartVideoStream_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StopVideoStreamResponse_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StopVideoStreamResponse_reflection_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StopVideoStream_descriptor_
 b (anonymous namespace)::CVRMsg_TrackedCamera_StopVideoStream_reflection_
 b (anonymous namespace)::CVRMsg_TriggerHapticPulse_descriptor_
 b (anonymous namespace)::CVRMsg_TriggerHapticPulse_reflection_
 b (anonymous namespace)::CVRMsg_UpdateChaperoneUniverseResponse_descriptor_
 b (anonymous namespace)::CVRMsg_UpdateChaperoneUniverseResponse_reflection_
 b (anonymous namespace)::CVRMsg_UpdateChaperoneUniverse_descriptor_
 b (anonymous namespace)::CVRMsg_UpdateChaperoneUniverse_reflection_
 b (anonymous namespace)::CVRMsg_UpdateZeroPose_descriptor_
 b (anonymous namespace)::CVRMsg_UpdateZeroPose_reflection_
 b (anonymous namespace)::CVRMsg_WritePropertyDataToFileResponse_descriptor_
 b (anonymous namespace)::CVRMsg_WritePropertyDataToFileResponse_reflection_
 b (anonymous namespace)::CVRMsg_WritePropertyDataToFile_descriptor_
 b (anonymous namespace)::CVRMsg_WritePropertyDataToFile_reflection_
 b (anonymous namespace)::ValidBounds(vr::VRTextureBounds_t const*)::__executeCount
 b (anonymous namespace)::protobuf_AssignDescriptors_once_
 b AddDpadPaths(std::string, std::string, std::string, bool, std::vector<std::string, std::allocator<std::string> >&)::dpadDirections
 b AssertCallbackImplementation(char const*, char const*, unsigned int, bool, void*, bool*)::bMinidumpDisabled
 b BInitializeLogging()::s_LogMutex
 b BInitializeLogging()::s_bLogInitialized
 b BIsCrashReportingDisabled()::s_bFiguredOutIfDisabled
 b BIsCrashReportingDisabled()::s_bIsReportingDisabled
 b BIsHapticLoggingEnabled()::s_bIsHapticLogEnabled
 b BIsTrackedDevicePropertyMandantory(vr::ETrackedDeviceProperty)::eKeysVector
 b CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputALen
 b CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputBLen
 b CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputXLen
 b CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputYLen
 b CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftLen
 b CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unRightLen
 b CAnimResource::MyTypeID()::sID
 b CAnimResource::m_typeInfoCAnimResource
 b CAnimResourceManager::m_sInstance
 b CAssert::m_mutex
 b CAssert::m_pInstance
 b CBoneMaskResource::MyTypeID()::sID
 b CBoneMaskResource::m_typeInfoCBoneMaskResource
 b CDownsampleRenderer::Draw(vr::VRTextureBounds_t*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void*, void*, bool, bool, unsigned int)::s_flBeginTime
 b CDriverManager::GetDriverName(unsigned int) const::strEmpty
 b CHmdSystemLatest::GetVRStartupReason()::k_pathStartupReason
 b CHmdSystemLatest::ShouldShowTrackerUI()::k_pathShowTrackerUi
 b CKeyframedDataResource::MyTypeID()::sID
 b CKeyframedDataResource::m_typeInfoCKeyframedDataResource
 b CLegacyInput::RunInputFrame(bool)::k_pathLegacyDebuggerPid
 b CLog::s_mutex
 b CLog::s_pInstance
 b CLogBuffer::s_pInstance
 b CPackedBoneTransforms::default_instance_
 b CPropertyContainer::BInit(std::string const&, bool)::vecReportedErrors
 b CRenderModelManager::GetModelInfo(char const*, bool)::k_pathInputJoystick
 b CRenderModelManager::GetModelInfo(char const*, bool)::k_pathInputSystem
 b CSettingsManager::GetDefaultValue<std::string>(char const*, char const*, vr::EVRSettingsError*)::Empty
 b CSettingsManager::GetValue<std::string>(char const*, char const*, vr::EVRSettingsError*)::Empty
 b CSettingsSetting::GetDefaultValue() const::Empty
 b CSharedResourceBaseLinux::CSharedResourceData::s_CacheLock
 b CSharedResourceBaseLinux::CSharedResourceData::s_CachedResourceData
 b CSxrGenericTrackerManager::ProcessActionSubPath(unsigned long*, unsigned long*)::k_validSubactionPaths
 b CSxrInstance::ComputeBindingFiles()::k_pathCosmosController
 b CSxrInstance::ComputeBindingFiles()::k_pathFocus3Controller
 b CSxrInstance::ComputeBindingFiles()::k_pathG2Controller
 b CSxrInstance::ComputeBindingFiles()::k_pathIndexController
 b CSxrInstance::ComputeBindingFiles()::k_pathMRController
 b CSxrInstance::ComputeBindingFiles()::k_pathSimpleController
 b CSxrInstance::ComputeBindingFiles()::k_pathTouchController
 b CSxrInstance::ComputeBindingFiles()::k_pathViveController
 b CSxrInstance::GetExtensionsAvailable()::__executeCount
 b CSxrInstance::sm_vecExtensionsAvailable
 b CSxrSession::UpdateInteractionProfile()::rTopLevelPaths
 b CTransform::xIdentity
 b CVRCompositorClient::SubmitEyeInternal(vr::EVREye, unsigned int, vr::VRTextureWithPose_t const*, unsigned int, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)::__executeCount
 b CVRCompositorSharedTextures::InitializeVulkan()::s_bInitializedVulkan
 b CVRCompositorSharedTextures::UpdateTextureSet(CVRCompositorSharedTextures::Params const*, VRCompositorState_TextureSet_t*)::__executeCount
 b CVRCompositorSharedTextures::UpdateTextureSet(CVRCompositorSharedTextures::Params const*, VRCompositorState_TextureSet_t*)::s_bOsSupportsAdvancedImageProcessing
 b CVRCompositorSharedTextures::UpdateTextureSet(CVRCompositorSharedTextures::Params const*, VRCompositorState_TextureSet_t*)::s_nCounter
 b CVRCompositorSharedTextures::UpdateTextureSet(CVRCompositorSharedTextures::Params const*, VRCompositorState_TextureSet_t*)::s_pVrSettings
 b CVRControllerTypeBindings::InitFromConfig(std::string const&, CInputActionManifest&, vr::ETrackedControllerRole)::k_bestAlias
 b CVRIOBuffer::m_mapHandleToContainer
 b CVRIOBuffer::m_mapHandleToCursor
 b CVRIOBuffer::m_mapHandleToCursorLock
 b CVRIOBuffer::m_nNextCursor
 b CVRIOBuffer::m_ulHandleSalt
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlIndex
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlMiddle
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlPinky
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlRing
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlThumb
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayIndexMiddle
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayMiddleRing
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayRingPinky
 b CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayThumbIndex
 b CVRInputLatest::GetSkeletonBoneDataForHand(vr::EVRHandSide, vr::VRBoneTransform_t*, unsigned int, vr::EVRSkeletalMotionRange)::sPathHandles
 b CVRInputLatest::InputFrame_t::sm_mutexOverflowActionDataPerDevice
 b CVRInputLatest::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)::k_pathActiveActionSets
 b CVRInputLatest::sm_vecUnboundActionResults
 b CVRLog::InitLog(char const*, char const*, bool, unsigned long)::sb_combinedLogging
 b CVRMsg_AbortApplicationTransition::default_instance_
 b CVRMsg_AcknowledgeQuit_Exiting::default_instance_
 b CVRMsg_ApplicationInfo::default_instance_
 b CVRMsg_ApplicationInfo_Manifest::default_instance_
 b CVRMsg_ApplicationInfo_Options::default_instance_
 b CVRMsg_ApplicationManifestRequest::default_instance_
 b CVRMsg_ApplicationManifestResponse::default_instance_
 b CVRMsg_CancelApplicationLaunch::default_instance_
 b CVRMsg_CancelApplicationLaunchResponse::default_instance_
 b CVRMsg_ChangeAppType::default_instance_
 b CVRMsg_ChangeAppTypeResponse::default_instance_
 b CVRMsg_ClientMailbox_GetNextMessage::default_instance_
 b CVRMsg_ClientMailbox_GetNextMessageResponse::default_instance_
 b CVRMsg_ClientMailbox_RegisterMailbox::default_instance_
 b CVRMsg_ClientMailbox_RegisterMailboxResponse::default_instance_
 b CVRMsg_ClientMailbox_SendMailboxMessage::default_instance_
 b CVRMsg_ClientMailbox_SendMailboxMessageResponse::default_instance_
 b CVRMsg_ClientMailbox_UnregisterMailbox::default_instance_
 b CVRMsg_ClientMailbox_UnregisterMailboxResponse::default_instance_
 b CVRMsg_CompositorBringToFront::default_instance_
 b CVRMsg_CompositorClearFrameBuffer::default_instance_
 b CVRMsg_CompositorConnect::default_instance_
 b CVRMsg_CompositorConnectResponse::default_instance_
 b CVRMsg_CompositorDumpImages::default_instance_
 b CVRMsg_CompositorDumpImagesAll::default_instance_
 b CVRMsg_CompositorGetScreenshotPropertyFilename::default_instance_
 b CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::default_instance_
 b CVRMsg_CompositorGetScreenshotPropertyType::default_instance_
 b CVRMsg_CompositorGetScreenshotPropertyTypeResponse::default_instance_
 b CVRMsg_CompositorGoToBack::default_instance_
 b CVRMsg_CompositorHookScreenshot::default_instance_
 b CVRMsg_CompositorHookScreenshotResponse::default_instance_
 b CVRMsg_CompositorKeyboardShown::default_instance_
 b CVRMsg_CompositorKeyboardShownResponse::default_instance_
 b CVRMsg_CompositorNewSharedBuffer::default_instance_
 b CVRMsg_CompositorNewSharedBufferResponse::default_instance_
 b CVRMsg_CompositorNewSharedImage::default_instance_
 b CVRMsg_CompositorNewSharedImageResponse::default_instance_
 b CVRMsg_CompositorNewSharedSemaphore::default_instance_
 b CVRMsg_CompositorNewSharedSemaphoreResponse::default_instance_
 b CVRMsg_CompositorQuit::default_instance_
 b CVRMsg_CompositorRefSharedResource::default_instance_
 b CVRMsg_CompositorRefSharedResourceResponse::default_instance_
 b CVRMsg_CompositorRequestScreenshot::default_instance_
 b CVRMsg_CompositorRequestScreenshotResponse::default_instance_
 b CVRMsg_CompositorSetDashboardVisibilityResponse::default_instance_
 b CVRMsg_CompositorSubmitScreenshot::default_instance_
 b CVRMsg_CompositorSubmitScreenshotResponse::default_instance_
 b CVRMsg_CompositorTakeStereoScreenshot::default_instance_
 b CVRMsg_CompositorTakeStereoScreenshotResponse::default_instance_
 b CVRMsg_CompositorUnrefSharedResource::default_instance_
 b CVRMsg_CompositorUnrefSharedResourceResponse::default_instance_
 b CVRMsg_CompositorUpdateScreenshotProgress::default_instance_
 b CVRMsg_CompositorUpdateScreenshotProgressResponse::default_instance_
 b CVRMsg_ComputeDistortion::default_instance_
 b CVRMsg_ComputeDistortionBatched::default_instance_
 b CVRMsg_ComputeDistortionBatchedResponse::default_instance_
 b CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::default_instance_
 b CVRMsg_ComputeDistortionBatched_InputCoord::default_instance_
 b CVRMsg_ComputeDistortionResponse::default_instance_
 b CVRMsg_Connect::default_instance_
 b CVRMsg_ConnectResponse::default_instance_
 b CVRMsg_CreateSwapTextureSet::default_instance_
 b CVRMsg_CreateSwapTextureSetResponse::default_instance_
 b CVRMsg_DashboardStarted::default_instance_
 b CVRMsg_DefaultBinding::default_instance_
 b CVRMsg_DestroySwapTextureSet::default_instance_
 b CVRMsg_DriverDebugRequest::default_instance_
 b CVRMsg_DriverDebugResponse::default_instance_
 b CVRMsg_GetApplicationInfo::default_instance_
 b CVRMsg_GetApplicationLaunchArguments::default_instance_
 b CVRMsg_GetApplicationLaunchArgumentsResponse::default_instance_
 b CVRMsg_GetDisplayInfo::default_instance_
 b CVRMsg_GetDisplayInfoResponse::default_instance_
 b CVRMsg_GetDisplayInfoResponse_DisplayInfo::default_instance_
 b CVRMsg_GetDriverDetail::default_instance_
 b CVRMsg_GetDriverDetailResponse::default_instance_
 b CVRMsg_GetDriverInfo::default_instance_
 b CVRMsg_GetDriverInfoResponse::default_instance_
 b CVRMsg_GetDriverInfoResponse_DriverInfo::default_instance_
 b CVRMsg_Input_GetActionBindings::default_instance_
 b CVRMsg_Input_GetActionBindingsResponse::default_instance_
 b CVRMsg_Input_GetOriginLocalizedName::default_instance_
 b CVRMsg_Input_GetOriginLocalizedNameResponse::default_instance_
 b CVRMsg_Input_SetActionManifestPath::default_instance_
 b CVRMsg_Input_SetActionManifestPathResponse::default_instance_
 b CVRMsg_Input_SetXrInputConfig::default_instance_
 b CVRMsg_LaunchApplication::default_instance_
 b CVRMsg_LaunchApplicationForMimeType::default_instance_
 b CVRMsg_LaunchApplicationForMimeTypeResponse::default_instance_
 b CVRMsg_LaunchApplicationResponse::default_instance_
 b CVRMsg_LaunchInternalProcess::default_instance_
 b CVRMsg_LaunchInternalProcessResponse::default_instance_
 b CVRMsg_LaunchTemplateApplication::default_instance_
 b CVRMsg_LaunchTemplateApplicationResponse::default_instance_
 b CVRMsg_LaunchTemplateApplication_AppOverrideKey::default_instance_
 b CVRMsg_LogMessageToServer::default_instance_
 b CVRMsg_MimeType::default_instance_
 b CVRMsg_NoResponse::default_instance_
 b CVRMsg_OculusSDKStart::default_instance_
 b CVRMsg_Path_HandleToString::default_instance_
 b CVRMsg_Path_HandleToStringResponse::default_instance_
 b CVRMsg_Path_StringToHandle::default_instance_
 b CVRMsg_Path_StringToHandleResponse::default_instance_
 b CVRMsg_PerformApplicationPrelaunchCheck::default_instance_
 b CVRMsg_PerformApplicationPrelaunchCheckResponse::default_instance_
 b CVRMsg_PowerOffTrackedDevice::default_instance_
 b CVRMsg_PrismPrioritySet::default_instance_
 b CVRMsg_QuitProcessRequest::default_instance_
 b CVRMsg_QuitProcessResponse::default_instance_
 b CVRMsg_RegisterExternalWebRoot::default_instance_
 b CVRMsg_ReloadChaperone::default_instance_
 b CVRMsg_SendWebMessage::default_instance_
 b CVRMsg_ServiceConnect::default_instance_
 b CVRMsg_ServiceConnectResponse::default_instance_
 b CVRMsg_SetApplicationOptions::default_instance_
 b CVRMsg_SetApplicationOptionsResponse::default_instance_
 b CVRMsg_SetApplicationProcessId::default_instance_
 b CVRMsg_SetApplicationProcessIdResponse::default_instance_
 b CVRMsg_SetDefaultApplicationForMimeType::default_instance_
 b CVRMsg_SetDefaultApplicationForMimeTypeResponse::default_instance_
 b CVRMsg_SetMasterProcess::default_instance_
 b CVRMsg_SetMasterProcessResponse::default_instance_
 b CVRMsg_SetMasterProcessRestartHint::default_instance_
 b CVRMsg_SetMasterProcessRestartHintResponse::default_instance_
 b CVRMsg_Settings_GetBool::default_instance_
 b CVRMsg_Settings_GetBool_Response::default_instance_
 b CVRMsg_Settings_GetNumeric::default_instance_
 b CVRMsg_Settings_GetNumeric_Response::default_instance_
 b CVRMsg_Settings_GetString::default_instance_
 b CVRMsg_Settings_GetString_Response::default_instance_
 b CVRMsg_Settings_GetValueType::default_instance_
 b CVRMsg_Settings_GetValueType_Response::default_instance_
 b CVRMsg_Settings_RemoveKeyInSection::default_instance_
 b CVRMsg_Settings_RemoveSection::default_instance_
 b CVRMsg_Settings_SetBool::default_instance_
 b CVRMsg_Settings_SetNumeric::default_instance_
 b CVRMsg_Settings_SetString::default_instance_
 b CVRMsg_Settings_SetValue_Response::default_instance_
 b CVRMsg_ShouldKillTheaterPancakeProcess::default_instance_
 b CVRMsg_ShouldKillTheaterPancakeProcessResponse::default_instance_
 b CVRMsg_ShutdownSystem::default_instance_
 b CVRMsg_ShutdownSystemResponse::default_instance_
 b CVRMsg_StartAutolaunchOverlays::default_instance_
 b CVRMsg_StartDashboard::default_instance_
 b CVRMsg_StartDashboardResponse::default_instance_
 b CVRMsg_StartHomeAppResponse::default_instance_
 b CVRMsg_TrackedCamera_AcquireVideoStreamingService::default_instance_
 b CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::default_instance_
 b CVRMsg_TrackedCamera_Enable::default_instance_
 b CVRMsg_TrackedCamera_EnableResponse::default_instance_
 b CVRMsg_TrackedCamera_GetDistortion::default_instance_
 b CVRMsg_TrackedCamera_GetDistortionResponse::default_instance_
 b CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::default_instance_
 b CVRMsg_TrackedCamera_GetDistortion_InputCoord::default_instance_
 b CVRMsg_TrackedCamera_GetFormatDimensions::default_instance_
 b CVRMsg_TrackedCamera_GetFormatDimensionsResponse::default_instance_
 b CVRMsg_TrackedCamera_GetFrameBounds::default_instance_
 b CVRMsg_TrackedCamera_GetFrameBoundsResponse::default_instance_
 b CVRMsg_TrackedCamera_GetIntrinsics::default_instance_
 b CVRMsg_TrackedCamera_GetIntrinsicsResponse::default_instance_
 b CVRMsg_TrackedCamera_GetProjection::default_instance_
 b CVRMsg_TrackedCamera_GetProjectionResponse::default_instance_
 b CVRMsg_TrackedCamera_GetVideoStreamFormat::default_instance_
 b CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::default_instance_
 b CVRMsg_TrackedCamera_IsVideoStreamActive::default_instance_
 b CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::default_instance_
 b CVRMsg_TrackedCamera_PauseVideoStream::default_instance_
 b CVRMsg_TrackedCamera_PauseVideoStreamResponse::default_instance_
 b CVRMsg_TrackedCamera_ReleaseVideoStreamingService::default_instance_
 b CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::default_instance_
 b CVRMsg_TrackedCamera_ResumeVideoStream::default_instance_
 b CVRMsg_TrackedCamera_ResumeVideoStreamResponse::default_instance_
 b CVRMsg_TrackedCamera_SetAutoExposure::default_instance_
 b CVRMsg_TrackedCamera_SetAutoExposureResponse::default_instance_
 b CVRMsg_TrackedCamera_SetCompatibilityMode::default_instance_
 b CVRMsg_TrackedCamera_SetCompatibilityModeResponse::default_instance_
 b CVRMsg_TrackedCamera_SetVideoStreamFormat::default_instance_
 b CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::default_instance_
 b CVRMsg_TrackedCamera_StartVideoStream::default_instance_
 b CVRMsg_TrackedCamera_StartVideoStreamResponse::default_instance_
 b CVRMsg_TrackedCamera_StopVideoStream::default_instance_
 b CVRMsg_TrackedCamera_StopVideoStreamResponse::default_instance_
 b CVRMsg_TriggerHapticPulse::default_instance_
 b CVRMsg_UpdateChaperoneUniverse::default_instance_
 b CVRMsg_UpdateChaperoneUniverseResponse::default_instance_
 b CVRMsg_UpdateZeroPose::default_instance_
 b CVRMsg_WritePropertyDataToFile::default_instance_
 b CVRMsg_WritePropertyDataToFileResponse::default_instance_
 b CVRScreenshotsLatest::UpdateScreenshotProgress(unsigned int, float)::sflLastLog
 b CVRSystemLatest::GetRuntimeVersion()::s_sVersion
 b CVRSystemLatest::PollNextEventWithPoseInternal(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned long)::bLogOnce
 b CVRSystemLatest::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)::k_ulHapticRequestEnforcedDelayMS
 b CVRTrackedDevice_004::k_pchInterfaceName
 b CVRTrackedDevice_Latest::k_pchInterfaceName
 b CVulkanVRRenderer::BIsDebugMarkerEnabled()::bExtAvailable
 b CVulkanVRRenderer::QueueComputeClearsIfNeeded(VRRenderer::DispatchInfo*)::__executeCount
 b CVulkanVRRenderer::WaitForPresent()::nVBlankCounter
 b FillPipeAddr(sockaddr_un&, std::string)::sPrefix
 b GenerateSwapchainId()::s_currentId
 b GetIDForVRInitError(vr::EVRInitError)::buf
 b GetInputPathTypes(unsigned long, unsigned long)::s_emptySet
 b GetOpenGLFunctions()::s_OpenGLFunctions
 b GetOpenGLFunctions()::s_bExtensionsLoaded
 b GetStringForCompositorError(vr::EVRCompositorError)::buf
 b GetStringForInputActionType(EInputActionType)::buf
 b GetStringForInputValueType(EInputValueType)::buf
 b GetStringForInputValueVisibility(EInputValueVisibility)::buf
 b GetStringForPropertyError(vr::ETrackedPropertyError)::buf
 b GetStringForPropertyTypeTag(unsigned int)::buf
 b GetStringForRenderModelError(vr::EVRRenderModelError)::buf
 b GetStringForScalarType(vr::EVRScalarType)::buf
 b GetStringForScalarUnits(vr::EVRScalarUnits)::buf
 b GetStringForSceneApplicationState(vr::EVRSceneApplicationState)::buf
 b GetStringForTrackedControllerRole(vr::ETrackedControllerRole)::buf
 b GetStringForTrackedDeviceClass(vr::ETrackedDeviceClass)::buf
 b GetStringForTrackedDeviceProperty(vr::ETrackedDeviceProperty)::buf
 b GetStringForTrackerRole(ETrackerRole)::buf
 b GetStringForVRApplicationType(vr::EVRApplicationType)::buf
 b GetStringForVRApplicationsError(vr::EVRApplicationError)::buf
 b GetStringForVRButtonId(vr::EVRButtonId)::buf
 b GetStringForVRControllerAxisType(vr::EVRControllerAxisType)::buf
 b GetStringForVREventType(vr::EVREventType)::buf
 b GetStringForVRInputError(vr::EVRInputError)::buf
 b GetStringForVRMsgType(VRMsgType)::buf
 b GetStringForVRNotificationError(vr::EVRNotificationError)::buf
 b GetStringForVROverlayError(vr::EVROverlayError)::buf
 b GetStringForVROverlayFlags(vr::VROverlayFlags)::buf
 b GetStringForVRSettingsError(vr::EVRSettingsError)::buf
 b GetStringForVRTrackedCameraError(vr::EVRTrackedCameraError)::buf
 b GetStringForXrSessionState(XrSessionState)::buf
 b GetStringFromInternalInputFocus(EVRInternalSystemBehaviorFlags)::buf
 b GetTraceMarkerFd()::__executeCount
 b GetTraceMarkerFd()::s_TraceMarkerMutex
 b GetTraceMarkerFd()::s_flLastAttemptTime
 b GetTrackedDeviceProperties()::eKeysVector
 b GetVulkanDeviceFunctions(VkDevice_T*)::s_MapVulkanDeviceFunctions
 b IPC::SharedObjectManager::GetManagerSharedMemoryName()::s_pszMemName
 b IPC::g_SharedObjectManager
 b InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long)::k_head
 b InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long)::k_leftHand
 b InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long)::k_rightHand
 b InterfaceRegistrationBase::s_pFirst
 b IsDashboardVisibleInternal()::k_pathDashboardVisible
 b IsOverlayVisibleInternal(VRCompositor_OverlayState_t const&)::k_deviceWasDrawn
 b IsRunningInAppContainer()::s_bDeterminedAppContainerStatus
 b IsRunningInAppContainer()::s_bIsRunningInAppContainer
 b LiquidVR::sgVcetMotionEstimator
 b Matrix44Aligned::mIdentity
 b OpenVR_ReadVersionFile(std::string&, unsigned int*)::s_CachedVersion
 b Plat_IsInDebugSession::fp
 b QuaternionAligned::qIdentity
 b Reflection::Object::MyTypeID()::sID
 b Reflection::Object::m_typeInfoObject
 b SetDashboardVisibleInternal(bool)::k_pathDashboardVisible
 b ShouldUpdateInputDebuggerForThisProcess()::k_pathInputDebuggerPid
 b SkeletalCompression::CompressHandSkeleton(CSmartPtr<CAnimPose, CRefCountAccessor> const&, void*, unsigned int)::bytesMax
 b SplitInputPath(std::string const&, std::string*, std::string*)::k_sInputPathPrefix
 b SplitInputPath(std::string const&, std::string*, std::string*)::k_sPosePathPrefix
 b SplitInputPath(std::string const&, std::string*, std::string*)::k_sProximityPathPrefix
 b SteamVRVersionAsString()::s_sCachedVersion
 b ThreadInitSchedulerForRtkit()::sInitMutex
 b ThreadInitSchedulerForRtkit()::sbThreadSchedInitialized
 b ThreadShellExecute::bInstalledSignalHandler
 b UTF16to8(wchar_t const*)::s_converter
 b UTF8to16(char const*)::s_converter
 b VRCrashPreCrashSetMinidumpComment(char const*)::szMinidumpCommentBuffer
 b VRWriteMiniDump_Internal(char const*, unsigned int, void*, bool)::s_mutex
 b VectorAligned::vForward
 b VectorAligned::vLeft
 b VectorAligned::vOne
 b VectorAligned::vUp
 b VectorAligned::vZero
 b any_objects_registered
 b autoreg_VR_IVRApplications_FnTable
 b autoreg_VR_IVRBlockQueue_FnTable
 b autoreg_VR_IVRChaperoneSetup_FnTable
 b autoreg_VR_IVRChaperone_FnTable
 b autoreg_VR_IVRCompositor_FnTable
 b autoreg_VR_IVRDebug_FnTable
 b autoreg_VR_IVRDriverManager_FnTable
 b autoreg_VR_IVRExtendedDisplay_FnTable
 b autoreg_VR_IVRHeadsetView_FnTable
 b autoreg_VR_IVRIOBuffer_FnTable
 b autoreg_VR_IVRInput_FnTable
 b autoreg_VR_IVRNotifications_FnTable
 b autoreg_VR_IVROverlayView_FnTable
 b autoreg_VR_IVROverlay_FnTable
 b autoreg_VR_IVRPaths_FnTable
 b autoreg_VR_IVRProperties_FnTable
 b autoreg_VR_IVRRenderModels_FnTable
 b autoreg_VR_IVRResources_FnTable
 b autoreg_VR_IVRScreenshots_FnTable
 b autoreg_VR_IVRSettings_FnTable
 b autoreg_VR_IVRSpatialAnchors_FnTable
 b autoreg_VR_IVRSystem_FnTable
 b autoreg_VR_IVRTrackedCamera_FnTable
 b chaperone001
 b chaperone002
 b clientCore001
 b clientCore002
 b completed.0
 b compositor003
 b compositor004
 b compositor005
 b dwarf_reg_size_table
 b facet::IsInDebugSession()::fp
 b force_pid
 b force_pid_val
 b frame_hdr_cache
 b frame_hdr_cache_head
 b g_BitBufErrorHandler
 b g_BitWriteMasksInit
 b g_MessageOverlayMutex
 b g_SuspendResumeLock
 b g_ThreadMainThreadID
 b g_Tier1_BitWriteMasks
 b g_Tier1_ExtraMasks
 b g_VRLog
 b g_VRPathHelpers
 b g_VRPropertyHelpers
 b g_VRSettingHelper
 b g_arrApiLayerLinuxPaths
 b g_bSetSuspendHandlers
 b g_bSuspendResumeAck
 b g_bTestMode
 b g_hmdSystem
 b g_isDpadBindingEnabled
 b g_isHandModelPoseEnabled
 b g_isViveTrackerProfileEnabled
 b g_legalInteractionProfiles
 b g_mutex
 b g_nCurThreadSuspendCount
 b g_pApplicationsLatest
 b g_pAssertCallback
 b g_pBlockQueueLatest
 b g_pChaperoneLatest
 b g_pChaperoneSetupLatest
 b g_pClientCoreLatest
 b g_pCompositorLatest
 b g_pCompositorSystemInternal
 b g_pControlPanelLatest
 b g_pCurThread
 b g_pDebug
 b g_pExtendedDisplayLatest
 b g_pHmdLatest
 b g_pIOBufferLatest
 b g_pIVRApplications
 b g_pIVRBlockQueue
 b g_pIVRChaperone
 b g_pIVRChaperoneSetup
 b g_pIVRCompositor
 b g_pIVRDebug
 b g_pIVRDriverManager
 b g_pIVRExtendedDisplay
 b g_pIVRHeadsetView
 b g_pIVRIOBuffer
 b g_pIVRInput
 b g_pIVRNotifications
 b g_pIVROverlay
 b g_pIVROverlayView
 b g_pIVRPaths
 b g_pIVRProperties
 b g_pIVRRenderModels
 b g_pIVRResources
 b g_pIVRScreenshots
 b g_pIVRSettings
 b g_pIVRSpatialAnchors
 b g_pIVRSystem
 b g_pIVRTrackedCamera
 b g_pInput
 b g_pInputInternal
 b g_pInputLatest
 b g_pLocalizationMgr
 b g_pMailboxLatest
 b g_pNotificationsLatest
 b g_pOverlayInternalLatest
 b g_pOverlayLatest
 b g_pOverlayViewLatest
 b g_pRenderModels
 b g_pRenderModelsInternal
 b g_pRenderModelsLatest
 b g_pResourcesLatest
 b g_pScreenshotsLatest
 b g_pSettingsLatest
 b g_pSharedResourceNamespaceServer
 b g_pSteamPrivateLatest
 b g_pTrackedCameraLatest
 b g_pVRApplications
 b g_pVRApplicationsInternal
 b g_pVRBlockQueue
 b g_pVRCameraPassThruInternal
 b g_pVRChaperone
 b g_pVRChaperoneInternal
 b g_pVRChaperoneSetup
 b g_pVRClientInternal
 b g_pVRControlPanel
 b g_pVRDebug
 b g_pVRDriverDirectInternal
 b g_pVRDriverManager
 b g_pVRExtendedDisplay
 b g_pVRMailbox
 b g_pVROverlay
 b g_pVROverlayInternal
 b g_pVRPaths
 b g_pVRPathsInternal
 b g_pVRProperties
 b g_pVRPropertiesInternal
 b g_pVRResources
 b g_pVRServer
 b g_pVRSettings
 b g_pVRSettingsInternal
 b g_pVRSystem
 b g_pVRSystemLayerInternal
 b g_pVRTrackedCameraInternal
 b g_pWatchdogHostLatest
 b g_sharedResourceNamespaceClient
 b g_unInstanceCount
 b gli::dx::dx()::Table
 b guard variable for AddDpadPaths(std::string, std::string, std::string, bool, std::vector<std::string, std::allocator<std::string> >&)::dpadDirections
 b guard variable for AssertCallbackImplementation(char const*, char const*, unsigned int, bool, void*, bool*)::bMinidumpDisabled
 b guard variable for BInitializeLogging()::s_LogMutex
 b guard variable for BIsTrackedDevicePropertyMandantory(vr::ETrackedDeviceProperty)::eKeysVector
 b guard variable for CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputALen
 b guard variable for CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputBLen
 b guard variable for CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputXLen
 b guard variable for CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftInputYLen
 b guard variable for CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unLeftLen
 b guard variable for CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)::k_unRightLen
 b guard variable for CDownsampleRenderer::Draw(vr::VRTextureBounds_t*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void*, void*, bool, bool, unsigned int)::s_flBeginTime
 b guard variable for CDriverManager::GetDriverName(unsigned int) const::strEmpty
 b guard variable for CHmdSystemLatest::GetVRStartupReason()::k_pathStartupReason
 b guard variable for CHmdSystemLatest::ShouldShowTrackerUI()::k_pathShowTrackerUi
 b guard variable for CLegacyInput::RunInputFrame(bool)::k_pathLegacyDebuggerPid
 b guard variable for CPropertyContainer::BInit(std::string const&, bool)::vecReportedErrors
 b guard variable for CRenderModelManager::GetModelInfo(char const*, bool)::k_pathInputJoystick
 b guard variable for CRenderModelManager::GetModelInfo(char const*, bool)::k_pathInputSystem
 b guard variable for CServerTrackedDeviceProvider_002::GetInterfaceVersions()::k_InterfaceVersions
 b guard variable for CSettingsManager::GetDefaultValue<std::string>(char const*, char const*, vr::EVRSettingsError*)::Empty
 b guard variable for CSettingsManager::GetValue<std::string>(char const*, char const*, vr::EVRSettingsError*)::Empty
 b guard variable for CSettingsSetting::GetDefaultValue() const::Empty
 b guard variable for CSxrGenericTrackerManager::ProcessActionSubPath(unsigned long*, unsigned long*)::k_validSubactionPaths
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathCosmosController
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathFocus3Controller
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathG2Controller
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathIndexController
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathMRController
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathSimpleController
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathTouchController
 b guard variable for CSxrInstance::ComputeBindingFiles()::k_pathViveController
 b guard variable for CSxrSession::UpdateInteractionProfile()::rTopLevelPaths
 b guard variable for CVRCompositorSharedTextures::UpdateTextureSet(CVRCompositorSharedTextures::Params const*, VRCompositorState_TextureSet_t*)::s_pVrSettings
 b guard variable for CVRControllerTypeBindings::InitFromConfig(std::string const&, CInputActionManifest&, vr::ETrackedControllerRole)::k_bestAlias
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlIndex
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlMiddle
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlPinky
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlRing
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathCurlThumb
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayIndexMiddle
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayMiddleRing
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayRingPinky
 b guard variable for CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)::k_pathSplayThumbIndex
 b guard variable for CVRInputLatest::GetSkeletonBoneDataForHand(vr::EVRHandSide, vr::VRBoneTransform_t*, unsigned int, vr::EVRSkeletalMotionRange)::sPathHandles
 b guard variable for CVRInputLatest::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)::k_pathActiveActionSets
 b guard variable for CVRLog::InitLog(char const*, char const*, bool, unsigned long)::sb_combinedLogging
 b guard variable for CVRScreenshotsLatest::UpdateScreenshotProgress(unsigned int, float)::sflLastLog
 b guard variable for CVRSystemLatest::GetRuntimeVersion()::s_sVersion
 b guard variable for CVRSystemLatest::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)::k_ulHapticRequestEnforcedDelayMS
 b guard variable for FillPipeAddr(sockaddr_un&, std::string)::sPrefix
 b guard variable for GetInputPathTypes(unsigned long, unsigned long)::s_emptySet
 b guard variable for GetTraceMarkerFd()::s_TraceMarkerMutex
 b guard variable for GetTrackedDeviceProperties()::eKeysVector
 b guard variable for GetVulkanDeviceFunctions(VkDevice_T*)::s_MapVulkanDeviceFunctions
 b guard variable for InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long)::k_head
 b guard variable for InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long)::k_leftHand
 b guard variable for InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long)::k_rightHand
 b guard variable for IsDashboardVisibleInternal()::k_pathDashboardVisible
 b guard variable for IsOverlayVisibleInternal(VRCompositor_OverlayState_t const&)::k_deviceWasDrawn
 b guard variable for OpenVR_ReadVersionFile(std::string&, unsigned int*)::s_CachedVersion
 b guard variable for SetDashboardVisibleInternal(bool)::k_pathDashboardVisible
 b guard variable for ShouldUpdateInputDebuggerForThisProcess()::k_pathInputDebuggerPid
 b guard variable for SplitInputPath(std::string const&, std::string*, std::string*)::k_sInputPathPrefix
 b guard variable for SplitInputPath(std::string const&, std::string*, std::string*)::k_sPosePathPrefix
 b guard variable for SplitInputPath(std::string const&, std::string*, std::string*)::k_sProximityPathPrefix
 b guard variable for SteamVRVersionAsString()::s_sCachedVersion
 b guard variable for ThreadInitSchedulerForRtkit()::sInitMutex
 b guard variable for UTF16to8(wchar_t const*)::s_converter
 b guard variable for UTF8to16(char const*)::s_converter
 b guard variable for gli::dx::dx()::Table
 b guard variable for std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, false>::operator()(char) const::__nul
 b guard variable for std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, true>::operator()(char) const::__nul
 b guard variable for std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, false>::operator()(char) const::__nul
 b guard variable for std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, true>::operator()(char) const::__nul
 b guard variable for sxr_xrCreateAction(XrActionSet_T*, XrActionCreateInfo const*, XrAction_T**)::k_validSubactionPaths
 b guard variable for sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserGamepad
 b guard variable for sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserHandLeft
 b guard variable for sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserHandRight
 b guard variable for sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserHead
 b guard variable for tinygltf::Value::Get(int) const::null_value
 b guard variable for vkh::BIsInstanceExtensionSupported(std::string)::vecProperties
 b hmd001
 b hmd002
 b hmd003
 b hmd004
 b hmd005
 b hmd006
 b k_pathChaperonePerimeter
 b k_pathChaperonePlayArea
 b k_pathChaperoneSeatedTransform
 b k_pathChaperoneSetupStandingTransform
 b k_pathChaperoneShowingWorkingPid
 b k_pathChaperoneStandingTransform
 b k_pathChaperoneState
 b k_pathRoleCamera
 b k_pathRoleChest
 b k_pathRoleElbowLeft
 b k_pathRoleElbowRight
 b k_pathRoleFootLeft
 b k_pathRoleFootRight
 b k_pathRoleHandheldObject
 b k_pathRoleKeyboard
 b k_pathRoleKneeLeft
 b k_pathRoleKneeRight
 b k_pathRoleShoulderLeft
 b k_pathRoleShoulderRight
 b k_pathRoleWaist
 b k_pathUserCamera
 b k_pathUserChest
 b k_pathUserElbowLeft
 b k_pathUserElbowRight
 b k_pathUserFootLeft
 b k_pathUserFootRight
 b k_pathUserHandPrimary
 b k_pathUserKeyboard
 b k_pathUserKneeLeft
 b k_pathUserKneeRight
 b k_pathUserShoulderLeft
 b k_pathUserShoulderRight
 b k_pathUserWaist
 b k_rInputPaths
 b k_rTrackerPaths
 b loadedDevice
 b loadedInstance
 b marker.4
 b object_mutex
 b once_regsizes.0
 b pfnSteamAPI_SetBreakpadAppID
 b pfnSteamAPI_SetMiniDumpComment
 b pfnSteamAPI_UseBreakpadCrashHandler
 b pfnSteamAPI_WriteMiniDump
 b protobuf_AddDesc_vr_5fmessages_2eproto()::already_here
 b s_ThreadWatchdogManager
 b s_bCrashHandlingInit
 b s_bMinidumpCommentAlreadySet
 b s_fnPreCrashCallback
 b s_mapDumpedAsserts
 b s_mapTimings
 b s_pInstance
 b s_pLogCallback
 b s_pLogFile
 b s_rchProcessIdentifier
 b s_thread_pRobustListStruct
 b seen_objects
 b selectBuf
 b sg_bAcquireSyncInPresent
 b sg_bAcquireSyncInSubmit
 b sg_vecOptionalDeviceExtensions
 b sg_vecOptionalInstanceExtensions
 b sg_vecRequiredDeviceExtensions
 b sg_vecRequiredInstanceExtensions
 b stackDepth_g
 b static_descriptor_initializer_vr_5fmessages_2eproto_
 b stbi__de_iphone_flag
 b stbi__flip_vertically_on_write
 b stbi__g_failure_reason
 b stbi__unpremultiply_on_load
 b stbi__vertically_flip_on_load
 b std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, false>::operator()(char) const::__nul
 b std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, true>::operator()(char) const::__nul
 b std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, false>::operator()(char) const::__nul
 b std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, true>::operator()(char) const::__nul
 b std::__ioinit
 b subs.2
 b sxr_xrCreateAction(XrActionSet_T*, XrActionCreateInfo const*, XrAction_T**)::k_validSubactionPaths
 b sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserGamepad
 b sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserHandLeft
 b sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserHandRight
 b sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)::k_pathUserHead
 b system001
 b system002
 b system003
 b system004
 b systemBaseTicks
 b systemSecondsPerTick
 b systemTicksPerSecond
 b systemTicksToNanosecondDenum
 b systemTicksToNanosecondNum
 b systemTimeInitialized
 b tinygltf::Value::Get(int) const::null_value
 b tinygltf::base64_chars
 b tl_pLeafSharedState
 b tl_pWatchdog
 b unMessageID
 b unseen_objects
 b vkAcquireDrmDisplayEXT
 b vkAcquireNextImage2KHR
 b vkAcquireNextImageKHR
 b vkAcquirePerformanceConfigurationINTEL
 b vkAcquireProfilingLockKHR
 b vkAcquireWinrtDisplayNV
 b vkAcquireXlibDisplayEXT
 b vkAllocateCommandBuffers
 b vkAllocateDescriptorSets
 b vkAllocateMemory
 b vkBeginCommandBuffer
 b vkBindAccelerationStructureMemoryNV
 b vkBindBufferMemory
 b vkBindBufferMemory2
 b vkBindBufferMemory2KHR
 b vkBindImageMemory
 b vkBindImageMemory2
 b vkBindImageMemory2KHR
 b vkBuildAccelerationStructuresKHR
 b vkCmdBeginConditionalRenderingEXT
 b vkCmdBeginDebugUtilsLabelEXT
 b vkCmdBeginQuery
 b vkCmdBeginQueryIndexedEXT
 b vkCmdBeginRenderPass
 b vkCmdBeginRenderPass2
 b vkCmdBeginRenderPass2KHR
 b vkCmdBeginTransformFeedbackEXT
 b vkCmdBindDescriptorSets
 b vkCmdBindIndexBuffer
 b vkCmdBindInvocationMaskHUAWEI
 b vkCmdBindPipeline
 b vkCmdBindPipelineShaderGroupNV
 b vkCmdBindShadingRateImageNV
 b vkCmdBindTransformFeedbackBuffersEXT
 b vkCmdBindVertexBuffers
 b vkCmdBindVertexBuffers2EXT
 b vkCmdBlitImage
 b vkCmdBlitImage2KHR
 b vkCmdBuildAccelerationStructureNV
 b vkCmdBuildAccelerationStructuresIndirectKHR
 b vkCmdBuildAccelerationStructuresKHR
 b vkCmdClearAttachments
 b vkCmdClearColorImage
 b vkCmdClearDepthStencilImage
 b vkCmdCopyAccelerationStructureKHR
 b vkCmdCopyAccelerationStructureNV
 b vkCmdCopyAccelerationStructureToMemoryKHR
 b vkCmdCopyBuffer
 b vkCmdCopyBuffer2KHR
 b vkCmdCopyBufferToImage
 b vkCmdCopyBufferToImage2KHR
 b vkCmdCopyImage
 b vkCmdCopyImage2KHR
 b vkCmdCopyImageToBuffer
 b vkCmdCopyImageToBuffer2KHR
 b vkCmdCopyMemoryToAccelerationStructureKHR
 b vkCmdCopyQueryPoolResults
 b vkCmdCuLaunchKernelNVX
 b vkCmdDebugMarkerBeginEXT
 b vkCmdDebugMarkerEndEXT
 b vkCmdDebugMarkerInsertEXT
 b vkCmdDispatch
 b vkCmdDispatchBase
 b vkCmdDispatchBaseKHR
 b vkCmdDispatchIndirect
 b vkCmdDraw
 b vkCmdDrawIndexed
 b vkCmdDrawIndexedIndirect
 b vkCmdDrawIndexedIndirectCount
 b vkCmdDrawIndexedIndirectCountAMD
 b vkCmdDrawIndexedIndirectCountKHR
 b vkCmdDrawIndirect
 b vkCmdDrawIndirectByteCountEXT
 b vkCmdDrawIndirectCount
 b vkCmdDrawIndirectCountAMD
 b vkCmdDrawIndirectCountKHR
 b vkCmdDrawMeshTasksIndirectCountNV
 b vkCmdDrawMeshTasksIndirectNV
 b vkCmdDrawMeshTasksNV
 b vkCmdDrawMultiEXT
 b vkCmdDrawMultiIndexedEXT
 b vkCmdEndConditionalRenderingEXT
 b vkCmdEndDebugUtilsLabelEXT
 b vkCmdEndQuery
 b vkCmdEndQueryIndexedEXT
 b vkCmdEndRenderPass
 b vkCmdEndRenderPass2
 b vkCmdEndRenderPass2KHR
 b vkCmdEndTransformFeedbackEXT
 b vkCmdExecuteCommands
 b vkCmdExecuteGeneratedCommandsNV
 b vkCmdFillBuffer
 b vkCmdInsertDebugUtilsLabelEXT
 b vkCmdNextSubpass
 b vkCmdNextSubpass2
 b vkCmdNextSubpass2KHR
 b vkCmdPipelineBarrier
 b vkCmdPipelineBarrier2KHR
 b vkCmdPreprocessGeneratedCommandsNV
 b vkCmdPushConstants
 b vkCmdPushDescriptorSetKHR
 b vkCmdPushDescriptorSetWithTemplateKHR
 b vkCmdResetEvent
 b vkCmdResetEvent2KHR
 b vkCmdResetQueryPool
 b vkCmdResolveImage
 b vkCmdResolveImage2KHR
 b vkCmdSetBlendConstants
 b vkCmdSetCheckpointNV
 b vkCmdSetCoarseSampleOrderNV
 b vkCmdSetColorWriteEnableEXT
 b vkCmdSetCullModeEXT
 b vkCmdSetDepthBias
 b vkCmdSetDepthBiasEnableEXT
 b vkCmdSetDepthBounds
 b vkCmdSetDepthBoundsTestEnableEXT
 b vkCmdSetDepthCompareOpEXT
 b vkCmdSetDepthTestEnableEXT
 b vkCmdSetDepthWriteEnableEXT
 b vkCmdSetDeviceMask
 b vkCmdSetDeviceMaskKHR
 b vkCmdSetDiscardRectangleEXT
 b vkCmdSetEvent
 b vkCmdSetEvent2KHR
 b vkCmdSetExclusiveScissorNV
 b vkCmdSetFragmentShadingRateEnumNV
 b vkCmdSetFragmentShadingRateKHR
 b vkCmdSetFrontFaceEXT
 b vkCmdSetLineStippleEXT
 b vkCmdSetLineWidth
 b vkCmdSetLogicOpEXT
 b vkCmdSetPatchControlPointsEXT
 b vkCmdSetPerformanceMarkerINTEL
 b vkCmdSetPerformanceOverrideINTEL
 b vkCmdSetPerformanceStreamMarkerINTEL
 b vkCmdSetPrimitiveRestartEnableEXT
 b vkCmdSetPrimitiveTopologyEXT
 b vkCmdSetRasterizerDiscardEnableEXT
 b vkCmdSetRayTracingPipelineStackSizeKHR
 b vkCmdSetSampleLocationsEXT
 b vkCmdSetScissor
 b vkCmdSetScissorWithCountEXT
 b vkCmdSetStencilCompareMask
 b vkCmdSetStencilOpEXT
 b vkCmdSetStencilReference
 b vkCmdSetStencilTestEnableEXT
 b vkCmdSetStencilWriteMask
 b vkCmdSetVertexInputEXT
 b vkCmdSetViewport
 b vkCmdSetViewportShadingRatePaletteNV
 b vkCmdSetViewportWScalingNV
 b vkCmdSetViewportWithCountEXT
 b vkCmdSubpassShadingHUAWEI
 b vkCmdTraceRaysIndirectKHR
 b vkCmdTraceRaysKHR
 b vkCmdTraceRaysNV
 b vkCmdUpdateBuffer
 b vkCmdWaitEvents
 b vkCmdWaitEvents2KHR
 b vkCmdWriteAccelerationStructuresPropertiesKHR
 b vkCmdWriteAccelerationStructuresPropertiesNV
 b vkCmdWriteBufferMarker2AMD
 b vkCmdWriteBufferMarkerAMD
 b vkCmdWriteTimestamp
 b vkCmdWriteTimestamp2KHR
 b vkCompileDeferredNV
 b vkCopyAccelerationStructureKHR
 b vkCopyAccelerationStructureToMemoryKHR
 b vkCopyMemoryToAccelerationStructureKHR
 b vkCreateAccelerationStructureKHR
 b vkCreateAccelerationStructureNV
 b vkCreateBuffer
 b vkCreateBufferView
 b vkCreateCommandPool
 b vkCreateComputePipelines
 b vkCreateCuFunctionNVX
 b vkCreateCuModuleNVX
 b vkCreateDebugReportCallbackEXT
 b vkCreateDebugUtilsMessengerEXT
 b vkCreateDeferredOperationKHR
 b vkCreateDescriptorPool
 b vkCreateDescriptorSetLayout
 b vkCreateDescriptorUpdateTemplate
 b vkCreateDescriptorUpdateTemplateKHR
 b vkCreateDevice
 b vkCreateDisplayModeKHR
 b vkCreateDisplayPlaneSurfaceKHR
 b vkCreateEvent
 b vkCreateFence
 b vkCreateFramebuffer
 b vkCreateGraphicsPipelines
 b vkCreateHeadlessSurfaceEXT
 b vkCreateImage
 b vkCreateImageView
 b vkCreateIndirectCommandsLayoutNV
 b vkCreateInstance
 b vkCreatePipelineCache
 b vkCreatePipelineLayout
 b vkCreatePrivateDataSlotEXT
 b vkCreateQueryPool
 b vkCreateRayTracingPipelinesKHR
 b vkCreateRayTracingPipelinesNV
 b vkCreateRenderPass
 b vkCreateRenderPass2
 b vkCreateRenderPass2KHR
 b vkCreateSampler
 b vkCreateSamplerYcbcrConversion
 b vkCreateSamplerYcbcrConversionKHR
 b vkCreateSemaphore
 b vkCreateShaderModule
 b vkCreateSharedSwapchainsKHR
 b vkCreateSwapchainKHR
 b vkCreateValidationCacheEXT
 b vkCreateXcbSurfaceKHR
 b vkDebugMarkerSetObjectNameEXT
 b vkDebugMarkerSetObjectTagEXT
 b vkDebugReportMessageEXT
 b vkDeferredOperationJoinKHR
 b vkDestroyAccelerationStructureKHR
 b vkDestroyAccelerationStructureNV
 b vkDestroyBuffer
 b vkDestroyBufferView
 b vkDestroyCommandPool
 b vkDestroyCuFunctionNVX
 b vkDestroyCuModuleNVX
 b vkDestroyDebugReportCallbackEXT
 b vkDestroyDebugUtilsMessengerEXT
 b vkDestroyDeferredOperationKHR
 b vkDestroyDescriptorPool
 b vkDestroyDescriptorSetLayout
 b vkDestroyDescriptorUpdateTemplate
 b vkDestroyDescriptorUpdateTemplateKHR
 b vkDestroyDevice
 b vkDestroyEvent
 b vkDestroyFence
 b vkDestroyFramebuffer
 b vkDestroyImage
 b vkDestroyImageView
 b vkDestroyIndirectCommandsLayoutNV
 b vkDestroyInstance
 b vkDestroyPipeline
 b vkDestroyPipelineCache
 b vkDestroyPipelineLayout
 b vkDestroyPrivateDataSlotEXT
 b vkDestroyQueryPool
 b vkDestroyRenderPass
 b vkDestroySampler
 b vkDestroySamplerYcbcrConversion
 b vkDestroySamplerYcbcrConversionKHR
 b vkDestroySemaphore
 b vkDestroyShaderModule
 b vkDestroySurfaceKHR
 b vkDestroySwapchainKHR
 b vkDestroyValidationCacheEXT
 b vkDeviceWaitIdle
 b vkDisplayPowerControlEXT
 b vkEndCommandBuffer
 b vkEnumerateDeviceExtensionProperties
 b vkEnumerateDeviceLayerProperties
 b vkEnumerateInstanceExtensionProperties
 b vkEnumerateInstanceLayerProperties
 b vkEnumerateInstanceVersion
 b vkEnumeratePhysicalDeviceGroups
 b vkEnumeratePhysicalDeviceGroupsKHR
 b vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
 b vkEnumeratePhysicalDevices
 b vkFlushMappedMemoryRanges
 b vkFreeCommandBuffers
 b vkFreeDescriptorSets
 b vkFreeMemory
 b vkGetAccelerationStructureBuildSizesKHR
 b vkGetAccelerationStructureDeviceAddressKHR
 b vkGetAccelerationStructureHandleNV
 b vkGetAccelerationStructureMemoryRequirementsNV
 b vkGetBufferDeviceAddress
 b vkGetBufferDeviceAddressEXT
 b vkGetBufferDeviceAddressKHR
 b vkGetBufferMemoryRequirements
 b vkGetBufferMemoryRequirements2
 b vkGetBufferMemoryRequirements2KHR
 b vkGetBufferOpaqueCaptureAddress
 b vkGetBufferOpaqueCaptureAddressKHR
 b vkGetCalibratedTimestampsEXT
 b vkGetDeferredOperationMaxConcurrencyKHR
 b vkGetDeferredOperationResultKHR
 b vkGetDescriptorSetLayoutSupport
 b vkGetDescriptorSetLayoutSupportKHR
 b vkGetDeviceAccelerationStructureCompatibilityKHR
 b vkGetDeviceGroupPeerMemoryFeatures
 b vkGetDeviceGroupPeerMemoryFeaturesKHR
 b vkGetDeviceGroupPresentCapabilitiesKHR
 b vkGetDeviceGroupSurfacePresentModesKHR
 b vkGetDeviceMemoryCommitment
 b vkGetDeviceMemoryOpaqueCaptureAddress
 b vkGetDeviceMemoryOpaqueCaptureAddressKHR
 b vkGetDeviceProcAddr
 b vkGetDeviceQueue
 b vkGetDeviceQueue2
 b vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI
 b vkGetDisplayModeProperties2KHR
 b vkGetDisplayModePropertiesKHR
 b vkGetDisplayPlaneCapabilities2KHR
 b vkGetDisplayPlaneCapabilitiesKHR
 b vkGetDisplayPlaneSupportedDisplaysKHR
 b vkGetDrmDisplayEXT
 b vkGetEventStatus
 b vkGetFenceFdKHR
 b vkGetFenceStatus
 b vkGetGeneratedCommandsMemoryRequirementsNV
 b vkGetImageDrmFormatModifierPropertiesEXT
 b vkGetImageMemoryRequirements
 b vkGetImageMemoryRequirements2
 b vkGetImageMemoryRequirements2KHR
 b vkGetImageSparseMemoryRequirements
 b vkGetImageSparseMemoryRequirements2
 b vkGetImageSparseMemoryRequirements2KHR
 b vkGetImageSubresourceLayout
 b vkGetImageViewAddressNVX
 b vkGetImageViewHandleNVX
 b vkGetInstanceProcAddr
 b vkGetMemoryFdKHR
 b vkGetMemoryFdPropertiesKHR
 b vkGetMemoryHostPointerPropertiesEXT
 b vkGetMemoryRemoteAddressNV
 b vkGetPastPresentationTimingGOOGLE
 b vkGetPerformanceParameterINTEL
 b vkGetPhysicalDeviceCalibrateableTimeDomainsEXT
 b vkGetPhysicalDeviceCooperativeMatrixPropertiesNV
 b vkGetPhysicalDeviceDisplayPlaneProperties2KHR
 b vkGetPhysicalDeviceDisplayPlanePropertiesKHR
 b vkGetPhysicalDeviceDisplayProperties2KHR
 b vkGetPhysicalDeviceDisplayPropertiesKHR
 b vkGetPhysicalDeviceExternalBufferProperties
 b vkGetPhysicalDeviceExternalBufferPropertiesKHR
 b vkGetPhysicalDeviceExternalFenceProperties
 b vkGetPhysicalDeviceExternalFencePropertiesKHR
 b vkGetPhysicalDeviceExternalImageFormatPropertiesNV
 b vkGetPhysicalDeviceExternalSemaphoreProperties
 b vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
 b vkGetPhysicalDeviceFeatures
 b vkGetPhysicalDeviceFeatures2
 b vkGetPhysicalDeviceFeatures2KHR
 b vkGetPhysicalDeviceFormatProperties
 b vkGetPhysicalDeviceFormatProperties2
 b vkGetPhysicalDeviceFormatProperties2KHR
 b vkGetPhysicalDeviceFragmentShadingRatesKHR
 b vkGetPhysicalDeviceImageFormatProperties
 b vkGetPhysicalDeviceImageFormatProperties2
 b vkGetPhysicalDeviceImageFormatProperties2KHR
 b vkGetPhysicalDeviceMemoryProperties
 b vkGetPhysicalDeviceMemoryProperties2
 b vkGetPhysicalDeviceMemoryProperties2KHR
 b vkGetPhysicalDeviceMultisamplePropertiesEXT
 b vkGetPhysicalDevicePresentRectanglesKHR
 b vkGetPhysicalDeviceProperties
 b vkGetPhysicalDeviceProperties2
 b vkGetPhysicalDeviceProperties2KHR
 b vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
 b vkGetPhysicalDeviceQueueFamilyProperties
 b vkGetPhysicalDeviceQueueFamilyProperties2
 b vkGetPhysicalDeviceQueueFamilyProperties2KHR
 b vkGetPhysicalDeviceSparseImageFormatProperties
 b vkGetPhysicalDeviceSparseImageFormatProperties2
 b vkGetPhysicalDeviceSparseImageFormatProperties2KHR
 b vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV
 b vkGetPhysicalDeviceSurfaceCapabilities2EXT
 b vkGetPhysicalDeviceSurfaceCapabilities2KHR
 b vkGetPhysicalDeviceSurfaceCapabilitiesKHR
 b vkGetPhysicalDeviceSurfaceFormats2KHR
 b vkGetPhysicalDeviceSurfaceFormatsKHR
 b vkGetPhysicalDeviceSurfacePresentModesKHR
 b vkGetPhysicalDeviceSurfaceSupportKHR
 b vkGetPhysicalDeviceToolPropertiesEXT
 b vkGetPhysicalDeviceXcbPresentationSupportKHR
 b vkGetPipelineCacheData
 b vkGetPipelineExecutableInternalRepresentationsKHR
 b vkGetPipelineExecutablePropertiesKHR
 b vkGetPipelineExecutableStatisticsKHR
 b vkGetPrivateDataEXT
 b vkGetQueryPoolResults
 b vkGetQueueCheckpointData2NV
 b vkGetQueueCheckpointDataNV
 b vkGetRandROutputDisplayEXT
 b vkGetRayTracingCaptureReplayShaderGroupHandlesKHR
 b vkGetRayTracingShaderGroupHandlesKHR
 b vkGetRayTracingShaderGroupHandlesNV
 b vkGetRayTracingShaderGroupStackSizeKHR
 b vkGetRefreshCycleDurationGOOGLE
 b vkGetRenderAreaGranularity
 b vkGetSemaphoreCounterValue
 b vkGetSemaphoreCounterValueKHR
 b vkGetSemaphoreFdKHR
 b vkGetShaderInfoAMD
 b vkGetSwapchainCounterEXT
 b vkGetSwapchainImagesKHR
 b vkGetSwapchainStatusKHR
 b vkGetValidationCacheDataEXT
 b vkGetWinrtDisplayNV
 b vkImportFenceFdKHR
 b vkImportSemaphoreFdKHR
 b vkInitializePerformanceApiINTEL
 b vkInvalidateMappedMemoryRanges
 b vkMapMemory
 b vkMergePipelineCaches
 b vkMergeValidationCachesEXT
 b vkQueueBeginDebugUtilsLabelEXT
 b vkQueueBindSparse
 b vkQueueEndDebugUtilsLabelEXT
 b vkQueueInsertDebugUtilsLabelEXT
 b vkQueuePresentKHR
 b vkQueueSetPerformanceConfigurationINTEL
 b vkQueueSubmit
 b vkQueueSubmit2KHR
 b vkQueueWaitIdle
 b vkRegisterDeviceEventEXT
 b vkRegisterDisplayEventEXT
 b vkReleaseDisplayEXT
 b vkReleasePerformanceConfigurationINTEL
 b vkReleaseProfilingLockKHR
 b vkResetCommandBuffer
 b vkResetCommandPool
 b vkResetDescriptorPool
 b vkResetEvent
 b vkResetFences
 b vkResetQueryPool
 b vkResetQueryPoolEXT
 b vkSetDebugUtilsObjectNameEXT
 b vkSetDebugUtilsObjectTagEXT
 b vkSetEvent
 b vkSetHdrMetadataEXT
 b vkSetLocalDimmingAMD
 b vkSetPrivateDataEXT
 b vkSignalSemaphore
 b vkSignalSemaphoreKHR
 b vkSubmitDebugUtilsMessageEXT
 b vkTrimCommandPool
 b vkTrimCommandPoolKHR
 b vkUninitializePerformanceApiINTEL
 b vkUnmapMemory
 b vkUpdateDescriptorSetWithTemplate
 b vkUpdateDescriptorSetWithTemplateKHR
 b vkUpdateDescriptorSets
 b vkWaitForFences
 b vkWaitForPresentKHR
 b vkWaitSemaphores
 b vkWaitSemaphoresKHR
 b vkWriteAccelerationStructuresPropertiesKHR
 b vkh::BIsInstanceExtensionSupported(std::string)::vecProperties
 b vkh::sg_vecOptionalDeviceExtensions
 b vkh::sg_vecOptionalInstanceExtensions
 b vkh::sg_vecRequiredDeviceExtensions
 b vkh::sg_vecRequiredInstanceExtensions
 b vrIOBuffer001
 b vrMailbox001
 b vrOverlayView001
 b vrOverlayView001_FnTable
 b vrScreenshots001
 b vrSteamPrivate001
 b vrSteamPrivate002
 b vrWatchdogHost001
 b vrapplications001
 b vrapplications002
 b vrapplications003
 b vrapplications004
 b vrapplications004_FnTable
 b vrapplications005
 b vrapplications005_FnTable
 b vrapplications006
 b vrapplications006_FnTable
 b vrblockqueue001
 b vrblockqueue002
 b vrblockqueue003
 b vrblockqueue004
 b vrchaperone003
 b vrchaperone003_FnTable
 b vrchaperonesetup001
 b vrchaperonesetup002
 b vrchaperonesetup003
 b vrchaperonesetup004
 b vrchaperonesetup005
 b vrchaperonesetup005_FnTable
 b vrcompositor006
 b vrcompositor007
 b vrcompositor008
 b vrcompositor009
 b vrcompositor010
 b vrcompositor011
 b vrcompositor012
 b vrcompositor013
 b vrcompositor013_FnTable
 b vrcompositor014
 b vrcompositor014_FnTable
 b vrcompositor015
 b vrcompositor015_FnTable
 b vrcompositor016
 b vrcompositor016_FnTable
 b vrcompositor017
 b vrcompositor017_FnTable
 b vrcompositor018
 b vrcompositor018_FnTable
 b vrcompositor019
 b vrcompositor019_FnTable
 b vrcompositor020
 b vrcompositor020_FnTable
 b vrcompositor021
 b vrcompositor021_FnTable
 b vrcompositor022
 b vrcompositor022_FnTable
 b vrcompositor023
 b vrcompositor023_FnTable
 b vrcompositor024
 b vrcompositor024_FnTable
 b vrcompositor025
 b vrcompositor025_FnTable
 b vrcompositor026
 b vrcompositor026_FnTable
 b vrcontrolpanel001
 b vrcontrolpanel002
 b vrcontrolpanel003
 b vrcontrolpanel004
 b vrcontrolpanel005
 b vrdashboardmanager001
 b vrinput001
 b vrinput001_FnTable
 b vrinput002
 b vrinput002_FnTable
 b vrinput003
 b vrinput003_FnTable
 b vrinput004
 b vrinput004_FnTable
 b vrinput005
 b vrinput005_FnTable
 b vrinput006
 b vrinput006_FnTable
 b vrinput007
 b vrinput007_FnTable
 b vrinput008
 b vrinput008_FnTable
 b vrinput009
 b vrinput009_FnTable
 b vriobuffer002
 b vriobuffer002_FnTable
 b vrnotifications001
 b vroverlay001
 b vroverlay002
 b vroverlay003
 b vroverlay004
 b vroverlay005
 b vroverlay006
 b vroverlay007
 b vroverlay008
 b vroverlay009
 b vroverlay010
 b vroverlay010_FnTable
 b vroverlay011
 b vroverlay011_FnTable
 b vroverlay012
 b vroverlay012_FnTable
 b vroverlay013
 b vroverlay013_FnTable
 b vroverlay014
 b vroverlay014_FnTable
 b vroverlay015
 b vroverlay015_FnTable
 b vroverlay016
 b vroverlay016_FnTable
 b vroverlay017
 b vroverlay017_FnTable
 b vroverlay018
 b vroverlay018_FnTable
 b vroverlay019
 b vroverlay019_FnTable
 b vroverlay020
 b vroverlay020_FnTable
 b vroverlay021
 b vroverlay021_FnTable
 b vroverlay022
 b vroverlay022_FnTable
 b vroverlay023
 b vroverlay023_FnTable
 b vroverlay024
 b vroverlay024_FnTable
 b vroverlay025
 b vroverlay025_FnTable
 b vroverlayview002
 b vroverlayview002_FnTable
 b vrrendermodels001
 b vrrendermodels002
 b vrrendermodels003
 b vrrendermodels004
 b vrrendermodels004_FnTable
 b vrrendermodels005
 b vrrendermodels005_FnTable
 b vrsettings001
 b vrsettings001_FnTable
 b vrsettings002
 b vrsettings002_FnTable
 b vrsystem001
 b vrsystem002
 b vrsystem003
 b vrsystem004
 b vrsystem005
 b vrsystem006
 b vrsystem007
 b vrsystem008
 b vrsystem009
 b vrsystem010
 b vrsystem011
 b vrsystem011_FnTable
 b vrsystem012
 b vrsystem012_FnTable
 b vrsystem013
 b vrsystem013_FnTable
 b vrsystem014
 b vrsystem014_FnTable
 b vrsystem015
 b vrsystem015_FnTable
 b vrsystem016
 b vrsystem016_FnTable
 b vrsystem017
 b vrsystem017_FnTable
 b vrsystem018
 b vrsystem018_FnTable
 b vrsystem019
 b vrsystem019_FnTable
 b vrsystem020
 b vrsystem020_FnTable
 b vrsystem021
 b vrsystem021_FnTable
 b vrtrackedcamera002
 b vrtrackedcamera002_FnTable
 b vrtrackedcamera003
 b vrtrackedcamera003_FnTable
 b vrtrackedcamera004
 b vrtrackedcamera004_FnTable
 b vrtrackedcamera005
 b vrtrackedcamera005_FnTable
 backtrace
 backtrace_symbols
 bind
 calloc
 chdir
 chmod
 clock_gettime
 clock_nanosleep
 close
 closedir
 connect
 cos
 cosf
 d BIsHapticLoggingEnabled()::s_bNeedsRecheck
 d BIsTrackedDevicePropertyMandantory(vr::ETrackedDeviceProperty)::eKeys
 d CActionBindingConfigGenerator::DetermineSourceNodeForModeAndInputType(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*)::s_vecXyx
 d CPathManager_Server::AddExternalPathAliasRoot(std::string const&, unsigned long, vr::IVRExternalProperties*, unsigned long&)::s_containerIdGenerator
 d CServerTrackedDeviceProvider_002::GetInterfaceVersions()::k_InterfaceVersions
 d CSkeletonList::m_List
 d CVRChaperoneClient::GetBoundsColor(vr::HmdColor_t*, int, float, vr::HmdColor_t*)::s_bFirstTime
 d CVRCompositorClient::CheckError(CVRCompositorSharedTextures::Error, vr::EVRCompositorError*) const::s_bFirstTime
 d CVRCompositorClient::SubmitWithArrayIndex(vr::EVREye, vr::Texture_t const*, unsigned int, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags, unsigned long)::s_bFirstOffense
 d DW.ref._ZTIPN4Json9ExceptionE
 d DW.ref._ZTISt9exception
 d DW.ref.__gxx_personality_v0
 d GenSessionId()::sNextSessionId
 d GetBitForBitnum(int)::bitsForBitnum
 d GetNamespacingUid()::s_cachedNamespaceUid
 d GetNewSharedResourceHandle()::s_nIncrementingIndex
 d GetNextEventId()::ulMessageCounter
 d GetTraceMarkerFd()::s_nTraceFileFD
 d GetTrackedDeviceProperties()::eKeys
 d IPC::LinuxSharedFd::Init(int)::sIncrementingIndex
 d IVRCameraComponent001_Version
 d IVRCameraComponent002_Version
 d IVRDisplayComponent001_Version
 d IVRVirtualDisplay001_Version
 d Json::Value::null
 d Json::Value::nullRef
 d Json::kNullRef
 d SkeletalCompression::CompressHandSkeleton(CSmartPtr<CAnimPose, CRefCountAccessor> const&, void*, unsigned int)::bytesMin
 d VTT for CSharedBufferLinux
 d VTT for CSharedCountingSemaphoreLinux
 d VTT for CSharedImageLinux
 d VTT for CSharedResourceBaseLinux
 d VTT for CSharedSemaphoreLinux
 d VTT for InMemoryInputStream
 d VulkanVRRenderer::computeShaderDefs
 d VulkanVRRenderer::iedCameraDecodeQuad
 d VulkanVRRenderer::iedCameraProxyGeom
 d VulkanVRRenderer::iedDistort
 d VulkanVRRenderer::iedGeom
 d VulkanVRRenderer::iedGeomFloor
 d VulkanVRRenderer::iedGeomWithNormals
 d VulkanVRRenderer::iedGeomWithTangents
 d VulkanVRRenderer::iedLatLong
 d VulkanVRRenderer::iedNoDistort
 d VulkanVRRenderer::iedNoDistortLayered
 d VulkanVRRenderer::iedPositionColor
 d VulkanVRRenderer::iedQuad
 d VulkanVRRenderer::pixelShaderDefs
 d VulkanVRRenderer::vertexShaderDefs
 d _DYNAMIC
 d _GLOBAL_OFFSET_TABLE_
 d __TMC_END__
 d __TMC_LIST__
 d __do_global_dtors_aux_fini_array_entry
 d __dso_handle
 d __frame_dummy_init_array_entry
 d adds.1
 d construction vtable for CSharedResourceBaseLinux-in-CSharedBufferLinux
 d construction vtable for CSharedResourceBaseLinux-in-CSharedCountingSemaphoreLinux
 d construction vtable for CSharedResourceBaseLinux-in-CSharedImageLinux
 d construction vtable for CSharedResourceBaseLinux-in-CSharedSemaphoreLinux
 d construction vtable for std::istream-in-InMemoryInputStream
 d construction vtable for vr::IVRSharedBuffer-in-CSharedBufferLinux
 d construction vtable for vr::IVRSharedCountingSemaphore-in-CSharedCountingSemaphoreLinux
 d construction vtable for vr::IVRSharedImage-in-CSharedImageLinux
 d construction vtable for vr::IVRSharedSemaphore-in-CSharedSemaphoreLinux
 d g_IVRApplications_004_FnTable
 d g_IVRApplications_005_FnTable
 d g_IVRApplications_006_FnTable
 d g_IVRChaperoneSetup_005_FnTable
 d g_IVRChaperone_003_FnTable
 d g_IVRCompositor_013_FnTable
 d g_IVRCompositor_014_FnTable
 d g_IVRCompositor_015_FnTable
 d g_IVRCompositor_016_FnTable
 d g_IVRCompositor_017_FnTable
 d g_IVRCompositor_018_FnTable
 d g_IVRCompositor_019_FnTable
 d g_IVRCompositor_020_FnTable
 d g_IVRCompositor_021_FnTable
 d g_IVRCompositor_022_FnTable
 d g_IVRCompositor_023_FnTable
 d g_IVRCompositor_024_FnTable
 d g_IVRCompositor_025_FnTable
 d g_IVRCompositor_026_FnTable
 d g_IVRIOBuffer_002_FnTable
 d g_IVRInput_001_FnTable
 d g_IVRInput_002_FnTable
 d g_IVRInput_003_FnTable
 d g_IVRInput_004_FnTable
 d g_IVRInput_005_FnTable
 d g_IVRInput_006_FnTable
 d g_IVRInput_007_FnTable
 d g_IVRInput_008_FnTable
 d g_IVRInput_009_FnTable
 d g_IVROverlayView_001_FnTable
 d g_IVROverlayView_002_FnTable
 d g_IVROverlay_010_FnTable
 d g_IVROverlay_011_FnTable
 d g_IVROverlay_012_FnTable
 d g_IVROverlay_013_FnTable
 d g_IVROverlay_014_FnTable
 d g_IVROverlay_015_FnTable
 d g_IVROverlay_016_FnTable
 d g_IVROverlay_017_FnTable
 d g_IVROverlay_018_FnTable
 d g_IVROverlay_019_FnTable
 d g_IVROverlay_020_FnTable
 d g_IVROverlay_021_FnTable
 d g_IVROverlay_022_FnTable
 d g_IVROverlay_023_FnTable
 d g_IVROverlay_024_FnTable
 d g_IVROverlay_025_FnTable
 d g_IVRRenderModels_004_FnTable
 d g_IVRRenderModels_005_FnTable
 d g_IVRSettings_001_FnTable
 d g_IVRSettings_002_FnTable
 d g_IVRSystem_011_FnTable
 d g_IVRSystem_012_FnTable
 d g_IVRSystem_013_FnTable
 d g_IVRSystem_014_FnTable
 d g_IVRSystem_015_FnTable
 d g_IVRSystem_016_FnTable
 d g_IVRSystem_017_FnTable
 d g_IVRSystem_018_FnTable
 d g_IVRSystem_019_FnTable
 d g_IVRSystem_020_FnTable
 d g_IVRSystem_021_FnTable
 d g_IVRTrackedCamera_002_FnTable
 d g_IVRTrackedCamera_003_FnTable
 d g_IVRTrackedCamera_004_FnTable
 d g_IVRTrackedCamera_005_FnTable
 d g_LoggingMutex
 d g_SectionNameToIdTable
 d g_VR_IVRApplications_FnTable
 d g_VR_IVRBlockQueue_FnTable
 d g_VR_IVRChaperoneSetup_FnTable
 d g_VR_IVRChaperone_FnTable
 d g_VR_IVRCompositor_FnTable
 d g_VR_IVRDebug_FnTable
 d g_VR_IVRDriverManager_FnTable
 d g_VR_IVRExtendedDisplay_FnTable
 d g_VR_IVRHeadsetView_FnTable
 d g_VR_IVRIOBuffer_FnTable
 d g_VR_IVRInput_FnTable
 d g_VR_IVRNotifications_FnTable
 d g_VR_IVROverlayView_FnTable
 d g_VR_IVROverlay_FnTable
 d g_VR_IVRPaths_FnTable
 d g_VR_IVRProperties_FnTable
 d g_VR_IVRRenderModels_FnTable
 d g_VR_IVRResources_FnTable
 d g_VR_IVRScreenshots_FnTable
 d g_VR_IVRSettings_FnTable
 d g_VR_IVRSpatialAnchors_FnTable
 d g_VR_IVRSystem_FnTable
 d g_VR_IVRTrackedCamera_FnTable
 d g_nSIMDBitMaskToIndex
 d g_rPairs
 d g_szSemFileName
 d g_unNextBlockQueueId
 d k_pchCameraComponentPrefix
 d k_pchControllerComponentPrefix
 d k_pchDisplayComponentPrefix
 d k_pchDriverDirectModeComponentPrefix
 d k_pchVirtualDisplayComponentPrefix
 d k_rDevicePaths
 d s_bCurrentMiniDumpIsFatal
 d s_mat34Identity
 d stbi__h2l_gamma_i
 d stbi__h2l_scale_i
 d stbi__l2h_gamma
 d stbi__l2h_scale
 d stbi__parse_png_file(stbi__png*, int, int)::invalid_chunk
 d stbi__stdio_callbacks
 d stbi_write_force_png_filter
 d stbi_write_png_compression_level
 d stbi_write_tga_with_rle
 d stbiw__encode_png_line(unsigned char*, int, int, int, int, int, int, signed char*)::firstmap
 d stbiw__encode_png_line(unsigned char*, int, int, int, int, int, int, signed char*)::mapping
 d std::regex_traits<char>::lookup_classname<char const*>(char const*, char const*, bool) const::__classnames
 d std::regex_traits<char>::lookup_collatename<char const*>(char const*, char const*) const::__collatenames
 d typeinfo for ApplicationsInterfaceRegistration<CVRApplications_001>
 d typeinfo for ApplicationsInterfaceRegistration<CVRApplications_002>
 d typeinfo for ApplicationsInterfaceRegistration<CVRApplications_003>
 d typeinfo for ApplicationsInterfaceRegistration<CVRApplications_004>
 d typeinfo for ApplicationsInterfaceRegistration<CVRApplications_005>
 d typeinfo for ApplicationsInterfaceRegistration<CVRApplications_006>
 d typeinfo for BlockQueueInterfaceRegistration<CVRBlockQueue_001>
 d typeinfo for BlockQueueInterfaceRegistration<CVRBlockQueue_002>
 d typeinfo for BlockQueueInterfaceRegistration<CVRBlockQueue_003>
 d typeinfo for BlockQueueInterfaceRegistration<CVRBlockQueue_004>
 d typeinfo for CAnimFactoryBase::CFactoryMaker
 d typeinfo for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>
 d typeinfo for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>
 d typeinfo for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>
 d typeinfo for CAnimResource
 d typeinfo for CAnimSkeleton
 d typeinfo for CAutoRestoreEnvironment
 d typeinfo for CBoneMaskResource
 d typeinfo for CClientPropertyManager
 d typeinfo for CCompositorPluginProvider
 d typeinfo for CCompositorPluginProvider_Latest
 d typeinfo for CDownsampleRenderer
 d typeinfo for CDriverDirectInternalClient
 d typeinfo for CDriverLog
 d typeinfo for CDriverManager
 d typeinfo for CFixedSizePropertyContainer
 d typeinfo for CHmdSystemLatest
 d typeinfo for CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType)::{lambda(char const*)#1}
 d typeinfo for CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#1}
 d typeinfo for CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#2}
 d typeinfo for CHmdSystem_001
 d typeinfo for CHmdSystem_004
 d typeinfo for CHmd_001
 d typeinfo for CHmd_002
 d typeinfo for CHmd_003
 d typeinfo for CHmd_004
 d typeinfo for CHmd_005
 d typeinfo for CHmd_006
 d typeinfo for CIOBufferCursor
 d typeinfo for CInputFilterBase
 d typeinfo for CInputFilterValueStore
 d typeinfo for CInputFilter_Boolean_And
 d typeinfo for CInputFilter_Boolean_ButtonPressState
 d typeinfo for CInputFilter_Boolean_Latch
 d typeinfo for CInputFilter_Boolean_Or
 d typeinfo for CInputFilter_Boolean_Threshold
 d typeinfo for CInputFilter_Boolean_Toggle
 d typeinfo for CInputFilter_DPad
 d typeinfo for CInputFilter_Grab_ValueAndForce
 d typeinfo for CInputFilter_JoystickSettings
 d typeinfo for CInputFilter_Pose_Component
 d typeinfo for CInputFilter_Pose_Constant
 d typeinfo for CInputFilter_RadialMenu
 d typeinfo for CInputFilter_RadialMenuBase
 d typeinfo for CInputFilter_Scalar_Constant
 d typeinfo for CInputFilter_Scalar_Deadzone
 d typeinfo for CInputFilter_Scalar_Exponent
 d typeinfo for CInputFilter_Scalar_JoystickScroll_Discrete
 d typeinfo for CInputFilter_Scalar_JoystickScroll_Smooth
 d typeinfo for CInputFilter_Scalar_ScaleAndOffset
 d typeinfo for CInputFilter_Scalar_TrackpadScroll_Discrete
 d typeinfo for CInputFilter_Scalar_TrackpadScroll_Smooth
 d typeinfo for CInputFilter_TriggerHaptic
 d typeinfo for CInputFilter_XRDPad
 d typeinfo for CKeyframedDataResource
 d typeinfo for CLegacyInput
 d typeinfo for CLogBuffer::CLogBuffer()::{lambda(ELogLevel, char const*, void*)#1}
 d typeinfo for CMCStore
 d typeinfo for CMsaaResolveRenderer
 d typeinfo for CNonCopyable
 d typeinfo for CPackedBoneTransforms
 d typeinfo for CPathManagerBase
 d typeinfo for CPathManager_Client
 d typeinfo for CPathManager_Server
 d typeinfo for CPropertyContainer
 d typeinfo for CPropertyManager
 d typeinfo for CRenderModelLoadThread
 d typeinfo for CRenderModelManager
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(unsigned short, unsigned short, unsigned short)#14}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#2}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#3}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#4}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#5}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#6}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#7}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#8}
 d typeinfo for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#9}
 d typeinfo for CServerDriverHost_002
 d typeinfo for CServerDriverHost_003
 d typeinfo for CServerTrackedDeviceProvider
 d typeinfo for CServerTrackedDeviceProvider_002
 d typeinfo for CServerTrackedDeviceProvider_003
 d typeinfo for CServerTrackedDeviceProvider_Latest
 d typeinfo for CSettingsManager
 d typeinfo for CSharedBufferLinux
 d typeinfo for CSharedCountingSemaphoreLinux
 d typeinfo for CSharedImageLinux
 d typeinfo for CSharedResourceBaseLinux
 d typeinfo for CSharedResourceNamespaceServer
 d typeinfo for CSharedSemaphoreLinux
 d typeinfo for CSimulatedActionBase
 d typeinfo for CSimulatedTrackpadClick
 d typeinfo for CSimulatedTriggerPull
 d typeinfo for CSxrAction
 d typeinfo for CSxrActionSet
 d typeinfo for CSxrChildHandle<CSxrAction, XrAction_T*, CSxrActionSet>
 d typeinfo for CSxrChildHandle<CSxrActionSet, XrActionSet_T*, CSxrInstance>
 d typeinfo for CSxrChildHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*, CSxrSession>
 d typeinfo for CSxrChildHandle<CSxrSession, XrSession_T*, CSxrInstance>
 d typeinfo for CSxrChildHandle<CSxrSwapchainBase, XrSwapchain_T*, CSxrSession>
 d typeinfo for CSxrChildVariableParentHandle<CSxrSpace, XrSpace_T*, CSxrAction, CSxrSession>
 d typeinfo for CSxrCompositorOpenVR
 d typeinfo for CSxrCompositorPrism
 d typeinfo for CSxrDeletableBase
 d typeinfo for CSxrDispatchableHandle<CSxrAction, XrAction_T*>
 d typeinfo for CSxrDispatchableHandle<CSxrActionSet, XrActionSet_T*>
 d typeinfo for CSxrDispatchableHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*>
 d typeinfo for CSxrDispatchableHandle<CSxrInstance, XrInstance_T*>
 d typeinfo for CSxrDispatchableHandle<CSxrSession, XrSession_T*>
 d typeinfo for CSxrDispatchableHandle<CSxrSpace, XrSpace_T*>
 d typeinfo for CSxrDispatchableHandle<CSxrSwapchainBase, XrSwapchain_T*>
 d typeinfo for CSxrGraphicsBindingGLOpenVR
 d typeinfo for CSxrGraphicsBindingPrism
 d typeinfo for CSxrGraphicsBindingVulkanOpenVR
 d typeinfo for CSxrHandTrackerEXT
 d typeinfo for CSxrInstance
 d typeinfo for CSxrParentBase
 d typeinfo for CSxrSession
 d typeinfo for CSxrSpace
 d typeinfo for CSxrSwapchainBase
 d typeinfo for CSxrSwapchainGLOpenVR
 d typeinfo for CSxrSwapchainPrism
 d typeinfo for CSxrSwapchainVulkanOpenVR
 d typeinfo for CSyncLockThread
 d typeinfo for CTrackedDeviceServerDriverAdapter
 d typeinfo for CVRApplications_001
 d typeinfo for CVRApplications_002
 d typeinfo for CVRApplications_003
 d typeinfo for CVRApplications_004
 d typeinfo for CVRApplications_005
 d typeinfo for CVRApplications_006
 d typeinfo for CVRBlockQueueManager
 d typeinfo for CVRBlockQueue_001
 d typeinfo for CVRBlockQueue_002
 d typeinfo for CVRBlockQueue_003
 d typeinfo for CVRBlockQueue_004
 d typeinfo for CVRCameraComponentAdapter
 d typeinfo for CVRCameraComponent_001
 d typeinfo for CVRCameraComponent_002
 d typeinfo for CVRCameraComponent_Latest
 d typeinfo for CVRChaperoneClient
 d typeinfo for CVRChaperoneSetup_001
 d typeinfo for CVRChaperoneSetup_002
 d typeinfo for CVRChaperoneSetup_003
 d typeinfo for CVRChaperoneSetup_004
 d typeinfo for CVRChaperoneSetup_005
 d typeinfo for CVRChaperone_001
 d typeinfo for CVRChaperone_002
 d typeinfo for CVRChaperone_003
 d typeinfo for CVRClientCore_001
 d typeinfo for CVRClientCore_002
 d typeinfo for CVRCompositorClient
 d typeinfo for CVRCompositorClientBase
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>
 d typeinfo for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>
 d typeinfo for CVRCompositorSharedTextures::CTextureCacheKey
 d typeinfo for CVRCompositorSharedTextures::ISharedTextureSet
 d typeinfo for CVRCompositorSharedTextures::IVRSharedTexture
 d typeinfo for CVRCompositor_003
 d typeinfo for CVRCompositor_004
 d typeinfo for CVRCompositor_005
 d typeinfo for CVRCompositor_006
 d typeinfo for CVRCompositor_007
 d typeinfo for CVRCompositor_008
 d typeinfo for CVRCompositor_009
 d typeinfo for CVRCompositor_010
 d typeinfo for CVRCompositor_011
 d typeinfo for CVRCompositor_012
 d typeinfo for CVRCompositor_013
 d typeinfo for CVRCompositor_014
 d typeinfo for CVRCompositor_015
 d typeinfo for CVRCompositor_016
 d typeinfo for CVRCompositor_017
 d typeinfo for CVRCompositor_018
 d typeinfo for CVRCompositor_019
 d typeinfo for CVRCompositor_020
 d typeinfo for CVRCompositor_021
 d typeinfo for CVRCompositor_022
 d typeinfo for CVRCompositor_023
 d typeinfo for CVRCompositor_024
 d typeinfo for CVRCompositor_025
 d typeinfo for CVRCompositor_026
 d typeinfo for CVRControlPanel_001
 d typeinfo for CVRControlPanel_002
 d typeinfo for CVRControlPanel_003
 d typeinfo for CVRControlPanel_004
 d typeinfo for CVRControlPanel_005
 d typeinfo for CVRControllerComponentAdapter
 d typeinfo for CVRControllerComponent_Latest
 d typeinfo for CVRDashboardManager_001
 d typeinfo for CVRDebug
 d typeinfo for CVRDisplayComponentAdapter
 d typeinfo for CVRDisplayComponent_001
 d typeinfo for CVRDisplayComponent_Latest
 d typeinfo for CVRDriverDirectModeComponentAdapter
 d typeinfo for CVRDriverDirectModeComponent_001
 d typeinfo for CVRDriverDirectModeComponent_002
 d typeinfo for CVRDriverDirectModeComponent_003
 d typeinfo for CVRDriverDirectModeComponent_004
 d typeinfo for CVRDriverDirectModeComponent_005
 d typeinfo for CVRDriverDirectModeComponent_006
 d typeinfo for CVRDriverDirectModeComponent_007
 d typeinfo for CVRDriverDirectModeComponent_Latest
 d typeinfo for CVRFramerateGovernor
 d typeinfo for CVRIOBuffer
 d typeinfo for CVRIOBuffer_001
 d typeinfo for CVRIOBuffer_002
 d typeinfo for CVRInputLatest
 d typeinfo for CVRInputLatest::InputFrame_t::GetAndCollapseActionValues(VRAction_Entry_t*, unsigned long, unsigned long)::{lambda(unsigned long)#1}
 d typeinfo for CVRInput_001
 d typeinfo for CVRInput_002
 d typeinfo for CVRInput_003
 d typeinfo for CVRInput_004
 d typeinfo for CVRInput_005
 d typeinfo for CVRInput_006
 d typeinfo for CVRInput_007
 d typeinfo for CVRInput_008
 d typeinfo for CVRInput_009
 d typeinfo for CVRLog::InitLog(char const*, char const*, bool, unsigned long)::{lambda(ELogLevel, char const*, void*)#1}
 d typeinfo for CVRMailbox
 d typeinfo for CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}
 d typeinfo for CVRMailboxBase
 d typeinfo for CVRMailboxClient
 d typeinfo for CVRMailbox_001
 d typeinfo for CVRMsg_AbortApplicationTransition
 d typeinfo for CVRMsg_AcknowledgeQuit_Exiting
 d typeinfo for CVRMsg_ApplicationInfo
 d typeinfo for CVRMsg_ApplicationInfo_Manifest
 d typeinfo for CVRMsg_ApplicationInfo_Options
 d typeinfo for CVRMsg_ApplicationManifestRequest
 d typeinfo for CVRMsg_ApplicationManifestResponse
 d typeinfo for CVRMsg_CancelApplicationLaunch
 d typeinfo for CVRMsg_CancelApplicationLaunchResponse
 d typeinfo for CVRMsg_ChangeAppType
 d typeinfo for CVRMsg_ChangeAppTypeResponse
 d typeinfo for CVRMsg_ClientMailbox_GetNextMessage
 d typeinfo for CVRMsg_ClientMailbox_GetNextMessageResponse
 d typeinfo for CVRMsg_ClientMailbox_RegisterMailbox
 d typeinfo for CVRMsg_ClientMailbox_RegisterMailboxResponse
 d typeinfo for CVRMsg_ClientMailbox_SendMailboxMessage
 d typeinfo for CVRMsg_ClientMailbox_SendMailboxMessageResponse
 d typeinfo for CVRMsg_ClientMailbox_UnregisterMailbox
 d typeinfo for CVRMsg_ClientMailbox_UnregisterMailboxResponse
 d typeinfo for CVRMsg_CompositorBringToFront
 d typeinfo for CVRMsg_CompositorClearFrameBuffer
 d typeinfo for CVRMsg_CompositorConnect
 d typeinfo for CVRMsg_CompositorConnectResponse
 d typeinfo for CVRMsg_CompositorDumpImages
 d typeinfo for CVRMsg_CompositorDumpImagesAll
 d typeinfo for CVRMsg_CompositorGetScreenshotPropertyFilename
 d typeinfo for CVRMsg_CompositorGetScreenshotPropertyFilenameResponse
 d typeinfo for CVRMsg_CompositorGetScreenshotPropertyType
 d typeinfo for CVRMsg_CompositorGetScreenshotPropertyTypeResponse
 d typeinfo for CVRMsg_CompositorGoToBack
 d typeinfo for CVRMsg_CompositorHookScreenshot
 d typeinfo for CVRMsg_CompositorHookScreenshotResponse
 d typeinfo for CVRMsg_CompositorKeyboardShown
 d typeinfo for CVRMsg_CompositorKeyboardShownResponse
 d typeinfo for CVRMsg_CompositorNewSharedBuffer
 d typeinfo for CVRMsg_CompositorNewSharedBufferResponse
 d typeinfo for CVRMsg_CompositorNewSharedImage
 d typeinfo for CVRMsg_CompositorNewSharedImageResponse
 d typeinfo for CVRMsg_CompositorNewSharedSemaphore
 d typeinfo for CVRMsg_CompositorNewSharedSemaphoreResponse
 d typeinfo for CVRMsg_CompositorQuit
 d typeinfo for CVRMsg_CompositorRefSharedResource
 d typeinfo for CVRMsg_CompositorRefSharedResourceResponse
 d typeinfo for CVRMsg_CompositorRequestScreenshot
 d typeinfo for CVRMsg_CompositorRequestScreenshotResponse
 d typeinfo for CVRMsg_CompositorSetDashboardVisibilityResponse
 d typeinfo for CVRMsg_CompositorSubmitScreenshot
 d typeinfo for CVRMsg_CompositorSubmitScreenshotResponse
 d typeinfo for CVRMsg_CompositorTakeStereoScreenshot
 d typeinfo for CVRMsg_CompositorTakeStereoScreenshotResponse
 d typeinfo for CVRMsg_CompositorUnrefSharedResource
 d typeinfo for CVRMsg_CompositorUnrefSharedResourceResponse
 d typeinfo for CVRMsg_CompositorUpdateScreenshotProgress
 d typeinfo for CVRMsg_CompositorUpdateScreenshotProgressResponse
 d typeinfo for CVRMsg_ComputeDistortion
 d typeinfo for CVRMsg_ComputeDistortionBatched
 d typeinfo for CVRMsg_ComputeDistortionBatchedResponse
 d typeinfo for CVRMsg_ComputeDistortionBatchedResponse_OutputCoord
 d typeinfo for CVRMsg_ComputeDistortionBatched_InputCoord
 d typeinfo for CVRMsg_ComputeDistortionResponse
 d typeinfo for CVRMsg_Connect
 d typeinfo for CVRMsg_ConnectResponse
 d typeinfo for CVRMsg_CreateSwapTextureSet
 d typeinfo for CVRMsg_CreateSwapTextureSetResponse
 d typeinfo for CVRMsg_DashboardStarted
 d typeinfo for CVRMsg_DefaultBinding
 d typeinfo for CVRMsg_DestroySwapTextureSet
 d typeinfo for CVRMsg_DriverDebugRequest
 d typeinfo for CVRMsg_DriverDebugResponse
 d typeinfo for CVRMsg_GetApplicationInfo
 d typeinfo for CVRMsg_GetApplicationLaunchArguments
 d typeinfo for CVRMsg_GetApplicationLaunchArgumentsResponse
 d typeinfo for CVRMsg_GetDisplayInfo
 d typeinfo for CVRMsg_GetDisplayInfoResponse
 d typeinfo for CVRMsg_GetDisplayInfoResponse_DisplayInfo
 d typeinfo for CVRMsg_GetDriverDetail
 d typeinfo for CVRMsg_GetDriverDetailResponse
 d typeinfo for CVRMsg_GetDriverInfo
 d typeinfo for CVRMsg_GetDriverInfoResponse
 d typeinfo for CVRMsg_GetDriverInfoResponse_DriverInfo
 d typeinfo for CVRMsg_Input_GetActionBindings
 d typeinfo for CVRMsg_Input_GetActionBindingsResponse
 d typeinfo for CVRMsg_Input_GetOriginLocalizedName
 d typeinfo for CVRMsg_Input_GetOriginLocalizedNameResponse
 d typeinfo for CVRMsg_Input_SetActionManifestPath
 d typeinfo for CVRMsg_Input_SetActionManifestPathResponse
 d typeinfo for CVRMsg_Input_SetXrInputConfig
 d typeinfo for CVRMsg_LaunchApplication
 d typeinfo for CVRMsg_LaunchApplicationForMimeType
 d typeinfo for CVRMsg_LaunchApplicationForMimeTypeResponse
 d typeinfo for CVRMsg_LaunchApplicationResponse
 d typeinfo for CVRMsg_LaunchInternalProcess
 d typeinfo for CVRMsg_LaunchInternalProcessResponse
 d typeinfo for CVRMsg_LaunchTemplateApplication
 d typeinfo for CVRMsg_LaunchTemplateApplicationResponse
 d typeinfo for CVRMsg_LaunchTemplateApplication_AppOverrideKey
 d typeinfo for CVRMsg_LogMessageToServer
 d typeinfo for CVRMsg_MimeType
 d typeinfo for CVRMsg_NoResponse
 d typeinfo for CVRMsg_OculusSDKStart
 d typeinfo for CVRMsg_Path_HandleToString
 d typeinfo for CVRMsg_Path_HandleToStringResponse
 d typeinfo for CVRMsg_Path_StringToHandle
 d typeinfo for CVRMsg_Path_StringToHandleResponse
 d typeinfo for CVRMsg_PerformApplicationPrelaunchCheck
 d typeinfo for CVRMsg_PerformApplicationPrelaunchCheckResponse
 d typeinfo for CVRMsg_PowerOffTrackedDevice
 d typeinfo for CVRMsg_PrismPrioritySet
 d typeinfo for CVRMsg_QuitProcessRequest
 d typeinfo for CVRMsg_QuitProcessResponse
 d typeinfo for CVRMsg_RegisterExternalWebRoot
 d typeinfo for CVRMsg_ReloadChaperone
 d typeinfo for CVRMsg_SendWebMessage
 d typeinfo for CVRMsg_ServiceConnect
 d typeinfo for CVRMsg_ServiceConnectResponse
 d typeinfo for CVRMsg_SetApplicationOptions
 d typeinfo for CVRMsg_SetApplicationOptionsResponse
 d typeinfo for CVRMsg_SetApplicationProcessId
 d typeinfo for CVRMsg_SetApplicationProcessIdResponse
 d typeinfo for CVRMsg_SetDefaultApplicationForMimeType
 d typeinfo for CVRMsg_SetDefaultApplicationForMimeTypeResponse
 d typeinfo for CVRMsg_SetMasterProcess
 d typeinfo for CVRMsg_SetMasterProcessResponse
 d typeinfo for CVRMsg_SetMasterProcessRestartHint
 d typeinfo for CVRMsg_SetMasterProcessRestartHintResponse
 d typeinfo for CVRMsg_Settings_GetBool
 d typeinfo for CVRMsg_Settings_GetBool_Response
 d typeinfo for CVRMsg_Settings_GetNumeric
 d typeinfo for CVRMsg_Settings_GetNumeric_Response
 d typeinfo for CVRMsg_Settings_GetString
 d typeinfo for CVRMsg_Settings_GetString_Response
 d typeinfo for CVRMsg_Settings_GetValueType
 d typeinfo for CVRMsg_Settings_GetValueType_Response
 d typeinfo for CVRMsg_Settings_RemoveKeyInSection
 d typeinfo for CVRMsg_Settings_RemoveSection
 d typeinfo for CVRMsg_Settings_SetBool
 d typeinfo for CVRMsg_Settings_SetNumeric
 d typeinfo for CVRMsg_Settings_SetString
 d typeinfo for CVRMsg_Settings_SetValue_Response
 d typeinfo for CVRMsg_ShouldKillTheaterPancakeProcess
 d typeinfo for CVRMsg_ShouldKillTheaterPancakeProcessResponse
 d typeinfo for CVRMsg_ShutdownSystem
 d typeinfo for CVRMsg_ShutdownSystemResponse
 d typeinfo for CVRMsg_StartAutolaunchOverlays
 d typeinfo for CVRMsg_StartDashboard
 d typeinfo for CVRMsg_StartDashboardResponse
 d typeinfo for CVRMsg_StartHomeAppResponse
 d typeinfo for CVRMsg_TrackedCamera_AcquireVideoStreamingService
 d typeinfo for CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse
 d typeinfo for CVRMsg_TrackedCamera_Enable
 d typeinfo for CVRMsg_TrackedCamera_EnableResponse
 d typeinfo for CVRMsg_TrackedCamera_GetDistortion
 d typeinfo for CVRMsg_TrackedCamera_GetDistortionResponse
 d typeinfo for CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord
 d typeinfo for CVRMsg_TrackedCamera_GetDistortion_InputCoord
 d typeinfo for CVRMsg_TrackedCamera_GetFormatDimensions
 d typeinfo for CVRMsg_TrackedCamera_GetFormatDimensionsResponse
 d typeinfo for CVRMsg_TrackedCamera_GetFrameBounds
 d typeinfo for CVRMsg_TrackedCamera_GetFrameBoundsResponse
 d typeinfo for CVRMsg_TrackedCamera_GetIntrinsics
 d typeinfo for CVRMsg_TrackedCamera_GetIntrinsicsResponse
 d typeinfo for CVRMsg_TrackedCamera_GetProjection
 d typeinfo for CVRMsg_TrackedCamera_GetProjectionResponse
 d typeinfo for CVRMsg_TrackedCamera_GetVideoStreamFormat
 d typeinfo for CVRMsg_TrackedCamera_GetVideoStreamFormatResponse
 d typeinfo for CVRMsg_TrackedCamera_IsVideoStreamActive
 d typeinfo for CVRMsg_TrackedCamera_IsVideoStreamActiveResponse
 d typeinfo for CVRMsg_TrackedCamera_PauseVideoStream
 d typeinfo for CVRMsg_TrackedCamera_PauseVideoStreamResponse
 d typeinfo for CVRMsg_TrackedCamera_ReleaseVideoStreamingService
 d typeinfo for CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse
 d typeinfo for CVRMsg_TrackedCamera_ResumeVideoStream
 d typeinfo for CVRMsg_TrackedCamera_ResumeVideoStreamResponse
 d typeinfo for CVRMsg_TrackedCamera_SetAutoExposure
 d typeinfo for CVRMsg_TrackedCamera_SetAutoExposureResponse
 d typeinfo for CVRMsg_TrackedCamera_SetCompatibilityMode
 d typeinfo for CVRMsg_TrackedCamera_SetCompatibilityModeResponse
 d typeinfo for CVRMsg_TrackedCamera_SetVideoStreamFormat
 d typeinfo for CVRMsg_TrackedCamera_SetVideoStreamFormatResponse
 d typeinfo for CVRMsg_TrackedCamera_StartVideoStream
 d typeinfo for CVRMsg_TrackedCamera_StartVideoStreamResponse
 d typeinfo for CVRMsg_TrackedCamera_StopVideoStream
 d typeinfo for CVRMsg_TrackedCamera_StopVideoStreamResponse
 d typeinfo for CVRMsg_TriggerHapticPulse
 d typeinfo for CVRMsg_UpdateChaperoneUniverse
 d typeinfo for CVRMsg_UpdateChaperoneUniverseResponse
 d typeinfo for CVRMsg_UpdateZeroPose
 d typeinfo for CVRMsg_WritePropertyDataToFile
 d typeinfo for CVRMsg_WritePropertyDataToFileResponse
 d typeinfo for CVRNotifications_001
 d typeinfo for CVROverlayLatest
 d typeinfo for CVROverlayViewLatest
 d typeinfo for CVROverlayView_001
 d typeinfo for CVROverlayView_002
 d typeinfo for CVROverlay_001
 d typeinfo for CVROverlay_002
 d typeinfo for CVROverlay_003
 d typeinfo for CVROverlay_004
 d typeinfo for CVROverlay_005
 d typeinfo for CVROverlay_006
 d typeinfo for CVROverlay_007
 d typeinfo for CVROverlay_008
 d typeinfo for CVROverlay_009
 d typeinfo for CVROverlay_010
 d typeinfo for CVROverlay_011
 d typeinfo for CVROverlay_012
 d typeinfo for CVROverlay_013
 d typeinfo for CVROverlay_014
 d typeinfo for CVROverlay_015
 d typeinfo for CVROverlay_016
 d typeinfo for CVROverlay_017
 d typeinfo for CVROverlay_018
 d typeinfo for CVROverlay_019
 d typeinfo for CVROverlay_020
 d typeinfo for CVROverlay_021
 d typeinfo for CVROverlay_022
 d typeinfo for CVROverlay_023
 d typeinfo for CVROverlay_024
 d typeinfo for CVROverlay_025
 d typeinfo for CVRRenderModels_001
 d typeinfo for CVRRenderModels_002
 d typeinfo for CVRRenderModels_003
 d typeinfo for CVRRenderModels_004
 d typeinfo for CVRRenderModels_005
 d typeinfo for CVRReplyMailbox
 d typeinfo for CVRResourcesLatest
 d typeinfo for CVRScreenshotsLatest
 d typeinfo for CVRScreenshots_001
 d typeinfo for CVRSettings_001
 d typeinfo for CVRSettings_002
 d typeinfo for CVRSharedGLTexture
 d typeinfo for CVRSharedVulkanTexture
 d typeinfo for CVRSpatialAnchorsLatest
 d typeinfo for CVRSteamPrivate_001
 d typeinfo for CVRSteamPrivate_002
 d typeinfo for CVRSystemLatest
 d typeinfo for CVRSystemLatest::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)::{lambda(vr::ETrackedDeviceClass)#1}
 d typeinfo for CVRSystem_001
 d typeinfo for CVRSystem_002
 d typeinfo for CVRSystem_003
 d typeinfo for CVRSystem_004
 d typeinfo for CVRSystem_005
 d typeinfo for CVRSystem_006
 d typeinfo for CVRSystem_007
 d typeinfo for CVRSystem_008
 d typeinfo for CVRSystem_009
 d typeinfo for CVRSystem_010
 d typeinfo for CVRSystem_011
 d typeinfo for CVRSystem_012
 d typeinfo for CVRSystem_013
 d typeinfo for CVRSystem_014
 d typeinfo for CVRSystem_015
 d typeinfo for CVRSystem_016
 d typeinfo for CVRSystem_017
 d typeinfo for CVRSystem_018
 d typeinfo for CVRSystem_019
 d typeinfo for CVRSystem_020
 d typeinfo for CVRSystem_021
 d typeinfo for CVRTrackedCamera_002
 d typeinfo for CVRTrackedCamera_003
 d typeinfo for CVRTrackedCamera_004
 d typeinfo for CVRTrackedCamera_005
 d typeinfo for CVRTrackedDevice_004
 d typeinfo for CVRTrackedDevice_Latest
 d typeinfo for CVRVirtualDisplayComponentAdapter
 d typeinfo for CVRVirtualDisplayComponent_001
 d typeinfo for CVRVirtualDisplayComponent_Latest
 d typeinfo for CVRWatchdogHost_001
 d typeinfo for CVirtualDisplayClient
 d typeinfo for CVkBuffer
 d typeinfo for CVkCommandBuffer
 d typeinfo for CVkCommandBufferPool
 d typeinfo for CVkGarbageCollector
 d typeinfo for CVkImage
 d typeinfo for CVkMemory
 d typeinfo for CVkPoolGarbageCollector<CVkCommandBuffer>
 d typeinfo for CVkPoolableResource<CVkCommandBufferPool>
 d typeinfo for CVkResourceBase
 d typeinfo for CVkResourcePool<CVkCommandBuffer>
 d typeinfo for CVkTimeline
 d typeinfo for CVulkanVRRenderer
 d typeinfo for CWatchdogDriverContext
 d typeinfo for CWatchdogTrackedDeviceProvider
 d typeinfo for CWatchdogTrackedDeviceProvider_Latest
 d typeinfo for ChaperoneInterfaceRegistration<CVRChaperone_001>
 d typeinfo for ChaperoneInterfaceRegistration<CVRChaperone_002>
 d typeinfo for ChaperoneInterfaceRegistration<CVRChaperone_003>
 d typeinfo for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_001>
 d typeinfo for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_002>
 d typeinfo for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_003>
 d typeinfo for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_004>
 d typeinfo for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_005>
 d typeinfo for ComponentAdapterBaseNoParent<IVRCameraComponent001, &k_pchCameraComponentPrefix, 1, CVRCameraComponent_001>
 d typeinfo for ComponentAdapterBaseNoParent<IVRDisplayComponent001, &k_pchDisplayComponentPrefix, 1, CVRDisplayComponent_001>
 d typeinfo for ComponentAdapterBaseNoParent<IVRVirtualDisplay001, &k_pchVirtualDisplayComponentPrefix, 1, CVRVirtualDisplayComponent_001>
 d typeinfo for ComponentAdapterBaseNoParent<vr::IVRControllerComponent, &k_pchControllerComponentPrefix, 1, CVRControllerComponent_Latest>
 d typeinfo for ComponentAdapterBaseWithParent<IVRCameraComponent002, &k_pchCameraComponentPrefix, 2, CVRCameraComponent_002, CVRCameraComponent_001>
 d typeinfo for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_001, &k_pchDriverDirectModeComponentPrefix, 1, CVRDriverDirectModeComponent_001, CVRDisplayComponent_001>
 d typeinfo for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_002, &k_pchDriverDirectModeComponentPrefix, 2, CVRDriverDirectModeComponent_002, CVRDriverDirectModeComponent_001>
 d typeinfo for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_003, &k_pchDriverDirectModeComponentPrefix, 3, CVRDriverDirectModeComponent_003, CVRDriverDirectModeComponent_002>
 d typeinfo for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_004, &k_pchDriverDirectModeComponentPrefix, 4, CVRDriverDirectModeComponent_004, CVRDriverDirectModeComponent_003>
 d typeinfo for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_005, &k_pchDriverDirectModeComponentPrefix, 5, CVRDriverDirectModeComponent_005, CVRDriverDirectModeComponent_004>
 d typeinfo for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_006, &k_pchDriverDirectModeComponentPrefix, 6, CVRDriverDirectModeComponent_006, CVRDriverDirectModeComponent_005>
 d typeinfo for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_007, &k_pchDriverDirectModeComponentPrefix, 7, CVRDriverDirectModeComponent_007, CVRDriverDirectModeComponent_006>
 d typeinfo for ComponentAdapterBaseWithParent<vr::IVRCameraComponent, &k_pchCameraComponentPrefix, 3, CVRCameraComponent_Latest, CVRCameraComponent_002>
 d typeinfo for ComponentAdapterBaseWithParent<vr::IVRDisplayComponent, &k_pchDisplayComponentPrefix, 2, CVRDisplayComponent_Latest, CVRDisplayComponent_001>
 d typeinfo for ComponentAdapterBaseWithParent<vr::IVRDriverDirectModeComponent, &k_pchDriverDirectModeComponentPrefix, 8, CVRDriverDirectModeComponent_Latest, CVRDriverDirectModeComponent_007>
 d typeinfo for ComponentAdapterBaseWithParent<vr::IVRVirtualDisplay, &k_pchVirtualDisplayComponentPrefix, 2, CVRVirtualDisplayComponent_Latest, CVRVirtualDisplayComponent_001>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_003>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_004>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_005>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_006>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_007>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_008>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_009>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_010>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_011>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_012>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_013>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_014>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_015>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_016>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_017>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_018>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_019>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_020>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_021>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_022>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_023>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_024>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_025>
 d typeinfo for CompositorInterfaceRegistration<CVRCompositor_026>
 d typeinfo for ControlPanelInterfaceRegistration<CVRControlPanel_001>
 d typeinfo for ControlPanelInterfaceRegistration<CVRControlPanel_002>
 d typeinfo for ControlPanelInterfaceRegistration<CVRControlPanel_003>
 d typeinfo for ControlPanelInterfaceRegistration<CVRControlPanel_004>
 d typeinfo for ControlPanelInterfaceRegistration<CVRControlPanel_005>
 d typeinfo for ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)::{lambda(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)#1}
 d typeinfo for DashboardManagerInterfaceRegistration<CVRDashboardManager_001>
 d typeinfo for GenericInterfaceRegistration
 d typeinfo for HmdInterfaceRegistration<CHmd_001>
 d typeinfo for HmdInterfaceRegistration<CHmd_002>
 d typeinfo for HmdInterfaceRegistration<CHmd_003>
 d typeinfo for HmdInterfaceRegistration<CHmd_004>
 d typeinfo for HmdInterfaceRegistration<CHmd_005>
 d typeinfo for HmdInterfaceRegistration<CHmd_006>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_001>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_002>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_003>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_004>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_005>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_006>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_007>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_008>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_009>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_010>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_011>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_012>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_013>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_014>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_015>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_016>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_017>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_018>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_019>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_020>
 d typeinfo for HmdInterfaceRegistration<CVRSystem_021>
 d typeinfo for IHmdSystem_002
 d typeinfo for IHmdSystem_003
 d typeinfo for IInputFilter
 d typeinfo for IInputFilterValueStore
 d typeinfo for ILockedPropertyContainer
 d typeinfo for ILogListener
 d typeinfo for IOBufferInterfaceRegistration<CVRIOBuffer_001>
 d typeinfo for IOBufferInterfaceRegistration<CVRIOBuffer_002>
 d typeinfo for IPC::IEvent
 d typeinfo for IPC::IMutex
 d typeinfo for IPC::ISharedMem
 d typeinfo for IPC::ISyncObject
 d typeinfo for IPC::PosixSharedMemory
 d typeinfo for IPC::SharedObjectEvent
 d typeinfo for IPC::SharedObjectMutex
 d typeinfo for IServerDriverHost_002_003
 d typeinfo for ITrackedDeviceServerDriver_004
 d typeinfo for IVRCameraComponent001
 d typeinfo for IVRCameraComponent002
 d typeinfo for IVRChaperoneInternal
 d typeinfo for IVRClientHandler
 d typeinfo for IVRClientInternal
 d typeinfo for IVRDisplayComponent001
 d typeinfo for IVRDriverDirectModeComponent_001
 d typeinfo for IVRDriverDirectModeComponent_002
 d typeinfo for IVRDriverDirectModeComponent_003
 d typeinfo for IVRDriverDirectModeComponent_004
 d typeinfo for IVRDriverDirectModeComponent_005
 d typeinfo for IVRDriverDirectModeComponent_006
 d typeinfo for IVRDriverDirectModeComponent_007
 d typeinfo for IVRLegacyInput
 d typeinfo for IVRRenderer
 d typeinfo for IVRVirtualDisplay001
 d typeinfo for IXrBinding
 d typeinfo for IXrCompositor
 d typeinfo for IXrSwapchain
 d typeinfo for InMemoryInputStream
 d typeinfo for InMemoryStreamInputBuf
 d typeinfo for InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}
 d typeinfo for InitInternalInterfacesNonStandard(void* (*)(char const*))::{lambda(char const*)#1}
 d typeinfo for InputInterfaceRegistration<CVRInput_001>
 d typeinfo for InputInterfaceRegistration<CVRInput_002>
 d typeinfo for InputInterfaceRegistration<CVRInput_003>
 d typeinfo for InputInterfaceRegistration<CVRInput_004>
 d typeinfo for InputInterfaceRegistration<CVRInput_005>
 d typeinfo for InputInterfaceRegistration<CVRInput_006>
 d typeinfo for InputInterfaceRegistration<CVRInput_007>
 d typeinfo for InputInterfaceRegistration<CVRInput_008>
 d typeinfo for InputInterfaceRegistration<CVRInput_009>
 d typeinfo for InterfaceRegistrationBase
 d typeinfo for Json::BuiltStyledStreamWriter
 d typeinfo for Json::CharReader
 d typeinfo for Json::CharReader::Factory
 d typeinfo for Json::CharReaderBuilder
 d typeinfo for Json::Exception
 d typeinfo for Json::Exception*
 d typeinfo for Json::FastWriter
 d typeinfo for Json::LogicError
 d typeinfo for Json::OurCharReader
 d typeinfo for Json::RuntimeError
 d typeinfo for Json::StreamWriter
 d typeinfo for Json::StreamWriter::Factory
 d typeinfo for Json::StreamWriterBuilder
 d typeinfo for Json::StyledWriter
 d typeinfo for Json::Writer
 d typeinfo for MailboxInterfaceRegistration<CVRMailbox_001>
 d typeinfo for MaterialUtf8FileReader
 d typeinfo for NotificationsInterfaceRegistration<CVRNotifications_001>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_001>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_002>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_003>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_004>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_005>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_006>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_007>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_008>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_009>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_010>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_011>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_012>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_013>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_014>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_015>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_016>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_017>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_018>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_019>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_020>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_021>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_022>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_023>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_024>
 d typeinfo for OverlayInterfaceRegistration<CVROverlay_025>
 d typeinfo for OverlayViewInterfaceRegistration<CVROverlayView_001>
 d typeinfo for OverlayViewInterfaceRegistration<CVROverlayView_002>
 d typeinfo for ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#1}
 d typeinfo for ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#2}
 d typeinfo for ProcessDpadBindings(unsigned int, XrBindingModificationsKHR const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, SuggestedBinding*, std::vector<unsigned long, std::allocator<unsigned long> >&)::{lambda(XrInteractionProfileDpadBindingEXT const*)#1}
 d typeinfo for Reflection::Detail::ToBaseT<CBoneMaskResource, CAnimResource>
 d typeinfo for Reflection::Detail::ToBaseT<CKeyframedDataResource, CAnimResource>
 d typeinfo for Reflection::Detail::ToBase_t
 d typeinfo for Reflection::Detail::TypeInfoT<CAnimResource>
 d typeinfo for Reflection::Detail::TypeInfoT<CBoneMaskResource>
 d typeinfo for Reflection::Detail::TypeInfoT<CKeyframedDataResource>
 d typeinfo for Reflection::Detail::TypeInfoT<Reflection::Object>
 d typeinfo for Reflection::Object
 d typeinfo for Reflection::TypeInfo
 d typeinfo for RenderModelsInterfaceRegistration<CVRRenderModels_001>
 d typeinfo for RenderModelsInterfaceRegistration<CVRRenderModels_002>
 d typeinfo for RenderModelsInterfaceRegistration<CVRRenderModels_003>
 d typeinfo for RenderModelsInterfaceRegistration<CVRRenderModels_004>
 d typeinfo for RenderModelsInterfaceRegistration<CVRRenderModels_005>
 d typeinfo for ScreenshotsInterfaceRegistration<CVRScreenshots_001>
 d typeinfo for SettingsInterfaceRegistration<CVRSettings_001>
 d typeinfo for SettingsInterfaceRegistration<CVRSettings_002>
 d typeinfo for SteamPrivateInterfaceRegistration<CVRSteamPrivate_001>
 d typeinfo for SteamPrivateInterfaceRegistration<CVRSteamPrivate_002>
 d typeinfo for SteamThreadTools::CThread
 d typeinfo for SystemInterfaceRegistration<CHmdSystem_001>
 d typeinfo for SystemInterfaceRegistration<CHmdSystem_004>
 d typeinfo for SystemInterfaceRegistration<CVRClientCore_001>
 d typeinfo for SystemInterfaceRegistration<CVRClientCore_002>
 d typeinfo for SystemInterfaceRegistration<IHmdSystem_002>
 d typeinfo for SystemInterfaceRegistration<IHmdSystem_003>
 d typeinfo for TrackedCameraInterfaceRegistration<CVRTrackedCamera_002>
 d typeinfo for TrackedCameraInterfaceRegistration<CVRTrackedCamera_003>
 d typeinfo for TrackedCameraInterfaceRegistration<CVRTrackedCamera_004>
 d typeinfo for TrackedCameraInterfaceRegistration<CVRTrackedCamera_005>
 d typeinfo for TrackedDeviceAdapterBaseNoParent<ITrackedDeviceServerDriver_004, CVRTrackedDevice_004>
 d typeinfo for TrackedDeviceAdapterBaseWithParent<vr::ITrackedDeviceServerDriver, CVRTrackedDevice_Latest, CVRTrackedDevice_004>
 d typeinfo for VRRenderer::BlendStateBase
 d typeinfo for VRRenderer::ConstantBufferBase
 d typeinfo for VRRenderer::DepthStencilStateBase
 d typeinfo for VRRenderer::EventQueryBase
 d typeinfo for VRRenderer::GPUCountingSemaphoreBase
 d typeinfo for VRRenderer::GPUSemaphoreBase
 d typeinfo for VRRenderer::IndexBufferBase
 d typeinfo for VRRenderer::RasterizerStateBase
 d typeinfo for VRRenderer::SamplerBase
 d typeinfo for VRRenderer::TextureBase
 d typeinfo for VRRenderer::VertexBufferBase
 d typeinfo for VulkanVRRenderer::BlendState
 d typeinfo for VulkanVRRenderer::ConstantBuffer
 d typeinfo for VulkanVRRenderer::DepthStencilState
 d typeinfo for VulkanVRRenderer::EventQuery
 d typeinfo for VulkanVRRenderer::GPUCountingSemaphore
 d typeinfo for VulkanVRRenderer::GPUSemaphore
 d typeinfo for VulkanVRRenderer::IndexBuffer
 d typeinfo for VulkanVRRenderer::RasterizerState
 d typeinfo for VulkanVRRenderer::Sampler
 d typeinfo for VulkanVRRenderer::Texture
 d typeinfo for VulkanVRRenderer::VertexBuffer
 d typeinfo for WatchdogHost<CVRWatchdogHost_001>
 d typeinfo for XrActionSet_T
 d typeinfo for XrActionSet_T*
 d typeinfo for XrAction_T
 d typeinfo for XrAction_T*
 d typeinfo for XrHandTrackerEXT_T
 d typeinfo for XrHandTrackerEXT_T*
 d typeinfo for XrInstance_T
 d typeinfo for XrInstance_T*
 d typeinfo for XrSession_T
 d typeinfo for XrSession_T*
 d typeinfo for XrSpace_T
 d typeinfo for XrSpace_T*
 d typeinfo for XrSwapchain_T
 d typeinfo for XrSwapchain_T*
 d typeinfo for facet::CVkInteropDeviceNull
 d typeinfo for facet::CVkInteropImageNull
 d typeinfo for facet::CVkTimestampQueryPool<2u>
 d typeinfo for facet::CVkTimestampQueryPoolBase
 d typeinfo for facet::IFramerateGovernor
 d typeinfo for facet::IVkInteropDevice
 d typeinfo for facet::IVkInteropImage
 d typeinfo for gli::texture
 d typeinfo for nlohmann::detail::exception
 d typeinfo for nlohmann::detail::input_adapter_protocol
 d typeinfo for nlohmann::detail::input_buffer_adapter
 d typeinfo for nlohmann::detail::invalid_iterator
 d typeinfo for nlohmann::detail::other_error
 d typeinfo for nlohmann::detail::out_of_range
 d typeinfo for nlohmann::detail::output_adapter_protocol<char>
 d typeinfo for nlohmann::detail::output_string_adapter<char, std::string>
 d typeinfo for nlohmann::detail::parse_error
 d typeinfo for nlohmann::detail::type_error
 d typeinfo for std::_Bind<void (CVRMailbox::*(CVRMailbox*, std::_Placeholder<1>))(Json::Value const&)>
 d typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CBlockQueue, std::allocator<CBlockQueue>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CInputActionSet, std::allocator<CInputActionSet>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CRenderModelManager::ModelInfo_t, std::allocator<CRenderModelManager::ModelInfo_t>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CSharedResourceBaseLinux::CSharedResourceData, std::allocator<CSharedResourceBaseLinux::CSharedResourceData>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CSimulatedTrackpadClick, std::allocator<CSimulatedTrackpadClick>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CSimulatedTriggerPull, std::allocator<CSimulatedTriggerPull>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CVRCompositorSharedTextures::CVulkanFence, std::allocator<CVRCompositorSharedTextures::CVulkanFence>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<CVRInputLatest::InputFrame_t, std::allocator<CVRInputLatest::InputFrame_t>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<InputConfig_t, std::allocator<InputConfig_t>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<VcetJob, std::allocator<VcetJob>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<gli::storage_linear, std::allocator<gli::storage_linear>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<nlohmann::detail::input_buffer_adapter, std::allocator<nlohmann::detail::input_buffer_adapter>, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<nlohmann::detail::output_string_adapter<char, std::string>, std::allocator<nlohmann::detail::output_string_adapter<char, std::string> >, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>
 d typeinfo for std::_Weak_result_type<void (CVRMailbox::*)(Json::Value const&)>
 d typeinfo for std::_Weak_result_type_memfun<void (CVRMailbox::*)(Json::Value const&), true>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, false>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, true>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, false>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, true>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, false>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, true>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, false>
 d typeinfo for std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, true>
 d typeinfo for std::__detail::_BracketMatcher<std::regex_traits<char>, false, false>
 d typeinfo for std::__detail::_BracketMatcher<std::regex_traits<char>, false, true>
 d typeinfo for std::__detail::_BracketMatcher<std::regex_traits<char>, true, false>
 d typeinfo for std::__detail::_BracketMatcher<std::regex_traits<char>, true, true>
 d typeinfo for std::__detail::_CharMatcher<std::regex_traits<char>, false, false>
 d typeinfo for std::__detail::_CharMatcher<std::regex_traits<char>, false, true>
 d typeinfo for std::__detail::_CharMatcher<std::regex_traits<char>, true, false>
 d typeinfo for std::__detail::_CharMatcher<std::regex_traits<char>, true, true>
 d typeinfo for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 d typeinfo for std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>
 d typeinfo for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CThreadWatchdogManager::InitWatchdogs()::{lambda()#1}> > >
 d typeinfo for sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)::{lambda(XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*)#1}
 d typeinfo for sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)::{lambda(XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*)#1}
 d typeinfo for sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)::{lambda(XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*)#1}
 d typeinfo for sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)::{lambda(XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*)#1}
 d typeinfo for sxr_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*)::{lambda(std::vector<XrView, std::allocator<XrView> >&)#1}
 d typeinfo for sxr_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*)::{lambda(XrBindingModificationsKHR const*)#1}
 d typeinfo for sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(XrActiveActionSetPrioritiesEXT const*)#1}
 d typeinfo for tinyobj::MaterialFileReader
 d typeinfo for tinyobj::MaterialReader
 d typeinfo for vr::CVRApplicationsLatest
 d typeinfo for vr::CVRNotificationsLatest
 d typeinfo for vr::CVROverlayInternalLatest
 d typeinfo for vr::CVRSettingsLatest
 d typeinfo for vr::CVRSteamPrivateLatest
 d typeinfo for vr::CVRTrackedCamera
 d typeinfo for vr::ILiquidVR
 d typeinfo for vr::IServerTrackedDeviceProvider
 d typeinfo for vr::ITrackedDeviceServerDriver
 d typeinfo for vr::IVRApplications
 d typeinfo for vr::IVRApplicationsInternal
 d typeinfo for vr::IVRBlockQueue
 d typeinfo for vr::IVRCameraComponent
 d typeinfo for vr::IVRChaperone
 d typeinfo for vr::IVRChaperoneSetup
 d typeinfo for vr::IVRClientCore
 d typeinfo for vr::IVRCompositor
 d typeinfo for vr::IVRCompositorPluginProvider
 d typeinfo for vr::IVRCompositorSystemInternal
 d typeinfo for vr::IVRControlPanel
 d typeinfo for vr::IVRControllerComponent
 d typeinfo for vr::IVRDebug
 d typeinfo for vr::IVRDisplayComponent
 d typeinfo for vr::IVRDriverContext
 d typeinfo for vr::IVRDriverDirectInternal
 d typeinfo for vr::IVRDriverDirectModeComponent
 d typeinfo for vr::IVRDriverLog
 d typeinfo for vr::IVRDriverManager
 d typeinfo for vr::IVRExtendedDisplay
 d typeinfo for vr::IVRExternalEventSource
 d typeinfo for vr::IVRHeadsetView
 d typeinfo for vr::IVRIOBuffer
 d typeinfo for vr::IVRIPCResourceManagerClient
 d typeinfo for vr::IVRInput
 d typeinfo for vr::IVRInputInternal
 d typeinfo for vr::IVRMCStore
 d typeinfo for vr::IVRMailbox
 d typeinfo for vr::IVRNotifications
 d typeinfo for vr::IVROverlay
 d typeinfo for vr::IVROverlayInternal
 d typeinfo for vr::IVROverlayView
 d typeinfo for vr::IVRPaths
 d typeinfo for vr::IVRPathsInternal
 d typeinfo for vr::IVRProperties
 d typeinfo for vr::IVRPropertiesInternal
 d typeinfo for vr::IVRRenderModels
 d typeinfo for vr::IVRRenderModelsInternal
 d typeinfo for vr::IVRResources
 d typeinfo for vr::IVRResourcesInternal
 d typeinfo for vr::IVRScreenshots
 d typeinfo for vr::IVRSettings
 d typeinfo for vr::IVRSettingsInternal
 d typeinfo for vr::IVRSharedBuffer
 d typeinfo for vr::IVRSharedCountingSemaphore
 d typeinfo for vr::IVRSharedImage
 d typeinfo for vr::IVRSharedResource
 d typeinfo for vr::IVRSharedSemaphore
 d typeinfo for vr::IVRSpatialAnchors
 d typeinfo for vr::IVRSteamPrivate
 d typeinfo for vr::IVRSystem
 d typeinfo for vr::IVRTrackedCamera
 d typeinfo for vr::IVRTrackedCameraInternal
 d typeinfo for vr::IVRVirtualDisplay
 d typeinfo for vr::IVRWatchdogHost
 d typeinfo for vr::IVRWatchdogProvider
 d typeinfo for vr::IXrProto
 d vtable for ApplicationsInterfaceRegistration<CVRApplications_001>
 d vtable for ApplicationsInterfaceRegistration<CVRApplications_002>
 d vtable for ApplicationsInterfaceRegistration<CVRApplications_003>
 d vtable for ApplicationsInterfaceRegistration<CVRApplications_004>
 d vtable for ApplicationsInterfaceRegistration<CVRApplications_005>
 d vtable for ApplicationsInterfaceRegistration<CVRApplications_006>
 d vtable for BlockQueueInterfaceRegistration<CVRBlockQueue_001>
 d vtable for BlockQueueInterfaceRegistration<CVRBlockQueue_002>
 d vtable for BlockQueueInterfaceRegistration<CVRBlockQueue_003>
 d vtable for BlockQueueInterfaceRegistration<CVRBlockQueue_004>
 d vtable for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>
 d vtable for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>
 d vtable for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>
 d vtable for CAnimResource
 d vtable for CAnimSkeleton
 d vtable for CAutoRestoreEnvironment
 d vtable for CBoneMaskResource
 d vtable for CClientPropertyManager
 d vtable for CCompositorPluginProvider
 d vtable for CCompositorPluginProvider_Latest
 d vtable for CDownsampleRenderer
 d vtable for CDriverDirectInternalClient
 d vtable for CDriverLog
 d vtable for CDriverManager
 d vtable for CFixedSizePropertyContainer
 d vtable for CHmdSystemLatest
 d vtable for CHmdSystem_001
 d vtable for CHmdSystem_004
 d vtable for CHmd_001
 d vtable for CHmd_002
 d vtable for CHmd_003
 d vtable for CHmd_004
 d vtable for CHmd_005
 d vtable for CHmd_006
 d vtable for CIOBufferCursor
 d vtable for CInputFilterBase
 d vtable for CInputFilterValueStore
 d vtable for CInputFilter_Boolean_And
 d vtable for CInputFilter_Boolean_ButtonPressState
 d vtable for CInputFilter_Boolean_Latch
 d vtable for CInputFilter_Boolean_Or
 d vtable for CInputFilter_Boolean_Threshold
 d vtable for CInputFilter_Boolean_Toggle
 d vtable for CInputFilter_DPad
 d vtable for CInputFilter_Grab_ValueAndForce
 d vtable for CInputFilter_JoystickSettings
 d vtable for CInputFilter_Pose_Component
 d vtable for CInputFilter_Pose_Constant
 d vtable for CInputFilter_RadialMenu
 d vtable for CInputFilter_RadialMenuBase
 d vtable for CInputFilter_Scalar_Constant
 d vtable for CInputFilter_Scalar_Deadzone
 d vtable for CInputFilter_Scalar_Exponent
 d vtable for CInputFilter_Scalar_JoystickScroll_Discrete
 d vtable for CInputFilter_Scalar_JoystickScroll_Smooth
 d vtable for CInputFilter_Scalar_ScaleAndOffset
 d vtable for CInputFilter_Scalar_TrackpadScroll_Discrete
 d vtable for CInputFilter_Scalar_TrackpadScroll_Smooth
 d vtable for CInputFilter_TriggerHaptic
 d vtable for CInputFilter_XRDPad
 d vtable for CKeyframedDataResource
 d vtable for CLegacyInput
 d vtable for CMCStore
 d vtable for CMsaaResolveRenderer
 d vtable for CPackedBoneTransforms
 d vtable for CPathManagerBase
 d vtable for CPathManager_Client
 d vtable for CPathManager_Server
 d vtable for CPropertyContainer
 d vtable for CPropertyManager
 d vtable for CRenderModelLoadThread
 d vtable for CRenderModelManager
 d vtable for CServerDriverHost_002
 d vtable for CServerDriverHost_003
 d vtable for CServerTrackedDeviceProvider
 d vtable for CServerTrackedDeviceProvider_002
 d vtable for CServerTrackedDeviceProvider_003
 d vtable for CServerTrackedDeviceProvider_Latest
 d vtable for CSettingsManager
 d vtable for CSharedBufferLinux
 d vtable for CSharedCountingSemaphoreLinux
 d vtable for CSharedImageLinux
 d vtable for CSharedResourceBaseLinux
 d vtable for CSharedResourceNamespaceServer
 d vtable for CSharedSemaphoreLinux
 d vtable for CSimulatedActionBase
 d vtable for CSimulatedTrackpadClick
 d vtable for CSimulatedTriggerPull
 d vtable for CSxrAction
 d vtable for CSxrActionSet
 d vtable for CSxrChildHandle<CSxrAction, XrAction_T*, CSxrActionSet>
 d vtable for CSxrChildHandle<CSxrActionSet, XrActionSet_T*, CSxrInstance>
 d vtable for CSxrChildHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*, CSxrSession>
 d vtable for CSxrChildHandle<CSxrSession, XrSession_T*, CSxrInstance>
 d vtable for CSxrChildHandle<CSxrSwapchainBase, XrSwapchain_T*, CSxrSession>
 d vtable for CSxrChildVariableParentHandle<CSxrSpace, XrSpace_T*, CSxrAction, CSxrSession>
 d vtable for CSxrCompositorOpenVR
 d vtable for CSxrCompositorPrism
 d vtable for CSxrDispatchableHandle<CSxrAction, XrAction_T*>
 d vtable for CSxrDispatchableHandle<CSxrActionSet, XrActionSet_T*>
 d vtable for CSxrDispatchableHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*>
 d vtable for CSxrDispatchableHandle<CSxrInstance, XrInstance_T*>
 d vtable for CSxrDispatchableHandle<CSxrSession, XrSession_T*>
 d vtable for CSxrDispatchableHandle<CSxrSpace, XrSpace_T*>
 d vtable for CSxrDispatchableHandle<CSxrSwapchainBase, XrSwapchain_T*>
 d vtable for CSxrGraphicsBindingGLOpenVR
 d vtable for CSxrGraphicsBindingPrism
 d vtable for CSxrGraphicsBindingVulkanOpenVR
 d vtable for CSxrHandTrackerEXT
 d vtable for CSxrInstance
 d vtable for CSxrParentBase
 d vtable for CSxrSession
 d vtable for CSxrSpace
 d vtable for CSxrSwapchainBase
 d vtable for CSxrSwapchainGLOpenVR
 d vtable for CSxrSwapchainPrism
 d vtable for CSxrSwapchainVulkanOpenVR
 d vtable for CSyncLockThread
 d vtable for CVRApplications_001
 d vtable for CVRApplications_002
 d vtable for CVRApplications_003
 d vtable for CVRApplications_004
 d vtable for CVRApplications_005
 d vtable for CVRApplications_006
 d vtable for CVRBlockQueueManager
 d vtable for CVRBlockQueue_001
 d vtable for CVRBlockQueue_002
 d vtable for CVRBlockQueue_003
 d vtable for CVRBlockQueue_004
 d vtable for CVRCameraComponent_001
 d vtable for CVRCameraComponent_002
 d vtable for CVRCameraComponent_Latest
 d vtable for CVRChaperoneClient
 d vtable for CVRChaperoneSetup_001
 d vtable for CVRChaperoneSetup_002
 d vtable for CVRChaperoneSetup_003
 d vtable for CVRChaperoneSetup_004
 d vtable for CVRChaperoneSetup_005
 d vtable for CVRChaperone_001
 d vtable for CVRChaperone_002
 d vtable for CVRChaperone_003
 d vtable for CVRClientCore_001
 d vtable for CVRClientCore_002
 d vtable for CVRCompositorClient
 d vtable for CVRCompositorClientBase
 d vtable for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>
 d vtable for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>
 d vtable for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>
 d vtable for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>
 d vtable for CVRCompositorSharedTextures::CTextureCacheKey
 d vtable for CVRCompositor_003
 d vtable for CVRCompositor_004
 d vtable for CVRCompositor_005
 d vtable for CVRCompositor_006
 d vtable for CVRCompositor_007
 d vtable for CVRCompositor_008
 d vtable for CVRCompositor_009
 d vtable for CVRCompositor_010
 d vtable for CVRCompositor_011
 d vtable for CVRCompositor_012
 d vtable for CVRCompositor_013
 d vtable for CVRCompositor_014
 d vtable for CVRCompositor_015
 d vtable for CVRCompositor_016
 d vtable for CVRCompositor_017
 d vtable for CVRCompositor_018
 d vtable for CVRCompositor_019
 d vtable for CVRCompositor_020
 d vtable for CVRCompositor_021
 d vtable for CVRCompositor_022
 d vtable for CVRCompositor_023
 d vtable for CVRCompositor_024
 d vtable for CVRCompositor_025
 d vtable for CVRCompositor_026
 d vtable for CVRControlPanel_001
 d vtable for CVRControlPanel_002
 d vtable for CVRControlPanel_003
 d vtable for CVRControlPanel_004
 d vtable for CVRControlPanel_005
 d vtable for CVRControllerComponent_Latest
 d vtable for CVRDashboardManager_001
 d vtable for CVRDebug
 d vtable for CVRDisplayComponent_001
 d vtable for CVRDisplayComponent_Latest
 d vtable for CVRDriverDirectModeComponent_001
 d vtable for CVRDriverDirectModeComponent_002
 d vtable for CVRDriverDirectModeComponent_003
 d vtable for CVRDriverDirectModeComponent_004
 d vtable for CVRDriverDirectModeComponent_005
 d vtable for CVRDriverDirectModeComponent_006
 d vtable for CVRDriverDirectModeComponent_007
 d vtable for CVRDriverDirectModeComponent_Latest
 d vtable for CVRFramerateGovernor
 d vtable for CVRIOBuffer
 d vtable for CVRIOBuffer_001
 d vtable for CVRIOBuffer_002
 d vtable for CVRInputLatest
 d vtable for CVRInput_001
 d vtable for CVRInput_002
 d vtable for CVRInput_003
 d vtable for CVRInput_004
 d vtable for CVRInput_005
 d vtable for CVRInput_006
 d vtable for CVRInput_007
 d vtable for CVRInput_008
 d vtable for CVRInput_009
 d vtable for CVRMailbox
 d vtable for CVRMailboxBase
 d vtable for CVRMailboxClient
 d vtable for CVRMailbox_001
 d vtable for CVRMsg_AbortApplicationTransition
 d vtable for CVRMsg_AcknowledgeQuit_Exiting
 d vtable for CVRMsg_ApplicationInfo
 d vtable for CVRMsg_ApplicationInfo_Manifest
 d vtable for CVRMsg_ApplicationInfo_Options
 d vtable for CVRMsg_ApplicationManifestRequest
 d vtable for CVRMsg_ApplicationManifestResponse
 d vtable for CVRMsg_CancelApplicationLaunch
 d vtable for CVRMsg_CancelApplicationLaunchResponse
 d vtable for CVRMsg_ChangeAppType
 d vtable for CVRMsg_ChangeAppTypeResponse
 d vtable for CVRMsg_ClientMailbox_GetNextMessage
 d vtable for CVRMsg_ClientMailbox_GetNextMessageResponse
 d vtable for CVRMsg_ClientMailbox_RegisterMailbox
 d vtable for CVRMsg_ClientMailbox_RegisterMailboxResponse
 d vtable for CVRMsg_ClientMailbox_SendMailboxMessage
 d vtable for CVRMsg_ClientMailbox_SendMailboxMessageResponse
 d vtable for CVRMsg_ClientMailbox_UnregisterMailbox
 d vtable for CVRMsg_ClientMailbox_UnregisterMailboxResponse
 d vtable for CVRMsg_CompositorBringToFront
 d vtable for CVRMsg_CompositorClearFrameBuffer
 d vtable for CVRMsg_CompositorConnect
 d vtable for CVRMsg_CompositorConnectResponse
 d vtable for CVRMsg_CompositorDumpImages
 d vtable for CVRMsg_CompositorDumpImagesAll
 d vtable for CVRMsg_CompositorGetScreenshotPropertyFilename
 d vtable for CVRMsg_CompositorGetScreenshotPropertyFilenameResponse
 d vtable for CVRMsg_CompositorGetScreenshotPropertyType
 d vtable for CVRMsg_CompositorGetScreenshotPropertyTypeResponse
 d vtable for CVRMsg_CompositorGoToBack
 d vtable for CVRMsg_CompositorHookScreenshot
 d vtable for CVRMsg_CompositorHookScreenshotResponse
 d vtable for CVRMsg_CompositorKeyboardShown
 d vtable for CVRMsg_CompositorKeyboardShownResponse
 d vtable for CVRMsg_CompositorNewSharedBuffer
 d vtable for CVRMsg_CompositorNewSharedBufferResponse
 d vtable for CVRMsg_CompositorNewSharedImage
 d vtable for CVRMsg_CompositorNewSharedImageResponse
 d vtable for CVRMsg_CompositorNewSharedSemaphore
 d vtable for CVRMsg_CompositorNewSharedSemaphoreResponse
 d vtable for CVRMsg_CompositorQuit
 d vtable for CVRMsg_CompositorRefSharedResource
 d vtable for CVRMsg_CompositorRefSharedResourceResponse
 d vtable for CVRMsg_CompositorRequestScreenshot
 d vtable for CVRMsg_CompositorRequestScreenshotResponse
 d vtable for CVRMsg_CompositorSetDashboardVisibilityResponse
 d vtable for CVRMsg_CompositorSubmitScreenshot
 d vtable for CVRMsg_CompositorSubmitScreenshotResponse
 d vtable for CVRMsg_CompositorTakeStereoScreenshot
 d vtable for CVRMsg_CompositorTakeStereoScreenshotResponse
 d vtable for CVRMsg_CompositorUnrefSharedResource
 d vtable for CVRMsg_CompositorUnrefSharedResourceResponse
 d vtable for CVRMsg_CompositorUpdateScreenshotProgress
 d vtable for CVRMsg_CompositorUpdateScreenshotProgressResponse
 d vtable for CVRMsg_ComputeDistortion
 d vtable for CVRMsg_ComputeDistortionBatched
 d vtable for CVRMsg_ComputeDistortionBatchedResponse
 d vtable for CVRMsg_ComputeDistortionBatchedResponse_OutputCoord
 d vtable for CVRMsg_ComputeDistortionBatched_InputCoord
 d vtable for CVRMsg_ComputeDistortionResponse
 d vtable for CVRMsg_Connect
 d vtable for CVRMsg_ConnectResponse
 d vtable for CVRMsg_CreateSwapTextureSet
 d vtable for CVRMsg_CreateSwapTextureSetResponse
 d vtable for CVRMsg_DashboardStarted
 d vtable for CVRMsg_DefaultBinding
 d vtable for CVRMsg_DestroySwapTextureSet
 d vtable for CVRMsg_DriverDebugRequest
 d vtable for CVRMsg_DriverDebugResponse
 d vtable for CVRMsg_GetApplicationInfo
 d vtable for CVRMsg_GetApplicationLaunchArguments
 d vtable for CVRMsg_GetApplicationLaunchArgumentsResponse
 d vtable for CVRMsg_GetDisplayInfo
 d vtable for CVRMsg_GetDisplayInfoResponse
 d vtable for CVRMsg_GetDisplayInfoResponse_DisplayInfo
 d vtable for CVRMsg_GetDriverDetail
 d vtable for CVRMsg_GetDriverDetailResponse
 d vtable for CVRMsg_GetDriverInfo
 d vtable for CVRMsg_GetDriverInfoResponse
 d vtable for CVRMsg_GetDriverInfoResponse_DriverInfo
 d vtable for CVRMsg_Input_GetActionBindings
 d vtable for CVRMsg_Input_GetActionBindingsResponse
 d vtable for CVRMsg_Input_GetOriginLocalizedName
 d vtable for CVRMsg_Input_GetOriginLocalizedNameResponse
 d vtable for CVRMsg_Input_SetActionManifestPath
 d vtable for CVRMsg_Input_SetActionManifestPathResponse
 d vtable for CVRMsg_Input_SetXrInputConfig
 d vtable for CVRMsg_LaunchApplication
 d vtable for CVRMsg_LaunchApplicationForMimeType
 d vtable for CVRMsg_LaunchApplicationForMimeTypeResponse
 d vtable for CVRMsg_LaunchApplicationResponse
 d vtable for CVRMsg_LaunchInternalProcess
 d vtable for CVRMsg_LaunchInternalProcessResponse
 d vtable for CVRMsg_LaunchTemplateApplication
 d vtable for CVRMsg_LaunchTemplateApplicationResponse
 d vtable for CVRMsg_LaunchTemplateApplication_AppOverrideKey
 d vtable for CVRMsg_LogMessageToServer
 d vtable for CVRMsg_MimeType
 d vtable for CVRMsg_NoResponse
 d vtable for CVRMsg_OculusSDKStart
 d vtable for CVRMsg_Path_HandleToString
 d vtable for CVRMsg_Path_HandleToStringResponse
 d vtable for CVRMsg_Path_StringToHandle
 d vtable for CVRMsg_Path_StringToHandleResponse
 d vtable for CVRMsg_PerformApplicationPrelaunchCheck
 d vtable for CVRMsg_PerformApplicationPrelaunchCheckResponse
 d vtable for CVRMsg_PowerOffTrackedDevice
 d vtable for CVRMsg_PrismPrioritySet
 d vtable for CVRMsg_QuitProcessRequest
 d vtable for CVRMsg_QuitProcessResponse
 d vtable for CVRMsg_RegisterExternalWebRoot
 d vtable for CVRMsg_ReloadChaperone
 d vtable for CVRMsg_SendWebMessage
 d vtable for CVRMsg_ServiceConnect
 d vtable for CVRMsg_ServiceConnectResponse
 d vtable for CVRMsg_SetApplicationOptions
 d vtable for CVRMsg_SetApplicationOptionsResponse
 d vtable for CVRMsg_SetApplicationProcessId
 d vtable for CVRMsg_SetApplicationProcessIdResponse
 d vtable for CVRMsg_SetDefaultApplicationForMimeType
 d vtable for CVRMsg_SetDefaultApplicationForMimeTypeResponse
 d vtable for CVRMsg_SetMasterProcess
 d vtable for CVRMsg_SetMasterProcessResponse
 d vtable for CVRMsg_SetMasterProcessRestartHint
 d vtable for CVRMsg_SetMasterProcessRestartHintResponse
 d vtable for CVRMsg_Settings_GetBool
 d vtable for CVRMsg_Settings_GetBool_Response
 d vtable for CVRMsg_Settings_GetNumeric
 d vtable for CVRMsg_Settings_GetNumeric_Response
 d vtable for CVRMsg_Settings_GetString
 d vtable for CVRMsg_Settings_GetString_Response
 d vtable for CVRMsg_Settings_GetValueType
 d vtable for CVRMsg_Settings_GetValueType_Response
 d vtable for CVRMsg_Settings_RemoveKeyInSection
 d vtable for CVRMsg_Settings_RemoveSection
 d vtable for CVRMsg_Settings_SetBool
 d vtable for CVRMsg_Settings_SetNumeric
 d vtable for CVRMsg_Settings_SetString
 d vtable for CVRMsg_Settings_SetValue_Response
 d vtable for CVRMsg_ShouldKillTheaterPancakeProcess
 d vtable for CVRMsg_ShouldKillTheaterPancakeProcessResponse
 d vtable for CVRMsg_ShutdownSystem
 d vtable for CVRMsg_ShutdownSystemResponse
 d vtable for CVRMsg_StartAutolaunchOverlays
 d vtable for CVRMsg_StartDashboard
 d vtable for CVRMsg_StartDashboardResponse
 d vtable for CVRMsg_StartHomeAppResponse
 d vtable for CVRMsg_TrackedCamera_AcquireVideoStreamingService
 d vtable for CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse
 d vtable for CVRMsg_TrackedCamera_Enable
 d vtable for CVRMsg_TrackedCamera_EnableResponse
 d vtable for CVRMsg_TrackedCamera_GetDistortion
 d vtable for CVRMsg_TrackedCamera_GetDistortionResponse
 d vtable for CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord
 d vtable for CVRMsg_TrackedCamera_GetDistortion_InputCoord
 d vtable for CVRMsg_TrackedCamera_GetFormatDimensions
 d vtable for CVRMsg_TrackedCamera_GetFormatDimensionsResponse
 d vtable for CVRMsg_TrackedCamera_GetFrameBounds
 d vtable for CVRMsg_TrackedCamera_GetFrameBoundsResponse
 d vtable for CVRMsg_TrackedCamera_GetIntrinsics
 d vtable for CVRMsg_TrackedCamera_GetIntrinsicsResponse
 d vtable for CVRMsg_TrackedCamera_GetProjection
 d vtable for CVRMsg_TrackedCamera_GetProjectionResponse
 d vtable for CVRMsg_TrackedCamera_GetVideoStreamFormat
 d vtable for CVRMsg_TrackedCamera_GetVideoStreamFormatResponse
 d vtable for CVRMsg_TrackedCamera_IsVideoStreamActive
 d vtable for CVRMsg_TrackedCamera_IsVideoStreamActiveResponse
 d vtable for CVRMsg_TrackedCamera_PauseVideoStream
 d vtable for CVRMsg_TrackedCamera_PauseVideoStreamResponse
 d vtable for CVRMsg_TrackedCamera_ReleaseVideoStreamingService
 d vtable for CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse
 d vtable for CVRMsg_TrackedCamera_ResumeVideoStream
 d vtable for CVRMsg_TrackedCamera_ResumeVideoStreamResponse
 d vtable for CVRMsg_TrackedCamera_SetAutoExposure
 d vtable for CVRMsg_TrackedCamera_SetAutoExposureResponse
 d vtable for CVRMsg_TrackedCamera_SetCompatibilityMode
 d vtable for CVRMsg_TrackedCamera_SetCompatibilityModeResponse
 d vtable for CVRMsg_TrackedCamera_SetVideoStreamFormat
 d vtable for CVRMsg_TrackedCamera_SetVideoStreamFormatResponse
 d vtable for CVRMsg_TrackedCamera_StartVideoStream
 d vtable for CVRMsg_TrackedCamera_StartVideoStreamResponse
 d vtable for CVRMsg_TrackedCamera_StopVideoStream
 d vtable for CVRMsg_TrackedCamera_StopVideoStreamResponse
 d vtable for CVRMsg_TriggerHapticPulse
 d vtable for CVRMsg_UpdateChaperoneUniverse
 d vtable for CVRMsg_UpdateChaperoneUniverseResponse
 d vtable for CVRMsg_UpdateZeroPose
 d vtable for CVRMsg_WritePropertyDataToFile
 d vtable for CVRMsg_WritePropertyDataToFileResponse
 d vtable for CVRNotifications_001
 d vtable for CVROverlayLatest
 d vtable for CVROverlayViewLatest
 d vtable for CVROverlayView_001
 d vtable for CVROverlayView_002
 d vtable for CVROverlay_001
 d vtable for CVROverlay_002
 d vtable for CVROverlay_003
 d vtable for CVROverlay_004
 d vtable for CVROverlay_005
 d vtable for CVROverlay_006
 d vtable for CVROverlay_007
 d vtable for CVROverlay_008
 d vtable for CVROverlay_009
 d vtable for CVROverlay_010
 d vtable for CVROverlay_011
 d vtable for CVROverlay_012
 d vtable for CVROverlay_013
 d vtable for CVROverlay_014
 d vtable for CVROverlay_015
 d vtable for CVROverlay_016
 d vtable for CVROverlay_017
 d vtable for CVROverlay_018
 d vtable for CVROverlay_019
 d vtable for CVROverlay_020
 d vtable for CVROverlay_021
 d vtable for CVROverlay_022
 d vtable for CVROverlay_023
 d vtable for CVROverlay_024
 d vtable for CVROverlay_025
 d vtable for CVRRenderModels_001
 d vtable for CVRRenderModels_002
 d vtable for CVRRenderModels_003
 d vtable for CVRRenderModels_004
 d vtable for CVRRenderModels_005
 d vtable for CVRReplyMailbox
 d vtable for CVRResourcesLatest
 d vtable for CVRScreenshotsLatest
 d vtable for CVRScreenshots_001
 d vtable for CVRSettings_001
 d vtable for CVRSettings_002
 d vtable for CVRSharedGLTexture
 d vtable for CVRSharedVulkanTexture
 d vtable for CVRSpatialAnchorsLatest
 d vtable for CVRSteamPrivate_001
 d vtable for CVRSteamPrivate_002
 d vtable for CVRSystemLatest
 d vtable for CVRSystem_001
 d vtable for CVRSystem_002
 d vtable for CVRSystem_003
 d vtable for CVRSystem_004
 d vtable for CVRSystem_005
 d vtable for CVRSystem_006
 d vtable for CVRSystem_007
 d vtable for CVRSystem_008
 d vtable for CVRSystem_009
 d vtable for CVRSystem_010
 d vtable for CVRSystem_011
 d vtable for CVRSystem_012
 d vtable for CVRSystem_013
 d vtable for CVRSystem_014
 d vtable for CVRSystem_015
 d vtable for CVRSystem_016
 d vtable for CVRSystem_017
 d vtable for CVRSystem_018
 d vtable for CVRSystem_019
 d vtable for CVRSystem_020
 d vtable for CVRSystem_021
 d vtable for CVRTrackedCamera_002
 d vtable for CVRTrackedCamera_003
 d vtable for CVRTrackedCamera_004
 d vtable for CVRTrackedCamera_005
 d vtable for CVRTrackedDevice_004
 d vtable for CVRTrackedDevice_Latest
 d vtable for CVRVirtualDisplayComponent_001
 d vtable for CVRVirtualDisplayComponent_Latest
 d vtable for CVRWatchdogHost_001
 d vtable for CVirtualDisplayClient
 d vtable for CVkBuffer
 d vtable for CVkCommandBuffer
 d vtable for CVkCommandBufferPool
 d vtable for CVkGarbageCollector
 d vtable for CVkImage
 d vtable for CVkMemory
 d vtable for CVkPoolGarbageCollector<CVkCommandBuffer>
 d vtable for CVkResourceBase
 d vtable for CVkResourcePool<CVkCommandBuffer>
 d vtable for CVkTimeline
 d vtable for CVulkanVRRenderer
 d vtable for CWatchdogDriverContext
 d vtable for CWatchdogTrackedDeviceProvider_Latest
 d vtable for ChaperoneInterfaceRegistration<CVRChaperone_001>
 d vtable for ChaperoneInterfaceRegistration<CVRChaperone_002>
 d vtable for ChaperoneInterfaceRegistration<CVRChaperone_003>
 d vtable for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_001>
 d vtable for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_002>
 d vtable for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_003>
 d vtable for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_004>
 d vtable for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_005>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_003>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_004>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_005>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_006>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_007>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_008>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_009>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_010>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_011>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_012>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_013>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_014>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_015>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_016>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_017>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_018>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_019>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_020>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_021>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_022>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_023>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_024>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_025>
 d vtable for CompositorInterfaceRegistration<CVRCompositor_026>
 d vtable for ControlPanelInterfaceRegistration<CVRControlPanel_001>
 d vtable for ControlPanelInterfaceRegistration<CVRControlPanel_002>
 d vtable for ControlPanelInterfaceRegistration<CVRControlPanel_003>
 d vtable for ControlPanelInterfaceRegistration<CVRControlPanel_004>
 d vtable for ControlPanelInterfaceRegistration<CVRControlPanel_005>
 d vtable for DashboardManagerInterfaceRegistration<CVRDashboardManager_001>
 d vtable for GenericInterfaceRegistration
 d vtable for HmdInterfaceRegistration<CHmd_001>
 d vtable for HmdInterfaceRegistration<CHmd_002>
 d vtable for HmdInterfaceRegistration<CHmd_003>
 d vtable for HmdInterfaceRegistration<CHmd_004>
 d vtable for HmdInterfaceRegistration<CHmd_005>
 d vtable for HmdInterfaceRegistration<CHmd_006>
 d vtable for HmdInterfaceRegistration<CVRSystem_001>
 d vtable for HmdInterfaceRegistration<CVRSystem_002>
 d vtable for HmdInterfaceRegistration<CVRSystem_003>
 d vtable for HmdInterfaceRegistration<CVRSystem_004>
 d vtable for HmdInterfaceRegistration<CVRSystem_005>
 d vtable for HmdInterfaceRegistration<CVRSystem_006>
 d vtable for HmdInterfaceRegistration<CVRSystem_007>
 d vtable for HmdInterfaceRegistration<CVRSystem_008>
 d vtable for HmdInterfaceRegistration<CVRSystem_009>
 d vtable for HmdInterfaceRegistration<CVRSystem_010>
 d vtable for HmdInterfaceRegistration<CVRSystem_011>
 d vtable for HmdInterfaceRegistration<CVRSystem_012>
 d vtable for HmdInterfaceRegistration<CVRSystem_013>
 d vtable for HmdInterfaceRegistration<CVRSystem_014>
 d vtable for HmdInterfaceRegistration<CVRSystem_015>
 d vtable for HmdInterfaceRegistration<CVRSystem_016>
 d vtable for HmdInterfaceRegistration<CVRSystem_017>
 d vtable for HmdInterfaceRegistration<CVRSystem_018>
 d vtable for HmdInterfaceRegistration<CVRSystem_019>
 d vtable for HmdInterfaceRegistration<CVRSystem_020>
 d vtable for HmdInterfaceRegistration<CVRSystem_021>
 d vtable for IHmdSystem_002
 d vtable for IHmdSystem_003
 d vtable for IOBufferInterfaceRegistration<CVRIOBuffer_001>
 d vtable for IOBufferInterfaceRegistration<CVRIOBuffer_002>
 d vtable for IPC::PosixSharedMemory
 d vtable for IPC::SharedObjectEvent
 d vtable for IPC::SharedObjectMutex
 d vtable for IXrBinding
 d vtable for InMemoryInputStream
 d vtable for InMemoryStreamInputBuf
 d vtable for InputInterfaceRegistration<CVRInput_001>
 d vtable for InputInterfaceRegistration<CVRInput_002>
 d vtable for InputInterfaceRegistration<CVRInput_003>
 d vtable for InputInterfaceRegistration<CVRInput_004>
 d vtable for InputInterfaceRegistration<CVRInput_005>
 d vtable for InputInterfaceRegistration<CVRInput_006>
 d vtable for InputInterfaceRegistration<CVRInput_007>
 d vtable for InputInterfaceRegistration<CVRInput_008>
 d vtable for InputInterfaceRegistration<CVRInput_009>
 d vtable for InterfaceRegistrationBase
 d vtable for Json::BuiltStyledStreamWriter
 d vtable for Json::CharReaderBuilder
 d vtable for Json::Exception
 d vtable for Json::FastWriter
 d vtable for Json::LogicError
 d vtable for Json::OurCharReader
 d vtable for Json::RuntimeError
 d vtable for Json::StreamWriter
 d vtable for Json::StreamWriter::Factory
 d vtable for Json::StreamWriterBuilder
 d vtable for Json::StyledWriter
 d vtable for Json::Writer
 d vtable for MailboxInterfaceRegistration<CVRMailbox_001>
 d vtable for MaterialUtf8FileReader
 d vtable for NotificationsInterfaceRegistration<CVRNotifications_001>
 d vtable for OverlayInterfaceRegistration<CVROverlay_001>
 d vtable for OverlayInterfaceRegistration<CVROverlay_002>
 d vtable for OverlayInterfaceRegistration<CVROverlay_003>
 d vtable for OverlayInterfaceRegistration<CVROverlay_004>
 d vtable for OverlayInterfaceRegistration<CVROverlay_005>
 d vtable for OverlayInterfaceRegistration<CVROverlay_006>
 d vtable for OverlayInterfaceRegistration<CVROverlay_007>
 d vtable for OverlayInterfaceRegistration<CVROverlay_008>
 d vtable for OverlayInterfaceRegistration<CVROverlay_009>
 d vtable for OverlayInterfaceRegistration<CVROverlay_010>
 d vtable for OverlayInterfaceRegistration<CVROverlay_011>
 d vtable for OverlayInterfaceRegistration<CVROverlay_012>
 d vtable for OverlayInterfaceRegistration<CVROverlay_013>
 d vtable for OverlayInterfaceRegistration<CVROverlay_014>
 d vtable for OverlayInterfaceRegistration<CVROverlay_015>
 d vtable for OverlayInterfaceRegistration<CVROverlay_016>
 d vtable for OverlayInterfaceRegistration<CVROverlay_017>
 d vtable for OverlayInterfaceRegistration<CVROverlay_018>
 d vtable for OverlayInterfaceRegistration<CVROverlay_019>
 d vtable for OverlayInterfaceRegistration<CVROverlay_020>
 d vtable for OverlayInterfaceRegistration<CVROverlay_021>
 d vtable for OverlayInterfaceRegistration<CVROverlay_022>
 d vtable for OverlayInterfaceRegistration<CVROverlay_023>
 d vtable for OverlayInterfaceRegistration<CVROverlay_024>
 d vtable for OverlayInterfaceRegistration<CVROverlay_025>
 d vtable for OverlayViewInterfaceRegistration<CVROverlayView_001>
 d vtable for OverlayViewInterfaceRegistration<CVROverlayView_002>
 d vtable for Reflection::Detail::ToBaseT<CBoneMaskResource, CAnimResource>
 d vtable for Reflection::Detail::ToBaseT<CKeyframedDataResource, CAnimResource>
 d vtable for Reflection::Detail::TypeInfoT<CAnimResource>
 d vtable for Reflection::Detail::TypeInfoT<CBoneMaskResource>
 d vtable for Reflection::Detail::TypeInfoT<CKeyframedDataResource>
 d vtable for Reflection::Detail::TypeInfoT<Reflection::Object>
 d vtable for Reflection::Object
 d vtable for Reflection::TypeInfo
 d vtable for RenderModelsInterfaceRegistration<CVRRenderModels_001>
 d vtable for RenderModelsInterfaceRegistration<CVRRenderModels_002>
 d vtable for RenderModelsInterfaceRegistration<CVRRenderModels_003>
 d vtable for RenderModelsInterfaceRegistration<CVRRenderModels_004>
 d vtable for RenderModelsInterfaceRegistration<CVRRenderModels_005>
 d vtable for ScreenshotsInterfaceRegistration<CVRScreenshots_001>
 d vtable for SettingsInterfaceRegistration<CVRSettings_001>
 d vtable for SettingsInterfaceRegistration<CVRSettings_002>
 d vtable for SteamPrivateInterfaceRegistration<CVRSteamPrivate_001>
 d vtable for SteamPrivateInterfaceRegistration<CVRSteamPrivate_002>
 d vtable for SteamThreadTools::CThread
 d vtable for SystemInterfaceRegistration<CHmdSystem_001>
 d vtable for SystemInterfaceRegistration<CHmdSystem_004>
 d vtable for SystemInterfaceRegistration<CVRClientCore_001>
 d vtable for SystemInterfaceRegistration<CVRClientCore_002>
 d vtable for SystemInterfaceRegistration<IHmdSystem_002>
 d vtable for SystemInterfaceRegistration<IHmdSystem_003>
 d vtable for TrackedCameraInterfaceRegistration<CVRTrackedCamera_002>
 d vtable for TrackedCameraInterfaceRegistration<CVRTrackedCamera_003>
 d vtable for TrackedCameraInterfaceRegistration<CVRTrackedCamera_004>
 d vtable for TrackedCameraInterfaceRegistration<CVRTrackedCamera_005>
 d vtable for VulkanVRRenderer::BlendState
 d vtable for VulkanVRRenderer::ConstantBuffer
 d vtable for VulkanVRRenderer::DepthStencilState
 d vtable for VulkanVRRenderer::EventQuery
 d vtable for VulkanVRRenderer::GPUCountingSemaphore
 d vtable for VulkanVRRenderer::GPUSemaphore
 d vtable for VulkanVRRenderer::IndexBuffer
 d vtable for VulkanVRRenderer::RasterizerState
 d vtable for VulkanVRRenderer::Sampler
 d vtable for VulkanVRRenderer::Texture
 d vtable for VulkanVRRenderer::VertexBuffer
 d vtable for WatchdogHost<CVRWatchdogHost_001>
 d vtable for facet::CVkInteropDeviceNull
 d vtable for facet::CVkInteropImageNull
 d vtable for facet::CVkTimestampQueryPool<2u>
 d vtable for facet::CVkTimestampQueryPoolBase
 d vtable for gli::texture
 d vtable for nlohmann::detail::exception
 d vtable for nlohmann::detail::input_buffer_adapter
 d vtable for nlohmann::detail::invalid_iterator
 d vtable for nlohmann::detail::other_error
 d vtable for nlohmann::detail::out_of_range
 d vtable for nlohmann::detail::output_string_adapter<char, std::string>
 d vtable for nlohmann::detail::parse_error
 d vtable for nlohmann::detail::type_error
 d vtable for std::_Sp_counted_ptr_inplace<CBlockQueue, std::allocator<CBlockQueue>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<CInputActionSet, std::allocator<CInputActionSet>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<CRenderModelManager::ModelInfo_t, std::allocator<CRenderModelManager::ModelInfo_t>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<CSharedResourceBaseLinux::CSharedResourceData, std::allocator<CSharedResourceBaseLinux::CSharedResourceData>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<CSimulatedTrackpadClick, std::allocator<CSimulatedTrackpadClick>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<CSimulatedTriggerPull, std::allocator<CSimulatedTriggerPull>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<CVRCompositorSharedTextures::CVulkanFence, std::allocator<CVRCompositorSharedTextures::CVulkanFence>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<CVRInputLatest::InputFrame_t, std::allocator<CVRInputLatest::InputFrame_t>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<InputConfig_t, std::allocator<InputConfig_t>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<VcetJob, std::allocator<VcetJob>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<gli::storage_linear, std::allocator<gli::storage_linear>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<nlohmann::detail::input_buffer_adapter, std::allocator<nlohmann::detail::input_buffer_adapter>, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<nlohmann::detail::output_string_adapter<char, std::string>, std::allocator<nlohmann::detail::output_string_adapter<char, std::string> >, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>
 d vtable for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 d vtable for std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>
 d vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CThreadWatchdogManager::InitWatchdogs()::{lambda()#1}> > >
 d vtable for tinyobj::MaterialFileReader
 d vtable for vr::CVRApplicationsLatest
 d vtable for vr::CVRNotificationsLatest
 d vtable for vr::CVROverlayInternalLatest
 d vtable for vr::CVRSettingsLatest
 d vtable for vr::CVRSteamPrivateLatest
 d vtable for vr::CVRTrackedCamera
 dl_iterate_phdr
 dladdr
 dlclose
 dlerror
 dlopen
 dlsym
 dup
 execvp
 exit
 expf
 fclose
 feof
 fflush
 fgets
 flock
 fmodf
 fopen
 fork
 fprintf
 fputs
 fread
 free
 frexpf
 fseek
 ftell
 ftruncate
 fwrite
 getcwd
 getdelim
 getenv
 getpid
 getppid
 getpriority
 getpwnam_r
 getrlimit
 gettimeofday
 getuid
 glBindRenderbuffer
 glBindTexture
 glCheckFramebufferStatus
 glDeleteTextures
 glFinish
 glFlush
 glGenTextures
 glGetError
 glGetIntegerv
 glGetRenderbufferParameteriv
 glGetStringi
 glGetTexImage
 glGetTexLevelParameteriv
 glPixelStorei
 glTexImage2D
 glTexParameteri
 glXGetCurrentContext
 glXGetCurrentDisplay
 glXGetCurrentDrawable
 glXGetProcAddress
 glXMakeCurrent
 isalnum
 isalpha
 isspace
 kill
 ldexpf
 listen
 localeconv
 localtime
 lseek
 malloc
 memcmp
 memcpy
 memmove
 memset
 mkdir
 mkdtemp
 mktime
 mmap
 modf
 munmap
 nanosleep
 open
 opendir
 operator delete(void*)
 operator delete(void*, unsigned long)
 operator delete[](void*)
 operator delete[](void*, unsigned long)
 operator new(unsigned long)
 operator new[](unsigned long)
 pclose
 poll
 popen
 posix_memalign
 powf
 printf
 pthread_attr_init
 pthread_attr_setstacksize
 pthread_cancel
 pthread_cond_clockwait
 pthread_cond_destroy
 pthread_cond_init
 pthread_cond_signal
 pthread_cond_timedwait
 pthread_create
 pthread_detach
 pthread_getschedparam
 pthread_getspecific
 pthread_join
 pthread_key_create
 pthread_key_delete
 pthread_kill
 pthread_mutex_clocklock
 pthread_mutex_destroy
 pthread_mutex_init
 pthread_mutex_lock
 pthread_mutex_unlock
 pthread_mutexattr_destroy
 pthread_mutexattr_init
 pthread_mutexattr_settype
 pthread_once
 pthread_self
 pthread_setname_np
 pthread_setschedparam
 pthread_setspecific
 puts
 qsort
 r (anonymous namespace)::k_debugUtilsLabelColors
 r C.1857.0
 r C.1860.1
 r C.417.0
 r CSWTCH.16
 r CSWTCH.207
 r CSWTCH.221
 r CSWTCH.23
 r CSWTCH.25
 r CSWTCH.504
 r CSWTCH.729
 r CSWTCH.776
 r CSettingsManager::GetDefaultValue<bool>(char const*, char const*, vr::EVRSettingsError*)::Empty
 r CSettingsManager::GetDefaultValue<double>(char const*, char const*, vr::EVRSettingsError*)::Empty
 r CSettingsManager::GetValue<bool>(char const*, char const*, vr::EVRSettingsError*)::Empty
 r CSettingsManager::GetValue<double>(char const*, char const*, vr::EVRSettingsError*)::Empty
 r CVRMsg_Input_GetActionBindingsResponse::LoadResult_ARRAYSIZE
 r CVRMsg_Input_GetActionBindingsResponse::LoadResult_MAX
 r CVRMsg_Input_GetActionBindingsResponse::LoadResult_MIN
 r CVRMsg_Input_GetActionBindingsResponse::k_ELoadFailed
 r CVRMsg_Input_GetActionBindingsResponse::k_ELoadInProgress
 r CVRMsg_Input_GetActionBindingsResponse::k_ELoadResultUnknown
 r CVRMsg_Input_GetActionBindingsResponse::k_ELoadSuccess
 r CVkDevice::CreateDevice(CreateDeviceDetails_t const&)::queuePriorities
 r CVulkanVRRenderer::TextureBarrier(VRRenderer::TextureBase*, VRRenderer::ImageLayout_t, VRRenderer::QueueMode)::sImageLayouts
 r Four_2PIs
 r Four_2ToThe21s
 r Four_2ToThe22s
 r Four_2ToThe23s
 r Four_2ToThe24s
 r Four_Epsilons
 r Four_FLT_MAX
 r Four_Fours
 r Four_NegativeOnes
 r Four_Negative_2ToThe23s
 r Four_Negative_FLT_MAX
 r Four_OOPIs
 r Four_OnePointFives
 r Four_Ones
 r Four_Origin
 r Four_PIs
 r Four_Point225s
 r Four_PointFives
 r Four_Thirds
 r Four_Threes
 r Four_TwoThirds
 r Four_Twos
 r Four_Zeros
 r IPC::crc32(unsigned int, void const*, unsigned long)::s_crc32
 r Json::Value::maxInt
 r Json::Value::maxInt64
 r Json::Value::maxLargestInt
 r Json::Value::maxLargestUInt
 r Json::Value::maxUInt
 r Json::Value::maxUInt64
 r Json::Value::minInt
 r Json::Value::minInt64
 r Json::Value::minLargestInt
 r Json::kNull
 r SkeletalCompression::kAuxBonesIndices
 r SkeletalCompression::kFingerTipBoneIndices
 r SkeletalCompression::kMetacarpalBoneIndices
 r SkeletalInputUtils::kFingerMetaCarpalBones
 r SkeletalInputUtils::kFingerSplayPairs
 r SkeletalInputUtils::kFingerTipBones
 r VRCrashPreCrashSetMinidumpComment(char const*)::szPrefix
 r __FRAME_END__
 r crc32(unsigned int, void const*, unsigned long)::crcTable
 r first_row_filter
 r g_SIMD_0123
 r g_SIMD_AllOnesMask
 r g_SIMD_Axis
 r g_SIMD_ComponentMask
 r g_SIMD_EveryOtherMask
 r g_SIMD_Infinity
 r g_SIMD_Low16BitsMask
 r g_SIMD_NegInfinity
 r g_SIMD_SkipTailMask
 r g_SIMD_clear_signmask
 r g_SIMD_clear_wmask
 r g_SIMD_lsbmask
 r g_SIMD_signmask
 r g_fl4ACosPolynomialCoefficient0
 r g_fl4ACosPolynomialCoefficient1
 r g_fl4ACosPolynomialCoefficient2
 r g_fl4ACosPolynomialCoefficient3
 r g_vulkanTextureFormats
 r gli::detail::FOURCC_DDS
 r gli::detail::FOURCC_KMG100
 r gli::detail::FOURCC_KTX10
 r gli::detail::get_format_info(gli::format)::Table
 r kMetacarpalBones
 r kMirrorTranslationOnlyBones
 r kModelSpaceBones
 r k_flJointRadii
 r k_pchRuntimeName
 r nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
 r nlohmann::detail::serializer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::decode(unsigned char&, unsigned int&, unsigned char)::utf8d
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CPackedBoneTransforms_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_AbortApplicationTransition_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_AcknowledgeQuit_Exiting_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ApplicationInfo_Manifest_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ApplicationInfo_Options_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ApplicationInfo_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ApplicationManifestRequest_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ApplicationManifestResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CancelApplicationLaunchResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CancelApplicationLaunch_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ChangeAppTypeResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ChangeAppType_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_GetNextMessageResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_GetNextMessage_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_RegisterMailboxResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_RegisterMailbox_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_SendMailboxMessageResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_SendMailboxMessage_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_UnregisterMailboxResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ClientMailbox_UnregisterMailbox_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorBringToFront_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorClearFrameBuffer_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorConnectResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorConnect_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorDumpImagesAll_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorDumpImages_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorGetScreenshotPropertyFilenameResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorGetScreenshotPropertyFilename_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorGetScreenshotPropertyTypeResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorGetScreenshotPropertyType_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorGoToBack_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorHookScreenshotResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorHookScreenshot_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorKeyboardShownResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorKeyboardShown_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorNewSharedBufferResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorNewSharedBuffer_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorNewSharedImageResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorNewSharedImage_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorNewSharedSemaphoreResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorNewSharedSemaphore_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorQuit_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorRefSharedResourceResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorRefSharedResource_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorRequestScreenshotResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorRequestScreenshot_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorSetDashboardVisibilityResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorSubmitScreenshotResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorSubmitScreenshot_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorTakeStereoScreenshotResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorTakeStereoScreenshot_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorUnrefSharedResourceResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorUnrefSharedResource_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorUpdateScreenshotProgressResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CompositorUpdateScreenshotProgress_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ComputeDistortionBatchedResponse_OutputCoord_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ComputeDistortionBatchedResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ComputeDistortionBatched_InputCoord_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ComputeDistortionBatched_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ComputeDistortionResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ComputeDistortion_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ConnectResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Connect_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CreateSwapTextureSetResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_CreateSwapTextureSet_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_DashboardStarted_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_DefaultBinding_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_DestroySwapTextureSet_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_DriverDebugRequest_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_DriverDebugResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetApplicationInfo_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetApplicationLaunchArgumentsResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetApplicationLaunchArguments_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDisplayInfoResponse_DisplayInfo_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDisplayInfoResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDisplayInfo_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDriverDetailResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDriverDetail_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDriverInfoResponse_DriverInfo_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDriverInfoResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_GetDriverInfo_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Input_GetActionBindingsResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Input_GetActionBindings_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Input_GetOriginLocalizedNameResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Input_GetOriginLocalizedName_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Input_SetActionManifestPathResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Input_SetActionManifestPath_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Input_SetXrInputConfig_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchApplicationForMimeTypeResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchApplicationForMimeType_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchApplicationResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchApplication_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchInternalProcessResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchInternalProcess_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchTemplateApplicationResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchTemplateApplication_AppOverrideKey_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LaunchTemplateApplication_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_LogMessageToServer_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_MimeType_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_NoResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_OculusSDKStart_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Path_HandleToStringResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Path_HandleToString_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Path_StringToHandleResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Path_StringToHandle_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_PerformApplicationPrelaunchCheckResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_PerformApplicationPrelaunchCheck_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_PowerOffTrackedDevice_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_PrismPrioritySet_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_QuitProcessRequest_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_QuitProcessResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_RegisterExternalWebRoot_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ReloadChaperone_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SendWebMessage_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ServiceConnectResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ServiceConnect_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetApplicationOptionsResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetApplicationOptions_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetApplicationProcessIdResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetApplicationProcessId_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetDefaultApplicationForMimeTypeResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetDefaultApplicationForMimeType_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetMasterProcessResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetMasterProcessRestartHintResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetMasterProcessRestartHint_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_SetMasterProcess_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetBool_Response_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetBool_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetNumeric_Response_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetNumeric_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetString_Response_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetString_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetValueType_Response_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_GetValueType_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_RemoveKeyInSection_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_RemoveSection_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_SetBool_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_SetNumeric_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_SetString_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_Settings_SetValue_Response_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ShouldKillTheaterPancakeProcessResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ShouldKillTheaterPancakeProcess_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ShutdownSystemResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_ShutdownSystem_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_StartAutolaunchOverlays_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_StartDashboardResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_StartDashboard_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_StartHomeAppResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_AcquireVideoStreamingService_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_EnableResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_Enable_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetDistortionResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetDistortion_InputCoord_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetDistortion_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetFormatDimensionsResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetFormatDimensions_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetFrameBoundsResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetFrameBounds_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetIntrinsicsResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetIntrinsics_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetProjectionResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetProjection_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetVideoStreamFormatResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_GetVideoStreamFormat_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_IsVideoStreamActiveResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_IsVideoStreamActive_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_PauseVideoStreamResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_PauseVideoStream_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_ReleaseVideoStreamingService_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_ResumeVideoStreamResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_ResumeVideoStream_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_SetAutoExposureResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_SetAutoExposure_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_SetCompatibilityModeResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_SetCompatibilityMode_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_SetVideoStreamFormatResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_SetVideoStreamFormat_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_StartVideoStreamResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_StartVideoStream_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_StopVideoStreamResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TrackedCamera_StopVideoStream_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_TriggerHapticPulse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_UpdateChaperoneUniverseResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_UpdateChaperoneUniverse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_UpdateZeroPose_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_WritePropertyDataToFileResponse_offsets_
 r protobuf_AssignDesc_vr_5fmessages_2eproto()::CVRMsg_WritePropertyDataToFile_offsets_
 r s_mat34Identity
 r s_rBoolPropertiesToRead
 r s_rFloatPropertiesToRead
 r s_rInt32PropertiesToRead
 r s_rMatrix34PropertiesToRead
 r s_rStringPropertiesToRead
 r s_rUint64PropertiesToRead
 r stbi__bmask
 r stbi__check_png_header(stbi__context*)::png_sig
 r stbi__compute_huffman_codes(stbi__zbuf*)::length_dezigzag
 r stbi__depth_scale_table
 r stbi__jbias
 r stbi__jpeg_dezigzag
 r stbi__process_frame_header(stbi__jpeg*, int)::rgb
 r stbi__process_marker(stbi__jpeg*, int)::tag
 r stbi__shiftsigned(unsigned int, int, int)::mul_table
 r stbi__shiftsigned(unsigned int, int, int)::shift_table
 r stbi__zdefault_distance
 r stbi__zdefault_length
 r stbi__zdist_base
 r stbi__zdist_extra
 r stbi__zlength_base
 r stbi__zlength_extra
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::UVAC_HT
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::UVDC_HT
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::UVQT
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::YAC_HT
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::YDC_HT
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::YQT
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::aasf
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::fillBits
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::head0
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::head2
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_ac_chrominance_nrcodes
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_ac_chrominance_values
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_ac_luminance_nrcodes
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_ac_luminance_values
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_dc_chrominance_nrcodes
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_dc_chrominance_values
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_dc_luminance_nrcodes
 r stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int)::std_dc_luminance_values
 r stbi_zlib_compress::distc
 r stbi_zlib_compress::disteb
 r stbi_zlib_compress::lengthc
 r stbi_zlib_compress::lengtheb
 r stbiw__crc32(unsigned char*, int)::crc_table
 r stbiw__jpg_ZigZag
 r std::_Sp_make_shared_tag::_S_ti()::__tag
 r std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_is_word(char) const::__s
 r std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_M_is_word(char) const::__s
 r std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits
 r std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits
 r sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)::k_emptyState
 r sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)::k_emptyState
 r sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)::k_emptyState
 r sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)::k_emptyState
 r terminator.3
 r typeinfo name for ApplicationsInterfaceRegistration<CVRApplications_001>
 r typeinfo name for ApplicationsInterfaceRegistration<CVRApplications_002>
 r typeinfo name for ApplicationsInterfaceRegistration<CVRApplications_003>
 r typeinfo name for ApplicationsInterfaceRegistration<CVRApplications_004>
 r typeinfo name for ApplicationsInterfaceRegistration<CVRApplications_005>
 r typeinfo name for ApplicationsInterfaceRegistration<CVRApplications_006>
 r typeinfo name for BlockQueueInterfaceRegistration<CVRBlockQueue_001>
 r typeinfo name for BlockQueueInterfaceRegistration<CVRBlockQueue_002>
 r typeinfo name for BlockQueueInterfaceRegistration<CVRBlockQueue_003>
 r typeinfo name for BlockQueueInterfaceRegistration<CVRBlockQueue_004>
 r typeinfo name for CAnimFactoryBase::CFactoryMaker
 r typeinfo name for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>
 r typeinfo name for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>
 r typeinfo name for CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>
 r typeinfo name for CAnimResource
 r typeinfo name for CAnimSkeleton
 r typeinfo name for CAutoRestoreEnvironment
 r typeinfo name for CBoneMaskResource
 r typeinfo name for CClientPropertyManager
 r typeinfo name for CCompositorPluginProvider
 r typeinfo name for CCompositorPluginProvider_Latest
 r typeinfo name for CDownsampleRenderer
 r typeinfo name for CDriverDirectInternalClient
 r typeinfo name for CDriverLog
 r typeinfo name for CDriverManager
 r typeinfo name for CFixedSizePropertyContainer
 r typeinfo name for CHmdSystemLatest
 r typeinfo name for CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType)::{lambda(char const*)#1}
 r typeinfo name for CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#1}
 r typeinfo name for CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#2}
 r typeinfo name for CHmdSystem_001
 r typeinfo name for CHmdSystem_004
 r typeinfo name for CHmd_001
 r typeinfo name for CHmd_002
 r typeinfo name for CHmd_003
 r typeinfo name for CHmd_004
 r typeinfo name for CHmd_005
 r typeinfo name for CHmd_006
 r typeinfo name for CIOBufferCursor
 r typeinfo name for CInputFilterBase
 r typeinfo name for CInputFilterValueStore
 r typeinfo name for CInputFilter_Boolean_And
 r typeinfo name for CInputFilter_Boolean_ButtonPressState
 r typeinfo name for CInputFilter_Boolean_Latch
 r typeinfo name for CInputFilter_Boolean_Or
 r typeinfo name for CInputFilter_Boolean_Threshold
 r typeinfo name for CInputFilter_Boolean_Toggle
 r typeinfo name for CInputFilter_DPad
 r typeinfo name for CInputFilter_Grab_ValueAndForce
 r typeinfo name for CInputFilter_JoystickSettings
 r typeinfo name for CInputFilter_Pose_Component
 r typeinfo name for CInputFilter_Pose_Constant
 r typeinfo name for CInputFilter_RadialMenu
 r typeinfo name for CInputFilter_RadialMenuBase
 r typeinfo name for CInputFilter_Scalar_Constant
 r typeinfo name for CInputFilter_Scalar_Deadzone
 r typeinfo name for CInputFilter_Scalar_Exponent
 r typeinfo name for CInputFilter_Scalar_JoystickScroll_Discrete
 r typeinfo name for CInputFilter_Scalar_JoystickScroll_Smooth
 r typeinfo name for CInputFilter_Scalar_ScaleAndOffset
 r typeinfo name for CInputFilter_Scalar_TrackpadScroll_Discrete
 r typeinfo name for CInputFilter_Scalar_TrackpadScroll_Smooth
 r typeinfo name for CInputFilter_TriggerHaptic
 r typeinfo name for CInputFilter_XRDPad
 r typeinfo name for CKeyframedDataResource
 r typeinfo name for CLegacyInput
 r typeinfo name for CLogBuffer::CLogBuffer()::{lambda(ELogLevel, char const*, void*)#1}
 r typeinfo name for CMCStore
 r typeinfo name for CMsaaResolveRenderer
 r typeinfo name for CNonCopyable
 r typeinfo name for CPackedBoneTransforms
 r typeinfo name for CPathManagerBase
 r typeinfo name for CPathManager_Client
 r typeinfo name for CPathManager_Server
 r typeinfo name for CPropertyContainer
 r typeinfo name for CPropertyManager
 r typeinfo name for CRenderModelLoadThread
 r typeinfo name for CRenderModelManager
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(unsigned short, unsigned short, unsigned short)#14}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#2}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#3}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#4}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#5}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#6}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#7}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#8}
 r typeinfo name for CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#9}
 r typeinfo name for CServerDriverHost_002
 r typeinfo name for CServerDriverHost_003
 r typeinfo name for CServerTrackedDeviceProvider
 r typeinfo name for CServerTrackedDeviceProvider_002
 r typeinfo name for CServerTrackedDeviceProvider_003
 r typeinfo name for CServerTrackedDeviceProvider_Latest
 r typeinfo name for CSettingsManager
 r typeinfo name for CSharedBufferLinux
 r typeinfo name for CSharedCountingSemaphoreLinux
 r typeinfo name for CSharedImageLinux
 r typeinfo name for CSharedResourceBaseLinux
 r typeinfo name for CSharedResourceNamespaceServer
 r typeinfo name for CSharedSemaphoreLinux
 r typeinfo name for CSimulatedActionBase
 r typeinfo name for CSimulatedTrackpadClick
 r typeinfo name for CSimulatedTriggerPull
 r typeinfo name for CSxrAction
 r typeinfo name for CSxrActionSet
 r typeinfo name for CSxrChildHandle<CSxrAction, XrAction_T*, CSxrActionSet>
 r typeinfo name for CSxrChildHandle<CSxrActionSet, XrActionSet_T*, CSxrInstance>
 r typeinfo name for CSxrChildHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*, CSxrSession>
 r typeinfo name for CSxrChildHandle<CSxrSession, XrSession_T*, CSxrInstance>
 r typeinfo name for CSxrChildHandle<CSxrSwapchainBase, XrSwapchain_T*, CSxrSession>
 r typeinfo name for CSxrChildVariableParentHandle<CSxrSpace, XrSpace_T*, CSxrAction, CSxrSession>
 r typeinfo name for CSxrCompositorOpenVR
 r typeinfo name for CSxrCompositorPrism
 r typeinfo name for CSxrDeletableBase
 r typeinfo name for CSxrDispatchableHandle<CSxrAction, XrAction_T*>
 r typeinfo name for CSxrDispatchableHandle<CSxrActionSet, XrActionSet_T*>
 r typeinfo name for CSxrDispatchableHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*>
 r typeinfo name for CSxrDispatchableHandle<CSxrInstance, XrInstance_T*>
 r typeinfo name for CSxrDispatchableHandle<CSxrSession, XrSession_T*>
 r typeinfo name for CSxrDispatchableHandle<CSxrSpace, XrSpace_T*>
 r typeinfo name for CSxrDispatchableHandle<CSxrSwapchainBase, XrSwapchain_T*>
 r typeinfo name for CSxrGraphicsBindingGLOpenVR
 r typeinfo name for CSxrGraphicsBindingPrism
 r typeinfo name for CSxrGraphicsBindingVulkanOpenVR
 r typeinfo name for CSxrHandTrackerEXT
 r typeinfo name for CSxrInstance
 r typeinfo name for CSxrParentBase
 r typeinfo name for CSxrSession
 r typeinfo name for CSxrSpace
 r typeinfo name for CSxrSwapchainBase
 r typeinfo name for CSxrSwapchainGLOpenVR
 r typeinfo name for CSxrSwapchainPrism
 r typeinfo name for CSxrSwapchainVulkanOpenVR
 r typeinfo name for CSyncLockThread
 r typeinfo name for CTrackedDeviceServerDriverAdapter
 r typeinfo name for CVRApplications_001
 r typeinfo name for CVRApplications_002
 r typeinfo name for CVRApplications_003
 r typeinfo name for CVRApplications_004
 r typeinfo name for CVRApplications_005
 r typeinfo name for CVRApplications_006
 r typeinfo name for CVRBlockQueueManager
 r typeinfo name for CVRBlockQueue_001
 r typeinfo name for CVRBlockQueue_002
 r typeinfo name for CVRBlockQueue_003
 r typeinfo name for CVRBlockQueue_004
 r typeinfo name for CVRCameraComponentAdapter
 r typeinfo name for CVRCameraComponent_001
 r typeinfo name for CVRCameraComponent_002
 r typeinfo name for CVRCameraComponent_Latest
 r typeinfo name for CVRChaperoneClient
 r typeinfo name for CVRChaperoneSetup_001
 r typeinfo name for CVRChaperoneSetup_002
 r typeinfo name for CVRChaperoneSetup_003
 r typeinfo name for CVRChaperoneSetup_004
 r typeinfo name for CVRChaperoneSetup_005
 r typeinfo name for CVRChaperone_001
 r typeinfo name for CVRChaperone_002
 r typeinfo name for CVRChaperone_003
 r typeinfo name for CVRClientCore_001
 r typeinfo name for CVRClientCore_002
 r typeinfo name for CVRCompositorClient
 r typeinfo name for CVRCompositorClientBase
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>
 r typeinfo name for CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>
 r typeinfo name for CVRCompositorSharedTextures::CTextureCacheKey
 r typeinfo name for CVRCompositorSharedTextures::ISharedTextureSet
 r typeinfo name for CVRCompositorSharedTextures::IVRSharedTexture
 r typeinfo name for CVRCompositor_003
 r typeinfo name for CVRCompositor_004
 r typeinfo name for CVRCompositor_005
 r typeinfo name for CVRCompositor_006
 r typeinfo name for CVRCompositor_007
 r typeinfo name for CVRCompositor_008
 r typeinfo name for CVRCompositor_009
 r typeinfo name for CVRCompositor_010
 r typeinfo name for CVRCompositor_011
 r typeinfo name for CVRCompositor_012
 r typeinfo name for CVRCompositor_013
 r typeinfo name for CVRCompositor_014
 r typeinfo name for CVRCompositor_015
 r typeinfo name for CVRCompositor_016
 r typeinfo name for CVRCompositor_017
 r typeinfo name for CVRCompositor_018
 r typeinfo name for CVRCompositor_019
 r typeinfo name for CVRCompositor_020
 r typeinfo name for CVRCompositor_021
 r typeinfo name for CVRCompositor_022
 r typeinfo name for CVRCompositor_023
 r typeinfo name for CVRCompositor_024
 r typeinfo name for CVRCompositor_025
 r typeinfo name for CVRCompositor_026
 r typeinfo name for CVRControlPanel_001
 r typeinfo name for CVRControlPanel_002
 r typeinfo name for CVRControlPanel_003
 r typeinfo name for CVRControlPanel_004
 r typeinfo name for CVRControlPanel_005
 r typeinfo name for CVRControllerComponentAdapter
 r typeinfo name for CVRControllerComponent_Latest
 r typeinfo name for CVRDashboardManager_001
 r typeinfo name for CVRDebug
 r typeinfo name for CVRDisplayComponentAdapter
 r typeinfo name for CVRDisplayComponent_001
 r typeinfo name for CVRDisplayComponent_Latest
 r typeinfo name for CVRDriverDirectModeComponentAdapter
 r typeinfo name for CVRDriverDirectModeComponent_001
 r typeinfo name for CVRDriverDirectModeComponent_002
 r typeinfo name for CVRDriverDirectModeComponent_003
 r typeinfo name for CVRDriverDirectModeComponent_004
 r typeinfo name for CVRDriverDirectModeComponent_005
 r typeinfo name for CVRDriverDirectModeComponent_006
 r typeinfo name for CVRDriverDirectModeComponent_007
 r typeinfo name for CVRDriverDirectModeComponent_Latest
 r typeinfo name for CVRFramerateGovernor
 r typeinfo name for CVRIOBuffer
 r typeinfo name for CVRIOBuffer_001
 r typeinfo name for CVRIOBuffer_002
 r typeinfo name for CVRInputLatest
 r typeinfo name for CVRInputLatest::InputFrame_t::GetAndCollapseActionValues(VRAction_Entry_t*, unsigned long, unsigned long)::{lambda(unsigned long)#1}
 r typeinfo name for CVRInput_001
 r typeinfo name for CVRInput_002
 r typeinfo name for CVRInput_003
 r typeinfo name for CVRInput_004
 r typeinfo name for CVRInput_005
 r typeinfo name for CVRInput_006
 r typeinfo name for CVRInput_007
 r typeinfo name for CVRInput_008
 r typeinfo name for CVRInput_009
 r typeinfo name for CVRLog::InitLog(char const*, char const*, bool, unsigned long)::{lambda(ELogLevel, char const*, void*)#1}
 r typeinfo name for CVRMailbox
 r typeinfo name for CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}
 r typeinfo name for CVRMailboxBase
 r typeinfo name for CVRMailboxClient
 r typeinfo name for CVRMailbox_001
 r typeinfo name for CVRMsg_AbortApplicationTransition
 r typeinfo name for CVRMsg_AcknowledgeQuit_Exiting
 r typeinfo name for CVRMsg_ApplicationInfo
 r typeinfo name for CVRMsg_ApplicationInfo_Manifest
 r typeinfo name for CVRMsg_ApplicationInfo_Options
 r typeinfo name for CVRMsg_ApplicationManifestRequest
 r typeinfo name for CVRMsg_ApplicationManifestResponse
 r typeinfo name for CVRMsg_CancelApplicationLaunch
 r typeinfo name for CVRMsg_CancelApplicationLaunchResponse
 r typeinfo name for CVRMsg_ChangeAppType
 r typeinfo name for CVRMsg_ChangeAppTypeResponse
 r typeinfo name for CVRMsg_ClientMailbox_GetNextMessage
 r typeinfo name for CVRMsg_ClientMailbox_GetNextMessageResponse
 r typeinfo name for CVRMsg_ClientMailbox_RegisterMailbox
 r typeinfo name for CVRMsg_ClientMailbox_RegisterMailboxResponse
 r typeinfo name for CVRMsg_ClientMailbox_SendMailboxMessage
 r typeinfo name for CVRMsg_ClientMailbox_SendMailboxMessageResponse
 r typeinfo name for CVRMsg_ClientMailbox_UnregisterMailbox
 r typeinfo name for CVRMsg_ClientMailbox_UnregisterMailboxResponse
 r typeinfo name for CVRMsg_CompositorBringToFront
 r typeinfo name for CVRMsg_CompositorClearFrameBuffer
 r typeinfo name for CVRMsg_CompositorConnect
 r typeinfo name for CVRMsg_CompositorConnectResponse
 r typeinfo name for CVRMsg_CompositorDumpImages
 r typeinfo name for CVRMsg_CompositorDumpImagesAll
 r typeinfo name for CVRMsg_CompositorGetScreenshotPropertyFilename
 r typeinfo name for CVRMsg_CompositorGetScreenshotPropertyFilenameResponse
 r typeinfo name for CVRMsg_CompositorGetScreenshotPropertyType
 r typeinfo name for CVRMsg_CompositorGetScreenshotPropertyTypeResponse
 r typeinfo name for CVRMsg_CompositorGoToBack
 r typeinfo name for CVRMsg_CompositorHookScreenshot
 r typeinfo name for CVRMsg_CompositorHookScreenshotResponse
 r typeinfo name for CVRMsg_CompositorKeyboardShown
 r typeinfo name for CVRMsg_CompositorKeyboardShownResponse
 r typeinfo name for CVRMsg_CompositorNewSharedBuffer
 r typeinfo name for CVRMsg_CompositorNewSharedBufferResponse
 r typeinfo name for CVRMsg_CompositorNewSharedImage
 r typeinfo name for CVRMsg_CompositorNewSharedImageResponse
 r typeinfo name for CVRMsg_CompositorNewSharedSemaphore
 r typeinfo name for CVRMsg_CompositorNewSharedSemaphoreResponse
 r typeinfo name for CVRMsg_CompositorQuit
 r typeinfo name for CVRMsg_CompositorRefSharedResource
 r typeinfo name for CVRMsg_CompositorRefSharedResourceResponse
 r typeinfo name for CVRMsg_CompositorRequestScreenshot
 r typeinfo name for CVRMsg_CompositorRequestScreenshotResponse
 r typeinfo name for CVRMsg_CompositorSetDashboardVisibilityResponse
 r typeinfo name for CVRMsg_CompositorSubmitScreenshot
 r typeinfo name for CVRMsg_CompositorSubmitScreenshotResponse
 r typeinfo name for CVRMsg_CompositorTakeStereoScreenshot
 r typeinfo name for CVRMsg_CompositorTakeStereoScreenshotResponse
 r typeinfo name for CVRMsg_CompositorUnrefSharedResource
 r typeinfo name for CVRMsg_CompositorUnrefSharedResourceResponse
 r typeinfo name for CVRMsg_CompositorUpdateScreenshotProgress
 r typeinfo name for CVRMsg_CompositorUpdateScreenshotProgressResponse
 r typeinfo name for CVRMsg_ComputeDistortion
 r typeinfo name for CVRMsg_ComputeDistortionBatched
 r typeinfo name for CVRMsg_ComputeDistortionBatchedResponse
 r typeinfo name for CVRMsg_ComputeDistortionBatchedResponse_OutputCoord
 r typeinfo name for CVRMsg_ComputeDistortionBatched_InputCoord
 r typeinfo name for CVRMsg_ComputeDistortionResponse
 r typeinfo name for CVRMsg_Connect
 r typeinfo name for CVRMsg_ConnectResponse
 r typeinfo name for CVRMsg_CreateSwapTextureSet
 r typeinfo name for CVRMsg_CreateSwapTextureSetResponse
 r typeinfo name for CVRMsg_DashboardStarted
 r typeinfo name for CVRMsg_DefaultBinding
 r typeinfo name for CVRMsg_DestroySwapTextureSet
 r typeinfo name for CVRMsg_DriverDebugRequest
 r typeinfo name for CVRMsg_DriverDebugResponse
 r typeinfo name for CVRMsg_GetApplicationInfo
 r typeinfo name for CVRMsg_GetApplicationLaunchArguments
 r typeinfo name for CVRMsg_GetApplicationLaunchArgumentsResponse
 r typeinfo name for CVRMsg_GetDisplayInfo
 r typeinfo name for CVRMsg_GetDisplayInfoResponse
 r typeinfo name for CVRMsg_GetDisplayInfoResponse_DisplayInfo
 r typeinfo name for CVRMsg_GetDriverDetail
 r typeinfo name for CVRMsg_GetDriverDetailResponse
 r typeinfo name for CVRMsg_GetDriverInfo
 r typeinfo name for CVRMsg_GetDriverInfoResponse
 r typeinfo name for CVRMsg_GetDriverInfoResponse_DriverInfo
 r typeinfo name for CVRMsg_Input_GetActionBindings
 r typeinfo name for CVRMsg_Input_GetActionBindingsResponse
 r typeinfo name for CVRMsg_Input_GetOriginLocalizedName
 r typeinfo name for CVRMsg_Input_GetOriginLocalizedNameResponse
 r typeinfo name for CVRMsg_Input_SetActionManifestPath
 r typeinfo name for CVRMsg_Input_SetActionManifestPathResponse
 r typeinfo name for CVRMsg_Input_SetXrInputConfig
 r typeinfo name for CVRMsg_LaunchApplication
 r typeinfo name for CVRMsg_LaunchApplicationForMimeType
 r typeinfo name for CVRMsg_LaunchApplicationForMimeTypeResponse
 r typeinfo name for CVRMsg_LaunchApplicationResponse
 r typeinfo name for CVRMsg_LaunchInternalProcess
 r typeinfo name for CVRMsg_LaunchInternalProcessResponse
 r typeinfo name for CVRMsg_LaunchTemplateApplication
 r typeinfo name for CVRMsg_LaunchTemplateApplicationResponse
 r typeinfo name for CVRMsg_LaunchTemplateApplication_AppOverrideKey
 r typeinfo name for CVRMsg_LogMessageToServer
 r typeinfo name for CVRMsg_MimeType
 r typeinfo name for CVRMsg_NoResponse
 r typeinfo name for CVRMsg_OculusSDKStart
 r typeinfo name for CVRMsg_Path_HandleToString
 r typeinfo name for CVRMsg_Path_HandleToStringResponse
 r typeinfo name for CVRMsg_Path_StringToHandle
 r typeinfo name for CVRMsg_Path_StringToHandleResponse
 r typeinfo name for CVRMsg_PerformApplicationPrelaunchCheck
 r typeinfo name for CVRMsg_PerformApplicationPrelaunchCheckResponse
 r typeinfo name for CVRMsg_PowerOffTrackedDevice
 r typeinfo name for CVRMsg_PrismPrioritySet
 r typeinfo name for CVRMsg_QuitProcessRequest
 r typeinfo name for CVRMsg_QuitProcessResponse
 r typeinfo name for CVRMsg_RegisterExternalWebRoot
 r typeinfo name for CVRMsg_ReloadChaperone
 r typeinfo name for CVRMsg_SendWebMessage
 r typeinfo name for CVRMsg_ServiceConnect
 r typeinfo name for CVRMsg_ServiceConnectResponse
 r typeinfo name for CVRMsg_SetApplicationOptions
 r typeinfo name for CVRMsg_SetApplicationOptionsResponse
 r typeinfo name for CVRMsg_SetApplicationProcessId
 r typeinfo name for CVRMsg_SetApplicationProcessIdResponse
 r typeinfo name for CVRMsg_SetDefaultApplicationForMimeType
 r typeinfo name for CVRMsg_SetDefaultApplicationForMimeTypeResponse
 r typeinfo name for CVRMsg_SetMasterProcess
 r typeinfo name for CVRMsg_SetMasterProcessResponse
 r typeinfo name for CVRMsg_SetMasterProcessRestartHint
 r typeinfo name for CVRMsg_SetMasterProcessRestartHintResponse
 r typeinfo name for CVRMsg_Settings_GetBool
 r typeinfo name for CVRMsg_Settings_GetBool_Response
 r typeinfo name for CVRMsg_Settings_GetNumeric
 r typeinfo name for CVRMsg_Settings_GetNumeric_Response
 r typeinfo name for CVRMsg_Settings_GetString
 r typeinfo name for CVRMsg_Settings_GetString_Response
 r typeinfo name for CVRMsg_Settings_GetValueType
 r typeinfo name for CVRMsg_Settings_GetValueType_Response
 r typeinfo name for CVRMsg_Settings_RemoveKeyInSection
 r typeinfo name for CVRMsg_Settings_RemoveSection
 r typeinfo name for CVRMsg_Settings_SetBool
 r typeinfo name for CVRMsg_Settings_SetNumeric
 r typeinfo name for CVRMsg_Settings_SetString
 r typeinfo name for CVRMsg_Settings_SetValue_Response
 r typeinfo name for CVRMsg_ShouldKillTheaterPancakeProcess
 r typeinfo name for CVRMsg_ShouldKillTheaterPancakeProcessResponse
 r typeinfo name for CVRMsg_ShutdownSystem
 r typeinfo name for CVRMsg_ShutdownSystemResponse
 r typeinfo name for CVRMsg_StartAutolaunchOverlays
 r typeinfo name for CVRMsg_StartDashboard
 r typeinfo name for CVRMsg_StartDashboardResponse
 r typeinfo name for CVRMsg_StartHomeAppResponse
 r typeinfo name for CVRMsg_TrackedCamera_AcquireVideoStreamingService
 r typeinfo name for CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse
 r typeinfo name for CVRMsg_TrackedCamera_Enable
 r typeinfo name for CVRMsg_TrackedCamera_EnableResponse
 r typeinfo name for CVRMsg_TrackedCamera_GetDistortion
 r typeinfo name for CVRMsg_TrackedCamera_GetDistortionResponse
 r typeinfo name for CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord
 r typeinfo name for CVRMsg_TrackedCamera_GetDistortion_InputCoord
 r typeinfo name for CVRMsg_TrackedCamera_GetFormatDimensions
 r typeinfo name for CVRMsg_TrackedCamera_GetFormatDimensionsResponse
 r typeinfo name for CVRMsg_TrackedCamera_GetFrameBounds
 r typeinfo name for CVRMsg_TrackedCamera_GetFrameBoundsResponse
 r typeinfo name for CVRMsg_TrackedCamera_GetIntrinsics
 r typeinfo name for CVRMsg_TrackedCamera_GetIntrinsicsResponse
 r typeinfo name for CVRMsg_TrackedCamera_GetProjection
 r typeinfo name for CVRMsg_TrackedCamera_GetProjectionResponse
 r typeinfo name for CVRMsg_TrackedCamera_GetVideoStreamFormat
 r typeinfo name for CVRMsg_TrackedCamera_GetVideoStreamFormatResponse
 r typeinfo name for CVRMsg_TrackedCamera_IsVideoStreamActive
 r typeinfo name for CVRMsg_TrackedCamera_IsVideoStreamActiveResponse
 r typeinfo name for CVRMsg_TrackedCamera_PauseVideoStream
 r typeinfo name for CVRMsg_TrackedCamera_PauseVideoStreamResponse
 r typeinfo name for CVRMsg_TrackedCamera_ReleaseVideoStreamingService
 r typeinfo name for CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse
 r typeinfo name for CVRMsg_TrackedCamera_ResumeVideoStream
 r typeinfo name for CVRMsg_TrackedCamera_ResumeVideoStreamResponse
 r typeinfo name for CVRMsg_TrackedCamera_SetAutoExposure
 r typeinfo name for CVRMsg_TrackedCamera_SetAutoExposureResponse
 r typeinfo name for CVRMsg_TrackedCamera_SetCompatibilityMode
 r typeinfo name for CVRMsg_TrackedCamera_SetCompatibilityModeResponse
 r typeinfo name for CVRMsg_TrackedCamera_SetVideoStreamFormat
 r typeinfo name for CVRMsg_TrackedCamera_SetVideoStreamFormatResponse
 r typeinfo name for CVRMsg_TrackedCamera_StartVideoStream
 r typeinfo name for CVRMsg_TrackedCamera_StartVideoStreamResponse
 r typeinfo name for CVRMsg_TrackedCamera_StopVideoStream
 r typeinfo name for CVRMsg_TrackedCamera_StopVideoStreamResponse
 r typeinfo name for CVRMsg_TriggerHapticPulse
 r typeinfo name for CVRMsg_UpdateChaperoneUniverse
 r typeinfo name for CVRMsg_UpdateChaperoneUniverseResponse
 r typeinfo name for CVRMsg_UpdateZeroPose
 r typeinfo name for CVRMsg_WritePropertyDataToFile
 r typeinfo name for CVRMsg_WritePropertyDataToFileResponse
 r typeinfo name for CVRNotifications_001
 r typeinfo name for CVROverlayLatest
 r typeinfo name for CVROverlayViewLatest
 r typeinfo name for CVROverlayView_001
 r typeinfo name for CVROverlayView_002
 r typeinfo name for CVROverlay_001
 r typeinfo name for CVROverlay_002
 r typeinfo name for CVROverlay_003
 r typeinfo name for CVROverlay_004
 r typeinfo name for CVROverlay_005
 r typeinfo name for CVROverlay_006
 r typeinfo name for CVROverlay_007
 r typeinfo name for CVROverlay_008
 r typeinfo name for CVROverlay_009
 r typeinfo name for CVROverlay_010
 r typeinfo name for CVROverlay_011
 r typeinfo name for CVROverlay_012
 r typeinfo name for CVROverlay_013
 r typeinfo name for CVROverlay_014
 r typeinfo name for CVROverlay_015
 r typeinfo name for CVROverlay_016
 r typeinfo name for CVROverlay_017
 r typeinfo name for CVROverlay_018
 r typeinfo name for CVROverlay_019
 r typeinfo name for CVROverlay_020
 r typeinfo name for CVROverlay_021
 r typeinfo name for CVROverlay_022
 r typeinfo name for CVROverlay_023
 r typeinfo name for CVROverlay_024
 r typeinfo name for CVROverlay_025
 r typeinfo name for CVRRenderModels_001
 r typeinfo name for CVRRenderModels_002
 r typeinfo name for CVRRenderModels_003
 r typeinfo name for CVRRenderModels_004
 r typeinfo name for CVRRenderModels_005
 r typeinfo name for CVRReplyMailbox
 r typeinfo name for CVRResourcesLatest
 r typeinfo name for CVRScreenshotsLatest
 r typeinfo name for CVRScreenshots_001
 r typeinfo name for CVRSettings_001
 r typeinfo name for CVRSettings_002
 r typeinfo name for CVRSharedGLTexture
 r typeinfo name for CVRSharedVulkanTexture
 r typeinfo name for CVRSpatialAnchorsLatest
 r typeinfo name for CVRSteamPrivate_001
 r typeinfo name for CVRSteamPrivate_002
 r typeinfo name for CVRSystemLatest
 r typeinfo name for CVRSystemLatest::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)::{lambda(vr::ETrackedDeviceClass)#1}
 r typeinfo name for CVRSystem_001
 r typeinfo name for CVRSystem_002
 r typeinfo name for CVRSystem_003
 r typeinfo name for CVRSystem_004
 r typeinfo name for CVRSystem_005
 r typeinfo name for CVRSystem_006
 r typeinfo name for CVRSystem_007
 r typeinfo name for CVRSystem_008
 r typeinfo name for CVRSystem_009
 r typeinfo name for CVRSystem_010
 r typeinfo name for CVRSystem_011
 r typeinfo name for CVRSystem_012
 r typeinfo name for CVRSystem_013
 r typeinfo name for CVRSystem_014
 r typeinfo name for CVRSystem_015
 r typeinfo name for CVRSystem_016
 r typeinfo name for CVRSystem_017
 r typeinfo name for CVRSystem_018
 r typeinfo name for CVRSystem_019
 r typeinfo name for CVRSystem_020
 r typeinfo name for CVRSystem_021
 r typeinfo name for CVRTrackedCamera_002
 r typeinfo name for CVRTrackedCamera_003
 r typeinfo name for CVRTrackedCamera_004
 r typeinfo name for CVRTrackedCamera_005
 r typeinfo name for CVRTrackedDevice_004
 r typeinfo name for CVRTrackedDevice_Latest
 r typeinfo name for CVRVirtualDisplayComponentAdapter
 r typeinfo name for CVRVirtualDisplayComponent_001
 r typeinfo name for CVRVirtualDisplayComponent_Latest
 r typeinfo name for CVRWatchdogHost_001
 r typeinfo name for CVirtualDisplayClient
 r typeinfo name for CVkBuffer
 r typeinfo name for CVkCommandBuffer
 r typeinfo name for CVkCommandBufferPool
 r typeinfo name for CVkGarbageCollector
 r typeinfo name for CVkImage
 r typeinfo name for CVkMemory
 r typeinfo name for CVkPoolGarbageCollector<CVkCommandBuffer>
 r typeinfo name for CVkPoolableResource<CVkCommandBufferPool>
 r typeinfo name for CVkResourceBase
 r typeinfo name for CVkResourcePool<CVkCommandBuffer>
 r typeinfo name for CVkTimeline
 r typeinfo name for CVulkanVRRenderer
 r typeinfo name for CWatchdogDriverContext
 r typeinfo name for CWatchdogTrackedDeviceProvider
 r typeinfo name for CWatchdogTrackedDeviceProvider_Latest
 r typeinfo name for ChaperoneInterfaceRegistration<CVRChaperone_001>
 r typeinfo name for ChaperoneInterfaceRegistration<CVRChaperone_002>
 r typeinfo name for ChaperoneInterfaceRegistration<CVRChaperone_003>
 r typeinfo name for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_001>
 r typeinfo name for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_002>
 r typeinfo name for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_003>
 r typeinfo name for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_004>
 r typeinfo name for ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_005>
 r typeinfo name for ComponentAdapterBaseNoParent<IVRCameraComponent001, &k_pchCameraComponentPrefix, 1, CVRCameraComponent_001>
 r typeinfo name for ComponentAdapterBaseNoParent<IVRDisplayComponent001, &k_pchDisplayComponentPrefix, 1, CVRDisplayComponent_001>
 r typeinfo name for ComponentAdapterBaseNoParent<IVRVirtualDisplay001, &k_pchVirtualDisplayComponentPrefix, 1, CVRVirtualDisplayComponent_001>
 r typeinfo name for ComponentAdapterBaseNoParent<vr::IVRControllerComponent, &k_pchControllerComponentPrefix, 1, CVRControllerComponent_Latest>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRCameraComponent002, &k_pchCameraComponentPrefix, 2, CVRCameraComponent_002, CVRCameraComponent_001>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_001, &k_pchDriverDirectModeComponentPrefix, 1, CVRDriverDirectModeComponent_001, CVRDisplayComponent_001>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_002, &k_pchDriverDirectModeComponentPrefix, 2, CVRDriverDirectModeComponent_002, CVRDriverDirectModeComponent_001>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_003, &k_pchDriverDirectModeComponentPrefix, 3, CVRDriverDirectModeComponent_003, CVRDriverDirectModeComponent_002>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_004, &k_pchDriverDirectModeComponentPrefix, 4, CVRDriverDirectModeComponent_004, CVRDriverDirectModeComponent_003>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_005, &k_pchDriverDirectModeComponentPrefix, 5, CVRDriverDirectModeComponent_005, CVRDriverDirectModeComponent_004>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_006, &k_pchDriverDirectModeComponentPrefix, 6, CVRDriverDirectModeComponent_006, CVRDriverDirectModeComponent_005>
 r typeinfo name for ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_007, &k_pchDriverDirectModeComponentPrefix, 7, CVRDriverDirectModeComponent_007, CVRDriverDirectModeComponent_006>
 r typeinfo name for ComponentAdapterBaseWithParent<vr::IVRCameraComponent, &k_pchCameraComponentPrefix, 3, CVRCameraComponent_Latest, CVRCameraComponent_002>
 r typeinfo name for ComponentAdapterBaseWithParent<vr::IVRDisplayComponent, &k_pchDisplayComponentPrefix, 2, CVRDisplayComponent_Latest, CVRDisplayComponent_001>
 r typeinfo name for ComponentAdapterBaseWithParent<vr::IVRDriverDirectModeComponent, &k_pchDriverDirectModeComponentPrefix, 8, CVRDriverDirectModeComponent_Latest, CVRDriverDirectModeComponent_007>
 r typeinfo name for ComponentAdapterBaseWithParent<vr::IVRVirtualDisplay, &k_pchVirtualDisplayComponentPrefix, 2, CVRVirtualDisplayComponent_Latest, CVRVirtualDisplayComponent_001>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_003>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_004>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_005>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_006>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_007>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_008>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_009>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_010>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_011>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_012>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_013>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_014>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_015>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_016>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_017>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_018>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_019>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_020>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_021>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_022>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_023>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_024>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_025>
 r typeinfo name for CompositorInterfaceRegistration<CVRCompositor_026>
 r typeinfo name for ControlPanelInterfaceRegistration<CVRControlPanel_001>
 r typeinfo name for ControlPanelInterfaceRegistration<CVRControlPanel_002>
 r typeinfo name for ControlPanelInterfaceRegistration<CVRControlPanel_003>
 r typeinfo name for ControlPanelInterfaceRegistration<CVRControlPanel_004>
 r typeinfo name for ControlPanelInterfaceRegistration<CVRControlPanel_005>
 r typeinfo name for ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)::{lambda(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)#1}
 r typeinfo name for DashboardManagerInterfaceRegistration<CVRDashboardManager_001>
 r typeinfo name for GenericInterfaceRegistration
 r typeinfo name for HmdInterfaceRegistration<CHmd_001>
 r typeinfo name for HmdInterfaceRegistration<CHmd_002>
 r typeinfo name for HmdInterfaceRegistration<CHmd_003>
 r typeinfo name for HmdInterfaceRegistration<CHmd_004>
 r typeinfo name for HmdInterfaceRegistration<CHmd_005>
 r typeinfo name for HmdInterfaceRegistration<CHmd_006>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_001>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_002>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_003>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_004>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_005>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_006>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_007>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_008>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_009>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_010>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_011>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_012>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_013>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_014>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_015>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_016>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_017>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_018>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_019>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_020>
 r typeinfo name for HmdInterfaceRegistration<CVRSystem_021>
 r typeinfo name for IHmdSystem_002
 r typeinfo name for IHmdSystem_003
 r typeinfo name for IInputFilter
 r typeinfo name for IInputFilterValueStore
 r typeinfo name for ILockedPropertyContainer
 r typeinfo name for ILogListener
 r typeinfo name for IOBufferInterfaceRegistration<CVRIOBuffer_001>
 r typeinfo name for IOBufferInterfaceRegistration<CVRIOBuffer_002>
 r typeinfo name for IPC::IEvent
 r typeinfo name for IPC::IMutex
 r typeinfo name for IPC::ISharedMem
 r typeinfo name for IPC::ISyncObject
 r typeinfo name for IPC::PosixSharedMemory
 r typeinfo name for IPC::SharedObjectEvent
 r typeinfo name for IPC::SharedObjectMutex
 r typeinfo name for IServerDriverHost_002_003
 r typeinfo name for ITrackedDeviceServerDriver_004
 r typeinfo name for IVRCameraComponent001
 r typeinfo name for IVRCameraComponent002
 r typeinfo name for IVRChaperoneInternal
 r typeinfo name for IVRClientHandler
 r typeinfo name for IVRClientInternal
 r typeinfo name for IVRDisplayComponent001
 r typeinfo name for IVRDriverDirectModeComponent_001
 r typeinfo name for IVRDriverDirectModeComponent_002
 r typeinfo name for IVRDriverDirectModeComponent_003
 r typeinfo name for IVRDriverDirectModeComponent_004
 r typeinfo name for IVRDriverDirectModeComponent_005
 r typeinfo name for IVRDriverDirectModeComponent_006
 r typeinfo name for IVRDriverDirectModeComponent_007
 r typeinfo name for IVRLegacyInput
 r typeinfo name for IVRRenderer
 r typeinfo name for IVRVirtualDisplay001
 r typeinfo name for IXrBinding
 r typeinfo name for IXrCompositor
 r typeinfo name for IXrSwapchain
 r typeinfo name for InMemoryInputStream
 r typeinfo name for InMemoryStreamInputBuf
 r typeinfo name for InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}
 r typeinfo name for InitInternalInterfacesNonStandard(void* (*)(char const*))::{lambda(char const*)#1}
 r typeinfo name for InputInterfaceRegistration<CVRInput_001>
 r typeinfo name for InputInterfaceRegistration<CVRInput_002>
 r typeinfo name for InputInterfaceRegistration<CVRInput_003>
 r typeinfo name for InputInterfaceRegistration<CVRInput_004>
 r typeinfo name for InputInterfaceRegistration<CVRInput_005>
 r typeinfo name for InputInterfaceRegistration<CVRInput_006>
 r typeinfo name for InputInterfaceRegistration<CVRInput_007>
 r typeinfo name for InputInterfaceRegistration<CVRInput_008>
 r typeinfo name for InputInterfaceRegistration<CVRInput_009>
 r typeinfo name for InterfaceRegistrationBase
 r typeinfo name for Json::BuiltStyledStreamWriter
 r typeinfo name for Json::CharReader
 r typeinfo name for Json::CharReader::Factory
 r typeinfo name for Json::CharReaderBuilder
 r typeinfo name for Json::Exception
 r typeinfo name for Json::Exception*
 r typeinfo name for Json::FastWriter
 r typeinfo name for Json::LogicError
 r typeinfo name for Json::OurCharReader
 r typeinfo name for Json::RuntimeError
 r typeinfo name for Json::StreamWriter
 r typeinfo name for Json::StreamWriter::Factory
 r typeinfo name for Json::StreamWriterBuilder
 r typeinfo name for Json::StyledWriter
 r typeinfo name for Json::Writer
 r typeinfo name for MailboxInterfaceRegistration<CVRMailbox_001>
 r typeinfo name for MaterialUtf8FileReader
 r typeinfo name for NotificationsInterfaceRegistration<CVRNotifications_001>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_001>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_002>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_003>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_004>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_005>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_006>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_007>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_008>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_009>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_010>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_011>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_012>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_013>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_014>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_015>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_016>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_017>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_018>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_019>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_020>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_021>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_022>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_023>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_024>
 r typeinfo name for OverlayInterfaceRegistration<CVROverlay_025>
 r typeinfo name for OverlayViewInterfaceRegistration<CVROverlayView_001>
 r typeinfo name for OverlayViewInterfaceRegistration<CVROverlayView_002>
 r typeinfo name for ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#1}
 r typeinfo name for ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#2}
 r typeinfo name for ProcessDpadBindings(unsigned int, XrBindingModificationsKHR const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, SuggestedBinding*, std::vector<unsigned long, std::allocator<unsigned long> >&)::{lambda(XrInteractionProfileDpadBindingEXT const*)#1}
 r typeinfo name for Reflection::Detail::ToBaseT<CBoneMaskResource, CAnimResource>
 r typeinfo name for Reflection::Detail::ToBaseT<CKeyframedDataResource, CAnimResource>
 r typeinfo name for Reflection::Detail::ToBase_t
 r typeinfo name for Reflection::Detail::TypeInfoT<CAnimResource>
 r typeinfo name for Reflection::Detail::TypeInfoT<CBoneMaskResource>
 r typeinfo name for Reflection::Detail::TypeInfoT<CKeyframedDataResource>
 r typeinfo name for Reflection::Detail::TypeInfoT<Reflection::Object>
 r typeinfo name for Reflection::Object
 r typeinfo name for Reflection::TypeInfo
 r typeinfo name for RenderModelsInterfaceRegistration<CVRRenderModels_001>
 r typeinfo name for RenderModelsInterfaceRegistration<CVRRenderModels_002>
 r typeinfo name for RenderModelsInterfaceRegistration<CVRRenderModels_003>
 r typeinfo name for RenderModelsInterfaceRegistration<CVRRenderModels_004>
 r typeinfo name for RenderModelsInterfaceRegistration<CVRRenderModels_005>
 r typeinfo name for ScreenshotsInterfaceRegistration<CVRScreenshots_001>
 r typeinfo name for SettingsInterfaceRegistration<CVRSettings_001>
 r typeinfo name for SettingsInterfaceRegistration<CVRSettings_002>
 r typeinfo name for SteamPrivateInterfaceRegistration<CVRSteamPrivate_001>
 r typeinfo name for SteamPrivateInterfaceRegistration<CVRSteamPrivate_002>
 r typeinfo name for SteamThreadTools::CThread
 r typeinfo name for SystemInterfaceRegistration<CHmdSystem_001>
 r typeinfo name for SystemInterfaceRegistration<CHmdSystem_004>
 r typeinfo name for SystemInterfaceRegistration<CVRClientCore_001>
 r typeinfo name for SystemInterfaceRegistration<CVRClientCore_002>
 r typeinfo name for SystemInterfaceRegistration<IHmdSystem_002>
 r typeinfo name for SystemInterfaceRegistration<IHmdSystem_003>
 r typeinfo name for TrackedCameraInterfaceRegistration<CVRTrackedCamera_002>
 r typeinfo name for TrackedCameraInterfaceRegistration<CVRTrackedCamera_003>
 r typeinfo name for TrackedCameraInterfaceRegistration<CVRTrackedCamera_004>
 r typeinfo name for TrackedCameraInterfaceRegistration<CVRTrackedCamera_005>
 r typeinfo name for TrackedDeviceAdapterBaseNoParent<ITrackedDeviceServerDriver_004, CVRTrackedDevice_004>
 r typeinfo name for TrackedDeviceAdapterBaseWithParent<vr::ITrackedDeviceServerDriver, CVRTrackedDevice_Latest, CVRTrackedDevice_004>
 r typeinfo name for VRRenderer::BlendStateBase
 r typeinfo name for VRRenderer::ConstantBufferBase
 r typeinfo name for VRRenderer::DepthStencilStateBase
 r typeinfo name for VRRenderer::EventQueryBase
 r typeinfo name for VRRenderer::GPUCountingSemaphoreBase
 r typeinfo name for VRRenderer::GPUSemaphoreBase
 r typeinfo name for VRRenderer::IndexBufferBase
 r typeinfo name for VRRenderer::RasterizerStateBase
 r typeinfo name for VRRenderer::SamplerBase
 r typeinfo name for VRRenderer::TextureBase
 r typeinfo name for VRRenderer::VertexBufferBase
 r typeinfo name for VulkanVRRenderer::BlendState
 r typeinfo name for VulkanVRRenderer::ConstantBuffer
 r typeinfo name for VulkanVRRenderer::DepthStencilState
 r typeinfo name for VulkanVRRenderer::EventQuery
 r typeinfo name for VulkanVRRenderer::GPUCountingSemaphore
 r typeinfo name for VulkanVRRenderer::GPUSemaphore
 r typeinfo name for VulkanVRRenderer::IndexBuffer
 r typeinfo name for VulkanVRRenderer::RasterizerState
 r typeinfo name for VulkanVRRenderer::Sampler
 r typeinfo name for VulkanVRRenderer::Texture
 r typeinfo name for VulkanVRRenderer::VertexBuffer
 r typeinfo name for WatchdogHost<CVRWatchdogHost_001>
 r typeinfo name for XrActionSet_T
 r typeinfo name for XrActionSet_T*
 r typeinfo name for XrAction_T
 r typeinfo name for XrAction_T*
 r typeinfo name for XrHandTrackerEXT_T
 r typeinfo name for XrHandTrackerEXT_T*
 r typeinfo name for XrInstance_T
 r typeinfo name for XrInstance_T*
 r typeinfo name for XrSession_T
 r typeinfo name for XrSession_T*
 r typeinfo name for XrSpace_T
 r typeinfo name for XrSpace_T*
 r typeinfo name for XrSwapchain_T
 r typeinfo name for XrSwapchain_T*
 r typeinfo name for facet::CVkInteropDeviceNull
 r typeinfo name for facet::CVkInteropImageNull
 r typeinfo name for facet::CVkTimestampQueryPool<2u>
 r typeinfo name for facet::CVkTimestampQueryPoolBase
 r typeinfo name for facet::IFramerateGovernor
 r typeinfo name for facet::IVkInteropDevice
 r typeinfo name for facet::IVkInteropImage
 r typeinfo name for gli::texture
 r typeinfo name for nlohmann::detail::exception
 r typeinfo name for nlohmann::detail::input_adapter_protocol
 r typeinfo name for nlohmann::detail::input_buffer_adapter
 r typeinfo name for nlohmann::detail::invalid_iterator
 r typeinfo name for nlohmann::detail::other_error
 r typeinfo name for nlohmann::detail::out_of_range
 r typeinfo name for nlohmann::detail::output_adapter_protocol<char>
 r typeinfo name for nlohmann::detail::output_string_adapter<char, std::string>
 r typeinfo name for nlohmann::detail::parse_error
 r typeinfo name for nlohmann::detail::type_error
 r typeinfo name for std::_Bind<void (CVRMailbox::*(CVRMailbox*, std::_Placeholder<1>))(Json::Value const&)>
 r typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CBlockQueue, std::allocator<CBlockQueue>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CInputActionSet, std::allocator<CInputActionSet>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CRenderModelManager::ModelInfo_t, std::allocator<CRenderModelManager::ModelInfo_t>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CSharedResourceBaseLinux::CSharedResourceData, std::allocator<CSharedResourceBaseLinux::CSharedResourceData>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CSimulatedTrackpadClick, std::allocator<CSimulatedTrackpadClick>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CSimulatedTriggerPull, std::allocator<CSimulatedTriggerPull>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CVRCompositorSharedTextures::CVulkanFence, std::allocator<CVRCompositorSharedTextures::CVulkanFence>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<CVRInputLatest::InputFrame_t, std::allocator<CVRInputLatest::InputFrame_t>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<InputConfig_t, std::allocator<InputConfig_t>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<VcetJob, std::allocator<VcetJob>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<gli::storage_linear, std::allocator<gli::storage_linear>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<nlohmann::detail::input_buffer_adapter, std::allocator<nlohmann::detail::input_buffer_adapter>, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<nlohmann::detail::output_string_adapter<char, std::string>, std::allocator<nlohmann::detail::output_string_adapter<char, std::string> >, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>
 r typeinfo name for std::_Sp_make_shared_tag
 r typeinfo name for std::_Weak_result_type<void (CVRMailbox::*)(Json::Value const&)>
 r typeinfo name for std::_Weak_result_type_memfun<void (CVRMailbox::*)(Json::Value const&), true>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, false>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, true>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, false>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, true>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, false>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, true>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, false>
 r typeinfo name for std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, true>
 r typeinfo name for std::__detail::_BracketMatcher<std::regex_traits<char>, false, false>
 r typeinfo name for std::__detail::_BracketMatcher<std::regex_traits<char>, false, true>
 r typeinfo name for std::__detail::_BracketMatcher<std::regex_traits<char>, true, false>
 r typeinfo name for std::__detail::_BracketMatcher<std::regex_traits<char>, true, true>
 r typeinfo name for std::__detail::_CharMatcher<std::regex_traits<char>, false, false>
 r typeinfo name for std::__detail::_CharMatcher<std::regex_traits<char>, false, true>
 r typeinfo name for std::__detail::_CharMatcher<std::regex_traits<char>, true, false>
 r typeinfo name for std::__detail::_CharMatcher<std::regex_traits<char>, true, true>
 r typeinfo name for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 r typeinfo name for std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>
 r typeinfo name for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CThreadWatchdogManager::InitWatchdogs()::{lambda()#1}> > >
 r typeinfo name for sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)::{lambda(XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*)#1}
 r typeinfo name for sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)::{lambda(XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*)#1}
 r typeinfo name for sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)::{lambda(XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*)#1}
 r typeinfo name for sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)::{lambda(XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*)#1}
 r typeinfo name for sxr_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*)::{lambda(std::vector<XrView, std::allocator<XrView> >&)#1}
 r typeinfo name for sxr_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*)::{lambda(XrBindingModificationsKHR const*)#1}
 r typeinfo name for sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(XrActiveActionSetPrioritiesEXT const*)#1}
 r typeinfo name for tinyobj::MaterialFileReader
 r typeinfo name for tinyobj::MaterialReader
 r typeinfo name for vr::CVRApplicationsLatest
 r typeinfo name for vr::CVRNotificationsLatest
 r typeinfo name for vr::CVROverlayInternalLatest
 r typeinfo name for vr::CVRSettingsLatest
 r typeinfo name for vr::CVRSteamPrivateLatest
 r typeinfo name for vr::CVRTrackedCamera
 r typeinfo name for vr::ILiquidVR
 r typeinfo name for vr::IServerTrackedDeviceProvider
 r typeinfo name for vr::ITrackedDeviceServerDriver
 r typeinfo name for vr::IVRApplications
 r typeinfo name for vr::IVRApplicationsInternal
 r typeinfo name for vr::IVRBlockQueue
 r typeinfo name for vr::IVRCameraComponent
 r typeinfo name for vr::IVRChaperone
 r typeinfo name for vr::IVRChaperoneSetup
 r typeinfo name for vr::IVRClientCore
 r typeinfo name for vr::IVRCompositor
 r typeinfo name for vr::IVRCompositorPluginProvider
 r typeinfo name for vr::IVRCompositorSystemInternal
 r typeinfo name for vr::IVRControlPanel
 r typeinfo name for vr::IVRControllerComponent
 r typeinfo name for vr::IVRDebug
 r typeinfo name for vr::IVRDisplayComponent
 r typeinfo name for vr::IVRDriverContext
 r typeinfo name for vr::IVRDriverDirectInternal
 r typeinfo name for vr::IVRDriverDirectModeComponent
 r typeinfo name for vr::IVRDriverLog
 r typeinfo name for vr::IVRDriverManager
 r typeinfo name for vr::IVRExtendedDisplay
 r typeinfo name for vr::IVRExternalEventSource
 r typeinfo name for vr::IVRHeadsetView
 r typeinfo name for vr::IVRIOBuffer
 r typeinfo name for vr::IVRIPCResourceManagerClient
 r typeinfo name for vr::IVRInput
 r typeinfo name for vr::IVRInputInternal
 r typeinfo name for vr::IVRMCStore
 r typeinfo name for vr::IVRMailbox
 r typeinfo name for vr::IVRNotifications
 r typeinfo name for vr::IVROverlay
 r typeinfo name for vr::IVROverlayInternal
 r typeinfo name for vr::IVROverlayView
 r typeinfo name for vr::IVRPaths
 r typeinfo name for vr::IVRPathsInternal
 r typeinfo name for vr::IVRProperties
 r typeinfo name for vr::IVRPropertiesInternal
 r typeinfo name for vr::IVRRenderModels
 r typeinfo name for vr::IVRRenderModelsInternal
 r typeinfo name for vr::IVRResources
 r typeinfo name for vr::IVRResourcesInternal
 r typeinfo name for vr::IVRScreenshots
 r typeinfo name for vr::IVRSettings
 r typeinfo name for vr::IVRSettingsInternal
 r typeinfo name for vr::IVRSharedBuffer
 r typeinfo name for vr::IVRSharedCountingSemaphore
 r typeinfo name for vr::IVRSharedImage
 r typeinfo name for vr::IVRSharedResource
 r typeinfo name for vr::IVRSharedSemaphore
 r typeinfo name for vr::IVRSpatialAnchors
 r typeinfo name for vr::IVRSteamPrivate
 r typeinfo name for vr::IVRSystem
 r typeinfo name for vr::IVRTrackedCamera
 r typeinfo name for vr::IVRTrackedCameraInternal
 r typeinfo name for vr::IVRVirtualDisplay
 r typeinfo name for vr::IVRWatchdogHost
 r typeinfo name for vr::IVRWatchdogProvider
 r typeinfo name for vr::IXrProto
 read
 readdir
 readlink
 realloc
 realpath
 recv
 recvfrom
 recvmsg
 remove
 rename
 rewind
 rmdir
 scandir
 sched_get_priority_max
 sched_get_priority_min
 sched_getparam
 sched_getscheduler
 sched_setaffinity
 sched_setscheduler
 sched_yield
 semctl
 semget
 semop
 sendmsg
 sendto
 setenv
 setpgid
 setpriority
 setrlimit
 shm_open
 shm_unlink
 shutdown
 sigaction
 sincos
 sincosf
 sinf
 snprintf
 socket
 sprintf
 std::_Hash_bytes(void const*, unsigned long, unsigned long)
 std::_Rb_tree_decrement(std::_Rb_tree_node_base const*)
 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
 std::_Rb_tree_increment(std::_Rb_tree_node_base const*)
 std::_Rb_tree_increment(std::_Rb_tree_node_base*)
 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
 std::__basic_file<char>::is_open() const
 std::__basic_file<char>::~__basic_file()
 std::__codecvt_utf8_base<char32_t>::do_always_noconv() const
 std::__codecvt_utf8_base<char32_t>::do_encoding() const
 std::__codecvt_utf8_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const
 std::__codecvt_utf8_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
 std::__codecvt_utf8_base<char32_t>::do_max_length() const
 std::__codecvt_utf8_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const
 std::__codecvt_utf8_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
 std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()
 std::__codecvt_utf8_base<wchar_t>::do_always_noconv() const
 std::__codecvt_utf8_base<wchar_t>::do_encoding() const
 std::__codecvt_utf8_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
 std::__codecvt_utf8_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
 std::__codecvt_utf8_base<wchar_t>::do_max_length() const
 std::__codecvt_utf8_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
 std::__codecvt_utf8_base<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
 std::__codecvt_utf8_base<wchar_t>::~__codecvt_utf8_base()
 std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)
 std::__detail::_List_node_base::_M_unhook()
 std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned long, unsigned long, unsigned long) const
 std::__detail::_Prime_rehash_policy::_M_next_bkt(unsigned long) const
 std::__throw_bad_alloc()
 std::__throw_bad_cast()
 std::__throw_bad_function_call()
 std::__throw_invalid_argument(char const*)
 std::__throw_length_error(char const*)
 std::__throw_logic_error(char const*)
 std::__throw_out_of_range(char const*)
 std::__throw_out_of_range_fmt(char const*, ...)
 std::__throw_range_error(char const*)
 std::__throw_regex_error(std::regex_constants::error_type)
 std::__throw_system_error(int)
 std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()
 std::basic_filebuf<char, std::char_traits<char> >::close()
 std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)
 std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()
 std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()
 std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
 std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)
 std::basic_iostream<char, std::char_traits<char> >::~basic_iostream()
 std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)
 std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()
 std::basic_ofstream<char, std::char_traits<char> >::basic_ofstream(char const*, std::_Ios_Openmode)
 std::basic_ofstream<char, std::char_traits<char> >::~basic_ofstream()
 std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
 std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
 std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_ostringstream()
 std::basic_streambuf<char, std::char_traits<char> >::imbue(std::locale const&)
 std::basic_streambuf<char, std::char_traits<char> >::overflow(int)
 std::basic_streambuf<char, std::char_traits<char> >::pbackfail(int)
 std::basic_streambuf<char, std::char_traits<char> >::seekoff(long, std::_Ios_Seekdir, std::_Ios_Openmode)
 std::basic_streambuf<char, std::char_traits<char> >::seekpos(std::fpos<__mbstate_t>, std::_Ios_Openmode)
 std::basic_streambuf<char, std::char_traits<char> >::setbuf(char*, long)
 std::basic_streambuf<char, std::char_traits<char> >::showmanyc()
 std::basic_streambuf<char, std::char_traits<char> >::sync()
 std::basic_streambuf<char, std::char_traits<char> >::uflow()
 std::basic_streambuf<char, std::char_traits<char> >::underflow()
 std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, long)
 std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_leak_hard()
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_destroy(std::allocator<wchar_t> const&)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_empty_rep_storage
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::allocator<wchar_t> const&)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long, wchar_t)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_string()
 std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)
 std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::str() const
 std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::basic_stringstream()
 std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_stringstream()
 std::cerr
 std::chrono::_V2::steady_clock::now()
 std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)
 std::collate<char> const& std::use_facet<std::collate<char> >(std::locale const&)
 std::condition_variable::condition_variable()
 std::condition_variable::notify_one()
 std::condition_variable::~condition_variable()
 std::cout
 std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)
 std::ctype<char>::_M_widen_init() const
 std::ctype<char>::id
 std::exception::~exception()
 std::ios_base::Init::Init()
 std::ios_base::Init::~Init()
 std::ios_base::ios_base()
 std::ios_base::~ios_base()
 std::istream& std::istream::_M_extract<double>(double&)
 std::istream& std::istream::_M_extract<long>(long&)
 std::istream::getline(char*, long, char)
 std::istream::peek()
 std::istream::read(char*, long)
 std::istream::seekg(long, std::_Ios_Seekdir)
 std::istream::tellg()
 std::locale::id::_M_id() const
 std::locale::locale()
 std::locale::locale(std::locale const&)
 std::locale::operator=(std::locale const&)
 std::locale::~locale()
 std::ostream& std::ostream::_M_insert<double>(double)
 std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)
 std::ostream::flush()
 std::ostream::operator<<(int)
 std::ostream::operator<<(std::basic_streambuf<char, std::char_traits<char> >*)
 std::ostream::put(char)
 std::ostream::write(char const*, long)
 std::regex_error::~regex_error()
 std::runtime_error::runtime_error(char const*)
 std::runtime_error::what() const
 std::runtime_error::~runtime_error()
 std::string::_M_iend() const
 std::string::_M_leak()
 std::string::_M_leak_hard()
 std::string::_M_mutate(unsigned long, unsigned long, unsigned long)
 std::string::_M_replace_aux(unsigned long, unsigned long, unsigned long, char)
 std::string::_Rep::_M_destroy(std::allocator<char> const&)
 std::string::_Rep::_M_set_length_and_sharable(unsigned long)
 std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)
 std::string::_Rep::_S_empty_rep_storage
 std::string::_S_copy_chars(char*, char*, char*)
 std::string::append(char const*)
 std::string::append(char const*, unsigned long)
 std::string::append(std::string const&)
 std::string::append(std::string const&, unsigned long, unsigned long)
 std::string::append(unsigned long, char)
 std::string::assign(char const*)
 std::string::assign(char const*, unsigned long)
 std::string::assign(std::string const&)
 std::string::at(unsigned long) const
 std::string::begin()
 std::string::clear()
 std::string::compare(char const*) const
 std::string::compare(std::string const&) const
 std::string::compare(unsigned long, unsigned long, std::string const&) const
 std::string::end()
 std::string::erase(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>)
 std::string::erase(unsigned long, unsigned long)
 std::string::find(char const*, unsigned long) const
 std::string::find(char const*, unsigned long, unsigned long) const
 std::string::find(char, unsigned long) const
 std::string::find(std::string const&, unsigned long) const
 std::string::find_first_not_of(char const*, unsigned long) const
 std::string::find_first_of(char const*, unsigned long) const
 std::string::find_last_not_of(char const*, unsigned long, unsigned long) const
 std::string::find_last_of(char const*, unsigned long, unsigned long) const
 std::string::insert(unsigned long, char const*)
 std::string::insert(unsigned long, char const*, unsigned long)
 std::string::insert(unsigned long, std::string const&)
 std::string::operator+=(char const*)
 std::string::operator+=(std::string const&)
 std::string::operator=(char const*)
 std::string::operator=(std::string const&)
 std::string::push_back(char)
 std::string::replace(__gnu_cxx::__normal_iterator<char*, std::string>, __gnu_cxx::__normal_iterator<char*, std::string>, char const*, char const*)
 std::string::replace(unsigned long, unsigned long, char const*, unsigned long)
 std::string::reserve(unsigned long)
 std::string::resize(unsigned long)
 std::string::resize(unsigned long, char)
 std::string::rfind(char, unsigned long) const
 std::string::substr(unsigned long, unsigned long) const
 std::string::swap(std::string&)
 std::terminate()
 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())
 std::thread::_State::~_State()
 std::thread::join()
 stderr
 strcasecmp
 strchr
 strcmp
 strcpy
 strcspn
 strerror
 strftime
 strlen
 strncasecmp
 strncat
 strncmp
 strncpy
 strpbrk
 strrchr
 strspn
 strstr
 strtod
 strtof
 strtok
 strtol
 strtoll
 strtoul
 strtoull
 symlink
 syscall
 sysconf
 system
 t (anonymous namespace)::From(Compositor_OverlaySettings_004 const&, vr::IVRCompositor*) [clone .constprop.0]
 t (anonymous namespace)::GetChildPathHandle(unsigned long*, unsigned long*, char const*, Json::Value const&, vr::IVRPaths*)
 t (anonymous namespace)::GetChildPathHandle(unsigned long*, unsigned long*, char const*, Json::Value const&, vr::IVRPaths*) [clone .cold]
 t (anonymous namespace)::GetChildVector2d(double*, char const*, Json::Value const&)
 t (anonymous namespace)::GetChildVector3d(vr::HmdVector3d_t*, char const*, Json::Value const&) [clone .part.0]
 t (anonymous namespace)::ValidBounds(vr::VRTextureBounds_t const*) [clone .isra.0]
 t (anonymous namespace)::protobuf_RegisterTypes(std::string const&)
 t (anonymous namespace)::protobuf_RegisterTypes(std::string const&) [clone .cold]
 t ActionDirectionNameToEnum(std::string const&)
 t ActionScopeNameToEnum(std::string const&)
 t ActionTypeNameToEnum(std::string const&)
 t AddDpadPaths(std::string, std::string, std::string, bool, std::vector<std::string, std::allocator<std::string> >&)
 t AddDpadPaths(std::string, std::string, std::string, bool, std::vector<std::string, std::allocator<std::string> >&) [clone .cold]
 t AddLegalInteractionProfile(char const*, std::vector<InteractionProfileInput_t, std::allocator<InteractionProfileInput_t> >)
 t AddLegalInteractionProfile(char const*, std::vector<InteractionProfileInput_t, std::allocator<InteractionProfileInput_t> >) [clone .cold]
 t AddLegalInteractionProfiles()
 t AddLegalInteractionProfiles() [clone .cold]
 t AddOverlayToResult(vr::DashboardOverlayState_t*, unsigned int, unsigned long, unsigned long, unsigned int&)
 t AddPathHandleToJson(Json::Value*, std::string const&, unsigned long)
 t AddPathHandleToJson(Json::Value*, std::string const&, unsigned long) [clone .cold]
 t AddPullHandlerForPathIfSupported(std::string const&, std::vector<std::string, std::allocator<std::string> >*)
 t AddPullHandlerForPathIfSupported(std::string const&, std::vector<std::string, std::allocator<std::string> >*) [clone .cold]
 t AnimUtils::AngleAboutAxis(VectorAligned const&, VectorAligned const&, VectorAligned const&)
 t AnimUtils::AngleBetweenVectors(VectorAligned const&, VectorAligned const&)
 t AnimUtils::Blend(float, BlendSettings_t const&)
 t AnimUtils::Blend(float, EBlendType, float)
 t AnimUtils::Blend2Poses(CPoseRecipe&, unsigned char, unsigned char, float)
 t AnimUtils::ChangeRange(float, float, float, float, float)
 t AnimUtils::CloseEnough(float, float, float)
 t AnimUtils::ConvertFromGLTF(CTransform const&)
 t AnimUtils::FromEulerAngles(vr::HmdVector3_t const&)
 t AnimUtils::GetBarycentricCoords2D(vr::HmdVector2_t const&, vr::HmdVector2_t const&, vr::HmdVector2_t const&, vr::HmdVector2_t const&, float*)
 t AnimUtils::GetBias(float, float)
 t AnimUtils::GetButtonStatus(unsigned long, unsigned long, vr::EVRButtonId)
 t AnimUtils::GetGain(float, float)
 t AnimUtils::RotationAboutAxis(VectorAligned const&, VectorAligned const&, VectorAligned const&)
 t AnimUtils::RotationBetweenVectors(VectorAligned const&, VectorAligned const&)
 t AnimUtils::ToEulerAngles(QuaternionAligned const&)
 t AnimUtils::UpdateCycle(float, float, float, float, bool)
 t AnimUtils::UpdateCycle(float, float, float, float, bool, int&, float&)
 t ApplicationsInterfaceRegistration<CVRApplications_001>::GetInterface()
 t ApplicationsInterfaceRegistration<CVRApplications_001>::~ApplicationsInterfaceRegistration()
 t ApplicationsInterfaceRegistration<CVRApplications_002>::GetInterface()
 t ApplicationsInterfaceRegistration<CVRApplications_002>::~ApplicationsInterfaceRegistration()
 t ApplicationsInterfaceRegistration<CVRApplications_003>::GetInterface()
 t ApplicationsInterfaceRegistration<CVRApplications_003>::~ApplicationsInterfaceRegistration()
 t ApplicationsInterfaceRegistration<CVRApplications_004>::GetInterface()
 t ApplicationsInterfaceRegistration<CVRApplications_004>::~ApplicationsInterfaceRegistration()
 t ApplicationsInterfaceRegistration<CVRApplications_005>::GetInterface()
 t ApplicationsInterfaceRegistration<CVRApplications_005>::~ApplicationsInterfaceRegistration()
 t ApplicationsInterfaceRegistration<CVRApplications_006>::GetInterface()
 t ApplicationsInterfaceRegistration<CVRApplications_006>::~ApplicationsInterfaceRegistration()
 t ApplyTransformToPose(vr::HmdMatrix34_t&, vr::HmdVector3_t&, vr::HmdVector3_t&, vr::HmdMatrix34_t const&, vr::HmdVector3_t const&, vr::HmdVector3_t const&, vr::HmdMatrix34_t const&)
 t AssertCallbackImplementation(char const*, char const*, unsigned int, bool, void*, bool*)
 t AssertCallbackImplementation(char const*, char const*, unsigned int, bool, void*, bool*) [clone .cold]
 t BCheckParentOverlayVisible_Recursive(unsigned long, VRSystemLayerState_t const*, int)
 t BCreateDirectory(char const*)
 t BCreateDirectoryRecursive(char const*)
 t BCreateDirectoryRecursive(char const*) [clone .cold]
 t BCreateProcess(char const*, char const**, unsigned int*, bool, std::string*)
 t BCreateProcess(char const*, char const**, unsigned int*, bool, std::string*) [clone .part.0]
 t BCreateProcess(std::string const&, std::string const&, std::string, unsigned int*, bool, std::string*)
 t BCreateProcess(std::string const&, std::string const&, std::string, unsigned int*, bool, std::string*) [clone .cold]
 t BCreateProcess(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::string, unsigned int*, bool, std::string*)
 t BCreateProcess(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, std::string, unsigned int*, bool, std::string*) [clone .cold]
 t BDeleteFileIfExists(char const*)
 t BFileExists(char const*)
 t BGetOutputDevice(VkInstance_T*, VkPhysicalDevice_T**)
 t BInitVulkanDevice(VkPhysicalDevice_T*, char const*, unsigned int, VkDevice_T**, VkQueue_T**, unsigned int*)
 t BInitVulkanDevice(VkPhysicalDevice_T*, char const*, unsigned int, VkDevice_T**, VkQueue_T**, unsigned int*) [clone .cold]
 t BInitVulkanInstance(char const*, unsigned int, VkInstance_T**)
 t BInitVulkanInstance(char const*, unsigned int, VkInstance_T**) [clone .cold]
 t BIsCrashReportingDisabled()
 t BIsCrashReportingDisabled() [clone .cold]
 t BIsPidPresent(unsigned short, unsigned short)
 t BIsTrackedDevicePropertyMandantory(vr::ETrackedDeviceProperty)
 t BIsTrackedDevicePropertyMandantory(vr::ETrackedDeviceProperty) [clone .cold]
 t BIsValidInputForChord(std::string const&, std::string const&)
 t BIsVidPresent(unsigned short)
 t BIsWorkshopBindingUri(std::string const&)
 t BIsWorkshopBindingUri(std::string const&) [clone .cold]
 t BKillProcess(char const*, bool)
 t BKillProcess(char const*, bool) [clone .cold]
 t BKillProcess(unsigned int)
 t BOSAssociateExtension(char const*, char const*, char const*, char const*)
 t BOSAssociateExtension(char const*, char const*, char const*, char const*) [clone .cold]
 t BOSAssociateURI(char const*, char const*)
 t BOSAssociateURI(char const*, char const*) [clone .cold]
 t BOSRelease(void**)
 t BOSSafeRelease(void**)
 t BPathSupportsInputOfType(std::string const&, EInputValueType)
 t BProcessRunning(char const*, bool)
 t BProcessRunning(char const*, bool) [clone .cold]
 t BProcessRunning(unsigned int)
 t BRealtimeProcess()
 t BRenameFile(char const*, char const*)
 t BSharedResourceNamespaceAvailable()
 t BSharedResourceNamespaceAvailable() [clone .cold]
 t BSharedResourceNamespaceInTestMode()
 t BSharedResourceNamespaceTryOneInit()
 t BindingAutosaveSettingsKey(std::string const&, EActionBindingCategory)
 t BindingAutosaveSettingsKey(std::string const&, EActionBindingCategory) [clone .cold]
 t BindingCurrentKey(std::string const&, EActionBindingCategory)
 t BindingCurrentKey(std::string const&, EActionBindingCategory) [clone .cold]
 t BindingNeedUploadKey(std::string const&, EActionBindingCategory)
 t BindingNeedUploadKey(std::string const&, EActionBindingCategory) [clone .cold]
 t BindingPreviousKey(std::string const&, EActionBindingCategory)
 t BindingPreviousKey(std::string const&, EActionBindingCategory) [clone .cold]
 t BindingURIToFileId(std::string const&)
 t BindingURIToFileId(std::string const&) [clone .cold]
 t BlockQueueInterfaceRegistration<CVRBlockQueue_001>::GetInterface()
 t BlockQueueInterfaceRegistration<CVRBlockQueue_001>::~BlockQueueInterfaceRegistration()
 t BlockQueueInterfaceRegistration<CVRBlockQueue_002>::GetInterface()
 t BlockQueueInterfaceRegistration<CVRBlockQueue_002>::~BlockQueueInterfaceRegistration()
 t BlockQueueInterfaceRegistration<CVRBlockQueue_003>::GetInterface()
 t BlockQueueInterfaceRegistration<CVRBlockQueue_003>::~BlockQueueInterfaceRegistration()
 t BlockQueueInterfaceRegistration<CVRBlockQueue_004>::GetInterface()
 t BlockQueueInterfaceRegistration<CVRBlockQueue_004>::~BlockQueueInterfaceRegistration()
 t BuildActionManifestForActionSets(std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > const&)
 t BuildActionManifestForActionSets(std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > const&) [clone .cold]
 t BuildFadeGridMessage(float, bool)
 t BuildFadeGridMessage(float, bool) [clone .cold]
 t BuildFadeToColorRequest(float, vr::HmdColor_t const&, FadeType)
 t BuildFadeToColorRequest(float, vr::HmdColor_t const&, FadeType) [clone .cold]
 t BuildMatTextureDetails(float (*) [4][4], vr::ESpatialEncodeMode, vr::HmdVector4_t const&, vr::HmdVector4_t const&, vr::VRTextureBounds_t const&, unsigned int)
 t CActionBinding::CActionBinding(CActionBinding const&)
 t CActionBinding::FromJson(Json::Value const&, std::string*)
 t CActionBinding::FromJson(Json::Value const&, std::string*) [clone .cold]
 t CActionBinding::~CActionBinding()
 t CActionBindingConfig::FromJson(Json::Value const&, Json::Value const&, CInputActionManifest const&, vr::ETrackedControllerRole, std::string*)
 t CActionBindingConfig::FromJson(Json::Value const&, Json::Value const&, CInputActionManifest const&, vr::ETrackedControllerRole, std::string*) [clone .cold]
 t CActionBindingConfig::HasControllerType(std::string const&) const
 t CActionBindingConfig::~CActionBindingConfig()
 t CActionBindingConfigGenerator::AddBindingForDigitalMode(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*, std::string, bool)
 t CActionBindingConfigGenerator::AddBindingForDigitalMode(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*, std::string, bool) [clone .cold]
 t CActionBindingConfigGenerator::AddBindingForSlot(Mode_t&, ModeSlot_t&, std::vector<std::string, std::allocator<std::string> > const&)
 t CActionBindingConfigGenerator::AddBindingForSlot(Mode_t&, ModeSlot_t&, std::vector<std::string, std::allocator<std::string> > const&) [clone .cold]
 t CActionBindingConfigGenerator::AddClickHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*, bool)
 t CActionBindingConfigGenerator::AddClickHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*, bool) [clone .cold]
 t CActionBindingConfigGenerator::AddFilter(Mode_t const&, ModeSlot_t const&, CActionFilter&)
 t CActionBindingConfigGenerator::AddFilter(Mode_t const&, ModeSlot_t const&, CActionFilter&) [clone .cold]
 t CActionBindingConfigGenerator::AddHapticPulseToInput(std::string const&, Mode_t const&, ModeSlot_t const&, float)
 t CActionBindingConfigGenerator::AddHapticPulseToInput(std::string const&, Mode_t const&, ModeSlot_t const&, float) [clone .cold]
 t CActionBindingConfigGenerator::AddPositionHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*)
 t CActionBindingConfigGenerator::AddPositionHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*) [clone .cold]
 t CActionBindingConfigGenerator::AddProgressIndicator(std::string const&, std::string const&, std::string const&)
 t CActionBindingConfigGenerator::AddProgressIndicator(std::string const&, std::string const&, std::string const&) [clone .cold]
 t CActionBindingConfigGenerator::AddSlot(std::vector<ModeSlot_t, std::allocator<ModeSlot_t> >*, std::string const&, std::string const&, bool)
 t CActionBindingConfigGenerator::AddSlot(std::vector<ModeSlot_t, std::allocator<ModeSlot_t> >*, std::string const&, std::string const&, bool) [clone .cold]
 t CActionBindingConfigGenerator::AddTouchHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*)
 t CActionBindingConfigGenerator::AddTouchHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*) [clone .cold]
 t CActionBindingConfigGenerator::Apply(CActionBindingConfig*, std::string*)
 t CActionBindingConfigGenerator::Apply(CActionBindingConfig*, std::string*) [clone .cold]
 t CActionBindingConfigGenerator::ComputeClickHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::string*)
 t CActionBindingConfigGenerator::ComputeClickHandlerForPathIfSupported(Mode_t const&, ModeSlot_t const&, std::string*) [clone .cold]
 t CActionBindingConfigGenerator::DetermineSourceNodeForModeAndInputType(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*)
 t CActionBindingConfigGenerator::DetermineSourceNodeForModeAndInputType(Mode_t const&, ModeSlot_t const&, std::vector<std::string, std::allocator<std::string> >*) [clone .cold]
 t CActionBindingConfigGenerator::FilterInputSourceName(std::string const&)
 t CActionBindingConfigGenerator::FilterInputSourceName(std::string const&) [clone .cold]
 t CActionBindingConfigGenerator::FindHapticForInput(std::string const&)
 t CActionBindingConfigGenerator::FindHapticForInput(std::string const&) [clone .cold]
 t CActionBindingConfigGenerator::FindInputSourcesOfType(std::string const&)
 t CActionBindingConfigGenerator::FindInputSourcesOfType(std::string const&) [clone .cold]
 t CActionBindingConfigGenerator::FinishClickHandler(Mode_t const&, ModeSlot_t const&, std::string, float)
 t CActionBindingConfigGenerator::FinishClickHandler(Mode_t const&, ModeSlot_t const&, std::string, float) [clone .cold]
 t CActionBindingConfigGenerator::GetInputSource(std::string const&)
 t CActionBindingConfigGenerator::GetInputSourceType(std::string const&)
 t CActionBindingConfigGenerator::GetInputSourceType(std::string const&) [clone .cold]
 t CActionBindingConfigGenerator::GetOptionBool(std::string const&) const
 t CActionBindingConfigGenerator::HasFilter(std::string const&)
 t CActionBindingConfigGenerator::MakeInvertFilterForScalarInput(std::string const&, std::string const&, std::string const&, Mode_t const&)
 t CActionBindingConfigGenerator::MakeInvertFilterForScalarInput(std::string const&, std::string const&, std::string const&, Mode_t const&) [clone .cold]
 t CActionBindingConfigGenerator::MakeThreshHoldFilterForPositionInput(Mode_t const&, ModeSlot_t const&)
 t CActionBindingConfigGenerator::MakeThreshHoldFilterForPositionInput(Mode_t const&, ModeSlot_t const&) [clone .cold]
 t CActionBindingConfigGenerator::MakeThreshHoldFilterForScalarInput(std::string const&, Mode_t const&, ModeSlot_t const&)
 t CActionBindingConfigGenerator::MakeThreshHoldFilterForScalarInput(std::string const&, Mode_t const&, ModeSlot_t const&) [clone .cold]
 t CActionBindingConfigGenerator::MarkFilterForChords(Mode_t const&, ModeSlot_t const&, std::string const&)
 t CActionBindingConfigGenerator::MarkFilterForChords(Mode_t const&, ModeSlot_t const&, std::string const&) [clone .cold]
 t CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)
 t CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*) [clone .cold]
 t CActionBindingConfigGenerator::ParseHapticBindings(std::string const&, std::string*)
 t CActionBindingConfigGenerator::ParseHapticBindings(std::string const&, std::string*) [clone .cold]
 t CActionBindingConfigGenerator::ParseSimulatedActions(std::string*)
 t CActionBindingConfigGenerator::ParseSimulatedActions(std::string*) [clone .cold]
 t CActionBindingConfigGenerator::ParseSkeletonBindings(std::string const&, std::string*)
 t CActionBindingConfigGenerator::ParseSkeletonBindings(std::string const&, std::string*) [clone .cold]
 t CActionBindingConfigGenerator::PendingChordEntry_t* std::__uninitialized_copy<false>::__uninit_copy<CActionBindingConfigGenerator::PendingChordEntry_t const*, CActionBindingConfigGenerator::PendingChordEntry_t*>(CActionBindingConfigGenerator::PendingChordEntry_t const*, CActionBindingConfigGenerator::PendingChordEntry_t const*, CActionBindingConfigGenerator::PendingChordEntry_t*)
 t CActionBindingConfigGenerator::PendingChordEntry_t::PendingChordEntry_t(CActionBindingConfigGenerator::PendingChordEntry_t const&)
 t CActionBindingConfigGenerator::PendingChordEntry_t::~PendingChordEntry_t()
 t CActionBindingConfigGenerator::SortFilters()
 t CActionBindingConfigGenerator::SortFilters() [clone .cold]
 t CActionBindingConfigGenerator::VerifyCanAddBindingForDigitalMode(Mode_t const&, ModeSlot_t const&)
 t CActionBindingConfigGenerator::~CActionBindingConfigGenerator()
 t CActionBindingProgressIndicator::~CActionBindingProgressIndicator()
 t CActionFilter::CActionFilter()
 t CActionFilter::CActionFilter(CActionFilter const&)
 t CActionFilter::FromJson(Json::Value const&, std::string*)
 t CActionFilter::FromJson(Json::Value const&, std::string*) [clone .cold]
 t CActionFilter::GetBoolParameter(std::string const&, bool) const
 t CActionFilter::GetBoolParameter(std::string const&, bool) const [clone .cold]
 t CActionFilter::GetFloatParameter(std::string const&, float) const
 t CActionFilter::GetFloatParameter(std::string const&, float) const [clone .cold]
 t CActionFilter::GetIntParameter(std::string const&, int) const
 t CActionFilter::GetIntParameter(std::string const&, int) const [clone .cold]
 t CActionFilter::GetStringParameter(std::string const&, std::string const&) const
 t CActionFilter::GetStringParameter(std::string const&, std::string const&) const [clone .cold]
 t CActionFilter::~CActionFilter()
 t CAnimFactoryBase::CreateInternal(char const*, std::string const&) const
 t CAnimFactoryBase::CreateInternal(unsigned int, std::string const&) const
 t CAnimFactoryBase::GetDerivedIDFromBase(unsigned int) const
 t CAnimFactoryBase::GetTypeNames() const
 t CAnimFactoryBase::GetTypeNames() const [clone .cold]
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>::GetTypeID() const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>::GetTypeName() const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>::IsDerivedFrom(unsigned int) const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>::Make(std::string const&) const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CAnimSkeleton>::~CFactoryMakerT()
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>::GetTypeID() const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>::GetTypeName() const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>::IsDerivedFrom(unsigned int) const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>::Make(std::string const&) const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CBoneMaskResource>::~CFactoryMakerT()
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>::GetTypeID() const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>::GetTypeName() const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>::IsDerivedFrom(unsigned int) const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>::Make(std::string const&) const
 t CAnimFactoryBaseT<CAnimResource>::CFactoryMakerT<CKeyframedDataResource>::~CFactoryMakerT()
 t CAnimPose::AddRef() const
 t CAnimPose::CAnimPose()
 t CAnimPose::CalculateModelSpaceTransforms()
 t CAnimPose::CopyFrom(CSmartPtr<CAnimPose, CRefCountAccessor> const&)
 t CAnimPose::GetBoneCount() const
 t CAnimPose::GetLocalSpaceTransform(int) const
 t CAnimPose::GetLocalSpaceTransformsPtr() const
 t CAnimPose::GetModelSpaceTransform(int) const
 t CAnimPose::GetModelSpaceTransformsPtr() const
 t CAnimPose::GetRefCount() const
 t CAnimPose::GetSkeleton() const
 t CAnimPose::GetWritableLocalSpaceTransformsPtr()
 t CAnimPose::Init(CAnimSkeleton const*, CAnimPosePool*)
 t CAnimPose::InitToBindPose()
 t CAnimPose::InitToIdentity()
 t CAnimPose::Release() const
 t CAnimPose::SetDirtyRecurs(int)
 t CAnimPose::SetLocalSpaceTransform(int, CTransform const&)
 t CAnimPose::SetModelSpaceTransform(int, CTransform const&)
 t CAnimPose::~CAnimPose()
 t CAnimPosePool::AddNewBlock()
 t CAnimPosePool::AddNewBlock() [clone .cold]
 t CAnimPosePool::Alloc()
 t CAnimPosePool::CAnimPosePool(CAnimSkeleton const*, unsigned int)
 t CAnimPosePool::CAnimPosePool(CAnimSkeleton const*, unsigned int) [clone .cold]
 t CAnimPosePool::Free(CAnimPose*)
 t CAnimResource::CAnimResource(std::string const&)
 t CAnimResource::CastToBase(int)
 t CAnimResource::CastToBase(int) const
 t CAnimResource::GetResourceName() const
 t CAnimResource::GetTypeInfo() const
 t CAnimResource::MyTypeID()
 t CAnimResource::MyTypeInfo()
 t CAnimResourceFactory::CAnimResourceFactory()
 t CAnimResourceFactory::CAnimResourceFactory() [clone .cold]
 t CAnimResourceManager::CAnimResourceManager(vr::IVRResources*)
 t CAnimResourceManager::CAnimResourceManager(vr::IVRResources*) [clone .cold]
 t CAnimResourceManager::Get()
 t CAnimResourceManager::GetResource(char const*, char const*, int, char const*)
 t CAnimResourceManager::GetResource(char const*, char const*, int, char const*) [clone .cold]
 t CAnimResourceManager::GetSharedUpdateResources(CAnimSkeleton const*)
 t CAnimResourceManager::GetSharedUpdateResources(CAnimSkeleton const*) [clone .cold]
 t CAnimResourceManager::Initialize(vr::IVRResources*)
 t CAnimResourceManager::Initialize(vr::IVRResources*) [clone .cold]
 t CAnimResourceManager::IsInitialized()
 t CAnimResourceManager::Release()
 t CAnimSkeleton const* CAnimResourceManager::GetResource<CAnimSkeleton>(char const*)
 t CAnimSkeleton::CAnimSkeleton(std::string const&)
 t CAnimSkeleton::CAnimSkeleton(std::string const&) [clone .cold]
 t CAnimSkeleton::GetBindPoseLocalSpace(int) const
 t CAnimSkeleton::GetBindPoseModelSpace(int) const
 t CAnimSkeleton::GetBoneCount() const
 t CAnimSkeleton::GetBoneIndex(std::string const&) const
 t CAnimSkeleton::GetBoneName(int) const
 t CAnimSkeleton::GetChildCount(int) const
 t CAnimSkeleton::GetChildIndex(int, int) const
 t CAnimSkeleton::GetParentIndex(int) const
 t CAnimSkeleton::GetResourceTypeDir()
 t CAnimSkeleton::GetSkeletonID() const
 t CAnimSkeleton::Load(std::string const&)
 t CAnimSkeleton::Load(std::string const&) [clone .cold]
 t CAnimSkeleton::~CAnimSkeleton()
 t CAssert::AddCallback(CAssertCallback*)
 t CAssert::AddCallback(CAssertCallback*) [clone .cold]
 t CAssert::AssertMsgImpl(char const*, unsigned int, bool, unsigned int, ...)
 t CAssert::AssertMsgImpl(char const*, unsigned int, bool, unsigned int, ...) [clone .cold]
 t CAssert::GetInstance()
 t CAssert::GetInstance() [clone .cold]
 t CAssert::RemoveCallback(CAssertCallback*)
 t CAssertCallback::Initialize(std::function<void (char const*, char const*, unsigned int, bool, void*, bool*)>, void*)
 t CAssertCallback::Initialize(std::function<void (char const*, char const*, unsigned int, bool, void*, bool*)>, void*) [clone .cold]
 t CAssertCallback::~CAssertCallback()
 t CAutoLockAndDrainLogOnExit::~CAutoLockAndDrainLogOnExit()
 t CAutoRestoreEnvironment::CAutoRestoreEnvironment(std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > >)
 t CAutoRestoreEnvironment::~CAutoRestoreEnvironment()
 t CBitWriteMasksInit::CBitWriteMasksInit()
 t CBlendPoseOperation::BlendPoses(CPoseUpdateContext&, CSmartPtr<CAnimPose, CRefCountAccessor>*, float const*, int)
 t CBlendPoseOperation::BlendPoses(CPoseUpdateContext&, CSmartPtr<CAnimPose, CRefCountAccessor>*, float const*, int) [clone .cold]
 t CBlendPoseOperation::Evaluate(CPoseUpdateContext&, CBlendPoseOperation::OpSettings const*)
 t CBlendPoseOperation::Evaluate(CPoseUpdateContext&, CBlendPoseOperation::OpSettings const*) [clone .cold]
 t CBlendPoseOperation::MakeOpDescription(CPoseRecipe&, unsigned char const*, float const*, int)
 t CBlockQueue::AcquireReadOnlyBlock(unsigned long*, void const**, vr::EBlockQueueReadType)
 t CBlockQueue::AcquireReadOnlyBlock(unsigned long*, void const**, vr::EBlockQueueReadType) [clone .cold]
 t CBlockQueue::AcquireWriteOnlyBlock(unsigned long*, void**)
 t CBlockQueue::AcquireWriteOnlyBlock(unsigned long*, void**) [clone .cold]
 t CBlockQueue::BHasReader()
 t CBlockQueue::BHasReader() [clone .cold]
 t CBlockQueue::Connect(std::string const&)
 t CBlockQueue::Connect(std::string const&) [clone .cold]
 t CBlockQueue::Create(std::string const&, unsigned int, unsigned int, unsigned int, unsigned int)
 t CBlockQueue::Create(std::string const&, unsigned int, unsigned int, unsigned int, unsigned int) [clone .cold]
 t CBlockQueue::GetDataBlock(unsigned int)
 t CBlockQueue::GetFlags() const
 t CBlockQueue::GetHeaderBlock(unsigned int)
 t CBlockQueue::GetMetaContainerHandle()
 t CBlockQueue::RefreshReaderListIfNecessary(CBlockQueue::BlockQueueHeader_t const&)
 t CBlockQueue::RefreshReaderListIfNecessary(CBlockQueue::BlockQueueHeader_t const&) [clone .cold]
 t CBlockQueue::ReleaseReadOnlyBlock(unsigned long)
 t CBlockQueue::ReleaseReadOnlyBlock(unsigned long) [clone .cold]
 t CBlockQueue::ReleaseWriteOnlyBlock(unsigned long)
 t CBlockQueue::ReleaseWriteOnlyBlock(unsigned long) [clone .cold]
 t CBlockQueue::SignalAllReaders()
 t CBlockQueue::WaitAndAcquireReadOnlyBlock(unsigned long*, void const**, vr::EBlockQueueReadType, unsigned int)
 t CBlockQueue::WaitAndAcquireReadOnlyBlock(unsigned long*, void const**, vr::EBlockQueueReadType, unsigned int) [clone .part.0]
 t CBlockQueue::~CBlockQueue()
 t CBlockQueue::~CBlockQueue() [clone .cold]
 t CBoneMaskResource::CBoneMaskResource(std::string const&)
 t CBoneMaskResource::CastToBase(int)
 t CBoneMaskResource::CastToBase(int) const
 t CBoneMaskResource::GetResourceTypeDir()
 t CBoneMaskResource::GetTypeInfo() const
 t CBoneMaskResource::GetWeightCount() const
 t CBoneMaskResource::GetWeights() const
 t CBoneMaskResource::Load(std::string const&)
 t CBoneMaskResource::Load(std::string const&) [clone .cold]
 t CBoneMaskResource::MyTypeID()
 t CBoneMaskResource::MyTypeInfo()
 t CBoneMaskResource::~CBoneMaskResource()
 t CChaperoneFile::FindUniverse(unsigned long)
 t CChaperoneFile::FromJson(Json::Value const&)
 t CChaperoneFile::FromJson(Json::Value const&) [clone .cold]
 t CChaperoneFile::ToJson() const
 t CChaperoneFile::ToJson() const [clone .cold]
 t CChaperonePerimeter::AsPointVector() const
 t CChaperonePerimeter::AsPointVector() const [clone .cold]
 t CChaperonePerimeter::FromLegacyJson(Json::Value const&)
 t CChaperonePerimeter::FromLegacyJson(Json::Value const&) [clone .part.0]
 t CChaperonePerimeter::FromPointVector(std::vector<vr::HmdVector2_t, std::allocator<vr::HmdVector2_t> > const&, float)
 t CChaperonePerimeter::ToLegacyJson() const
 t CChaperonePerimeter::ToLegacyJson() const [clone .cold]
 t CChaperoneUniverse::FromJson(Json::Value const&)
 t CChaperoneUniverse::FromJson(Json::Value const&) [clone .cold]
 t CChaperoneUniverse::GetPlayAreaSize(vr::HmdVector2_t*) const
 t CChaperoneUniverse::GetSeatedOrigin(vr::HmdMatrix34_t*) const
 t CChaperoneUniverse::GetSetupStandingOrigin(vr::HmdMatrix34_t*) const
 t CChaperoneUniverse::GetStandingOrigin(vr::HmdMatrix34_t*) const
 t CChaperoneUniverse::HasSaneTrackingOrigin() const
 t CChaperoneUniverse::IsStandingOnly() const
 t CChaperoneUniverse::SetRawTrackingFromOrigin(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const&)
 t CChaperoneUniverse::SetSetupStandingOrigin(vr::HmdMatrix34_t const&)
 t CChaperoneUniverse::ToJson() const
 t CChaperoneUniverse::ToJson() const [clone .cold]
 t CChaperoneUniverse::UpdateSaveTime()
 t CChaperoneUniverse::WriteUniverseToPaths() const
 t CChaperoneUniverse::WriteUniverseToPaths() const [clone .cold]
 t CClientPropertyManager::BClientMode() const
 t CCompositorPluginProvider::InitInternal(vr::IVRDriverContext*)
 t CCompositorPluginProvider::InitInternal(vr::IVRDriverContext*) [clone .cold]
 t CCompositorPluginProvider_Latest::Cleanup()
 t CCompositorPluginProvider_Latest::GetComponent(char const*)
 t CCompositorPluginProvider_Latest::GetInterfaceVersions()
 t CCompositorPluginProvider_Latest::GetSourceVersion()
 t CCompositorPluginProvider_Latest::Init(vr::IVRDriverContext*)
 t CCompositorPluginProvider_Latest::~CCompositorPluginProvider_Latest()
 t CCountedMutexWithLogCache::Log(char const*, ...)
 t CCountedMutexWithLogCache::Log(char const*, ...) [clone .cold]
 t CDampedFloat::Update(float, float, float)
 t CDampedVector::Reset(VectorAligned const&)
 t CDampedVector::Update(VectorAligned const&, float, float)
 t CDirIterator::BCurrentIsDir() const
 t CDirIterator::BCurrentIsHidden() const
 t CDirIterator::BCurrentIsMarkedForArchive() const
 t CDirIterator::BCurrentIsReadOnly() const
 t CDirIterator::BCurrentIsSystem() const
 t CDirIterator::BNextFile()
 t CDirIterator::BValidFilename()
 t CDirIterator::CDirIterator(char const*, char const*)
 t CDirIterator::CDirIterator(char const*, char const*) [clone .cold]
 t CDirIterator::CurrentFileCreateTime() const
 t CDirIterator::CurrentFileLength() const
 t CDirIterator::CurrentFileName()
 t CDirIterator::CurrentFileWriteTime() const
 t CDirIterator::Init(std::string const&)
 t CDirIterator::IsValid() const
 t CDirIterator::~CDirIterator()
 t CDownsampleRenderer::Draw(vr::VRTextureBounds_t*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void*, void*, bool, bool, unsigned int)
 t CDownsampleRenderer::Draw(vr::VRTextureBounds_t*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, void*, void*, bool, bool, unsigned int) [clone .cold]
 t CDownsampleRenderer::GrowResolveTextureIfNeeded(int, int)
 t CDownsampleRenderer::GrowTempTextureIfNeeded(int, int)
 t CDownsampleRenderer::Initialize(IVRRenderer*)
 t CDownsampleRenderer::ReleaseResources()
 t CDownsampleRenderer::~CDownsampleRenderer()
 t CDriverDirectInternalClient::Cleanup()
 t CDriverDirectInternalClient::CreateSwapTextureSet(vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, vr::IVRDriverDirectInternal::SwapTextureSetInternal_t*)
 t CDriverDirectInternalClient::CreateSwapTextureSet(vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, vr::IVRDriverDirectInternal::SwapTextureSetInternal_t*) [clone .cold]
 t CDriverDirectInternalClient::DestroySwapTextureSet(unsigned long)
 t CDriverDirectInternalClient::DestroySwapTextureSet(unsigned long) [clone .cold]
 t CDriverDirectInternalClient::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t CDriverDirectInternalClient::GetFrameTiming(vr::DriverDirectMode_FrameTiming*) [clone .cold]
 t CDriverDirectInternalClient::GetNextLayerIndex(unsigned int, unsigned int (*) [2])
 t CDriverDirectInternalClient::GetNextLayerIndex(unsigned int, unsigned int (*) [2]) [clone .cold]
 t CDriverDirectInternalClient::Init(CVRClient*)
 t CDriverDirectInternalClient::Init(CVRClient*) [clone .cold]
 t CDriverDirectInternalClient::Present(unsigned long, unsigned int)
 t CDriverDirectInternalClient::Present(unsigned long, unsigned int) [clone .cold]
 t CDriverDirectInternalClient::SubmitLayer(unsigned int, vr::EVREye, vr::IVRDriverDirectModeComponent::SubmitLayerPerEye_t const&)
 t CDriverDirectInternalClient::SubmitLayer(unsigned int, vr::EVREye, vr::IVRDriverDirectModeComponent::SubmitLayerPerEye_t const&) [clone .cold]
 t CDriverDirectInternalClient::WaitForAcquire()
 t CDriverDirectInternalClient::WaitForPresent()
 t CDriverLog::Log(char const*)
 t CDriverManager::AddDriver(std::string const&, std::string const&)
 t CDriverManager::AddDriver(std::string const&, std::string const&) [clone .cold]
 t CDriverManager::AddServerDevice(unsigned int, void*, vr::ETrackedDeviceClass, std::string const&, unsigned int*)
 t CDriverManager::AddServerDevice(unsigned int, void*, vr::ETrackedDeviceClass, std::string const&, unsigned int*) [clone .cold]
 t CDriverManager::AllocateDeviceSlot(unsigned int, vr::ETrackedDeviceClass, unsigned int*)
 t CDriverManager::ApplyDriverResourceProperties(unsigned long)
 t CDriverManager::ApplyDriverResourceProperties(unsigned long) [clone .cold]
 t CDriverManager::AreAnyDriversBlockedForSafeMode() const
 t CDriverManager::BAlwaysActivateDriver(unsigned int)
 t CDriverManager::BCurrentlyActivating(unsigned int, unsigned int) const
 t CDriverManager::BGetGpuLuid(unsigned long*, unsigned int*) const
 t CDriverManager::BGetGpuLuid(unsigned long*, unsigned int*) const [clone .cold]
 t CDriverManager::BHasHmdServerDriver()
 t CDriverManager::BHmdDeviceMightBePresent(unsigned int)
 t CDriverManager::BIsSafeDriver(unsigned int) const
 t CDriverManager::BIsSafeDriverByName(std::string const&) const
 t CDriverManager::BOtherDeviceMightBePresent(unsigned int)
 t CDriverManager::BlockDriversForSafeMode(CSettingsManager*)
 t CDriverManager::BlockDriversForSafeMode(CSettingsManager*) [clone .cold]
 t CDriverManager::CDriverManager()
 t CDriverManager::CDriverManager() [clone .cold]
 t CDriverManager::Cleanup()
 t CDriverManager::CleanupDriver(CDriverManager::HmdDriver_t*)
 t CDriverManager::DeactivateAll()
 t CDriverManager::DriverDevice_t& std::vector<CDriverManager::DriverDevice_t, std::allocator<CDriverManager::DriverDevice_t> >::emplace_back<CDriverManager::DriverDevice_t>(CDriverManager::DriverDevice_t&&) [clone .isra.0]
 t CDriverManager::DriverDevice_t::FreeComponents()
 t CDriverManager::DriverDevice_t::InitComponentPointers()
 t CDriverManager::DriverDevice_t::PopulateComponents(std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CDriverManager::FindDriverByName(char const*)
 t CDriverManager::FindVirtualDisplayComponent(unsigned int) const
 t CDriverManager::GetCameraComponent(unsigned int) const
 t CDriverManager::GetDisplayComponent(unsigned int) const
 t CDriverManager::GetDriverContext(unsigned int)
 t CDriverManager::GetDriverCount() const
 t CDriverManager::GetDriverDirectModeComponent(unsigned int) const
 t CDriverManager::GetDriverHandle(char const*)
 t CDriverManager::GetDriverManifest(unsigned int)
 t CDriverManager::GetDriverName(unsigned int) const
 t CDriverManager::GetDriverName(unsigned int) const [clone .part.0]
 t CDriverManager::GetDriverName(unsigned int, char*, unsigned int)
 t CDriverManager::GetDriverPath(unsigned int)
 t CDriverManager::GetDriverPath(unsigned int, char*, unsigned int)
 t CDriverManager::GetForcedDriver() const
 t CDriverManager::GetHmdDriverId() const
 t CDriverManager::GetLoadPriority(unsigned int) const
 t CDriverManager::GetPropertyContainerForResourceKey(std::string const&)
 t CDriverManager::GetPropertyValueFromResourcesManifestJson(std::string const&, Json::Value const&, std::string const&, std::string const&, std::string&, int)
 t CDriverManager::GetPropertyValueFromResourcesManifestJson(std::string const&, Json::Value const&, std::string const&, std::string const&, std::string&, int) [clone .cold]
 t CDriverManager::GetResourceDefaultsPropertyContainer(std::string const&, std::string const&)
 t CDriverManager::GetResourceDefaultsPropertyContainer(std::string const&, std::string const&) [clone .cold]
 t CDriverManager::GetResourceMapKey(unsigned long)
 t CDriverManager::GetServerProvider(unsigned int)
 t CDriverManager::GetTrackedDevice(unsigned int) const
 t CDriverManager::GetTrackedDeviceDriverId(unsigned int) const
 t CDriverManager::GetVirtualDisplayComponent(unsigned int) const
 t CDriverManager::GetWatchdogProvider(unsigned int)
 t CDriverManager::HasLoadableDriver(unsigned int) const
 t CDriverManager::HmdDriver_t* std::__uninitialized_copy<false>::__uninit_copy<CDriverManager::HmdDriver_t const*, CDriverManager::HmdDriver_t*>(CDriverManager::HmdDriver_t const*, CDriverManager::HmdDriver_t const*, CDriverManager::HmdDriver_t*)
 t CDriverManager::HmdDriver_t::HmdDriver_t(CDriverManager::HmdDriver_t const&)
 t CDriverManager::InitFromPathRegistry(CPropertyManager*)
 t CDriverManager::InitFromPathRegistry(CPropertyManager*) [clone .cold]
 t CDriverManager::IsBlockedBySafemode(unsigned int) const
 t CDriverManager::IsEnabled(unsigned int) const
 t CDriverManager::IsEnabledByDefault(unsigned int) const
 t CDriverManager::IsServerShutdownBlocked()
 t CDriverManager::LoadDriver(unsigned int, CDriverManager::HmdDriverContext, vr::IVRDriverContext*)
 t CDriverManager::LoadDriver(unsigned int, CDriverManager::HmdDriverContext, vr::IVRDriverContext*) [clone .cold]
 t CDriverManager::PopulateResourceProperties(std::string const&, Json::Value const&)
 t CDriverManager::PopulateResourceProperties(std::string const&, Json::Value const&) [clone .cold]
 t CDriverManager::PopulateSystemResourceProperties(std::string const&)
 t CDriverManager::PopulateSystemResourceProperties(std::string const&) [clone .cold]
 t CDriverManager::SetDeviceServerDriver(unsigned int, vr::ETrackedDeviceClass, vr::ITrackedDeviceServerDriver*, unsigned int)
 t CDriverManager::~CDriverManager()
 t CDriverManifest::AddResourceIconsFromJson(Json::Value const&)
 t CDriverManifest::AddResourceIconsFromJson(Json::Value const&) [clone .cold]
 t CDriverManifest::CDriverManifest()
 t CDriverManifest::CDriverManifest() [clone .cold]
 t CDriverManifest::Clear()
 t CDriverManifest::InitializeFromDriverPath(std::string const&)
 t CDriverManifest::InitializeFromDriverPath(std::string const&) [clone .cold]
 t CDriverManifest::InitializeFromFile(std::string const&)
 t CDriverManifest::InitializeFromFile(std::string const&) [clone .cold]
 t CDriverManifest::InitializeFromJson(Json::Value const&, std::string const&)
 t CDriverManifest::InitializeFromJson(Json::Value const&, std::string const&) [clone .cold]
 t CDriverManifest::ReadPresenceEntries(Json::Value const&, std::string const&, std::string const&, std::vector<DriverPresenceEntry_t, std::allocator<DriverPresenceEntry_t> >&)
 t CDriverManifest::ReadPresenceEntries(Json::Value const&, std::string const&, std::string const&, std::vector<DriverPresenceEntry_t, std::allocator<DriverPresenceEntry_t> >&) [clone .cold]
 t CDriverManifest::ReadResourceManifestFromFile(std::string const&)
 t CDriverManifest::ReadResourceManifestFromFile(std::string const&) [clone .cold]
 t CDriverManifest::SetAlwaysPresent(std::vector<DriverPresenceEntry_t, std::allocator<DriverPresenceEntry_t> >&)
 t CDriverManifest::ToJson(Json::Value&)
 t CDriverManifest::ToJson(Json::Value&) [clone .cold]
 t CDriverManifest::UsbIntToString(unsigned short)
 t CDriverManifest::~CDriverManifest()
 t CFixedSizePropertyContainer::AllocateData(unsigned int, unsigned int*)
 t CFixedSizePropertyContainer::Finalize()
 t CFixedSizePropertyContainer::FindConstEntry(unsigned int) const
 t CFixedSizePropertyContainer::FindEntry(unsigned int)
 t CFixedSizePropertyContainer::GetBytesUsed() const
 t CFixedSizePropertyContainer::GetEnableChangeNotifications()
 t CFixedSizePropertyContainer::GetPropertyRawLocked(unsigned int, void*, unsigned int, unsigned int*, unsigned int*)
 t CFixedSizePropertyContainer::Init(void*, unsigned long, bool)
 t CFixedSizePropertyContainer::ReadLock()
 t CFixedSizePropertyContainer::ReadUnlock()
 t CFixedSizePropertyContainer::SetPropertyErrorLocked(unsigned int, vr::ETrackedPropertyError, bool*)
 t CFixedSizePropertyContainer::SetPropertyRawLocked(unsigned int, void const*, unsigned int, unsigned int, bool*)
 t CFixedSizePropertyContainer::SetPropertyRawLocked(unsigned int, void const*, unsigned int, unsigned int, bool*) [clone .part.0]
 t CFixedSizePropertyContainer::UnsetPropertyLocked(unsigned int, bool*)
 t CFixedSizePropertyContainer::WriteLock()
 t CFixedSizePropertyContainer::WriteUnlock()
 t CFrameData::BIsInState(EFrameState)
 t CFrameData::BIsInUse()
 t CFrameData::BWaitForStateReached(EFrameState, unsigned int)
 t CFrameData::BWaitForStateReached(EFrameState, unsigned int) [clone .cold]
 t CFrameData::RecordSwapchainUsedThisFrame(XrSwapchain_T*)
 t CFrameData::Reset(unsigned long)
 t CFrameData::TransitionToState(EFrameState)
 t CFrameData::~CFrameData()
 t CGpuTiming::BeginFrame(void*)
 t CGpuTiming::CGpuTiming()
 t CGpuTiming::EndFrame()
 t CGpuTiming::GetDeltas(void*, float*, unsigned int, bool)
 t CGpuTiming::InitVulkan(VkPhysicalDevice_T*, VkDevice_T*, unsigned int, char const*)
 t CGpuTiming::MarkEvent(unsigned int, char const*)
 t CGpuTiming::Release()
 t CGpuTiming::SetVulkanCommandBuffer(VkCommandBuffer_T*)
 t CGpuTiming::WaitEvent(void*, unsigned int, bool)
 t CGpuTiming::WaitEvent(void*, unsigned int, bool) [clone .cold]
 t CGpuTiming::~CGpuTiming()
 t CHmdSystemLatest::AbortTransition()
 t CHmdSystemLatest::AbortTransition() [clone .cold]
 t CHmdSystemLatest::BHmdPresentForDriver(int)
 t CHmdSystemLatest::BIsHmdPresent()
 t CHmdSystemLatest::BIsHmdPresent() [clone .cold]
 t CHmdSystemLatest::BIsHmdPresentInternal(char const*)
 t CHmdSystemLatest::BIsHmdPresentInternal(char const*) [clone .cold]
 t CHmdSystemLatest::CHmdSystemLatest()
 t CHmdSystemLatest::CHmdSystemLatest() [clone .cold]
 t CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType)
 t CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType) [clone .cold]
 t CHmdSystemLatest::Cleanup()
 t CHmdSystemLatest::CurrentAppTypeExpectsCompositor()
 t CHmdSystemLatest::CurrentAppTypeRequiresHmd()
 t CHmdSystemLatest::EnsureCompositorImplementationsInitialized()
 t CHmdSystemLatest::ForceQuitProcess(unsigned int)
 t CHmdSystemLatest::ForceQuitProcess(unsigned int) [clone .cold]
 t CHmdSystemLatest::ForwardLogMessageToServer(unsigned long, char const*, unsigned int, unsigned int, char const*)
 t CHmdSystemLatest::ForwardLogMessageToServer(unsigned long, char const*, unsigned int, unsigned int, char const*) [clone .cold]
 t CHmdSystemLatest::GetAppContainerFilePaths()
 t CHmdSystemLatest::GetAppContainerFilePaths() [clone .cold]
 t CHmdSystemLatest::GetApplicationType()
 t CHmdSystemLatest::GetCameraRoomViewVisible()
 t CHmdSystemLatest::GetClientPathContainer()
 t CHmdSystemLatest::GetContainerHandleForDevice(unsigned int)
 t CHmdSystemLatest::GetCurrentProcessAppKey()
 t CHmdSystemLatest::GetDashboardEnabled()
 t CHmdSystemLatest::GetDriverCount()
 t CHmdSystemLatest::GetDriverCount() [clone .cold]
 t CHmdSystemLatest::GetDriverDisplayCount(char const*)
 t CHmdSystemLatest::GetDriverDisplayCount(char const*) [clone .cold]
 t CHmdSystemLatest::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int)
 t CHmdSystemLatest::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int) [clone .cold]
 t CHmdSystemLatest::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int)
 t CHmdSystemLatest::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int) [clone .cold]
 t CHmdSystemLatest::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int)
 t CHmdSystemLatest::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int) [clone .cold]
 t CHmdSystemLatest::GetDriverId(unsigned int, char*, unsigned int)
 t CHmdSystemLatest::GetDriverId(unsigned int, char*, unsigned int) [clone .cold]
 t CHmdSystemLatest::GetDriverInitError(char const*)
 t CHmdSystemLatest::GetDriverInitError(char const*) [clone .cold]
 t CHmdSystemLatest::GetDriverManager()
 t CHmdSystemLatest::GetEnglishStringForHmdError(vr::EVRInitError)
 t CHmdSystemLatest::GetGenericInterface(char const*, vr::EVRInitError*)
 t CHmdSystemLatest::GetGenericInterface(char const*, vr::EVRInitError*) [clone .cold]
 t CHmdSystemLatest::GetGraphicsHardwareInfo(GraphicsHardwareInfo_t*)
 t CHmdSystemLatest::GetGraphicsHardwareInfo(GraphicsHardwareInfo_t*) [clone .cold]
 t CHmdSystemLatest::GetHeadsetViewAspectRatio()
 t CHmdSystemLatest::GetHeadsetViewAspectRatio() [clone .cold]
 t CHmdSystemLatest::GetHeadsetViewBlendRange(float*, float*)
 t CHmdSystemLatest::GetHeadsetViewBlendRange(float*, float*) [clone .cold]
 t CHmdSystemLatest::GetHeadsetViewCropped()
 t CHmdSystemLatest::GetHeadsetViewCropped() [clone .cold]
 t CHmdSystemLatest::GetHeadsetViewMode()
 t CHmdSystemLatest::GetHeadsetViewMode() [clone .cold]
 t CHmdSystemLatest::GetHeadsetViewSize(unsigned int*, unsigned int*)
 t CHmdSystemLatest::GetHeadsetViewSize(unsigned int*, unsigned int*) [clone .cold]
 t CHmdSystemLatest::GetIDForVRInitError(vr::EVRInitError)
 t CHmdSystemLatest::GetIPCResourceManagerClient()
 t CHmdSystemLatest::GetLegacyInput()
 t CHmdSystemLatest::GetPaths()
 t CHmdSystemLatest::GetPoseAtTime(vr::ETrackingUniverseOrigin, float, unsigned int, vr::TrackedDevicePose_t*)
 t CHmdSystemLatest::GetPredictedPose(vr::ETrackingUniverseOrigin, float, unsigned int, vr::TrackedDevicePose_t*)
 t CHmdSystemLatest::GetProperties()
 t CHmdSystemLatest::GetRawPose(unsigned int, VRTrackingState_Pose_t*)
 t CHmdSystemLatest::GetRawPose(unsigned int, VRTrackingState_Pose_t*) [clone .cold]
 t CHmdSystemLatest::GetResourceFullPath(std::string const&, std::string const&)
 t CHmdSystemLatest::GetResourceNames(std::vector<std::string, std::allocator<std::string> >*, std::string const&)
 t CHmdSystemLatest::GetResources()
 t CHmdSystemLatest::GetSettings()
 t CHmdSystemLatest::GetSettingsDirtyCount(char const*)
 t CHmdSystemLatest::GetSystemTimeBaseTicks()
 t CHmdSystemLatest::GetVRInitStartupInfo()
 t CHmdSystemLatest::GetVRMonitorState()
 t CHmdSystemLatest::GetVRMonitorState() [clone .cold]
 t CHmdSystemLatest::GetVRRenderModels()
 t CHmdSystemLatest::GetVRStartupReason()
 t CHmdSystemLatest::GetVRStartupReason() [clone .cold]
 t CHmdSystemLatest::GetVRSystem()
 t CHmdSystemLatest::GetWebSharedSecret()
 t CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)
 t CHmdSystemLatest::Init(vr::EVRApplicationType, char const*) [clone .cold]
 t CHmdSystemLatest::InitCompositorImplementations()
 t CHmdSystemLatest::InitCompositorImplementations() [clone .part.0]
 t CHmdSystemLatest::IsInterfaceVersionValid(char const*)
 t CHmdSystemLatest::IsSystemProcess()
 t CHmdSystemLatest::LoadHmdClient()
 t CHmdSystemLatest::LoadHmdClient() [clone .part.0]
 t CHmdSystemLatest::LogMessage(unsigned long, char const*, unsigned int, ELogLevel, char const*)
 t CHmdSystemLatest::OnConsoleClosed(unsigned long)
 t CHmdSystemLatest::OnConsoleOpened(unsigned long)
 t CHmdSystemLatest::OverlayIsFromSceneAppWebUI(unsigned long)
 t CHmdSystemLatest::OverlayIsFromSceneAppWebUI(unsigned long) [clone .cold]
 t CHmdSystemLatest::PostGlobalEvent(vr::VREvent_t const&, unsigned int)
 t CHmdSystemLatest::PostLocalEvent(vr::VREvent_t const&)
 t CHmdSystemLatest::PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t CHmdSystemLatest::PowerOffTrackedDevice(unsigned int)
 t CHmdSystemLatest::PowerOffTrackedDevice(unsigned int) [clone .cold]
 t CHmdSystemLatest::QuitProcess(unsigned int)
 t CHmdSystemLatest::QuitProcess(unsigned int) [clone .cold]
 t CHmdSystemLatest::ReconnectSubsystemProcesses()
 t CHmdSystemLatest::ReconnectSubsystemProcesses() [clone .cold]
 t CHmdSystemLatest::RegisterExternalWebRoot(char const*)
 t CHmdSystemLatest::RegisterExternalWebRoot(char const*) [clone .cold]
 t CHmdSystemLatest::SendWebMessage(std::string const&, Json::Value const&)
 t CHmdSystemLatest::SendWebMessage(std::string const&, Json::Value const&) [clone .cold]
 t CHmdSystemLatest::SendWebMessage(std::string const&, std::string const&)
 t CHmdSystemLatest::SendWebMessage(std::string const&, std::string const&) [clone .cold]
 t CHmdSystemLatest::ServerPipeLost()
 t CHmdSystemLatest::SetCameraRoomViewVisible(bool)
 t CHmdSystemLatest::SetDashboardEnabled(bool)
 t CHmdSystemLatest::SetDashboardEnabled(bool) [clone .cold]
 t CHmdSystemLatest::SetHeadsetViewBlendRange(float, float)
 t CHmdSystemLatest::SetHeadsetViewBlendRange(float, float) [clone .cold]
 t CHmdSystemLatest::SetHeadsetViewCropped(bool)
 t CHmdSystemLatest::SetHeadsetViewCropped(bool) [clone .cold]
 t CHmdSystemLatest::SetHeadsetViewMode(vr::HeadsetViewMode_t)
 t CHmdSystemLatest::SetHeadsetViewMode(vr::HeadsetViewMode_t) [clone .cold]
 t CHmdSystemLatest::SetHeadsetViewSize(unsigned int, unsigned int)
 t CHmdSystemLatest::SetHeadsetViewSize(unsigned int, unsigned int) [clone .cold]
 t CHmdSystemLatest::SetMasterProcessRestartHint()
 t CHmdSystemLatest::SetMasterProcessRestartHint() [clone .cold]
 t CHmdSystemLatest::SetMasterProcessToThis()
 t CHmdSystemLatest::SetMasterProcessToThis() [clone .cold]
 t CHmdSystemLatest::SetVRMonitorState(vr::EVRState)
 t CHmdSystemLatest::SetVRMonitorState(vr::EVRState) [clone .cold]
 t CHmdSystemLatest::ShouldDisableWatchdogs()
 t CHmdSystemLatest::ShouldLogMissingInterface(char const*)
 t CHmdSystemLatest::ShouldLogMissingInterface(char const*) [clone .cold]
 t CHmdSystemLatest::ShouldShowTrackerUI()
 t CHmdSystemLatest::ShouldShowTrackerUI() [clone .cold]
 t CHmdSystemLatest::ShowDevTools(int)
 t CHmdSystemLatest::ShowUI(vr::EShowUIType)
 t CHmdSystemLatest::ShowUI(vr::EShowUIType) [clone .cold]
 t CHmdSystemLatest::Shutdown(bool)
 t CHmdSystemLatest::Shutdown(bool) [clone .cold]
 t CHmdSystemLatest::ShutdownSystem()
 t CHmdSystemLatest::ShutdownSystem() [clone .cold]
 t CHmdSystemLatest::StartAutolaunchOverlays()
 t CHmdSystemLatest::StartAutolaunchOverlays() [clone .cold]
 t CHmdSystemLatest::StartHomeApp()
 t CHmdSystemLatest::StartHomeAppPreload()
 t CHmdSystemLatest::StartHomeAppPreload() [clone .cold]
 t CHmdSystemLatest::StartSecondaryComponents()
 t CHmdSystemLatest::StartSubsystemProcesses(bool, vr::EVRInitError)
 t CHmdSystemLatest::StartSubsystemProcesses(bool, vr::EVRInitError) [clone .cold]
 t CHmdSystemLatest::StartVRDashboard()
 t CHmdSystemLatest::StartVRDashboard() [clone .cold]
 t CHmdSystemLatest::StartVRMonitor()
 t CHmdSystemLatest::StartVRMonitor() [clone .cold]
 t CHmdSystemLatest::StartVRWebHelper(bool)
 t CHmdSystemLatest::StartVRWebHelper(bool) [clone .cold]
 t CHmdSystemLatest::SubmitTextureSetInfo(unsigned int, unsigned int, unsigned long const*, vr::Texture_t const*, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CHmdSystemLatest::SubmitTextureSetInfo(unsigned int, unsigned int, unsigned long const*, vr::Texture_t const*, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags) [clone .part.0]
 t CHmdSystemLatest::ThisProcessIsCompositor()
 t CHmdSystemLatest::ThisProcessIsCompositor() [clone .cold]
 t CHmdSystemLatest::TopologyChanged()
 t CHmdSystemLatest::TransformPoseToUniverse(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const&, vr::ETrackingUniverseOrigin)
 t CHmdSystemLatest::TryToWaitForReasonableAppKey()
 t CHmdSystemLatest::TryToWaitForReasonableAppKey() [clone .cold]
 t CHmdSystemLatest::WatchdogWakeUp(vr::ETrackedDeviceClass)
 t CHmdSystemLatest::WatchdogWakeUp(vr::ETrackedDeviceClass) [clone .cold]
 t CHmdSystemLatest::WritePropertyDataToFile(char const*)
 t CHmdSystemLatest::WritePropertyDataToFile(char const*) [clone .cold]
 t CHmdSystemLatest::~CHmdSystemLatest()
 t CHmdSystem_001::Cleanup()
 t CHmdSystem_001::GetControlPanel(char const*, vr::EVRInitError*)
 t CHmdSystem_001::GetCurrentHmd(char const*)
 t CHmdSystem_001::Init()
 t CHmdSystem_001::IsInterfaceVersionValid(char const*)
 t CHmdSystem_004::BIsHmdPresent(char const*)
 t CHmdSystem_004::Cleanup()
 t CHmdSystem_004::GetCurrentHmd(char const*)
 t CHmdSystem_004::GetGenericInterface(char const*, vr::EVRInitError*)
 t CHmdSystem_004::GetStringForHmdError(vr::EVRInitError)
 t CHmdSystem_004::Init(char const*, char const*)
 t CHmdSystem_004::IsInterfaceVersionValid(char const*)
 t CHmd_001::ComputeDistortion(vr::EVREye, float, float)
 t CHmd_001::GetD3D9AdapterIndex()
 t CHmd_001::GetDisplayId(char*, unsigned int)
 t CHmd_001::GetDriverId(char*, unsigned int)
 t CHmd_001::GetEyeMatrix(vr::EVREye)
 t CHmd_001::GetEyeOutputViewport(vr::EVREye, vr::ETextureType, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CHmd_001::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CHmd_001::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CHmd_001::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CHmd_001::GetViewMatrix(float, vr::HmdMatrix44_t*, vr::HmdMatrix44_t*, vr::ETrackingResult*)
 t CHmd_001::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CHmd_001::GetWorldFromHeadPose(float, vr::HmdMatrix34_t*, vr::ETrackingResult*)
 t CHmd_001::WillDriftInYaw()
 t CHmd_002::ComputeDistortion(vr::EVREye, float, float)
 t CHmd_002::GetD3D9AdapterIndex()
 t CHmd_002::GetDisplayId(char*, unsigned int)
 t CHmd_002::GetDriverId(char*, unsigned int)
 t CHmd_002::GetEyeMatrix(vr::EVREye)
 t CHmd_002::GetEyeOutputViewport(vr::EVREye, vr::ETextureType, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CHmd_002::GetLastWorldFromHeadPose(vr::HmdMatrix34_t*)
 t CHmd_002::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CHmd_002::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CHmd_002::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CHmd_002::GetViewMatrix(float, vr::HmdMatrix44_t*, vr::HmdMatrix44_t*, vr::ETrackingResult*)
 t CHmd_002::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CHmd_002::GetWorldFromHeadPose(float, vr::HmdMatrix34_t*, vr::ETrackingResult*)
 t CHmd_002::WillDriftInYaw()
 t CHmd_002::ZeroTracker()
 t CHmd_003::ComputeDistortion(vr::EVREye, float, float)
 t CHmd_003::GetD3D9AdapterIndex()
 t CHmd_003::GetDXGIOutputInfo(int*, int*)
 t CHmd_003::GetDisplayId(char*, unsigned int)
 t CHmd_003::GetDriverId(char*, unsigned int)
 t CHmd_003::GetEyeMatrix(vr::EVREye)
 t CHmd_003::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CHmd_003::GetLastWorldFromHeadPose(vr::HmdMatrix34_t*)
 t CHmd_003::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CHmd_003::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CHmd_003::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CHmd_003::GetViewMatrix(float, vr::HmdMatrix44_t*, vr::HmdMatrix44_t*, vr::ETrackingResult*)
 t CHmd_003::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CHmd_003::GetWorldFromHeadPose(float, vr::HmdMatrix34_t*, vr::ETrackingResult*)
 t CHmd_003::WillDriftInYaw()
 t CHmd_003::ZeroTracker()
 t CHmd_004::ComputeDistortion(vr::EVREye, float, float)
 t CHmd_004::GetD3D9AdapterIndex()
 t CHmd_004::GetDXGIOutputInfo(int*, int*)
 t CHmd_004::GetDisplayId(char*, unsigned int)
 t CHmd_004::GetDriverId(char*, unsigned int)
 t CHmd_004::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CHmd_004::GetHeadFromEyePose(vr::EVREye)
 t CHmd_004::GetLastTrackerFromHeadPose(vr::HmdMatrix34_t*)
 t CHmd_004::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CHmd_004::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CHmd_004::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CHmd_004::GetTrackerFromHeadPose(float, vr::HmdMatrix34_t*, vr::ETrackingResult*)
 t CHmd_004::GetTrackerZeroPose()
 t CHmd_004::GetViewMatrix(float, vr::HmdMatrix44_t*, vr::HmdMatrix44_t*, vr::ETrackingResult*)
 t CHmd_004::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CHmd_004::WillDriftInYaw()
 t CHmd_004::ZeroTracker()
 t CHmd_005::AttachToWindow(void*)
 t CHmd_005::ComputeDistortion(vr::EVREye, float, float)
 t CHmd_005::GetD3D9AdapterIndex()
 t CHmd_005::GetDXGIOutputInfo(int*, int*)
 t CHmd_005::GetDisplayId(char*, unsigned int)
 t CHmd_005::GetDriverId(char*, unsigned int)
 t CHmd_005::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CHmd_005::GetHeadFromEyePose(vr::EVREye)
 t CHmd_005::GetLastTrackerFromHeadPose(vr::HmdMatrix34_t*)
 t CHmd_005::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CHmd_005::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CHmd_005::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CHmd_005::GetTrackerFromHeadPose(float, vr::HmdMatrix34_t*, vr::ETrackingResult*)
 t CHmd_005::GetTrackerZeroPose()
 t CHmd_005::GetViewMatrix(float, vr::HmdMatrix44_t*, vr::HmdMatrix44_t*, vr::ETrackingResult*)
 t CHmd_005::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CHmd_005::WillDriftInYaw()
 t CHmd_005::ZeroTracker()
 t CHmd_006::AttachToWindow(void*)
 t CHmd_006::ComputeDistortion(vr::EVREye, float, float)
 t CHmd_006::FreeRenderModel(RenderModel001_t*)
 t CHmd_006::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CHmd_006::GetD3D9AdapterIndex()
 t CHmd_006::GetDXGIOutputInfo(int*, int*)
 t CHmd_006::GetDeviceToAbsoluteTrackingPose(float, vr::TrackedDevicePose_t*, unsigned int)
 t CHmd_006::GetEventTypeNameFromEnum(vr::EVREventType)
 t CHmd_006::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CHmd_006::GetEyeToHeadTransform(vr::EVREye)
 t CHmd_006::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CHmd_006::GetHiddenAreaMesh(vr::EVREye)
 t CHmd_006::GetIPD()
 t CHmd_006::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CHmd_006::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CHmd_006::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CHmd_006::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CHmd_006::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CHmd_006::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CHmd_006::GetTimeSinceLastVsync(float*, unsigned long*)
 t CHmd_006::GetTrackedDeviceClass(unsigned int)
 t CHmd_006::GetTrackedDeviceInfoDEPRECATED(TrackedDeviceInfoDEPRECATED_t*, unsigned int)
 t CHmd_006::GetTrackerZeroPose()
 t CHmd_006::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CHmd_006::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CHmd_006::IsTrackedDeviceConnected(unsigned int)
 t CHmd_006::LoadRenderModel(char const*, RenderModel001_t*)
 t CHmd_006::PollNextEvent(VREvent001_t*)
 t CHmd_006::ZeroTracker()
 t CIOBufferCursor::CIOBufferCursor(unsigned long, vr::EIOBufferMode, unsigned int, unsigned int, vr::EIOBufferError*)
 t CIOBufferCursor::CIOBufferCursor(unsigned long, vr::EIOBufferMode, unsigned int, unsigned int, vr::EIOBufferError*) [clone .cold]
 t CIOBufferCursor::Read(unsigned char*, unsigned int, unsigned int*)
 t CIOBufferCursor::Write(unsigned char*, unsigned int)
 t CIOBufferCursor::Write(unsigned char*, unsigned int) [clone .part.0]
 t CIOBufferCursor::~CIOBufferCursor()
 t CIPCPipe::CIPCPipe()
 t CIPCPipe::ClosePipe()
 t CIPCPipe::ClosePipe() [clone .cold]
 t CIPCPipe::ConnectPipe(char const*, bool)
 t CIPCPipe::ConnectPipe(char const*, bool) [clone .cold]
 t CIPCPipe::CreatePipe(char const*, bool)
 t CIPCPipe::CreatePipe(char const*, bool) [clone .cold]
 t CIPCPipe::CreatePipeInternal()
 t CIPCPipe::CreatePipeInternal() [clone .cold]
 t CIPCPipe::GetEndpointProcess() const
 t CIPCPipe::GetEndpointProcessId() const
 t CIPCPipe::GetMessagePayload(void*, unsigned int)
 t CIPCPipe::GetNextMessage(unsigned int*, unsigned int*, unsigned int*, unsigned int)
 t CIPCPipe::IsValid() const
 t CIPCPipe::SendMessageInternal(void*, unsigned int)
 t CIPCPipe::SendMessageInternal(void*, unsigned int) [clone .cold]
 t CIPCPipe::SendPackedMessage(unsigned int, unsigned int, void const*, unsigned int)
 t CIPCPipe::SendPackedMessage(unsigned int, unsigned int, void const*, unsigned int) [clone .cold]
 t CIPCPipe::SendSimpleMessage(unsigned int, unsigned int)
 t CIPCPipe::SendSimpleMessage(unsigned int, unsigned int) [clone .cold]
 t CIPCPipe::UpdatePipeValidity()
 t CIPCPipe::UpdatePipeValidity() [clone .cold]
 t CIPCPipe::WaitForConnection(unsigned int, CIPCPipe**)
 t CIPCPipe::WaitForConnection(unsigned int, CIPCPipe**) [clone .cold]
 t CIPCPipe::WaitForData(unsigned int)
 t CIPCPipe::~CIPCPipe()
 t CInputAction::~CInputAction()
 t CInputActionManifest::AddDefaultBinding(std::string const&, std::string const&)
 t CInputActionManifest::AddDefaultBinding(std::string const&, std::string const&) [clone .cold]
 t CInputActionManifest::AddInteractionProfile(std::string const&)
 t CInputActionManifest::FindAction(std::string const&) const
 t CInputActionManifest::FindAction(std::string const&) const [clone .cold]
 t CInputActionManifest::FindActionSet(std::string const&) const
 t CInputActionManifest::FromJson(Json::Value const&, std::string const&, std::string const&, std::string*)
 t CInputActionManifest::FromJson(Json::Value const&, std::string const&, std::string const&, std::string*) [clone .cold]
 t CInputActionManifest::GetActionSetsFromJSON(Json::Value const&, std::string*, std::vector<std::shared_ptr<CInputActionSet>, std::allocator<std::shared_ptr<CInputActionSet> > >&, std::map<std::string, std::shared_ptr<CInputActionSet>, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > > >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >)
 t CInputActionManifest::GetActionSetsFromJSON(Json::Value const&, std::string*, std::vector<std::shared_ptr<CInputActionSet>, std::allocator<std::shared_ptr<CInputActionSet> > >&, std::map<std::string, std::shared_ptr<CInputActionSet>, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > > >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >) [clone .cold]
 t CInputActionManifest::GetActionsFromJSON(Json::Value const&, std::string*, std::vector<std::shared_ptr<CInputActionSet>, std::allocator<std::shared_ptr<CInputActionSet> > >&, std::map<std::string, std::shared_ptr<CInputActionSet>, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > > >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >)
 t CInputActionManifest::GetActionsFromJSON(Json::Value const&, std::string*, std::vector<std::shared_ptr<CInputActionSet>, std::allocator<std::shared_ptr<CInputActionSet> > >&, std::map<std::string, std::shared_ptr<CInputActionSet>, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > > >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >) [clone .cold]
 t CInputActionManifest::GetBindingURLsForControllerType(std::string const&, std::vector<std::string, std::allocator<std::string> >&, bool)
 t CInputActionManifest::GetBindingURLsForControllerType(std::string const&, std::vector<std::string, std::allocator<std::string> >&, bool) [clone .cold]
 t CInputActionManifest::GetDefaultBindingsFromJSON(Json::Value const&, std::string const&, std::string*, std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> >&, bool)
 t CInputActionManifest::GetDefaultBindingsFromJSON(Json::Value const&, std::string const&, std::string*, std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> >&, bool) [clone .cold]
 t CInputActionManifest::GetInteractionProfiles() const
 t CInputActionManifest::GetLocalizationMapFromJSON(Json::Value const&, std::string const&, std::string const&, std::string*, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&)
 t CInputActionManifest::GetLocalizationMapFromJSON(Json::Value const&, std::string const&, std::string const&, std::string*, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >&) [clone .cold]
 t CInputActionManifest::GetOptionsFromJSON(Json::Value const&, std::vector<CInputOption, std::allocator<CInputOption> >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >)
 t CInputActionManifest::GetOptionsFromJSON(Json::Value const&, std::vector<CInputOption, std::allocator<CInputOption> >&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >) [clone .cold]
 t CInputActionManifest::HasDefaultBinding(std::string const&) const
 t CInputActionManifest::HasDefaultBinding(std::string const&) const [clone .cold]
 t CInputActionSet::CInputActionSet(CInputActionSet const&)
 t CInputActionSet::~CInputActionSet()
 t CInputFilterBase::BIsUsedByActionSet(unsigned long) const
 t CInputFilterBase::CInputFilterBase()
 t CInputFilterBase::Cancel(IInputFilterValueStore*, vr::EVRInputFilterCancelType)
 t CInputFilterBase::FetchInput(IInputFilterValueStore*, CActionFilter const&, std::string const&, EInputValueType, unsigned long*)
 t CInputFilterBase::FetchInput(IInputFilterValueStore*, CActionFilter const&, std::string const&, EInputValueType, unsigned long*) [clone .cold]
 t CInputFilterBase::FetchOutput(IInputFilterValueStore*, CActionFilter const&, std::string const&, EInputValueType, unsigned long*)
 t CInputFilterBase::FetchOutput(IInputFilterValueStore*, CActionFilter const&, std::string const&, EInputValueType, unsigned long*) [clone .cold]
 t CInputFilterBase::GetActionSets() const
 t CInputFilterBase::GetInputs() const
 t CInputFilterBase::GetName() const
 t CInputFilterBase::HasInput(CActionFilter const&, std::string const&)
 t CInputFilterBase::StopAnalogActionMomentum()
 t CInputFilterBase::ToDebugJson(IInputFilterValueStore*) const
 t CInputFilterBase::ToDebugJson(IInputFilterValueStore*) const [clone .cold]
 t CInputFilterBase::~CInputFilterBase()
 t CInputFilterValueStore::CInputFilterValueStore(CVRInputLatest*, std::shared_ptr<CVRInputLatest::InputFrame_t>)
 t CInputFilterValueStore::DebugOutput(unsigned long, char const*, ...)
 t CInputFilterValueStore::GetActionSetHandle(std::string const&)
 t CInputFilterValueStore::GetComponentTransform(unsigned long, std::string)
 t CInputFilterValueStore::GetDebugOriginName(unsigned long, bool)
 t CInputFilterValueStore::GetDevicePose(vr::ETrackingUniverseOrigin, unsigned long, float, vr::TrackedDevicePose_t*)
 t CInputFilterValueStore::GetInputValueHandle(std::string const&)
 t CInputFilterValueStore::ReadBoneTransforms(unsigned long, vr::VRBoneTransform_t*, unsigned int)
 t CInputFilterValueStore::ReadBooleanValue(unsigned long, bool*, unsigned long*, unsigned long*)
 t CInputFilterValueStore::ReadDebugValue(unsigned long)
 t CInputFilterValueStore::ReadPoseValue(unsigned long, vr::HmdMatrix34_t*, unsigned long*, unsigned long*)
 t CInputFilterValueStore::ReadScalarValue(unsigned long, float*, unsigned long*, unsigned long*)
 t CInputFilterValueStore::ReadSkeletonValue(unsigned long, VRInputValue_Skeleton_t*, unsigned long*, unsigned long*)
 t CInputFilterValueStore::SecondsSinceTime(unsigned long)
 t CInputFilterValueStore::TriggerHapticVibration(unsigned long, unsigned long, unsigned long, float, float, float, float)
 t CInputFilterValueStore::WriteBoneTransforms(unsigned long, vr::VRBoneTransform_t const*, unsigned int)
 t CInputFilterValueStore::WriteBooleanValue(unsigned long, bool, unsigned long, unsigned long)
 t CInputFilterValueStore::WriteBooleanValueIfChanged(unsigned long, bool, unsigned long, unsigned long)
 t CInputFilterValueStore::WritePoseValue(unsigned long, vr::HmdMatrix34_t const&, unsigned long, unsigned long)
 t CInputFilterValueStore::WritePoseValueIfChanged(unsigned long, vr::HmdMatrix34_t const&, unsigned long, unsigned long)
 t CInputFilterValueStore::WriteScalarValue(unsigned long, float, unsigned long, unsigned long)
 t CInputFilterValueStore::WriteScalarValueIfChanged(unsigned long, float, unsigned long, unsigned long)
 t CInputFilterValueStore::WriteSkeletonValue(unsigned long, VRInputValue_Skeleton_t const&, unsigned long, unsigned long)
 t CInputFilter_Boolean_And::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Boolean_And::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Boolean_And::Process(IInputFilterValueStore*)
 t CInputFilter_Boolean_And::~CInputFilter_Boolean_And()
 t CInputFilter_Boolean_ButtonPressState::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Boolean_ButtonPressState::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Boolean_ButtonPressState::Cancel(IInputFilterValueStore*, vr::EVRInputFilterCancelType)
 t CInputFilter_Boolean_ButtonPressState::Process(IInputFilterValueStore*)
 t CInputFilter_Boolean_ButtonPressState::~CInputFilter_Boolean_ButtonPressState()
 t CInputFilter_Boolean_Latch::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Boolean_Latch::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Boolean_Latch::Process(IInputFilterValueStore*)
 t CInputFilter_Boolean_Latch::~CInputFilter_Boolean_Latch()
 t CInputFilter_Boolean_Or::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Boolean_Or::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Boolean_Or::Process(IInputFilterValueStore*)
 t CInputFilter_Boolean_Or::~CInputFilter_Boolean_Or()
 t CInputFilter_Boolean_Threshold::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Boolean_Threshold::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Boolean_Threshold::Process(IInputFilterValueStore*)
 t CInputFilter_Boolean_Threshold::~CInputFilter_Boolean_Threshold()
 t CInputFilter_Boolean_Toggle::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Boolean_Toggle::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Boolean_Toggle::Process(IInputFilterValueStore*)
 t CInputFilter_Boolean_Toggle::~CInputFilter_Boolean_Toggle()
 t CInputFilter_DPad::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_DPad::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_DPad::~CInputFilter_DPad()
 t CInputFilter_Grab_ValueAndForce::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Grab_ValueAndForce::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Grab_ValueAndForce::Process(IInputFilterValueStore*)
 t CInputFilter_Grab_ValueAndForce::~CInputFilter_Grab_ValueAndForce()
 t CInputFilter_JoystickSettings::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_JoystickSettings::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_JoystickSettings::CInputFilter_JoystickSettings()
 t CInputFilter_JoystickSettings::Process(IInputFilterValueStore*)
 t CInputFilter_JoystickSettings::~CInputFilter_JoystickSettings()
 t CInputFilter_Pose_Component::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Pose_Component::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Pose_Component::Process(IInputFilterValueStore*)
 t CInputFilter_Pose_Component::Process(IInputFilterValueStore*) [clone .cold]
 t CInputFilter_Pose_Component::~CInputFilter_Pose_Component()
 t CInputFilter_Pose_Constant::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Pose_Constant::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Pose_Constant::Process(IInputFilterValueStore*)
 t CInputFilter_Pose_Constant::~CInputFilter_Pose_Constant()
 t CInputFilter_RadialMenu::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_RadialMenu::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_RadialMenu::~CInputFilter_RadialMenu()
 t CInputFilter_RadialMenuBase::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_RadialMenuBase::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_RadialMenuBase::Process(IInputFilterValueStore*)
 t CInputFilter_RadialMenuBase::~CInputFilter_RadialMenuBase()
 t CInputFilter_Scalar_Constant::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_Constant::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_Constant::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_Constant::~CInputFilter_Scalar_Constant()
 t CInputFilter_Scalar_Deadzone::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_Deadzone::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_Deadzone::CInputFilter_Scalar_Deadzone()
 t CInputFilter_Scalar_Deadzone::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_Deadzone::~CInputFilter_Scalar_Deadzone()
 t CInputFilter_Scalar_Exponent::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_Exponent::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_Exponent::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_Exponent::~CInputFilter_Scalar_Exponent()
 t CInputFilter_Scalar_JoystickScroll_Discrete::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_JoystickScroll_Discrete::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_JoystickScroll_Discrete::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_JoystickScroll_Discrete::~CInputFilter_Scalar_JoystickScroll_Discrete()
 t CInputFilter_Scalar_JoystickScroll_Smooth::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_JoystickScroll_Smooth::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_JoystickScroll_Smooth::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_JoystickScroll_Smooth::~CInputFilter_Scalar_JoystickScroll_Smooth()
 t CInputFilter_Scalar_ScaleAndOffset::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_ScaleAndOffset::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_ScaleAndOffset::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_ScaleAndOffset::~CInputFilter_Scalar_ScaleAndOffset()
 t CInputFilter_Scalar_TrackpadScroll_Discrete::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_TrackpadScroll_Discrete::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_TrackpadScroll_Discrete::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_TrackpadScroll_Discrete::ScrollDiscreteMouseWheelBasic(IInputFilterValueStore*)
 t CInputFilter_Scalar_TrackpadScroll_Discrete::ScrollDiscreteMouseWheelRelease(IInputFilterValueStore*)
 t CInputFilter_Scalar_TrackpadScroll_Discrete::ScrollDiscretePressToScroll(IInputFilterValueStore*)
 t CInputFilter_Scalar_TrackpadScroll_Discrete::ScrollDiscreteSlideToScroll(IInputFilterValueStore*)
 t CInputFilter_Scalar_TrackpadScroll_Discrete::UnfilteredTestOutput(IInputFilterValueStore*)
 t CInputFilter_Scalar_TrackpadScroll_Discrete::~CInputFilter_Scalar_TrackpadScroll_Discrete()
 t CInputFilter_Scalar_TrackpadScroll_Smooth::AddLastVelocity(vr::HmdVector2_t const&)
 t CInputFilter_Scalar_TrackpadScroll_Smooth::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_Scalar_TrackpadScroll_Smooth::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_Scalar_TrackpadScroll_Smooth::ClearLastVelocities()
 t CInputFilter_Scalar_TrackpadScroll_Smooth::ClearLastVelocities() [clone .cold]
 t CInputFilter_Scalar_TrackpadScroll_Smooth::Process(IInputFilterValueStore*)
 t CInputFilter_Scalar_TrackpadScroll_Smooth::Process(IInputFilterValueStore*) [clone .cold]
 t CInputFilter_Scalar_TrackpadScroll_Smooth::~CInputFilter_Scalar_TrackpadScroll_Smooth()
 t CInputFilter_TriggerHaptic::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_TriggerHaptic::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_TriggerHaptic::Process(IInputFilterValueStore*)
 t CInputFilter_TriggerHaptic::~CInputFilter_TriggerHaptic()
 t CInputFilter_XRDPad::BInit(IInputFilterValueStore*, CActionFilter const&)
 t CInputFilter_XRDPad::BInit(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t CInputFilter_XRDPad::Process(IInputFilterValueStore*)
 t CInputFilter_XRDPad::~CInputFilter_XRDPad()
 t CInputOption::~CInputOption()
 t CKeyframeSamplerPoseOperation::AddCycle(CPoseRecipe&, CKeyframedDataResource const*, float)
 t CKeyframeSamplerPoseOperation::AddFrame(CPoseRecipe&, CKeyframedDataResource const*, unsigned int)
 t CKeyframeSamplerPoseOperation::Evaluate(CPoseUpdateContext&, CKeyframeSamplerPoseOperation::OpSettings const*)
 t CKeyframeSamplerPoseOperation::Evaluate(CPoseUpdateContext&, CKeyframeSamplerPoseOperation::OpSettings const*) [clone .cold]
 t CKeyframedDataResource::CKeyframedDataResource(std::string const&)
 t CKeyframedDataResource::CastToBase(int)
 t CKeyframedDataResource::CastToBase(int) const
 t CKeyframedDataResource::ConvertFromGLTF(std::vector<int, std::allocator<int> > const&)
 t CKeyframedDataResource::GetBoneCount() const
 t CKeyframedDataResource::GetDuration() const
 t CKeyframedDataResource::GetFrameCount() const
 t CKeyframedDataResource::GetFrameData(unsigned int) const
 t CKeyframedDataResource::GetResourceTypeDir()
 t CKeyframedDataResource::GetTypeInfo() const
 t CKeyframedDataResource::Load(std::string const&)
 t CKeyframedDataResource::Load(std::string const&) [clone .cold]
 t CKeyframedDataResource::LoadInfo(tinygltf::Model const&)
 t CKeyframedDataResource::MyTypeID()
 t CKeyframedDataResource::MyTypeInfo()
 t CKeyframedDataResource::~CKeyframedDataResource()
 t CLegacyInput::Action(std::string const&, std::string const&, std::string const&)
 t CLegacyInput::Action(std::string const&, std::string const&, std::string const&) [clone .cold]
 t CLegacyInput::BestControllerTypeOverride()
 t CLegacyInput::ControlActions(CLegacyInput::ActionHand_t&, std::string const&, std::string const&, std::string const&, vr::EVRButtonId)
 t CLegacyInput::ControlActions(CLegacyInput::ActionHand_t&, std::string const&, std::string const&, std::string const&, vr::EVRButtonId) [clone .cold]
 t CLegacyInput::ControllerStateToJson(CLegacyInput::ControllerInfo_t const&)
 t CLegacyInput::ControllerStateToJson(CLegacyInput::ControllerInfo_t const&) [clone .cold]
 t CLegacyInput::GetControllerState(unsigned int, vr::VRControllerState001_t*, double*)
 t CLegacyInput::GetControllerState(unsigned int, vr::VRControllerState001_t*, double*) [clone .cold]
 t CLegacyInput::GetOverrideTrackedDeviceClass(unsigned int)
 t CLegacyInput::GetOverrideTrackedDeviceClass(unsigned int) [clone .cold]
 t CLegacyInput::GetPoseModificationForDevice(unsigned int, vr::HmdMatrix34_t*)
 t CLegacyInput::HandActions(std::string const&, std::string const&)
 t CLegacyInput::HandActions(std::string const&, std::string const&) [clone .cold]
 t CLegacyInput::Init(IVRClientInternal*, CVRInputLatest*)
 t CLegacyInput::Init(IVRClientInternal*, CVRInputLatest*) [clone .cold]
 t CLegacyInput::LoadInitialConfig()
 t CLegacyInput::MaybeTriggerInputFrame()
 t CLegacyInput::PollNextEventCalled()
 t CLegacyInput::RunInputFrame(bool)
 t CLegacyInput::RunInputFrame(bool) [clone .cold]
 t CLegacyInput::RunInputFrame(bool)::{lambda(vr::ETrackedControllerRole, std::string const&)#1}::operator()(vr::ETrackedControllerRole, std::string const&) const
 t CLegacyInput::RunInputFrame(bool)::{lambda(vr::ETrackedControllerRole, std::string const&)#1}::operator()(vr::ETrackedControllerRole, std::string const&) const [clone .cold]
 t CLegacyInput::SendStateToDebugger()
 t CLegacyInput::SendStateToDebugger() [clone .cold]
 t CLegacyInput::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CLegacyInput::UpdateStateForBoolean(CLegacyInput::ControllerInfo_t&, vr::EVRButtonId, bool, unsigned long, bool, unsigned long*)
 t CLegacyInput::UpdateStateForButton(CLegacyInput::ControllerInfo_t&, CLegacyInput::ActionHand_t const&, vr::EVRButtonId)
 t CLegacyInput::UpdateStateForController(vr::ETrackedControllerRole)
 t CLegacyInput::UpdateStateForController(vr::ETrackedControllerRole) [clone .cold]
 t CLegacyInput::UpdateStateForScalar(CLegacyInput::ControllerInfo_t&, unsigned int, int, unsigned long)
 t CLegacyInput::UpdateStateForThumbstick(CLegacyInput::ControllerInfo_t&, CLegacyInput::ActionHand_t const&, vr::EVRButtonId)
 t CLegacyInput::UpdateStateForTrackpad(CLegacyInput::ControllerInfo_t&, CLegacyInput::ActionHand_t const&, vr::EVRButtonId)
 t CLegacyInput::UpdateStateForTrigger(CLegacyInput::ControllerInfo_t&, CLegacyInput::ActionHand_t const&, vr::EVRButtonId)
 t CLegacyInput::WaitGetPosesCalled()
 t CLegacyInput::~CLegacyInput()
 t CLocalizationManager::BLoadDriverStringTable(std::string const&)
 t CLocalizationManager::BLoadDriverStringTable(std::string const&) [clone .cold]
 t CLocalizationManager::BLoadWebStringTable(std::string const&)
 t CLocalizationManager::BLoadWebStringTable(std::string const&) [clone .cold]
 t CLocalizationManager::CopyToStringTable(std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >*, Json::Value const*)
 t CLocalizationManager::CopyToStringTable(std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >*, Json::Value const*) [clone .cold]
 t CLocalizationManager::GetStringEntry(std::string const&, std::string const&)
 t CLocalizationManager::GetStringEntry(std::string const&, std::string const&) [clone .cold]
 t CLocalizationManager::Localize(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&)
 t CLocalizationManager::Localize(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&) [clone .cold]
 t CLocalizationManager::SetLanguage(std::string const&)
 t CLocalizationManager::~CLocalizationManager()
 t CLog::AddCallback(CLogCallback*)
 t CLog::AddCallback(CLogCallback*) [clone .cold]
 t CLog::GetInstance()
 t CLog::GetInstance() [clone .cold]
 t CLog::Log(ELogLevel, char const*, ...)
 t CLog::Log(ELogLevel, char const*, __va_list_tag (&) [1])
 t CLog::Log(ELogLevel, char const*, __va_list_tag (&) [1]) [clone .cold]
 t CLog::RemoveCallback(CLogCallback*)
 t CLogBuffer::CLogBuffer()
 t CLogBuffer::CLogBuffer() [clone .cold]
 t CLogBuffer::CopyLogBuffer()
 t CLogBuffer::CopyLogBuffer() [clone .cold]
 t CLogBuffer::DiscardExcessLogBuffering()
 t CLogBuffer::DiscardExcessLogBuffering() [clone .cold]
 t CLogBuffer::DumpLogBufferToBuffer(char*, unsigned long)
 t CLogBuffer::GetInstance()
 t CLogBuffer::GetInstance() [clone .cold]
 t CLogBuffer::SetBufferLimit(unsigned long)
 t CLogBuffer::SetBufferLimit(unsigned long) [clone .cold]
 t CLogCallback::Initialize(std::function<void (ELogLevel, char const*, void*)>, void*)
 t CLogCallback::Initialize(std::function<void (ELogLevel, char const*, void*)>, void*) [clone .cold]
 t CLogCallback::~CLogCallback()
 t CLogTimer::CLogTimer(char const*, double)
 t CLogTimer::CLogTimer(char const*, double) [clone .cold]
 t CLogTimer::~CLogTimer()
 t CMCStore::CMCStore(IVRServer*, vr::IVRProperties*)
 t CMCStore::GetMCImage(unsigned int*, unsigned int*, unsigned int*, void*, unsigned int, vr::ETrackedPropertyError*)
 t CMCStore::SetMCImage(unsigned int, unsigned int, unsigned int, void*, unsigned int)
 t CMCStore::~CMCStore()
 t CMirrorPoseOperation::AddMirrorOp(CPoseRecipe&, unsigned char)
 t CMirrorPoseOperation::Evaluate(CPoseUpdateContext&, CMirrorPoseOperation::OpSettings const*)
 t CMirrorPoseOperation::Evaluate(CPoseUpdateContext&, CMirrorPoseOperation::OpSettings const*) [clone .cold]
 t CMirrorPoseOperation::Evaluate(CSmartPtr<CAnimPose, CRefCountAccessor> const&)
 t CMsaaResolveRenderer::AllocateExactResolveTexture(int, int)
 t CMsaaResolveRenderer::Draw(vr::VRTextureBounds_t*, unsigned int, unsigned int, unsigned int, unsigned int, void*, void*, int, unsigned int)
 t CMsaaResolveRenderer::GrowResolveTextureIfNeeded(int, int)
 t CMsaaResolveRenderer::Initialize(IVRRenderer*)
 t CMsaaResolveRenderer::ReleaseResources()
 t CMsaaResolveRenderer::~CMsaaResolveRenderer()
 t CPackedBoneTransforms::ByteSize() const
 t CPackedBoneTransforms::CPackedBoneTransforms()
 t CPackedBoneTransforms::CPackedBoneTransforms() [clone .cold]
 t CPackedBoneTransforms::CPackedBoneTransforms(CPackedBoneTransforms const&)
 t CPackedBoneTransforms::CPackedBoneTransforms(CPackedBoneTransforms const&) [clone .cold]
 t CPackedBoneTransforms::Clear()
 t CPackedBoneTransforms::CopyFrom(CPackedBoneTransforms const&)
 t CPackedBoneTransforms::GetCachedSize() const
 t CPackedBoneTransforms::GetMetadata() const
 t CPackedBoneTransforms::GetMetadata() const [clone .cold]
 t CPackedBoneTransforms::InitAsDefaultInstance()
 t CPackedBoneTransforms::IsInitialized() const
 t CPackedBoneTransforms::MergeFrom(CPackedBoneTransforms const&)
 t CPackedBoneTransforms::MergeFrom(CPackedBoneTransforms const&) [clone .cold]
 t CPackedBoneTransforms::New() const
 t CPackedBoneTransforms::New() const [clone .cold]
 t CPackedBoneTransforms::SerializeWithCachedSizesToArray(unsigned char*) const
 t CPackedBoneTransforms::SetCachedSize(int) const
 t CPackedBoneTransforms::SharedCtor()
 t CPackedBoneTransforms::SharedCtor() [clone .cold]
 t CPackedBoneTransforms::SharedDtor()
 t CPackedBoneTransforms::Swap(CPackedBoneTransforms*)
 t CPackedBoneTransforms::default_instance()
 t CPackedBoneTransforms::descriptor()
 t CPackedBoneTransforms::descriptor() [clone .cold]
 t CPackedBoneTransforms::mutable_data()
 t CPackedBoneTransforms::release_data()
 t CPackedBoneTransforms::set_allocated_data(std::string*)
 t CPackedBoneTransforms::set_data(char const*)
 t CPackedBoneTransforms::set_data(std::string const&)
 t CPackedBoneTransforms::set_data(void const*, unsigned long)
 t CPackedBoneTransforms::~CPackedBoneTransforms()
 t CPackedDataBase::AddItem(unsigned long, unsigned long)
 t CPackedDataBase::CPackedDataBase()
 t CPackedDataBase::CPackedDataBase(CPackedDataBase const&)
 t CPackedDataBase::CPackedDataBase(CPackedDataBase&&)
 t CPackedDataBase::CPackedDataBase(unsigned int)
 t CPackedDataBase::CopyFrom(void const*, unsigned int)
 t CPackedDataBase::GetDataPtr() const
 t CPackedDataBase::GetItem(PackedHandleID)
 t CPackedDataBase::GetItem(PackedHandleID) const
 t CPackedDataBase::GetReservedSize() const
 t CPackedDataBase::GetSize() const
 t CPackedDataBase::IsTrimmed() const
 t CPackedDataBase::ReAlloc(unsigned int)
 t CPackedDataBase::ReAlloc(unsigned int) [clone .part.0]
 t CPackedDataBase::Reset(unsigned int)
 t CPackedDataBase::Trim()
 t CPackedDataBase::operator=(CPackedDataBase const&)
 t CPackedDataBase::operator=(CPackedDataBase&&)
 t CPackedDataBase::~CPackedDataBase()
 t CPathManagerBase::CPathManagerBase(CPropertyManager*)
 t CPathManagerBase::ComputePropertyEnum(unsigned long)
 t CPathManagerBase::ReadPathBatch(unsigned long, vr::PathRead_t*, unsigned int)
 t CPathManagerBase::ReadPathBatchSlow(unsigned long, vr::PathRead_t*, unsigned int)
 t CPathManagerBase::ReadPathBatchSlow(unsigned long, vr::PathRead_t*, unsigned int) [clone .cold]
 t CPathManagerBase::ReadSingleAliasPathFast(vr::PathRead_t*, unsigned long)
 t CPathManagerBase::ReadSingleNormalPathFast(vr::PathRead_t*, unsigned long)
 t CPathManagerBase::ReadWildcardEntry(unsigned long, vr::PathRead_t*)
 t CPathManagerBase::ReadWildcardEntry(unsigned long, vr::PathRead_t*) [clone .cold]
 t CPathManagerBase::StringToPathPropertyContainer(std::string const&, std::string&, vr::IVRExternalProperties**)
 t CPathManagerBase::WritePathBatch(unsigned long, vr::PathWrite_t*, unsigned int)
 t CPathManagerBase::WritePathBatch(unsigned long, vr::PathWrite_t*, unsigned int) [clone .cold]
 t CPathManagerBase::~CPathManagerBase()
 t CPathManager_Client::CPathManager_Client(CPropertyManager*, CVRClient*)
 t CPathManager_Client::HandleToString(unsigned long, char*, unsigned int, unsigned int*)
 t CPathManager_Client::HandleToString(unsigned long, char*, unsigned int, unsigned int*) [clone .cold]
 t CPathManager_Client::Init()
 t CPathManager_Client::StringToHandle(unsigned long*, char const*)
 t CPathManager_Client::StringToHandle(unsigned long*, char const*) [clone .cold]
 t CPathManager_Client::~CPathManager_Client()
 t CPathManager_Server::AddAliasPath(unsigned long, unsigned long, unsigned long)
 t CPathManager_Server::AddAliasPath(unsigned long, unsigned long, unsigned long) [clone .cold]
 t CPathManager_Server::AddAliasPathListener(vr::IAliasPathListener*)
 t CPathManager_Server::AddAliasRoot(std::string const&)
 t CPathManager_Server::AddAliasRoot(std::string const&) [clone .cold]
 t CPathManager_Server::AddExternalPathAliasRoot(std::string const&, unsigned long, vr::IVRExternalProperties*, unsigned long&)
 t CPathManager_Server::AddExternalPathAliasRoot(std::string const&, unsigned long, vr::IVRExternalProperties*, unsigned long&) [clone .cold]
 t CPathManager_Server::AliasRootAndLeafToFullPath(unsigned long, unsigned long)
 t CPathManager_Server::AliasRootAndLeafToFullPath(unsigned long, unsigned long) [clone .cold]
 t CPathManager_Server::BWildcardMatches(CPathManager_Server::WildcardInfo_t const&, std::string const&)
 t CPathManager_Server::BWildcardMatches(CPathManager_Server::WildcardInfo_t const&, std::string const&) [clone .cold]
 t CPathManager_Server::CPathManager_Server(CPropertyManager*)
 t CPathManager_Server::CPathManager_Server(CPropertyManager*) [clone .cold]
 t CPathManager_Server::GetAllPathHandles() const
 t CPathManager_Server::GetAllPathHandles() const [clone .cold]
 t CPathManager_Server::HandleToString(unsigned long, char*, unsigned int, unsigned int*)
 t CPathManager_Server::HandleToString(unsigned long, char*, unsigned int, unsigned int*) [clone .cold]
 t CPathManager_Server::Init()
 t CPathManager_Server::IsAlias(std::string const&, std::string*, std::string*, bool*, bool*)
 t CPathManager_Server::IsAlias(std::string const&, std::string*, std::string*, bool*, bool*) [clone .cold]
 t CPathManager_Server::IsValidHandle(unsigned long)
 t CPathManager_Server::IsWildcard(std::string const&, CPathManager_Server::WildcardInfo_t*)
 t CPathManager_Server::IsWildcard(std::string const&, CPathManager_Server::WildcardInfo_t*) [clone .cold]
 t CPathManager_Server::PropertyIDToPathHandle(unsigned int)
 t CPathManager_Server::RecomputeWildcards()
 t CPathManager_Server::RecomputeWildcards() [clone .cold]
 t CPathManager_Server::RemoveExternalPathAlias(std::string const&)
 t CPathManager_Server::ResolveAliasPaths(std::string const&, unsigned long)
 t CPathManager_Server::ResolveAliasPaths(std::string const&, unsigned long) [clone .cold]
 t CPathManager_Server::StringToHandle(unsigned long*, char const*)
 t CPathManager_Server::StringToHandle(unsigned long*, char const*) [clone .cold]
 t CPathManager_Server::StringToPathPropertyContainer(std::string const&, std::string&, vr::IVRExternalProperties**)
 t CPathManager_Server::StringToPathPropertyContainer(std::string const&, std::string&, vr::IVRExternalProperties**) [clone .cold]
 t CPoseRecipe::AddReference(unsigned char)
 t CPoseRecipe::CPoseRecipe()
 t CPoseRecipe::CPoseRecipe() [clone .cold]
 t CPoseRecipe::EvaluateOp(unsigned int, CPoseUpdateContext&) const
 t CPoseRecipe::GetHandle(unsigned int) const
 t CPoseRecipe::GetOpCount() const
 t CPoseRecipe::GetParameterData()
 t CPoseRecipe::GetParameterData() const
 t CPoseRecipe::GetRefCount(unsigned int) const
 t CPoseRecipe::Reset()
 t CPoseUpdateContext::AllocPose()
 t CPoseUpdateContext::CPoseUpdateContext(CPoseRecipe const*, CPoseUpdateResources*, float)
 t CPoseUpdateContext::GetPose(unsigned char)
 t CPoseUpdateContext::GetPose(unsigned char) [clone .cold]
 t CPoseUpdateContext::GetSkeleton() const
 t CPoseUpdateContext::GetTimeStep() const
 t CPoseUpdateContext::TryTakePose(unsigned char)
 t CPoseUpdateContext::TryTakePose(unsigned char) [clone .cold]
 t CPoseUpdateManager::CPoseUpdateManager(CPoseRecipe const*, CPoseUpdateResources*, float)
 t CPoseUpdateManager::Evaluate()
 t CPoseUpdateManager::Evaluate() [clone .cold]
 t CPoseUpdateResources::CPoseUpdateResources(CAnimSkeleton const*)
 t CPropertyContainer::AddPropertyTable()
 t CPropertyContainer::AddPropertyTable() [clone .cold]
 t CPropertyContainer::BInit(std::string const&, bool)
 t CPropertyContainer::BInit(std::string const&, bool) [clone .cold]
 t CPropertyContainer::CPropertyContainer()
 t CPropertyContainer::Compact()
 t CPropertyContainer::Compact() [clone .cold]
 t CPropertyContainer::CopyFromStorage(void*, unsigned int, unsigned int)
 t CPropertyContainer::CopyToStorage(void const*, unsigned int, unsigned int)
 t CPropertyContainer::CreateNewContainer(std::string const&, bool)
 t CPropertyContainer::CreateNewContainer(std::string const&, bool) [clone .cold]
 t CPropertyContainer::FindOrAddProperty(unsigned int)
 t CPropertyContainer::FindOrAddProperty(unsigned int) [clone .part.0]
 t CPropertyContainer::FindProperty(unsigned int)
 t CPropertyContainer::FindPropertyIndex(unsigned int)
 t CPropertyContainer::GetAllProperties(std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> >*)
 t CPropertyContainer::GetAllProperties(std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> >*) [clone .cold]
 t CPropertyContainer::GetAllPropertiesWithTag(unsigned int, std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> >*)
 t CPropertyContainer::GetAllPropertiesWithTag(unsigned int, std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> >*) [clone .cold]
 t CPropertyContainer::GetEnableChangeNotifications()
 t CPropertyContainer::GetPropertyCount()
 t CPropertyContainer::GetPropertyCount() [clone .cold]
 t CPropertyContainer::GetPropertyRaw(unsigned int, void*, unsigned int, unsigned int*, unsigned int*)
 t CPropertyContainer::GetPropertyRaw(unsigned int, void*, unsigned int, unsigned int*, unsigned int*) [clone .cold]
 t CPropertyContainer::GetPropertyRawLocked(unsigned int, void*, unsigned int, unsigned int*, unsigned int*)
 t CPropertyContainer::GetPropertyRawLocked(unsigned int, void*, unsigned int, unsigned int*, unsigned int*) [clone .cold]
 t CPropertyContainer::GetPropertyTableEntry(unsigned int)
 t CPropertyContainer::GetStorageBlock(unsigned int)
 t CPropertyContainer::GetStorageBlock(unsigned int) [clone .cold]
 t CPropertyContainer::ReadLock()
 t CPropertyContainer::ReadUnlock()
 t CPropertyContainer::SetPropertyError(unsigned int, vr::ETrackedPropertyError, bool*)
 t CPropertyContainer::SetPropertyError(unsigned int, vr::ETrackedPropertyError, bool*) [clone .cold]
 t CPropertyContainer::SetPropertyErrorLocked(unsigned int, vr::ETrackedPropertyError, bool*)
 t CPropertyContainer::SetPropertyRaw(unsigned int, void const*, unsigned int, unsigned int, bool*)
 t CPropertyContainer::SetPropertyRaw(unsigned int, void const*, unsigned int, unsigned int, bool*) [clone .cold]
 t CPropertyContainer::SetPropertyRawLocked(unsigned int, void const*, unsigned int, unsigned int, bool*)
 t CPropertyContainer::UnsetProperty(unsigned int, bool*)
 t CPropertyContainer::UnsetProperty(unsigned int, bool*) [clone .cold]
 t CPropertyContainer::UnsetPropertyLocked(unsigned int, bool*)
 t CPropertyContainer::WriteLock()
 t CPropertyContainer::WriteUnlock()
 t CPropertyContainer::~CPropertyContainer()
 t CPropertyContainerReader::~CPropertyContainerReader()
 t CPropertyContainerWriter::CPropertyContainerWriter(ILockedPropertyContainer*)
 t CPropertyContainerWriter::~CPropertyContainerWriter()
 t CPropertyManager::BClientMode() const
 t CPropertyManager::CPropertyManager()
 t CPropertyManager::CreateFixedSizeContainerForRead(unsigned long*, void const*, unsigned int)
 t CPropertyManager::CreateFixedSizeContainerForRead(unsigned long*, void const*, unsigned int) [clone .cold]
 t CPropertyManager::CreateFixedSizeContainerForWrite(unsigned long*, void*, unsigned int)
 t CPropertyManager::CreateFixedSizeContainerForWrite(unsigned long*, void*, unsigned int) [clone .cold]
 t CPropertyManager::CreatePropertyContainer(unsigned long)
 t CPropertyManager::CreatePropertyContainerInternal(unsigned long, bool)
 t CPropertyManager::CreatePropertyContainerInternal(unsigned long, bool) [clone .cold]
 t CPropertyManager::DestroyPropertyContainer(unsigned long)
 t CPropertyManager::EnableChangeNotifications(unsigned long, bool)
 t CPropertyManager::FindOrAddContainer(unsigned long)
 t CPropertyManager::GetAllContainers()
 t CPropertyManager::GetAllContainers() [clone .cold]
 t CPropertyManager::GetAllProperties(unsigned long, std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> >*)
 t CPropertyManager::GetAllPropertiesWithTag(unsigned long, unsigned int, std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> >*)
 t CPropertyManager::GetContainerReader(unsigned long)
 t CPropertyManager::GetContainerReader(unsigned long) [clone .cold]
 t CPropertyManager::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CPropertyManager::Init()
 t CPropertyManager::Init() [clone .cold]
 t CPropertyManager::InitIfNeeded()
 t CPropertyManager::PropertyContainerToTrackedDevice(unsigned long)
 t CPropertyManager::ReadPropertyBatch(unsigned long, vr::PropertyRead_t*, unsigned int)
 t CPropertyManager::ReadPropertyBatch(unsigned long, vr::PropertyRead_t*, unsigned int) [clone .cold]
 t CPropertyManager::ReleaseFixedSizeContainer(unsigned long)
 t CPropertyManager::ReleaseFixedSizeContainer(unsigned long) [clone .cold]
 t CPropertyManager::TrackedDeviceToPropertyContainer(unsigned int)
 t CPropertyManager::WritePropertyBatch(unsigned long, vr::PropertyWrite_t*, unsigned int)
 t CPropertyManager::WritePropertyBatch(unsigned long, vr::PropertyWrite_t*, unsigned int) [clone .cold]
 t CPropertyManager::~CPropertyManager()
 t CRadialMenu::CRadialMenu(int, float)
 t CRadialMenu::CRadialMenu(int, float) [clone .cold]
 t CRadialMenu::CRadialMenuSlice::update(float, float)
 t CRadialMenu::GetActiveSlices(float, float)
 t CRenderModelLoadThread::Run()
 t CRenderModelLoadThread::~CRenderModelLoadThread()
 t CRenderModelManager::BInit(vr::IVRSettings*, vr::IVRResourcesInternal*, vr::IVRPaths*, IVRClientInternal*)
 t CRenderModelManager::CRenderModelManager()
 t CRenderModelManager::CRenderModelManager() [clone .cold]
 t CRenderModelManager::CacheEmptyModelInfo(unsigned int, std::string const&)
 t CRenderModelManager::CacheEmptyModelInfo(unsigned int, std::string const&) [clone .cold]
 t CRenderModelManager::Cleanup()
 t CRenderModelManager::ClearCache()
 t CRenderModelManager::Component_t::Component_t()
 t CRenderModelManager::Component_t::GetButtonMask()
 t CRenderModelManager::Component_t::GetInputState(vr::IVRPaths*, unsigned long)
 t CRenderModelManager::Component_t::GetInputState(vr::VRControllerState001_t const*)
 t CRenderModelManager::Component_t::GetInputValue(vr::VRControllerState001_t const*)
 t CRenderModelManager::Component_t::GetInputValue2D(float*, float*, vr::VRControllerState001_t const*)
 t CRenderModelManager::Component_t::TranslateInputStateValues(vr::RenderModel_InputState_t const&) const
 t CRenderModelManager::Component_t::~Component_t()
 t CRenderModelManager::FindComponentForInputState(char const*, unsigned long, char*, unsigned int)
 t CRenderModelManager::FindComponentForInputState(char const*, unsigned long, char*, unsigned int) [clone .cold]
 t CRenderModelManager::FindOrCreateTexture(std::string const&, vr::RenderModelTextureOptions_t const*)
 t CRenderModelManager::FindOrCreateTexture(std::string const&, vr::RenderModelTextureOptions_t const*) [clone .cold]
 t CRenderModelManager::FreeRenderModel(vr::RenderModel_t*)
 t CRenderModelManager::FreeRenderModel(vr::RenderModel_t*) [clone .cold]
 t CRenderModelManager::FreeTexture(vr::RenderModel_TextureMap_t*)
 t CRenderModelManager::FreeTexture(vr::RenderModel_TextureMap_t*) [clone .cold]
 t CRenderModelManager::FreeTextureD3D11(void*)
 t CRenderModelManager::GetComponentButtonMask(char const*, char const*)
 t CRenderModelManager::GetComponentButtonMask(char const*, char const*) [clone .cold]
 t CRenderModelManager::GetComponentCount(char const*)
 t CRenderModelManager::GetComponentName(char const*, unsigned int, char*, unsigned int)
 t CRenderModelManager::GetComponentName(char const*, unsigned int, char*, unsigned int) [clone .cold]
 t CRenderModelManager::GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t CRenderModelManager::GetComponentRenderModelName(char const*, char const*, char*, unsigned int) [clone .cold]
 t CRenderModelManager::GetComponentState(char const*, char const*, unsigned long, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t CRenderModelManager::GetComponentState(char const*, char const*, unsigned long, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*) [clone .cold]
 t CRenderModelManager::GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t CRenderModelManager::GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*) [clone .cold]
 t CRenderModelManager::GetComponentStateExplicit(char const*, char const*, vr::RenderModel_InputState_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t CRenderModelManager::GetComponentStateExplicit(char const*, char const*, vr::RenderModel_InputState_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*) [clone .cold]
 t CRenderModelManager::GetComponentStateForDevicePath(char const*, char const*, unsigned long, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t CRenderModelManager::GetComponentStateInternal(CRenderModelManager::ModelInfo_t const*, CRenderModelManager::Component_t const*, vr::RenderModel_InputState_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t CRenderModelManager::GetModelInfo(char const*, bool)
 t CRenderModelManager::GetModelInfo(char const*, bool) [clone .cold]
 t CRenderModelManager::GetRenderModelAbsolutePath(char const*, bool)
 t CRenderModelManager::GetRenderModelAbsolutePath(char const*, bool) [clone .cold]
 t CRenderModelManager::GetRenderModelCount()
 t CRenderModelManager::GetRenderModelCount() [clone .cold]
 t CRenderModelManager::GetRenderModelErrorNameFromEnum(vr::EVRRenderModelError)
 t CRenderModelManager::GetRenderModelName(unsigned int, char*, unsigned int)
 t CRenderModelManager::GetRenderModelName(unsigned int, char*, unsigned int) [clone .cold]
 t CRenderModelManager::GetRenderModelOriginalPath(char const*, char*, unsigned int, vr::EVRRenderModelError*)
 t CRenderModelManager::GetRenderModelOriginalPath(char const*, char*, unsigned int, vr::EVRRenderModelError*) [clone .cold]
 t CRenderModelManager::GetRenderModelThumbnailURL(char const*, char*, unsigned int, vr::EVRRenderModelError*)
 t CRenderModelManager::GetRenderModelThumbnailURL(char const*, char*, unsigned int, vr::EVRRenderModelError*) [clone .cold]
 t CRenderModelManager::IsComponentRelevantForInputState(char const*, char const*, unsigned long)
 t CRenderModelManager::IsComponentRelevantForInputState(char const*, char const*, unsigned long) [clone .cold]
 t CRenderModelManager::LoadComponentFromJson(CRenderModelManager::Component_t&, Json::Value const&, std::string const&)
 t CRenderModelManager::LoadComponentFromJson(CRenderModelManager::Component_t&, Json::Value const&, std::string const&) [clone .cold]
 t CRenderModelManager::LoadIntoTextureD3D11_Async(int, void*)
 t CRenderModelManager::LoadRenderModelInternal(char const*)
 t CRenderModelManager::LoadRenderModelInternal(char const*) [clone .cold]
 t CRenderModelManager::LoadRenderModel_Async(char const*, vr::RenderModel_t**)
 t CRenderModelManager::LoadRenderModel_Async(char const*, vr::RenderModel_t**) [clone .cold]
 t CRenderModelManager::LoadTextureD3D11_Async(int, void*, void**)
 t CRenderModelManager::LoadTextureInternal(int, void*)
 t CRenderModelManager::LoadTextureInternal(int, void*) [clone .cold]
 t CRenderModelManager::LoadTexture_Async(int, vr::RenderModel_TextureMap_t**)
 t CRenderModelManager::LoadTexture_Async(int, vr::RenderModel_TextureMap_t**) [clone .cold]
 t CRenderModelManager::ModelInfo_t::GetComponentByInputPath(unsigned long)
 t CRenderModelManager::ModelInfo_t::GetComponentByName(char const*)
 t CRenderModelManager::ModelInfo_t::GetComponentByName(char const*) [clone .part.0]
 t CRenderModelManager::PopulateNames()
 t CRenderModelManager::PopulateNames() [clone .cold]
 t CRenderModelManager::RegisterTextureFilePath(char const*, vr::RenderModelTextureOptions_t const*)
 t CRenderModelManager::RegisterTextureFilePath(char const*, vr::RenderModelTextureOptions_t const*) [clone .cold]
 t CRenderModelManager::RenderModelHasComponent(char const*, char const*)
 t CRenderModelManager::RenderModelHasComponent(char const*, char const*) [clone .cold]
 t CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)
 t CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*) [clone .cold]
 t CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(unsigned short&, unsigned short, unsigned short)#13}::operator()(unsigned short&, unsigned short, unsigned short) const [clone .isra.0]
 t CRenderModelManager::~CRenderModelManager()
 t CScopedEventDuration::CScopedEventDuration(char const*, ...)
 t CScopedEventDuration::~CScopedEventDuration()
 t CServerDriverHost_002::GetDeviceFromIndex(unsigned int)
 t CServerDriverHost_002::GetSettings(char const*)
 t CServerDriverHost_002::IsExiting()
 t CServerDriverHost_002::MCImageUpdated()
 t CServerDriverHost_002::PhysicalIpdSet(unsigned int, float)
 t CServerDriverHost_002::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CServerDriverHost_002::ProximitySensorState(unsigned int, bool)
 t CServerDriverHost_002::TrackedDeviceAdded(char const*)
 t CServerDriverHost_002::TrackedDeviceAxisUpdated(unsigned int, unsigned int, vr::VRControllerAxis_t const&)
 t CServerDriverHost_002::TrackedDeviceButtonPressed(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_002::TrackedDeviceButtonTouched(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_002::TrackedDeviceButtonUnpressed(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_002::TrackedDeviceButtonUntouched(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_002::TrackedDevicePoseUpdated(unsigned int, vr::DriverPose_t const&)
 t CServerDriverHost_002::TrackedDevicePropertiesChanged(unsigned int)
 t CServerDriverHost_002::VendorSpecificEvent(unsigned int, vr::EVREventType, vr::VREvent_Data_t const&, double)
 t CServerDriverHost_002::VsyncEvent(double)
 t CServerDriverHost_003::GetDeviceFromIndex(unsigned int)
 t CServerDriverHost_003::GetSettings(char const*)
 t CServerDriverHost_003::IsExiting()
 t CServerDriverHost_003::MCImageUpdated()
 t CServerDriverHost_003::PhysicalIpdSet(unsigned int, float)
 t CServerDriverHost_003::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CServerDriverHost_003::ProximitySensorState(unsigned int, bool)
 t CServerDriverHost_003::TrackedDeviceAdded(char const*)
 t CServerDriverHost_003::TrackedDeviceAxisUpdated(unsigned int, unsigned int, vr::VRControllerAxis_t const&)
 t CServerDriverHost_003::TrackedDeviceButtonPressed(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_003::TrackedDeviceButtonTouched(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_003::TrackedDeviceButtonUnpressed(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_003::TrackedDeviceButtonUntouched(unsigned int, vr::EVRButtonId, double)
 t CServerDriverHost_003::TrackedDevicePoseUpdated(unsigned int, vr::DriverPose_t const&)
 t CServerDriverHost_003::TrackedDevicePropertiesChanged(unsigned int)
 t CServerDriverHost_003::VendorSpecificEvent(unsigned int, vr::EVREventType, vr::VREvent_Data_t const&, double)
 t CServerDriverHost_003::VsyncEvent(double)
 t CServerTrackedDeviceProvider::FindOrCreateDeviceAdapter(void*, vr::EVRInitError*)
 t CServerTrackedDeviceProvider::InitInterfaceVersions()
 t CServerTrackedDeviceProvider::InitInterfaceVersions() [clone .cold]
 t CServerTrackedDeviceProvider::InitWithAdapter(std::string const&)
 t CServerTrackedDeviceProvider::InitWithAdapter(std::string const&) [clone .cold]
 t CServerTrackedDeviceProvider::~CServerTrackedDeviceProvider()
 t CServerTrackedDeviceProvider_002::Cleanup()
 t CServerTrackedDeviceProvider_002::EnterStandby()
 t CServerTrackedDeviceProvider_002::GetDriverContextLatest()
 t CServerTrackedDeviceProvider_002::GetInterfaceVersions()
 t CServerTrackedDeviceProvider_002::GetSourceVersion()
 t CServerTrackedDeviceProvider_002::Init(vr::IVRDriverContext*)
 t CServerTrackedDeviceProvider_002::LeaveStandby()
 t CServerTrackedDeviceProvider_002::RunFrame()
 t CServerTrackedDeviceProvider_002::ShouldBlockStandbyMode()
 t CServerTrackedDeviceProvider_002::~CServerTrackedDeviceProvider_002()
 t CServerTrackedDeviceProvider_003::Cleanup()
 t CServerTrackedDeviceProvider_003::EnterStandby()
 t CServerTrackedDeviceProvider_003::GetDriverContextLatest()
 t CServerTrackedDeviceProvider_003::GetInterfaceVersions()
 t CServerTrackedDeviceProvider_003::GetSourceVersion()
 t CServerTrackedDeviceProvider_003::Init(vr::IVRDriverContext*)
 t CServerTrackedDeviceProvider_003::LeaveStandby()
 t CServerTrackedDeviceProvider_003::RunFrame()
 t CServerTrackedDeviceProvider_003::ShouldBlockStandbyMode()
 t CServerTrackedDeviceProvider_003::~CServerTrackedDeviceProvider_003()
 t CServerTrackedDeviceProvider_Latest::Cleanup()
 t CServerTrackedDeviceProvider_Latest::EnterStandby()
 t CServerTrackedDeviceProvider_Latest::GetDriverContextLatest()
 t CServerTrackedDeviceProvider_Latest::GetInterfaceVersions()
 t CServerTrackedDeviceProvider_Latest::GetSourceVersion()
 t CServerTrackedDeviceProvider_Latest::Init(vr::IVRDriverContext*)
 t CServerTrackedDeviceProvider_Latest::LeaveStandby()
 t CServerTrackedDeviceProvider_Latest::RunFrame()
 t CServerTrackedDeviceProvider_Latest::ShouldBlockStandbyMode()
 t CServerTrackedDeviceProvider_Latest::~CServerTrackedDeviceProvider_Latest()
 t CSettingsManager::CSettingsManager()
 t CSettingsManager::CSettingsManager() [clone .cold]
 t CSettingsManager::FillJsonValueWithSettingsValues(bool, Json::Value&)
 t CSettingsManager::FillJsonValueWithSettingsValues(bool, Json::Value&) [clone .cold]
 t CSettingsManager::GenerateChangeNotifications()
 t CSettingsManager::GenerateChangeNotifications() [clone .cold]
 t CSettingsManager::GetBool(char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::GetBool(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetConfigPath(std::string const&)
 t CSettingsManager::GetConfigPath(std::string const&) [clone .cold]
 t CSettingsManager::GetCurrentDirtyCount(char const*)
 t CSettingsManager::GetDefaultBool(char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::GetDefaultBool(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetDefaultNumeric(char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::GetDefaultNumeric(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetDefaultSettingsFilename()
 t CSettingsManager::GetDefaultSettingsFilename() [clone .cold]
 t CSettingsManager::GetDefaultString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*)
 t CSettingsManager::GetDefaultString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetDefaultString(char const*, char const*, std::string*, vr::EVRSettingsError*)
 t CSettingsManager::GetDefaultString(char const*, char const*, std::string*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetFloat(char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::GetHiddenDefaultValues(Json::Value&)
 t CSettingsManager::GetHiddenDefaultValues(Json::Value&) [clone .cold]
 t CSettingsManager::GetInt32(char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::GetKeysInSection(char const*, std::vector<std::string, std::allocator<std::string> >*, vr::EVRSettingsError*)
 t CSettingsManager::GetKeysInSection(char const*, std::vector<std::string, std::allocator<std::string> >*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetNumeric(char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::GetSetting(char const*, char const*, bool, ESettingValueType)
 t CSettingsManager::GetSetting(char const*, char const*, bool, ESettingValueType) [clone .cold]
 t CSettingsManager::GetSetting(std::pair<std::string, std::string> const&, bool, ESettingValueType)
 t CSettingsManager::GetSetting(std::pair<std::string, std::string> const&, bool, ESettingValueType) [clone .cold]
 t CSettingsManager::GetSetting(std::string const&, std::string const&, bool, ESettingValueType)
 t CSettingsManager::GetSetting(std::string const&, std::string const&, bool, ESettingValueType) [clone .cold]
 t CSettingsManager::GetSettingsErrorNameFromEnum(vr::EVRSettingsError)
 t CSettingsManager::GetString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*)
 t CSettingsManager::GetString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetString(char const*, char const*, std::string*, vr::EVRSettingsError*)
 t CSettingsManager::GetString(char const*, char const*, std::string*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::GetUserSettingsJson(Json::Value&, std::string const&)
 t CSettingsManager::GetUserSettingsJson(Json::Value&, std::string const&) [clone .cold]
 t CSettingsManager::GetValueType(ESettingValueType*, char const*, char const*)
 t CSettingsManager::GetValueType(ESettingValueType*, char const*, char const*) [clone .cold]
 t CSettingsManager::Init(CDriverManager*, IVRServer*)
 t CSettingsManager::Init(CDriverManager*, IVRServer*) [clone .cold]
 t CSettingsManager::LoadDefaultSettingsFromRootPath(std::string const&, Json::Value&)
 t CSettingsManager::LoadDefaultSettingsFromRootPath(std::string const&, Json::Value&) [clone .cold]
 t CSettingsManager::LoadDriverDefaultSettings(std::string const&, CDriverManager*, Json::Value&)
 t CSettingsManager::LoadDriverDefaultSettings(std::string const&, CDriverManager*, Json::Value&) [clone .cold]
 t CSettingsManager::LoadRuntimeDefaultSettings(std::string&, Json::Value&)
 t CSettingsManager::LoadUserSettings(std::string&, Json::Value&)
 t CSettingsManager::LoadUserSettings(std::string&, Json::Value&) [clone .cold]
 t CSettingsManager::MarkSectionDirtyFlags(std::string const&, std::string const&)
 t CSettingsManager::MarkSectionDirtyFlags(std::string const&, std::string const&) [clone .part.0]
 t CSettingsManager::MergeAdditionalDeviceSettings(unsigned int, std::string)
 t CSettingsManager::MergeAdditionalDeviceSettings(unsigned int, std::string) [clone .cold]
 t CSettingsManager::ParseSettingsFromString(std::string const&, std::string const&, Json::Value&)
 t CSettingsManager::ParseSettingsFromString(std::string const&, std::string const&, Json::Value&) [clone .cold]
 t CSettingsManager::PopulateSettingsFromJson(Json::Value&, bool)
 t CSettingsManager::PopulateSettingsFromJson(Json::Value&, bool) [clone .cold]
 t CSettingsManager::ReadRawUserSettingsFileToString(std::string const&, std::string const&)
 t CSettingsManager::ReadRawUserSettingsFileToString(std::string const&, std::string const&) [clone .cold]
 t CSettingsManager::RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::RemoveSection(char const*, vr::EVRSettingsError*)
 t CSettingsManager::RemoveSection(char const*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::SetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t CSettingsManager::SetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t CSettingsManager::SetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t CSettingsManager::SetNumeric(char const*, char const*, double, vr::EVRSettingsError*)
 t CSettingsManager::SetString(char const*, char const*, char const*, vr::EVRSettingsError*)
 t CSettingsManager::SetString(char const*, char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::ToJson(Json::Value&, bool)
 t CSettingsManager::WriteToDiskIfNeeded(vr::EVRSettingsError*)
 t CSettingsManager::WriteToDiskIfNeeded(vr::EVRSettingsError*) [clone .cold]
 t CSettingsManager::~CSettingsManager()
 t CSettingsValue::~CSettingsValue()
 t CSharedBufferLinux::CSharedBufferLinux(vr::IVRIPCResourceManagerClient*)
 t CSharedBufferLinux::CreateVulkanBuffer(VkDevice_T*, VkPhysicalDeviceMemoryProperties*, unsigned long, unsigned int, bool)
 t CSharedBufferLinux::GetDeviceSize() const
 t CSharedBufferLinux::GetDeviceSize() const [clone .cold]
 t CSharedBufferLinux::GetSize() const
 t CSharedBufferLinux::GetSize() const [clone .cold]
 t CSharedBufferLinux::GetType() const
 t CSharedBufferLinux::GetUsage() const
 t CSharedBufferLinux::GetUsage() const [clone .cold]
 t CSharedBufferLinux::GetVulkanBuffer() const
 t CSharedBufferLinux::GetVulkanBufferMemory() const
 t CSharedBufferLinux::GetVulkanMemoryHandleType() const
 t CSharedBufferLinux::ImportVulkanBuffer(VkDevice_T*, unsigned long)
 t CSharedBufferLinux::ImportVulkanBuffer(VkDevice_T*, unsigned long) [clone .cold]
 t CSharedBufferLinux::PrepareVulkanBufferForExport(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned int, unsigned int, unsigned int, unsigned int)
 t CSharedBufferLinux::PrepareVulkanBufferForExport(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned int, unsigned int, unsigned int, unsigned int) [clone .cold]
 t CSharedBufferLinux::RequestSharedVulkanBuffer(unsigned long, unsigned int)
 t CSharedBufferLinux::~CSharedBufferLinux()
 t CSharedCountingSemaphoreLinux::CSharedCountingSemaphoreLinux(vr::IVRIPCResourceManagerClient*)
 t CSharedCountingSemaphoreLinux::CreateVulkanCountingSemaphore(VkDevice_T*)
 t CSharedCountingSemaphoreLinux::CreateVulkanCountingSemaphore(VkDevice_T*) [clone .cold]
 t CSharedCountingSemaphoreLinux::GetType() const
 t CSharedCountingSemaphoreLinux::ImportVulkanCountingSemaphore(VkDevice_T*, unsigned long)
 t CSharedCountingSemaphoreLinux::Signal(unsigned long, vr::VRNativeDevice_t const*)
 t CSharedCountingSemaphoreLinux::Signal(unsigned long, vr::VRNativeDevice_t const*) [clone .cold]
 t CSharedCountingSemaphoreLinux::Wait(unsigned long, vr::VRNativeDevice_t const*)
 t CSharedCountingSemaphoreLinux::Wait(unsigned long, vr::VRNativeDevice_t const*) [clone .cold]
 t CSharedCountingSemaphoreLinux::~CSharedCountingSemaphoreLinux()
 t CSharedImageLinux::CSharedImageLinux(vr::IVRIPCResourceManagerClient*)
 t CSharedImageLinux::CreateVulkanImage(VkDevice_T*, VkFormat, unsigned int, unsigned int, bool)
 t CSharedImageLinux::GetDeviceSize() const
 t CSharedImageLinux::GetDeviceSize() const [clone .cold]
 t CSharedImageLinux::GetFormat() const
 t CSharedImageLinux::GetFormat() const [clone .cold]
 t CSharedImageLinux::GetHeight() const
 t CSharedImageLinux::GetHeight() const [clone .cold]
 t CSharedImageLinux::GetOGLTexture()
 t CSharedImageLinux::GetType() const
 t CSharedImageLinux::GetUsage() const
 t CSharedImageLinux::GetUsage() const [clone .cold]
 t CSharedImageLinux::GetVulkanImage() const
 t CSharedImageLinux::GetVulkanImageMemory() const
 t CSharedImageLinux::GetVulkanLayout() const
 t CSharedImageLinux::GetVulkanLayout() const [clone .cold]
 t CSharedImageLinux::GetVulkanMemoryHandleType() const
 t CSharedImageLinux::GetVulkanQueueIndex() const
 t CSharedImageLinux::GetVulkanQueueIndex() const [clone .cold]
 t CSharedImageLinux::GetVulkanSharingMode() const
 t CSharedImageLinux::GetVulkanSharingMode() const [clone .cold]
 t CSharedImageLinux::GetWidth() const
 t CSharedImageLinux::GetWidth() const [clone .cold]
 t CSharedImageLinux::HasDepthStencil() const
 t CSharedImageLinux::ImportOGLImage(unsigned long)
 t CSharedImageLinux::ImportOGLImage(unsigned long) [clone .cold]
 t CSharedImageLinux::ImportVulkanImage(VkDevice_T*, unsigned long)
 t CSharedImageLinux::ImportVulkanImage(VkDevice_T*, unsigned long) [clone .cold]
 t CSharedImageLinux::IsDedicated() const
 t CSharedImageLinux::IsDedicated() const [clone .cold]
 t CSharedImageLinux::IsMappable() const
 t CSharedImageLinux::IsRenderable() const
 t CSharedImageLinux::IsRenderable() const [clone .cold]
 t CSharedImageLinux::PrepareForInterop()
 t CSharedImageLinux::PrepareVulkanImageForExport(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, VkFormat, VkSharingMode, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool, bool, unsigned int, unsigned int const*)
 t CSharedImageLinux::PrepareVulkanImageForExport(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, VkFormat, VkSharingMode, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool, bool, unsigned int, unsigned int const*) [clone .cold]
 t CSharedImageLinux::RequestSharedVulkanImage(VkFormat, unsigned int, unsigned int, bool)
 t CSharedImageLinux::SetVulkanLayout(VkImageLayout)
 t CSharedImageLinux::SetVulkanLayout(VkImageLayout) [clone .cold]
 t CSharedImageLinux::SetVulkanQueueIndex(unsigned int)
 t CSharedImageLinux::SetVulkanQueueIndex(unsigned int) [clone .cold]
 t CSharedImageLinux::~CSharedImageLinux()
 t CSharedResourceBaseLinux::AcquireSemaphoreToWait(vr::IVRSharedSemaphore**)
 t CSharedResourceBaseLinux::AcquireSemaphoreToWait(vr::IVRSharedSemaphore**) [clone .cold]
 t CSharedResourceBaseLinux::AcquireSignalSemaphores()
 t CSharedResourceBaseLinux::AcquireSignalSemaphores() [clone .cold]
 t CSharedResourceBaseLinux::AllocateSemaphoreSlot(VRCompositorResourceState_t*, VkDevice_T*, unsigned int)
 t CSharedResourceBaseLinux::CSharedResourceBaseLinux(vr::IVRIPCResourceManagerClient*)
 t CSharedResourceBaseLinux::CSharedResourceData::GetFromCacheLocked(VkDevice_T*, unsigned long, bool&)
 t CSharedResourceBaseLinux::CSharedResourceData::~CSharedResourceData()
 t CSharedResourceBaseLinux::CleanupAssociatedResources()
 t CSharedResourceBaseLinux::CreateAssociatedResources(VkDevice_T*, unsigned int, bool)
 t CSharedResourceBaseLinux::CreateAssociatedResources(VkDevice_T*, unsigned int, bool) [clone .cold]
 t CSharedResourceBaseLinux::CreateFD()
 t CSharedResourceBaseLinux::CreateForExport()
 t CSharedResourceBaseLinux::CreateForExport() [clone .cold]
 t CSharedResourceBaseLinux::FreeSemaphoreSlot(unsigned int)
 t CSharedResourceBaseLinux::GetHandle() const
 t CSharedResourceBaseLinux::GetUpdateCount() const
 t CSharedResourceBaseLinux::GetUpdateCount() const [clone .cold]
 t CSharedResourceBaseLinux::ImportAssociatedResources(VkDevice_T*)
 t CSharedResourceBaseLinux::ImportAssociatedResources(VkDevice_T*) [clone .cold]
 t CSharedResourceBaseLinux::ImportSemaphoreSlot(VRCompositorResourceState_t const*, VkDevice_T*, unsigned int)
 t CSharedResourceBaseLinux::ImportSharedResource(VkDevice_T*, unsigned long)
 t CSharedResourceBaseLinux::ImportSharedState(unsigned long)
 t CSharedResourceBaseLinux::IncrementUpdateCount()
 t CSharedResourceBaseLinux::IncrementUpdateCount() [clone .cold]
 t CSharedResourceBaseLinux::InitSharedState()
 t CSharedResourceBaseLinux::InitSharedState() [clone .cold]
 t CSharedResourceBaseLinux::IsValidSemaphoreSlot(VRCompositorResourceState_t const*, unsigned int)
 t CSharedResourceBaseLinux::RefResource(unsigned long, int*)
 t CSharedResourceBaseLinux::SignalSubmissionCompleted()
 t CSharedResourceBaseLinux::SignalSubmissionCompleted() [clone .cold]
 t CSharedResourceBaseLinux::SupportsGLMemoryInterop()
 t CSharedResourceBaseLinux::SupportsGLSemaphoreInterop()
 t CSharedResourceBaseLinux::WaitSubmissionCompleted(vr::IVRSharedSemaphore*)
 t CSharedResourceBaseLinux::WaitSubmissionCompleted(vr::IVRSharedSemaphore*) [clone .cold]
 t CSharedResourceBaseLinux::~CSharedResourceBaseLinux()
 t CSharedResourceNamespaceClient::Init(bool)
 t CSharedResourceNamespaceClient::~CSharedResourceNamespaceClient()
 t CSharedResourceNamespaceServer::Run()
 t CSharedResourceNamespaceServer::~CSharedResourceNamespaceServer()
 t CSharedSemaphoreLinux::CSharedSemaphoreLinux(vr::IVRIPCResourceManagerClient*)
 t CSharedSemaphoreLinux::CreateVulkanSemaphore(VkDevice_T*)
 t CSharedSemaphoreLinux::GetOGLSemaphore()
 t CSharedSemaphoreLinux::GetState()
 t CSharedSemaphoreLinux::GetState() [clone .cold]
 t CSharedSemaphoreLinux::GetType() const
 t CSharedSemaphoreLinux::GetVulkanSemaphore() const
 t CSharedSemaphoreLinux::ImportVulkanSemaphore(VkDevice_T*, unsigned long)
 t CSharedSemaphoreLinux::ImportVulkanSemaphore(VkDevice_T*, unsigned long) [clone .cold]
 t CSharedSemaphoreLinux::InitMutex()
 t CSharedSemaphoreLinux::InitMutex() [clone .cold]
 t CSharedSemaphoreLinux::IsResetRequired()
 t CSharedSemaphoreLinux::IsResetRequired() [clone .cold]
 t CSharedSemaphoreLinux::Lock(unsigned int)
 t CSharedSemaphoreLinux::PrepareVulkanSemaphoreForExport(VkDevice_T*, VkSemaphore_T*)
 t CSharedSemaphoreLinux::PrepareVulkanSemaphoreForExport(VkDevice_T*, VkSemaphore_T*) [clone .cold]
 t CSharedSemaphoreLinux::RequestSharedVulkanSemaphore()
 t CSharedSemaphoreLinux::SetState(VRCompositorResourceState_t::SemaphoreState)
 t CSharedSemaphoreLinux::SetState(VRCompositorResourceState_t::SemaphoreState) [clone .cold]
 t CSharedSemaphoreLinux::Unlock()
 t CSharedSemaphoreLinux::~CSharedSemaphoreLinux()
 t CSimulatedActionBase::AddBinding(Mode_t const&, ModeSlot_t const&, std::string const&)
 t CSimulatedActionBase::AddBinding(Mode_t const&, ModeSlot_t const&, std::string const&) [clone .cold]
 t CSimulatedActionBase::AddBinding(std::string, std::string const&, std::string const&, std::string const&, std::string const&, std::string const&)
 t CSimulatedActionBase::AddBinding(std::string, std::string const&, std::string const&, std::string const&, std::string const&, std::string const&) [clone .cold]
 t CSimulatedActionBase::BInit(Json::Value const&, CActionBindingConfigGenerator const*, std::string*)
 t CSimulatedActionBase::BInit(Json::Value const&, CActionBindingConfigGenerator const*, std::string*) [clone .cold]
 t CSimulatedActionBase::SimActionBinding_t::~SimActionBinding_t()
 t CSimulatedTrackpadClick::Apply(CActionBindingConfigGenerator*)
 t CSimulatedTrackpadClick::Apply(CActionBindingConfigGenerator*) [clone .cold]
 t CSimulatedTrackpadClick::BInit(Json::Value const&, CActionBindingConfigGenerator const*, std::string*)
 t CSimulatedTrackpadClick::BInit(Json::Value const&, CActionBindingConfigGenerator const*, std::string*) [clone .cold]
 t CSimulatedTrackpadClick::GetActionType()
 t CSimulatedTrackpadClick::~CSimulatedTrackpadClick()
 t CSimulatedTriggerPull::Apply(CActionBindingConfigGenerator*)
 t CSimulatedTriggerPull::Apply(CActionBindingConfigGenerator*) [clone .cold]
 t CSimulatedTriggerPull::BInit(Json::Value const&, CActionBindingConfigGenerator const*, std::string*)
 t CSimulatedTriggerPull::BInit(Json::Value const&, CActionBindingConfigGenerator const*, std::string*) [clone .cold]
 t CSimulatedTriggerPull::GetActionType()
 t CSimulatedTriggerPull::~CSimulatedTriggerPull()
 t CSingleAppInstance::CSingleAppInstance(char const*, bool, bool)
 t CSingleAppInstance::CSingleAppInstance(char const*, bool, bool) [clone .cold]
 t CSingleAppInstance::CheckForOtherRunningInstances(bool, bool)
 t CSingleAppInstance::~CSingleAppInstance()
 t CSkeletonList::GetSkeletonDescription(ESkeletonID)
 t CSkeletonList::GetSkeletonDescription(char const*)
 t CSkeletonList::GetSkeletonDescription(unsigned long)
 t CSkeletonList::GetSkeletonDescription(vr::EVRHandSide)
 t CSkeletonList::GetSkeletonIDFromResourceName(std::string const&)
 t CSkeletonList::InitializePathHandles(vr::IVRPaths*)
 t CSmartPtr<CAnimPose, CRefCountAccessor> CallOp<CBlendPoseOperation, CBlendPoseOperation::OpSettings>(CPoseUpdateContext&, CPackedDataT<false> const&, PackedHandleID)
 t CSmartPtr<CAnimPose, CRefCountAccessor> CallOp<CKeyframeSamplerPoseOperation, CKeyframeSamplerPoseOperation::OpSettings>(CPoseUpdateContext&, CPackedDataT<false> const&, PackedHandleID)
 t CSmartPtr<CAnimPose, CRefCountAccessor> CallOp<CMirrorPoseOperation, CMirrorPoseOperation::OpSettings>(CPoseUpdateContext&, CPackedDataT<false> const&, PackedHandleID)
 t CSmartPtr<CAnimPose, CRefCountAccessor> CallOp<CTwoBoneIKPoseOperation, CTwoBoneIKPoseOperation::OpSettings>(CPoseUpdateContext&, CPackedDataT<false> const&, PackedHandleID)
 t CStopwatch::CStopwatch()
 t CStopwatch::GetElapsedMs()
 t CStopwatch::GetElapsedSeconds()
 t CStopwatch::Reset()
 t CStopwatch::Start()
 t CStopwatch::Stop()
 t CSxrAction::BHasSubactionPath(unsigned long) const
 t CSxrAction::BuildManifestEntry()
 t CSxrAction::BuildManifestEntry() [clone .cold]
 t CSxrAction::CSxrAction(CSxrActionSet*, XrActionCreateInfo const*)
 t CSxrAction::CSxrAction(CSxrActionSet*, XrActionCreateInfo const*) [clone .cold]
 t CSxrAction::GetRawFromPoseAction(XrSpaceLocation&, XrSpaceVelocity&, unsigned long, long)
 t CSxrAction::GetTrackedDeviceIndexForPoseAction(unsigned long) const
 t CSxrAction::Init()
 t CSxrAction::~CSxrAction()
 t CSxrActionSet::BSubactionPathIsAllowed(unsigned long)
 t CSxrActionSet::BSubactionPathIsAllowed(unsigned long) [clone .cold]
 t CSxrActionSet::CSxrActionSet(CSxrInstance*, XrActionSetCreateInfo const*)
 t CSxrActionSet::CSxrActionSet(CSxrInstance*, XrActionSetCreateInfo const*) [clone .cold]
 t CSxrActionSet::GetOverridePriority(XrActiveActionSetPrioritiesEXT const*, CSxrActionSet*)
 t CSxrActionSet::Init()
 t CSxrActionSet::~CSxrActionSet()
 t CSxrChildHandle<CSxrAction, XrAction_T*, CSxrActionSet>::~CSxrChildHandle()
 t CSxrChildHandle<CSxrActionSet, XrActionSet_T*, CSxrInstance>::~CSxrChildHandle()
 t CSxrChildHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*, CSxrSession>::~CSxrChildHandle()
 t CSxrChildHandle<CSxrSession, XrSession_T*, CSxrInstance>::~CSxrChildHandle()
 t CSxrChildHandle<CSxrSwapchainBase, XrSwapchain_T*, CSxrSession>::~CSxrChildHandle()
 t CSxrChildVariableParentHandle<CSxrSpace, XrSpace_T*, CSxrAction, CSxrSession>::~CSxrChildVariableParentHandle()
 t CSxrCompositorFactory::CreateCompositor(CSxrInstance*)
 t CSxrCompositorFactory::CreateCompositor(CSxrInstance*) [clone .cold]
 t CSxrCompositorOpenVR::BeginFrame(CFrameData*)
 t CSxrCompositorOpenVR::CSxrCompositorOpenVR(CSxrInstance*)
 t CSxrCompositorOpenVR::ComposeLayerProjection(CFrameData*, XrCompositionLayerProjection const*, long, bool)
 t CSxrCompositorOpenVR::ComposeLayerQuad(CFrameData*, XrCompositionLayerQuad const*, long)
 t CSxrCompositorOpenVR::CreateVulkanDevice(XrVulkanDeviceCreateInfoKHR const*, VkDevice_T**, VkResult*)
 t CSxrCompositorOpenVR::CreateVulkanDevice(XrVulkanDeviceCreateInfoKHR const*, VkDevice_T**, VkResult*) [clone .cold]
 t CSxrCompositorOpenVR::CreateVulkanInstance(XrVulkanInstanceCreateInfoKHR const*, VkInstance_T**, VkResult*)
 t CSxrCompositorOpenVR::CreateVulkanInstance(XrVulkanInstanceCreateInfoKHR const*, VkInstance_T**, VkResult*) [clone .cold]
 t CSxrCompositorOpenVR::CreateXrBinding(CSxrInstance*, SxrCommonBase const*)
 t CSxrCompositorOpenVR::CreateXrBinding(CSxrInstance*, SxrCommonBase const*) [clone .cold]
 t CSxrCompositorOpenVR::DiscardFrame(CFrameData*)
 t CSxrCompositorOpenVR::EndFrame(CFrameData*, XrFrameEndInfo const&)
 t CSxrCompositorOpenVR::GetGraphicsRequirements(XrGraphicsRequirementsOpenGLKHR*)
 t CSxrCompositorOpenVR::GetGraphicsRequirements(XrGraphicsRequirementsVulkanKHR*)
 t CSxrCompositorOpenVR::GetNextOverlay(CFrameData*, unsigned long*)
 t CSxrCompositorOpenVR::GetNextOverlay(CFrameData*, unsigned long*) [clone .cold]
 t CSxrCompositorOpenVR::GetVulkanDeviceExtensions()
 t CSxrCompositorOpenVR::GetVulkanDeviceExtensions() [clone .cold]
 t CSxrCompositorOpenVR::GetVulkanGraphicsDevice(VkInstance_T*, VkPhysicalDevice_T*&)
 t CSxrCompositorOpenVR::GetVulkanInstanceExtensions()
 t CSxrCompositorOpenVR::GetVulkanInstanceExtensions() [clone .cold]
 t CSxrCompositorOpenVR::Init()
 t CSxrCompositorOpenVR::OnSessionCreated()
 t CSxrCompositorOpenVR::OnSessionDestroyed()
 t CSxrCompositorOpenVR::SubmitBlankEyeBuffers(CFrameData*)
 t CSxrCompositorOpenVR::WaitFrame(CFrameData*, CFrameData*, XrFrameState*)
 t CSxrCompositorOpenVR::~CSxrCompositorOpenVR()
 t CSxrCompositorPrism::BeginFrame(CFrameData*)
 t CSxrCompositorPrism::CSxrCompositorPrism(CSxrInstance*)
 t CSxrCompositorPrism::CSxrCompositorPrism(CSxrInstance*) [clone .cold]
 t CSxrCompositorPrism::ComposeLayerProjection(CFrameData*, XrCompositionLayerProjection const*, long)
 t CSxrCompositorPrism::ComposeLayerQuad(CFrameData*, XrCompositionLayerQuad const*, long)
 t CSxrCompositorPrism::ComposeLayerQuad(CFrameData*, XrCompositionLayerQuad const*, long) [clone .cold]
 t CSxrCompositorPrism::CreateVulkanDevice(XrVulkanDeviceCreateInfoKHR const*, VkDevice_T**, VkResult*)
 t CSxrCompositorPrism::CreateVulkanInstance(XrVulkanInstanceCreateInfoKHR const*, VkInstance_T**, VkResult*)
 t CSxrCompositorPrism::CreateXrBinding(CSxrInstance*, SxrCommonBase const*)
 t CSxrCompositorPrism::CreateXrBinding(CSxrInstance*, SxrCommonBase const*) [clone .cold]
 t CSxrCompositorPrism::DiscardFrame(CFrameData*)
 t CSxrCompositorPrism::EndFrame(CFrameData*, XrFrameEndInfo const&)
 t CSxrCompositorPrism::GetGraphicsRequirements(XrGraphicsRequirementsOpenGLKHR*)
 t CSxrCompositorPrism::GetGraphicsRequirements(XrGraphicsRequirementsVulkanKHR*)
 t CSxrCompositorPrism::GetVulkanDeviceExtensions()
 t CSxrCompositorPrism::GetVulkanGraphicsDevice(VkInstance_T*, VkPhysicalDevice_T*&)
 t CSxrCompositorPrism::GetVulkanInstanceExtensions()
 t CSxrCompositorPrism::Init()
 t CSxrCompositorPrism::OnSessionCreated()
 t CSxrCompositorPrism::OnSessionDestroyed()
 t CSxrCompositorPrism::WaitFrame(CFrameData*, CFrameData*, XrFrameState*)
 t CSxrCompositorPrism::~CSxrCompositorPrism()
 t CSxrDeletableBase::~CSxrDeletableBase()
 t CSxrDispatchableHandle<CSxrAction, XrAction_T*>::~CSxrDispatchableHandle()
 t CSxrDispatchableHandle<CSxrActionSet, XrActionSet_T*>::~CSxrDispatchableHandle()
 t CSxrDispatchableHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*>::~CSxrDispatchableHandle()
 t CSxrDispatchableHandle<CSxrInstance, XrInstance_T*>::~CSxrDispatchableHandle()
 t CSxrDispatchableHandle<CSxrSession, XrSession_T*>::~CSxrDispatchableHandle()
 t CSxrDispatchableHandle<CSxrSpace, XrSpace_T*>::~CSxrDispatchableHandle()
 t CSxrDispatchableHandle<CSxrSwapchainBase, XrSwapchain_T*>::~CSxrDispatchableHandle()
 t CSxrGenericTrackerManager::CSxrGenericTrackerManager(CSxrInstance*)
 t CSxrGenericTrackerManager::CSxrGenericTrackerManager(CSxrInstance*) [clone .cold]
 t CSxrGenericTrackerManager::CheckActiveTrackers(unsigned long)
 t CSxrGenericTrackerManager::CheckActiveTrackers(unsigned long) [clone .cold]
 t CSxrGenericTrackerManager::CheckTopLevelUserPath(unsigned long)
 t CSxrGenericTrackerManager::ConvertRoleToUserPath(unsigned long, unsigned long*)
 t CSxrGenericTrackerManager::EnableViveTracker(XrGenericTracker*)
 t CSxrGenericTrackerManager::EnableViveTracker(XrGenericTracker*) [clone .cold]
 t CSxrGenericTrackerManager::EnumerateViveTrackerPaths(CSxrInstance*, unsigned int, unsigned int*, XrViveTrackerPathsHTCX*)
 t CSxrGenericTrackerManager::GeneratePersistentPath(unsigned int)
 t CSxrGenericTrackerManager::GeneratePersistentPath(unsigned int) [clone .cold]
 t CSxrGenericTrackerManager::GenerateRolePath(unsigned int)
 t CSxrGenericTrackerManager::GenerateRolePath(unsigned int) [clone .cold]
 t CSxrGenericTrackerManager::GetTrackerControllerEquivalent(std::string)
 t CSxrGenericTrackerManager::GetTrackerRole(unsigned long)
 t CSxrGenericTrackerManager::GetTrackerRolePath(std::string, bool)
 t CSxrGenericTrackerManager::GetTrackerRolePath(std::string, bool) [clone .cold]
 t CSxrGenericTrackerManager::GetTrackerTopLevelPaths(bool)
 t CSxrGenericTrackerManager::GetTrackerTopLevelPaths(bool) [clone .cold]
 t CSxrGenericTrackerManager::ProcessActionSubPath(unsigned long*, unsigned long*)
 t CSxrGenericTrackerManager::ProcessActionSubPath(unsigned long*, unsigned long*) [clone .cold]
 t CSxrGenericTrackerManager::TranslateTrackerInputPath(unsigned long)
 t CSxrGenericTrackerManager::TranslateTrackerInputPath(unsigned long) [clone .cold]
 t CSxrGenericTrackerManager::TranslateViveTopLevelPath(unsigned long)
 t CSxrGenericTrackerManager::~CSxrGenericTrackerManager()
 t CSxrGraphicsBindingGLOpenVR::CGLContextLock::~CGLContextLock()
 t CSxrGraphicsBindingGLOpenVR::CSxrGraphicsBindingGLOpenVR(CSxrInstance*, XrGraphicsBindingOpenGLXlibKHR const*)
 t CSxrGraphicsBindingGLOpenVR::CreateSwapchain(CSxrSession*, XrSwapchainCreateInfo const*)
 t CSxrGraphicsBindingGLOpenVR::CreateSwapchain(CSxrSession*, XrSwapchainCreateInfo const*) [clone .cold]
 t CSxrGraphicsBindingGLOpenVR::CreateTexture(long, bool, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int&)
 t CSxrGraphicsBindingGLOpenVR::DeleteTexture(unsigned int&)
 t CSxrGraphicsBindingGLOpenVR::DeleteTexture(unsigned int&) [clone .cold]
 t CSxrGraphicsBindingGLOpenVR::GetBindingType()
 t CSxrGraphicsBindingGLOpenVR::GetBlankTexture()
 t CSxrGraphicsBindingGLOpenVR::GetBlankTexture() [clone .cold]
 t CSxrGraphicsBindingGLOpenVR::GetSwapchainSupportedFormats()
 t CSxrGraphicsBindingGLOpenVR::Init(SxrCommonBase const*)
 t CSxrGraphicsBindingGLOpenVR::IsValid()
 t CSxrGraphicsBindingGLOpenVR::PostEndFrame()
 t CSxrGraphicsBindingGLOpenVR::PreEndFrame()
 t CSxrGraphicsBindingGLOpenVR::RestoreContextInternal()
 t CSxrGraphicsBindingGLOpenVR::SetContextInternal()
 t CSxrGraphicsBindingGLOpenVR::SetContextInternal() [clone .part.0]
 t CSxrGraphicsBindingGLOpenVR::~CSxrGraphicsBindingGLOpenVR()
 t CSxrGraphicsBindingPrism::AddTextureFormatIfSupported(long)
 t CSxrGraphicsBindingPrism::CSxrGraphicsBindingPrism(CSxrInstance*, CSxrCompositorPrism*)
 t CSxrGraphicsBindingPrism::CreateSwapchain(CSxrSession*, XrSwapchainCreateInfo const*)
 t CSxrGraphicsBindingPrism::CreateSwapchain(CSxrSession*, XrSwapchainCreateInfo const*) [clone .cold]
 t CSxrGraphicsBindingPrism::GetBindingType()
 t CSxrGraphicsBindingPrism::GetBlankTexture()
 t CSxrGraphicsBindingPrism::GetSwapchainSupportedFormats()
 t CSxrGraphicsBindingPrism::Init(SxrCommonBase const*)
 t CSxrGraphicsBindingPrism::InitVulkan2(XrGraphicsBindingVulkanKHR const*)
 t CSxrGraphicsBindingPrism::~CSxrGraphicsBindingPrism()
 t CSxrGraphicsBindingVulkanOpenVR::CSxrGraphicsBindingVulkanOpenVR(CSxrInstance*, XrGraphicsBindingVulkanKHR const*, CSxrCompositorOpenVR*)
 t CSxrGraphicsBindingVulkanOpenVR::CSxrGraphicsBindingVulkanOpenVR(CSxrInstance*, XrGraphicsBindingVulkanKHR const*, CSxrCompositorOpenVR*) [clone .cold]
 t CSxrGraphicsBindingVulkanOpenVR::CreateSwapchain(CSxrSession*, XrSwapchainCreateInfo const*)
 t CSxrGraphicsBindingVulkanOpenVR::CreateSwapchain(CSxrSession*, XrSwapchainCreateInfo const*) [clone .cold]
 t CSxrGraphicsBindingVulkanOpenVR::GetBindingType()
 t CSxrGraphicsBindingVulkanOpenVR::GetBlankTexture()
 t CSxrGraphicsBindingVulkanOpenVR::GetBlankTexture() [clone .cold]
 t CSxrGraphicsBindingVulkanOpenVR::GetSwapchainSupportedFormats()
 t CSxrGraphicsBindingVulkanOpenVR::Init(SxrCommonBase const*)
 t CSxrGraphicsBindingVulkanOpenVR::PreBeginFrame()
 t CSxrGraphicsBindingVulkanOpenVR::PreBeginFrame() [clone .cold]
 t CSxrGraphicsBindingVulkanOpenVR::PreEndFrame()
 t CSxrGraphicsBindingVulkanOpenVR::PreEndFrame() [clone .cold]
 t CSxrGraphicsBindingVulkanOpenVR::~CSxrGraphicsBindingVulkanOpenVR()
 t CSxrHandTrackerEXT::CSxrHandTrackerEXT(CSxrSession*, XrHandTrackerCreateInfoEXT const*)
 t CSxrHandTrackerEXT::CSxrHandTrackerEXT(CSxrSession*, XrHandTrackerCreateInfoEXT const*) [clone .cold]
 t CSxrHandTrackerEXT::GetHandSide() const
 t CSxrHandTrackerEXT::GetJointFlags(XrHandJointEXT) const
 t CSxrHandTrackerEXT::GetJointPose(XrHandJointEXT, XrPosef const&, vr::VRBoneTransform_t const*) const
 t CSxrHandTrackerEXT::GetJointRadius(XrHandJointEXT) const
 t CSxrHandTrackerEXT::GetPalmPose(vr::VRBoneTransform_t const*) const
 t CSxrHandTrackerEXT::Init()
 t CSxrHandTrackerEXT::LocateJoints(XrHandJointsLocateInfoEXT const*, XrHandJointLocationsEXT*)
 t CSxrHandTrackerEXT::~CSxrHandTrackerEXT()
 t CSxrInstance::AppProvidedBindingForInteractionProfile(unsigned long)
 t CSxrInstance::CSxrInstance(XrInstanceCreateInfo const*)
 t CSxrInstance::CSxrInstance(XrInstanceCreateInfo const*) [clone .cold]
 t CSxrInstance::ComputeBindingFile(std::vector<Json::Value, std::allocator<Json::Value> >&, unsigned long, unsigned long, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)
 t CSxrInstance::ComputeBindingFile(std::vector<Json::Value, std::allocator<Json::Value> >&, unsigned long, unsigned long, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&) [clone .cold]
 t CSxrInstance::ComputeBindingFile(std::vector<Json::Value, std::allocator<Json::Value> >&, unsigned long, unsigned long, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)::DpadAction::~DpadAction()
 t CSxrInstance::ComputeBindingFiles()
 t CSxrInstance::ComputeBindingFiles() [clone .cold]
 t CSxrInstance::ComputeTrackerBindingFiles(std::vector<Json::Value, std::allocator<Json::Value> >&, std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > >&)
 t CSxrInstance::ComputeTrackerBindingFiles(std::vector<Json::Value, std::allocator<Json::Value> >&, std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > >&) [clone .cold]
 t CSxrInstance::CreateVulkanDevice(XrVulkanDeviceCreateInfoKHR const*, VkDevice_T**, VkResult*)
 t CSxrInstance::CreateVulkanInstance(XrVulkanInstanceCreateInfoKHR const*, VkInstance_T**, VkResult*)
 t CSxrInstance::DiscardEventsUsingHandle(void*)
 t CSxrInstance::EnableExtension(char const*)
 t CSxrInstance::EnableExtension(char const*) [clone .cold]
 t CSxrInstance::EnableGenericTrackers()
 t CSxrInstance::EnableGenericTrackers() [clone .cold]
 t CSxrInstance::EnumerateViveTrackerPathsHTCX(unsigned int, unsigned int*, XrViveTrackerPathsHTCX*)
 t CSxrInstance::FetchVrEvents()
 t CSxrInstance::FetchVrEvents() [clone .cold]
 t CSxrInstance::GetEnvironmentBlendModes(XrViewConfigurationType)
 t CSxrInstance::GetExtensionsAvailable()
 t CSxrInstance::GetSystemName()
 t CSxrInstance::GetSystemName() [clone .cold]
 t CSxrInstance::GetViewConfigurationTypes()
 t CSxrInstance::GetViewConfigurationsViews(XrViewConfigurationType)
 t CSxrInstance::GetVulkanDeviceExtensions(unsigned long, unsigned int, unsigned int*, char*)
 t CSxrInstance::GetVulkanGraphicsDevice(unsigned long, VkInstance_T*, VkPhysicalDevice_T**)
 t CSxrInstance::GetVulkanInstanceExtensions(unsigned long, unsigned int, unsigned int*, char*)
 t CSxrInstance::Init()
 t CSxrInstance::Init() [clone .cold]
 t CSxrInstance::InitExtensions()
 t CSxrInstance::InitSupportedFeatures()
 t CSxrInstance::InteractionProfileFromControllerType(std::string)
 t CSxrInstance::InteractionProfileToControllerType(std::string)
 t CSxrInstance::IsDisplayTimeValid(long)
 t CSxrInstance::IsEnvironmentBlendModeSupported(XrViewConfigurationType, XrEnvironmentBlendMode)
 t CSxrInstance::IsExtensionEnabled(char const*)
 t CSxrInstance::IsExtensionSupported(char const*)
 t CSxrInstance::IsViewConfigurationTypeSupported(XrViewConfigurationType)
 t CSxrInstance::IsViewConfigurationTypeValid(XrViewConfigurationType)
 t CSxrInstance::PathToString(unsigned long, std::string&)
 t CSxrInstance::PathToString(unsigned long, unsigned int, unsigned int*, char*)
 t CSxrInstance::PathToString(unsigned long, unsigned int, unsigned int*, char*) [clone .cold]
 t CSxrInstance::PopEvent(XrEventDataBuffer*, unsigned long)
 t CSxrInstance::PushEvent(std::vector<void*, std::allocator<void*> >, std::unique_ptr<XrEventDataBuffer, std::default_delete<XrEventDataBuffer> >)
 t CSxrInstance::PushEvent(std::vector<void*, std::allocator<void*> >, std::unique_ptr<XrEventDataBuffer, std::default_delete<XrEventDataBuffer> >) [clone .cold]
 t CSxrInstance::RememberSuggestedBindings(unsigned long, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >&&)
 t CSxrInstance::StringToPath(std::string, unsigned long&)
 t CSxrInstance::StringToPath(std::string, unsigned long&) [clone .cold]
 t CSxrInstance::TransitionToAppType(vr::EVRApplicationType)
 t CSxrInstance::TransitionToInstanceApp()
 t CSxrInstance::TransitionToSceneApp()
 t CSxrInstance::TranslateUnsupportedOpenXrPath(std::string&, std::string&, std::string&, SuggestedBinding const&)
 t CSxrInstance::TranslateUnsupportedOpenXrPath(std::string&, std::string&, std::string&, SuggestedBinding const&) [clone .cold]
 t CSxrInstance::ValidateSystemId()
 t CSxrInstance::~CSxrInstance()
 t CSxrParentBase::BIsChildRegistered(std::type_index, CSxrDeletableBase*)
 t CSxrParentBase::BIsLimitReachedForChildType(std::type_index)
 t CSxrParentBase::BIsLimitReachedForChildType(std::type_index) [clone .cold]
 t CSxrParentBase::CSxrChildren<XrAction_T*, CSxrAction>::~CSxrChildren()
 t CSxrParentBase::CSxrChildren<XrSession_T*, CSxrSession>::~CSxrChildren()
 t CSxrParentBase::DeleteAllChildren()
 t CSxrParentBase::DeleteAllChildren() [clone .cold]
 t CSxrParentBase::GetChildData(std::type_index)
 t CSxrParentBase::RegisterChildObject(std::type_index, CSxrDeletableBase*)
 t CSxrParentBase::RegisterChildObject(std::type_index, CSxrDeletableBase*) [clone .cold]
 t CSxrParentBase::RegisterLimitForChildType(std::type_index, unsigned int)
 t CSxrParentBase::UnregisterChildObject(std::type_index, CSxrDeletableBase*)
 t CSxrParentBase::~CSxrParentBase()
 t CSxrSession::AttachActionSets(std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> >&)
 t CSxrSession::AttachActionSets(std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> >&) [clone .cold]
 t CSxrSession::BIsActionSetAttached(XrActionSet_T*) const
 t CSxrSession::BIsInState(std::vector<XrSessionState, std::allocator<XrSessionState> >)
 t CSxrSession::BeginFrame(XrFrameBeginInfo const*)
 t CSxrSession::BeginSession(XrSessionBeginInfo const*)
 t CSxrSession::CSxrSession(CSxrInstance*, XrSessionCreateInfo const*, IXrBinding*, bool)
 t CSxrSession::CSxrSession(CSxrInstance*, XrSessionCreateInfo const*, IXrBinding*, bool) [clone .cold]
 t CSxrSession::ClearConformanceAutomation()
 t CSxrSession::ClearConformanceAutomation() [clone .cold]
 t CSxrSession::EndFrame(XrFrameEndInfo const*)
 t CSxrSession::EndFrame(XrFrameEndInfo const*) [clone .cold]
 t CSxrSession::EndSession()
 t CSxrSession::EndSession() [clone .cold]
 t CSxrSession::EnumerateDisplayRefreshRatesFB(unsigned int, unsigned int*, float*)
 t CSxrSession::GetConformanceMailbox()
 t CSxrSession::GetConformanceMailbox() [clone .cold]
 t CSxrSession::GetCurrentInteractionProfile(unsigned long, unsigned long*) const
 t CSxrSession::GetDisplayRefreshRateFB(float*)
 t CSxrSession::GetFrameCompositionReport(unsigned int, XrFrameCompositionReportEXT*)
 t CSxrSession::GetFrameCompositionReport(unsigned int, XrFrameCompositionReportEXT*) [clone .cold]
 t CSxrSession::GetFrameData(unsigned long)
 t CSxrSession::GetFrameDataForDisplayTime(unsigned long)
 t CSxrSession::GetReferenceSpaceTypes()
 t CSxrSession::GetRenderFrameIndex()
 t CSxrSession::GetVisibilityMask(XrViewConfigurationType, unsigned int, XrVisibilityMaskTypeKHR, XrVisibilityMaskKHR*)
 t CSxrSession::GetVisibilityMask(XrViewConfigurationType, unsigned int, XrVisibilityMaskTypeKHR, XrVisibilityMaskKHR*) [clone .cold]
 t CSxrSession::Init()
 t CSxrSession::LocateViews(std::vector<XrView, std::allocator<XrView> >&, XrViewLocateInfo const*, XrViewState*)
 t CSxrSession::LocateViews(std::vector<XrView, std::allocator<XrView> >&, XrViewLocateInfo const*, XrViewState*) [clone .part.0]
 t CSxrSession::RefreshSessionStateForFocus()
 t CSxrSession::RefreshSessionStateForFocus() [clone .cold]
 t CSxrSession::RequestDisplayRefreshRateFB(float)
 t CSxrSession::RequestExitSession()
 t CSxrSession::RequestExitSession() [clone .cold]
 t CSxrSession::RuntimeRequestedExit()
 t CSxrSession::StartNextFrame()
 t CSxrSession::StartingSyncActions()
 t CSxrSession::TransitionToState(XrSessionState)
 t CSxrSession::TransitionToState(XrSessionState) [clone .cold]
 t CSxrSession::UpdateInteractionProfile()
 t CSxrSession::UpdateInteractionProfile() [clone .cold]
 t CSxrSession::WaitForQueueToFlush()
 t CSxrSession::WaitFrame(XrFrameWaitInfo const*, XrFrameState*)
 t CSxrSession::~CSxrSession()
 t CSxrSpace::CSxrSpace(CSxrAction*, XrActionSpaceCreateInfo const*)
 t CSxrSpace::CSxrSpace(CSxrAction*, XrActionSpaceCreateInfo const*) [clone .cold]
 t CSxrSpace::CSxrSpace(CSxrSession*, XrReferenceSpaceCreateInfo const*)
 t CSxrSpace::CSxrSpace(CSxrSession*, XrReferenceSpaceCreateInfo const*) [clone .cold]
 t CSxrSpace::GetRawFromSpace(XrSpaceLocation&, XrSpaceVelocity&, long)
 t CSxrSpace::GetTrackedDeviceIndexAndPoseModification(vr::HmdMatrix34_t&) const
 t CSxrSpace::Init()
 t CSxrSpace::~CSxrSpace()
 t CSxrSwapchainBase::CSxrSwapchainBase(CSxrSession*, XrSwapchainCreateInfo const*, IXrBinding*)
 t CSxrSwapchainBase::CSxrSwapchainBase(CSxrSession*, XrSwapchainCreateInfo const*, IXrBinding*) [clone .cold]
 t CSxrSwapchainBase::EndFrame()
 t CSxrSwapchainBase::GetLastReleasedFrameIndex()
 t CSxrSwapchainBase::GetLastReleasedImageIndex()
 t CSxrSwapchainBase::GetSwapchainId()
 t CSxrSwapchainBase::~CSxrSwapchainBase()
 t CSxrSwapchainGLOpenVR::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*)
 t CSxrSwapchainGLOpenVR::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*) [clone .cold]
 t CSxrSwapchainGLOpenVR::CSxrSwapchainGLOpenVR(CSxrSession*, XrSwapchainCreateInfo const*, CSxrGraphicsBindingGLOpenVR*)
 t CSxrSwapchainGLOpenVR::EndFrame()
 t CSxrSwapchainGLOpenVR::EnumerateSwapchainImages(unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t CSxrSwapchainGLOpenVR::GetPresentableDepthTexture(vr::VRTextureWithPoseAndDepth_t*)
 t CSxrSwapchainGLOpenVR::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*)
 t CSxrSwapchainGLOpenVR::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*) [clone .cold]
 t CSxrSwapchainGLOpenVR::Init()
 t CSxrSwapchainGLOpenVR::Init() [clone .cold]
 t CSxrSwapchainGLOpenVR::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*)
 t CSxrSwapchainGLOpenVR::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*) [clone .cold]
 t CSxrSwapchainGLOpenVR::WaitSwapchainImage(XrSwapchainImageWaitInfo const*)
 t CSxrSwapchainGLOpenVR::WaitSwapchainImage(XrSwapchainImageWaitInfo const*) [clone .cold]
 t CSxrSwapchainGLOpenVR::~CSxrSwapchainGLOpenVR()
 t CSxrSwapchainPrism::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*)
 t CSxrSwapchainPrism::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*) [clone .cold]
 t CSxrSwapchainPrism::CSxrSwapchainPrism(CSxrSession*, XrSwapchainCreateInfo const*, CSxrGraphicsBindingPrism*)
 t CSxrSwapchainPrism::CSxrSwapchainPrism(CSxrSession*, XrSwapchainCreateInfo const*, CSxrGraphicsBindingPrism*) [clone .cold]
 t CSxrSwapchainPrism::EnumerateSwapchainImages(unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t CSxrSwapchainPrism::EnumerateSwapchainImages(unsigned int, unsigned int*, XrSwapchainImageBaseHeader*) [clone .cold]
 t CSxrSwapchainPrism::GetCompositionSwapchain()
 t CSxrSwapchainPrism::GetCurrentImage()
 t CSxrSwapchainPrism::GetPresentableDepthTexture(vr::VRTextureWithPoseAndDepth_t*)
 t CSxrSwapchainPrism::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*)
 t CSxrSwapchainPrism::GetSwapchainId()
 t CSxrSwapchainPrism::Init()
 t CSxrSwapchainPrism::Init() [clone .cold]
 t CSxrSwapchainPrism::RegisterSwapchainImage(SxrSwapchainImagePrism_t const&)
 t CSxrSwapchainPrism::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*)
 t CSxrSwapchainPrism::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*) [clone .cold]
 t CSxrSwapchainPrism::WaitSwapchainImage(XrSwapchainImageWaitInfo const*)
 t CSxrSwapchainPrism::WaitSwapchainImage(XrSwapchainImageWaitInfo const*) [clone .cold]
 t CSxrSwapchainPrism::~CSxrSwapchainPrism()
 t CSxrSwapchainVulkanOpenVR::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*)
 t CSxrSwapchainVulkanOpenVR::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*) [clone .cold]
 t CSxrSwapchainVulkanOpenVR::CSxrSwapchainVulkanOpenVR(CSxrSession*, XrSwapchainCreateInfo const*, CSxrGraphicsBindingVulkanOpenVR*)
 t CSxrSwapchainVulkanOpenVR::EnumerateSwapchainImages(unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t CSxrSwapchainVulkanOpenVR::GetPresentableDepthTexture(vr::VRTextureWithPoseAndDepth_t*)
 t CSxrSwapchainVulkanOpenVR::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*)
 t CSxrSwapchainVulkanOpenVR::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*) [clone .cold]
 t CSxrSwapchainVulkanOpenVR::Init()
 t CSxrSwapchainVulkanOpenVR::Init() [clone .cold]
 t CSxrSwapchainVulkanOpenVR::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*)
 t CSxrSwapchainVulkanOpenVR::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*) [clone .cold]
 t CSxrSwapchainVulkanOpenVR::WaitSwapchainImage(XrSwapchainImageWaitInfo const*)
 t CSxrSwapchainVulkanOpenVR::~CSxrSwapchainVulkanOpenVR()
 t CSyncLockThread::Init()
 t CSyncLockThread::OnExit()
 t CSyncLockThread::Run()
 t CSyncLockThread::~CSyncLockThread()
 t CThreadWatchdog::CThreadWatchdog(std::string const&, float, CThreadWatchdog::EWatchdogTimeoutBehavior)
 t CThreadWatchdog::CThreadWatchdog(std::string const&, float, CThreadWatchdog::EWatchdogTimeoutBehavior) [clone .cold]
 t CThreadWatchdog::CleanupWatchdogs()
 t CThreadWatchdog::GetDetailString()
 t CThreadWatchdog::GetTimeoutBehavior()
 t CThreadWatchdog::GetTimeoutDurationInTicks()
 t CThreadWatchdog::InitWatchdogs()
 t CThreadWatchdog::SetDetailString(char const*)
 t CThreadWatchdog::SetExecutionPhaseString(char const*)
 t CThreadWatchdog::SetTimeoutBehavior(CThreadWatchdog::EWatchdogTimeoutBehavior)
 t CThreadWatchdog::SetTimeoutDurationSeconds(float)
 t CThreadWatchdog::SetTimeoutDurationTicks(unsigned long)
 t CThreadWatchdog::SleepWithWatchdogDisabled(unsigned int)
 t CThreadWatchdog::SleepWithWatchdogDisabled(unsigned int) [clone .cold]
 t CThreadWatchdog::Tick()
 t CThreadWatchdog::TickParent()
 t CThreadWatchdog::~CThreadWatchdog()
 t CThreadWatchdogManager::CleanupWatchdogs()
 t CThreadWatchdogManager::CleanupWatchdogs() [clone .cold]
 t CThreadWatchdogManager::EvaluateWatchdogs()
 t CThreadWatchdogManager::EvaluateWatchdogs() [clone .cold]
 t CThreadWatchdogManager::InitWatchdogs()
 t CThreadWatchdogManager::InitWatchdogs() [clone .cold]
 t CThreadWatchdogManager::Register(CThreadWatchdog::Status_s*)
 t CThreadWatchdogManager::Register(CThreadWatchdog::Status_s*) [clone .cold]
 t CThreadWatchdogManager::ShouldWatchdog()
 t CThreadWatchdogManager::Unregister(CThreadWatchdog::Status_s*)
 t CThreadWatchdogManager::~CThreadWatchdogManager()
 t CTrackedCameraFrameQueue::CTrackedCameraFrameQueue()
 t CTrackedCameraFrameQueue::Flush()
 t CTrackedCameraFrameQueue::IsEmpty()
 t CTrackedCameraFrameQueue::IsFull()
 t CTrackedCameraFrameQueue::Peek(int*)
 t CTrackedCameraFrameQueue::Read(int*)
 t CTrackedCameraFrameQueue::Write(int)
 t CTrackedDeviceServerDriverAdapter::Create(void*, vr::IVRDriverContext*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CTrackedDeviceServerDriverAdapter::Create(void*, vr::IVRDriverContext*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&) [clone .cold]
 t CTrackedDeviceServerDriverAdapter::LegacyGetDeviceInfo(std::string*, vr::ETrackedDeviceClass*)
 t CTrackedDeviceServerDriverAdapter::ReadAllProperties()
 t CTransform::CTransform(vr::VRBoneTransform_t const&)
 t CTransform::ToBoneTransform() const
 t CTwoBoneIKPoseOperation::Evaluate(CPoseUpdateContext&, CTwoBoneIKPoseOperation::OpSettings const*)
 t CTwoBoneIKPoseOperation::Evaluate(CPoseUpdateContext&, CTwoBoneIKPoseOperation::OpSettings const*) [clone .cold]
 t CTwoBoneIKPoseOperation::Evaluate(CSmartPtr<CAnimPose, CRefCountAccessor> const&, TwoBoneIKSettings_t const&, VectorAligned const&, QuaternionAligned const&)
 t CTwoBoneIKPoseOperation::Evaluate(CSmartPtr<CAnimPose, CRefCountAccessor> const&, TwoBoneIKSettings_t const&, VectorAligned const&, QuaternionAligned const&) [clone .part.0]
 t CTwoBoneIKPoseOperation::MakeOpDescription(CPoseRecipe&, unsigned char, TwoBoneIKSettings_t const&, int)
 t CVRApplications_001::AddApplicationManifest(char const*, bool)
 t CVRApplications_001::GetApplicationAutoLaunch(char const*)
 t CVRApplications_001::GetApplicationCount()
 t CVRApplications_001::GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t CVRApplications_001::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t CVRApplications_001::GetApplicationProcessId(char const*)
 t CVRApplications_001::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_001::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t CVRApplications_001::GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t CVRApplications_001::GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t CVRApplications_001::GetHomeApplication(char*, unsigned int)
 t CVRApplications_001::GetStartingApplication(char*, unsigned int)
 t CVRApplications_001::GetTransitionState()
 t CVRApplications_001::IdentifyApplication(unsigned int, char const*)
 t CVRApplications_001::IsApplicationInstalled(char const*)
 t CVRApplications_001::LaunchApplication(char const*)
 t CVRApplications_001::LaunchDashboardOverlay(char const*)
 t CVRApplications_001::PerformApplicationPrelaunchCheck(char const*)
 t CVRApplications_001::RemoveApplicationManifest(char const*)
 t CVRApplications_001::SetApplicationAutoLaunch(char const*, bool)
 t CVRApplications_001::SetHomeApplication(char const*)
 t CVRApplications_002::AddApplicationManifest(char const*, bool)
 t CVRApplications_002::GetApplicationAutoLaunch(char const*)
 t CVRApplications_002::GetApplicationCount()
 t CVRApplications_002::GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t CVRApplications_002::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t CVRApplications_002::GetApplicationProcessId(char const*)
 t CVRApplications_002::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_002::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t CVRApplications_002::GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t CVRApplications_002::GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t CVRApplications_002::GetStartingApplication(char*, unsigned int)
 t CVRApplications_002::GetTransitionState()
 t CVRApplications_002::IdentifyApplication(unsigned int, char const*)
 t CVRApplications_002::IsApplicationInstalled(char const*)
 t CVRApplications_002::IsQuitUserPromptRequested()
 t CVRApplications_002::LaunchApplication(char const*)
 t CVRApplications_002::LaunchDashboardOverlay(char const*)
 t CVRApplications_002::PerformApplicationPrelaunchCheck(char const*)
 t CVRApplications_002::RemoveApplicationManifest(char const*)
 t CVRApplications_002::SetApplicationAutoLaunch(char const*, bool)
 t CVRApplications_003::AddApplicationManifest(char const*, bool)
 t CVRApplications_003::GetApplicationAutoLaunch(char const*)
 t CVRApplications_003::GetApplicationCount()
 t CVRApplications_003::GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t CVRApplications_003::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t CVRApplications_003::GetApplicationProcessId(char const*)
 t CVRApplications_003::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_003::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t CVRApplications_003::GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_003::GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t CVRApplications_003::GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t CVRApplications_003::GetStartingApplication(char*, unsigned int)
 t CVRApplications_003::GetTransitionState()
 t CVRApplications_003::IdentifyApplication(unsigned int, char const*)
 t CVRApplications_003::IsApplicationInstalled(char const*)
 t CVRApplications_003::IsQuitUserPromptRequested()
 t CVRApplications_003::LaunchApplication(char const*)
 t CVRApplications_003::LaunchDashboardOverlay(char const*)
 t CVRApplications_003::PerformApplicationPrelaunchCheck(char const*)
 t CVRApplications_003::RemoveApplicationManifest(char const*)
 t CVRApplications_003::SetApplicationAutoLaunch(char const*, bool)
 t CVRApplications_004::AddApplicationManifest(char const*, bool)
 t CVRApplications_004::CancelApplicationLaunch(char const*)
 t CVRApplications_004::GetApplicationAutoLaunch(char const*)
 t CVRApplications_004::GetApplicationCount()
 t CVRApplications_004::GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t CVRApplications_004::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t CVRApplications_004::GetApplicationProcessId(char const*)
 t CVRApplications_004::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_004::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t CVRApplications_004::GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_004::GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t CVRApplications_004::GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t CVRApplications_004::GetStartingApplication(char*, unsigned int)
 t CVRApplications_004::GetTransitionState()
 t CVRApplications_004::IdentifyApplication(unsigned int, char const*)
 t CVRApplications_004::IsApplicationInstalled(char const*)
 t CVRApplications_004::IsQuitUserPromptRequested()
 t CVRApplications_004::LaunchApplication(char const*)
 t CVRApplications_004::LaunchDashboardOverlay(char const*)
 t CVRApplications_004::LaunchInternalProcess(char const*, char const*, char const*)
 t CVRApplications_004::PerformApplicationPrelaunchCheck(char const*)
 t CVRApplications_004::RemoveApplicationManifest(char const*)
 t CVRApplications_004::SetApplicationAutoLaunch(char const*, bool)
 t CVRApplications_005::AddApplicationManifest(char const*, bool)
 t CVRApplications_005::CancelApplicationLaunch(char const*)
 t CVRApplications_005::GetApplicationAutoLaunch(char const*)
 t CVRApplications_005::GetApplicationCount()
 t CVRApplications_005::GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t CVRApplications_005::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t CVRApplications_005::GetApplicationProcessId(char const*)
 t CVRApplications_005::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_005::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t CVRApplications_005::GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_005::GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t CVRApplications_005::GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t CVRApplications_005::GetStartingApplication(char*, unsigned int)
 t CVRApplications_005::GetTransitionState()
 t CVRApplications_005::IdentifyApplication(unsigned int, char const*)
 t CVRApplications_005::IsApplicationInstalled(char const*)
 t CVRApplications_005::IsQuitUserPromptRequested()
 t CVRApplications_005::LaunchApplication(char const*)
 t CVRApplications_005::LaunchDashboardOverlay(char const*)
 t CVRApplications_005::LaunchInternalProcess(char const*, char const*, char const*)
 t CVRApplications_005::LaunchTemplateApplication(char const*, char const*, vr::AppOverrideKeys_t const*, unsigned int)
 t CVRApplications_005::PerformApplicationPrelaunchCheck(char const*)
 t CVRApplications_005::RemoveApplicationManifest(char const*)
 t CVRApplications_005::SetApplicationAutoLaunch(char const*, bool)
 t CVRApplications_006::AddApplicationManifest(char const*, bool)
 t CVRApplications_006::CancelApplicationLaunch(char const*)
 t CVRApplications_006::GetApplicationAutoLaunch(char const*)
 t CVRApplications_006::GetApplicationCount()
 t CVRApplications_006::GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t CVRApplications_006::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t CVRApplications_006::GetApplicationLaunchArguments(unsigned int, char*, unsigned int)
 t CVRApplications_006::GetApplicationProcessId(char const*)
 t CVRApplications_006::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_006::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t CVRApplications_006::GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t CVRApplications_006::GetApplicationSupportedMimeTypes(char const*, char*, unsigned int)
 t CVRApplications_006::GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t CVRApplications_006::GetApplicationsThatSupportMimeType(char const*, char*, unsigned int)
 t CVRApplications_006::GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t CVRApplications_006::GetCurrentSceneProcessId()
 t CVRApplications_006::GetDefaultApplicationForMimeType(char const*, char*, unsigned int)
 t CVRApplications_006::GetStartingApplication(char*, unsigned int)
 t CVRApplications_006::GetTransitionState()
 t CVRApplications_006::IdentifyApplication(unsigned int, char const*)
 t CVRApplications_006::IsApplicationInstalled(char const*)
 t CVRApplications_006::IsQuitUserPromptRequested()
 t CVRApplications_006::LaunchApplication(char const*)
 t CVRApplications_006::LaunchApplicationFromMimeType(char const*, char const*)
 t CVRApplications_006::LaunchDashboardOverlay(char const*)
 t CVRApplications_006::LaunchInternalProcess(char const*, char const*, char const*)
 t CVRApplications_006::LaunchTemplateApplication(char const*, char const*, vr::AppOverrideKeys_t const*, unsigned int)
 t CVRApplications_006::PerformApplicationPrelaunchCheck(char const*)
 t CVRApplications_006::RemoveApplicationManifest(char const*)
 t CVRApplications_006::SetApplicationAutoLaunch(char const*, bool)
 t CVRApplications_006::SetDefaultApplicationForMimeType(char const*, char const*)
 t CVRBlockQueueManager::AcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType)
 t CVRBlockQueueManager::AcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType) [clone .cold]
 t CVRBlockQueueManager::AcquireWriteOnlyBlock(unsigned long, unsigned long*, void**)
 t CVRBlockQueueManager::AcquireWriteOnlyBlock(unsigned long, unsigned long*, void**) [clone .cold]
 t CVRBlockQueueManager::Connect(unsigned long*, char const*)
 t CVRBlockQueueManager::Connect(unsigned long*, char const*) [clone .cold]
 t CVRBlockQueueManager::Create(unsigned long*, char const*, unsigned int, unsigned int, unsigned int, unsigned int)
 t CVRBlockQueueManager::Create(unsigned long*, char const*, unsigned int, unsigned int, unsigned int, unsigned int) [clone .cold]
 t CVRBlockQueueManager::Destroy(unsigned long)
 t CVRBlockQueueManager::QueueHasReader(unsigned long, bool*)
 t CVRBlockQueueManager::QueueHasReader(unsigned long, bool*) [clone .cold]
 t CVRBlockQueueManager::ReleaseReadOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueueManager::ReleaseReadOnlyBlock(unsigned long, unsigned long) [clone .cold]
 t CVRBlockQueueManager::ReleaseWriteOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueueManager::ReleaseWriteOnlyBlock(unsigned long, unsigned long) [clone .cold]
 t CVRBlockQueueManager::WaitAndAcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType, unsigned int)
 t CVRBlockQueueManager::WaitAndAcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType, unsigned int) [clone .cold]
 t CVRBlockQueue_001::AcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType)
 t CVRBlockQueue_001::AcquireWriteOnlyBlock(unsigned long, unsigned long*, void**)
 t CVRBlockQueue_001::Connect(unsigned long*, char const*)
 t CVRBlockQueue_001::Create(unsigned long*, char const*, unsigned int, unsigned int, unsigned int)
 t CVRBlockQueue_001::ReleaseReadOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_001::ReleaseWriteOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_002::AcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType)
 t CVRBlockQueue_002::AcquireWriteOnlyBlock(unsigned long, unsigned long*, void**)
 t CVRBlockQueue_002::Connect(unsigned long*, char const*)
 t CVRBlockQueue_002::Create(unsigned long*, char const*, unsigned int, unsigned int, unsigned int)
 t CVRBlockQueue_002::ReleaseReadOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_002::ReleaseWriteOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_002::WaitAndAcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType, unsigned int)
 t CVRBlockQueue_003::AcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType)
 t CVRBlockQueue_003::AcquireWriteOnlyBlock(unsigned long, unsigned long*, void**)
 t CVRBlockQueue_003::Connect(unsigned long*, char const*)
 t CVRBlockQueue_003::Create(unsigned long*, char const*, unsigned int, unsigned int, unsigned int)
 t CVRBlockQueue_003::QueueHasReader(unsigned long, bool*)
 t CVRBlockQueue_003::ReleaseReadOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_003::ReleaseWriteOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_003::WaitAndAcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType, unsigned int)
 t CVRBlockQueue_004::AcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType)
 t CVRBlockQueue_004::AcquireWriteOnlyBlock(unsigned long, unsigned long*, void**)
 t CVRBlockQueue_004::Connect(unsigned long*, char const*)
 t CVRBlockQueue_004::Create(unsigned long*, char const*, unsigned int, unsigned int, unsigned int)
 t CVRBlockQueue_004::Destroy(unsigned long)
 t CVRBlockQueue_004::QueueHasReader(unsigned long, bool*)
 t CVRBlockQueue_004::ReleaseReadOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_004::ReleaseWriteOnlyBlock(unsigned long, unsigned long)
 t CVRBlockQueue_004::WaitAndAcquireReadOnlyBlock(unsigned long, unsigned long*, void const**, vr::EBlockQueueReadType, unsigned int)
 t CVRCameraComponentAdapter* CVRCameraComponentAdapter::Create<CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRCameraComponentAdapter* CVRCameraComponentAdapter::Create<vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRCameraComponent_001::GetCameraCompatibilityMode(vr::ECameraCompatibilityMode*)
 t CVRCameraComponent_001::GetCameraDistortion(float, float, float*, float*)
 t CVRCameraComponent_001::GetCameraFirmwareDescription(char*, unsigned int)
 t CVRCameraComponent_001::GetCameraFirmwareVersion(unsigned long*)
 t CVRCameraComponent_001::GetCameraFrameBounds(vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRCameraComponent_001::GetCameraFrameBufferingRequirements(int*, unsigned int*)
 t CVRCameraComponent_001::GetCameraFrameDimensions(vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*)
 t CVRCameraComponent_001::GetCameraIntrinsics(vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t CVRCameraComponent_001::GetCameraProjection(float, float, float, float, vr::HmdMatrix44_t*)
 t CVRCameraComponent_001::GetCameraVideoStreamFormat()
 t CVRCameraComponent_001::GetRecommendedCameraUndistortion(unsigned int*, unsigned int*)
 t CVRCameraComponent_001::GetVideoStreamElapsedTime()
 t CVRCameraComponent_001::GetVideoStreamFrame()
 t CVRCameraComponent_001::HasCamera()
 t CVRCameraComponent_001::IsVideoStreamActive()
 t CVRCameraComponent_001::IsVideoStreamPaused()
 t CVRCameraComponent_001::PauseVideoStream()
 t CVRCameraComponent_001::ReleaseVideoStreamFrame(vr::CameraVideoStreamFrame_t const*)
 t CVRCameraComponent_001::ResumeVideoStream()
 t CVRCameraComponent_001::SetAutoExposure(bool)
 t CVRCameraComponent_001::SetCameraCompatibilityMode(vr::ECameraCompatibilityMode)
 t CVRCameraComponent_001::SetCameraFrameBuffering(int, void**, unsigned int)
 t CVRCameraComponent_001::SetCameraUndistortion(unsigned int, unsigned int)
 t CVRCameraComponent_001::SetCameraVideoSinkCallback(vr::ICameraVideoSinkCallback*)
 t CVRCameraComponent_001::SetCameraVideoStreamFormat(vr::ECameraVideoStreamFormat)
 t CVRCameraComponent_001::SetFrameRate(int, int)
 t CVRCameraComponent_001::StartVideoStream()
 t CVRCameraComponent_001::StopVideoStream()
 t CVRCameraComponent_001::~CVRCameraComponent_001()
 t CVRCameraComponent_002::GetCameraCompatibilityMode(vr::ECameraCompatibilityMode*)
 t CVRCameraComponent_002::GetCameraDistortion(unsigned int, float, float, float*, float*)
 t CVRCameraComponent_002::GetCameraFrameBounds(vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRCameraComponent_002::GetCameraFrameBufferingRequirements(int*, unsigned int*)
 t CVRCameraComponent_002::GetCameraFrameDimensions(vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*)
 t CVRCameraComponent_002::GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*, vr::EVRDistortionFunctionType*, double*)
 t CVRCameraComponent_002::GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t CVRCameraComponent_002::GetCameraVideoStreamFormat()
 t CVRCameraComponent_002::GetVideoStreamFrame()
 t CVRCameraComponent_002::IsVideoStreamActive(bool*, float*)
 t CVRCameraComponent_002::PauseVideoStream()
 t CVRCameraComponent_002::ReleaseVideoStreamFrame(vr::CameraVideoStreamFrame_t const*)
 t CVRCameraComponent_002::ResumeVideoStream()
 t CVRCameraComponent_002::SetAutoExposure(bool)
 t CVRCameraComponent_002::SetCameraCompatibilityMode(vr::ECameraCompatibilityMode)
 t CVRCameraComponent_002::SetCameraFrameBuffering(int, void**, unsigned int)
 t CVRCameraComponent_002::SetCameraVideoSinkCallback(vr::ICameraVideoSinkCallback*)
 t CVRCameraComponent_002::SetCameraVideoStreamFormat(vr::ECameraVideoStreamFormat)
 t CVRCameraComponent_002::SetFrameRate(int, int)
 t CVRCameraComponent_002::StartVideoStream()
 t CVRCameraComponent_002::StopVideoStream()
 t CVRCameraComponent_002::~CVRCameraComponent_002()
 t CVRCameraComponent_Latest::GetCameraCompatibilityMode(vr::ECameraCompatibilityMode*)
 t CVRCameraComponent_Latest::GetCameraDistortion(unsigned int, float, float, float*, float*)
 t CVRCameraComponent_Latest::GetCameraFrameBounds(vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRCameraComponent_Latest::GetCameraFrameBufferingRequirements(int*, unsigned int*)
 t CVRCameraComponent_Latest::GetCameraFrameDimensions(vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*)
 t CVRCameraComponent_Latest::GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*, vr::EVRDistortionFunctionType*, double*)
 t CVRCameraComponent_Latest::GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t CVRCameraComponent_Latest::GetCameraVideoStreamFormat()
 t CVRCameraComponent_Latest::GetVideoStreamFrame()
 t CVRCameraComponent_Latest::IsVideoStreamActive(bool*, float*)
 t CVRCameraComponent_Latest::PauseVideoStream()
 t CVRCameraComponent_Latest::ReleaseVideoStreamFrame(vr::CameraVideoStreamFrame_t const*)
 t CVRCameraComponent_Latest::ResumeVideoStream()
 t CVRCameraComponent_Latest::SetAutoExposure(bool)
 t CVRCameraComponent_Latest::SetCameraCompatibilityMode(vr::ECameraCompatibilityMode)
 t CVRCameraComponent_Latest::SetCameraFrameBuffering(int, void**, unsigned int)
 t CVRCameraComponent_Latest::SetCameraVideoSinkCallback(vr::ICameraVideoSinkCallback*)
 t CVRCameraComponent_Latest::SetCameraVideoStreamFormat(vr::ECameraVideoStreamFormat)
 t CVRCameraComponent_Latest::SetFrameRate(int, int)
 t CVRCameraComponent_Latest::StartVideoStream()
 t CVRCameraComponent_Latest::StopVideoStream()
 t CVRCameraComponent_Latest::~CVRCameraComponent_Latest()
 t CVRChaperoneClient::ApplyZeroPose(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t)
 t CVRChaperoneClient::ApplyZeroPose(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t) [clone .cold]
 t CVRChaperoneClient::AreBoundsVisible()
 t CVRChaperoneClient::BInit(CVRClient*)
 t CVRChaperoneClient::BInit(CVRClient*) [clone .cold]
 t CVRChaperoneClient::CommitWorkingCopy(vr::EChaperoneConfigFile)
 t CVRChaperoneClient::CommitWorkingCopy(vr::EChaperoneConfigFile) [clone .cold]
 t CVRChaperoneClient::ExportLiveToBuffer(char*, unsigned int*)
 t CVRChaperoneClient::ExportLiveToBuffer(char*, unsigned int*) [clone .cold]
 t CVRChaperoneClient::ForceBoundsVisible(bool)
 t CVRChaperoneClient::ForceBoundsVisible(bool) [clone .cold]
 t CVRChaperoneClient::GetBoundsColor(vr::HmdColor_t*, int, float, vr::HmdColor_t*)
 t CVRChaperoneClient::GetBoundsColor(vr::HmdColor_t*, int, float, vr::HmdColor_t*) [clone .cold]
 t CVRChaperoneClient::GetCalibrationState()
 t CVRChaperoneClient::GetLiveCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneClient::GetLiveCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*) [clone .cold]
 t CVRChaperoneClient::GetLiveSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneClient::GetOriginFromTrackingMatrix(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t*)
 t CVRChaperoneClient::GetPlayAreaRect(vr::HmdQuad_t*)
 t CVRChaperoneClient::GetPlayAreaSize(float*, float*)
 t CVRChaperoneClient::GetRawZeroPoseToStandingAbsoluteTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneClient::GetSeatedZeroPoseToStandingAbsoluteTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneClient::GetSetupZeroPoseToStandingAbsoluteTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneClient::GetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneClient::GetWorkingPlayAreaRect(vr::HmdQuad_t*)
 t CVRChaperoneClient::GetWorkingPlayAreaSize(float*, float*)
 t CVRChaperoneClient::GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneClient::GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneClient::HideWorkingSetPreview()
 t CVRChaperoneClient::ImportFromBufferToWorking(char const*, unsigned int)
 t CVRChaperoneClient::ImportFromBufferToWorking(char const*, unsigned int) [clone .cold]
 t CVRChaperoneClient::IsOriginCalibrated(vr::ETrackingUniverseOrigin)
 t CVRChaperoneClient::ReloadFromDisk(vr::EChaperoneConfigFile)
 t CVRChaperoneClient::ReloadInfo()
 t CVRChaperoneClient::ReloadInfo() [clone .cold]
 t CVRChaperoneClient::ResetZeroPose(vr::ETrackingUniverseOrigin)
 t CVRChaperoneClient::ResetZeroPose(vr::ETrackingUniverseOrigin) [clone .cold]
 t CVRChaperoneClient::RevertWorkingCopy()
 t CVRChaperoneClient::RoomSetupStarting()
 t CVRChaperoneClient::SetSceneColor(vr::HmdColor_t)
 t CVRChaperoneClient::SetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t CVRChaperoneClient::SetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int) [clone .cold]
 t CVRChaperoneClient::SetWorkingPerimeter(vr::HmdVector2_t*, unsigned int)
 t CVRChaperoneClient::SetWorkingPerimeter(vr::HmdVector2_t*, unsigned int) [clone .cold]
 t CVRChaperoneClient::SetWorkingPlayAreaSize(float, float)
 t CVRChaperoneClient::SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t CVRChaperoneClient::SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t CVRChaperoneClient::ShowWorkingSetPreview()
 t CVRChaperoneClient::UpdateWorkingSet()
 t CVRChaperoneClient::UpdateWorkingSet() [clone .cold]
 t CVRChaperoneClient::~CVRChaperoneClient()
 t CVRChaperoneSetup_001::CommitWorkingCopy(char const*)
 t CVRChaperoneSetup_001::GetWorkingHardBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_001::GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_001::GetWorkingSoftBoundsInfo(ChaperoneSoftBoundsInfo_t*)
 t CVRChaperoneSetup_001::GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_001::GetWorkingTagPoseByName(char const*, vr::HmdMatrix34_t*, float*)
 t CVRChaperoneSetup_001::GetWorkingTagPoseNameByIndex(unsigned int, char*, unsigned int)
 t CVRChaperoneSetup_001::GetWorkingTagPoseScales(float*, unsigned int*)
 t CVRChaperoneSetup_001::GetWorkingTagPoses(vr::HmdMatrix34_t*, unsigned int*)
 t CVRChaperoneSetup_001::ReloadFromDisk()
 t CVRChaperoneSetup_001::RemoveAllWorkingTagPoses()
 t CVRChaperoneSetup_001::RemoveWorkingTagPoseByName(char const*)
 t CVRChaperoneSetup_001::RevertWorkingCopy()
 t CVRChaperoneSetup_001::SetWorkingHardBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t CVRChaperoneSetup_001::SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const&)
 t CVRChaperoneSetup_001::SetWorkingSoftBoundsInfo(ChaperoneSoftBoundsInfo_t const*)
 t CVRChaperoneSetup_001::SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const&)
 t CVRChaperoneSetup_001::SetWorkingTagPoseByName(char const*, vr::HmdMatrix34_t const&, float)
 t CVRChaperoneSetup_002::CommitWorkingCopy(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_002::GetWorkingHardBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_002::GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_002::GetWorkingSoftBoundsInfo(ChaperoneSoftBoundsInfo_t*)
 t CVRChaperoneSetup_002::GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_002::GetWorkingTagPoseByName(char const*, vr::HmdMatrix34_t*, float*)
 t CVRChaperoneSetup_002::GetWorkingTagPoseNameByIndex(unsigned int, char*, unsigned int)
 t CVRChaperoneSetup_002::GetWorkingTagPoseScales(float*, unsigned int*)
 t CVRChaperoneSetup_002::GetWorkingTagPoses(vr::HmdMatrix34_t*, unsigned int*)
 t CVRChaperoneSetup_002::ReloadFromDisk(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_002::RemoveAllWorkingTagPoses()
 t CVRChaperoneSetup_002::RemoveWorkingTagPoseByName(char const*)
 t CVRChaperoneSetup_002::RevertWorkingCopy()
 t CVRChaperoneSetup_002::SetWorkingHardBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t CVRChaperoneSetup_002::SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const&)
 t CVRChaperoneSetup_002::SetWorkingSoftBoundsInfo(ChaperoneSoftBoundsInfo_t const*)
 t CVRChaperoneSetup_002::SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const&)
 t CVRChaperoneSetup_002::SetWorkingTagPoseByName(char const*, vr::HmdMatrix34_t const&, float)
 t CVRChaperoneSetup_003::CommitWorkingCopy(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_003::GetLiveCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_003::GetLiveSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_003::GetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_003::GetWorkingPlayAreaRect(vr::HmdQuad_t*)
 t CVRChaperoneSetup_003::GetWorkingPlayAreaSize(float*, float*)
 t CVRChaperoneSetup_003::GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_003::GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_003::ReloadFromDisk(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_003::RevertWorkingCopy()
 t CVRChaperoneSetup_003::SetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t CVRChaperoneSetup_003::SetWorkingPlayAreaSize(float, float)
 t CVRChaperoneSetup_003::SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const&)
 t CVRChaperoneSetup_003::SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const&)
 t CVRChaperoneSetup_004::CommitWorkingCopy(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_004::GetLiveCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_004::GetLiveSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_004::GetLiveWallTagInfo(unsigned char*, unsigned int*)
 t CVRChaperoneSetup_004::GetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_004::GetWorkingPlayAreaRect(vr::HmdQuad_t*)
 t CVRChaperoneSetup_004::GetWorkingPlayAreaSize(float*, float*)
 t CVRChaperoneSetup_004::GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_004::GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_004::ReloadFromDisk(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_004::RevertWorkingCopy()
 t CVRChaperoneSetup_004::SetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t CVRChaperoneSetup_004::SetWorkingPlayAreaSize(float, float)
 t CVRChaperoneSetup_004::SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t CVRChaperoneSetup_004::SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t CVRChaperoneSetup_004::SetWorkingWallTagInfo(unsigned char*, unsigned int)
 t CVRChaperoneSetup_005::CommitWorkingCopy(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_005::ExportLiveToBuffer(char*, unsigned int*)
 t CVRChaperoneSetup_005::GetLiveCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_005::GetLiveCollisionBoundsTagsInfo(unsigned char*, unsigned int*)
 t CVRChaperoneSetup_005::GetLivePhysicalBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_005::GetLiveSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_005::GetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperoneSetup_005::GetWorkingPlayAreaRect(vr::HmdQuad_t*)
 t CVRChaperoneSetup_005::GetWorkingPlayAreaSize(float*, float*)
 t CVRChaperoneSetup_005::GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_005::GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t CVRChaperoneSetup_005::ImportFromBufferToWorking(char const*, unsigned int)
 t CVRChaperoneSetup_005::ReloadFromDisk(vr::EChaperoneConfigFile)
 t CVRChaperoneSetup_005::RevertWorkingCopy()
 t CVRChaperoneSetup_005::SetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t CVRChaperoneSetup_005::SetWorkingCollisionBoundsTagsInfo(unsigned char*, unsigned int)
 t CVRChaperoneSetup_005::SetWorkingPhysicalBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t CVRChaperoneSetup_005::SetWorkingPlayAreaSize(float, float)
 t CVRChaperoneSetup_005::SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t CVRChaperoneSetup_005::SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t CVRChaperone_001::GetCalibrationState()
 t CVRChaperone_001::GetHardBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperone_001::GetSeatedBoundsInfo(ChaperoneSeatedBoundsInfo_t*)
 t CVRChaperone_001::GetSoftBoundsInfo(ChaperoneSoftBoundsInfo_t*)
 t CVRChaperone_002::AreBoundsVisible()
 t CVRChaperone_002::ForceBoundsVisible(bool)
 t CVRChaperone_002::GetBoundsColor(vr::HmdColor_t*, int, float, vr::HmdColor_t*)
 t CVRChaperone_002::GetCalibrationState()
 t CVRChaperone_002::GetHardBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t CVRChaperone_002::GetSeatedBoundsInfo(ChaperoneSeatedBoundsInfo_t*)
 t CVRChaperone_002::GetSoftBoundsInfo(ChaperoneSoftBoundsInfo_t*)
 t CVRChaperone_002::ReloadInfo()
 t CVRChaperone_002::SetSceneColor(vr::HmdColor_t)
 t CVRChaperone_003::AreBoundsVisible()
 t CVRChaperone_003::ForceBoundsVisible(bool)
 t CVRChaperone_003::GetBoundsColor(vr::HmdColor_t*, int, float, vr::HmdColor_t*)
 t CVRChaperone_003::GetCalibrationState()
 t CVRChaperone_003::GetPlayAreaRect(vr::HmdQuad_t*)
 t CVRChaperone_003::GetPlayAreaSize(float*, float*)
 t CVRChaperone_003::ReloadInfo()
 t CVRChaperone_003::SetSceneColor(vr::HmdColor_t)
 t CVRClient::BEnsurePipeConnected()
 t CVRClient::BEnsurePipeConnected() [clone .cold]
 t CVRClient::BStartVRServer(bool, bool, unsigned int*, std::string*)
 t CVRClient::BStartVRServer(bool, bool, unsigned int*, std::string*) [clone .cold]
 t CVRClient::CVRClient()
 t CVRClient::CVRClient() [clone .cold]
 t CVRClient::Cleanup()
 t CVRClient::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRClient::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*) [clone .cold]
 t CVRClient::ComputeDistortion(vr::EVREye, vr::DistortionChannel_t, bool, unsigned int, vr::DistortionCoordinate_t const*, vr::DistortionCoordinate_t*)
 t CVRClient::ComputeDistortion(vr::EVREye, vr::DistortionChannel_t, bool, unsigned int, vr::DistortionCoordinate_t const*, vr::DistortionCoordinate_t*) [clone .cold]
 t CVRClient::Init(std::string const&, vr::EVRApplicationType, bool, std::string const&, IVRClientHandler*, IVRClientInternal*)
 t CVRClient::Init(std::string const&, vr::EVRApplicationType, bool, std::string const&, IVRClientHandler*, IVRClientInternal*) [clone .cold]
 t CVRClient::SendConnectMessage(bool)
 t CVRClient::SendConnectMessage(bool) [clone .cold]
 t CVRClient::~CVRClient()
 t CVRClientCore_001::BIsHmdPresent(char const*)
 t CVRClientCore_001::Cleanup()
 t CVRClientCore_001::GetGenericInterface(char const*, vr::EVRInitError*)
 t CVRClientCore_001::GetStringForHmdError(vr::EVRInitError)
 t CVRClientCore_001::Init(char const*, char const*)
 t CVRClientCore_001::IsInterfaceVersionValid(char const*)
 t CVRClientCore_002::BIsHmdPresent()
 t CVRClientCore_002::Cleanup()
 t CVRClientCore_002::GetEnglishStringForHmdError(vr::EVRInitError)
 t CVRClientCore_002::GetGenericInterface(char const*, vr::EVRInitError*)
 t CVRClientCore_002::GetIDForVRInitError(vr::EVRInitError)
 t CVRClientCore_002::Init(vr::EVRApplicationType)
 t CVRClientCore_002::IsInterfaceVersionValid(char const*)
 t CVRCompositorClient::BInitialized() const
 t CVRCompositorClient::BNeedToStartVRCompositor()
 t CVRCompositorClient::BStartVRCompositor()
 t CVRCompositorClient::BStartVRCompositor() [clone .cold]
 t CVRCompositorClient::CanRenderScene()
 t CVRCompositorClient::CheckError(CVRCompositorSharedTextures::Error, vr::EVRCompositorError*) const
 t CVRCompositorClient::Cleanup()
 t CVRCompositorClient::Cleanup() [clone .cold]
 t CVRCompositorClient::ClearLastSubmittedFrame()
 t CVRCompositorClient::ClearLastSubmittedFrame() [clone .cold]
 t CVRCompositorClient::ClearStageOverride()
 t CVRCompositorClient::ClearStageOverride() [clone .cold]
 t CVRCompositorClient::CompositorBringToFront()
 t CVRCompositorClient::CompositorBringToFront() [clone .cold]
 t CVRCompositorClient::CompositorDumpImages()
 t CVRCompositorClient::CompositorDumpImages() [clone .cold]
 t CVRCompositorClient::CompositorDumpImagesAll()
 t CVRCompositorClient::CompositorDumpImagesAll() [clone .cold]
 t CVRCompositorClient::CompositorGoToBack()
 t CVRCompositorClient::CompositorGoToBack() [clone .cold]
 t CVRCompositorClient::CompositorQuit()
 t CVRCompositorClient::ComputePredictedFrameTime(float, float, CVRCompositorClient::PredictionResults_t*)
 t CVRCompositorClient::CopyDepthInfo(vr::EVREye, vr::HmdMatrix44_t&, vr::VRTextureDepthInfo_t const*, vr::ETextureType)
 t CVRCompositorClient::DisplaySystemTimeFromVsyncId(unsigned int)
 t CVRCompositorClient::DisplaySystemTimeFromVsyncId(unsigned int) [clone .cold]
 t CVRCompositorClient::FadeGrid(float, bool)
 t CVRCompositorClient::FadeGrid(float, bool) [clone .cold]
 t CVRCompositorClient::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositorClient::FadeToColor(float, float, float, float, float, bool) [clone .cold]
 t CVRCompositorClient::ForceInterleavedReprojectionOn(bool)
 t CVRCompositorClient::ForceInterleavedReprojectionOn(bool) [clone .cold]
 t CVRCompositorClient::ForceReconnectProcess()
 t CVRCompositorClient::GetCurrentSceneFocusProcess()
 t CVRCompositorClient::GetCurrentSceneFocusProcess() [clone .cold]
 t CVRCompositorClient::GetFrameTimeRemaining()
 t CVRCompositorClient::GetFrameTimeRemaining() [clone .cold]
 t CVRCompositorClient::GetLastPosePredictionIDs(unsigned int*, unsigned int*)
 t CVRCompositorClient::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositorClient::GetMirrorTextureD3D11(vr::EVREye, void*, void**) [clone .cold]
 t CVRCompositorClient::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositorClient::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**) [clone .cold]
 t CVRCompositorClient::GetPosesForFrame(unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositorClient::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositorClient::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositorClient::Init(vr::IVRSystem*, vr::IVRCompositorSystemInternal*, vr::IVRApplications*, CVRClient*, IVRClientInternal*)
 t CVRCompositorClient::Init(vr::IVRSystem*, vr::IVRCompositorSystemInternal*, vr::IVRApplications*, CVRClient*, IVRClientInternal*) [clone .cold]
 t CVRCompositorClient::LockGLSharedTextureForAccess(void*)
 t CVRCompositorClient::NewSharedVulkanBuffer(unsigned long, unsigned int, unsigned long*)
 t CVRCompositorClient::NewSharedVulkanBuffer(unsigned long, unsigned int, unsigned long*) [clone .cold]
 t CVRCompositorClient::NewSharedVulkanImage(unsigned int, unsigned int, unsigned int, bool, unsigned long*)
 t CVRCompositorClient::NewSharedVulkanImage(unsigned int, unsigned int, unsigned int, bool, unsigned long*) [clone .cold]
 t CVRCompositorClient::NewSharedVulkanSemaphore(unsigned long*)
 t CVRCompositorClient::NewSharedVulkanSemaphore(unsigned long*) [clone .cold]
 t CVRCompositorClient::PostPresentHandoff()
 t CVRCompositorClient::PostPresentHandoff() [clone .cold]
 t CVRCompositorClient::PredictPoses(unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositorClient::PredictPosesInternal(unsigned int, vr::TrackedDevicePose_t*, unsigned int, bool)
 t CVRCompositorClient::PredictPosesInternal(unsigned int, vr::TrackedDevicePose_t*, unsigned int, bool) [clone .cold]
 t CVRCompositorClient::PredictRenderedFrame(int, float, float, vr::PredictedFrameInfo_t*)
 t CVRCompositorClient::PredictRenderedFrame(int, float, float, vr::PredictedFrameInfo_t*) [clone .cold]
 t CVRCompositorClient::PredictRenderedFrameXR(int, float, float, vr::PredictedFrameInfo_t*)
 t CVRCompositorClient::PredictRenderedFrameXR(int, float, float, vr::PredictedFrameInfo_t*) [clone .cold]
 t CVRCompositorClient::Present(int)
 t CVRCompositorClient::RefResource(unsigned long, unsigned long*)
 t CVRCompositorClient::RefResource(unsigned long, unsigned long*) [clone .cold]
 t CVRCompositorClient::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositorClient::ReleaseMirrorTextureD3D11(void*) [clone .cold]
 t CVRCompositorClient::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositorClient::ReleaseSharedGLTexture(unsigned int, void*) [clone .cold]
 t CVRCompositorClient::RenderEnd(unsigned int, CVRCompositorSharedTextures::CommandBuffer_t**)
 t CVRCompositorClient::RenderEnd(unsigned int, CVRCompositorSharedTextures::CommandBuffer_t**) [clone .cold]
 t CVRCompositorClient::RenderStart()
 t CVRCompositorClient::RenderStart() [clone .cold]
 t CVRCompositorClient::ResetRenderedFramePredictions()
 t CVRCompositorClient::ServerPipeLost()
 t CVRCompositorClient::SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t CVRCompositorClient::SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t CVRCompositorClient::SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int) [clone .cold]
 t CVRCompositorClient::ShouldAppRenderWithLowResources()
 t CVRCompositorClient::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositorClient::SubmitExplicitTimingData()
 t CVRCompositorClient::SubmitExplicitTimingData() [clone .cold]
 t CVRCompositorClient::SubmitEye(vr::EVREye, unsigned int, vr::VRTextureWithPose_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositorClient::SubmitEyeInternal(vr::EVREye, unsigned int, vr::VRTextureWithPose_t const*, unsigned int, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositorClient::SubmitEyeInternal(vr::EVREye, unsigned int, vr::VRTextureWithPose_t const*, unsigned int, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags) [clone .cold]
 t CVRCompositorClient::SubmitFrameBeginTiming(unsigned long, CVRCompositorSharedTextures::CommandBuffer_t const*)
 t CVRCompositorClient::SubmitFrameData(double, bool)
 t CVRCompositorClient::SubmitFrameData(double, bool) [clone .cold]
 t CVRCompositorClient::SubmitTextureSetInfo(unsigned int, CVRCompositorClient::TextureSetInfo_t const&, unsigned int, unsigned long const*)
 t CVRCompositorClient::SubmitTextureSetInfo(unsigned int, CVRCompositorClient::TextureSetInfo_t const&, unsigned int, unsigned long const*) [clone .cold]
 t CVRCompositorClient::SubmitWithArrayIndex(vr::EVREye, vr::Texture_t const*, unsigned int, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags, unsigned long)
 t CVRCompositorClient::SubmitWithArrayIndex(vr::EVREye, vr::Texture_t const*, unsigned int, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags, unsigned long) [clone .cold]
 t CVRCompositorClient::SuspendRendering(bool)
 t CVRCompositorClient::SuspendRendering(bool) [clone .cold]
 t CVRCompositorClient::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositorClient::UnrefResource(unsigned long)
 t CVRCompositorClient::UnrefResource(unsigned long) [clone .cold]
 t CVRCompositorClient::UpdateSceneTextureData(CVRCompositorSharedTextures::CommandBuffer_t const*)
 t CVRCompositorClient::UpdateSceneTextureData(CVRCompositorSharedTextures::CommandBuffer_t const*) [clone .cold]
 t CVRCompositorClient::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositorClient::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int) [clone .cold]
 t CVRCompositorClient::~CVRCompositorClient()
 t CVRCompositorClientBase::CVRCompositorClientBase()
 t CVRCompositorClientBase::CVRCompositorClientBase() [clone .cold]
 t CVRCompositorClientBase::CanRenderScene()
 t CVRCompositorClientBase::CanRenderScene() [clone .cold]
 t CVRCompositorClientBase::Cleanup()
 t CVRCompositorClientBase::ClearLastSubmittedFrame()
 t CVRCompositorClientBase::ClearSkyboxOverride()
 t CVRCompositorClientBase::ClearSkyboxOverride() [clone .cold]
 t CVRCompositorClientBase::ClearStageOverride()
 t CVRCompositorClientBase::CompositorBringToFront()
 t CVRCompositorClientBase::CompositorDumpImages()
 t CVRCompositorClientBase::CompositorDumpImagesAll()
 t CVRCompositorClientBase::CompositorGoToBack()
 t CVRCompositorClientBase::CompositorQuit()
 t CVRCompositorClientBase::FadeGrid(float, bool)
 t CVRCompositorClientBase::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositorClientBase::ForceInterleavedReprojectionOn(bool)
 t CVRCompositorClientBase::ForceReconnectProcess()
 t CVRCompositorClientBase::GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int)
 t CVRCompositorClientBase::GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int) [clone .cold]
 t CVRCompositorClientBase::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositorClientBase::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int) [clone .cold]
 t CVRCompositorClientBase::GetCurrentFadeColor(bool)
 t CVRCompositorClientBase::GetCurrentFadeColor(bool) [clone .cold]
 t CVRCompositorClientBase::GetCurrentGridAlpha()
 t CVRCompositorClientBase::GetCurrentSceneFocusProcess()
 t CVRCompositorClientBase::GetFrameTimeRemaining()
 t CVRCompositorClientBase::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositorClientBase::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int) [clone .cold]
 t CVRCompositorClientBase::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositorClientBase::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int) [clone .cold]
 t CVRCompositorClientBase::GetLastFrameRenderer()
 t CVRCompositorClientBase::GetLastFrameRenderer() [clone .cold]
 t CVRCompositorClientBase::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositorClientBase::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*) [clone .cold]
 t CVRCompositorClientBase::GetLastPosePredictionIDs(unsigned int*, unsigned int*)
 t CVRCompositorClientBase::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositorClientBase::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int) [clone .cold]
 t CVRCompositorClientBase::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositorClientBase::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositorClientBase::GetPosesForFrame(unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositorClientBase::GetTrackingSpace()
 t CVRCompositorClientBase::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositorClientBase::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositorClientBase::HideMirrorWindow()
 t CVRCompositorClientBase::Init()
 t CVRCompositorClientBase::Init() [clone .cold]
 t CVRCompositorClientBase::IsCurrentSceneFocusAppLoading()
 t CVRCompositorClientBase::IsCurrentSceneFocusAppLoading() [clone .cold]
 t CVRCompositorClientBase::IsFullscreen()
 t CVRCompositorClientBase::IsFullscreen() [clone .cold]
 t CVRCompositorClientBase::IsMirrorWindowVisible()
 t CVRCompositorClientBase::IsMotionSmoothingEnabled()
 t CVRCompositorClientBase::IsMotionSmoothingEnabled() [clone .cold]
 t CVRCompositorClientBase::IsMotionSmoothingSupported()
 t CVRCompositorClientBase::IsMotionSmoothingSupported() [clone .cold]
 t CVRCompositorClientBase::LockGLSharedTextureForAccess(void*)
 t CVRCompositorClientBase::PostPresentHandoff()
 t CVRCompositorClientBase::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositorClientBase::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositorClientBase::SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t CVRCompositorClientBase::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositorClientBase::SetSkyboxOverride(vr::Texture_t const*, unsigned int) [clone .cold]
 t CVRCompositorClientBase::SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t CVRCompositorClientBase::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositorClientBase::SetTrackingSpace(vr::ETrackingUniverseOrigin) [clone .cold]
 t CVRCompositorClientBase::ShouldAppRenderWithLowResources()
 t CVRCompositorClientBase::ShowMirrorWindow()
 t CVRCompositorClientBase::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositorClientBase::SubmitExplicitTimingData()
 t CVRCompositorClientBase::SuspendRendering(bool)
 t CVRCompositorClientBase::TestOrCaptureSceneFocus()
 t CVRCompositorClientBase::TestOrCaptureSceneFocus() [clone .cold]
 t CVRCompositorClientBase::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositorClientBase::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositorClientBase::~CVRCompositorClientBase()
 t CVRCompositorSharedTextures::AcquireSync()
 t CVRCompositorSharedTextures::AcquireSync() [clone .cold]
 t CVRCompositorSharedTextures::BSupportsKHRInterop(CVRCompositorSharedTextures::VulkanDeviceData_t const*)
 t CVRCompositorSharedTextures::BeginCommandBuffer(VkDevice_T*)
 t CVRCompositorSharedTextures::BeginCommandBuffer(VkDevice_T*) [clone .cold]
 t CVRCompositorSharedTextures::BeginCommandBuffer(vr::Texture_t const*)
 t CVRCompositorSharedTextures::BeginFrameTiming()
 t CVRCompositorSharedTextures::BeginGPUTimingCommandBuffer(vr::Texture_t const*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::GetAPISpecificTextureSetData(void*, CVRCompositorSharedTextures::ISharedTextureSet::APISpecificTextureType_t)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::GetCounter() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::GetDeviceType() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::GetTextureData(unsigned int, VRCompositorState_TextureSet_t*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::Release(CVRCompositorSharedTextures*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::SetCounter(unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::GetAPISpecificTextureSetData(void*, CVRCompositorSharedTextures::ISharedTextureSet::APISpecificTextureType_t)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::GetCounter() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::GetDeviceType() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::GetTextureData(unsigned int, VRCompositorState_TextureSet_t*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::IsReleaseable() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::Release(CVRCompositorSharedTextures*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::SetCounter(unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::GetAPISpecificTextureSetData(void*, CVRCompositorSharedTextures::ISharedTextureSet::APISpecificTextureType_t)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::GetCounter() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::GetDeviceType() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::GetTextureData(unsigned int, VRCompositorState_TextureSet_t*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::Release(CVRCompositorSharedTextures*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::SetCounter(unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::GetAPISpecificTextureSetData(void*, CVRCompositorSharedTextures::ISharedTextureSet::APISpecificTextureType_t)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::GetCounter() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::GetDeviceType() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::GetTextureData(unsigned int, VRCompositorState_TextureSet_t*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::IsReleaseable() const
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::Release(CVRCompositorSharedTextures*)
 t CVRCompositorSharedTextures::CSharedTextureSet<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::SetCounter(unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::CreateSharedTextures(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::IsReleaseable() const
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::ResizeTexture(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*, unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 1u>::~CSharedTextureSetSHM()
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::CreateSharedTextures(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::IsReleaseable() const
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::ResizeTexture(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*, unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataGL_t, 3u>::~CSharedTextureSetSHM()
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::CreateSharedTextures(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::IsReleaseable() const
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::ResizeTexture(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*, unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 1u>::~CSharedTextureSetSHM()
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::CreateSharedTextures(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::IsReleaseable() const
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::ResizeTexture(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::SharedTextureData_t::CreateStruct_t const*, unsigned int)
 t CVRCompositorSharedTextures::CSharedTextureSetSHM<CVRCompositorSharedTextures::SharedTextureDataVulkan_t, 3u>::~CSharedTextureSetSHM()
 t CVRCompositorSharedTextures::CTextureCacheKey::AddToKey(void const*, unsigned long)
 t CVRCompositorSharedTextures::CTextureCacheKey::CTextureCacheKey()
 t CVRCompositorSharedTextures::CTextureCacheKey::MatchingBuffer(CVRCompositorSharedTextures::CTextureCacheKey const&) const
 t CVRCompositorSharedTextures::CTextureCacheKey::~CTextureCacheKey()
 t CVRCompositorSharedTextures::ClientToCompositorSyncSignal(unsigned long)
 t CVRCompositorSharedTextures::CompositorToClientSyncWait(unsigned long)
 t CVRCompositorSharedTextures::CopyFrameInfo(CVRCompositorSharedTextures::CommandBuffer_t const*, unsigned long)
 t CVRCompositorSharedTextures::CopyVulkanTexture(CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::VulkanBackingImage_t*, vr::VRVulkanTextureData_t*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, vr::VRTextureBounds_t*, VkDeviceMemory_T*, CVRCompositorSharedTextures::VulkanBackingImage_t*, vr::VRVulkanTextureData_t*)
 t CVRCompositorSharedTextures::CopyVulkanTexture(CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::VulkanBackingImage_t*, vr::VRVulkanTextureData_t*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, vr::VRTextureBounds_t*, VkDeviceMemory_T*, CVRCompositorSharedTextures::VulkanBackingImage_t*, vr::VRVulkanTextureData_t*) [clone .cold]
 t CVRCompositorSharedTextures::EndCommandBuffer(CVRCompositorSharedTextures::CommandBuffer_t**)
 t CVRCompositorSharedTextures::EndCommandBuffer(CVRCompositorSharedTextures::CommandBuffer_t**) [clone .cold]
 t CVRCompositorSharedTextures::EndFrameTiming()
 t CVRCompositorSharedTextures::FindInSrvCache(CVRCompositorSharedTextures::CTextureCacheKey const&)
 t CVRCompositorSharedTextures::FindInTextureCache(CVRCompositorSharedTextures::CTextureCacheKey const&)
 t CVRCompositorSharedTextures::FinishOpenCommandBuffer(CVRCompositorSharedTextures::CommandBuffer_t**, bool)
 t CVRCompositorSharedTextures::Flush(CVRCompositorSharedTextures::CommandBuffer_t**)
 t CVRCompositorSharedTextures::GPUWaitForSharedVRTexture(vr::Texture_t*, vr::IVRSharedImage*, vr::VRNativeDevice_t*)
 t CVRCompositorSharedTextures::GetCachedVulkanDeviceData(VkDevice_T*)
 t CVRCompositorSharedTextures::GetD3D11Device(void**, void*, void*, unsigned int)
 t CVRCompositorSharedTextures::GetDevice(vr::Texture_t const*, vr::EVRSubmitFlags, void**)
 t CVRCompositorSharedTextures::GetFrameInfo(CompositorFrameInfoConstantBuffer_t*, bool) const
 t CVRCompositorSharedTextures::GetFrameTiming(float*, unsigned int)
 t CVRCompositorSharedTextures::GetFreeFence(CVRCompositorSharedTextures::VulkanDeviceData_t*)
 t CVRCompositorSharedTextures::GetGLTextureFromSharedTexture(unsigned long, unsigned int*, void**)
 t CVRCompositorSharedTextures::GetGLTextureFromSharedTexture(unsigned long, unsigned int*, void**) [clone .cold]
 t CVRCompositorSharedTextures::GetSharedTextureData(unsigned long, void*, unsigned int)
 t CVRCompositorSharedTextures::GetSharedTextureDataSubRegion(unsigned long, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int)
 t CVRCompositorSharedTextures::GetSharedTextureDataSubRegion(unsigned long, unsigned int, unsigned int, unsigned int, unsigned int, void*, unsigned int) [clone .cold]
 t CVRCompositorSharedTextures::GetSharedTextureDetails(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*)
 t CVRCompositorSharedTextures::GetSharedTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVRCompositorSharedTextures::GetSharedTextureSize(unsigned long, unsigned int*, unsigned int*) [clone .cold]
 t CVRCompositorSharedTextures::GetVRTextureFromSharedTexture(unsigned long, vr::VRNativeDevice_t*, vr::ETextureType, vr::EColorSpace, vr::Texture_t**, vr::IVRSharedImage**)
 t CVRCompositorSharedTextures::GetVRTextureFromSharedTexture(unsigned long, vr::VRNativeDevice_t*, vr::ETextureType, vr::EColorSpace, vr::Texture_t**, vr::IVRSharedImage**) [clone .cold]
 t CVRCompositorSharedTextures::GetVulkanDeviceData(vr::VRVulkanTextureData_t const*)
 t CVRCompositorSharedTextures::GetVulkanDeviceData(vr::VRVulkanTextureData_t const*) [clone .cold]
 t CVRCompositorSharedTextures::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositorSharedTextures::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int) [clone .cold]
 t CVRCompositorSharedTextures::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositorSharedTextures::GetVulkanSemaphoreClientToCompositor() const
 t CVRCompositorSharedTextures::GetVulkanSemaphoreCompositorToClient() const
 t CVRCompositorSharedTextures::ISharedTextureSet::NeedsPurge(CVRCompositorSharedTextures*, unsigned int) const
 t CVRCompositorSharedTextures::Init(vr::IVRSystem*, unsigned long, unsigned int, vr::IVRDriverDirectInternal*, vr::IVRIPCResourceManagerClient*)
 t CVRCompositorSharedTextures::InitVulkanInteropDevice()
 t CVRCompositorSharedTextures::InitVulkanInteropDevice() [clone .part.0]
 t CVRCompositorSharedTextures::InitVulkanTimingDevice(VkInstance_T*, VkPhysicalDevice_T*, VkDevice_T*, VkQueue_T*, unsigned int)
 t CVRCompositorSharedTextures::InitializeVulkan()
 t CVRCompositorSharedTextures::LockGLSharedTextureForAccess(void*)
 t CVRCompositorSharedTextures::MarkTimingEvent(unsigned int, char const*)
 t CVRCompositorSharedTextures::OpenSharedTextureD3D11(unsigned long, void*, void**)
 t CVRCompositorSharedTextures::Params::GetDepthInfo() const
 t CVRCompositorSharedTextures::Params::GetVulkanArrayData(bool) const
 t CVRCompositorSharedTextures::Params::GetVulkanArrayIndex(bool) const
 t CVRCompositorSharedTextures::Params::GetVulkanArraySize(bool) const
 t CVRCompositorSharedTextures::PurgeOldCacheEntries(unsigned int)
 t CVRCompositorSharedTextures::Release()
 t CVRCompositorSharedTextures::Release() [clone .cold]
 t CVRCompositorSharedTextures::ReleaseNativeOverlayHandle(void*)
 t CVRCompositorSharedTextures::ReleaseSharedGLTexture(unsigned int, void*, unsigned long*)
 t CVRCompositorSharedTextures::ReleaseSharedTextureD3D11(void*, unsigned long*)
 t CVRCompositorSharedTextures::ReleaseSharedVRTexture(vr::Texture_t**, vr::IVRSharedImage**)
 t CVRCompositorSharedTextures::ReleaseSync()
 t CVRCompositorSharedTextures::ReleaseSync() [clone .cold]
 t CVRCompositorSharedTextures::ServerPipeLost()
 t CVRCompositorSharedTextures::SetSwapTextureSetVersion(unsigned int)
 t CVRCompositorSharedTextures::SetTimingCommandBuffer(CVRCompositorSharedTextures::CommandBuffer_t*)
 t CVRCompositorSharedTextures::SharedTextureDataGL_t::Create(CVRCompositorSharedTextures::SharedTextureDataGL_t::CreateStruct_t const*)
 t CVRCompositorSharedTextures::SharedTextureDataGL_t::Create(CVRCompositorSharedTextures::SharedTextureDataGL_t::CreateStruct_t const*) [clone .cold]
 t CVRCompositorSharedTextures::SharedTextureDataGL_t::GetSize(unsigned int*, unsigned int*)
 t CVRCompositorSharedTextures::SharedTextureDataGL_t::IsReleaseable() const
 t CVRCompositorSharedTextures::SharedTextureDataGL_t::Release(CVRCompositorSharedTextures*)
 t CVRCompositorSharedTextures::SharedTextureDataGL_t::Update(void*, vr::VRTextureBounds_t*, unsigned int, unsigned int, CVRCompositorSharedTextures::CommandBuffer_t*)
 t CVRCompositorSharedTextures::SharedTextureDataVulkan_t::Create(CVRCompositorSharedTextures::SharedTextureDataVulkan_t::CreateStruct_t const*)
 t CVRCompositorSharedTextures::SharedTextureDataVulkan_t::GetSize(unsigned int*, unsigned int*)
 t CVRCompositorSharedTextures::SharedTextureDataVulkan_t::IsReleaseable() const
 t CVRCompositorSharedTextures::SharedTextureDataVulkan_t::Release(CVRCompositorSharedTextures*)
 t CVRCompositorSharedTextures::SharedTextureDataVulkan_t::Update(void*, vr::VRTextureBounds_t*, unsigned int, unsigned int, CVRCompositorSharedTextures::CommandBuffer_t*)
 t CVRCompositorSharedTextures::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositorSharedTextures::UpdateSceneTextureData(CVRCompositorSharedTextures::CommandBuffer_t const*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned long, vr::HmdMatrix34_t const*, vr::HmdMatrix44_t const*, vr::ESpatialEncodeMode const*, vr::HmdVector4_t const*, vr::HmdVector4_t const*, vr::VRTextureBounds_t const*, unsigned int const*)
 t CVRCompositorSharedTextures::UpdateSceneTextureData(SceneTextureIndexConstantBuffer_t*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned long, vr::HmdMatrix34_t const*, vr::HmdMatrix44_t const*, vr::ESpatialEncodeMode const*, vr::HmdVector4_t const*, vr::HmdVector4_t const*, vr::VRTextureBounds_t const*, unsigned int const*)
 t CVRCompositorSharedTextures::UpdateTextureSet(CVRCompositorSharedTextures::Params const*, VRCompositorState_TextureSet_t*)
 t CVRCompositorSharedTextures::UpdateTextureSet(CVRCompositorSharedTextures::Params const*, VRCompositorState_TextureSet_t*) [clone .cold]
 t CVRCompositorSharedTextures::UpdateVRRenderer(void*, void*, void*)
 t CVRCompositorSharedTextures::UpdateVRRenderer(void*, void*, void*) [clone .cold]
 t CVRCompositorSharedTextures::VerifyDevice(void*)
 t CVRCompositorSharedTextures::VerifyVulkanPhysicalDevice(void const*, void const*)
 t CVRCompositorSharedTextures::VulkanBackingImage_t::Release()
 t CVRCompositorSharedTextures::VulkanDeviceData_t* std::__uninitialized_copy<false>::__uninit_copy<CVRCompositorSharedTextures::VulkanDeviceData_t const*, CVRCompositorSharedTextures::VulkanDeviceData_t*>(CVRCompositorSharedTextures::VulkanDeviceData_t const*, CVRCompositorSharedTextures::VulkanDeviceData_t const*, CVRCompositorSharedTextures::VulkanDeviceData_t*)
 t CVRCompositorSharedTextures::VulkanDeviceData_t::Release()
 t CVRCompositorSharedTextures::VulkanDeviceData_t::VulkanDeviceData_t(CVRCompositorSharedTextures::VulkanDeviceData_t const&)
 t CVRCompositorSharedTextures::VulkanDeviceData_t::~VulkanDeviceData_t()
 t CVRCompositor_003::ClearLastSubmittedFrame()
 t CVRCompositor_003::ClearOverlay()
 t CVRCompositor_003::CompositorBringToFront()
 t CVRCompositor_003::CompositorGoToBack()
 t CVRCompositor_003::CompositorQuit()
 t CVRCompositor_003::FadeGrid(float, bool)
 t CVRCompositor_003::FadeToColor(float, float, float, float, float)
 t CVRCompositor_003::GetFrameTiming(unsigned int)
 t CVRCompositor_003::GetGamma()
 t CVRCompositor_003::GetLastError(char*, unsigned int)
 t CVRCompositor_003::GetOverlayDefaults()
 t CVRCompositor_003::GetVSync()
 t CVRCompositor_003::SetGamma(float)
 t CVRCompositor_003::SetGraphicsDevice(Compositor_DeviceType, void*)
 t CVRCompositor_003::SetOverlay(void*, Compositor_OverlaySettings_004*)
 t CVRCompositor_003::SetOverlayFromFile(char const*, Compositor_OverlaySettings_004*)
 t CVRCompositor_003::SetOverlayRaw(void*, unsigned int, unsigned int, unsigned int, Compositor_OverlaySettings_004*)
 t CVRCompositor_003::SetVSync(bool)
 t CVRCompositor_003::Submit(vr::EVREye, void*, vr::VRTextureBounds_t*)
 t CVRCompositor_003::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_004::ClearLastSubmittedFrame()
 t CVRCompositor_004::ClearOverlay()
 t CVRCompositor_004::CompositorBringToFront()
 t CVRCompositor_004::CompositorGoToBack()
 t CVRCompositor_004::CompositorQuit()
 t CVRCompositor_004::FadeGrid(float, bool)
 t CVRCompositor_004::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_004::GetFrameTiming(unsigned int)
 t CVRCompositor_004::GetGamma()
 t CVRCompositor_004::GetLastError(char*, unsigned int)
 t CVRCompositor_004::GetOverlayDefaults()
 t CVRCompositor_004::GetVSync()
 t CVRCompositor_004::IsFullscreen()
 t CVRCompositor_004::SetGamma(float)
 t CVRCompositor_004::SetGraphicsDevice(Compositor_DeviceType, void*)
 t CVRCompositor_004::SetOverlay(void*, Compositor_OverlaySettings_004*)
 t CVRCompositor_004::SetOverlayFromFile(char const*, Compositor_OverlaySettings_004*)
 t CVRCompositor_004::SetOverlayRaw(void*, unsigned int, unsigned int, unsigned int, Compositor_OverlaySettings_004*)
 t CVRCompositor_004::SetVSync(bool)
 t CVRCompositor_004::Submit(vr::EVREye, void*, vr::VRTextureBounds_t*)
 t CVRCompositor_004::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_005::BEnsureLegacyOverlay(vr::Compositor_OverlaySettings*)
 t CVRCompositor_005::ClearLastSubmittedFrame()
 t CVRCompositor_005::ClearOverlay()
 t CVRCompositor_005::CompositorBringToFront()
 t CVRCompositor_005::CompositorGoToBack()
 t CVRCompositor_005::CompositorQuit()
 t CVRCompositor_005::ComputeOverlayIntersection(vr::Compositor_OverlaySettings const*, float, vr::ETrackingUniverseOrigin, vr::HmdVector3_t, vr::HmdVector3_t, vr::HmdVector2_t*, vr::HmdVector3_t*)
 t CVRCompositor_005::FadeGrid(float, bool)
 t CVRCompositor_005::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_005::GetCurrentSceneProcess()
 t CVRCompositor_005::GetFrameTiming(Compositor_FrameTiming_010*, unsigned int)
 t CVRCompositor_005::GetGamma()
 t CVRCompositor_005::GetLastError(char*, unsigned int)
 t CVRCompositor_005::GetOverlayDefaults(vr::Compositor_OverlaySettings*)
 t CVRCompositor_005::GetTrackingSpace()
 t CVRCompositor_005::GetVSync()
 t CVRCompositor_005::IsFullscreen()
 t CVRCompositor_005::SetGamma(float)
 t CVRCompositor_005::SetGraphicsDevice(Compositor_DeviceType, void*)
 t CVRCompositor_005::SetOverlay(void*, vr::Compositor_OverlaySettings*)
 t CVRCompositor_005::SetOverlayFromFile(char const*, vr::Compositor_OverlaySettings*)
 t CVRCompositor_005::SetOverlayRaw(void*, unsigned int, unsigned int, unsigned int, vr::Compositor_OverlaySettings*)
 t CVRCompositor_005::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_005::SetVSync(bool)
 t CVRCompositor_005::Submit(vr::EVREye, void*, vr::VRTextureBounds_t*)
 t CVRCompositor_005::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_006::CanRenderScene()
 t CVRCompositor_006::ClearLastSubmittedFrame()
 t CVRCompositor_006::CompositorBringToFront()
 t CVRCompositor_006::CompositorGoToBack()
 t CVRCompositor_006::CompositorQuit()
 t CVRCompositor_006::FadeGrid(float, bool)
 t CVRCompositor_006::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_006::GetCurrentSceneFocusProcess()
 t CVRCompositor_006::GetFrameTiming(Compositor_FrameTiming_010*, unsigned int)
 t CVRCompositor_006::GetGamma()
 t CVRCompositor_006::GetLastError(char*, unsigned int)
 t CVRCompositor_006::GetTrackingSpace()
 t CVRCompositor_006::GetVSync()
 t CVRCompositor_006::IsFullscreen()
 t CVRCompositor_006::SetGamma(float)
 t CVRCompositor_006::SetGraphicsDevice(Compositor_DeviceType, void*)
 t CVRCompositor_006::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_006::SetVSync(bool)
 t CVRCompositor_006::Submit(vr::EVREye, void*, vr::VRTextureBounds_t*)
 t CVRCompositor_006::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_007::CanRenderScene()
 t CVRCompositor_007::ClearLastSubmittedFrame()
 t CVRCompositor_007::CompositorBringToFront()
 t CVRCompositor_007::CompositorGoToBack()
 t CVRCompositor_007::CompositorQuit()
 t CVRCompositor_007::FadeGrid(float, bool)
 t CVRCompositor_007::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_007::GetCurrentSceneFocusProcess()
 t CVRCompositor_007::GetFrameTiming(Compositor_FrameTiming_010*, unsigned int)
 t CVRCompositor_007::GetGamma()
 t CVRCompositor_007::GetLastError(char*, unsigned int)
 t CVRCompositor_007::GetTrackingSpace()
 t CVRCompositor_007::GetVSync()
 t CVRCompositor_007::IsFullscreen()
 t CVRCompositor_007::SetGamma(float)
 t CVRCompositor_007::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_007::SetVSync(bool)
 t CVRCompositor_007::Submit(vr::EVREye, vr::ETextureType, void*, vr::VRTextureBounds_t const*)
 t CVRCompositor_007::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_008::CanRenderScene()
 t CVRCompositor_008::ClearLastSubmittedFrame()
 t CVRCompositor_008::ClearSkyboxOverride()
 t CVRCompositor_008::CompositorBringToFront()
 t CVRCompositor_008::CompositorDumpImages()
 t CVRCompositor_008::CompositorGoToBack()
 t CVRCompositor_008::CompositorQuit()
 t CVRCompositor_008::FadeGrid(float, bool)
 t CVRCompositor_008::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_008::GetCurrentSceneFocusProcess()
 t CVRCompositor_008::GetFrameTimeRemaining()
 t CVRCompositor_008::GetFrameTiming(Compositor_FrameTiming_010*, unsigned int)
 t CVRCompositor_008::GetGamma()
 t CVRCompositor_008::GetLastError(char*, unsigned int)
 t CVRCompositor_008::GetLastFrameRenderer()
 t CVRCompositor_008::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_008::GetTrackingSpace()
 t CVRCompositor_008::GetVSync()
 t CVRCompositor_008::HideMirrorWindow()
 t CVRCompositor_008::IsFullscreen()
 t CVRCompositor_008::IsMirrorWindowVisible()
 t CVRCompositor_008::PostPresentHandoff()
 t CVRCompositor_008::SetGamma(float)
 t CVRCompositor_008::SetSkyboxOverride(vr::ETextureType, void*, void*, void*, void*, void*, void*)
 t CVRCompositor_008::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_008::SetVSync(bool)
 t CVRCompositor_008::ShowMirrorWindow()
 t CVRCompositor_008::Submit(vr::EVREye, vr::ETextureType, void*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_008::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_009::CanRenderScene()
 t CVRCompositor_009::ClearLastSubmittedFrame()
 t CVRCompositor_009::ClearSkyboxOverride()
 t CVRCompositor_009::CompositorBringToFront()
 t CVRCompositor_009::CompositorDumpImages()
 t CVRCompositor_009::CompositorGoToBack()
 t CVRCompositor_009::CompositorQuit()
 t CVRCompositor_009::FadeGrid(float, bool)
 t CVRCompositor_009::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_009::GetCurrentSceneFocusProcess()
 t CVRCompositor_009::GetFrameTimeRemaining()
 t CVRCompositor_009::GetFrameTiming(Compositor_FrameTiming_010*, unsigned int)
 t CVRCompositor_009::GetLastFrameRenderer()
 t CVRCompositor_009::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_009::GetTrackingSpace()
 t CVRCompositor_009::HideMirrorWindow()
 t CVRCompositor_009::IsFullscreen()
 t CVRCompositor_009::IsMirrorWindowVisible()
 t CVRCompositor_009::PostPresentHandoff()
 t CVRCompositor_009::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_009::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_009::ShowMirrorWindow()
 t CVRCompositor_009::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_009::ToggleCameraReprojection()
 t CVRCompositor_009::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_010::CanRenderScene()
 t CVRCompositor_010::ClearLastSubmittedFrame()
 t CVRCompositor_010::ClearSkyboxOverride()
 t CVRCompositor_010::CompositorBringToFront()
 t CVRCompositor_010::CompositorDumpImages()
 t CVRCompositor_010::CompositorGoToBack()
 t CVRCompositor_010::CompositorQuit()
 t CVRCompositor_010::FadeGrid(float, bool)
 t CVRCompositor_010::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_010::GetCurrentSceneFocusProcess()
 t CVRCompositor_010::GetFrameTimeRemaining()
 t CVRCompositor_010::GetFrameTiming(Compositor_FrameTiming_010*, unsigned int)
 t CVRCompositor_010::GetLastFrameRenderer()
 t CVRCompositor_010::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_010::GetTrackingSpace()
 t CVRCompositor_010::HideMirrorWindow()
 t CVRCompositor_010::IsFullscreen()
 t CVRCompositor_010::IsMirrorWindowVisible()
 t CVRCompositor_010::PostPresentHandoff()
 t CVRCompositor_010::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_010::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_010::ShowMirrorWindow()
 t CVRCompositor_010::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_010::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_011::CanRenderScene()
 t CVRCompositor_011::ClearLastSubmittedFrame()
 t CVRCompositor_011::ClearSkyboxOverride()
 t CVRCompositor_011::CompositorBringToFront()
 t CVRCompositor_011::CompositorDumpImages()
 t CVRCompositor_011::CompositorGoToBack()
 t CVRCompositor_011::CompositorQuit()
 t CVRCompositor_011::FadeGrid(float, bool)
 t CVRCompositor_011::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_011::GetCurrentSceneFocusProcess()
 t CVRCompositor_011::GetFrameTimeRemaining()
 t CVRCompositor_011::GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t CVRCompositor_011::GetLastFrameRenderer()
 t CVRCompositor_011::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_011::GetTrackingSpace()
 t CVRCompositor_011::HideMirrorWindow()
 t CVRCompositor_011::IsFullscreen()
 t CVRCompositor_011::IsMirrorWindowVisible()
 t CVRCompositor_011::PostPresentHandoff()
 t CVRCompositor_011::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_011::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_011::ShowMirrorWindow()
 t CVRCompositor_011::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_011::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_012::CanRenderScene()
 t CVRCompositor_012::ClearLastSubmittedFrame()
 t CVRCompositor_012::ClearSkyboxOverride()
 t CVRCompositor_012::CompositorBringToFront()
 t CVRCompositor_012::CompositorDumpImages()
 t CVRCompositor_012::CompositorGoToBack()
 t CVRCompositor_012::CompositorQuit()
 t CVRCompositor_012::FadeGrid(float, bool)
 t CVRCompositor_012::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_012::GetCurrentSceneFocusProcess()
 t CVRCompositor_012::GetFrameTimeRemaining()
 t CVRCompositor_012::GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t CVRCompositor_012::GetLastFrameRenderer()
 t CVRCompositor_012::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_012::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_012::GetTrackingSpace()
 t CVRCompositor_012::HideMirrorWindow()
 t CVRCompositor_012::IsFullscreen()
 t CVRCompositor_012::IsMirrorWindowVisible()
 t CVRCompositor_012::PostPresentHandoff()
 t CVRCompositor_012::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_012::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_012::ShouldAppRenderWithLowResources()
 t CVRCompositor_012::ShowMirrorWindow()
 t CVRCompositor_012::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_012::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_013::CanRenderScene()
 t CVRCompositor_013::ClearLastSubmittedFrame()
 t CVRCompositor_013::ClearSkyboxOverride()
 t CVRCompositor_013::CompositorBringToFront()
 t CVRCompositor_013::CompositorDumpImages()
 t CVRCompositor_013::CompositorGoToBack()
 t CVRCompositor_013::CompositorQuit()
 t CVRCompositor_013::FadeGrid(float, bool)
 t CVRCompositor_013::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_013::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_013::ForceReconnectProcess()
 t CVRCompositor_013::GetCurrentSceneFocusProcess()
 t CVRCompositor_013::GetFrameTimeRemaining()
 t CVRCompositor_013::GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t CVRCompositor_013::GetLastFrameRenderer()
 t CVRCompositor_013::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_013::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_013::GetTrackingSpace()
 t CVRCompositor_013::HideMirrorWindow()
 t CVRCompositor_013::IsFullscreen()
 t CVRCompositor_013::IsMirrorWindowVisible()
 t CVRCompositor_013::PostPresentHandoff()
 t CVRCompositor_013::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_013::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_013::ShouldAppRenderWithLowResources()
 t CVRCompositor_013::ShowMirrorWindow()
 t CVRCompositor_013::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_013::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_014::CanRenderScene()
 t CVRCompositor_014::ClearLastSubmittedFrame()
 t CVRCompositor_014::ClearSkyboxOverride()
 t CVRCompositor_014::CompositorBringToFront()
 t CVRCompositor_014::CompositorDumpImages()
 t CVRCompositor_014::CompositorGoToBack()
 t CVRCompositor_014::CompositorQuit()
 t CVRCompositor_014::FadeGrid(float, bool)
 t CVRCompositor_014::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_014::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_014::ForceReconnectProcess()
 t CVRCompositor_014::GetCurrentSceneFocusProcess()
 t CVRCompositor_014::GetCurrentScreenshotType()
 t CVRCompositor_014::GetFrameTimeRemaining()
 t CVRCompositor_014::GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t CVRCompositor_014::GetLastFrameRenderer()
 t CVRCompositor_014::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_014::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_014::GetTrackingSpace()
 t CVRCompositor_014::HideMirrorWindow()
 t CVRCompositor_014::IsFullscreen()
 t CVRCompositor_014::IsMirrorWindowVisible()
 t CVRCompositor_014::PostPresentHandoff()
 t CVRCompositor_014::RequestScreenshot(vr::EVRScreenshotType, char const*)
 t CVRCompositor_014::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_014::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_014::ShouldAppRenderWithLowResources()
 t CVRCompositor_014::ShowMirrorWindow()
 t CVRCompositor_014::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_014::SuspendRendering(bool)
 t CVRCompositor_014::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_015::CanRenderScene()
 t CVRCompositor_015::ClearLastSubmittedFrame()
 t CVRCompositor_015::ClearSkyboxOverride()
 t CVRCompositor_015::CompositorBringToFront()
 t CVRCompositor_015::CompositorDumpImages()
 t CVRCompositor_015::CompositorGoToBack()
 t CVRCompositor_015::CompositorQuit()
 t CVRCompositor_015::FadeGrid(float, bool)
 t CVRCompositor_015::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_015::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_015::ForceReconnectProcess()
 t CVRCompositor_015::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_015::GetCurrentSceneFocusProcess()
 t CVRCompositor_015::GetCurrentScreenshotType()
 t CVRCompositor_015::GetFrameTimeRemaining()
 t CVRCompositor_015::GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t CVRCompositor_015::GetLastFrameRenderer()
 t CVRCompositor_015::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_015::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_015::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_015::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_015::GetTrackingSpace()
 t CVRCompositor_015::HideMirrorWindow()
 t CVRCompositor_015::IsFullscreen()
 t CVRCompositor_015::IsMirrorWindowVisible()
 t CVRCompositor_015::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_015::PostPresentHandoff()
 t CVRCompositor_015::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_015::RequestScreenshot(vr::EVRScreenshotType, char const*, char const*)
 t CVRCompositor_015::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_015::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_015::ShouldAppRenderWithLowResources()
 t CVRCompositor_015::ShowMirrorWindow()
 t CVRCompositor_015::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_015::SuspendRendering(bool)
 t CVRCompositor_015::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_015::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_016::CanRenderScene()
 t CVRCompositor_016::ClearLastSubmittedFrame()
 t CVRCompositor_016::ClearSkyboxOverride()
 t CVRCompositor_016::CompositorBringToFront()
 t CVRCompositor_016::CompositorDumpImages()
 t CVRCompositor_016::CompositorGoToBack()
 t CVRCompositor_016::CompositorQuit()
 t CVRCompositor_016::FadeGrid(float, bool)
 t CVRCompositor_016::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_016::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_016::ForceReconnectProcess()
 t CVRCompositor_016::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_016::GetCurrentSceneFocusProcess()
 t CVRCompositor_016::GetFrameTimeRemaining()
 t CVRCompositor_016::GetFrameTiming(Compositor_FrameTiming_016*, unsigned int)
 t CVRCompositor_016::GetLastFrameRenderer()
 t CVRCompositor_016::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_016::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_016::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_016::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_016::GetTrackingSpace()
 t CVRCompositor_016::HideMirrorWindow()
 t CVRCompositor_016::IsFullscreen()
 t CVRCompositor_016::IsMirrorWindowVisible()
 t CVRCompositor_016::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_016::PostPresentHandoff()
 t CVRCompositor_016::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_016::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_016::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_016::ShouldAppRenderWithLowResources()
 t CVRCompositor_016::ShowMirrorWindow()
 t CVRCompositor_016::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_016::SuspendRendering(bool)
 t CVRCompositor_016::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_016::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_017::CanRenderScene()
 t CVRCompositor_017::ClearLastSubmittedFrame()
 t CVRCompositor_017::ClearSkyboxOverride()
 t CVRCompositor_017::CompositorBringToFront()
 t CVRCompositor_017::CompositorDumpImages()
 t CVRCompositor_017::CompositorGoToBack()
 t CVRCompositor_017::CompositorQuit()
 t CVRCompositor_017::FadeGrid(float, bool)
 t CVRCompositor_017::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_017::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_017::ForceReconnectProcess()
 t CVRCompositor_017::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_017::GetCurrentSceneFocusProcess()
 t CVRCompositor_017::GetFrameTimeRemaining()
 t CVRCompositor_017::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_017::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_017::GetLastFrameRenderer()
 t CVRCompositor_017::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_017::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_017::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_017::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_017::GetTrackingSpace()
 t CVRCompositor_017::HideMirrorWindow()
 t CVRCompositor_017::IsFullscreen()
 t CVRCompositor_017::IsMirrorWindowVisible()
 t CVRCompositor_017::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_017::PostPresentHandoff()
 t CVRCompositor_017::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_017::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_017::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_017::ShouldAppRenderWithLowResources()
 t CVRCompositor_017::ShowMirrorWindow()
 t CVRCompositor_017::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_017::SuspendRendering(bool)
 t CVRCompositor_017::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_017::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_018::CanRenderScene()
 t CVRCompositor_018::ClearLastSubmittedFrame()
 t CVRCompositor_018::ClearSkyboxOverride()
 t CVRCompositor_018::CompositorBringToFront()
 t CVRCompositor_018::CompositorDumpImages()
 t CVRCompositor_018::CompositorGoToBack()
 t CVRCompositor_018::CompositorQuit()
 t CVRCompositor_018::FadeGrid(float, bool)
 t CVRCompositor_018::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_018::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_018::ForceReconnectProcess()
 t CVRCompositor_018::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_018::GetCurrentFadeColor(bool)
 t CVRCompositor_018::GetCurrentGridAlpha()
 t CVRCompositor_018::GetCurrentSceneFocusProcess()
 t CVRCompositor_018::GetFrameTimeRemaining()
 t CVRCompositor_018::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_018::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_018::GetLastFrameRenderer()
 t CVRCompositor_018::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_018::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_018::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_018::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_018::GetTrackingSpace()
 t CVRCompositor_018::HideMirrorWindow()
 t CVRCompositor_018::IsFullscreen()
 t CVRCompositor_018::IsMirrorWindowVisible()
 t CVRCompositor_018::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_018::PostPresentHandoff()
 t CVRCompositor_018::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_018::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_018::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_018::ShouldAppRenderWithLowResources()
 t CVRCompositor_018::ShowMirrorWindow()
 t CVRCompositor_018::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_018::SuspendRendering(bool)
 t CVRCompositor_018::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_018::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_019::CanRenderScene()
 t CVRCompositor_019::ClearLastSubmittedFrame()
 t CVRCompositor_019::ClearSkyboxOverride()
 t CVRCompositor_019::CompositorBringToFront()
 t CVRCompositor_019::CompositorDumpImages()
 t CVRCompositor_019::CompositorGoToBack()
 t CVRCompositor_019::CompositorQuit()
 t CVRCompositor_019::FadeGrid(float, bool)
 t CVRCompositor_019::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_019::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_019::ForceReconnectProcess()
 t CVRCompositor_019::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_019::GetCurrentFadeColor(bool)
 t CVRCompositor_019::GetCurrentGridAlpha()
 t CVRCompositor_019::GetCurrentSceneFocusProcess()
 t CVRCompositor_019::GetFrameTimeRemaining()
 t CVRCompositor_019::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_019::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_019::GetLastFrameRenderer()
 t CVRCompositor_019::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_019::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_019::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_019::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_019::GetTrackingSpace()
 t CVRCompositor_019::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_019::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_019::HideMirrorWindow()
 t CVRCompositor_019::IsFullscreen()
 t CVRCompositor_019::IsMirrorWindowVisible()
 t CVRCompositor_019::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_019::PostPresentHandoff()
 t CVRCompositor_019::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_019::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_019::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_019::ShouldAppRenderWithLowResources()
 t CVRCompositor_019::ShowMirrorWindow()
 t CVRCompositor_019::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_019::SuspendRendering(bool)
 t CVRCompositor_019::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_019::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_020::CanRenderScene()
 t CVRCompositor_020::ClearLastSubmittedFrame()
 t CVRCompositor_020::ClearSkyboxOverride()
 t CVRCompositor_020::CompositorBringToFront()
 t CVRCompositor_020::CompositorDumpImages()
 t CVRCompositor_020::CompositorGoToBack()
 t CVRCompositor_020::CompositorQuit()
 t CVRCompositor_020::FadeGrid(float, bool)
 t CVRCompositor_020::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_020::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_020::ForceReconnectProcess()
 t CVRCompositor_020::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_020::GetCurrentFadeColor(bool)
 t CVRCompositor_020::GetCurrentGridAlpha()
 t CVRCompositor_020::GetCurrentSceneFocusProcess()
 t CVRCompositor_020::GetFrameTimeRemaining()
 t CVRCompositor_020::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_020::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_020::GetLastFrameRenderer()
 t CVRCompositor_020::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_020::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_020::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_020::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_020::GetTrackingSpace()
 t CVRCompositor_020::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_020::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_020::HideMirrorWindow()
 t CVRCompositor_020::IsFullscreen()
 t CVRCompositor_020::IsMirrorWindowVisible()
 t CVRCompositor_020::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_020::PostPresentHandoff()
 t CVRCompositor_020::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositor_020::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_020::SetExplicitTimingMode(bool)
 t CVRCompositor_020::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_020::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_020::ShouldAppRenderWithLowResources()
 t CVRCompositor_020::ShowMirrorWindow()
 t CVRCompositor_020::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_020::SubmitExplicitTimingData()
 t CVRCompositor_020::SuspendRendering(bool)
 t CVRCompositor_020::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_020::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_021::CanRenderScene()
 t CVRCompositor_021::ClearLastSubmittedFrame()
 t CVRCompositor_021::ClearSkyboxOverride()
 t CVRCompositor_021::CompositorBringToFront()
 t CVRCompositor_021::CompositorDumpImages()
 t CVRCompositor_021::CompositorGoToBack()
 t CVRCompositor_021::CompositorQuit()
 t CVRCompositor_021::FadeGrid(float, bool)
 t CVRCompositor_021::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_021::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_021::ForceReconnectProcess()
 t CVRCompositor_021::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_021::GetCurrentFadeColor(bool)
 t CVRCompositor_021::GetCurrentGridAlpha()
 t CVRCompositor_021::GetCurrentSceneFocusProcess()
 t CVRCompositor_021::GetFrameTimeRemaining()
 t CVRCompositor_021::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_021::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_021::GetLastFrameRenderer()
 t CVRCompositor_021::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_021::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_021::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_021::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_021::GetTrackingSpace()
 t CVRCompositor_021::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_021::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_021::HideMirrorWindow()
 t CVRCompositor_021::IsFullscreen()
 t CVRCompositor_021::IsMirrorWindowVisible()
 t CVRCompositor_021::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_021::PostPresentHandoff()
 t CVRCompositor_021::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositor_021::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_021::SetExplicitTimingMode(bool)
 t CVRCompositor_021::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_021::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_021::ShouldAppRenderWithLowResources()
 t CVRCompositor_021::ShowMirrorWindow()
 t CVRCompositor_021::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_021::SubmitExplicitTimingData()
 t CVRCompositor_021::SuspendRendering(bool)
 t CVRCompositor_021::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_021::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_022::CanRenderScene()
 t CVRCompositor_022::ClearLastSubmittedFrame()
 t CVRCompositor_022::ClearSkyboxOverride()
 t CVRCompositor_022::CompositorBringToFront()
 t CVRCompositor_022::CompositorDumpImages()
 t CVRCompositor_022::CompositorGoToBack()
 t CVRCompositor_022::CompositorQuit()
 t CVRCompositor_022::FadeGrid(float, bool)
 t CVRCompositor_022::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_022::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_022::ForceReconnectProcess()
 t CVRCompositor_022::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_022::GetCurrentFadeColor(bool)
 t CVRCompositor_022::GetCurrentGridAlpha()
 t CVRCompositor_022::GetCurrentSceneFocusProcess()
 t CVRCompositor_022::GetFrameTimeRemaining()
 t CVRCompositor_022::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_022::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_022::GetLastFrameRenderer()
 t CVRCompositor_022::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_022::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_022::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_022::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_022::GetTrackingSpace()
 t CVRCompositor_022::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_022::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_022::HideMirrorWindow()
 t CVRCompositor_022::IsCurrentSceneFocusAppLoading()
 t CVRCompositor_022::IsFullscreen()
 t CVRCompositor_022::IsMirrorWindowVisible()
 t CVRCompositor_022::IsMotionSmoothingEnabled()
 t CVRCompositor_022::IsMotionSmoothingSupported()
 t CVRCompositor_022::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_022::PostPresentHandoff()
 t CVRCompositor_022::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositor_022::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_022::SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t CVRCompositor_022::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_022::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_022::ShouldAppRenderWithLowResources()
 t CVRCompositor_022::ShowMirrorWindow()
 t CVRCompositor_022::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_022::SubmitExplicitTimingData()
 t CVRCompositor_022::SuspendRendering(bool)
 t CVRCompositor_022::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_022::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_023::CanRenderScene()
 t CVRCompositor_023::ClearLastSubmittedFrame()
 t CVRCompositor_023::ClearSkyboxOverride()
 t CVRCompositor_023::ClearStageOverride()
 t CVRCompositor_023::CompositorBringToFront()
 t CVRCompositor_023::CompositorDumpImages()
 t CVRCompositor_023::CompositorGoToBack()
 t CVRCompositor_023::CompositorQuit()
 t CVRCompositor_023::FadeGrid(float, bool)
 t CVRCompositor_023::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_023::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_023::ForceReconnectProcess()
 t CVRCompositor_023::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_023::GetCurrentFadeColor(bool)
 t CVRCompositor_023::GetCurrentGridAlpha()
 t CVRCompositor_023::GetCurrentSceneFocusProcess()
 t CVRCompositor_023::GetFrameTimeRemaining()
 t CVRCompositor_023::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_023::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_023::GetLastFrameRenderer()
 t CVRCompositor_023::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_023::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_023::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_023::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_023::GetTrackingSpace()
 t CVRCompositor_023::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_023::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_023::HideMirrorWindow()
 t CVRCompositor_023::IsCurrentSceneFocusAppLoading()
 t CVRCompositor_023::IsFullscreen()
 t CVRCompositor_023::IsMirrorWindowVisible()
 t CVRCompositor_023::IsMotionSmoothingEnabled()
 t CVRCompositor_023::IsMotionSmoothingSupported()
 t CVRCompositor_023::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_023::PostPresentHandoff()
 t CVRCompositor_023::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositor_023::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_023::SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t CVRCompositor_023::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_023::SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, float, float, vr::HmdColor_t const*)
 t CVRCompositor_023::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_023::ShouldAppRenderWithLowResources()
 t CVRCompositor_023::ShowMirrorWindow()
 t CVRCompositor_023::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_023::SubmitExplicitTimingData()
 t CVRCompositor_023::SuspendRendering(bool)
 t CVRCompositor_023::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_023::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_024::CanRenderScene()
 t CVRCompositor_024::ClearLastSubmittedFrame()
 t CVRCompositor_024::ClearSkyboxOverride()
 t CVRCompositor_024::ClearStageOverride()
 t CVRCompositor_024::CompositorBringToFront()
 t CVRCompositor_024::CompositorDumpImages()
 t CVRCompositor_024::CompositorGoToBack()
 t CVRCompositor_024::CompositorQuit()
 t CVRCompositor_024::FadeGrid(float, bool)
 t CVRCompositor_024::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_024::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_024::ForceReconnectProcess()
 t CVRCompositor_024::GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int)
 t CVRCompositor_024::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_024::GetCurrentFadeColor(bool)
 t CVRCompositor_024::GetCurrentGridAlpha()
 t CVRCompositor_024::GetCurrentSceneFocusProcess()
 t CVRCompositor_024::GetFrameTimeRemaining()
 t CVRCompositor_024::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_024::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_024::GetLastFrameRenderer()
 t CVRCompositor_024::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_024::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_024::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_024::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_024::GetTrackingSpace()
 t CVRCompositor_024::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_024::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_024::HideMirrorWindow()
 t CVRCompositor_024::IsCurrentSceneFocusAppLoading()
 t CVRCompositor_024::IsFullscreen()
 t CVRCompositor_024::IsMirrorWindowVisible()
 t CVRCompositor_024::IsMotionSmoothingEnabled()
 t CVRCompositor_024::IsMotionSmoothingSupported()
 t CVRCompositor_024::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_024::PostPresentHandoff()
 t CVRCompositor_024::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositor_024::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_024::SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t CVRCompositor_024::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_024::SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t CVRCompositor_024::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_024::ShouldAppRenderWithLowResources()
 t CVRCompositor_024::ShowMirrorWindow()
 t CVRCompositor_024::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_024::SubmitExplicitTimingData()
 t CVRCompositor_024::SuspendRendering(bool)
 t CVRCompositor_024::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_024::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_025::CanRenderScene()
 t CVRCompositor_025::ClearLastSubmittedFrame()
 t CVRCompositor_025::ClearSkyboxOverride()
 t CVRCompositor_025::ClearStageOverride()
 t CVRCompositor_025::CompositorBringToFront()
 t CVRCompositor_025::CompositorDumpImages()
 t CVRCompositor_025::CompositorGoToBack()
 t CVRCompositor_025::CompositorQuit()
 t CVRCompositor_025::FadeGrid(float, bool)
 t CVRCompositor_025::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_025::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_025::ForceReconnectProcess()
 t CVRCompositor_025::GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int)
 t CVRCompositor_025::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_025::GetCurrentFadeColor(bool)
 t CVRCompositor_025::GetCurrentGridAlpha()
 t CVRCompositor_025::GetCurrentSceneFocusProcess()
 t CVRCompositor_025::GetFrameTimeRemaining()
 t CVRCompositor_025::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_025::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_025::GetLastFrameRenderer()
 t CVRCompositor_025::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_025::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_025::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_025::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_025::GetTrackingSpace()
 t CVRCompositor_025::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_025::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_025::HideMirrorWindow()
 t CVRCompositor_025::IsCurrentSceneFocusAppLoading()
 t CVRCompositor_025::IsFullscreen()
 t CVRCompositor_025::IsMirrorWindowVisible()
 t CVRCompositor_025::IsMotionSmoothingEnabled()
 t CVRCompositor_025::IsMotionSmoothingSupported()
 t CVRCompositor_025::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_025::PostPresentHandoff()
 t CVRCompositor_025::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositor_025::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_025::SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t CVRCompositor_025::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_025::SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t CVRCompositor_025::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_025::ShouldAppRenderWithLowResources()
 t CVRCompositor_025::ShowMirrorWindow()
 t CVRCompositor_025::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_025::SubmitExplicitTimingData()
 t CVRCompositor_025::SuspendRendering(bool)
 t CVRCompositor_025::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_025::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_026::AdjustReprojectionFlags(vr::Compositor_FrameTiming const&)
 t CVRCompositor_026::CanRenderScene()
 t CVRCompositor_026::ClearLastSubmittedFrame()
 t CVRCompositor_026::ClearSkyboxOverride()
 t CVRCompositor_026::ClearStageOverride()
 t CVRCompositor_026::CompositorBringToFront()
 t CVRCompositor_026::CompositorDumpImages()
 t CVRCompositor_026::CompositorGoToBack()
 t CVRCompositor_026::CompositorQuit()
 t CVRCompositor_026::FadeGrid(float, bool)
 t CVRCompositor_026::FadeToColor(float, float, float, float, float, bool)
 t CVRCompositor_026::ForceInterleavedReprojectionOn(bool)
 t CVRCompositor_026::ForceReconnectProcess()
 t CVRCompositor_026::GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int)
 t CVRCompositor_026::GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t CVRCompositor_026::GetCurrentFadeColor(bool)
 t CVRCompositor_026::GetCurrentGridAlpha()
 t CVRCompositor_026::GetCurrentSceneFocusProcess()
 t CVRCompositor_026::GetFrameTimeRemaining()
 t CVRCompositor_026::GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_026::GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRCompositor_026::GetLastFrameRenderer()
 t CVRCompositor_026::GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t CVRCompositor_026::GetLastPosePredictionIDs(unsigned int*, unsigned int*)
 t CVRCompositor_026::GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_026::GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t CVRCompositor_026::GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t CVRCompositor_026::GetPosesForFrame(unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRCompositor_026::GetTrackingSpace()
 t CVRCompositor_026::GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t CVRCompositor_026::GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t CVRCompositor_026::HideMirrorWindow()
 t CVRCompositor_026::IsCurrentSceneFocusAppLoading()
 t CVRCompositor_026::IsFullscreen()
 t CVRCompositor_026::IsMirrorWindowVisible()
 t CVRCompositor_026::IsMotionSmoothingEnabled()
 t CVRCompositor_026::IsMotionSmoothingSupported()
 t CVRCompositor_026::LockGLSharedTextureForAccess(void*)
 t CVRCompositor_026::PostPresentHandoff()
 t CVRCompositor_026::ReleaseMirrorTextureD3D11(void*)
 t CVRCompositor_026::ReleaseSharedGLTexture(unsigned int, void*)
 t CVRCompositor_026::SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t CVRCompositor_026::SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t CVRCompositor_026::SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t CVRCompositor_026::SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t CVRCompositor_026::ShouldAppRenderWithLowResources()
 t CVRCompositor_026::ShowMirrorWindow()
 t CVRCompositor_026::Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t CVRCompositor_026::SubmitExplicitTimingData()
 t CVRCompositor_026::SuspendRendering(bool)
 t CVRCompositor_026::UnlockGLSharedTextureForAccess(void*)
 t CVRCompositor_026::WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t CVRControlPanel_001::AbortTransition()
 t CVRControlPanel_001::ForceQuitProcess(unsigned int)
 t CVRControlPanel_001::GetCurrentCompositorInterface(char const*)
 t CVRControlPanel_001::GetCurrentDisplayInterface(char const*)
 t CVRControlPanel_001::GetDashboardEnabled()
 t CVRControlPanel_001::GetDriverCount()
 t CVRControlPanel_001::GetDriverDisplayCount(char const*)
 t CVRControlPanel_001::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int)
 t CVRControlPanel_001::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_001::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_001::GetDriverId(unsigned int, char*, unsigned int)
 t CVRControlPanel_001::GetIPD()
 t CVRControlPanel_001::GetVRMonitorState()
 t CVRControlPanel_001::LoadSharedResource(char const*, char*, unsigned int)
 t CVRControlPanel_001::PowerOffTrackedDevice(unsigned int)
 t CVRControlPanel_001::QuitProcess(unsigned int)
 t CVRControlPanel_001::SetDashboardEnabled(bool)
 t CVRControlPanel_001::SetIPD(float)
 t CVRControlPanel_001::SetMasterProcessToThis()
 t CVRControlPanel_001::SetVRMonitorState(vr::EVRState)
 t CVRControlPanel_001::StartAutolaunchOverlays()
 t CVRControlPanel_001::StartVRProcess(char const*, char const**, unsigned int, char const*)
 t CVRControlPanel_002::AbortTransition()
 t CVRControlPanel_002::ForceQuitProcess(unsigned int)
 t CVRControlPanel_002::GetCurrentCompositorInterface(char const*)
 t CVRControlPanel_002::GetCurrentDisplayInterface(char const*)
 t CVRControlPanel_002::GetDashboardEnabled()
 t CVRControlPanel_002::GetDriverCount()
 t CVRControlPanel_002::GetDriverDisplayCount(char const*)
 t CVRControlPanel_002::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int)
 t CVRControlPanel_002::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_002::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_002::GetDriverId(unsigned int, char*, unsigned int)
 t CVRControlPanel_002::GetDriverInitError(char const*)
 t CVRControlPanel_002::GetIPD()
 t CVRControlPanel_002::GetVRMonitorState()
 t CVRControlPanel_002::LoadSharedResource(char const*, char*, unsigned int)
 t CVRControlPanel_002::PowerOffTrackedDevice(unsigned int)
 t CVRControlPanel_002::QuitProcess(unsigned int)
 t CVRControlPanel_002::SetDashboardEnabled(bool)
 t CVRControlPanel_002::SetIPD(float)
 t CVRControlPanel_002::SetMasterProcessToThis()
 t CVRControlPanel_002::SetVRMonitorState(vr::EVRState)
 t CVRControlPanel_002::StartAutolaunchOverlays()
 t CVRControlPanel_002::StartVRProcess(char const*, char const**, unsigned int, char const*)
 t CVRControlPanel_003::AbortTransition()
 t CVRControlPanel_003::ForceQuitProcess(unsigned int)
 t CVRControlPanel_003::GetDashboardEnabled()
 t CVRControlPanel_003::GetDriverCount()
 t CVRControlPanel_003::GetDriverDisplayCount(char const*)
 t CVRControlPanel_003::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int)
 t CVRControlPanel_003::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_003::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_003::GetDriverId(unsigned int, char*, unsigned int)
 t CVRControlPanel_003::GetDriverInitError(char const*)
 t CVRControlPanel_003::GetVRMonitorState()
 t CVRControlPanel_003::PowerOffTrackedDevice(unsigned int)
 t CVRControlPanel_003::QuitProcess(unsigned int)
 t CVRControlPanel_003::SetDashboardEnabled(bool)
 t CVRControlPanel_003::SetMasterProcessToThis()
 t CVRControlPanel_003::SetVRMonitorState(vr::EVRState)
 t CVRControlPanel_003::StartAutolaunchOverlays()
 t CVRControlPanel_003::StartHomeApp()
 t CVRControlPanel_004::AbortTransition()
 t CVRControlPanel_004::ForceQuitProcess(unsigned int)
 t CVRControlPanel_004::ForwardLogMessageToServer(unsigned long, char const*, unsigned int, unsigned int, char const*)
 t CVRControlPanel_004::GetCameraRoomViewVisible()
 t CVRControlPanel_004::GetDashboardEnabled()
 t CVRControlPanel_004::GetDriverCount()
 t CVRControlPanel_004::GetDriverDisplayCount(char const*)
 t CVRControlPanel_004::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int)
 t CVRControlPanel_004::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_004::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_004::GetDriverId(unsigned int, char*, unsigned int)
 t CVRControlPanel_004::GetDriverInitError(char const*)
 t CVRControlPanel_004::GetVRMonitorState()
 t CVRControlPanel_004::PowerOffTrackedDevice(unsigned int)
 t CVRControlPanel_004::QuitProcess(unsigned int)
 t CVRControlPanel_004::ReconnectSubsystemProcesses()
 t CVRControlPanel_004::SetCameraRoomViewVisible(bool)
 t CVRControlPanel_004::SetDashboardEnabled(bool)
 t CVRControlPanel_004::SetMasterProcessRestartHint()
 t CVRControlPanel_004::SetMasterProcessToThis()
 t CVRControlPanel_004::SetVRMonitorState(vr::EVRState)
 t CVRControlPanel_004::Shutdown(bool)
 t CVRControlPanel_004::StartAutolaunchOverlays()
 t CVRControlPanel_004::StartHomeApp()
 t CVRControlPanel_004::WritePropertyDataToFile(char const*)
 t CVRControlPanel_005::AbortTransition()
 t CVRControlPanel_005::ForceQuitProcess(unsigned int)
 t CVRControlPanel_005::ForwardLogMessageToServer(unsigned long, char const*, unsigned int, unsigned int, char const*)
 t CVRControlPanel_005::GetCameraRoomViewVisible()
 t CVRControlPanel_005::GetDashboardEnabled()
 t CVRControlPanel_005::GetDriverCount()
 t CVRControlPanel_005::GetDriverDisplayCount(char const*)
 t CVRControlPanel_005::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int)
 t CVRControlPanel_005::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_005::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int)
 t CVRControlPanel_005::GetDriverId(unsigned int, char*, unsigned int)
 t CVRControlPanel_005::GetDriverInitError(char const*)
 t CVRControlPanel_005::GetVRMonitorState()
 t CVRControlPanel_005::GetWebSharedSecret()
 t CVRControlPanel_005::PowerOffTrackedDevice(unsigned int)
 t CVRControlPanel_005::QuitProcess(unsigned int)
 t CVRControlPanel_005::ReconnectSubsystemProcesses()
 t CVRControlPanel_005::SetCameraRoomViewVisible(bool)
 t CVRControlPanel_005::SetDashboardEnabled(bool)
 t CVRControlPanel_005::SetMasterProcessRestartHint()
 t CVRControlPanel_005::SetMasterProcessToThis()
 t CVRControlPanel_005::SetVRMonitorState(vr::EVRState)
 t CVRControlPanel_005::Shutdown(bool)
 t CVRControlPanel_005::StartAutolaunchOverlays()
 t CVRControlPanel_005::StartHomeApp()
 t CVRControlPanel_005::WritePropertyDataToFile(char const*)
 t CVRControllerComponentAdapter* CVRControllerComponentAdapter::Create<CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRControllerComponentAdapter* CVRControllerComponentAdapter::Create<vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRControllerComponent_Latest::GetControllerState()
 t CVRControllerComponent_Latest::TriggerHapticPulse(unsigned int, unsigned short)
 t CVRControllerComponent_Latest::~CVRControllerComponent_Latest()
 t CVRControllerTypeBindings::AddAction(CInputActionSet*, std::string const&, std::string const&, EInputActionType)
 t CVRControllerTypeBindings::AddAction(CInputActionSet*, std::string const&, std::string const&, EInputActionType) [clone .cold]
 t CVRControllerTypeBindings::AddActionAndBinding(CInputActionSet*, CActionBindingConfig&, EInputActionType, std::string const&, std::string const&, std::string const&, std::string const&)
 t CVRControllerTypeBindings::AddActionAndBinding(CInputActionSet*, CActionBindingConfig&, EInputActionType, std::string const&, std::string const&, std::string const&, std::string const&) [clone .cold]
 t CVRControllerTypeBindings::AddActionBinding(CActionBindingConfig&, std::string const&, std::string const&, std::string const&, std::string const&, EInputActionType)
 t CVRControllerTypeBindings::AddActionBinding(CActionBindingConfig&, std::string const&, std::string const&, std::string const&, std::string const&, EInputActionType) [clone .cold]
 t CVRControllerTypeBindings::AddPerInputTutorialActions(Json::Value const&, CInputActionManifest&, CActionBindingConfig&)
 t CVRControllerTypeBindings::AddPerInputTutorialActions(Json::Value const&, CInputActionManifest&, CActionBindingConfig&) [clone .cold]
 t CVRControllerTypeBindings::AppliesToDeviceContainer(unsigned long)
 t CVRControllerTypeBindings::AppliesToDevicePath(unsigned long)
 t CVRControllerTypeBindings::EraseOverridePropertiesForControllerType(unsigned long)
 t CVRControllerTypeBindings::GetBindingInfo(unsigned long) const
 t CVRControllerTypeBindings::GetBindingInfo(unsigned long) const [clone .cold]
 t CVRControllerTypeBindings::GetInputProfileSettings(std::string const&, Json::Value&)
 t CVRControllerTypeBindings::GetInputProfileSettings(std::string const&, Json::Value&) [clone .cold]
 t CVRControllerTypeBindings::GetOverrideDeviceClass()
 t CVRControllerTypeBindings::InitFromConfig(std::string const&, CInputActionManifest&, vr::ETrackedControllerRole)
 t CVRControllerTypeBindings::InitFromConfig(std::string const&, CInputActionManifest&, vr::ETrackedControllerRole) [clone .cold]
 t CVRControllerTypeBindings::OverridePropertiesForControllerType(unsigned long, std::map<std::string, Json::Value, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > > const&)
 t CVRControllerTypeBindings::OverridePropertiesForControllerType(unsigned long, std::map<std::string, Json::Value, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > > const&) [clone .cold]
 t CVRControllerTypeBindings::SendBindingUpdatedEvents()
 t CVRControllerTypeBindings::UpdateSimulatedDevices()
 t CVRDashboardManager_001::CloseKeyboard()
 t CVRDashboardManager_001::CreateDashboardCoreOverlay(char const*, char const*, unsigned long*)
 t CVRDashboardManager_001::FreeToastImageMemory(vr::DashboardNotificationInfo_t*)
 t CVRDashboardManager_001::GetAllOverlays(vr::DashboardOverlayState_t*, unsigned int)
 t CVRDashboardManager_001::GetDashboardOverlaysGeneration_Deleted()
 t CVRDashboardManager_001::GetDashboardOverlays_Deleted(vr::DashboardOverlayState_t*, unsigned int)
 t CVRDashboardManager_001::GetKeyboardInputType(vr::EGamepadTextInputMode*, vr::EGamepadTextInputLineMode*, unsigned int*, bool*, char*, int)
 t CVRDashboardManager_001::GetKeyboardOverlayHandle(unsigned long*)
 t CVRDashboardManager_001::GetKeyboardOwnerOverlay(unsigned long*)
 t CVRDashboardManager_001::GetKeyboardStats(KeyboardStats_t*)
 t CVRDashboardManager_001::GetMessageOverlayDetails(vr::VRMessageOverlayMessageDetails*)
 t CVRDashboardManager_001::GetNightModeEnabled(bool*)
 t CVRDashboardManager_001::GetNotificationPriority(char const*, unsigned int*)
 t CVRDashboardManager_001::GetPrimaryDashboardDevice()
 t CVRDashboardManager_001::GetThumbHandleForOverlayHandle(unsigned long)
 t CVRDashboardManager_001::GetToastInfo(unsigned int, vr::DashboardNotificationInfo_t*)
 t CVRDashboardManager_001::GetToastOverlayHandle(unsigned long*)
 t CVRDashboardManager_001::HasCameraRoomViewCapability()
 t CVRDashboardManager_001::HasOverlayMessagesToShow()
 t CVRDashboardManager_001::HideDashboard()
 t CVRDashboardManager_001::KeyboardHidden_Deleted()
 t CVRDashboardManager_001::KeyboardShown_Deleted()
 t CVRDashboardManager_001::OnMessageOverlayResponse(vr::VRMessageOverlayResponse)
 t CVRDashboardManager_001::OnProcessQuit(unsigned int)
 t CVRDashboardManager_001::ProcessHasVisibleOverlay(unsigned int)
 t CVRDashboardManager_001::SendKeyboardDone()
 t CVRDashboardManager_001::SetDashboardManager_Deleted(unsigned long)
 t CVRDashboardManager_001::SetDashboardOverlayTextureRotation(unsigned long, float)
 t CVRDashboardManager_001::SetDashboardOverlayTransform(unsigned long, vr::HmdQuaternion_t, vr::HmdVector3_t)
 t CVRDashboardManager_001::SetKeyboardMetrics(vr::HmdVector2_t, float, vr::HmdVector2_t, float)
 t CVRDashboardManager_001::SetKeyboardOverlayHandle(unsigned long)
 t CVRDashboardManager_001::SetKeyboardOverlayRendererToThis()
 t CVRDashboardManager_001::SetKeyboardResultText(char const*)
 t CVRDashboardManager_001::SetKeyboardStats(KeyboardStats_t*)
 t CVRDashboardManager_001::SetNightModeEnabled(bool)
 t CVRDashboardManager_001::SetNotificationPriority(char const*, unsigned int)
 t CVRDashboardManager_001::SetToastOverlayRendererToThis()
 t CVRDashboardManager_001::SetToastTexture_Deleted(vr::Texture_t const*)
 t CVRDashboardManager_001::SetUseSystemEnvironment_Deleted(bool)
 t CVRDashboardManager_001::ShowDashboard(unsigned int)
 t CVRDashboardManager_001::ToggleCameraRoomView()
 t CVRDashboardManager_001::UpdateKeyboardPosition_Deleted()
 t CVRDebug::BInit(CVRClient*)
 t CVRDebug::BeginVrProfilerEvent(unsigned long*)
 t CVRDebug::CVRDebug()
 t CVRDebug::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRDebug::DriverDebugRequest(unsigned int, char const*, char*, unsigned int) [clone .cold]
 t CVRDebug::EmitVrProfilerEvent(char const*)
 t CVRDebug::FinishVrProfilerEvent(unsigned long, char const*)
 t CVRDebug::~CVRDebug()
 t CVRDisplayComponentAdapter* CVRDisplayComponentAdapter::Create<CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRDisplayComponentAdapter* CVRDisplayComponentAdapter::Create<vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRDisplayComponentAdapter* CreateLatestAdapter<CVRDisplayComponent_Latest, CVRDisplayComponentAdapter, CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, char const*, char const*)
 t CVRDisplayComponentAdapter* CreateLatestAdapter<CVRDisplayComponent_Latest, CVRDisplayComponentAdapter, vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, char const*, char const*)
 t CVRDisplayComponent_001::ComputeDistortion(vr::EVREye, float, float)
 t CVRDisplayComponent_001::CreateSwapTextureSet(unsigned int, unsigned int, unsigned int, unsigned int, void* (*) [3])
 t CVRDisplayComponent_001::DestroyAllSwapTextureSets(unsigned int)
 t CVRDisplayComponent_001::DestroySwapTextureSet(void*)
 t CVRDisplayComponent_001::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRDisplayComponent_001::GetNextSwapTextureSetIndex(void**, unsigned int (*) [2])
 t CVRDisplayComponent_001::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRDisplayComponent_001::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRDisplayComponent_001::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRDisplayComponent_001::IsDisplayOnDesktop()
 t CVRDisplayComponent_001::IsDisplayRealDisplay()
 t CVRDisplayComponent_001::Present(void*)
 t CVRDisplayComponent_001::SubmitLayer(void**, vr::VRTextureBounds_t const (&) [2], vr::HmdMatrix34_t const*)
 t CVRDisplayComponent_001::~CVRDisplayComponent_001()
 t CVRDisplayComponent_Latest::ComputeDistortion(vr::EVREye, float, float)
 t CVRDisplayComponent_Latest::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRDisplayComponent_Latest::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRDisplayComponent_Latest::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRDisplayComponent_Latest::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRDisplayComponent_Latest::IsDisplayOnDesktop()
 t CVRDisplayComponent_Latest::IsDisplayRealDisplay()
 t CVRDisplayComponent_Latest::~CVRDisplayComponent_Latest()
 t CVRDriverDirectModeComponentAdapter* CVRDriverDirectModeComponentAdapter::Create<CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRDriverDirectModeComponentAdapter* CVRDriverDirectModeComponentAdapter::Create<vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRDriverDirectModeComponentAdapter* CreateLatestAdapter<CVRDriverDirectModeComponent_Latest, CVRDriverDirectModeComponentAdapter, CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, char const*, char const*)
 t CVRDriverDirectModeComponentAdapter* CreateLatestAdapter<CVRDriverDirectModeComponent_Latest, CVRDriverDirectModeComponentAdapter, vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, char const*, char const*)
 t CVRDriverDirectModeComponentAdapter::~CVRDriverDirectModeComponentAdapter()
 t CVRDriverDirectModeComponent_001::CreateSwapTextureSet(unsigned int, unsigned int, unsigned int, unsigned int, void* (*) [3])
 t CVRDriverDirectModeComponent_001::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_001::DestroySwapTextureSet(void*)
 t CVRDriverDirectModeComponent_001::GetNextSwapTextureSetIndex(void**, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_001::Present(void*)
 t CVRDriverDirectModeComponent_001::SubmitLayer(void**, vr::VRTextureBounds_t const (&) [2], vr::HmdMatrix34_t const*)
 t CVRDriverDirectModeComponent_001::~CVRDriverDirectModeComponent_001()
 t CVRDriverDirectModeComponent_002::CreateSwapTextureSet(unsigned int, unsigned int, unsigned int, unsigned int, unsigned long (*) [3])
 t CVRDriverDirectModeComponent_002::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_002::DestroySwapTextureSet(unsigned long)
 t CVRDriverDirectModeComponent_002::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_002::Present(unsigned long)
 t CVRDriverDirectModeComponent_002::SubmitLayer(unsigned long*, vr::VRTextureBounds_t const (&) [2], vr::HmdMatrix34_t const*)
 t CVRDriverDirectModeComponent_002::~CVRDriverDirectModeComponent_002()
 t CVRDriverDirectModeComponent_003::CreateSwapTextureSet(unsigned int, unsigned int, unsigned int, unsigned int, unsigned long (*) [3])
 t CVRDriverDirectModeComponent_003::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_003::DestroySwapTextureSet(unsigned long)
 t CVRDriverDirectModeComponent_003::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_003::PostPresent()
 t CVRDriverDirectModeComponent_003::Present(unsigned long)
 t CVRDriverDirectModeComponent_003::SubmitLayer(unsigned long*, vr::VRTextureBounds_t const (&) [2], vr::HmdMatrix34_t const*)
 t CVRDriverDirectModeComponent_003::~CVRDriverDirectModeComponent_003()
 t CVRDriverDirectModeComponent_004::CreateSwapTextureSet(unsigned int, unsigned int, unsigned int, unsigned int, unsigned long (*) [3])
 t CVRDriverDirectModeComponent_004::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_004::DestroySwapTextureSet(unsigned long)
 t CVRDriverDirectModeComponent_004::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t CVRDriverDirectModeComponent_004::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_004::PostPresent()
 t CVRDriverDirectModeComponent_004::Present(unsigned long)
 t CVRDriverDirectModeComponent_004::SubmitLayer(unsigned long*, vr::VRTextureBounds_t const (&) [2], vr::HmdMatrix34_t const*)
 t CVRDriverDirectModeComponent_004::~CVRDriverDirectModeComponent_004()
 t CVRDriverDirectModeComponent_005::CreateSwapTextureSet(unsigned int, vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, unsigned long (*) [3])
 t CVRDriverDirectModeComponent_005::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_005::DestroySwapTextureSet(unsigned long)
 t CVRDriverDirectModeComponent_005::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t CVRDriverDirectModeComponent_005::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_005::PostPresent()
 t CVRDriverDirectModeComponent_005::Present(unsigned long)
 t CVRDriverDirectModeComponent_005::SubmitLayer(IVRDriverDirectModeComponent_005::SubmitLayerPerEye_t const (&) [2], vr::HmdMatrix34_t const*)
 t CVRDriverDirectModeComponent_005::~CVRDriverDirectModeComponent_005()
 t CVRDriverDirectModeComponent_006::CreateSwapTextureSet(unsigned int, IVRDriverDirectModeComponent_006::SwapTextureSetDesc_t const*, unsigned long (*) [3])
 t CVRDriverDirectModeComponent_006::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_006::DestroySwapTextureSet(unsigned long)
 t CVRDriverDirectModeComponent_006::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t CVRDriverDirectModeComponent_006::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_006::PostPresent()
 t CVRDriverDirectModeComponent_006::Present(unsigned long)
 t CVRDriverDirectModeComponent_006::SubmitLayer(IVRDriverDirectModeComponent_006::SubmitLayerPerEye_t const (&) [2])
 t CVRDriverDirectModeComponent_006::~CVRDriverDirectModeComponent_006()
 t CVRDriverDirectModeComponent_007::CreateSwapTextureSet(unsigned int, vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, vr::IVRDriverDirectModeComponent::SwapTextureSet_t*)
 t CVRDriverDirectModeComponent_007::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_007::DestroySwapTextureSet(unsigned long)
 t CVRDriverDirectModeComponent_007::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t CVRDriverDirectModeComponent_007::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_007::PostPresent()
 t CVRDriverDirectModeComponent_007::Present(unsigned long)
 t CVRDriverDirectModeComponent_007::SubmitLayer(vr::IVRDriverDirectModeComponent::SubmitLayerPerEye_t const (&) [2])
 t CVRDriverDirectModeComponent_007::~CVRDriverDirectModeComponent_007()
 t CVRDriverDirectModeComponent_Latest::CreateSwapTextureSet(unsigned int, vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, vr::IVRDriverDirectModeComponent::SwapTextureSet_t*)
 t CVRDriverDirectModeComponent_Latest::DestroyAllSwapTextureSets(unsigned int)
 t CVRDriverDirectModeComponent_Latest::DestroySwapTextureSet(unsigned long)
 t CVRDriverDirectModeComponent_Latest::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t CVRDriverDirectModeComponent_Latest::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t CVRDriverDirectModeComponent_Latest::PostPresent(vr::IVRDriverDirectModeComponent::Throttling_t const*)
 t CVRDriverDirectModeComponent_Latest::Present(unsigned long)
 t CVRDriverDirectModeComponent_Latest::SubmitLayer(vr::IVRDriverDirectModeComponent::SubmitLayerPerEye_t const (&) [2])
 t CVRDriverDirectModeComponent_Latest::~CVRDriverDirectModeComponent_Latest()
 t CVRFramerateGovernor::GetAdditionalFramesToPredict() const
 t CVRFramerateGovernor::GetFramesToThrottleApp() const
 t CVRFramerateGovernor::OnFinishedFrame(unsigned long, facet::IFramerateGovernor::TimingInfo_t const*)
 t CVRFramerateGovernor::~CVRFramerateGovernor()
 t CVRIOBuffer::CVRIOBuffer(CPropertyManager*)
 t CVRIOBuffer::Close(unsigned long)
 t CVRIOBuffer::HasReaders(unsigned long)
 t CVRIOBuffer::Open(char const*, vr::EIOBufferMode, unsigned int, unsigned int, unsigned long*)
 t CVRIOBuffer::Open(char const*, vr::EIOBufferMode, unsigned int, unsigned int, unsigned long*) [clone .cold]
 t CVRIOBuffer::PropertyContainer(unsigned long)
 t CVRIOBuffer::Read(unsigned long, void*, unsigned int, unsigned int*)
 t CVRIOBuffer::Write(unsigned long, void*, unsigned int)
 t CVRIOBuffer::~CVRIOBuffer()
 t CVRIOBuffer_001::Close(unsigned long)
 t CVRIOBuffer_001::Open(char const*, vr::EIOBufferMode, unsigned int, unsigned int, unsigned long*)
 t CVRIOBuffer_001::PropertyContainer(unsigned long)
 t CVRIOBuffer_001::Read(unsigned long, void*, unsigned int, unsigned int*)
 t CVRIOBuffer_001::Write(unsigned long, void*, unsigned int)
 t CVRIOBuffer_002::Close(unsigned long)
 t CVRIOBuffer_002::HasReaders(unsigned long)
 t CVRIOBuffer_002::Open(char const*, vr::EIOBufferMode, unsigned int, unsigned int, unsigned long*)
 t CVRIOBuffer_002::PropertyContainer(unsigned long)
 t CVRIOBuffer_002::Read(unsigned long, void*, unsigned int, unsigned int*)
 t CVRIOBuffer_002::Write(unsigned long, void*, unsigned int)
 t CVRInputLatest::AddActionSetToPriorityMap(InputConfig_t*, CVRControllerTypeBindings*, unsigned long, int, bool, unsigned long)
 t CVRInputLatest::BGetInputOptionBool(unsigned long, std::string const&)
 t CVRInputLatest::BGetInputOptionBool(unsigned long, std::string const&) [clone .cold]
 t CVRInputLatest::BGetInputOptionString(unsigned long, std::string const&)
 t CVRInputLatest::BGetInputOptionString(unsigned long, std::string const&) [clone .cold]
 t CVRInputLatest::BInit(CVRSystemLatest*, CVRClient*, IVRClientInternal*)
 t CVRInputLatest::BInit(CVRSystemLatest*, CVRClient*, IVRClientInternal*) [clone .cold]
 t CVRInputLatest::CVRInputLatest()
 t CVRInputLatest::ClearXrInputConfig()
 t CVRInputLatest::ClearXrInputConfig() [clone .cold]
 t CVRInputLatest::DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t CVRInputLatest::DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int) [clone .cold]
 t CVRInputLatest::DoAttachedControllersSupportXrHandTracking() const
 t CVRInputLatest::DoAttachedControllersSupportXrHandTracking() const [clone .cold]
 t CVRInputLatest::DoesActionHaveOrigin(unsigned long, unsigned long, bool&)
 t CVRInputLatest::DoesActionHaveOrigin(unsigned long, unsigned long, bool&) [clone .cold]
 t CVRInputLatest::GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t CVRInputLatest::GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*) [clone .cold]
 t CVRInputLatest::GetActionHandle(char const*, unsigned long*)
 t CVRInputLatest::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInputLatest::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int) [clone .cold]
 t CVRInputLatest::GetActionSetHandle(char const*, unsigned long*)
 t CVRInputLatest::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t CVRInputLatest::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long) [clone .cold]
 t CVRInputLatest::GetBestXrInteractionProfile(unsigned long)
 t CVRInputLatest::GetBestXrInteractionProfile(unsigned long) [clone .cold]
 t CVRInputLatest::GetBindingVariant(unsigned long, char*, unsigned int)
 t CVRInputLatest::GetBindingVariant(unsigned long, char*, unsigned int) [clone .cold]
 t CVRInputLatest::GetBoneCount(unsigned long, unsigned int*)
 t CVRInputLatest::GetBoneHierarchy(unsigned long, int*, unsigned int)
 t CVRInputLatest::GetBoneName(unsigned long, int, char*, unsigned int)
 t CVRInputLatest::GetComponentStateForBinding(char const*, char const*, vr::InputBindingInfo_t const*, unsigned int, unsigned int, vr::RenderModel_ComponentState_t*)
 t CVRInputLatest::GetComponentStateForBinding(char const*, char const*, vr::InputBindingInfo_t const*, unsigned int, unsigned int, vr::RenderModel_ComponentState_t*) [clone .cold]
 t CVRInputLatest::GetCurrentFrameTime() const
 t CVRInputLatest::GetCurrentFrameTime() const [clone .cold]
 t CVRInputLatest::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t CVRInputLatest::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long) [clone .cold]
 t CVRInputLatest::GetDominantHand(vr::ETrackedControllerRole*)
 t CVRInputLatest::GetHandPose(vr::EVRHandSide, float, vr::TrackedDevicePose_t*)
 t CVRInputLatest::GetInputFrame(std::shared_ptr<CVRInputLatest::InputFrame_t>*, std::shared_ptr<CVRInputLatest::InputFrame_t>*)
 t CVRInputLatest::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInputLatest::GetInputValue(std::shared_ptr<CVRInputLatest::InputFrame_t>, unsigned long, int, VRInputValue_t*, bool*)
 t CVRInputLatest::GetInputValue(std::shared_ptr<CVRInputLatest::InputFrame_t>, unsigned long, int, VRInputValue_t*, bool*) [clone .cold]
 t CVRInputLatest::GetInputValueOrDefault(std::shared_ptr<CVRInputLatest::InputFrame_t>, unsigned long, EInputValueType, int, VRInputValue_t*)
 t CVRInputLatest::GetInputValueOrDefault(std::shared_ptr<CVRInputLatest::InputFrame_t>, unsigned long, EInputValueType, int, VRInputValue_t*) [clone .cold]
 t CVRInputLatest::GetIsHMDBindingSimulated()
 t CVRInputLatest::GetLastCompatibilityControllerType()
 t CVRInputLatest::GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t CVRInputLatest::GetOriginLocalizedName(unsigned long, char*, unsigned int, int) [clone .cold]
 t CVRInputLatest::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInputLatest::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int) [clone .cold]
 t CVRInputLatest::GetOverrideDeviceClass(unsigned int)
 t CVRInputLatest::GetOverrideDeviceClass(unsigned int) [clone .cold]
 t CVRInputLatest::GetPerInputTutorialActions(char const*, unsigned long*, vr::PerInputTutorialActions_t*, unsigned int)
 t CVRInputLatest::GetPerInputTutorialActions(char const*, unsigned long*, vr::PerInputTutorialActions_t*, unsigned int) [clone .cold]
 t CVRInputLatest::GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInputLatest::GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInputLatest::GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long) [clone .cold]
 t CVRInputLatest::GetPoseModification(unsigned long, vr::HmdMatrix34_t*)
 t CVRInputLatest::GetPoseModification(unsigned long, vr::HmdMatrix34_t*) [clone .cold]
 t CVRInputLatest::GetPoseModificationFromPath(unsigned long, vr::HmdMatrix34_t*, unsigned int*)
 t CVRInputLatest::GetPoseModificationFromPath(unsigned long, vr::HmdMatrix34_t*, unsigned int*) [clone .cold]
 t CVRInputLatest::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t CVRInputLatest::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int) [clone .cold]
 t CVRInputLatest::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t CVRInputLatest::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int) [clone .cold]
 t CVRInputLatest::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t CVRInputLatest::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*) [clone .cold]
 t CVRInputLatest::GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t CVRInputLatest::GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int) [clone .cold]
 t CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t CVRInputLatest::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*) [clone .cold]
 t CVRInputLatest::GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t CVRInputLatest::GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*) [clone .cold]
 t CVRInputLatest::GetSkeleton(unsigned long)
 t CVRInputLatest::GetSkeletonBoneDataForHand(vr::EVRHandSide, vr::VRBoneTransform_t*, unsigned int, vr::EVRSkeletalMotionRange)
 t CVRInputLatest::GetSkeletonBoneDataForHand(vr::EVRHandSide, vr::VRBoneTransform_t*, unsigned int, vr::EVRSkeletalMotionRange) [clone .cold]
 t CVRInputLatest::GetSkeletonBoneDataInternal(CachedActionValue_Skeleton_t const&, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t CVRInputLatest::InputFrame_t::ComputeActionChange(CVRInputLatest::InputFrame_t*, unsigned long, unsigned long, VRAction_Entry_t&)
 t CVRInputLatest::InputFrame_t::ComputeActionChange(CVRInputLatest::InputFrame_t*, unsigned long, unsigned long, VRAction_Entry_t&) [clone .cold]
 t CVRInputLatest::InputFrame_t::GetActionResults(unsigned long, bool)
 t CVRInputLatest::InputFrame_t::GetAndCollapseActionValues(VRAction_Entry_t*, unsigned long, unsigned long)
 t CVRInputLatest::InputFrame_t::GetAndCollapseActionValues(VRAction_Entry_t*, unsigned long, unsigned long) [clone .cold]
 t CVRInputLatest::InputFrame_t::GetCachedInputValue(unsigned long, VRInputValue_t*)
 t CVRInputLatest::InputFrame_t::InvalidateCachedInputValue(unsigned long)
 t CVRInputLatest::IsActionBound(unsigned long)
 t CVRInputLatest::IsActionBound(unsigned long) [clone .cold]
 t CVRInputLatest::IsActionSetActive(std::shared_ptr<CVRInputLatest::InputFrame_t>, unsigned long, unsigned long, int*)
 t CVRInputLatest::IsInTutorialMode()
 t CVRInputLatest::IsInputDisabledForPriority(unsigned long, int)
 t CVRInputLatest::IsUsingLegacyInput()
 t CVRInputLatest::LoadInitialConfig()
 t CVRInputLatest::LoadInitialConfig() [clone .cold]
 t CVRInputLatest::OpenBindingUI(char const*, unsigned long, unsigned long, bool)
 t CVRInputLatest::OpenBindingUI(char const*, unsigned long, unsigned long, bool) [clone .cold]
 t CVRInputLatest::OverrideCurlValue(unsigned long, unsigned long, vr::EVRFinger, vr::VRSkeletalSummaryData_t*)
 t CVRInputLatest::OverrideCurlValue(unsigned long, unsigned long, vr::EVRFinger, vr::VRSkeletalSummaryData_t*) [clone .cold]
 t CVRInputLatest::OverrideSplayValue(unsigned long, unsigned long, vr::EVRFingerSplay, vr::VRSkeletalSummaryData_t*)
 t CVRInputLatest::OverrideSplayValue(unsigned long, unsigned long, vr::EVRFingerSplay, vr::VRSkeletalSummaryData_t*) [clone .cold]
 t CVRInputLatest::ReloadConfigIfNecessary()
 t CVRInputLatest::ReloadConfigIfNecessary() [clone .cold]
 t CVRInputLatest::ResetPriorityMapToGlobals()
 t CVRInputLatest::ResetPriorityMapToGlobals() [clone .cold]
 t CVRInputLatest::SendCompatibilityNotification(std::string const&)
 t CVRInputLatest::SendCompatibilityNotification(std::string const&) [clone .cold]
 t CVRInputLatest::SendHapticVibrationEvent(unsigned int, unsigned long, unsigned long, float, float, float, float)
 t CVRInputLatest::SendStateToDebugger(std::string const&, std::shared_ptr<CVRInputLatest::InputFrame_t>)
 t CVRInputLatest::SendStateToDebugger(std::string const&, std::shared_ptr<CVRInputLatest::InputFrame_t>) [clone .cold]
 t CVRInputLatest::SetActionManifestPath(char const*)
 t CVRInputLatest::SetActionManifestPath(char const*) [clone .cold]
 t CVRInputLatest::SetDominantHand(vr::ETrackedControllerRole)
 t CVRInputLatest::SetDominantHand(vr::ETrackedControllerRole) [clone .cold]
 t CVRInputLatest::SetInTutorialMode(bool)
 t CVRInputLatest::SetIsHMDBindingSimulated(bool)
 t CVRInputLatest::SetLastCompatibilityControllerType(std::string const&)
 t CVRInputLatest::SetXrInputConfig(std::string const&, std::vector<std::string, std::allocator<std::string> > const&)
 t CVRInputLatest::SetXrInputConfig(std::string const&, std::vector<std::string, std::allocator<std::string> > const&) [clone .cold]
 t CVRInputLatest::ShouldExposeInternalInputs()
 t CVRInputLatest::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInputLatest::ShowActionOrigins(unsigned long, unsigned long) [clone .cold]
 t CVRInputLatest::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInputLatest::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long) [clone .cold]
 t CVRInputLatest::SourcePassesDeviceRequirement(CVRInputLatest::InputFrame_t*, unsigned long, unsigned long)
 t CVRInputLatest::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t CVRInputLatest::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long) [clone .cold]
 t CVRInputLatest::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInputLatest::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int) [clone .cold]
 t CVRInputLatest::UpdateGlobalPriorityInputSources()
 t CVRInputLatest::UpdateGlobalPriorityInputSources() [clone .cold]
 t CVRInputLatest::~CVRInputLatest()
 t CVRInput_001::ActivateActionSet(unsigned long)
 t CVRInput_001::CancelFilters(vr::EVRInputFilterCancelType, unsigned long)
 t CVRInput_001::GetActionHandle(char const*, unsigned long*)
 t CVRInput_001::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_001::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_001::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int)
 t CVRInput_001::GetCurrentActionSet()
 t CVRInput_001::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int)
 t CVRInput_001::GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t CVRInput_001::GetOriginTrackedDeviceInfo(unsigned long, InputOriginInfo001_t*, unsigned int)
 t CVRInput_001::GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int)
 t CVRInput_001::SetPrimaryHand(unsigned int)
 t CVRInput_001::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_001::SwapPrimaryAndSecondaryHands()
 t CVRInput_001::TriggerHapticVibrationAction(unsigned long, float, float, float, float)
 t CVRInput_001::UpdateActionState()
 t CVRInput_002::GetActionHandle(char const*, unsigned long*)
 t CVRInput_002::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_002::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_002::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int)
 t CVRInput_002::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int)
 t CVRInput_002::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_002::GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t CVRInput_002::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_002::GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int)
 t CVRInput_002::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_002::TriggerHapticVibrationAction(unsigned long, float, float, float, float)
 t CVRInput_002::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInput_003::GetActionHandle(char const*, unsigned long*)
 t CVRInput_003::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_003::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_003::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int)
 t CVRInput_003::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int)
 t CVRInput_003::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_003::GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t CVRInput_003::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_003::GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int)
 t CVRInput_003::GetSkeletalActionData(unsigned long, vr::EVRSkeletalTransformSpace, float, vr::InputSkeletonActionData_t*, unsigned int, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_003::GetSkeletalActionDataCompressed(unsigned long, vr::EVRSkeletalTransformSpace, float, void*, unsigned int, unsigned int*)
 t CVRInput_003::SetActionManifestPath(char const*)
 t CVRInput_003::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_003::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInput_003::TriggerHapticVibrationAction(unsigned long, float, float, float, float)
 t CVRInput_003::UncompressSkeletalActionData(void*, unsigned int, vr::EVRSkeletalTransformSpace*, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_003::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInput_004::DecompressSkeletalBoneData(void*, unsigned int, vr::EVRSkeletalTransformSpace*, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_004::GetActionHandle(char const*, unsigned long*)
 t CVRInput_004::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_004::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_004::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t CVRInput_004::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t CVRInput_004::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_004::GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t CVRInput_004::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_004::GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_004::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionDataV04_t*, unsigned int, unsigned long)
 t CVRInput_004::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int, unsigned long)
 t CVRInput_004::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*, unsigned long)
 t CVRInput_004::SetActionManifestPath(char const*)
 t CVRInput_004::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_004::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInput_004::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t CVRInput_004::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInput_005::DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_005::GetActionHandle(char const*, unsigned long*)
 t CVRInput_005::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_005::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_005::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t CVRInput_005::GetBoneCount(unsigned long, unsigned int*)
 t CVRInput_005::GetBoneHierarchy(unsigned long, int*, unsigned int)
 t CVRInput_005::GetBoneName(unsigned long, int, char*, unsigned int)
 t CVRInput_005::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t CVRInput_005::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_005::GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t CVRInput_005::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_005::GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_005::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t CVRInput_005::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_005::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t CVRInput_005::GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_005::GetSkeletalSummaryData(unsigned long, vr::VRSkeletalSummaryData_t*)
 t CVRInput_005::GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t CVRInput_005::IsUsingLegacyInput()
 t CVRInput_005::SetActionManifestPath(char const*)
 t CVRInput_005::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_005::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInput_005::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t CVRInput_005::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInput_006::DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_006::GetActionHandle(char const*, unsigned long*)
 t CVRInput_006::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_006::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_006::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t CVRInput_006::GetBoneCount(unsigned long, unsigned int*)
 t CVRInput_006::GetBoneHierarchy(unsigned long, int*, unsigned int)
 t CVRInput_006::GetBoneName(unsigned long, int, char*, unsigned int)
 t CVRInput_006::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t CVRInput_006::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_006::GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t CVRInput_006::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_006::GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_006::GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_006::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t CVRInput_006::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_006::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t CVRInput_006::GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_006::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t CVRInput_006::GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t CVRInput_006::IsUsingLegacyInput()
 t CVRInput_006::SetActionManifestPath(char const*)
 t CVRInput_006::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_006::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInput_006::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t CVRInput_006::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInput_007::DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_007::GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t CVRInput_007::GetActionHandle(char const*, unsigned long*)
 t CVRInput_007::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_007::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_007::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t CVRInput_007::GetBoneCount(unsigned long, unsigned int*)
 t CVRInput_007::GetBoneHierarchy(unsigned long, int*, unsigned int)
 t CVRInput_007::GetBoneName(unsigned long, int, char*, unsigned int)
 t CVRInput_007::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t CVRInput_007::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_007::GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t CVRInput_007::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_007::GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_007::GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_007::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t CVRInput_007::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_007::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t CVRInput_007::GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_007::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t CVRInput_007::GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t CVRInput_007::IsUsingLegacyInput()
 t CVRInput_007::OpenBindingUI(char const*, unsigned long, unsigned long, bool)
 t CVRInput_007::SetActionManifestPath(char const*)
 t CVRInput_007::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_007::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInput_007::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t CVRInput_007::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInput_008::DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_008::GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t CVRInput_008::GetActionHandle(char const*, unsigned long*)
 t CVRInput_008::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_008::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_008::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t CVRInput_008::GetBoneCount(unsigned long, unsigned int*)
 t CVRInput_008::GetBoneHierarchy(unsigned long, int*, unsigned int)
 t CVRInput_008::GetBoneName(unsigned long, int, char*, unsigned int)
 t CVRInput_008::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t CVRInput_008::GetDominantHand(vr::ETrackedControllerRole*)
 t CVRInput_008::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_008::GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t CVRInput_008::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_008::GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_008::GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_008::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t CVRInput_008::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_008::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t CVRInput_008::GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_008::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t CVRInput_008::GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t CVRInput_008::IsUsingLegacyInput()
 t CVRInput_008::OpenBindingUI(char const*, unsigned long, unsigned long, bool)
 t CVRInput_008::SetActionManifestPath(char const*)
 t CVRInput_008::SetDominantHand(vr::ETrackedControllerRole)
 t CVRInput_008::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_008::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInput_008::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t CVRInput_008::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRInput_009::DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_009::GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t CVRInput_009::GetActionHandle(char const*, unsigned long*)
 t CVRInput_009::GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t CVRInput_009::GetActionSetHandle(char const*, unsigned long*)
 t CVRInput_009::GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t CVRInput_009::GetBoneCount(unsigned long, unsigned int*)
 t CVRInput_009::GetBoneHierarchy(unsigned long, int*, unsigned int)
 t CVRInput_009::GetBoneName(unsigned long, int, char*, unsigned int)
 t CVRInput_009::GetComponentStateForBinding(char const*, char const*, vr::InputBindingInfo_t const*, unsigned int, unsigned int, vr::RenderModel_ComponentState_t*)
 t CVRInput_009::GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t CVRInput_009::GetDominantHand(vr::ETrackedControllerRole*)
 t CVRInput_009::GetInputSourceHandle(char const*, unsigned long*)
 t CVRInput_009::GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t CVRInput_009::GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t CVRInput_009::GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_009::GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t CVRInput_009::GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t CVRInput_009::GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_009::GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t CVRInput_009::GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t CVRInput_009::GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t CVRInput_009::GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t CVRInput_009::IsUsingLegacyInput()
 t CVRInput_009::OpenBindingUI(char const*, unsigned long, unsigned long, bool)
 t CVRInput_009::SetActionManifestPath(char const*)
 t CVRInput_009::SetDominantHand(vr::ETrackedControllerRole)
 t CVRInput_009::ShowActionOrigins(unsigned long, unsigned long)
 t CVRInput_009::ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t CVRInput_009::TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t CVRInput_009::UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t CVRLog::AddLogListener(ILogListener*)
 t CVRLog::AddLogListener(ILogListener*) [clone .cold]
 t CVRLog::CVRLog(bool)
 t CVRLog::CVRLog(bool) [clone .cold]
 t CVRLog::CloseLog()
 t CVRLog::CloseLog() [clone .cold]
 t CVRLog::DumpLogBufferToListener(ILogListener*, unsigned long)
 t CVRLog::DumpLogBufferToListener(ILogListener*, unsigned long) [clone .cold]
 t CVRLog::InitLog(char const*, char const*, bool, unsigned long)
 t CVRLog::InitLog(char const*, char const*, bool, unsigned long) [clone .cold]
 t CVRLog::IsOpen()
 t CVRLog::Log(ELogLevel, char const*, ...)
 t CVRLog::Log(char const*, ...)
 t CVRLog::LogDirect(ELogLevel, bool, char const*, __va_list_tag (&) [1])
 t CVRLog::LogDirect(ELogLevel, bool, char const*, __va_list_tag (&) [1]) [clone .cold]
 t CVRLog::LogIncremental(ELogLevel, char const*, ...)
 t CVRLog::LogIncremental(char const*, ...)
 t CVRLog::RemoveLogListener(ILogListener*)
 t CVRLog::SetMaxLogLevel(ELogLevel)
 t CVRLog::WillLog(ELogLevel)
 t CVRLog::~CVRLog()
 t CVRMailbox::AutoForwardMessageType(std::string, std::string const&)
 t CVRMailbox::AutoForwardMessageType(std::string, std::string const&) [clone .cold]
 t CVRMailbox::Close()
 t CVRMailbox::OnMbox_RequestHandlers(Json::Value const&)
 t CVRMailbox::OnMbox_RequestHandlers(Json::Value const&) [clone .cold]
 t CVRMailbox::Open(std::string const&)
 t CVRMailbox::Open(std::string const&) [clone .cold]
 t CVRMailbox::ProcessMessages()
 t CVRMailbox::ProcessMessages() [clone .cold]
 t CVRMailbox::RegisterMessageHandler(std::string const&, std::function<void (Json::Value const&)>)
 t CVRMailbox::RegisterMessageHandler(std::string const&, std::function<void (Json::Value const&)>) [clone .cold]
 t CVRMailbox::SendMailboxResponse(Json::Value const&, Json::Value&&)
 t CVRMailbox::SendMailboxResponse(Json::Value const&, Json::Value&&) [clone .cold]
 t CVRMailbox::~CVRMailbox()
 t CVRMailboxBase::Close()
 t CVRMailboxBase::Close() [clone .part.0]
 t CVRMailboxBase::GetNextMessageInternal(Json::Value*)
 t CVRMailboxBase::GetNextMessageInternal(Json::Value*) [clone .cold]
 t CVRMailboxBase::Open(std::string const&)
 t CVRMailboxBase::SendMailboxMessage(char const*, char const*)
 t CVRMailboxBase::~CVRMailboxBase()
 t CVRMailboxClient::BInit(CVRClient*)
 t CVRMailboxClient::GetNextMessage(unsigned long, char*, unsigned int, unsigned int*)
 t CVRMailboxClient::GetNextMessage(unsigned long, char*, unsigned int, unsigned int*) [clone .cold]
 t CVRMailboxClient::RegisterMailbox(char const*, unsigned long*, char*, unsigned int)
 t CVRMailboxClient::RegisterMailbox(char const*, unsigned long*, char*, unsigned int) [clone .cold]
 t CVRMailboxClient::SendMailboxMessage(unsigned long, char const*, char const*)
 t CVRMailboxClient::SendMailboxMessage(unsigned long, char const*, char const*) [clone .cold]
 t CVRMailboxClient::UnregisterMailbox(unsigned long)
 t CVRMailboxClient::UnregisterMailbox(unsigned long) [clone .cold]
 t CVRMailbox_001::GetNextMessage(unsigned long, char*, unsigned int, unsigned int*)
 t CVRMailbox_001::RegisterMailbox(char const*, unsigned long*)
 t CVRMailbox_001::SendMailboxMessage(unsigned long, char const*, char const*)
 t CVRMailbox_001::UnregisterMailbox(unsigned long)
 t CVRMsg_AbortApplicationTransition::ByteSize() const
 t CVRMsg_AbortApplicationTransition::CVRMsg_AbortApplicationTransition()
 t CVRMsg_AbortApplicationTransition::CVRMsg_AbortApplicationTransition() [clone .cold]
 t CVRMsg_AbortApplicationTransition::CVRMsg_AbortApplicationTransition(CVRMsg_AbortApplicationTransition const&)
 t CVRMsg_AbortApplicationTransition::CVRMsg_AbortApplicationTransition(CVRMsg_AbortApplicationTransition const&) [clone .cold]
 t CVRMsg_AbortApplicationTransition::Clear()
 t CVRMsg_AbortApplicationTransition::CopyFrom(CVRMsg_AbortApplicationTransition const&)
 t CVRMsg_AbortApplicationTransition::GetCachedSize() const
 t CVRMsg_AbortApplicationTransition::GetMetadata() const
 t CVRMsg_AbortApplicationTransition::GetMetadata() const [clone .cold]
 t CVRMsg_AbortApplicationTransition::InitAsDefaultInstance()
 t CVRMsg_AbortApplicationTransition::IsInitialized() const
 t CVRMsg_AbortApplicationTransition::MergeFrom(CVRMsg_AbortApplicationTransition const&)
 t CVRMsg_AbortApplicationTransition::MergeFrom(CVRMsg_AbortApplicationTransition const&) [clone .cold]
 t CVRMsg_AbortApplicationTransition::New() const
 t CVRMsg_AbortApplicationTransition::New() const [clone .cold]
 t CVRMsg_AbortApplicationTransition::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_AbortApplicationTransition::SetCachedSize(int) const
 t CVRMsg_AbortApplicationTransition::SharedCtor()
 t CVRMsg_AbortApplicationTransition::SharedDtor()
 t CVRMsg_AbortApplicationTransition::Swap(CVRMsg_AbortApplicationTransition*)
 t CVRMsg_AbortApplicationTransition::default_instance()
 t CVRMsg_AbortApplicationTransition::descriptor()
 t CVRMsg_AbortApplicationTransition::descriptor() [clone .cold]
 t CVRMsg_AbortApplicationTransition::~CVRMsg_AbortApplicationTransition()
 t CVRMsg_AcknowledgeQuit_Exiting::ByteSize() const
 t CVRMsg_AcknowledgeQuit_Exiting::CVRMsg_AcknowledgeQuit_Exiting()
 t CVRMsg_AcknowledgeQuit_Exiting::CVRMsg_AcknowledgeQuit_Exiting() [clone .cold]
 t CVRMsg_AcknowledgeQuit_Exiting::CVRMsg_AcknowledgeQuit_Exiting(CVRMsg_AcknowledgeQuit_Exiting const&)
 t CVRMsg_AcknowledgeQuit_Exiting::CVRMsg_AcknowledgeQuit_Exiting(CVRMsg_AcknowledgeQuit_Exiting const&) [clone .cold]
 t CVRMsg_AcknowledgeQuit_Exiting::Clear()
 t CVRMsg_AcknowledgeQuit_Exiting::CopyFrom(CVRMsg_AcknowledgeQuit_Exiting const&)
 t CVRMsg_AcknowledgeQuit_Exiting::GetCachedSize() const
 t CVRMsg_AcknowledgeQuit_Exiting::GetMetadata() const
 t CVRMsg_AcknowledgeQuit_Exiting::GetMetadata() const [clone .cold]
 t CVRMsg_AcknowledgeQuit_Exiting::InitAsDefaultInstance()
 t CVRMsg_AcknowledgeQuit_Exiting::IsInitialized() const
 t CVRMsg_AcknowledgeQuit_Exiting::MergeFrom(CVRMsg_AcknowledgeQuit_Exiting const&)
 t CVRMsg_AcknowledgeQuit_Exiting::MergeFrom(CVRMsg_AcknowledgeQuit_Exiting const&) [clone .cold]
 t CVRMsg_AcknowledgeQuit_Exiting::New() const
 t CVRMsg_AcknowledgeQuit_Exiting::New() const [clone .cold]
 t CVRMsg_AcknowledgeQuit_Exiting::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_AcknowledgeQuit_Exiting::SetCachedSize(int) const
 t CVRMsg_AcknowledgeQuit_Exiting::SharedCtor()
 t CVRMsg_AcknowledgeQuit_Exiting::SharedDtor()
 t CVRMsg_AcknowledgeQuit_Exiting::Swap(CVRMsg_AcknowledgeQuit_Exiting*)
 t CVRMsg_AcknowledgeQuit_Exiting::default_instance()
 t CVRMsg_AcknowledgeQuit_Exiting::descriptor()
 t CVRMsg_AcknowledgeQuit_Exiting::descriptor() [clone .cold]
 t CVRMsg_AcknowledgeQuit_Exiting::~CVRMsg_AcknowledgeQuit_Exiting()
 t CVRMsg_ApplicationInfo::ByteSize() const
 t CVRMsg_ApplicationInfo::CVRMsg_ApplicationInfo()
 t CVRMsg_ApplicationInfo::CVRMsg_ApplicationInfo() [clone .cold]
 t CVRMsg_ApplicationInfo::CVRMsg_ApplicationInfo(CVRMsg_ApplicationInfo const&)
 t CVRMsg_ApplicationInfo::CVRMsg_ApplicationInfo(CVRMsg_ApplicationInfo const&) [clone .cold]
 t CVRMsg_ApplicationInfo::Clear()
 t CVRMsg_ApplicationInfo::CopyFrom(CVRMsg_ApplicationInfo const&)
 t CVRMsg_ApplicationInfo::GetCachedSize() const
 t CVRMsg_ApplicationInfo::GetMetadata() const
 t CVRMsg_ApplicationInfo::GetMetadata() const [clone .cold]
 t CVRMsg_ApplicationInfo::InitAsDefaultInstance()
 t CVRMsg_ApplicationInfo::IsInitialized() const
 t CVRMsg_ApplicationInfo::MergeFrom(CVRMsg_ApplicationInfo const&)
 t CVRMsg_ApplicationInfo::MergeFrom(CVRMsg_ApplicationInfo const&) [clone .cold]
 t CVRMsg_ApplicationInfo::New() const
 t CVRMsg_ApplicationInfo::New() const [clone .cold]
 t CVRMsg_ApplicationInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ApplicationInfo::SetCachedSize(int) const
 t CVRMsg_ApplicationInfo::SharedCtor()
 t CVRMsg_ApplicationInfo::SharedDtor()
 t CVRMsg_ApplicationInfo::Swap(CVRMsg_ApplicationInfo*)
 t CVRMsg_ApplicationInfo::default_instance()
 t CVRMsg_ApplicationInfo::descriptor()
 t CVRMsg_ApplicationInfo::descriptor() [clone .cold]
 t CVRMsg_ApplicationInfo::mutable_manifest()
 t CVRMsg_ApplicationInfo::mutable_manifest() [clone .cold]
 t CVRMsg_ApplicationInfo::mutable_options()
 t CVRMsg_ApplicationInfo::mutable_options() [clone .cold]
 t CVRMsg_ApplicationInfo::release_manifest()
 t CVRMsg_ApplicationInfo::release_options()
 t CVRMsg_ApplicationInfo::set_allocated_manifest(CVRMsg_ApplicationInfo_Manifest*)
 t CVRMsg_ApplicationInfo::set_allocated_options(CVRMsg_ApplicationInfo_Options*)
 t CVRMsg_ApplicationInfo::~CVRMsg_ApplicationInfo()
 t CVRMsg_ApplicationInfo_Manifest::ByteSize() const
 t CVRMsg_ApplicationInfo_Manifest::CVRMsg_ApplicationInfo_Manifest()
 t CVRMsg_ApplicationInfo_Manifest::CVRMsg_ApplicationInfo_Manifest() [clone .cold]
 t CVRMsg_ApplicationInfo_Manifest::CVRMsg_ApplicationInfo_Manifest(CVRMsg_ApplicationInfo_Manifest const&)
 t CVRMsg_ApplicationInfo_Manifest::CVRMsg_ApplicationInfo_Manifest(CVRMsg_ApplicationInfo_Manifest const&) [clone .cold]
 t CVRMsg_ApplicationInfo_Manifest::Clear()
 t CVRMsg_ApplicationInfo_Manifest::CopyFrom(CVRMsg_ApplicationInfo_Manifest const&)
 t CVRMsg_ApplicationInfo_Manifest::GetCachedSize() const
 t CVRMsg_ApplicationInfo_Manifest::GetMetadata() const
 t CVRMsg_ApplicationInfo_Manifest::GetMetadata() const [clone .cold]
 t CVRMsg_ApplicationInfo_Manifest::InitAsDefaultInstance()
 t CVRMsg_ApplicationInfo_Manifest::IsInitialized() const
 t CVRMsg_ApplicationInfo_Manifest::MergeFrom(CVRMsg_ApplicationInfo_Manifest const&)
 t CVRMsg_ApplicationInfo_Manifest::MergeFrom(CVRMsg_ApplicationInfo_Manifest const&) [clone .cold]
 t CVRMsg_ApplicationInfo_Manifest::New() const
 t CVRMsg_ApplicationInfo_Manifest::New() const [clone .cold]
 t CVRMsg_ApplicationInfo_Manifest::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ApplicationInfo_Manifest::SetCachedSize(int) const
 t CVRMsg_ApplicationInfo_Manifest::SharedCtor()
 t CVRMsg_ApplicationInfo_Manifest::SharedCtor() [clone .cold]
 t CVRMsg_ApplicationInfo_Manifest::SharedDtor()
 t CVRMsg_ApplicationInfo_Manifest::Swap(CVRMsg_ApplicationInfo_Manifest*)
 t CVRMsg_ApplicationInfo_Manifest::default_instance()
 t CVRMsg_ApplicationInfo_Manifest::descriptor()
 t CVRMsg_ApplicationInfo_Manifest::descriptor() [clone .cold]
 t CVRMsg_ApplicationInfo_Manifest::mutable_action_manifest_path()
 t CVRMsg_ApplicationInfo_Manifest::mutable_app_key()
 t CVRMsg_ApplicationInfo_Manifest::mutable_arguments()
 t CVRMsg_ApplicationInfo_Manifest::mutable_binary_path()
 t CVRMsg_ApplicationInfo_Manifest::mutable_description()
 t CVRMsg_ApplicationInfo_Manifest::mutable_image_path()
 t CVRMsg_ApplicationInfo_Manifest::mutable_launch_type()
 t CVRMsg_ApplicationInfo_Manifest::mutable_manifest_path()
 t CVRMsg_ApplicationInfo_Manifest::mutable_name()
 t CVRMsg_ApplicationInfo_Manifest::mutable_news_url()
 t CVRMsg_ApplicationInfo_Manifest::mutable_source()
 t CVRMsg_ApplicationInfo_Manifest::mutable_url()
 t CVRMsg_ApplicationInfo_Manifest::mutable_working_directory()
 t CVRMsg_ApplicationInfo_Manifest::release_action_manifest_path()
 t CVRMsg_ApplicationInfo_Manifest::release_app_key()
 t CVRMsg_ApplicationInfo_Manifest::release_arguments()
 t CVRMsg_ApplicationInfo_Manifest::release_binary_path()
 t CVRMsg_ApplicationInfo_Manifest::release_description()
 t CVRMsg_ApplicationInfo_Manifest::release_image_path()
 t CVRMsg_ApplicationInfo_Manifest::release_launch_type()
 t CVRMsg_ApplicationInfo_Manifest::release_manifest_path()
 t CVRMsg_ApplicationInfo_Manifest::release_name()
 t CVRMsg_ApplicationInfo_Manifest::release_news_url()
 t CVRMsg_ApplicationInfo_Manifest::release_source()
 t CVRMsg_ApplicationInfo_Manifest::release_url()
 t CVRMsg_ApplicationInfo_Manifest::release_working_directory()
 t CVRMsg_ApplicationInfo_Manifest::set_action_manifest_path(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_action_manifest_path(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_action_manifest_path(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_action_manifest_path(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_app_key(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_arguments(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_binary_path(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_description(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_image_path(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_launch_type(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_manifest_path(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_name(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_news_url(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_source(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_url(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_allocated_working_directory(std::string*)
 t CVRMsg_ApplicationInfo_Manifest::set_app_key(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_app_key(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_app_key(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_arguments(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_arguments(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_arguments(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_binary_path(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_binary_path(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_binary_path(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_description(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_description(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_description(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_image_path(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_image_path(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_image_path(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_launch_type(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_launch_type(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_launch_type(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_manifest_path(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_manifest_path(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_manifest_path(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_name(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_name(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_name(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_news_url(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_news_url(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_news_url(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_source(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_source(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_source(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_url(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_url(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_url(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::set_working_directory(char const*)
 t CVRMsg_ApplicationInfo_Manifest::set_working_directory(char const*, unsigned long)
 t CVRMsg_ApplicationInfo_Manifest::set_working_directory(std::string const&)
 t CVRMsg_ApplicationInfo_Manifest::~CVRMsg_ApplicationInfo_Manifest()
 t CVRMsg_ApplicationInfo_Options::ByteSize() const
 t CVRMsg_ApplicationInfo_Options::CVRMsg_ApplicationInfo_Options()
 t CVRMsg_ApplicationInfo_Options::CVRMsg_ApplicationInfo_Options() [clone .cold]
 t CVRMsg_ApplicationInfo_Options::CVRMsg_ApplicationInfo_Options(CVRMsg_ApplicationInfo_Options const&)
 t CVRMsg_ApplicationInfo_Options::CVRMsg_ApplicationInfo_Options(CVRMsg_ApplicationInfo_Options const&) [clone .cold]
 t CVRMsg_ApplicationInfo_Options::Clear()
 t CVRMsg_ApplicationInfo_Options::CopyFrom(CVRMsg_ApplicationInfo_Options const&)
 t CVRMsg_ApplicationInfo_Options::GetCachedSize() const
 t CVRMsg_ApplicationInfo_Options::GetMetadata() const
 t CVRMsg_ApplicationInfo_Options::GetMetadata() const [clone .cold]
 t CVRMsg_ApplicationInfo_Options::InitAsDefaultInstance()
 t CVRMsg_ApplicationInfo_Options::IsInitialized() const
 t CVRMsg_ApplicationInfo_Options::MergeFrom(CVRMsg_ApplicationInfo_Options const&)
 t CVRMsg_ApplicationInfo_Options::MergeFrom(CVRMsg_ApplicationInfo_Options const&) [clone .cold]
 t CVRMsg_ApplicationInfo_Options::New() const
 t CVRMsg_ApplicationInfo_Options::New() const [clone .cold]
 t CVRMsg_ApplicationInfo_Options::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ApplicationInfo_Options::SetCachedSize(int) const
 t CVRMsg_ApplicationInfo_Options::SharedCtor()
 t CVRMsg_ApplicationInfo_Options::SharedDtor()
 t CVRMsg_ApplicationInfo_Options::Swap(CVRMsg_ApplicationInfo_Options*)
 t CVRMsg_ApplicationInfo_Options::default_instance()
 t CVRMsg_ApplicationInfo_Options::descriptor()
 t CVRMsg_ApplicationInfo_Options::descriptor() [clone .cold]
 t CVRMsg_ApplicationInfo_Options::~CVRMsg_ApplicationInfo_Options()
 t CVRMsg_ApplicationManifestRequest::ByteSize() const
 t CVRMsg_ApplicationManifestRequest::CVRMsg_ApplicationManifestRequest()
 t CVRMsg_ApplicationManifestRequest::CVRMsg_ApplicationManifestRequest() [clone .cold]
 t CVRMsg_ApplicationManifestRequest::CVRMsg_ApplicationManifestRequest(CVRMsg_ApplicationManifestRequest const&)
 t CVRMsg_ApplicationManifestRequest::CVRMsg_ApplicationManifestRequest(CVRMsg_ApplicationManifestRequest const&) [clone .cold]
 t CVRMsg_ApplicationManifestRequest::Clear()
 t CVRMsg_ApplicationManifestRequest::CopyFrom(CVRMsg_ApplicationManifestRequest const&)
 t CVRMsg_ApplicationManifestRequest::GetCachedSize() const
 t CVRMsg_ApplicationManifestRequest::GetMetadata() const
 t CVRMsg_ApplicationManifestRequest::GetMetadata() const [clone .cold]
 t CVRMsg_ApplicationManifestRequest::InitAsDefaultInstance()
 t CVRMsg_ApplicationManifestRequest::IsInitialized() const
 t CVRMsg_ApplicationManifestRequest::MergeFrom(CVRMsg_ApplicationManifestRequest const&)
 t CVRMsg_ApplicationManifestRequest::MergeFrom(CVRMsg_ApplicationManifestRequest const&) [clone .cold]
 t CVRMsg_ApplicationManifestRequest::New() const
 t CVRMsg_ApplicationManifestRequest::New() const [clone .cold]
 t CVRMsg_ApplicationManifestRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ApplicationManifestRequest::SetCachedSize(int) const
 t CVRMsg_ApplicationManifestRequest::SharedCtor()
 t CVRMsg_ApplicationManifestRequest::SharedCtor() [clone .cold]
 t CVRMsg_ApplicationManifestRequest::SharedDtor()
 t CVRMsg_ApplicationManifestRequest::Swap(CVRMsg_ApplicationManifestRequest*)
 t CVRMsg_ApplicationManifestRequest::default_instance()
 t CVRMsg_ApplicationManifestRequest::descriptor()
 t CVRMsg_ApplicationManifestRequest::descriptor() [clone .cold]
 t CVRMsg_ApplicationManifestRequest::mutable_manifest_path()
 t CVRMsg_ApplicationManifestRequest::release_manifest_path()
 t CVRMsg_ApplicationManifestRequest::set_allocated_manifest_path(std::string*)
 t CVRMsg_ApplicationManifestRequest::set_manifest_path(char const*)
 t CVRMsg_ApplicationManifestRequest::set_manifest_path(char const*, unsigned long)
 t CVRMsg_ApplicationManifestRequest::set_manifest_path(std::string const&)
 t CVRMsg_ApplicationManifestRequest::~CVRMsg_ApplicationManifestRequest()
 t CVRMsg_ApplicationManifestResponse::ByteSize() const
 t CVRMsg_ApplicationManifestResponse::CVRMsg_ApplicationManifestResponse()
 t CVRMsg_ApplicationManifestResponse::CVRMsg_ApplicationManifestResponse() [clone .cold]
 t CVRMsg_ApplicationManifestResponse::CVRMsg_ApplicationManifestResponse(CVRMsg_ApplicationManifestResponse const&)
 t CVRMsg_ApplicationManifestResponse::CVRMsg_ApplicationManifestResponse(CVRMsg_ApplicationManifestResponse const&) [clone .cold]
 t CVRMsg_ApplicationManifestResponse::Clear()
 t CVRMsg_ApplicationManifestResponse::CopyFrom(CVRMsg_ApplicationManifestResponse const&)
 t CVRMsg_ApplicationManifestResponse::GetCachedSize() const
 t CVRMsg_ApplicationManifestResponse::GetMetadata() const
 t CVRMsg_ApplicationManifestResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ApplicationManifestResponse::InitAsDefaultInstance()
 t CVRMsg_ApplicationManifestResponse::IsInitialized() const
 t CVRMsg_ApplicationManifestResponse::MergeFrom(CVRMsg_ApplicationManifestResponse const&)
 t CVRMsg_ApplicationManifestResponse::MergeFrom(CVRMsg_ApplicationManifestResponse const&) [clone .cold]
 t CVRMsg_ApplicationManifestResponse::New() const
 t CVRMsg_ApplicationManifestResponse::New() const [clone .cold]
 t CVRMsg_ApplicationManifestResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ApplicationManifestResponse::SetCachedSize(int) const
 t CVRMsg_ApplicationManifestResponse::SharedCtor()
 t CVRMsg_ApplicationManifestResponse::SharedDtor()
 t CVRMsg_ApplicationManifestResponse::Swap(CVRMsg_ApplicationManifestResponse*)
 t CVRMsg_ApplicationManifestResponse::default_instance()
 t CVRMsg_ApplicationManifestResponse::descriptor()
 t CVRMsg_ApplicationManifestResponse::descriptor() [clone .cold]
 t CVRMsg_ApplicationManifestResponse::~CVRMsg_ApplicationManifestResponse()
 t CVRMsg_CancelApplicationLaunch::ByteSize() const
 t CVRMsg_CancelApplicationLaunch::CVRMsg_CancelApplicationLaunch()
 t CVRMsg_CancelApplicationLaunch::CVRMsg_CancelApplicationLaunch() [clone .cold]
 t CVRMsg_CancelApplicationLaunch::CVRMsg_CancelApplicationLaunch(CVRMsg_CancelApplicationLaunch const&)
 t CVRMsg_CancelApplicationLaunch::CVRMsg_CancelApplicationLaunch(CVRMsg_CancelApplicationLaunch const&) [clone .cold]
 t CVRMsg_CancelApplicationLaunch::Clear()
 t CVRMsg_CancelApplicationLaunch::CopyFrom(CVRMsg_CancelApplicationLaunch const&)
 t CVRMsg_CancelApplicationLaunch::GetCachedSize() const
 t CVRMsg_CancelApplicationLaunch::GetMetadata() const
 t CVRMsg_CancelApplicationLaunch::GetMetadata() const [clone .cold]
 t CVRMsg_CancelApplicationLaunch::InitAsDefaultInstance()
 t CVRMsg_CancelApplicationLaunch::IsInitialized() const
 t CVRMsg_CancelApplicationLaunch::MergeFrom(CVRMsg_CancelApplicationLaunch const&)
 t CVRMsg_CancelApplicationLaunch::MergeFrom(CVRMsg_CancelApplicationLaunch const&) [clone .cold]
 t CVRMsg_CancelApplicationLaunch::New() const
 t CVRMsg_CancelApplicationLaunch::New() const [clone .cold]
 t CVRMsg_CancelApplicationLaunch::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CancelApplicationLaunch::SetCachedSize(int) const
 t CVRMsg_CancelApplicationLaunch::SharedCtor()
 t CVRMsg_CancelApplicationLaunch::SharedCtor() [clone .cold]
 t CVRMsg_CancelApplicationLaunch::SharedDtor()
 t CVRMsg_CancelApplicationLaunch::Swap(CVRMsg_CancelApplicationLaunch*)
 t CVRMsg_CancelApplicationLaunch::default_instance()
 t CVRMsg_CancelApplicationLaunch::descriptor()
 t CVRMsg_CancelApplicationLaunch::descriptor() [clone .cold]
 t CVRMsg_CancelApplicationLaunch::mutable_app_key()
 t CVRMsg_CancelApplicationLaunch::release_app_key()
 t CVRMsg_CancelApplicationLaunch::set_allocated_app_key(std::string*)
 t CVRMsg_CancelApplicationLaunch::set_app_key(char const*)
 t CVRMsg_CancelApplicationLaunch::set_app_key(char const*, unsigned long)
 t CVRMsg_CancelApplicationLaunch::set_app_key(std::string const&)
 t CVRMsg_CancelApplicationLaunch::~CVRMsg_CancelApplicationLaunch()
 t CVRMsg_CancelApplicationLaunchResponse::ByteSize() const
 t CVRMsg_CancelApplicationLaunchResponse::CVRMsg_CancelApplicationLaunchResponse()
 t CVRMsg_CancelApplicationLaunchResponse::CVRMsg_CancelApplicationLaunchResponse() [clone .cold]
 t CVRMsg_CancelApplicationLaunchResponse::CVRMsg_CancelApplicationLaunchResponse(CVRMsg_CancelApplicationLaunchResponse const&)
 t CVRMsg_CancelApplicationLaunchResponse::CVRMsg_CancelApplicationLaunchResponse(CVRMsg_CancelApplicationLaunchResponse const&) [clone .cold]
 t CVRMsg_CancelApplicationLaunchResponse::Clear()
 t CVRMsg_CancelApplicationLaunchResponse::CopyFrom(CVRMsg_CancelApplicationLaunchResponse const&)
 t CVRMsg_CancelApplicationLaunchResponse::GetCachedSize() const
 t CVRMsg_CancelApplicationLaunchResponse::GetMetadata() const
 t CVRMsg_CancelApplicationLaunchResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CancelApplicationLaunchResponse::InitAsDefaultInstance()
 t CVRMsg_CancelApplicationLaunchResponse::IsInitialized() const
 t CVRMsg_CancelApplicationLaunchResponse::MergeFrom(CVRMsg_CancelApplicationLaunchResponse const&)
 t CVRMsg_CancelApplicationLaunchResponse::MergeFrom(CVRMsg_CancelApplicationLaunchResponse const&) [clone .cold]
 t CVRMsg_CancelApplicationLaunchResponse::New() const
 t CVRMsg_CancelApplicationLaunchResponse::New() const [clone .cold]
 t CVRMsg_CancelApplicationLaunchResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CancelApplicationLaunchResponse::SetCachedSize(int) const
 t CVRMsg_CancelApplicationLaunchResponse::SharedCtor()
 t CVRMsg_CancelApplicationLaunchResponse::SharedDtor()
 t CVRMsg_CancelApplicationLaunchResponse::Swap(CVRMsg_CancelApplicationLaunchResponse*)
 t CVRMsg_CancelApplicationLaunchResponse::default_instance()
 t CVRMsg_CancelApplicationLaunchResponse::descriptor()
 t CVRMsg_CancelApplicationLaunchResponse::descriptor() [clone .cold]
 t CVRMsg_CancelApplicationLaunchResponse::~CVRMsg_CancelApplicationLaunchResponse()
 t CVRMsg_ChangeAppType::ByteSize() const
 t CVRMsg_ChangeAppType::CVRMsg_ChangeAppType()
 t CVRMsg_ChangeAppType::CVRMsg_ChangeAppType() [clone .cold]
 t CVRMsg_ChangeAppType::CVRMsg_ChangeAppType(CVRMsg_ChangeAppType const&)
 t CVRMsg_ChangeAppType::CVRMsg_ChangeAppType(CVRMsg_ChangeAppType const&) [clone .cold]
 t CVRMsg_ChangeAppType::Clear()
 t CVRMsg_ChangeAppType::CopyFrom(CVRMsg_ChangeAppType const&)
 t CVRMsg_ChangeAppType::GetCachedSize() const
 t CVRMsg_ChangeAppType::GetMetadata() const
 t CVRMsg_ChangeAppType::GetMetadata() const [clone .cold]
 t CVRMsg_ChangeAppType::InitAsDefaultInstance()
 t CVRMsg_ChangeAppType::IsInitialized() const
 t CVRMsg_ChangeAppType::MergeFrom(CVRMsg_ChangeAppType const&)
 t CVRMsg_ChangeAppType::MergeFrom(CVRMsg_ChangeAppType const&) [clone .cold]
 t CVRMsg_ChangeAppType::New() const
 t CVRMsg_ChangeAppType::New() const [clone .cold]
 t CVRMsg_ChangeAppType::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ChangeAppType::SetCachedSize(int) const
 t CVRMsg_ChangeAppType::SharedCtor()
 t CVRMsg_ChangeAppType::SharedDtor()
 t CVRMsg_ChangeAppType::Swap(CVRMsg_ChangeAppType*)
 t CVRMsg_ChangeAppType::default_instance()
 t CVRMsg_ChangeAppType::descriptor()
 t CVRMsg_ChangeAppType::descriptor() [clone .cold]
 t CVRMsg_ChangeAppType::~CVRMsg_ChangeAppType()
 t CVRMsg_ChangeAppTypeResponse::ByteSize() const
 t CVRMsg_ChangeAppTypeResponse::CVRMsg_ChangeAppTypeResponse()
 t CVRMsg_ChangeAppTypeResponse::CVRMsg_ChangeAppTypeResponse() [clone .cold]
 t CVRMsg_ChangeAppTypeResponse::CVRMsg_ChangeAppTypeResponse(CVRMsg_ChangeAppTypeResponse const&)
 t CVRMsg_ChangeAppTypeResponse::CVRMsg_ChangeAppTypeResponse(CVRMsg_ChangeAppTypeResponse const&) [clone .cold]
 t CVRMsg_ChangeAppTypeResponse::Clear()
 t CVRMsg_ChangeAppTypeResponse::CopyFrom(CVRMsg_ChangeAppTypeResponse const&)
 t CVRMsg_ChangeAppTypeResponse::GetCachedSize() const
 t CVRMsg_ChangeAppTypeResponse::GetMetadata() const
 t CVRMsg_ChangeAppTypeResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ChangeAppTypeResponse::InitAsDefaultInstance()
 t CVRMsg_ChangeAppTypeResponse::IsInitialized() const
 t CVRMsg_ChangeAppTypeResponse::MergeFrom(CVRMsg_ChangeAppTypeResponse const&)
 t CVRMsg_ChangeAppTypeResponse::MergeFrom(CVRMsg_ChangeAppTypeResponse const&) [clone .cold]
 t CVRMsg_ChangeAppTypeResponse::New() const
 t CVRMsg_ChangeAppTypeResponse::New() const [clone .cold]
 t CVRMsg_ChangeAppTypeResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ChangeAppTypeResponse::SetCachedSize(int) const
 t CVRMsg_ChangeAppTypeResponse::SharedCtor()
 t CVRMsg_ChangeAppTypeResponse::SharedDtor()
 t CVRMsg_ChangeAppTypeResponse::Swap(CVRMsg_ChangeAppTypeResponse*)
 t CVRMsg_ChangeAppTypeResponse::default_instance()
 t CVRMsg_ChangeAppTypeResponse::descriptor()
 t CVRMsg_ChangeAppTypeResponse::descriptor() [clone .cold]
 t CVRMsg_ChangeAppTypeResponse::~CVRMsg_ChangeAppTypeResponse()
 t CVRMsg_ClientMailbox_GetNextMessage::ByteSize() const
 t CVRMsg_ClientMailbox_GetNextMessage::CVRMsg_ClientMailbox_GetNextMessage()
 t CVRMsg_ClientMailbox_GetNextMessage::CVRMsg_ClientMailbox_GetNextMessage() [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessage::CVRMsg_ClientMailbox_GetNextMessage(CVRMsg_ClientMailbox_GetNextMessage const&)
 t CVRMsg_ClientMailbox_GetNextMessage::CVRMsg_ClientMailbox_GetNextMessage(CVRMsg_ClientMailbox_GetNextMessage const&) [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessage::Clear()
 t CVRMsg_ClientMailbox_GetNextMessage::CopyFrom(CVRMsg_ClientMailbox_GetNextMessage const&)
 t CVRMsg_ClientMailbox_GetNextMessage::GetCachedSize() const
 t CVRMsg_ClientMailbox_GetNextMessage::GetMetadata() const
 t CVRMsg_ClientMailbox_GetNextMessage::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessage::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_GetNextMessage::IsInitialized() const
 t CVRMsg_ClientMailbox_GetNextMessage::MergeFrom(CVRMsg_ClientMailbox_GetNextMessage const&)
 t CVRMsg_ClientMailbox_GetNextMessage::MergeFrom(CVRMsg_ClientMailbox_GetNextMessage const&) [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessage::New() const
 t CVRMsg_ClientMailbox_GetNextMessage::New() const [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessage::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_GetNextMessage::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_GetNextMessage::SharedCtor()
 t CVRMsg_ClientMailbox_GetNextMessage::SharedDtor()
 t CVRMsg_ClientMailbox_GetNextMessage::Swap(CVRMsg_ClientMailbox_GetNextMessage*)
 t CVRMsg_ClientMailbox_GetNextMessage::default_instance()
 t CVRMsg_ClientMailbox_GetNextMessage::descriptor()
 t CVRMsg_ClientMailbox_GetNextMessage::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessage::~CVRMsg_ClientMailbox_GetNextMessage()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::ByteSize() const
 t CVRMsg_ClientMailbox_GetNextMessageResponse::CVRMsg_ClientMailbox_GetNextMessageResponse()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::CVRMsg_ClientMailbox_GetNextMessageResponse() [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessageResponse::CVRMsg_ClientMailbox_GetNextMessageResponse(CVRMsg_ClientMailbox_GetNextMessageResponse const&)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::CVRMsg_ClientMailbox_GetNextMessageResponse(CVRMsg_ClientMailbox_GetNextMessageResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessageResponse::Clear()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::CopyFrom(CVRMsg_ClientMailbox_GetNextMessageResponse const&)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::GetCachedSize() const
 t CVRMsg_ClientMailbox_GetNextMessageResponse::GetMetadata() const
 t CVRMsg_ClientMailbox_GetNextMessageResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessageResponse::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::IsInitialized() const
 t CVRMsg_ClientMailbox_GetNextMessageResponse::MergeFrom(CVRMsg_ClientMailbox_GetNextMessageResponse const&)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::MergeFrom(CVRMsg_ClientMailbox_GetNextMessageResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessageResponse::New() const
 t CVRMsg_ClientMailbox_GetNextMessageResponse::New() const [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessageResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_GetNextMessageResponse::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_GetNextMessageResponse::SharedCtor()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::SharedCtor() [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessageResponse::SharedDtor()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::Swap(CVRMsg_ClientMailbox_GetNextMessageResponse*)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::default_instance()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::descriptor()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_GetNextMessageResponse::mutable_message()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::release_message()
 t CVRMsg_ClientMailbox_GetNextMessageResponse::set_allocated_message(std::string*)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::set_message(char const*)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::set_message(char const*, unsigned long)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::set_message(std::string const&)
 t CVRMsg_ClientMailbox_GetNextMessageResponse::~CVRMsg_ClientMailbox_GetNextMessageResponse()
 t CVRMsg_ClientMailbox_RegisterMailbox::ByteSize() const
 t CVRMsg_ClientMailbox_RegisterMailbox::CVRMsg_ClientMailbox_RegisterMailbox()
 t CVRMsg_ClientMailbox_RegisterMailbox::CVRMsg_ClientMailbox_RegisterMailbox() [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailbox::CVRMsg_ClientMailbox_RegisterMailbox(CVRMsg_ClientMailbox_RegisterMailbox const&)
 t CVRMsg_ClientMailbox_RegisterMailbox::CVRMsg_ClientMailbox_RegisterMailbox(CVRMsg_ClientMailbox_RegisterMailbox const&) [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailbox::Clear()
 t CVRMsg_ClientMailbox_RegisterMailbox::CopyFrom(CVRMsg_ClientMailbox_RegisterMailbox const&)
 t CVRMsg_ClientMailbox_RegisterMailbox::GetCachedSize() const
 t CVRMsg_ClientMailbox_RegisterMailbox::GetMetadata() const
 t CVRMsg_ClientMailbox_RegisterMailbox::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailbox::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_RegisterMailbox::IsInitialized() const
 t CVRMsg_ClientMailbox_RegisterMailbox::MergeFrom(CVRMsg_ClientMailbox_RegisterMailbox const&)
 t CVRMsg_ClientMailbox_RegisterMailbox::MergeFrom(CVRMsg_ClientMailbox_RegisterMailbox const&) [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailbox::New() const
 t CVRMsg_ClientMailbox_RegisterMailbox::New() const [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailbox::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_RegisterMailbox::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_RegisterMailbox::SharedCtor()
 t CVRMsg_ClientMailbox_RegisterMailbox::SharedCtor() [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailbox::SharedDtor()
 t CVRMsg_ClientMailbox_RegisterMailbox::Swap(CVRMsg_ClientMailbox_RegisterMailbox*)
 t CVRMsg_ClientMailbox_RegisterMailbox::default_instance()
 t CVRMsg_ClientMailbox_RegisterMailbox::descriptor()
 t CVRMsg_ClientMailbox_RegisterMailbox::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailbox::mutable_mailbox_name()
 t CVRMsg_ClientMailbox_RegisterMailbox::release_mailbox_name()
 t CVRMsg_ClientMailbox_RegisterMailbox::set_allocated_mailbox_name(std::string*)
 t CVRMsg_ClientMailbox_RegisterMailbox::set_mailbox_name(char const*)
 t CVRMsg_ClientMailbox_RegisterMailbox::set_mailbox_name(char const*, unsigned long)
 t CVRMsg_ClientMailbox_RegisterMailbox::set_mailbox_name(std::string const&)
 t CVRMsg_ClientMailbox_RegisterMailbox::~CVRMsg_ClientMailbox_RegisterMailbox()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::ByteSize() const
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::CVRMsg_ClientMailbox_RegisterMailboxResponse()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::CVRMsg_ClientMailbox_RegisterMailboxResponse() [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::CVRMsg_ClientMailbox_RegisterMailboxResponse(CVRMsg_ClientMailbox_RegisterMailboxResponse const&)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::CVRMsg_ClientMailbox_RegisterMailboxResponse(CVRMsg_ClientMailbox_RegisterMailboxResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::Clear()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::CopyFrom(CVRMsg_ClientMailbox_RegisterMailboxResponse const&)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::GetCachedSize() const
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::GetMetadata() const
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::IsInitialized() const
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::MergeFrom(CVRMsg_ClientMailbox_RegisterMailboxResponse const&)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::MergeFrom(CVRMsg_ClientMailbox_RegisterMailboxResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::New() const
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::New() const [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::SharedCtor()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::SharedCtor() [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::SharedDtor()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::Swap(CVRMsg_ClientMailbox_RegisterMailboxResponse*)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::default_instance()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::descriptor()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::mutable_actual_mailbox_name()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::release_actual_mailbox_name()
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::set_actual_mailbox_name(char const*)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::set_actual_mailbox_name(char const*, unsigned long)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::set_actual_mailbox_name(std::string const&)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::set_allocated_actual_mailbox_name(std::string*)
 t CVRMsg_ClientMailbox_RegisterMailboxResponse::~CVRMsg_ClientMailbox_RegisterMailboxResponse()
 t CVRMsg_ClientMailbox_SendMailboxMessage::ByteSize() const
 t CVRMsg_ClientMailbox_SendMailboxMessage::CVRMsg_ClientMailbox_SendMailboxMessage()
 t CVRMsg_ClientMailbox_SendMailboxMessage::CVRMsg_ClientMailbox_SendMailboxMessage() [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessage::CVRMsg_ClientMailbox_SendMailboxMessage(CVRMsg_ClientMailbox_SendMailboxMessage const&)
 t CVRMsg_ClientMailbox_SendMailboxMessage::CVRMsg_ClientMailbox_SendMailboxMessage(CVRMsg_ClientMailbox_SendMailboxMessage const&) [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessage::Clear()
 t CVRMsg_ClientMailbox_SendMailboxMessage::CopyFrom(CVRMsg_ClientMailbox_SendMailboxMessage const&)
 t CVRMsg_ClientMailbox_SendMailboxMessage::GetCachedSize() const
 t CVRMsg_ClientMailbox_SendMailboxMessage::GetMetadata() const
 t CVRMsg_ClientMailbox_SendMailboxMessage::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessage::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_SendMailboxMessage::IsInitialized() const
 t CVRMsg_ClientMailbox_SendMailboxMessage::MergeFrom(CVRMsg_ClientMailbox_SendMailboxMessage const&)
 t CVRMsg_ClientMailbox_SendMailboxMessage::MergeFrom(CVRMsg_ClientMailbox_SendMailboxMessage const&) [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessage::New() const
 t CVRMsg_ClientMailbox_SendMailboxMessage::New() const [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessage::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_SendMailboxMessage::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_SendMailboxMessage::SharedCtor()
 t CVRMsg_ClientMailbox_SendMailboxMessage::SharedCtor() [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessage::SharedDtor()
 t CVRMsg_ClientMailbox_SendMailboxMessage::Swap(CVRMsg_ClientMailbox_SendMailboxMessage*)
 t CVRMsg_ClientMailbox_SendMailboxMessage::default_instance()
 t CVRMsg_ClientMailbox_SendMailboxMessage::descriptor()
 t CVRMsg_ClientMailbox_SendMailboxMessage::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessage::mutable_destination_mailbox()
 t CVRMsg_ClientMailbox_SendMailboxMessage::mutable_message()
 t CVRMsg_ClientMailbox_SendMailboxMessage::release_destination_mailbox()
 t CVRMsg_ClientMailbox_SendMailboxMessage::release_message()
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_allocated_destination_mailbox(std::string*)
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_allocated_message(std::string*)
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_destination_mailbox(char const*)
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_destination_mailbox(char const*, unsigned long)
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_destination_mailbox(std::string const&)
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_message(char const*)
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_message(char const*, unsigned long)
 t CVRMsg_ClientMailbox_SendMailboxMessage::set_message(std::string const&)
 t CVRMsg_ClientMailbox_SendMailboxMessage::~CVRMsg_ClientMailbox_SendMailboxMessage()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::ByteSize() const
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::CVRMsg_ClientMailbox_SendMailboxMessageResponse()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::CVRMsg_ClientMailbox_SendMailboxMessageResponse() [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::CVRMsg_ClientMailbox_SendMailboxMessageResponse(CVRMsg_ClientMailbox_SendMailboxMessageResponse const&)
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::CVRMsg_ClientMailbox_SendMailboxMessageResponse(CVRMsg_ClientMailbox_SendMailboxMessageResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::Clear()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::CopyFrom(CVRMsg_ClientMailbox_SendMailboxMessageResponse const&)
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::GetCachedSize() const
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::GetMetadata() const
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::IsInitialized() const
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::MergeFrom(CVRMsg_ClientMailbox_SendMailboxMessageResponse const&)
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::MergeFrom(CVRMsg_ClientMailbox_SendMailboxMessageResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::New() const
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::New() const [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::SharedCtor()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::SharedDtor()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::Swap(CVRMsg_ClientMailbox_SendMailboxMessageResponse*)
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::default_instance()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::descriptor()
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_SendMailboxMessageResponse::~CVRMsg_ClientMailbox_SendMailboxMessageResponse()
 t CVRMsg_ClientMailbox_UnregisterMailbox::ByteSize() const
 t CVRMsg_ClientMailbox_UnregisterMailbox::CVRMsg_ClientMailbox_UnregisterMailbox()
 t CVRMsg_ClientMailbox_UnregisterMailbox::CVRMsg_ClientMailbox_UnregisterMailbox() [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailbox::CVRMsg_ClientMailbox_UnregisterMailbox(CVRMsg_ClientMailbox_UnregisterMailbox const&)
 t CVRMsg_ClientMailbox_UnregisterMailbox::CVRMsg_ClientMailbox_UnregisterMailbox(CVRMsg_ClientMailbox_UnregisterMailbox const&) [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailbox::Clear()
 t CVRMsg_ClientMailbox_UnregisterMailbox::CopyFrom(CVRMsg_ClientMailbox_UnregisterMailbox const&)
 t CVRMsg_ClientMailbox_UnregisterMailbox::GetCachedSize() const
 t CVRMsg_ClientMailbox_UnregisterMailbox::GetMetadata() const
 t CVRMsg_ClientMailbox_UnregisterMailbox::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailbox::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_UnregisterMailbox::IsInitialized() const
 t CVRMsg_ClientMailbox_UnregisterMailbox::MergeFrom(CVRMsg_ClientMailbox_UnregisterMailbox const&)
 t CVRMsg_ClientMailbox_UnregisterMailbox::MergeFrom(CVRMsg_ClientMailbox_UnregisterMailbox const&) [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailbox::New() const
 t CVRMsg_ClientMailbox_UnregisterMailbox::New() const [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailbox::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_UnregisterMailbox::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_UnregisterMailbox::SharedCtor()
 t CVRMsg_ClientMailbox_UnregisterMailbox::SharedDtor()
 t CVRMsg_ClientMailbox_UnregisterMailbox::Swap(CVRMsg_ClientMailbox_UnregisterMailbox*)
 t CVRMsg_ClientMailbox_UnregisterMailbox::default_instance()
 t CVRMsg_ClientMailbox_UnregisterMailbox::descriptor()
 t CVRMsg_ClientMailbox_UnregisterMailbox::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailbox::~CVRMsg_ClientMailbox_UnregisterMailbox()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::ByteSize() const
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::CVRMsg_ClientMailbox_UnregisterMailboxResponse()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::CVRMsg_ClientMailbox_UnregisterMailboxResponse() [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::CVRMsg_ClientMailbox_UnregisterMailboxResponse(CVRMsg_ClientMailbox_UnregisterMailboxResponse const&)
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::CVRMsg_ClientMailbox_UnregisterMailboxResponse(CVRMsg_ClientMailbox_UnregisterMailboxResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::Clear()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::CopyFrom(CVRMsg_ClientMailbox_UnregisterMailboxResponse const&)
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::GetCachedSize() const
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::GetMetadata() const
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::InitAsDefaultInstance()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::IsInitialized() const
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::MergeFrom(CVRMsg_ClientMailbox_UnregisterMailboxResponse const&)
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::MergeFrom(CVRMsg_ClientMailbox_UnregisterMailboxResponse const&) [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::New() const
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::New() const [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::SetCachedSize(int) const
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::SharedCtor()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::SharedDtor()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::Swap(CVRMsg_ClientMailbox_UnregisterMailboxResponse*)
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::default_instance()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::descriptor()
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::descriptor() [clone .cold]
 t CVRMsg_ClientMailbox_UnregisterMailboxResponse::~CVRMsg_ClientMailbox_UnregisterMailboxResponse()
 t CVRMsg_CompositorBringToFront::ByteSize() const
 t CVRMsg_CompositorBringToFront::CVRMsg_CompositorBringToFront()
 t CVRMsg_CompositorBringToFront::CVRMsg_CompositorBringToFront() [clone .cold]
 t CVRMsg_CompositorBringToFront::CVRMsg_CompositorBringToFront(CVRMsg_CompositorBringToFront const&)
 t CVRMsg_CompositorBringToFront::CVRMsg_CompositorBringToFront(CVRMsg_CompositorBringToFront const&) [clone .cold]
 t CVRMsg_CompositorBringToFront::Clear()
 t CVRMsg_CompositorBringToFront::CopyFrom(CVRMsg_CompositorBringToFront const&)
 t CVRMsg_CompositorBringToFront::GetCachedSize() const
 t CVRMsg_CompositorBringToFront::GetMetadata() const
 t CVRMsg_CompositorBringToFront::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorBringToFront::InitAsDefaultInstance()
 t CVRMsg_CompositorBringToFront::IsInitialized() const
 t CVRMsg_CompositorBringToFront::MergeFrom(CVRMsg_CompositorBringToFront const&)
 t CVRMsg_CompositorBringToFront::MergeFrom(CVRMsg_CompositorBringToFront const&) [clone .cold]
 t CVRMsg_CompositorBringToFront::New() const
 t CVRMsg_CompositorBringToFront::New() const [clone .cold]
 t CVRMsg_CompositorBringToFront::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorBringToFront::SetCachedSize(int) const
 t CVRMsg_CompositorBringToFront::SharedCtor()
 t CVRMsg_CompositorBringToFront::SharedDtor()
 t CVRMsg_CompositorBringToFront::Swap(CVRMsg_CompositorBringToFront*)
 t CVRMsg_CompositorBringToFront::default_instance()
 t CVRMsg_CompositorBringToFront::descriptor()
 t CVRMsg_CompositorBringToFront::descriptor() [clone .cold]
 t CVRMsg_CompositorBringToFront::~CVRMsg_CompositorBringToFront()
 t CVRMsg_CompositorClearFrameBuffer::ByteSize() const
 t CVRMsg_CompositorClearFrameBuffer::CVRMsg_CompositorClearFrameBuffer()
 t CVRMsg_CompositorClearFrameBuffer::CVRMsg_CompositorClearFrameBuffer() [clone .cold]
 t CVRMsg_CompositorClearFrameBuffer::CVRMsg_CompositorClearFrameBuffer(CVRMsg_CompositorClearFrameBuffer const&)
 t CVRMsg_CompositorClearFrameBuffer::CVRMsg_CompositorClearFrameBuffer(CVRMsg_CompositorClearFrameBuffer const&) [clone .cold]
 t CVRMsg_CompositorClearFrameBuffer::Clear()
 t CVRMsg_CompositorClearFrameBuffer::CopyFrom(CVRMsg_CompositorClearFrameBuffer const&)
 t CVRMsg_CompositorClearFrameBuffer::GetCachedSize() const
 t CVRMsg_CompositorClearFrameBuffer::GetMetadata() const
 t CVRMsg_CompositorClearFrameBuffer::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorClearFrameBuffer::InitAsDefaultInstance()
 t CVRMsg_CompositorClearFrameBuffer::IsInitialized() const
 t CVRMsg_CompositorClearFrameBuffer::MergeFrom(CVRMsg_CompositorClearFrameBuffer const&)
 t CVRMsg_CompositorClearFrameBuffer::MergeFrom(CVRMsg_CompositorClearFrameBuffer const&) [clone .cold]
 t CVRMsg_CompositorClearFrameBuffer::New() const
 t CVRMsg_CompositorClearFrameBuffer::New() const [clone .cold]
 t CVRMsg_CompositorClearFrameBuffer::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorClearFrameBuffer::SetCachedSize(int) const
 t CVRMsg_CompositorClearFrameBuffer::SharedCtor()
 t CVRMsg_CompositorClearFrameBuffer::SharedDtor()
 t CVRMsg_CompositorClearFrameBuffer::Swap(CVRMsg_CompositorClearFrameBuffer*)
 t CVRMsg_CompositorClearFrameBuffer::default_instance()
 t CVRMsg_CompositorClearFrameBuffer::descriptor()
 t CVRMsg_CompositorClearFrameBuffer::descriptor() [clone .cold]
 t CVRMsg_CompositorClearFrameBuffer::~CVRMsg_CompositorClearFrameBuffer()
 t CVRMsg_CompositorConnect::ByteSize() const
 t CVRMsg_CompositorConnect::CVRMsg_CompositorConnect()
 t CVRMsg_CompositorConnect::CVRMsg_CompositorConnect() [clone .cold]
 t CVRMsg_CompositorConnect::CVRMsg_CompositorConnect(CVRMsg_CompositorConnect const&)
 t CVRMsg_CompositorConnect::CVRMsg_CompositorConnect(CVRMsg_CompositorConnect const&) [clone .cold]
 t CVRMsg_CompositorConnect::Clear()
 t CVRMsg_CompositorConnect::CopyFrom(CVRMsg_CompositorConnect const&)
 t CVRMsg_CompositorConnect::GetCachedSize() const
 t CVRMsg_CompositorConnect::GetMetadata() const
 t CVRMsg_CompositorConnect::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorConnect::InitAsDefaultInstance()
 t CVRMsg_CompositorConnect::IsInitialized() const
 t CVRMsg_CompositorConnect::MergeFrom(CVRMsg_CompositorConnect const&)
 t CVRMsg_CompositorConnect::MergeFrom(CVRMsg_CompositorConnect const&) [clone .cold]
 t CVRMsg_CompositorConnect::New() const
 t CVRMsg_CompositorConnect::New() const [clone .cold]
 t CVRMsg_CompositorConnect::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorConnect::SetCachedSize(int) const
 t CVRMsg_CompositorConnect::SharedCtor()
 t CVRMsg_CompositorConnect::SharedCtor() [clone .cold]
 t CVRMsg_CompositorConnect::SharedDtor()
 t CVRMsg_CompositorConnect::Swap(CVRMsg_CompositorConnect*)
 t CVRMsg_CompositorConnect::default_instance()
 t CVRMsg_CompositorConnect::descriptor()
 t CVRMsg_CompositorConnect::descriptor() [clone .cold]
 t CVRMsg_CompositorConnect::mutable_binary_path()
 t CVRMsg_CompositorConnect::mutable_startup_info_json()
 t CVRMsg_CompositorConnect::release_binary_path()
 t CVRMsg_CompositorConnect::release_startup_info_json()
 t CVRMsg_CompositorConnect::set_allocated_binary_path(std::string*)
 t CVRMsg_CompositorConnect::set_allocated_startup_info_json(std::string*)
 t CVRMsg_CompositorConnect::set_binary_path(char const*)
 t CVRMsg_CompositorConnect::set_binary_path(char const*, unsigned long)
 t CVRMsg_CompositorConnect::set_binary_path(std::string const&)
 t CVRMsg_CompositorConnect::set_startup_info_json(char const*)
 t CVRMsg_CompositorConnect::set_startup_info_json(char const*, unsigned long)
 t CVRMsg_CompositorConnect::set_startup_info_json(std::string const&)
 t CVRMsg_CompositorConnect::~CVRMsg_CompositorConnect()
 t CVRMsg_CompositorConnectResponse::ByteSize() const
 t CVRMsg_CompositorConnectResponse::CVRMsg_CompositorConnectResponse()
 t CVRMsg_CompositorConnectResponse::CVRMsg_CompositorConnectResponse() [clone .cold]
 t CVRMsg_CompositorConnectResponse::CVRMsg_CompositorConnectResponse(CVRMsg_CompositorConnectResponse const&)
 t CVRMsg_CompositorConnectResponse::CVRMsg_CompositorConnectResponse(CVRMsg_CompositorConnectResponse const&) [clone .cold]
 t CVRMsg_CompositorConnectResponse::Clear()
 t CVRMsg_CompositorConnectResponse::CopyFrom(CVRMsg_CompositorConnectResponse const&)
 t CVRMsg_CompositorConnectResponse::GetCachedSize() const
 t CVRMsg_CompositorConnectResponse::GetMetadata() const
 t CVRMsg_CompositorConnectResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorConnectResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorConnectResponse::IsInitialized() const
 t CVRMsg_CompositorConnectResponse::MergeFrom(CVRMsg_CompositorConnectResponse const&)
 t CVRMsg_CompositorConnectResponse::MergeFrom(CVRMsg_CompositorConnectResponse const&) [clone .cold]
 t CVRMsg_CompositorConnectResponse::New() const
 t CVRMsg_CompositorConnectResponse::New() const [clone .cold]
 t CVRMsg_CompositorConnectResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorConnectResponse::SetCachedSize(int) const
 t CVRMsg_CompositorConnectResponse::SharedCtor()
 t CVRMsg_CompositorConnectResponse::SharedDtor()
 t CVRMsg_CompositorConnectResponse::Swap(CVRMsg_CompositorConnectResponse*)
 t CVRMsg_CompositorConnectResponse::default_instance()
 t CVRMsg_CompositorConnectResponse::descriptor()
 t CVRMsg_CompositorConnectResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorConnectResponse::~CVRMsg_CompositorConnectResponse()
 t CVRMsg_CompositorDumpImages::ByteSize() const
 t CVRMsg_CompositorDumpImages::CVRMsg_CompositorDumpImages()
 t CVRMsg_CompositorDumpImages::CVRMsg_CompositorDumpImages() [clone .cold]
 t CVRMsg_CompositorDumpImages::CVRMsg_CompositorDumpImages(CVRMsg_CompositorDumpImages const&)
 t CVRMsg_CompositorDumpImages::CVRMsg_CompositorDumpImages(CVRMsg_CompositorDumpImages const&) [clone .cold]
 t CVRMsg_CompositorDumpImages::Clear()
 t CVRMsg_CompositorDumpImages::CopyFrom(CVRMsg_CompositorDumpImages const&)
 t CVRMsg_CompositorDumpImages::GetCachedSize() const
 t CVRMsg_CompositorDumpImages::GetMetadata() const
 t CVRMsg_CompositorDumpImages::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorDumpImages::InitAsDefaultInstance()
 t CVRMsg_CompositorDumpImages::IsInitialized() const
 t CVRMsg_CompositorDumpImages::MergeFrom(CVRMsg_CompositorDumpImages const&)
 t CVRMsg_CompositorDumpImages::MergeFrom(CVRMsg_CompositorDumpImages const&) [clone .cold]
 t CVRMsg_CompositorDumpImages::New() const
 t CVRMsg_CompositorDumpImages::New() const [clone .cold]
 t CVRMsg_CompositorDumpImages::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorDumpImages::SetCachedSize(int) const
 t CVRMsg_CompositorDumpImages::SharedCtor()
 t CVRMsg_CompositorDumpImages::SharedDtor()
 t CVRMsg_CompositorDumpImages::Swap(CVRMsg_CompositorDumpImages*)
 t CVRMsg_CompositorDumpImages::default_instance()
 t CVRMsg_CompositorDumpImages::descriptor()
 t CVRMsg_CompositorDumpImages::descriptor() [clone .cold]
 t CVRMsg_CompositorDumpImages::~CVRMsg_CompositorDumpImages()
 t CVRMsg_CompositorDumpImagesAll::ByteSize() const
 t CVRMsg_CompositorDumpImagesAll::CVRMsg_CompositorDumpImagesAll()
 t CVRMsg_CompositorDumpImagesAll::CVRMsg_CompositorDumpImagesAll() [clone .cold]
 t CVRMsg_CompositorDumpImagesAll::CVRMsg_CompositorDumpImagesAll(CVRMsg_CompositorDumpImagesAll const&)
 t CVRMsg_CompositorDumpImagesAll::CVRMsg_CompositorDumpImagesAll(CVRMsg_CompositorDumpImagesAll const&) [clone .cold]
 t CVRMsg_CompositorDumpImagesAll::Clear()
 t CVRMsg_CompositorDumpImagesAll::CopyFrom(CVRMsg_CompositorDumpImagesAll const&)
 t CVRMsg_CompositorDumpImagesAll::GetCachedSize() const
 t CVRMsg_CompositorDumpImagesAll::GetMetadata() const
 t CVRMsg_CompositorDumpImagesAll::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorDumpImagesAll::InitAsDefaultInstance()
 t CVRMsg_CompositorDumpImagesAll::IsInitialized() const
 t CVRMsg_CompositorDumpImagesAll::MergeFrom(CVRMsg_CompositorDumpImagesAll const&)
 t CVRMsg_CompositorDumpImagesAll::MergeFrom(CVRMsg_CompositorDumpImagesAll const&) [clone .cold]
 t CVRMsg_CompositorDumpImagesAll::New() const
 t CVRMsg_CompositorDumpImagesAll::New() const [clone .cold]
 t CVRMsg_CompositorDumpImagesAll::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorDumpImagesAll::SetCachedSize(int) const
 t CVRMsg_CompositorDumpImagesAll::SharedCtor()
 t CVRMsg_CompositorDumpImagesAll::SharedDtor()
 t CVRMsg_CompositorDumpImagesAll::Swap(CVRMsg_CompositorDumpImagesAll*)
 t CVRMsg_CompositorDumpImagesAll::default_instance()
 t CVRMsg_CompositorDumpImagesAll::descriptor()
 t CVRMsg_CompositorDumpImagesAll::descriptor() [clone .cold]
 t CVRMsg_CompositorDumpImagesAll::~CVRMsg_CompositorDumpImagesAll()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::ByteSize() const
 t CVRMsg_CompositorGetScreenshotPropertyFilename::CVRMsg_CompositorGetScreenshotPropertyFilename()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::CVRMsg_CompositorGetScreenshotPropertyFilename() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilename::CVRMsg_CompositorGetScreenshotPropertyFilename(CVRMsg_CompositorGetScreenshotPropertyFilename const&)
 t CVRMsg_CompositorGetScreenshotPropertyFilename::CVRMsg_CompositorGetScreenshotPropertyFilename(CVRMsg_CompositorGetScreenshotPropertyFilename const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilename::Clear()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::CopyFrom(CVRMsg_CompositorGetScreenshotPropertyFilename const&)
 t CVRMsg_CompositorGetScreenshotPropertyFilename::GetCachedSize() const
 t CVRMsg_CompositorGetScreenshotPropertyFilename::GetMetadata() const
 t CVRMsg_CompositorGetScreenshotPropertyFilename::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilename::InitAsDefaultInstance()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::IsInitialized() const
 t CVRMsg_CompositorGetScreenshotPropertyFilename::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyFilename const&)
 t CVRMsg_CompositorGetScreenshotPropertyFilename::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyFilename const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilename::New() const
 t CVRMsg_CompositorGetScreenshotPropertyFilename::New() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilename::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorGetScreenshotPropertyFilename::SetCachedSize(int) const
 t CVRMsg_CompositorGetScreenshotPropertyFilename::SharedCtor()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::SharedDtor()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::Swap(CVRMsg_CompositorGetScreenshotPropertyFilename*)
 t CVRMsg_CompositorGetScreenshotPropertyFilename::default_instance()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::descriptor()
 t CVRMsg_CompositorGetScreenshotPropertyFilename::descriptor() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilename::~CVRMsg_CompositorGetScreenshotPropertyFilename()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::ByteSize() const
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::CVRMsg_CompositorGetScreenshotPropertyFilenameResponse()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::CVRMsg_CompositorGetScreenshotPropertyFilenameResponse() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::CVRMsg_CompositorGetScreenshotPropertyFilenameResponse(CVRMsg_CompositorGetScreenshotPropertyFilenameResponse const&)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::CVRMsg_CompositorGetScreenshotPropertyFilenameResponse(CVRMsg_CompositorGetScreenshotPropertyFilenameResponse const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::Clear()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::CopyFrom(CVRMsg_CompositorGetScreenshotPropertyFilenameResponse const&)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::GetCachedSize() const
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::GetMetadata() const
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::IsInitialized() const
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyFilenameResponse const&)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyFilenameResponse const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::New() const
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::New() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::SetCachedSize(int) const
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::SharedCtor()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::SharedCtor() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::SharedDtor()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::Swap(CVRMsg_CompositorGetScreenshotPropertyFilenameResponse*)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::default_instance()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::descriptor()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::mutable_filename()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::release_filename()
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::set_allocated_filename(std::string*)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::set_filename(char const*)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::set_filename(char const*, unsigned long)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::set_filename(std::string const&)
 t CVRMsg_CompositorGetScreenshotPropertyFilenameResponse::~CVRMsg_CompositorGetScreenshotPropertyFilenameResponse()
 t CVRMsg_CompositorGetScreenshotPropertyType::ByteSize() const
 t CVRMsg_CompositorGetScreenshotPropertyType::CVRMsg_CompositorGetScreenshotPropertyType()
 t CVRMsg_CompositorGetScreenshotPropertyType::CVRMsg_CompositorGetScreenshotPropertyType() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyType::CVRMsg_CompositorGetScreenshotPropertyType(CVRMsg_CompositorGetScreenshotPropertyType const&)
 t CVRMsg_CompositorGetScreenshotPropertyType::CVRMsg_CompositorGetScreenshotPropertyType(CVRMsg_CompositorGetScreenshotPropertyType const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyType::Clear()
 t CVRMsg_CompositorGetScreenshotPropertyType::CopyFrom(CVRMsg_CompositorGetScreenshotPropertyType const&)
 t CVRMsg_CompositorGetScreenshotPropertyType::GetCachedSize() const
 t CVRMsg_CompositorGetScreenshotPropertyType::GetMetadata() const
 t CVRMsg_CompositorGetScreenshotPropertyType::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyType::InitAsDefaultInstance()
 t CVRMsg_CompositorGetScreenshotPropertyType::IsInitialized() const
 t CVRMsg_CompositorGetScreenshotPropertyType::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyType const&)
 t CVRMsg_CompositorGetScreenshotPropertyType::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyType const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyType::New() const
 t CVRMsg_CompositorGetScreenshotPropertyType::New() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyType::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorGetScreenshotPropertyType::SetCachedSize(int) const
 t CVRMsg_CompositorGetScreenshotPropertyType::SharedCtor()
 t CVRMsg_CompositorGetScreenshotPropertyType::SharedDtor()
 t CVRMsg_CompositorGetScreenshotPropertyType::Swap(CVRMsg_CompositorGetScreenshotPropertyType*)
 t CVRMsg_CompositorGetScreenshotPropertyType::default_instance()
 t CVRMsg_CompositorGetScreenshotPropertyType::descriptor()
 t CVRMsg_CompositorGetScreenshotPropertyType::descriptor() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyType::~CVRMsg_CompositorGetScreenshotPropertyType()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::ByteSize() const
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::CVRMsg_CompositorGetScreenshotPropertyTypeResponse()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::CVRMsg_CompositorGetScreenshotPropertyTypeResponse() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::CVRMsg_CompositorGetScreenshotPropertyTypeResponse(CVRMsg_CompositorGetScreenshotPropertyTypeResponse const&)
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::CVRMsg_CompositorGetScreenshotPropertyTypeResponse(CVRMsg_CompositorGetScreenshotPropertyTypeResponse const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::Clear()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::CopyFrom(CVRMsg_CompositorGetScreenshotPropertyTypeResponse const&)
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::GetCachedSize() const
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::GetMetadata() const
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::IsInitialized() const
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyTypeResponse const&)
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::MergeFrom(CVRMsg_CompositorGetScreenshotPropertyTypeResponse const&) [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::New() const
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::New() const [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::SetCachedSize(int) const
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::SharedCtor()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::SharedDtor()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::Swap(CVRMsg_CompositorGetScreenshotPropertyTypeResponse*)
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::default_instance()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::descriptor()
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorGetScreenshotPropertyTypeResponse::~CVRMsg_CompositorGetScreenshotPropertyTypeResponse()
 t CVRMsg_CompositorGoToBack::ByteSize() const
 t CVRMsg_CompositorGoToBack::CVRMsg_CompositorGoToBack()
 t CVRMsg_CompositorGoToBack::CVRMsg_CompositorGoToBack() [clone .cold]
 t CVRMsg_CompositorGoToBack::CVRMsg_CompositorGoToBack(CVRMsg_CompositorGoToBack const&)
 t CVRMsg_CompositorGoToBack::CVRMsg_CompositorGoToBack(CVRMsg_CompositorGoToBack const&) [clone .cold]
 t CVRMsg_CompositorGoToBack::Clear()
 t CVRMsg_CompositorGoToBack::CopyFrom(CVRMsg_CompositorGoToBack const&)
 t CVRMsg_CompositorGoToBack::GetCachedSize() const
 t CVRMsg_CompositorGoToBack::GetMetadata() const
 t CVRMsg_CompositorGoToBack::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorGoToBack::InitAsDefaultInstance()
 t CVRMsg_CompositorGoToBack::IsInitialized() const
 t CVRMsg_CompositorGoToBack::MergeFrom(CVRMsg_CompositorGoToBack const&)
 t CVRMsg_CompositorGoToBack::MergeFrom(CVRMsg_CompositorGoToBack const&) [clone .cold]
 t CVRMsg_CompositorGoToBack::New() const
 t CVRMsg_CompositorGoToBack::New() const [clone .cold]
 t CVRMsg_CompositorGoToBack::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorGoToBack::SetCachedSize(int) const
 t CVRMsg_CompositorGoToBack::SharedCtor()
 t CVRMsg_CompositorGoToBack::SharedDtor()
 t CVRMsg_CompositorGoToBack::Swap(CVRMsg_CompositorGoToBack*)
 t CVRMsg_CompositorGoToBack::default_instance()
 t CVRMsg_CompositorGoToBack::descriptor()
 t CVRMsg_CompositorGoToBack::descriptor() [clone .cold]
 t CVRMsg_CompositorGoToBack::~CVRMsg_CompositorGoToBack()
 t CVRMsg_CompositorHookScreenshot::ByteSize() const
 t CVRMsg_CompositorHookScreenshot::CVRMsg_CompositorHookScreenshot()
 t CVRMsg_CompositorHookScreenshot::CVRMsg_CompositorHookScreenshot() [clone .cold]
 t CVRMsg_CompositorHookScreenshot::CVRMsg_CompositorHookScreenshot(CVRMsg_CompositorHookScreenshot const&)
 t CVRMsg_CompositorHookScreenshot::CVRMsg_CompositorHookScreenshot(CVRMsg_CompositorHookScreenshot const&) [clone .cold]
 t CVRMsg_CompositorHookScreenshot::Clear()
 t CVRMsg_CompositorHookScreenshot::CopyFrom(CVRMsg_CompositorHookScreenshot const&)
 t CVRMsg_CompositorHookScreenshot::GetCachedSize() const
 t CVRMsg_CompositorHookScreenshot::GetMetadata() const
 t CVRMsg_CompositorHookScreenshot::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorHookScreenshot::InitAsDefaultInstance()
 t CVRMsg_CompositorHookScreenshot::IsInitialized() const
 t CVRMsg_CompositorHookScreenshot::MergeFrom(CVRMsg_CompositorHookScreenshot const&)
 t CVRMsg_CompositorHookScreenshot::MergeFrom(CVRMsg_CompositorHookScreenshot const&) [clone .cold]
 t CVRMsg_CompositorHookScreenshot::New() const
 t CVRMsg_CompositorHookScreenshot::New() const [clone .cold]
 t CVRMsg_CompositorHookScreenshot::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorHookScreenshot::SetCachedSize(int) const
 t CVRMsg_CompositorHookScreenshot::SharedCtor()
 t CVRMsg_CompositorHookScreenshot::SharedDtor()
 t CVRMsg_CompositorHookScreenshot::Swap(CVRMsg_CompositorHookScreenshot*)
 t CVRMsg_CompositorHookScreenshot::default_instance()
 t CVRMsg_CompositorHookScreenshot::descriptor()
 t CVRMsg_CompositorHookScreenshot::descriptor() [clone .cold]
 t CVRMsg_CompositorHookScreenshot::~CVRMsg_CompositorHookScreenshot()
 t CVRMsg_CompositorHookScreenshotResponse::ByteSize() const
 t CVRMsg_CompositorHookScreenshotResponse::CVRMsg_CompositorHookScreenshotResponse()
 t CVRMsg_CompositorHookScreenshotResponse::CVRMsg_CompositorHookScreenshotResponse() [clone .cold]
 t CVRMsg_CompositorHookScreenshotResponse::CVRMsg_CompositorHookScreenshotResponse(CVRMsg_CompositorHookScreenshotResponse const&)
 t CVRMsg_CompositorHookScreenshotResponse::CVRMsg_CompositorHookScreenshotResponse(CVRMsg_CompositorHookScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorHookScreenshotResponse::Clear()
 t CVRMsg_CompositorHookScreenshotResponse::CopyFrom(CVRMsg_CompositorHookScreenshotResponse const&)
 t CVRMsg_CompositorHookScreenshotResponse::GetCachedSize() const
 t CVRMsg_CompositorHookScreenshotResponse::GetMetadata() const
 t CVRMsg_CompositorHookScreenshotResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorHookScreenshotResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorHookScreenshotResponse::IsInitialized() const
 t CVRMsg_CompositorHookScreenshotResponse::MergeFrom(CVRMsg_CompositorHookScreenshotResponse const&)
 t CVRMsg_CompositorHookScreenshotResponse::MergeFrom(CVRMsg_CompositorHookScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorHookScreenshotResponse::New() const
 t CVRMsg_CompositorHookScreenshotResponse::New() const [clone .cold]
 t CVRMsg_CompositorHookScreenshotResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorHookScreenshotResponse::SetCachedSize(int) const
 t CVRMsg_CompositorHookScreenshotResponse::SharedCtor()
 t CVRMsg_CompositorHookScreenshotResponse::SharedDtor()
 t CVRMsg_CompositorHookScreenshotResponse::Swap(CVRMsg_CompositorHookScreenshotResponse*)
 t CVRMsg_CompositorHookScreenshotResponse::default_instance()
 t CVRMsg_CompositorHookScreenshotResponse::descriptor()
 t CVRMsg_CompositorHookScreenshotResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorHookScreenshotResponse::~CVRMsg_CompositorHookScreenshotResponse()
 t CVRMsg_CompositorKeyboardShown::ByteSize() const
 t CVRMsg_CompositorKeyboardShown::CVRMsg_CompositorKeyboardShown()
 t CVRMsg_CompositorKeyboardShown::CVRMsg_CompositorKeyboardShown() [clone .cold]
 t CVRMsg_CompositorKeyboardShown::CVRMsg_CompositorKeyboardShown(CVRMsg_CompositorKeyboardShown const&)
 t CVRMsg_CompositorKeyboardShown::CVRMsg_CompositorKeyboardShown(CVRMsg_CompositorKeyboardShown const&) [clone .cold]
 t CVRMsg_CompositorKeyboardShown::Clear()
 t CVRMsg_CompositorKeyboardShown::CopyFrom(CVRMsg_CompositorKeyboardShown const&)
 t CVRMsg_CompositorKeyboardShown::GetCachedSize() const
 t CVRMsg_CompositorKeyboardShown::GetMetadata() const
 t CVRMsg_CompositorKeyboardShown::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorKeyboardShown::InitAsDefaultInstance()
 t CVRMsg_CompositorKeyboardShown::IsInitialized() const
 t CVRMsg_CompositorKeyboardShown::MergeFrom(CVRMsg_CompositorKeyboardShown const&)
 t CVRMsg_CompositorKeyboardShown::MergeFrom(CVRMsg_CompositorKeyboardShown const&) [clone .cold]
 t CVRMsg_CompositorKeyboardShown::New() const
 t CVRMsg_CompositorKeyboardShown::New() const [clone .cold]
 t CVRMsg_CompositorKeyboardShown::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorKeyboardShown::SetCachedSize(int) const
 t CVRMsg_CompositorKeyboardShown::SharedCtor()
 t CVRMsg_CompositorKeyboardShown::SharedDtor()
 t CVRMsg_CompositorKeyboardShown::Swap(CVRMsg_CompositorKeyboardShown*)
 t CVRMsg_CompositorKeyboardShown::default_instance()
 t CVRMsg_CompositorKeyboardShown::descriptor()
 t CVRMsg_CompositorKeyboardShown::descriptor() [clone .cold]
 t CVRMsg_CompositorKeyboardShown::~CVRMsg_CompositorKeyboardShown()
 t CVRMsg_CompositorKeyboardShownResponse::ByteSize() const
 t CVRMsg_CompositorKeyboardShownResponse::CVRMsg_CompositorKeyboardShownResponse()
 t CVRMsg_CompositorKeyboardShownResponse::CVRMsg_CompositorKeyboardShownResponse() [clone .cold]
 t CVRMsg_CompositorKeyboardShownResponse::CVRMsg_CompositorKeyboardShownResponse(CVRMsg_CompositorKeyboardShownResponse const&)
 t CVRMsg_CompositorKeyboardShownResponse::CVRMsg_CompositorKeyboardShownResponse(CVRMsg_CompositorKeyboardShownResponse const&) [clone .cold]
 t CVRMsg_CompositorKeyboardShownResponse::Clear()
 t CVRMsg_CompositorKeyboardShownResponse::CopyFrom(CVRMsg_CompositorKeyboardShownResponse const&)
 t CVRMsg_CompositorKeyboardShownResponse::GetCachedSize() const
 t CVRMsg_CompositorKeyboardShownResponse::GetMetadata() const
 t CVRMsg_CompositorKeyboardShownResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorKeyboardShownResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorKeyboardShownResponse::IsInitialized() const
 t CVRMsg_CompositorKeyboardShownResponse::MergeFrom(CVRMsg_CompositorKeyboardShownResponse const&)
 t CVRMsg_CompositorKeyboardShownResponse::MergeFrom(CVRMsg_CompositorKeyboardShownResponse const&) [clone .cold]
 t CVRMsg_CompositorKeyboardShownResponse::New() const
 t CVRMsg_CompositorKeyboardShownResponse::New() const [clone .cold]
 t CVRMsg_CompositorKeyboardShownResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorKeyboardShownResponse::SetCachedSize(int) const
 t CVRMsg_CompositorKeyboardShownResponse::SharedCtor()
 t CVRMsg_CompositorKeyboardShownResponse::SharedDtor()
 t CVRMsg_CompositorKeyboardShownResponse::Swap(CVRMsg_CompositorKeyboardShownResponse*)
 t CVRMsg_CompositorKeyboardShownResponse::default_instance()
 t CVRMsg_CompositorKeyboardShownResponse::descriptor()
 t CVRMsg_CompositorKeyboardShownResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorKeyboardShownResponse::~CVRMsg_CompositorKeyboardShownResponse()
 t CVRMsg_CompositorNewSharedBuffer::ByteSize() const
 t CVRMsg_CompositorNewSharedBuffer::CVRMsg_CompositorNewSharedBuffer()
 t CVRMsg_CompositorNewSharedBuffer::CVRMsg_CompositorNewSharedBuffer() [clone .cold]
 t CVRMsg_CompositorNewSharedBuffer::CVRMsg_CompositorNewSharedBuffer(CVRMsg_CompositorNewSharedBuffer const&)
 t CVRMsg_CompositorNewSharedBuffer::CVRMsg_CompositorNewSharedBuffer(CVRMsg_CompositorNewSharedBuffer const&) [clone .cold]
 t CVRMsg_CompositorNewSharedBuffer::Clear()
 t CVRMsg_CompositorNewSharedBuffer::CopyFrom(CVRMsg_CompositorNewSharedBuffer const&)
 t CVRMsg_CompositorNewSharedBuffer::GetCachedSize() const
 t CVRMsg_CompositorNewSharedBuffer::GetMetadata() const
 t CVRMsg_CompositorNewSharedBuffer::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorNewSharedBuffer::InitAsDefaultInstance()
 t CVRMsg_CompositorNewSharedBuffer::IsInitialized() const
 t CVRMsg_CompositorNewSharedBuffer::MergeFrom(CVRMsg_CompositorNewSharedBuffer const&)
 t CVRMsg_CompositorNewSharedBuffer::MergeFrom(CVRMsg_CompositorNewSharedBuffer const&) [clone .cold]
 t CVRMsg_CompositorNewSharedBuffer::New() const
 t CVRMsg_CompositorNewSharedBuffer::New() const [clone .cold]
 t CVRMsg_CompositorNewSharedBuffer::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorNewSharedBuffer::SetCachedSize(int) const
 t CVRMsg_CompositorNewSharedBuffer::SharedCtor()
 t CVRMsg_CompositorNewSharedBuffer::SharedDtor()
 t CVRMsg_CompositorNewSharedBuffer::Swap(CVRMsg_CompositorNewSharedBuffer*)
 t CVRMsg_CompositorNewSharedBuffer::default_instance()
 t CVRMsg_CompositorNewSharedBuffer::descriptor()
 t CVRMsg_CompositorNewSharedBuffer::descriptor() [clone .cold]
 t CVRMsg_CompositorNewSharedBuffer::~CVRMsg_CompositorNewSharedBuffer()
 t CVRMsg_CompositorNewSharedBufferResponse::ByteSize() const
 t CVRMsg_CompositorNewSharedBufferResponse::CVRMsg_CompositorNewSharedBufferResponse()
 t CVRMsg_CompositorNewSharedBufferResponse::CVRMsg_CompositorNewSharedBufferResponse() [clone .cold]
 t CVRMsg_CompositorNewSharedBufferResponse::CVRMsg_CompositorNewSharedBufferResponse(CVRMsg_CompositorNewSharedBufferResponse const&)
 t CVRMsg_CompositorNewSharedBufferResponse::CVRMsg_CompositorNewSharedBufferResponse(CVRMsg_CompositorNewSharedBufferResponse const&) [clone .cold]
 t CVRMsg_CompositorNewSharedBufferResponse::Clear()
 t CVRMsg_CompositorNewSharedBufferResponse::CopyFrom(CVRMsg_CompositorNewSharedBufferResponse const&)
 t CVRMsg_CompositorNewSharedBufferResponse::GetCachedSize() const
 t CVRMsg_CompositorNewSharedBufferResponse::GetMetadata() const
 t CVRMsg_CompositorNewSharedBufferResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorNewSharedBufferResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorNewSharedBufferResponse::IsInitialized() const
 t CVRMsg_CompositorNewSharedBufferResponse::MergeFrom(CVRMsg_CompositorNewSharedBufferResponse const&)
 t CVRMsg_CompositorNewSharedBufferResponse::MergeFrom(CVRMsg_CompositorNewSharedBufferResponse const&) [clone .cold]
 t CVRMsg_CompositorNewSharedBufferResponse::New() const
 t CVRMsg_CompositorNewSharedBufferResponse::New() const [clone .cold]
 t CVRMsg_CompositorNewSharedBufferResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorNewSharedBufferResponse::SetCachedSize(int) const
 t CVRMsg_CompositorNewSharedBufferResponse::SharedCtor()
 t CVRMsg_CompositorNewSharedBufferResponse::SharedDtor()
 t CVRMsg_CompositorNewSharedBufferResponse::Swap(CVRMsg_CompositorNewSharedBufferResponse*)
 t CVRMsg_CompositorNewSharedBufferResponse::default_instance()
 t CVRMsg_CompositorNewSharedBufferResponse::descriptor()
 t CVRMsg_CompositorNewSharedBufferResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorNewSharedBufferResponse::~CVRMsg_CompositorNewSharedBufferResponse()
 t CVRMsg_CompositorNewSharedImage::ByteSize() const
 t CVRMsg_CompositorNewSharedImage::CVRMsg_CompositorNewSharedImage()
 t CVRMsg_CompositorNewSharedImage::CVRMsg_CompositorNewSharedImage() [clone .cold]
 t CVRMsg_CompositorNewSharedImage::CVRMsg_CompositorNewSharedImage(CVRMsg_CompositorNewSharedImage const&)
 t CVRMsg_CompositorNewSharedImage::CVRMsg_CompositorNewSharedImage(CVRMsg_CompositorNewSharedImage const&) [clone .cold]
 t CVRMsg_CompositorNewSharedImage::Clear()
 t CVRMsg_CompositorNewSharedImage::CopyFrom(CVRMsg_CompositorNewSharedImage const&)
 t CVRMsg_CompositorNewSharedImage::GetCachedSize() const
 t CVRMsg_CompositorNewSharedImage::GetMetadata() const
 t CVRMsg_CompositorNewSharedImage::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorNewSharedImage::InitAsDefaultInstance()
 t CVRMsg_CompositorNewSharedImage::IsInitialized() const
 t CVRMsg_CompositorNewSharedImage::MergeFrom(CVRMsg_CompositorNewSharedImage const&)
 t CVRMsg_CompositorNewSharedImage::MergeFrom(CVRMsg_CompositorNewSharedImage const&) [clone .cold]
 t CVRMsg_CompositorNewSharedImage::New() const
 t CVRMsg_CompositorNewSharedImage::New() const [clone .cold]
 t CVRMsg_CompositorNewSharedImage::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorNewSharedImage::SetCachedSize(int) const
 t CVRMsg_CompositorNewSharedImage::SharedCtor()
 t CVRMsg_CompositorNewSharedImage::SharedDtor()
 t CVRMsg_CompositorNewSharedImage::Swap(CVRMsg_CompositorNewSharedImage*)
 t CVRMsg_CompositorNewSharedImage::default_instance()
 t CVRMsg_CompositorNewSharedImage::descriptor()
 t CVRMsg_CompositorNewSharedImage::descriptor() [clone .cold]
 t CVRMsg_CompositorNewSharedImage::~CVRMsg_CompositorNewSharedImage()
 t CVRMsg_CompositorNewSharedImageResponse::ByteSize() const
 t CVRMsg_CompositorNewSharedImageResponse::CVRMsg_CompositorNewSharedImageResponse()
 t CVRMsg_CompositorNewSharedImageResponse::CVRMsg_CompositorNewSharedImageResponse() [clone .cold]
 t CVRMsg_CompositorNewSharedImageResponse::CVRMsg_CompositorNewSharedImageResponse(CVRMsg_CompositorNewSharedImageResponse const&)
 t CVRMsg_CompositorNewSharedImageResponse::CVRMsg_CompositorNewSharedImageResponse(CVRMsg_CompositorNewSharedImageResponse const&) [clone .cold]
 t CVRMsg_CompositorNewSharedImageResponse::Clear()
 t CVRMsg_CompositorNewSharedImageResponse::CopyFrom(CVRMsg_CompositorNewSharedImageResponse const&)
 t CVRMsg_CompositorNewSharedImageResponse::GetCachedSize() const
 t CVRMsg_CompositorNewSharedImageResponse::GetMetadata() const
 t CVRMsg_CompositorNewSharedImageResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorNewSharedImageResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorNewSharedImageResponse::IsInitialized() const
 t CVRMsg_CompositorNewSharedImageResponse::MergeFrom(CVRMsg_CompositorNewSharedImageResponse const&)
 t CVRMsg_CompositorNewSharedImageResponse::MergeFrom(CVRMsg_CompositorNewSharedImageResponse const&) [clone .cold]
 t CVRMsg_CompositorNewSharedImageResponse::New() const
 t CVRMsg_CompositorNewSharedImageResponse::New() const [clone .cold]
 t CVRMsg_CompositorNewSharedImageResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorNewSharedImageResponse::SetCachedSize(int) const
 t CVRMsg_CompositorNewSharedImageResponse::SharedCtor()
 t CVRMsg_CompositorNewSharedImageResponse::SharedDtor()
 t CVRMsg_CompositorNewSharedImageResponse::Swap(CVRMsg_CompositorNewSharedImageResponse*)
 t CVRMsg_CompositorNewSharedImageResponse::default_instance()
 t CVRMsg_CompositorNewSharedImageResponse::descriptor()
 t CVRMsg_CompositorNewSharedImageResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorNewSharedImageResponse::~CVRMsg_CompositorNewSharedImageResponse()
 t CVRMsg_CompositorNewSharedSemaphore::ByteSize() const
 t CVRMsg_CompositorNewSharedSemaphore::CVRMsg_CompositorNewSharedSemaphore()
 t CVRMsg_CompositorNewSharedSemaphore::CVRMsg_CompositorNewSharedSemaphore() [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphore::CVRMsg_CompositorNewSharedSemaphore(CVRMsg_CompositorNewSharedSemaphore const&)
 t CVRMsg_CompositorNewSharedSemaphore::CVRMsg_CompositorNewSharedSemaphore(CVRMsg_CompositorNewSharedSemaphore const&) [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphore::Clear()
 t CVRMsg_CompositorNewSharedSemaphore::CopyFrom(CVRMsg_CompositorNewSharedSemaphore const&)
 t CVRMsg_CompositorNewSharedSemaphore::GetCachedSize() const
 t CVRMsg_CompositorNewSharedSemaphore::GetMetadata() const
 t CVRMsg_CompositorNewSharedSemaphore::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphore::InitAsDefaultInstance()
 t CVRMsg_CompositorNewSharedSemaphore::IsInitialized() const
 t CVRMsg_CompositorNewSharedSemaphore::MergeFrom(CVRMsg_CompositorNewSharedSemaphore const&)
 t CVRMsg_CompositorNewSharedSemaphore::MergeFrom(CVRMsg_CompositorNewSharedSemaphore const&) [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphore::New() const
 t CVRMsg_CompositorNewSharedSemaphore::New() const [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphore::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorNewSharedSemaphore::SetCachedSize(int) const
 t CVRMsg_CompositorNewSharedSemaphore::SharedCtor()
 t CVRMsg_CompositorNewSharedSemaphore::SharedDtor()
 t CVRMsg_CompositorNewSharedSemaphore::Swap(CVRMsg_CompositorNewSharedSemaphore*)
 t CVRMsg_CompositorNewSharedSemaphore::default_instance()
 t CVRMsg_CompositorNewSharedSemaphore::descriptor()
 t CVRMsg_CompositorNewSharedSemaphore::descriptor() [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphore::~CVRMsg_CompositorNewSharedSemaphore()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::ByteSize() const
 t CVRMsg_CompositorNewSharedSemaphoreResponse::CVRMsg_CompositorNewSharedSemaphoreResponse()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::CVRMsg_CompositorNewSharedSemaphoreResponse() [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphoreResponse::CVRMsg_CompositorNewSharedSemaphoreResponse(CVRMsg_CompositorNewSharedSemaphoreResponse const&)
 t CVRMsg_CompositorNewSharedSemaphoreResponse::CVRMsg_CompositorNewSharedSemaphoreResponse(CVRMsg_CompositorNewSharedSemaphoreResponse const&) [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphoreResponse::Clear()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::CopyFrom(CVRMsg_CompositorNewSharedSemaphoreResponse const&)
 t CVRMsg_CompositorNewSharedSemaphoreResponse::GetCachedSize() const
 t CVRMsg_CompositorNewSharedSemaphoreResponse::GetMetadata() const
 t CVRMsg_CompositorNewSharedSemaphoreResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphoreResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::IsInitialized() const
 t CVRMsg_CompositorNewSharedSemaphoreResponse::MergeFrom(CVRMsg_CompositorNewSharedSemaphoreResponse const&)
 t CVRMsg_CompositorNewSharedSemaphoreResponse::MergeFrom(CVRMsg_CompositorNewSharedSemaphoreResponse const&) [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphoreResponse::New() const
 t CVRMsg_CompositorNewSharedSemaphoreResponse::New() const [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphoreResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorNewSharedSemaphoreResponse::SetCachedSize(int) const
 t CVRMsg_CompositorNewSharedSemaphoreResponse::SharedCtor()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::SharedDtor()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::Swap(CVRMsg_CompositorNewSharedSemaphoreResponse*)
 t CVRMsg_CompositorNewSharedSemaphoreResponse::default_instance()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::descriptor()
 t CVRMsg_CompositorNewSharedSemaphoreResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorNewSharedSemaphoreResponse::~CVRMsg_CompositorNewSharedSemaphoreResponse()
 t CVRMsg_CompositorQuit::ByteSize() const
 t CVRMsg_CompositorQuit::CVRMsg_CompositorQuit()
 t CVRMsg_CompositorQuit::CVRMsg_CompositorQuit() [clone .cold]
 t CVRMsg_CompositorQuit::CVRMsg_CompositorQuit(CVRMsg_CompositorQuit const&)
 t CVRMsg_CompositorQuit::CVRMsg_CompositorQuit(CVRMsg_CompositorQuit const&) [clone .cold]
 t CVRMsg_CompositorQuit::Clear()
 t CVRMsg_CompositorQuit::CopyFrom(CVRMsg_CompositorQuit const&)
 t CVRMsg_CompositorQuit::GetCachedSize() const
 t CVRMsg_CompositorQuit::GetMetadata() const
 t CVRMsg_CompositorQuit::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorQuit::InitAsDefaultInstance()
 t CVRMsg_CompositorQuit::IsInitialized() const
 t CVRMsg_CompositorQuit::MergeFrom(CVRMsg_CompositorQuit const&)
 t CVRMsg_CompositorQuit::MergeFrom(CVRMsg_CompositorQuit const&) [clone .cold]
 t CVRMsg_CompositorQuit::New() const
 t CVRMsg_CompositorQuit::New() const [clone .cold]
 t CVRMsg_CompositorQuit::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorQuit::SetCachedSize(int) const
 t CVRMsg_CompositorQuit::SharedCtor()
 t CVRMsg_CompositorQuit::SharedDtor()
 t CVRMsg_CompositorQuit::Swap(CVRMsg_CompositorQuit*)
 t CVRMsg_CompositorQuit::default_instance()
 t CVRMsg_CompositorQuit::descriptor()
 t CVRMsg_CompositorQuit::descriptor() [clone .cold]
 t CVRMsg_CompositorQuit::~CVRMsg_CompositorQuit()
 t CVRMsg_CompositorRefSharedResource::ByteSize() const
 t CVRMsg_CompositorRefSharedResource::CVRMsg_CompositorRefSharedResource()
 t CVRMsg_CompositorRefSharedResource::CVRMsg_CompositorRefSharedResource() [clone .cold]
 t CVRMsg_CompositorRefSharedResource::CVRMsg_CompositorRefSharedResource(CVRMsg_CompositorRefSharedResource const&)
 t CVRMsg_CompositorRefSharedResource::CVRMsg_CompositorRefSharedResource(CVRMsg_CompositorRefSharedResource const&) [clone .cold]
 t CVRMsg_CompositorRefSharedResource::Clear()
 t CVRMsg_CompositorRefSharedResource::CopyFrom(CVRMsg_CompositorRefSharedResource const&)
 t CVRMsg_CompositorRefSharedResource::GetCachedSize() const
 t CVRMsg_CompositorRefSharedResource::GetMetadata() const
 t CVRMsg_CompositorRefSharedResource::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorRefSharedResource::InitAsDefaultInstance()
 t CVRMsg_CompositorRefSharedResource::IsInitialized() const
 t CVRMsg_CompositorRefSharedResource::MergeFrom(CVRMsg_CompositorRefSharedResource const&)
 t CVRMsg_CompositorRefSharedResource::MergeFrom(CVRMsg_CompositorRefSharedResource const&) [clone .cold]
 t CVRMsg_CompositorRefSharedResource::New() const
 t CVRMsg_CompositorRefSharedResource::New() const [clone .cold]
 t CVRMsg_CompositorRefSharedResource::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorRefSharedResource::SetCachedSize(int) const
 t CVRMsg_CompositorRefSharedResource::SharedCtor()
 t CVRMsg_CompositorRefSharedResource::SharedDtor()
 t CVRMsg_CompositorRefSharedResource::Swap(CVRMsg_CompositorRefSharedResource*)
 t CVRMsg_CompositorRefSharedResource::default_instance()
 t CVRMsg_CompositorRefSharedResource::descriptor()
 t CVRMsg_CompositorRefSharedResource::descriptor() [clone .cold]
 t CVRMsg_CompositorRefSharedResource::~CVRMsg_CompositorRefSharedResource()
 t CVRMsg_CompositorRefSharedResourceResponse::ByteSize() const
 t CVRMsg_CompositorRefSharedResourceResponse::CVRMsg_CompositorRefSharedResourceResponse()
 t CVRMsg_CompositorRefSharedResourceResponse::CVRMsg_CompositorRefSharedResourceResponse() [clone .cold]
 t CVRMsg_CompositorRefSharedResourceResponse::CVRMsg_CompositorRefSharedResourceResponse(CVRMsg_CompositorRefSharedResourceResponse const&)
 t CVRMsg_CompositorRefSharedResourceResponse::CVRMsg_CompositorRefSharedResourceResponse(CVRMsg_CompositorRefSharedResourceResponse const&) [clone .cold]
 t CVRMsg_CompositorRefSharedResourceResponse::Clear()
 t CVRMsg_CompositorRefSharedResourceResponse::CopyFrom(CVRMsg_CompositorRefSharedResourceResponse const&)
 t CVRMsg_CompositorRefSharedResourceResponse::GetCachedSize() const
 t CVRMsg_CompositorRefSharedResourceResponse::GetMetadata() const
 t CVRMsg_CompositorRefSharedResourceResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorRefSharedResourceResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorRefSharedResourceResponse::IsInitialized() const
 t CVRMsg_CompositorRefSharedResourceResponse::MergeFrom(CVRMsg_CompositorRefSharedResourceResponse const&)
 t CVRMsg_CompositorRefSharedResourceResponse::MergeFrom(CVRMsg_CompositorRefSharedResourceResponse const&) [clone .cold]
 t CVRMsg_CompositorRefSharedResourceResponse::New() const
 t CVRMsg_CompositorRefSharedResourceResponse::New() const [clone .cold]
 t CVRMsg_CompositorRefSharedResourceResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorRefSharedResourceResponse::SetCachedSize(int) const
 t CVRMsg_CompositorRefSharedResourceResponse::SharedCtor()
 t CVRMsg_CompositorRefSharedResourceResponse::SharedDtor()
 t CVRMsg_CompositorRefSharedResourceResponse::Swap(CVRMsg_CompositorRefSharedResourceResponse*)
 t CVRMsg_CompositorRefSharedResourceResponse::default_instance()
 t CVRMsg_CompositorRefSharedResourceResponse::descriptor()
 t CVRMsg_CompositorRefSharedResourceResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorRefSharedResourceResponse::~CVRMsg_CompositorRefSharedResourceResponse()
 t CVRMsg_CompositorRequestScreenshot::ByteSize() const
 t CVRMsg_CompositorRequestScreenshot::CVRMsg_CompositorRequestScreenshot()
 t CVRMsg_CompositorRequestScreenshot::CVRMsg_CompositorRequestScreenshot() [clone .cold]
 t CVRMsg_CompositorRequestScreenshot::CVRMsg_CompositorRequestScreenshot(CVRMsg_CompositorRequestScreenshot const&)
 t CVRMsg_CompositorRequestScreenshot::CVRMsg_CompositorRequestScreenshot(CVRMsg_CompositorRequestScreenshot const&) [clone .cold]
 t CVRMsg_CompositorRequestScreenshot::Clear()
 t CVRMsg_CompositorRequestScreenshot::CopyFrom(CVRMsg_CompositorRequestScreenshot const&)
 t CVRMsg_CompositorRequestScreenshot::GetCachedSize() const
 t CVRMsg_CompositorRequestScreenshot::GetMetadata() const
 t CVRMsg_CompositorRequestScreenshot::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorRequestScreenshot::InitAsDefaultInstance()
 t CVRMsg_CompositorRequestScreenshot::IsInitialized() const
 t CVRMsg_CompositorRequestScreenshot::MergeFrom(CVRMsg_CompositorRequestScreenshot const&)
 t CVRMsg_CompositorRequestScreenshot::MergeFrom(CVRMsg_CompositorRequestScreenshot const&) [clone .cold]
 t CVRMsg_CompositorRequestScreenshot::New() const
 t CVRMsg_CompositorRequestScreenshot::New() const [clone .cold]
 t CVRMsg_CompositorRequestScreenshot::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorRequestScreenshot::SetCachedSize(int) const
 t CVRMsg_CompositorRequestScreenshot::SharedCtor()
 t CVRMsg_CompositorRequestScreenshot::SharedCtor() [clone .cold]
 t CVRMsg_CompositorRequestScreenshot::SharedDtor()
 t CVRMsg_CompositorRequestScreenshot::Swap(CVRMsg_CompositorRequestScreenshot*)
 t CVRMsg_CompositorRequestScreenshot::default_instance()
 t CVRMsg_CompositorRequestScreenshot::descriptor()
 t CVRMsg_CompositorRequestScreenshot::descriptor() [clone .cold]
 t CVRMsg_CompositorRequestScreenshot::mutable_filename()
 t CVRMsg_CompositorRequestScreenshot::mutable_vr_filename()
 t CVRMsg_CompositorRequestScreenshot::release_filename()
 t CVRMsg_CompositorRequestScreenshot::release_vr_filename()
 t CVRMsg_CompositorRequestScreenshot::set_allocated_filename(std::string*)
 t CVRMsg_CompositorRequestScreenshot::set_allocated_vr_filename(std::string*)
 t CVRMsg_CompositorRequestScreenshot::set_filename(char const*)
 t CVRMsg_CompositorRequestScreenshot::set_filename(char const*, unsigned long)
 t CVRMsg_CompositorRequestScreenshot::set_filename(std::string const&)
 t CVRMsg_CompositorRequestScreenshot::set_vr_filename(char const*)
 t CVRMsg_CompositorRequestScreenshot::set_vr_filename(char const*, unsigned long)
 t CVRMsg_CompositorRequestScreenshot::set_vr_filename(std::string const&)
 t CVRMsg_CompositorRequestScreenshot::~CVRMsg_CompositorRequestScreenshot()
 t CVRMsg_CompositorRequestScreenshotResponse::ByteSize() const
 t CVRMsg_CompositorRequestScreenshotResponse::CVRMsg_CompositorRequestScreenshotResponse()
 t CVRMsg_CompositorRequestScreenshotResponse::CVRMsg_CompositorRequestScreenshotResponse() [clone .cold]
 t CVRMsg_CompositorRequestScreenshotResponse::CVRMsg_CompositorRequestScreenshotResponse(CVRMsg_CompositorRequestScreenshotResponse const&)
 t CVRMsg_CompositorRequestScreenshotResponse::CVRMsg_CompositorRequestScreenshotResponse(CVRMsg_CompositorRequestScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorRequestScreenshotResponse::Clear()
 t CVRMsg_CompositorRequestScreenshotResponse::CopyFrom(CVRMsg_CompositorRequestScreenshotResponse const&)
 t CVRMsg_CompositorRequestScreenshotResponse::GetCachedSize() const
 t CVRMsg_CompositorRequestScreenshotResponse::GetMetadata() const
 t CVRMsg_CompositorRequestScreenshotResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorRequestScreenshotResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorRequestScreenshotResponse::IsInitialized() const
 t CVRMsg_CompositorRequestScreenshotResponse::MergeFrom(CVRMsg_CompositorRequestScreenshotResponse const&)
 t CVRMsg_CompositorRequestScreenshotResponse::MergeFrom(CVRMsg_CompositorRequestScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorRequestScreenshotResponse::New() const
 t CVRMsg_CompositorRequestScreenshotResponse::New() const [clone .cold]
 t CVRMsg_CompositorRequestScreenshotResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorRequestScreenshotResponse::SetCachedSize(int) const
 t CVRMsg_CompositorRequestScreenshotResponse::SharedCtor()
 t CVRMsg_CompositorRequestScreenshotResponse::SharedDtor()
 t CVRMsg_CompositorRequestScreenshotResponse::Swap(CVRMsg_CompositorRequestScreenshotResponse*)
 t CVRMsg_CompositorRequestScreenshotResponse::default_instance()
 t CVRMsg_CompositorRequestScreenshotResponse::descriptor()
 t CVRMsg_CompositorRequestScreenshotResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorRequestScreenshotResponse::~CVRMsg_CompositorRequestScreenshotResponse()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::ByteSize() const
 t CVRMsg_CompositorSetDashboardVisibilityResponse::CVRMsg_CompositorSetDashboardVisibilityResponse()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::CVRMsg_CompositorSetDashboardVisibilityResponse() [clone .cold]
 t CVRMsg_CompositorSetDashboardVisibilityResponse::CVRMsg_CompositorSetDashboardVisibilityResponse(CVRMsg_CompositorSetDashboardVisibilityResponse const&)
 t CVRMsg_CompositorSetDashboardVisibilityResponse::CVRMsg_CompositorSetDashboardVisibilityResponse(CVRMsg_CompositorSetDashboardVisibilityResponse const&) [clone .cold]
 t CVRMsg_CompositorSetDashboardVisibilityResponse::Clear()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::CopyFrom(CVRMsg_CompositorSetDashboardVisibilityResponse const&)
 t CVRMsg_CompositorSetDashboardVisibilityResponse::GetCachedSize() const
 t CVRMsg_CompositorSetDashboardVisibilityResponse::GetMetadata() const
 t CVRMsg_CompositorSetDashboardVisibilityResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorSetDashboardVisibilityResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::IsInitialized() const
 t CVRMsg_CompositorSetDashboardVisibilityResponse::MergeFrom(CVRMsg_CompositorSetDashboardVisibilityResponse const&)
 t CVRMsg_CompositorSetDashboardVisibilityResponse::MergeFrom(CVRMsg_CompositorSetDashboardVisibilityResponse const&) [clone .cold]
 t CVRMsg_CompositorSetDashboardVisibilityResponse::New() const
 t CVRMsg_CompositorSetDashboardVisibilityResponse::New() const [clone .cold]
 t CVRMsg_CompositorSetDashboardVisibilityResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorSetDashboardVisibilityResponse::SetCachedSize(int) const
 t CVRMsg_CompositorSetDashboardVisibilityResponse::SharedCtor()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::SharedDtor()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::Swap(CVRMsg_CompositorSetDashboardVisibilityResponse*)
 t CVRMsg_CompositorSetDashboardVisibilityResponse::default_instance()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::descriptor()
 t CVRMsg_CompositorSetDashboardVisibilityResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorSetDashboardVisibilityResponse::~CVRMsg_CompositorSetDashboardVisibilityResponse()
 t CVRMsg_CompositorSubmitScreenshot::ByteSize() const
 t CVRMsg_CompositorSubmitScreenshot::CVRMsg_CompositorSubmitScreenshot()
 t CVRMsg_CompositorSubmitScreenshot::CVRMsg_CompositorSubmitScreenshot() [clone .cold]
 t CVRMsg_CompositorSubmitScreenshot::CVRMsg_CompositorSubmitScreenshot(CVRMsg_CompositorSubmitScreenshot const&)
 t CVRMsg_CompositorSubmitScreenshot::CVRMsg_CompositorSubmitScreenshot(CVRMsg_CompositorSubmitScreenshot const&) [clone .cold]
 t CVRMsg_CompositorSubmitScreenshot::Clear()
 t CVRMsg_CompositorSubmitScreenshot::CopyFrom(CVRMsg_CompositorSubmitScreenshot const&)
 t CVRMsg_CompositorSubmitScreenshot::GetCachedSize() const
 t CVRMsg_CompositorSubmitScreenshot::GetMetadata() const
 t CVRMsg_CompositorSubmitScreenshot::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorSubmitScreenshot::InitAsDefaultInstance()
 t CVRMsg_CompositorSubmitScreenshot::IsInitialized() const
 t CVRMsg_CompositorSubmitScreenshot::MergeFrom(CVRMsg_CompositorSubmitScreenshot const&)
 t CVRMsg_CompositorSubmitScreenshot::MergeFrom(CVRMsg_CompositorSubmitScreenshot const&) [clone .cold]
 t CVRMsg_CompositorSubmitScreenshot::New() const
 t CVRMsg_CompositorSubmitScreenshot::New() const [clone .cold]
 t CVRMsg_CompositorSubmitScreenshot::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorSubmitScreenshot::SetCachedSize(int) const
 t CVRMsg_CompositorSubmitScreenshot::SharedCtor()
 t CVRMsg_CompositorSubmitScreenshot::SharedCtor() [clone .cold]
 t CVRMsg_CompositorSubmitScreenshot::SharedDtor()
 t CVRMsg_CompositorSubmitScreenshot::Swap(CVRMsg_CompositorSubmitScreenshot*)
 t CVRMsg_CompositorSubmitScreenshot::default_instance()
 t CVRMsg_CompositorSubmitScreenshot::descriptor()
 t CVRMsg_CompositorSubmitScreenshot::descriptor() [clone .cold]
 t CVRMsg_CompositorSubmitScreenshot::mutable_filename()
 t CVRMsg_CompositorSubmitScreenshot::mutable_vr_filename()
 t CVRMsg_CompositorSubmitScreenshot::release_filename()
 t CVRMsg_CompositorSubmitScreenshot::release_vr_filename()
 t CVRMsg_CompositorSubmitScreenshot::set_allocated_filename(std::string*)
 t CVRMsg_CompositorSubmitScreenshot::set_allocated_vr_filename(std::string*)
 t CVRMsg_CompositorSubmitScreenshot::set_filename(char const*)
 t CVRMsg_CompositorSubmitScreenshot::set_filename(char const*, unsigned long)
 t CVRMsg_CompositorSubmitScreenshot::set_filename(std::string const&)
 t CVRMsg_CompositorSubmitScreenshot::set_vr_filename(char const*)
 t CVRMsg_CompositorSubmitScreenshot::set_vr_filename(char const*, unsigned long)
 t CVRMsg_CompositorSubmitScreenshot::set_vr_filename(std::string const&)
 t CVRMsg_CompositorSubmitScreenshot::~CVRMsg_CompositorSubmitScreenshot()
 t CVRMsg_CompositorSubmitScreenshotResponse::ByteSize() const
 t CVRMsg_CompositorSubmitScreenshotResponse::CVRMsg_CompositorSubmitScreenshotResponse()
 t CVRMsg_CompositorSubmitScreenshotResponse::CVRMsg_CompositorSubmitScreenshotResponse() [clone .cold]
 t CVRMsg_CompositorSubmitScreenshotResponse::CVRMsg_CompositorSubmitScreenshotResponse(CVRMsg_CompositorSubmitScreenshotResponse const&)
 t CVRMsg_CompositorSubmitScreenshotResponse::CVRMsg_CompositorSubmitScreenshotResponse(CVRMsg_CompositorSubmitScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorSubmitScreenshotResponse::Clear()
 t CVRMsg_CompositorSubmitScreenshotResponse::CopyFrom(CVRMsg_CompositorSubmitScreenshotResponse const&)
 t CVRMsg_CompositorSubmitScreenshotResponse::GetCachedSize() const
 t CVRMsg_CompositorSubmitScreenshotResponse::GetMetadata() const
 t CVRMsg_CompositorSubmitScreenshotResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorSubmitScreenshotResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorSubmitScreenshotResponse::IsInitialized() const
 t CVRMsg_CompositorSubmitScreenshotResponse::MergeFrom(CVRMsg_CompositorSubmitScreenshotResponse const&)
 t CVRMsg_CompositorSubmitScreenshotResponse::MergeFrom(CVRMsg_CompositorSubmitScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorSubmitScreenshotResponse::New() const
 t CVRMsg_CompositorSubmitScreenshotResponse::New() const [clone .cold]
 t CVRMsg_CompositorSubmitScreenshotResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorSubmitScreenshotResponse::SetCachedSize(int) const
 t CVRMsg_CompositorSubmitScreenshotResponse::SharedCtor()
 t CVRMsg_CompositorSubmitScreenshotResponse::SharedDtor()
 t CVRMsg_CompositorSubmitScreenshotResponse::Swap(CVRMsg_CompositorSubmitScreenshotResponse*)
 t CVRMsg_CompositorSubmitScreenshotResponse::default_instance()
 t CVRMsg_CompositorSubmitScreenshotResponse::descriptor()
 t CVRMsg_CompositorSubmitScreenshotResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorSubmitScreenshotResponse::~CVRMsg_CompositorSubmitScreenshotResponse()
 t CVRMsg_CompositorTakeStereoScreenshot::ByteSize() const
 t CVRMsg_CompositorTakeStereoScreenshot::CVRMsg_CompositorTakeStereoScreenshot()
 t CVRMsg_CompositorTakeStereoScreenshot::CVRMsg_CompositorTakeStereoScreenshot() [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshot::CVRMsg_CompositorTakeStereoScreenshot(CVRMsg_CompositorTakeStereoScreenshot const&)
 t CVRMsg_CompositorTakeStereoScreenshot::CVRMsg_CompositorTakeStereoScreenshot(CVRMsg_CompositorTakeStereoScreenshot const&) [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshot::Clear()
 t CVRMsg_CompositorTakeStereoScreenshot::CopyFrom(CVRMsg_CompositorTakeStereoScreenshot const&)
 t CVRMsg_CompositorTakeStereoScreenshot::GetCachedSize() const
 t CVRMsg_CompositorTakeStereoScreenshot::GetMetadata() const
 t CVRMsg_CompositorTakeStereoScreenshot::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshot::InitAsDefaultInstance()
 t CVRMsg_CompositorTakeStereoScreenshot::IsInitialized() const
 t CVRMsg_CompositorTakeStereoScreenshot::MergeFrom(CVRMsg_CompositorTakeStereoScreenshot const&)
 t CVRMsg_CompositorTakeStereoScreenshot::MergeFrom(CVRMsg_CompositorTakeStereoScreenshot const&) [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshot::New() const
 t CVRMsg_CompositorTakeStereoScreenshot::New() const [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshot::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorTakeStereoScreenshot::SetCachedSize(int) const
 t CVRMsg_CompositorTakeStereoScreenshot::SharedCtor()
 t CVRMsg_CompositorTakeStereoScreenshot::SharedCtor() [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshot::SharedDtor()
 t CVRMsg_CompositorTakeStereoScreenshot::Swap(CVRMsg_CompositorTakeStereoScreenshot*)
 t CVRMsg_CompositorTakeStereoScreenshot::default_instance()
 t CVRMsg_CompositorTakeStereoScreenshot::descriptor()
 t CVRMsg_CompositorTakeStereoScreenshot::descriptor() [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshot::mutable_filename()
 t CVRMsg_CompositorTakeStereoScreenshot::mutable_vr_filename()
 t CVRMsg_CompositorTakeStereoScreenshot::release_filename()
 t CVRMsg_CompositorTakeStereoScreenshot::release_vr_filename()
 t CVRMsg_CompositorTakeStereoScreenshot::set_allocated_filename(std::string*)
 t CVRMsg_CompositorTakeStereoScreenshot::set_allocated_vr_filename(std::string*)
 t CVRMsg_CompositorTakeStereoScreenshot::set_filename(char const*)
 t CVRMsg_CompositorTakeStereoScreenshot::set_filename(char const*, unsigned long)
 t CVRMsg_CompositorTakeStereoScreenshot::set_filename(std::string const&)
 t CVRMsg_CompositorTakeStereoScreenshot::set_vr_filename(char const*)
 t CVRMsg_CompositorTakeStereoScreenshot::set_vr_filename(char const*, unsigned long)
 t CVRMsg_CompositorTakeStereoScreenshot::set_vr_filename(std::string const&)
 t CVRMsg_CompositorTakeStereoScreenshot::~CVRMsg_CompositorTakeStereoScreenshot()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::ByteSize() const
 t CVRMsg_CompositorTakeStereoScreenshotResponse::CVRMsg_CompositorTakeStereoScreenshotResponse()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::CVRMsg_CompositorTakeStereoScreenshotResponse() [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshotResponse::CVRMsg_CompositorTakeStereoScreenshotResponse(CVRMsg_CompositorTakeStereoScreenshotResponse const&)
 t CVRMsg_CompositorTakeStereoScreenshotResponse::CVRMsg_CompositorTakeStereoScreenshotResponse(CVRMsg_CompositorTakeStereoScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshotResponse::Clear()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::CopyFrom(CVRMsg_CompositorTakeStereoScreenshotResponse const&)
 t CVRMsg_CompositorTakeStereoScreenshotResponse::GetCachedSize() const
 t CVRMsg_CompositorTakeStereoScreenshotResponse::GetMetadata() const
 t CVRMsg_CompositorTakeStereoScreenshotResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshotResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::IsInitialized() const
 t CVRMsg_CompositorTakeStereoScreenshotResponse::MergeFrom(CVRMsg_CompositorTakeStereoScreenshotResponse const&)
 t CVRMsg_CompositorTakeStereoScreenshotResponse::MergeFrom(CVRMsg_CompositorTakeStereoScreenshotResponse const&) [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshotResponse::New() const
 t CVRMsg_CompositorTakeStereoScreenshotResponse::New() const [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshotResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorTakeStereoScreenshotResponse::SetCachedSize(int) const
 t CVRMsg_CompositorTakeStereoScreenshotResponse::SharedCtor()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::SharedDtor()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::Swap(CVRMsg_CompositorTakeStereoScreenshotResponse*)
 t CVRMsg_CompositorTakeStereoScreenshotResponse::default_instance()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::descriptor()
 t CVRMsg_CompositorTakeStereoScreenshotResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorTakeStereoScreenshotResponse::~CVRMsg_CompositorTakeStereoScreenshotResponse()
 t CVRMsg_CompositorUnrefSharedResource::ByteSize() const
 t CVRMsg_CompositorUnrefSharedResource::CVRMsg_CompositorUnrefSharedResource()
 t CVRMsg_CompositorUnrefSharedResource::CVRMsg_CompositorUnrefSharedResource() [clone .cold]
 t CVRMsg_CompositorUnrefSharedResource::CVRMsg_CompositorUnrefSharedResource(CVRMsg_CompositorUnrefSharedResource const&)
 t CVRMsg_CompositorUnrefSharedResource::CVRMsg_CompositorUnrefSharedResource(CVRMsg_CompositorUnrefSharedResource const&) [clone .cold]
 t CVRMsg_CompositorUnrefSharedResource::Clear()
 t CVRMsg_CompositorUnrefSharedResource::CopyFrom(CVRMsg_CompositorUnrefSharedResource const&)
 t CVRMsg_CompositorUnrefSharedResource::GetCachedSize() const
 t CVRMsg_CompositorUnrefSharedResource::GetMetadata() const
 t CVRMsg_CompositorUnrefSharedResource::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorUnrefSharedResource::InitAsDefaultInstance()
 t CVRMsg_CompositorUnrefSharedResource::IsInitialized() const
 t CVRMsg_CompositorUnrefSharedResource::MergeFrom(CVRMsg_CompositorUnrefSharedResource const&)
 t CVRMsg_CompositorUnrefSharedResource::MergeFrom(CVRMsg_CompositorUnrefSharedResource const&) [clone .cold]
 t CVRMsg_CompositorUnrefSharedResource::New() const
 t CVRMsg_CompositorUnrefSharedResource::New() const [clone .cold]
 t CVRMsg_CompositorUnrefSharedResource::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorUnrefSharedResource::SetCachedSize(int) const
 t CVRMsg_CompositorUnrefSharedResource::SharedCtor()
 t CVRMsg_CompositorUnrefSharedResource::SharedDtor()
 t CVRMsg_CompositorUnrefSharedResource::Swap(CVRMsg_CompositorUnrefSharedResource*)
 t CVRMsg_CompositorUnrefSharedResource::default_instance()
 t CVRMsg_CompositorUnrefSharedResource::descriptor()
 t CVRMsg_CompositorUnrefSharedResource::descriptor() [clone .cold]
 t CVRMsg_CompositorUnrefSharedResource::~CVRMsg_CompositorUnrefSharedResource()
 t CVRMsg_CompositorUnrefSharedResourceResponse::ByteSize() const
 t CVRMsg_CompositorUnrefSharedResourceResponse::CVRMsg_CompositorUnrefSharedResourceResponse()
 t CVRMsg_CompositorUnrefSharedResourceResponse::CVRMsg_CompositorUnrefSharedResourceResponse() [clone .cold]
 t CVRMsg_CompositorUnrefSharedResourceResponse::CVRMsg_CompositorUnrefSharedResourceResponse(CVRMsg_CompositorUnrefSharedResourceResponse const&)
 t CVRMsg_CompositorUnrefSharedResourceResponse::CVRMsg_CompositorUnrefSharedResourceResponse(CVRMsg_CompositorUnrefSharedResourceResponse const&) [clone .cold]
 t CVRMsg_CompositorUnrefSharedResourceResponse::Clear()
 t CVRMsg_CompositorUnrefSharedResourceResponse::CopyFrom(CVRMsg_CompositorUnrefSharedResourceResponse const&)
 t CVRMsg_CompositorUnrefSharedResourceResponse::GetCachedSize() const
 t CVRMsg_CompositorUnrefSharedResourceResponse::GetMetadata() const
 t CVRMsg_CompositorUnrefSharedResourceResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorUnrefSharedResourceResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorUnrefSharedResourceResponse::IsInitialized() const
 t CVRMsg_CompositorUnrefSharedResourceResponse::MergeFrom(CVRMsg_CompositorUnrefSharedResourceResponse const&)
 t CVRMsg_CompositorUnrefSharedResourceResponse::MergeFrom(CVRMsg_CompositorUnrefSharedResourceResponse const&) [clone .cold]
 t CVRMsg_CompositorUnrefSharedResourceResponse::New() const
 t CVRMsg_CompositorUnrefSharedResourceResponse::New() const [clone .cold]
 t CVRMsg_CompositorUnrefSharedResourceResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorUnrefSharedResourceResponse::SetCachedSize(int) const
 t CVRMsg_CompositorUnrefSharedResourceResponse::SharedCtor()
 t CVRMsg_CompositorUnrefSharedResourceResponse::SharedDtor()
 t CVRMsg_CompositorUnrefSharedResourceResponse::Swap(CVRMsg_CompositorUnrefSharedResourceResponse*)
 t CVRMsg_CompositorUnrefSharedResourceResponse::default_instance()
 t CVRMsg_CompositorUnrefSharedResourceResponse::descriptor()
 t CVRMsg_CompositorUnrefSharedResourceResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorUnrefSharedResourceResponse::~CVRMsg_CompositorUnrefSharedResourceResponse()
 t CVRMsg_CompositorUpdateScreenshotProgress::ByteSize() const
 t CVRMsg_CompositorUpdateScreenshotProgress::CVRMsg_CompositorUpdateScreenshotProgress()
 t CVRMsg_CompositorUpdateScreenshotProgress::CVRMsg_CompositorUpdateScreenshotProgress() [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgress::CVRMsg_CompositorUpdateScreenshotProgress(CVRMsg_CompositorUpdateScreenshotProgress const&)
 t CVRMsg_CompositorUpdateScreenshotProgress::CVRMsg_CompositorUpdateScreenshotProgress(CVRMsg_CompositorUpdateScreenshotProgress const&) [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgress::Clear()
 t CVRMsg_CompositorUpdateScreenshotProgress::CopyFrom(CVRMsg_CompositorUpdateScreenshotProgress const&)
 t CVRMsg_CompositorUpdateScreenshotProgress::GetCachedSize() const
 t CVRMsg_CompositorUpdateScreenshotProgress::GetMetadata() const
 t CVRMsg_CompositorUpdateScreenshotProgress::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgress::InitAsDefaultInstance()
 t CVRMsg_CompositorUpdateScreenshotProgress::IsInitialized() const
 t CVRMsg_CompositorUpdateScreenshotProgress::MergeFrom(CVRMsg_CompositorUpdateScreenshotProgress const&)
 t CVRMsg_CompositorUpdateScreenshotProgress::MergeFrom(CVRMsg_CompositorUpdateScreenshotProgress const&) [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgress::New() const
 t CVRMsg_CompositorUpdateScreenshotProgress::New() const [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgress::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorUpdateScreenshotProgress::SetCachedSize(int) const
 t CVRMsg_CompositorUpdateScreenshotProgress::SharedCtor()
 t CVRMsg_CompositorUpdateScreenshotProgress::SharedDtor()
 t CVRMsg_CompositorUpdateScreenshotProgress::Swap(CVRMsg_CompositorUpdateScreenshotProgress*)
 t CVRMsg_CompositorUpdateScreenshotProgress::default_instance()
 t CVRMsg_CompositorUpdateScreenshotProgress::descriptor()
 t CVRMsg_CompositorUpdateScreenshotProgress::descriptor() [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgress::~CVRMsg_CompositorUpdateScreenshotProgress()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::ByteSize() const
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::CVRMsg_CompositorUpdateScreenshotProgressResponse()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::CVRMsg_CompositorUpdateScreenshotProgressResponse() [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::CVRMsg_CompositorUpdateScreenshotProgressResponse(CVRMsg_CompositorUpdateScreenshotProgressResponse const&)
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::CVRMsg_CompositorUpdateScreenshotProgressResponse(CVRMsg_CompositorUpdateScreenshotProgressResponse const&) [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::Clear()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::CopyFrom(CVRMsg_CompositorUpdateScreenshotProgressResponse const&)
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::GetCachedSize() const
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::GetMetadata() const
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::InitAsDefaultInstance()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::IsInitialized() const
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::MergeFrom(CVRMsg_CompositorUpdateScreenshotProgressResponse const&)
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::MergeFrom(CVRMsg_CompositorUpdateScreenshotProgressResponse const&) [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::New() const
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::New() const [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::SetCachedSize(int) const
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::SharedCtor()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::SharedDtor()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::Swap(CVRMsg_CompositorUpdateScreenshotProgressResponse*)
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::default_instance()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::descriptor()
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::descriptor() [clone .cold]
 t CVRMsg_CompositorUpdateScreenshotProgressResponse::~CVRMsg_CompositorUpdateScreenshotProgressResponse()
 t CVRMsg_ComputeDistortion::ByteSize() const
 t CVRMsg_ComputeDistortion::CVRMsg_ComputeDistortion()
 t CVRMsg_ComputeDistortion::CVRMsg_ComputeDistortion() [clone .cold]
 t CVRMsg_ComputeDistortion::CVRMsg_ComputeDistortion(CVRMsg_ComputeDistortion const&)
 t CVRMsg_ComputeDistortion::CVRMsg_ComputeDistortion(CVRMsg_ComputeDistortion const&) [clone .cold]
 t CVRMsg_ComputeDistortion::Clear()
 t CVRMsg_ComputeDistortion::CopyFrom(CVRMsg_ComputeDistortion const&)
 t CVRMsg_ComputeDistortion::GetCachedSize() const
 t CVRMsg_ComputeDistortion::GetMetadata() const
 t CVRMsg_ComputeDistortion::GetMetadata() const [clone .cold]
 t CVRMsg_ComputeDistortion::InitAsDefaultInstance()
 t CVRMsg_ComputeDistortion::IsInitialized() const
 t CVRMsg_ComputeDistortion::MergeFrom(CVRMsg_ComputeDistortion const&)
 t CVRMsg_ComputeDistortion::MergeFrom(CVRMsg_ComputeDistortion const&) [clone .cold]
 t CVRMsg_ComputeDistortion::New() const
 t CVRMsg_ComputeDistortion::New() const [clone .cold]
 t CVRMsg_ComputeDistortion::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ComputeDistortion::SetCachedSize(int) const
 t CVRMsg_ComputeDistortion::SharedCtor()
 t CVRMsg_ComputeDistortion::SharedDtor()
 t CVRMsg_ComputeDistortion::Swap(CVRMsg_ComputeDistortion*)
 t CVRMsg_ComputeDistortion::default_instance()
 t CVRMsg_ComputeDistortion::descriptor()
 t CVRMsg_ComputeDistortion::descriptor() [clone .cold]
 t CVRMsg_ComputeDistortion::~CVRMsg_ComputeDistortion()
 t CVRMsg_ComputeDistortionBatched::ByteSize() const
 t CVRMsg_ComputeDistortionBatched::CVRMsg_ComputeDistortionBatched()
 t CVRMsg_ComputeDistortionBatched::CVRMsg_ComputeDistortionBatched() [clone .cold]
 t CVRMsg_ComputeDistortionBatched::CVRMsg_ComputeDistortionBatched(CVRMsg_ComputeDistortionBatched const&)
 t CVRMsg_ComputeDistortionBatched::CVRMsg_ComputeDistortionBatched(CVRMsg_ComputeDistortionBatched const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatched::Clear()
 t CVRMsg_ComputeDistortionBatched::CopyFrom(CVRMsg_ComputeDistortionBatched const&)
 t CVRMsg_ComputeDistortionBatched::GetCachedSize() const
 t CVRMsg_ComputeDistortionBatched::GetMetadata() const
 t CVRMsg_ComputeDistortionBatched::GetMetadata() const [clone .cold]
 t CVRMsg_ComputeDistortionBatched::InitAsDefaultInstance()
 t CVRMsg_ComputeDistortionBatched::IsInitialized() const
 t CVRMsg_ComputeDistortionBatched::MergeFrom(CVRMsg_ComputeDistortionBatched const&)
 t CVRMsg_ComputeDistortionBatched::MergeFrom(CVRMsg_ComputeDistortionBatched const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatched::New() const
 t CVRMsg_ComputeDistortionBatched::New() const [clone .cold]
 t CVRMsg_ComputeDistortionBatched::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ComputeDistortionBatched::SetCachedSize(int) const
 t CVRMsg_ComputeDistortionBatched::SharedCtor()
 t CVRMsg_ComputeDistortionBatched::SharedDtor()
 t CVRMsg_ComputeDistortionBatched::Swap(CVRMsg_ComputeDistortionBatched*)
 t CVRMsg_ComputeDistortionBatched::default_instance()
 t CVRMsg_ComputeDistortionBatched::descriptor()
 t CVRMsg_ComputeDistortionBatched::descriptor() [clone .cold]
 t CVRMsg_ComputeDistortionBatched::~CVRMsg_ComputeDistortionBatched()
 t CVRMsg_ComputeDistortionBatchedResponse::ByteSize() const
 t CVRMsg_ComputeDistortionBatchedResponse::CVRMsg_ComputeDistortionBatchedResponse()
 t CVRMsg_ComputeDistortionBatchedResponse::CVRMsg_ComputeDistortionBatchedResponse() [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse::CVRMsg_ComputeDistortionBatchedResponse(CVRMsg_ComputeDistortionBatchedResponse const&)
 t CVRMsg_ComputeDistortionBatchedResponse::CVRMsg_ComputeDistortionBatchedResponse(CVRMsg_ComputeDistortionBatchedResponse const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse::Clear()
 t CVRMsg_ComputeDistortionBatchedResponse::CopyFrom(CVRMsg_ComputeDistortionBatchedResponse const&)
 t CVRMsg_ComputeDistortionBatchedResponse::GetCachedSize() const
 t CVRMsg_ComputeDistortionBatchedResponse::GetMetadata() const
 t CVRMsg_ComputeDistortionBatchedResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse::InitAsDefaultInstance()
 t CVRMsg_ComputeDistortionBatchedResponse::IsInitialized() const
 t CVRMsg_ComputeDistortionBatchedResponse::MergeFrom(CVRMsg_ComputeDistortionBatchedResponse const&)
 t CVRMsg_ComputeDistortionBatchedResponse::MergeFrom(CVRMsg_ComputeDistortionBatchedResponse const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse::New() const
 t CVRMsg_ComputeDistortionBatchedResponse::New() const [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ComputeDistortionBatchedResponse::SetCachedSize(int) const
 t CVRMsg_ComputeDistortionBatchedResponse::SharedCtor()
 t CVRMsg_ComputeDistortionBatchedResponse::SharedDtor()
 t CVRMsg_ComputeDistortionBatchedResponse::Swap(CVRMsg_ComputeDistortionBatchedResponse*)
 t CVRMsg_ComputeDistortionBatchedResponse::default_instance()
 t CVRMsg_ComputeDistortionBatchedResponse::descriptor()
 t CVRMsg_ComputeDistortionBatchedResponse::descriptor() [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse::~CVRMsg_ComputeDistortionBatchedResponse()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::ByteSize() const
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::CVRMsg_ComputeDistortionBatchedResponse_OutputCoord()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::CVRMsg_ComputeDistortionBatchedResponse_OutputCoord() [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::CVRMsg_ComputeDistortionBatchedResponse_OutputCoord(CVRMsg_ComputeDistortionBatchedResponse_OutputCoord const&)
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::CVRMsg_ComputeDistortionBatchedResponse_OutputCoord(CVRMsg_ComputeDistortionBatchedResponse_OutputCoord const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::Clear()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::CopyFrom(CVRMsg_ComputeDistortionBatchedResponse_OutputCoord const&)
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::GetCachedSize() const
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::GetMetadata() const
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::GetMetadata() const [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::InitAsDefaultInstance()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::IsInitialized() const
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::MergeFrom(CVRMsg_ComputeDistortionBatchedResponse_OutputCoord const&)
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::MergeFrom(CVRMsg_ComputeDistortionBatchedResponse_OutputCoord const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::New() const
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::New() const [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::SetCachedSize(int) const
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::SharedCtor()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::SharedDtor()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::Swap(CVRMsg_ComputeDistortionBatchedResponse_OutputCoord*)
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::default_instance()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::descriptor()
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::descriptor() [clone .cold]
 t CVRMsg_ComputeDistortionBatchedResponse_OutputCoord::~CVRMsg_ComputeDistortionBatchedResponse_OutputCoord()
 t CVRMsg_ComputeDistortionBatched_InputCoord::ByteSize() const
 t CVRMsg_ComputeDistortionBatched_InputCoord::CVRMsg_ComputeDistortionBatched_InputCoord()
 t CVRMsg_ComputeDistortionBatched_InputCoord::CVRMsg_ComputeDistortionBatched_InputCoord() [clone .cold]
 t CVRMsg_ComputeDistortionBatched_InputCoord::CVRMsg_ComputeDistortionBatched_InputCoord(CVRMsg_ComputeDistortionBatched_InputCoord const&)
 t CVRMsg_ComputeDistortionBatched_InputCoord::CVRMsg_ComputeDistortionBatched_InputCoord(CVRMsg_ComputeDistortionBatched_InputCoord const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatched_InputCoord::Clear()
 t CVRMsg_ComputeDistortionBatched_InputCoord::CopyFrom(CVRMsg_ComputeDistortionBatched_InputCoord const&)
 t CVRMsg_ComputeDistortionBatched_InputCoord::GetCachedSize() const
 t CVRMsg_ComputeDistortionBatched_InputCoord::GetMetadata() const
 t CVRMsg_ComputeDistortionBatched_InputCoord::GetMetadata() const [clone .cold]
 t CVRMsg_ComputeDistortionBatched_InputCoord::InitAsDefaultInstance()
 t CVRMsg_ComputeDistortionBatched_InputCoord::IsInitialized() const
 t CVRMsg_ComputeDistortionBatched_InputCoord::MergeFrom(CVRMsg_ComputeDistortionBatched_InputCoord const&)
 t CVRMsg_ComputeDistortionBatched_InputCoord::MergeFrom(CVRMsg_ComputeDistortionBatched_InputCoord const&) [clone .cold]
 t CVRMsg_ComputeDistortionBatched_InputCoord::New() const
 t CVRMsg_ComputeDistortionBatched_InputCoord::New() const [clone .cold]
 t CVRMsg_ComputeDistortionBatched_InputCoord::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ComputeDistortionBatched_InputCoord::SetCachedSize(int) const
 t CVRMsg_ComputeDistortionBatched_InputCoord::SharedCtor()
 t CVRMsg_ComputeDistortionBatched_InputCoord::SharedDtor()
 t CVRMsg_ComputeDistortionBatched_InputCoord::Swap(CVRMsg_ComputeDistortionBatched_InputCoord*)
 t CVRMsg_ComputeDistortionBatched_InputCoord::default_instance()
 t CVRMsg_ComputeDistortionBatched_InputCoord::descriptor()
 t CVRMsg_ComputeDistortionBatched_InputCoord::descriptor() [clone .cold]
 t CVRMsg_ComputeDistortionBatched_InputCoord::~CVRMsg_ComputeDistortionBatched_InputCoord()
 t CVRMsg_ComputeDistortionResponse::ByteSize() const
 t CVRMsg_ComputeDistortionResponse::CVRMsg_ComputeDistortionResponse()
 t CVRMsg_ComputeDistortionResponse::CVRMsg_ComputeDistortionResponse() [clone .cold]
 t CVRMsg_ComputeDistortionResponse::CVRMsg_ComputeDistortionResponse(CVRMsg_ComputeDistortionResponse const&)
 t CVRMsg_ComputeDistortionResponse::CVRMsg_ComputeDistortionResponse(CVRMsg_ComputeDistortionResponse const&) [clone .cold]
 t CVRMsg_ComputeDistortionResponse::Clear()
 t CVRMsg_ComputeDistortionResponse::CopyFrom(CVRMsg_ComputeDistortionResponse const&)
 t CVRMsg_ComputeDistortionResponse::GetCachedSize() const
 t CVRMsg_ComputeDistortionResponse::GetMetadata() const
 t CVRMsg_ComputeDistortionResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ComputeDistortionResponse::InitAsDefaultInstance()
 t CVRMsg_ComputeDistortionResponse::IsInitialized() const
 t CVRMsg_ComputeDistortionResponse::MergeFrom(CVRMsg_ComputeDistortionResponse const&)
 t CVRMsg_ComputeDistortionResponse::MergeFrom(CVRMsg_ComputeDistortionResponse const&) [clone .cold]
 t CVRMsg_ComputeDistortionResponse::New() const
 t CVRMsg_ComputeDistortionResponse::New() const [clone .cold]
 t CVRMsg_ComputeDistortionResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ComputeDistortionResponse::SetCachedSize(int) const
 t CVRMsg_ComputeDistortionResponse::SharedCtor()
 t CVRMsg_ComputeDistortionResponse::SharedDtor()
 t CVRMsg_ComputeDistortionResponse::Swap(CVRMsg_ComputeDistortionResponse*)
 t CVRMsg_ComputeDistortionResponse::default_instance()
 t CVRMsg_ComputeDistortionResponse::descriptor()
 t CVRMsg_ComputeDistortionResponse::descriptor() [clone .cold]
 t CVRMsg_ComputeDistortionResponse::~CVRMsg_ComputeDistortionResponse()
 t CVRMsg_Connect::ByteSize() const
 t CVRMsg_Connect::CVRMsg_Connect()
 t CVRMsg_Connect::CVRMsg_Connect() [clone .cold]
 t CVRMsg_Connect::CVRMsg_Connect(CVRMsg_Connect const&)
 t CVRMsg_Connect::CVRMsg_Connect(CVRMsg_Connect const&) [clone .cold]
 t CVRMsg_Connect::Clear()
 t CVRMsg_Connect::CopyFrom(CVRMsg_Connect const&)
 t CVRMsg_Connect::GetCachedSize() const
 t CVRMsg_Connect::GetMetadata() const
 t CVRMsg_Connect::GetMetadata() const [clone .cold]
 t CVRMsg_Connect::InitAsDefaultInstance()
 t CVRMsg_Connect::IsInitialized() const
 t CVRMsg_Connect::MergeFrom(CVRMsg_Connect const&)
 t CVRMsg_Connect::MergeFrom(CVRMsg_Connect const&) [clone .cold]
 t CVRMsg_Connect::New() const
 t CVRMsg_Connect::New() const [clone .cold]
 t CVRMsg_Connect::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Connect::SetCachedSize(int) const
 t CVRMsg_Connect::SharedCtor()
 t CVRMsg_Connect::SharedCtor() [clone .cold]
 t CVRMsg_Connect::SharedDtor()
 t CVRMsg_Connect::Swap(CVRMsg_Connect*)
 t CVRMsg_Connect::default_instance()
 t CVRMsg_Connect::descriptor()
 t CVRMsg_Connect::descriptor() [clone .cold]
 t CVRMsg_Connect::mutable_app_key()
 t CVRMsg_Connect::mutable_binary_path()
 t CVRMsg_Connect::mutable_client_dll_path()
 t CVRMsg_Connect::mutable_hmd_interface_version()
 t CVRMsg_Connect::mutable_startup_info_json()
 t CVRMsg_Connect::release_app_key()
 t CVRMsg_Connect::release_binary_path()
 t CVRMsg_Connect::release_client_dll_path()
 t CVRMsg_Connect::release_hmd_interface_version()
 t CVRMsg_Connect::release_startup_info_json()
 t CVRMsg_Connect::set_allocated_app_key(std::string*)
 t CVRMsg_Connect::set_allocated_binary_path(std::string*)
 t CVRMsg_Connect::set_allocated_client_dll_path(std::string*)
 t CVRMsg_Connect::set_allocated_hmd_interface_version(std::string*)
 t CVRMsg_Connect::set_allocated_startup_info_json(std::string*)
 t CVRMsg_Connect::set_app_key(char const*)
 t CVRMsg_Connect::set_app_key(char const*, unsigned long)
 t CVRMsg_Connect::set_app_key(std::string const&)
 t CVRMsg_Connect::set_binary_path(char const*)
 t CVRMsg_Connect::set_binary_path(char const*, unsigned long)
 t CVRMsg_Connect::set_binary_path(std::string const&)
 t CVRMsg_Connect::set_client_dll_path(char const*)
 t CVRMsg_Connect::set_client_dll_path(char const*, unsigned long)
 t CVRMsg_Connect::set_client_dll_path(std::string const&)
 t CVRMsg_Connect::set_hmd_interface_version(char const*)
 t CVRMsg_Connect::set_hmd_interface_version(char const*, unsigned long)
 t CVRMsg_Connect::set_hmd_interface_version(std::string const&)
 t CVRMsg_Connect::set_startup_info_json(char const*)
 t CVRMsg_Connect::set_startup_info_json(char const*, unsigned long)
 t CVRMsg_Connect::set_startup_info_json(std::string const&)
 t CVRMsg_Connect::~CVRMsg_Connect()
 t CVRMsg_ConnectResponse::ByteSize() const
 t CVRMsg_ConnectResponse::CVRMsg_ConnectResponse()
 t CVRMsg_ConnectResponse::CVRMsg_ConnectResponse() [clone .cold]
 t CVRMsg_ConnectResponse::CVRMsg_ConnectResponse(CVRMsg_ConnectResponse const&)
 t CVRMsg_ConnectResponse::CVRMsg_ConnectResponse(CVRMsg_ConnectResponse const&) [clone .cold]
 t CVRMsg_ConnectResponse::Clear()
 t CVRMsg_ConnectResponse::CopyFrom(CVRMsg_ConnectResponse const&)
 t CVRMsg_ConnectResponse::GetCachedSize() const
 t CVRMsg_ConnectResponse::GetMetadata() const
 t CVRMsg_ConnectResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ConnectResponse::InitAsDefaultInstance()
 t CVRMsg_ConnectResponse::IsInitialized() const
 t CVRMsg_ConnectResponse::MergeFrom(CVRMsg_ConnectResponse const&)
 t CVRMsg_ConnectResponse::MergeFrom(CVRMsg_ConnectResponse const&) [clone .cold]
 t CVRMsg_ConnectResponse::New() const
 t CVRMsg_ConnectResponse::New() const [clone .cold]
 t CVRMsg_ConnectResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ConnectResponse::SetCachedSize(int) const
 t CVRMsg_ConnectResponse::SharedCtor()
 t CVRMsg_ConnectResponse::SharedCtor() [clone .cold]
 t CVRMsg_ConnectResponse::SharedDtor()
 t CVRMsg_ConnectResponse::Swap(CVRMsg_ConnectResponse*)
 t CVRMsg_ConnectResponse::default_instance()
 t CVRMsg_ConnectResponse::descriptor()
 t CVRMsg_ConnectResponse::descriptor() [clone .cold]
 t CVRMsg_ConnectResponse::mutable_language()
 t CVRMsg_ConnectResponse::release_language()
 t CVRMsg_ConnectResponse::set_allocated_language(std::string*)
 t CVRMsg_ConnectResponse::set_language(char const*)
 t CVRMsg_ConnectResponse::set_language(char const*, unsigned long)
 t CVRMsg_ConnectResponse::set_language(std::string const&)
 t CVRMsg_ConnectResponse::~CVRMsg_ConnectResponse()
 t CVRMsg_CreateSwapTextureSet::ByteSize() const
 t CVRMsg_CreateSwapTextureSet::CVRMsg_CreateSwapTextureSet()
 t CVRMsg_CreateSwapTextureSet::CVRMsg_CreateSwapTextureSet() [clone .cold]
 t CVRMsg_CreateSwapTextureSet::CVRMsg_CreateSwapTextureSet(CVRMsg_CreateSwapTextureSet const&)
 t CVRMsg_CreateSwapTextureSet::CVRMsg_CreateSwapTextureSet(CVRMsg_CreateSwapTextureSet const&) [clone .cold]
 t CVRMsg_CreateSwapTextureSet::Clear()
 t CVRMsg_CreateSwapTextureSet::CopyFrom(CVRMsg_CreateSwapTextureSet const&)
 t CVRMsg_CreateSwapTextureSet::GetCachedSize() const
 t CVRMsg_CreateSwapTextureSet::GetMetadata() const
 t CVRMsg_CreateSwapTextureSet::GetMetadata() const [clone .cold]
 t CVRMsg_CreateSwapTextureSet::InitAsDefaultInstance()
 t CVRMsg_CreateSwapTextureSet::IsInitialized() const
 t CVRMsg_CreateSwapTextureSet::MergeFrom(CVRMsg_CreateSwapTextureSet const&)
 t CVRMsg_CreateSwapTextureSet::MergeFrom(CVRMsg_CreateSwapTextureSet const&) [clone .cold]
 t CVRMsg_CreateSwapTextureSet::New() const
 t CVRMsg_CreateSwapTextureSet::New() const [clone .cold]
 t CVRMsg_CreateSwapTextureSet::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CreateSwapTextureSet::SetCachedSize(int) const
 t CVRMsg_CreateSwapTextureSet::SharedCtor()
 t CVRMsg_CreateSwapTextureSet::SharedDtor()
 t CVRMsg_CreateSwapTextureSet::Swap(CVRMsg_CreateSwapTextureSet*)
 t CVRMsg_CreateSwapTextureSet::default_instance()
 t CVRMsg_CreateSwapTextureSet::descriptor()
 t CVRMsg_CreateSwapTextureSet::descriptor() [clone .cold]
 t CVRMsg_CreateSwapTextureSet::~CVRMsg_CreateSwapTextureSet()
 t CVRMsg_CreateSwapTextureSetResponse::ByteSize() const
 t CVRMsg_CreateSwapTextureSetResponse::CVRMsg_CreateSwapTextureSetResponse()
 t CVRMsg_CreateSwapTextureSetResponse::CVRMsg_CreateSwapTextureSetResponse() [clone .cold]
 t CVRMsg_CreateSwapTextureSetResponse::CVRMsg_CreateSwapTextureSetResponse(CVRMsg_CreateSwapTextureSetResponse const&)
 t CVRMsg_CreateSwapTextureSetResponse::CVRMsg_CreateSwapTextureSetResponse(CVRMsg_CreateSwapTextureSetResponse const&) [clone .cold]
 t CVRMsg_CreateSwapTextureSetResponse::Clear()
 t CVRMsg_CreateSwapTextureSetResponse::CopyFrom(CVRMsg_CreateSwapTextureSetResponse const&)
 t CVRMsg_CreateSwapTextureSetResponse::GetCachedSize() const
 t CVRMsg_CreateSwapTextureSetResponse::GetMetadata() const
 t CVRMsg_CreateSwapTextureSetResponse::GetMetadata() const [clone .cold]
 t CVRMsg_CreateSwapTextureSetResponse::InitAsDefaultInstance()
 t CVRMsg_CreateSwapTextureSetResponse::IsInitialized() const
 t CVRMsg_CreateSwapTextureSetResponse::MergeFrom(CVRMsg_CreateSwapTextureSetResponse const&)
 t CVRMsg_CreateSwapTextureSetResponse::MergeFrom(CVRMsg_CreateSwapTextureSetResponse const&) [clone .cold]
 t CVRMsg_CreateSwapTextureSetResponse::New() const
 t CVRMsg_CreateSwapTextureSetResponse::New() const [clone .cold]
 t CVRMsg_CreateSwapTextureSetResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_CreateSwapTextureSetResponse::SetCachedSize(int) const
 t CVRMsg_CreateSwapTextureSetResponse::SharedCtor()
 t CVRMsg_CreateSwapTextureSetResponse::SharedDtor()
 t CVRMsg_CreateSwapTextureSetResponse::Swap(CVRMsg_CreateSwapTextureSetResponse*)
 t CVRMsg_CreateSwapTextureSetResponse::default_instance()
 t CVRMsg_CreateSwapTextureSetResponse::descriptor()
 t CVRMsg_CreateSwapTextureSetResponse::descriptor() [clone .cold]
 t CVRMsg_CreateSwapTextureSetResponse::~CVRMsg_CreateSwapTextureSetResponse()
 t CVRMsg_DashboardStarted::ByteSize() const
 t CVRMsg_DashboardStarted::CVRMsg_DashboardStarted()
 t CVRMsg_DashboardStarted::CVRMsg_DashboardStarted() [clone .cold]
 t CVRMsg_DashboardStarted::CVRMsg_DashboardStarted(CVRMsg_DashboardStarted const&)
 t CVRMsg_DashboardStarted::CVRMsg_DashboardStarted(CVRMsg_DashboardStarted const&) [clone .cold]
 t CVRMsg_DashboardStarted::Clear()
 t CVRMsg_DashboardStarted::CopyFrom(CVRMsg_DashboardStarted const&)
 t CVRMsg_DashboardStarted::GetCachedSize() const
 t CVRMsg_DashboardStarted::GetMetadata() const
 t CVRMsg_DashboardStarted::GetMetadata() const [clone .cold]
 t CVRMsg_DashboardStarted::InitAsDefaultInstance()
 t CVRMsg_DashboardStarted::IsInitialized() const
 t CVRMsg_DashboardStarted::MergeFrom(CVRMsg_DashboardStarted const&)
 t CVRMsg_DashboardStarted::MergeFrom(CVRMsg_DashboardStarted const&) [clone .cold]
 t CVRMsg_DashboardStarted::New() const
 t CVRMsg_DashboardStarted::New() const [clone .cold]
 t CVRMsg_DashboardStarted::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_DashboardStarted::SetCachedSize(int) const
 t CVRMsg_DashboardStarted::SharedCtor()
 t CVRMsg_DashboardStarted::SharedDtor()
 t CVRMsg_DashboardStarted::Swap(CVRMsg_DashboardStarted*)
 t CVRMsg_DashboardStarted::default_instance()
 t CVRMsg_DashboardStarted::descriptor()
 t CVRMsg_DashboardStarted::descriptor() [clone .cold]
 t CVRMsg_DashboardStarted::~CVRMsg_DashboardStarted()
 t CVRMsg_DefaultBinding::ByteSize() const
 t CVRMsg_DefaultBinding::CVRMsg_DefaultBinding()
 t CVRMsg_DefaultBinding::CVRMsg_DefaultBinding() [clone .cold]
 t CVRMsg_DefaultBinding::CVRMsg_DefaultBinding(CVRMsg_DefaultBinding const&)
 t CVRMsg_DefaultBinding::CVRMsg_DefaultBinding(CVRMsg_DefaultBinding const&) [clone .cold]
 t CVRMsg_DefaultBinding::Clear()
 t CVRMsg_DefaultBinding::CopyFrom(CVRMsg_DefaultBinding const&)
 t CVRMsg_DefaultBinding::GetCachedSize() const
 t CVRMsg_DefaultBinding::GetMetadata() const
 t CVRMsg_DefaultBinding::GetMetadata() const [clone .cold]
 t CVRMsg_DefaultBinding::InitAsDefaultInstance()
 t CVRMsg_DefaultBinding::IsInitialized() const
 t CVRMsg_DefaultBinding::MergeFrom(CVRMsg_DefaultBinding const&)
 t CVRMsg_DefaultBinding::MergeFrom(CVRMsg_DefaultBinding const&) [clone .cold]
 t CVRMsg_DefaultBinding::New() const
 t CVRMsg_DefaultBinding::New() const [clone .cold]
 t CVRMsg_DefaultBinding::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_DefaultBinding::SetCachedSize(int) const
 t CVRMsg_DefaultBinding::SharedCtor()
 t CVRMsg_DefaultBinding::SharedCtor() [clone .cold]
 t CVRMsg_DefaultBinding::SharedDtor()
 t CVRMsg_DefaultBinding::Swap(CVRMsg_DefaultBinding*)
 t CVRMsg_DefaultBinding::default_instance()
 t CVRMsg_DefaultBinding::descriptor()
 t CVRMsg_DefaultBinding::descriptor() [clone .cold]
 t CVRMsg_DefaultBinding::mutable_category()
 t CVRMsg_DefaultBinding::mutable_controller_type()
 t CVRMsg_DefaultBinding::mutable_url()
 t CVRMsg_DefaultBinding::release_category()
 t CVRMsg_DefaultBinding::release_controller_type()
 t CVRMsg_DefaultBinding::release_url()
 t CVRMsg_DefaultBinding::set_allocated_category(std::string*)
 t CVRMsg_DefaultBinding::set_allocated_controller_type(std::string*)
 t CVRMsg_DefaultBinding::set_allocated_url(std::string*)
 t CVRMsg_DefaultBinding::set_category(char const*)
 t CVRMsg_DefaultBinding::set_category(char const*, unsigned long)
 t CVRMsg_DefaultBinding::set_category(std::string const&)
 t CVRMsg_DefaultBinding::set_controller_type(char const*)
 t CVRMsg_DefaultBinding::set_controller_type(char const*, unsigned long)
 t CVRMsg_DefaultBinding::set_controller_type(std::string const&)
 t CVRMsg_DefaultBinding::set_url(char const*)
 t CVRMsg_DefaultBinding::set_url(char const*, unsigned long)
 t CVRMsg_DefaultBinding::set_url(std::string const&)
 t CVRMsg_DefaultBinding::~CVRMsg_DefaultBinding()
 t CVRMsg_DestroySwapTextureSet::ByteSize() const
 t CVRMsg_DestroySwapTextureSet::CVRMsg_DestroySwapTextureSet()
 t CVRMsg_DestroySwapTextureSet::CVRMsg_DestroySwapTextureSet() [clone .cold]
 t CVRMsg_DestroySwapTextureSet::CVRMsg_DestroySwapTextureSet(CVRMsg_DestroySwapTextureSet const&)
 t CVRMsg_DestroySwapTextureSet::CVRMsg_DestroySwapTextureSet(CVRMsg_DestroySwapTextureSet const&) [clone .cold]
 t CVRMsg_DestroySwapTextureSet::Clear()
 t CVRMsg_DestroySwapTextureSet::CopyFrom(CVRMsg_DestroySwapTextureSet const&)
 t CVRMsg_DestroySwapTextureSet::GetCachedSize() const
 t CVRMsg_DestroySwapTextureSet::GetMetadata() const
 t CVRMsg_DestroySwapTextureSet::GetMetadata() const [clone .cold]
 t CVRMsg_DestroySwapTextureSet::InitAsDefaultInstance()
 t CVRMsg_DestroySwapTextureSet::IsInitialized() const
 t CVRMsg_DestroySwapTextureSet::MergeFrom(CVRMsg_DestroySwapTextureSet const&)
 t CVRMsg_DestroySwapTextureSet::MergeFrom(CVRMsg_DestroySwapTextureSet const&) [clone .cold]
 t CVRMsg_DestroySwapTextureSet::New() const
 t CVRMsg_DestroySwapTextureSet::New() const [clone .cold]
 t CVRMsg_DestroySwapTextureSet::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_DestroySwapTextureSet::SetCachedSize(int) const
 t CVRMsg_DestroySwapTextureSet::SharedCtor()
 t CVRMsg_DestroySwapTextureSet::SharedDtor()
 t CVRMsg_DestroySwapTextureSet::Swap(CVRMsg_DestroySwapTextureSet*)
 t CVRMsg_DestroySwapTextureSet::default_instance()
 t CVRMsg_DestroySwapTextureSet::descriptor()
 t CVRMsg_DestroySwapTextureSet::descriptor() [clone .cold]
 t CVRMsg_DestroySwapTextureSet::~CVRMsg_DestroySwapTextureSet()
 t CVRMsg_DriverDebugRequest::ByteSize() const
 t CVRMsg_DriverDebugRequest::CVRMsg_DriverDebugRequest()
 t CVRMsg_DriverDebugRequest::CVRMsg_DriverDebugRequest() [clone .cold]
 t CVRMsg_DriverDebugRequest::CVRMsg_DriverDebugRequest(CVRMsg_DriverDebugRequest const&)
 t CVRMsg_DriverDebugRequest::CVRMsg_DriverDebugRequest(CVRMsg_DriverDebugRequest const&) [clone .cold]
 t CVRMsg_DriverDebugRequest::Clear()
 t CVRMsg_DriverDebugRequest::CopyFrom(CVRMsg_DriverDebugRequest const&)
 t CVRMsg_DriverDebugRequest::GetCachedSize() const
 t CVRMsg_DriverDebugRequest::GetMetadata() const
 t CVRMsg_DriverDebugRequest::GetMetadata() const [clone .cold]
 t CVRMsg_DriverDebugRequest::InitAsDefaultInstance()
 t CVRMsg_DriverDebugRequest::IsInitialized() const
 t CVRMsg_DriverDebugRequest::MergeFrom(CVRMsg_DriverDebugRequest const&)
 t CVRMsg_DriverDebugRequest::MergeFrom(CVRMsg_DriverDebugRequest const&) [clone .cold]
 t CVRMsg_DriverDebugRequest::New() const
 t CVRMsg_DriverDebugRequest::New() const [clone .cold]
 t CVRMsg_DriverDebugRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_DriverDebugRequest::SetCachedSize(int) const
 t CVRMsg_DriverDebugRequest::SharedCtor()
 t CVRMsg_DriverDebugRequest::SharedCtor() [clone .cold]
 t CVRMsg_DriverDebugRequest::SharedDtor()
 t CVRMsg_DriverDebugRequest::Swap(CVRMsg_DriverDebugRequest*)
 t CVRMsg_DriverDebugRequest::default_instance()
 t CVRMsg_DriverDebugRequest::descriptor()
 t CVRMsg_DriverDebugRequest::descriptor() [clone .cold]
 t CVRMsg_DriverDebugRequest::mutable_request()
 t CVRMsg_DriverDebugRequest::release_request()
 t CVRMsg_DriverDebugRequest::set_allocated_request(std::string*)
 t CVRMsg_DriverDebugRequest::set_request(char const*)
 t CVRMsg_DriverDebugRequest::set_request(char const*, unsigned long)
 t CVRMsg_DriverDebugRequest::set_request(std::string const&)
 t CVRMsg_DriverDebugRequest::~CVRMsg_DriverDebugRequest()
 t CVRMsg_DriverDebugResponse::ByteSize() const
 t CVRMsg_DriverDebugResponse::CVRMsg_DriverDebugResponse()
 t CVRMsg_DriverDebugResponse::CVRMsg_DriverDebugResponse() [clone .cold]
 t CVRMsg_DriverDebugResponse::CVRMsg_DriverDebugResponse(CVRMsg_DriverDebugResponse const&)
 t CVRMsg_DriverDebugResponse::CVRMsg_DriverDebugResponse(CVRMsg_DriverDebugResponse const&) [clone .cold]
 t CVRMsg_DriverDebugResponse::Clear()
 t CVRMsg_DriverDebugResponse::CopyFrom(CVRMsg_DriverDebugResponse const&)
 t CVRMsg_DriverDebugResponse::GetCachedSize() const
 t CVRMsg_DriverDebugResponse::GetMetadata() const
 t CVRMsg_DriverDebugResponse::GetMetadata() const [clone .cold]
 t CVRMsg_DriverDebugResponse::InitAsDefaultInstance()
 t CVRMsg_DriverDebugResponse::IsInitialized() const
 t CVRMsg_DriverDebugResponse::MergeFrom(CVRMsg_DriverDebugResponse const&)
 t CVRMsg_DriverDebugResponse::MergeFrom(CVRMsg_DriverDebugResponse const&) [clone .cold]
 t CVRMsg_DriverDebugResponse::New() const
 t CVRMsg_DriverDebugResponse::New() const [clone .cold]
 t CVRMsg_DriverDebugResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_DriverDebugResponse::SetCachedSize(int) const
 t CVRMsg_DriverDebugResponse::SharedCtor()
 t CVRMsg_DriverDebugResponse::SharedCtor() [clone .cold]
 t CVRMsg_DriverDebugResponse::SharedDtor()
 t CVRMsg_DriverDebugResponse::Swap(CVRMsg_DriverDebugResponse*)
 t CVRMsg_DriverDebugResponse::default_instance()
 t CVRMsg_DriverDebugResponse::descriptor()
 t CVRMsg_DriverDebugResponse::descriptor() [clone .cold]
 t CVRMsg_DriverDebugResponse::mutable_response()
 t CVRMsg_DriverDebugResponse::release_response()
 t CVRMsg_DriverDebugResponse::set_allocated_response(std::string*)
 t CVRMsg_DriverDebugResponse::set_response(char const*)
 t CVRMsg_DriverDebugResponse::set_response(char const*, unsigned long)
 t CVRMsg_DriverDebugResponse::set_response(std::string const&)
 t CVRMsg_DriverDebugResponse::~CVRMsg_DriverDebugResponse()
 t CVRMsg_GetApplicationInfo::ByteSize() const
 t CVRMsg_GetApplicationInfo::CVRMsg_GetApplicationInfo()
 t CVRMsg_GetApplicationInfo::CVRMsg_GetApplicationInfo() [clone .cold]
 t CVRMsg_GetApplicationInfo::CVRMsg_GetApplicationInfo(CVRMsg_GetApplicationInfo const&)
 t CVRMsg_GetApplicationInfo::CVRMsg_GetApplicationInfo(CVRMsg_GetApplicationInfo const&) [clone .cold]
 t CVRMsg_GetApplicationInfo::Clear()
 t CVRMsg_GetApplicationInfo::CopyFrom(CVRMsg_GetApplicationInfo const&)
 t CVRMsg_GetApplicationInfo::GetCachedSize() const
 t CVRMsg_GetApplicationInfo::GetMetadata() const
 t CVRMsg_GetApplicationInfo::GetMetadata() const [clone .cold]
 t CVRMsg_GetApplicationInfo::InitAsDefaultInstance()
 t CVRMsg_GetApplicationInfo::IsInitialized() const
 t CVRMsg_GetApplicationInfo::MergeFrom(CVRMsg_GetApplicationInfo const&)
 t CVRMsg_GetApplicationInfo::MergeFrom(CVRMsg_GetApplicationInfo const&) [clone .cold]
 t CVRMsg_GetApplicationInfo::New() const
 t CVRMsg_GetApplicationInfo::New() const [clone .cold]
 t CVRMsg_GetApplicationInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetApplicationInfo::SetCachedSize(int) const
 t CVRMsg_GetApplicationInfo::SharedCtor()
 t CVRMsg_GetApplicationInfo::SharedCtor() [clone .cold]
 t CVRMsg_GetApplicationInfo::SharedDtor()
 t CVRMsg_GetApplicationInfo::Swap(CVRMsg_GetApplicationInfo*)
 t CVRMsg_GetApplicationInfo::default_instance()
 t CVRMsg_GetApplicationInfo::descriptor()
 t CVRMsg_GetApplicationInfo::descriptor() [clone .cold]
 t CVRMsg_GetApplicationInfo::mutable_app_key()
 t CVRMsg_GetApplicationInfo::release_app_key()
 t CVRMsg_GetApplicationInfo::set_allocated_app_key(std::string*)
 t CVRMsg_GetApplicationInfo::set_app_key(char const*)
 t CVRMsg_GetApplicationInfo::set_app_key(char const*, unsigned long)
 t CVRMsg_GetApplicationInfo::set_app_key(std::string const&)
 t CVRMsg_GetApplicationInfo::~CVRMsg_GetApplicationInfo()
 t CVRMsg_GetApplicationLaunchArguments::ByteSize() const
 t CVRMsg_GetApplicationLaunchArguments::CVRMsg_GetApplicationLaunchArguments()
 t CVRMsg_GetApplicationLaunchArguments::CVRMsg_GetApplicationLaunchArguments() [clone .cold]
 t CVRMsg_GetApplicationLaunchArguments::CVRMsg_GetApplicationLaunchArguments(CVRMsg_GetApplicationLaunchArguments const&)
 t CVRMsg_GetApplicationLaunchArguments::CVRMsg_GetApplicationLaunchArguments(CVRMsg_GetApplicationLaunchArguments const&) [clone .cold]
 t CVRMsg_GetApplicationLaunchArguments::Clear()
 t CVRMsg_GetApplicationLaunchArguments::CopyFrom(CVRMsg_GetApplicationLaunchArguments const&)
 t CVRMsg_GetApplicationLaunchArguments::GetCachedSize() const
 t CVRMsg_GetApplicationLaunchArguments::GetMetadata() const
 t CVRMsg_GetApplicationLaunchArguments::GetMetadata() const [clone .cold]
 t CVRMsg_GetApplicationLaunchArguments::InitAsDefaultInstance()
 t CVRMsg_GetApplicationLaunchArguments::IsInitialized() const
 t CVRMsg_GetApplicationLaunchArguments::MergeFrom(CVRMsg_GetApplicationLaunchArguments const&)
 t CVRMsg_GetApplicationLaunchArguments::MergeFrom(CVRMsg_GetApplicationLaunchArguments const&) [clone .cold]
 t CVRMsg_GetApplicationLaunchArguments::New() const
 t CVRMsg_GetApplicationLaunchArguments::New() const [clone .cold]
 t CVRMsg_GetApplicationLaunchArguments::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetApplicationLaunchArguments::SetCachedSize(int) const
 t CVRMsg_GetApplicationLaunchArguments::SharedCtor()
 t CVRMsg_GetApplicationLaunchArguments::SharedDtor()
 t CVRMsg_GetApplicationLaunchArguments::Swap(CVRMsg_GetApplicationLaunchArguments*)
 t CVRMsg_GetApplicationLaunchArguments::default_instance()
 t CVRMsg_GetApplicationLaunchArguments::descriptor()
 t CVRMsg_GetApplicationLaunchArguments::descriptor() [clone .cold]
 t CVRMsg_GetApplicationLaunchArguments::~CVRMsg_GetApplicationLaunchArguments()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::ByteSize() const
 t CVRMsg_GetApplicationLaunchArgumentsResponse::CVRMsg_GetApplicationLaunchArgumentsResponse()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::CVRMsg_GetApplicationLaunchArgumentsResponse() [clone .cold]
 t CVRMsg_GetApplicationLaunchArgumentsResponse::CVRMsg_GetApplicationLaunchArgumentsResponse(CVRMsg_GetApplicationLaunchArgumentsResponse const&)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::CVRMsg_GetApplicationLaunchArgumentsResponse(CVRMsg_GetApplicationLaunchArgumentsResponse const&) [clone .cold]
 t CVRMsg_GetApplicationLaunchArgumentsResponse::Clear()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::CopyFrom(CVRMsg_GetApplicationLaunchArgumentsResponse const&)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::GetCachedSize() const
 t CVRMsg_GetApplicationLaunchArgumentsResponse::GetMetadata() const
 t CVRMsg_GetApplicationLaunchArgumentsResponse::GetMetadata() const [clone .cold]
 t CVRMsg_GetApplicationLaunchArgumentsResponse::InitAsDefaultInstance()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::IsInitialized() const
 t CVRMsg_GetApplicationLaunchArgumentsResponse::MergeFrom(CVRMsg_GetApplicationLaunchArgumentsResponse const&)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::MergeFrom(CVRMsg_GetApplicationLaunchArgumentsResponse const&) [clone .cold]
 t CVRMsg_GetApplicationLaunchArgumentsResponse::New() const
 t CVRMsg_GetApplicationLaunchArgumentsResponse::New() const [clone .cold]
 t CVRMsg_GetApplicationLaunchArgumentsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetApplicationLaunchArgumentsResponse::SetCachedSize(int) const
 t CVRMsg_GetApplicationLaunchArgumentsResponse::SharedCtor()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::SharedCtor() [clone .cold]
 t CVRMsg_GetApplicationLaunchArgumentsResponse::SharedDtor()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::Swap(CVRMsg_GetApplicationLaunchArgumentsResponse*)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::default_instance()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::descriptor()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::descriptor() [clone .cold]
 t CVRMsg_GetApplicationLaunchArgumentsResponse::mutable_args()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::release_args()
 t CVRMsg_GetApplicationLaunchArgumentsResponse::set_allocated_args(std::string*)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::set_args(char const*)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::set_args(char const*, unsigned long)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::set_args(std::string const&)
 t CVRMsg_GetApplicationLaunchArgumentsResponse::~CVRMsg_GetApplicationLaunchArgumentsResponse()
 t CVRMsg_GetDisplayInfo::ByteSize() const
 t CVRMsg_GetDisplayInfo::CVRMsg_GetDisplayInfo()
 t CVRMsg_GetDisplayInfo::CVRMsg_GetDisplayInfo() [clone .cold]
 t CVRMsg_GetDisplayInfo::CVRMsg_GetDisplayInfo(CVRMsg_GetDisplayInfo const&)
 t CVRMsg_GetDisplayInfo::CVRMsg_GetDisplayInfo(CVRMsg_GetDisplayInfo const&) [clone .cold]
 t CVRMsg_GetDisplayInfo::Clear()
 t CVRMsg_GetDisplayInfo::CopyFrom(CVRMsg_GetDisplayInfo const&)
 t CVRMsg_GetDisplayInfo::GetCachedSize() const
 t CVRMsg_GetDisplayInfo::GetMetadata() const
 t CVRMsg_GetDisplayInfo::GetMetadata() const [clone .cold]
 t CVRMsg_GetDisplayInfo::InitAsDefaultInstance()
 t CVRMsg_GetDisplayInfo::IsInitialized() const
 t CVRMsg_GetDisplayInfo::MergeFrom(CVRMsg_GetDisplayInfo const&)
 t CVRMsg_GetDisplayInfo::MergeFrom(CVRMsg_GetDisplayInfo const&) [clone .cold]
 t CVRMsg_GetDisplayInfo::New() const
 t CVRMsg_GetDisplayInfo::New() const [clone .cold]
 t CVRMsg_GetDisplayInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDisplayInfo::SetCachedSize(int) const
 t CVRMsg_GetDisplayInfo::SharedCtor()
 t CVRMsg_GetDisplayInfo::SharedCtor() [clone .cold]
 t CVRMsg_GetDisplayInfo::SharedDtor()
 t CVRMsg_GetDisplayInfo::Swap(CVRMsg_GetDisplayInfo*)
 t CVRMsg_GetDisplayInfo::default_instance()
 t CVRMsg_GetDisplayInfo::descriptor()
 t CVRMsg_GetDisplayInfo::descriptor() [clone .cold]
 t CVRMsg_GetDisplayInfo::mutable_driver_id()
 t CVRMsg_GetDisplayInfo::release_driver_id()
 t CVRMsg_GetDisplayInfo::set_allocated_driver_id(std::string*)
 t CVRMsg_GetDisplayInfo::set_driver_id(char const*)
 t CVRMsg_GetDisplayInfo::set_driver_id(char const*, unsigned long)
 t CVRMsg_GetDisplayInfo::set_driver_id(std::string const&)
 t CVRMsg_GetDisplayInfo::~CVRMsg_GetDisplayInfo()
 t CVRMsg_GetDisplayInfoResponse::ByteSize() const
 t CVRMsg_GetDisplayInfoResponse::CVRMsg_GetDisplayInfoResponse()
 t CVRMsg_GetDisplayInfoResponse::CVRMsg_GetDisplayInfoResponse() [clone .cold]
 t CVRMsg_GetDisplayInfoResponse::CVRMsg_GetDisplayInfoResponse(CVRMsg_GetDisplayInfoResponse const&)
 t CVRMsg_GetDisplayInfoResponse::CVRMsg_GetDisplayInfoResponse(CVRMsg_GetDisplayInfoResponse const&) [clone .cold]
 t CVRMsg_GetDisplayInfoResponse::Clear()
 t CVRMsg_GetDisplayInfoResponse::CopyFrom(CVRMsg_GetDisplayInfoResponse const&)
 t CVRMsg_GetDisplayInfoResponse::GetCachedSize() const
 t CVRMsg_GetDisplayInfoResponse::GetMetadata() const
 t CVRMsg_GetDisplayInfoResponse::GetMetadata() const [clone .cold]
 t CVRMsg_GetDisplayInfoResponse::InitAsDefaultInstance()
 t CVRMsg_GetDisplayInfoResponse::IsInitialized() const
 t CVRMsg_GetDisplayInfoResponse::MergeFrom(CVRMsg_GetDisplayInfoResponse const&)
 t CVRMsg_GetDisplayInfoResponse::MergeFrom(CVRMsg_GetDisplayInfoResponse const&) [clone .cold]
 t CVRMsg_GetDisplayInfoResponse::New() const
 t CVRMsg_GetDisplayInfoResponse::New() const [clone .cold]
 t CVRMsg_GetDisplayInfoResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDisplayInfoResponse::SetCachedSize(int) const
 t CVRMsg_GetDisplayInfoResponse::SharedCtor()
 t CVRMsg_GetDisplayInfoResponse::SharedDtor()
 t CVRMsg_GetDisplayInfoResponse::Swap(CVRMsg_GetDisplayInfoResponse*)
 t CVRMsg_GetDisplayInfoResponse::default_instance()
 t CVRMsg_GetDisplayInfoResponse::descriptor()
 t CVRMsg_GetDisplayInfoResponse::descriptor() [clone .cold]
 t CVRMsg_GetDisplayInfoResponse::~CVRMsg_GetDisplayInfoResponse()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::ByteSize() const
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::CVRMsg_GetDisplayInfoResponse_DisplayInfo()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::CVRMsg_GetDisplayInfoResponse_DisplayInfo() [clone .cold]
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::CVRMsg_GetDisplayInfoResponse_DisplayInfo(CVRMsg_GetDisplayInfoResponse_DisplayInfo const&)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::CVRMsg_GetDisplayInfoResponse_DisplayInfo(CVRMsg_GetDisplayInfoResponse_DisplayInfo const&) [clone .cold]
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::Clear()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::CopyFrom(CVRMsg_GetDisplayInfoResponse_DisplayInfo const&)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::GetCachedSize() const
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::GetMetadata() const
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::GetMetadata() const [clone .cold]
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::InitAsDefaultInstance()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::IsInitialized() const
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::MergeFrom(CVRMsg_GetDisplayInfoResponse_DisplayInfo const&)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::MergeFrom(CVRMsg_GetDisplayInfoResponse_DisplayInfo const&) [clone .cold]
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::New() const
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::New() const [clone .cold]
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::SetCachedSize(int) const
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::SharedCtor()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::SharedCtor() [clone .cold]
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::SharedDtor()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::Swap(CVRMsg_GetDisplayInfoResponse_DisplayInfo*)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::default_instance()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::descriptor()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::descriptor() [clone .cold]
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::mutable_display_id()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::mutable_model_number()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::mutable_serial_number()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::release_display_id()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::release_model_number()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::release_serial_number()
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_allocated_display_id(std::string*)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_allocated_model_number(std::string*)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_allocated_serial_number(std::string*)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_display_id(char const*)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_display_id(char const*, unsigned long)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_display_id(std::string const&)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_model_number(char const*)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_model_number(char const*, unsigned long)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_model_number(std::string const&)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_serial_number(char const*)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_serial_number(char const*, unsigned long)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::set_serial_number(std::string const&)
 t CVRMsg_GetDisplayInfoResponse_DisplayInfo::~CVRMsg_GetDisplayInfoResponse_DisplayInfo()
 t CVRMsg_GetDriverDetail::ByteSize() const
 t CVRMsg_GetDriverDetail::CVRMsg_GetDriverDetail()
 t CVRMsg_GetDriverDetail::CVRMsg_GetDriverDetail() [clone .cold]
 t CVRMsg_GetDriverDetail::CVRMsg_GetDriverDetail(CVRMsg_GetDriverDetail const&)
 t CVRMsg_GetDriverDetail::CVRMsg_GetDriverDetail(CVRMsg_GetDriverDetail const&) [clone .cold]
 t CVRMsg_GetDriverDetail::Clear()
 t CVRMsg_GetDriverDetail::CopyFrom(CVRMsg_GetDriverDetail const&)
 t CVRMsg_GetDriverDetail::GetCachedSize() const
 t CVRMsg_GetDriverDetail::GetMetadata() const
 t CVRMsg_GetDriverDetail::GetMetadata() const [clone .cold]
 t CVRMsg_GetDriverDetail::InitAsDefaultInstance()
 t CVRMsg_GetDriverDetail::IsInitialized() const
 t CVRMsg_GetDriverDetail::MergeFrom(CVRMsg_GetDriverDetail const&)
 t CVRMsg_GetDriverDetail::MergeFrom(CVRMsg_GetDriverDetail const&) [clone .cold]
 t CVRMsg_GetDriverDetail::New() const
 t CVRMsg_GetDriverDetail::New() const [clone .cold]
 t CVRMsg_GetDriverDetail::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDriverDetail::SetCachedSize(int) const
 t CVRMsg_GetDriverDetail::SharedCtor()
 t CVRMsg_GetDriverDetail::SharedCtor() [clone .cold]
 t CVRMsg_GetDriverDetail::SharedDtor()
 t CVRMsg_GetDriverDetail::Swap(CVRMsg_GetDriverDetail*)
 t CVRMsg_GetDriverDetail::default_instance()
 t CVRMsg_GetDriverDetail::descriptor()
 t CVRMsg_GetDriverDetail::descriptor() [clone .cold]
 t CVRMsg_GetDriverDetail::mutable_driver_id()
 t CVRMsg_GetDriverDetail::release_driver_id()
 t CVRMsg_GetDriverDetail::set_allocated_driver_id(std::string*)
 t CVRMsg_GetDriverDetail::set_driver_id(char const*)
 t CVRMsg_GetDriverDetail::set_driver_id(char const*, unsigned long)
 t CVRMsg_GetDriverDetail::set_driver_id(std::string const&)
 t CVRMsg_GetDriverDetail::~CVRMsg_GetDriverDetail()
 t CVRMsg_GetDriverDetailResponse::ByteSize() const
 t CVRMsg_GetDriverDetailResponse::CVRMsg_GetDriverDetailResponse()
 t CVRMsg_GetDriverDetailResponse::CVRMsg_GetDriverDetailResponse() [clone .cold]
 t CVRMsg_GetDriverDetailResponse::CVRMsg_GetDriverDetailResponse(CVRMsg_GetDriverDetailResponse const&)
 t CVRMsg_GetDriverDetailResponse::CVRMsg_GetDriverDetailResponse(CVRMsg_GetDriverDetailResponse const&) [clone .cold]
 t CVRMsg_GetDriverDetailResponse::Clear()
 t CVRMsg_GetDriverDetailResponse::CopyFrom(CVRMsg_GetDriverDetailResponse const&)
 t CVRMsg_GetDriverDetailResponse::GetCachedSize() const
 t CVRMsg_GetDriverDetailResponse::GetMetadata() const
 t CVRMsg_GetDriverDetailResponse::GetMetadata() const [clone .cold]
 t CVRMsg_GetDriverDetailResponse::InitAsDefaultInstance()
 t CVRMsg_GetDriverDetailResponse::IsInitialized() const
 t CVRMsg_GetDriverDetailResponse::MergeFrom(CVRMsg_GetDriverDetailResponse const&)
 t CVRMsg_GetDriverDetailResponse::MergeFrom(CVRMsg_GetDriverDetailResponse const&) [clone .cold]
 t CVRMsg_GetDriverDetailResponse::New() const
 t CVRMsg_GetDriverDetailResponse::New() const [clone .cold]
 t CVRMsg_GetDriverDetailResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDriverDetailResponse::SetCachedSize(int) const
 t CVRMsg_GetDriverDetailResponse::SharedCtor()
 t CVRMsg_GetDriverDetailResponse::SharedDtor()
 t CVRMsg_GetDriverDetailResponse::Swap(CVRMsg_GetDriverDetailResponse*)
 t CVRMsg_GetDriverDetailResponse::default_instance()
 t CVRMsg_GetDriverDetailResponse::descriptor()
 t CVRMsg_GetDriverDetailResponse::descriptor() [clone .cold]
 t CVRMsg_GetDriverDetailResponse::~CVRMsg_GetDriverDetailResponse()
 t CVRMsg_GetDriverInfo::ByteSize() const
 t CVRMsg_GetDriverInfo::CVRMsg_GetDriverInfo()
 t CVRMsg_GetDriverInfo::CVRMsg_GetDriverInfo() [clone .cold]
 t CVRMsg_GetDriverInfo::CVRMsg_GetDriverInfo(CVRMsg_GetDriverInfo const&)
 t CVRMsg_GetDriverInfo::CVRMsg_GetDriverInfo(CVRMsg_GetDriverInfo const&) [clone .cold]
 t CVRMsg_GetDriverInfo::Clear()
 t CVRMsg_GetDriverInfo::CopyFrom(CVRMsg_GetDriverInfo const&)
 t CVRMsg_GetDriverInfo::GetCachedSize() const
 t CVRMsg_GetDriverInfo::GetMetadata() const
 t CVRMsg_GetDriverInfo::GetMetadata() const [clone .cold]
 t CVRMsg_GetDriverInfo::InitAsDefaultInstance()
 t CVRMsg_GetDriverInfo::IsInitialized() const
 t CVRMsg_GetDriverInfo::MergeFrom(CVRMsg_GetDriverInfo const&)
 t CVRMsg_GetDriverInfo::MergeFrom(CVRMsg_GetDriverInfo const&) [clone .cold]
 t CVRMsg_GetDriverInfo::New() const
 t CVRMsg_GetDriverInfo::New() const [clone .cold]
 t CVRMsg_GetDriverInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDriverInfo::SetCachedSize(int) const
 t CVRMsg_GetDriverInfo::SharedCtor()
 t CVRMsg_GetDriverInfo::SharedDtor()
 t CVRMsg_GetDriverInfo::Swap(CVRMsg_GetDriverInfo*)
 t CVRMsg_GetDriverInfo::default_instance()
 t CVRMsg_GetDriverInfo::descriptor()
 t CVRMsg_GetDriverInfo::descriptor() [clone .cold]
 t CVRMsg_GetDriverInfo::~CVRMsg_GetDriverInfo()
 t CVRMsg_GetDriverInfoResponse::ByteSize() const
 t CVRMsg_GetDriverInfoResponse::CVRMsg_GetDriverInfoResponse()
 t CVRMsg_GetDriverInfoResponse::CVRMsg_GetDriverInfoResponse() [clone .cold]
 t CVRMsg_GetDriverInfoResponse::CVRMsg_GetDriverInfoResponse(CVRMsg_GetDriverInfoResponse const&)
 t CVRMsg_GetDriverInfoResponse::CVRMsg_GetDriverInfoResponse(CVRMsg_GetDriverInfoResponse const&) [clone .cold]
 t CVRMsg_GetDriverInfoResponse::Clear()
 t CVRMsg_GetDriverInfoResponse::CopyFrom(CVRMsg_GetDriverInfoResponse const&)
 t CVRMsg_GetDriverInfoResponse::GetCachedSize() const
 t CVRMsg_GetDriverInfoResponse::GetMetadata() const
 t CVRMsg_GetDriverInfoResponse::GetMetadata() const [clone .cold]
 t CVRMsg_GetDriverInfoResponse::InitAsDefaultInstance()
 t CVRMsg_GetDriverInfoResponse::IsInitialized() const
 t CVRMsg_GetDriverInfoResponse::MergeFrom(CVRMsg_GetDriverInfoResponse const&)
 t CVRMsg_GetDriverInfoResponse::MergeFrom(CVRMsg_GetDriverInfoResponse const&) [clone .cold]
 t CVRMsg_GetDriverInfoResponse::New() const
 t CVRMsg_GetDriverInfoResponse::New() const [clone .cold]
 t CVRMsg_GetDriverInfoResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDriverInfoResponse::SetCachedSize(int) const
 t CVRMsg_GetDriverInfoResponse::SharedCtor()
 t CVRMsg_GetDriverInfoResponse::SharedDtor()
 t CVRMsg_GetDriverInfoResponse::Swap(CVRMsg_GetDriverInfoResponse*)
 t CVRMsg_GetDriverInfoResponse::default_instance()
 t CVRMsg_GetDriverInfoResponse::descriptor()
 t CVRMsg_GetDriverInfoResponse::descriptor() [clone .cold]
 t CVRMsg_GetDriverInfoResponse::~CVRMsg_GetDriverInfoResponse()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::ByteSize() const
 t CVRMsg_GetDriverInfoResponse_DriverInfo::CVRMsg_GetDriverInfoResponse_DriverInfo()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::CVRMsg_GetDriverInfoResponse_DriverInfo() [clone .cold]
 t CVRMsg_GetDriverInfoResponse_DriverInfo::CVRMsg_GetDriverInfoResponse_DriverInfo(CVRMsg_GetDriverInfoResponse_DriverInfo const&)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::CVRMsg_GetDriverInfoResponse_DriverInfo(CVRMsg_GetDriverInfoResponse_DriverInfo const&) [clone .cold]
 t CVRMsg_GetDriverInfoResponse_DriverInfo::Clear()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::CopyFrom(CVRMsg_GetDriverInfoResponse_DriverInfo const&)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::GetCachedSize() const
 t CVRMsg_GetDriverInfoResponse_DriverInfo::GetMetadata() const
 t CVRMsg_GetDriverInfoResponse_DriverInfo::GetMetadata() const [clone .cold]
 t CVRMsg_GetDriverInfoResponse_DriverInfo::InitAsDefaultInstance()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::IsInitialized() const
 t CVRMsg_GetDriverInfoResponse_DriverInfo::MergeFrom(CVRMsg_GetDriverInfoResponse_DriverInfo const&)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::MergeFrom(CVRMsg_GetDriverInfoResponse_DriverInfo const&) [clone .cold]
 t CVRMsg_GetDriverInfoResponse_DriverInfo::New() const
 t CVRMsg_GetDriverInfoResponse_DriverInfo::New() const [clone .cold]
 t CVRMsg_GetDriverInfoResponse_DriverInfo::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_GetDriverInfoResponse_DriverInfo::SetCachedSize(int) const
 t CVRMsg_GetDriverInfoResponse_DriverInfo::SharedCtor()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::SharedCtor() [clone .cold]
 t CVRMsg_GetDriverInfoResponse_DriverInfo::SharedDtor()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::Swap(CVRMsg_GetDriverInfoResponse_DriverInfo*)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::default_instance()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::descriptor()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::descriptor() [clone .cold]
 t CVRMsg_GetDriverInfoResponse_DriverInfo::mutable_driver_id()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::release_driver_id()
 t CVRMsg_GetDriverInfoResponse_DriverInfo::set_allocated_driver_id(std::string*)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::set_driver_id(char const*)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::set_driver_id(char const*, unsigned long)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::set_driver_id(std::string const&)
 t CVRMsg_GetDriverInfoResponse_DriverInfo::~CVRMsg_GetDriverInfoResponse_DriverInfo()
 t CVRMsg_Input_GetActionBindings::ByteSize() const
 t CVRMsg_Input_GetActionBindings::CVRMsg_Input_GetActionBindings()
 t CVRMsg_Input_GetActionBindings::CVRMsg_Input_GetActionBindings() [clone .cold]
 t CVRMsg_Input_GetActionBindings::CVRMsg_Input_GetActionBindings(CVRMsg_Input_GetActionBindings const&)
 t CVRMsg_Input_GetActionBindings::CVRMsg_Input_GetActionBindings(CVRMsg_Input_GetActionBindings const&) [clone .cold]
 t CVRMsg_Input_GetActionBindings::Clear()
 t CVRMsg_Input_GetActionBindings::CopyFrom(CVRMsg_Input_GetActionBindings const&)
 t CVRMsg_Input_GetActionBindings::GetCachedSize() const
 t CVRMsg_Input_GetActionBindings::GetMetadata() const
 t CVRMsg_Input_GetActionBindings::GetMetadata() const [clone .cold]
 t CVRMsg_Input_GetActionBindings::InitAsDefaultInstance()
 t CVRMsg_Input_GetActionBindings::IsInitialized() const
 t CVRMsg_Input_GetActionBindings::MergeFrom(CVRMsg_Input_GetActionBindings const&)
 t CVRMsg_Input_GetActionBindings::MergeFrom(CVRMsg_Input_GetActionBindings const&) [clone .cold]
 t CVRMsg_Input_GetActionBindings::New() const
 t CVRMsg_Input_GetActionBindings::New() const [clone .cold]
 t CVRMsg_Input_GetActionBindings::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Input_GetActionBindings::SetCachedSize(int) const
 t CVRMsg_Input_GetActionBindings::SharedCtor()
 t CVRMsg_Input_GetActionBindings::SharedDtor()
 t CVRMsg_Input_GetActionBindings::Swap(CVRMsg_Input_GetActionBindings*)
 t CVRMsg_Input_GetActionBindings::default_instance()
 t CVRMsg_Input_GetActionBindings::descriptor()
 t CVRMsg_Input_GetActionBindings::descriptor() [clone .cold]
 t CVRMsg_Input_GetActionBindings::~CVRMsg_Input_GetActionBindings()
 t CVRMsg_Input_GetActionBindingsResponse::ByteSize() const
 t CVRMsg_Input_GetActionBindingsResponse::CVRMsg_Input_GetActionBindingsResponse()
 t CVRMsg_Input_GetActionBindingsResponse::CVRMsg_Input_GetActionBindingsResponse() [clone .cold]
 t CVRMsg_Input_GetActionBindingsResponse::CVRMsg_Input_GetActionBindingsResponse(CVRMsg_Input_GetActionBindingsResponse const&)
 t CVRMsg_Input_GetActionBindingsResponse::CVRMsg_Input_GetActionBindingsResponse(CVRMsg_Input_GetActionBindingsResponse const&) [clone .cold]
 t CVRMsg_Input_GetActionBindingsResponse::Clear()
 t CVRMsg_Input_GetActionBindingsResponse::CopyFrom(CVRMsg_Input_GetActionBindingsResponse const&)
 t CVRMsg_Input_GetActionBindingsResponse::GetCachedSize() const
 t CVRMsg_Input_GetActionBindingsResponse::GetMetadata() const
 t CVRMsg_Input_GetActionBindingsResponse::GetMetadata() const [clone .cold]
 t CVRMsg_Input_GetActionBindingsResponse::InitAsDefaultInstance()
 t CVRMsg_Input_GetActionBindingsResponse::IsInitialized() const
 t CVRMsg_Input_GetActionBindingsResponse::MergeFrom(CVRMsg_Input_GetActionBindingsResponse const&)
 t CVRMsg_Input_GetActionBindingsResponse::MergeFrom(CVRMsg_Input_GetActionBindingsResponse const&) [clone .cold]
 t CVRMsg_Input_GetActionBindingsResponse::New() const
 t CVRMsg_Input_GetActionBindingsResponse::New() const [clone .cold]
 t CVRMsg_Input_GetActionBindingsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Input_GetActionBindingsResponse::SetCachedSize(int) const
 t CVRMsg_Input_GetActionBindingsResponse::SharedCtor()
 t CVRMsg_Input_GetActionBindingsResponse::SharedCtor() [clone .cold]
 t CVRMsg_Input_GetActionBindingsResponse::SharedDtor()
 t CVRMsg_Input_GetActionBindingsResponse::Swap(CVRMsg_Input_GetActionBindingsResponse*)
 t CVRMsg_Input_GetActionBindingsResponse::default_instance()
 t CVRMsg_Input_GetActionBindingsResponse::descriptor()
 t CVRMsg_Input_GetActionBindingsResponse::descriptor() [clone .cold]
 t CVRMsg_Input_GetActionBindingsResponse::mutable_action_manifest_file_path()
 t CVRMsg_Input_GetActionBindingsResponse::mutable_action_manifest_json()
 t CVRMsg_Input_GetActionBindingsResponse::release_action_manifest_file_path()
 t CVRMsg_Input_GetActionBindingsResponse::release_action_manifest_json()
 t CVRMsg_Input_GetActionBindingsResponse::set_action_manifest_file_path(char const*)
 t CVRMsg_Input_GetActionBindingsResponse::set_action_manifest_file_path(char const*, unsigned long)
 t CVRMsg_Input_GetActionBindingsResponse::set_action_manifest_file_path(std::string const&)
 t CVRMsg_Input_GetActionBindingsResponse::set_action_manifest_json(char const*)
 t CVRMsg_Input_GetActionBindingsResponse::set_action_manifest_json(char const*, unsigned long)
 t CVRMsg_Input_GetActionBindingsResponse::set_action_manifest_json(std::string const&)
 t CVRMsg_Input_GetActionBindingsResponse::set_allocated_action_manifest_file_path(std::string*)
 t CVRMsg_Input_GetActionBindingsResponse::set_allocated_action_manifest_json(std::string*)
 t CVRMsg_Input_GetActionBindingsResponse::~CVRMsg_Input_GetActionBindingsResponse()
 t CVRMsg_Input_GetActionBindingsResponse_LoadResult_IsValid(int)
 t CVRMsg_Input_GetActionBindingsResponse_LoadResult_descriptor()
 t CVRMsg_Input_GetActionBindingsResponse_LoadResult_descriptor() [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedName::ByteSize() const
 t CVRMsg_Input_GetOriginLocalizedName::CVRMsg_Input_GetOriginLocalizedName()
 t CVRMsg_Input_GetOriginLocalizedName::CVRMsg_Input_GetOriginLocalizedName() [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedName::CVRMsg_Input_GetOriginLocalizedName(CVRMsg_Input_GetOriginLocalizedName const&)
 t CVRMsg_Input_GetOriginLocalizedName::CVRMsg_Input_GetOriginLocalizedName(CVRMsg_Input_GetOriginLocalizedName const&) [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedName::Clear()
 t CVRMsg_Input_GetOriginLocalizedName::CopyFrom(CVRMsg_Input_GetOriginLocalizedName const&)
 t CVRMsg_Input_GetOriginLocalizedName::GetCachedSize() const
 t CVRMsg_Input_GetOriginLocalizedName::GetMetadata() const
 t CVRMsg_Input_GetOriginLocalizedName::GetMetadata() const [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedName::InitAsDefaultInstance()
 t CVRMsg_Input_GetOriginLocalizedName::IsInitialized() const
 t CVRMsg_Input_GetOriginLocalizedName::MergeFrom(CVRMsg_Input_GetOriginLocalizedName const&)
 t CVRMsg_Input_GetOriginLocalizedName::MergeFrom(CVRMsg_Input_GetOriginLocalizedName const&) [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedName::New() const
 t CVRMsg_Input_GetOriginLocalizedName::New() const [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedName::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Input_GetOriginLocalizedName::SetCachedSize(int) const
 t CVRMsg_Input_GetOriginLocalizedName::SharedCtor()
 t CVRMsg_Input_GetOriginLocalizedName::SharedDtor()
 t CVRMsg_Input_GetOriginLocalizedName::Swap(CVRMsg_Input_GetOriginLocalizedName*)
 t CVRMsg_Input_GetOriginLocalizedName::default_instance()
 t CVRMsg_Input_GetOriginLocalizedName::descriptor()
 t CVRMsg_Input_GetOriginLocalizedName::descriptor() [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedName::~CVRMsg_Input_GetOriginLocalizedName()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::ByteSize() const
 t CVRMsg_Input_GetOriginLocalizedNameResponse::CVRMsg_Input_GetOriginLocalizedNameResponse()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::CVRMsg_Input_GetOriginLocalizedNameResponse() [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedNameResponse::CVRMsg_Input_GetOriginLocalizedNameResponse(CVRMsg_Input_GetOriginLocalizedNameResponse const&)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::CVRMsg_Input_GetOriginLocalizedNameResponse(CVRMsg_Input_GetOriginLocalizedNameResponse const&) [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedNameResponse::Clear()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::CopyFrom(CVRMsg_Input_GetOriginLocalizedNameResponse const&)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::GetCachedSize() const
 t CVRMsg_Input_GetOriginLocalizedNameResponse::GetMetadata() const
 t CVRMsg_Input_GetOriginLocalizedNameResponse::GetMetadata() const [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedNameResponse::InitAsDefaultInstance()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::IsInitialized() const
 t CVRMsg_Input_GetOriginLocalizedNameResponse::MergeFrom(CVRMsg_Input_GetOriginLocalizedNameResponse const&)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::MergeFrom(CVRMsg_Input_GetOriginLocalizedNameResponse const&) [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedNameResponse::New() const
 t CVRMsg_Input_GetOriginLocalizedNameResponse::New() const [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedNameResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Input_GetOriginLocalizedNameResponse::SetCachedSize(int) const
 t CVRMsg_Input_GetOriginLocalizedNameResponse::SharedCtor()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::SharedCtor() [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedNameResponse::SharedDtor()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::Swap(CVRMsg_Input_GetOriginLocalizedNameResponse*)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::default_instance()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::descriptor()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::descriptor() [clone .cold]
 t CVRMsg_Input_GetOriginLocalizedNameResponse::mutable_localized_name()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::release_localized_name()
 t CVRMsg_Input_GetOriginLocalizedNameResponse::set_allocated_localized_name(std::string*)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::set_localized_name(char const*)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::set_localized_name(char const*, unsigned long)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::set_localized_name(std::string const&)
 t CVRMsg_Input_GetOriginLocalizedNameResponse::~CVRMsg_Input_GetOriginLocalizedNameResponse()
 t CVRMsg_Input_SetActionManifestPath::ByteSize() const
 t CVRMsg_Input_SetActionManifestPath::CVRMsg_Input_SetActionManifestPath()
 t CVRMsg_Input_SetActionManifestPath::CVRMsg_Input_SetActionManifestPath() [clone .cold]
 t CVRMsg_Input_SetActionManifestPath::CVRMsg_Input_SetActionManifestPath(CVRMsg_Input_SetActionManifestPath const&)
 t CVRMsg_Input_SetActionManifestPath::CVRMsg_Input_SetActionManifestPath(CVRMsg_Input_SetActionManifestPath const&) [clone .cold]
 t CVRMsg_Input_SetActionManifestPath::Clear()
 t CVRMsg_Input_SetActionManifestPath::CopyFrom(CVRMsg_Input_SetActionManifestPath const&)
 t CVRMsg_Input_SetActionManifestPath::GetCachedSize() const
 t CVRMsg_Input_SetActionManifestPath::GetMetadata() const
 t CVRMsg_Input_SetActionManifestPath::GetMetadata() const [clone .cold]
 t CVRMsg_Input_SetActionManifestPath::InitAsDefaultInstance()
 t CVRMsg_Input_SetActionManifestPath::IsInitialized() const
 t CVRMsg_Input_SetActionManifestPath::MergeFrom(CVRMsg_Input_SetActionManifestPath const&)
 t CVRMsg_Input_SetActionManifestPath::MergeFrom(CVRMsg_Input_SetActionManifestPath const&) [clone .cold]
 t CVRMsg_Input_SetActionManifestPath::New() const
 t CVRMsg_Input_SetActionManifestPath::New() const [clone .cold]
 t CVRMsg_Input_SetActionManifestPath::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Input_SetActionManifestPath::SetCachedSize(int) const
 t CVRMsg_Input_SetActionManifestPath::SharedCtor()
 t CVRMsg_Input_SetActionManifestPath::SharedCtor() [clone .cold]
 t CVRMsg_Input_SetActionManifestPath::SharedDtor()
 t CVRMsg_Input_SetActionManifestPath::Swap(CVRMsg_Input_SetActionManifestPath*)
 t CVRMsg_Input_SetActionManifestPath::default_instance()
 t CVRMsg_Input_SetActionManifestPath::descriptor()
 t CVRMsg_Input_SetActionManifestPath::descriptor() [clone .cold]
 t CVRMsg_Input_SetActionManifestPath::mutable_path()
 t CVRMsg_Input_SetActionManifestPath::release_path()
 t CVRMsg_Input_SetActionManifestPath::set_allocated_path(std::string*)
 t CVRMsg_Input_SetActionManifestPath::set_path(char const*)
 t CVRMsg_Input_SetActionManifestPath::set_path(char const*, unsigned long)
 t CVRMsg_Input_SetActionManifestPath::set_path(std::string const&)
 t CVRMsg_Input_SetActionManifestPath::~CVRMsg_Input_SetActionManifestPath()
 t CVRMsg_Input_SetActionManifestPathResponse::ByteSize() const
 t CVRMsg_Input_SetActionManifestPathResponse::CVRMsg_Input_SetActionManifestPathResponse()
 t CVRMsg_Input_SetActionManifestPathResponse::CVRMsg_Input_SetActionManifestPathResponse() [clone .cold]
 t CVRMsg_Input_SetActionManifestPathResponse::CVRMsg_Input_SetActionManifestPathResponse(CVRMsg_Input_SetActionManifestPathResponse const&)
 t CVRMsg_Input_SetActionManifestPathResponse::CVRMsg_Input_SetActionManifestPathResponse(CVRMsg_Input_SetActionManifestPathResponse const&) [clone .cold]
 t CVRMsg_Input_SetActionManifestPathResponse::Clear()
 t CVRMsg_Input_SetActionManifestPathResponse::CopyFrom(CVRMsg_Input_SetActionManifestPathResponse const&)
 t CVRMsg_Input_SetActionManifestPathResponse::GetCachedSize() const
 t CVRMsg_Input_SetActionManifestPathResponse::GetMetadata() const
 t CVRMsg_Input_SetActionManifestPathResponse::GetMetadata() const [clone .cold]
 t CVRMsg_Input_SetActionManifestPathResponse::InitAsDefaultInstance()
 t CVRMsg_Input_SetActionManifestPathResponse::IsInitialized() const
 t CVRMsg_Input_SetActionManifestPathResponse::MergeFrom(CVRMsg_Input_SetActionManifestPathResponse const&)
 t CVRMsg_Input_SetActionManifestPathResponse::MergeFrom(CVRMsg_Input_SetActionManifestPathResponse const&) [clone .cold]
 t CVRMsg_Input_SetActionManifestPathResponse::New() const
 t CVRMsg_Input_SetActionManifestPathResponse::New() const [clone .cold]
 t CVRMsg_Input_SetActionManifestPathResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Input_SetActionManifestPathResponse::SetCachedSize(int) const
 t CVRMsg_Input_SetActionManifestPathResponse::SharedCtor()
 t CVRMsg_Input_SetActionManifestPathResponse::SharedDtor()
 t CVRMsg_Input_SetActionManifestPathResponse::Swap(CVRMsg_Input_SetActionManifestPathResponse*)
 t CVRMsg_Input_SetActionManifestPathResponse::default_instance()
 t CVRMsg_Input_SetActionManifestPathResponse::descriptor()
 t CVRMsg_Input_SetActionManifestPathResponse::descriptor() [clone .cold]
 t CVRMsg_Input_SetActionManifestPathResponse::~CVRMsg_Input_SetActionManifestPathResponse()
 t CVRMsg_Input_SetXrInputConfig::ByteSize() const
 t CVRMsg_Input_SetXrInputConfig::CVRMsg_Input_SetXrInputConfig()
 t CVRMsg_Input_SetXrInputConfig::CVRMsg_Input_SetXrInputConfig() [clone .cold]
 t CVRMsg_Input_SetXrInputConfig::CVRMsg_Input_SetXrInputConfig(CVRMsg_Input_SetXrInputConfig const&)
 t CVRMsg_Input_SetXrInputConfig::CVRMsg_Input_SetXrInputConfig(CVRMsg_Input_SetXrInputConfig const&) [clone .cold]
 t CVRMsg_Input_SetXrInputConfig::Clear()
 t CVRMsg_Input_SetXrInputConfig::CopyFrom(CVRMsg_Input_SetXrInputConfig const&)
 t CVRMsg_Input_SetXrInputConfig::GetCachedSize() const
 t CVRMsg_Input_SetXrInputConfig::GetMetadata() const
 t CVRMsg_Input_SetXrInputConfig::GetMetadata() const [clone .cold]
 t CVRMsg_Input_SetXrInputConfig::InitAsDefaultInstance()
 t CVRMsg_Input_SetXrInputConfig::IsInitialized() const
 t CVRMsg_Input_SetXrInputConfig::MergeFrom(CVRMsg_Input_SetXrInputConfig const&)
 t CVRMsg_Input_SetXrInputConfig::MergeFrom(CVRMsg_Input_SetXrInputConfig const&) [clone .cold]
 t CVRMsg_Input_SetXrInputConfig::New() const
 t CVRMsg_Input_SetXrInputConfig::New() const [clone .cold]
 t CVRMsg_Input_SetXrInputConfig::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Input_SetXrInputConfig::SetCachedSize(int) const
 t CVRMsg_Input_SetXrInputConfig::SharedCtor()
 t CVRMsg_Input_SetXrInputConfig::SharedCtor() [clone .cold]
 t CVRMsg_Input_SetXrInputConfig::SharedDtor()
 t CVRMsg_Input_SetXrInputConfig::Swap(CVRMsg_Input_SetXrInputConfig*)
 t CVRMsg_Input_SetXrInputConfig::default_instance()
 t CVRMsg_Input_SetXrInputConfig::descriptor()
 t CVRMsg_Input_SetXrInputConfig::descriptor() [clone .cold]
 t CVRMsg_Input_SetXrInputConfig::mutable_action_manifest()
 t CVRMsg_Input_SetXrInputConfig::release_action_manifest()
 t CVRMsg_Input_SetXrInputConfig::set_action_manifest(char const*)
 t CVRMsg_Input_SetXrInputConfig::set_action_manifest(char const*, unsigned long)
 t CVRMsg_Input_SetXrInputConfig::set_action_manifest(std::string const&)
 t CVRMsg_Input_SetXrInputConfig::set_allocated_action_manifest(std::string*)
 t CVRMsg_Input_SetXrInputConfig::~CVRMsg_Input_SetXrInputConfig()
 t CVRMsg_LaunchApplication::ByteSize() const
 t CVRMsg_LaunchApplication::CVRMsg_LaunchApplication()
 t CVRMsg_LaunchApplication::CVRMsg_LaunchApplication() [clone .cold]
 t CVRMsg_LaunchApplication::CVRMsg_LaunchApplication(CVRMsg_LaunchApplication const&)
 t CVRMsg_LaunchApplication::CVRMsg_LaunchApplication(CVRMsg_LaunchApplication const&) [clone .cold]
 t CVRMsg_LaunchApplication::Clear()
 t CVRMsg_LaunchApplication::CopyFrom(CVRMsg_LaunchApplication const&)
 t CVRMsg_LaunchApplication::GetCachedSize() const
 t CVRMsg_LaunchApplication::GetMetadata() const
 t CVRMsg_LaunchApplication::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchApplication::InitAsDefaultInstance()
 t CVRMsg_LaunchApplication::IsInitialized() const
 t CVRMsg_LaunchApplication::MergeFrom(CVRMsg_LaunchApplication const&)
 t CVRMsg_LaunchApplication::MergeFrom(CVRMsg_LaunchApplication const&) [clone .cold]
 t CVRMsg_LaunchApplication::New() const
 t CVRMsg_LaunchApplication::New() const [clone .cold]
 t CVRMsg_LaunchApplication::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchApplication::SetCachedSize(int) const
 t CVRMsg_LaunchApplication::SharedCtor()
 t CVRMsg_LaunchApplication::SharedCtor() [clone .cold]
 t CVRMsg_LaunchApplication::SharedDtor()
 t CVRMsg_LaunchApplication::Swap(CVRMsg_LaunchApplication*)
 t CVRMsg_LaunchApplication::default_instance()
 t CVRMsg_LaunchApplication::descriptor()
 t CVRMsg_LaunchApplication::descriptor() [clone .cold]
 t CVRMsg_LaunchApplication::mutable_app_key()
 t CVRMsg_LaunchApplication::release_app_key()
 t CVRMsg_LaunchApplication::set_allocated_app_key(std::string*)
 t CVRMsg_LaunchApplication::set_app_key(char const*)
 t CVRMsg_LaunchApplication::set_app_key(char const*, unsigned long)
 t CVRMsg_LaunchApplication::set_app_key(std::string const&)
 t CVRMsg_LaunchApplication::~CVRMsg_LaunchApplication()
 t CVRMsg_LaunchApplicationForMimeType::ByteSize() const
 t CVRMsg_LaunchApplicationForMimeType::CVRMsg_LaunchApplicationForMimeType()
 t CVRMsg_LaunchApplicationForMimeType::CVRMsg_LaunchApplicationForMimeType() [clone .cold]
 t CVRMsg_LaunchApplicationForMimeType::CVRMsg_LaunchApplicationForMimeType(CVRMsg_LaunchApplicationForMimeType const&)
 t CVRMsg_LaunchApplicationForMimeType::CVRMsg_LaunchApplicationForMimeType(CVRMsg_LaunchApplicationForMimeType const&) [clone .cold]
 t CVRMsg_LaunchApplicationForMimeType::Clear()
 t CVRMsg_LaunchApplicationForMimeType::CopyFrom(CVRMsg_LaunchApplicationForMimeType const&)
 t CVRMsg_LaunchApplicationForMimeType::GetCachedSize() const
 t CVRMsg_LaunchApplicationForMimeType::GetMetadata() const
 t CVRMsg_LaunchApplicationForMimeType::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchApplicationForMimeType::InitAsDefaultInstance()
 t CVRMsg_LaunchApplicationForMimeType::IsInitialized() const
 t CVRMsg_LaunchApplicationForMimeType::MergeFrom(CVRMsg_LaunchApplicationForMimeType const&)
 t CVRMsg_LaunchApplicationForMimeType::MergeFrom(CVRMsg_LaunchApplicationForMimeType const&) [clone .cold]
 t CVRMsg_LaunchApplicationForMimeType::New() const
 t CVRMsg_LaunchApplicationForMimeType::New() const [clone .cold]
 t CVRMsg_LaunchApplicationForMimeType::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchApplicationForMimeType::SetCachedSize(int) const
 t CVRMsg_LaunchApplicationForMimeType::SharedCtor()
 t CVRMsg_LaunchApplicationForMimeType::SharedCtor() [clone .cold]
 t CVRMsg_LaunchApplicationForMimeType::SharedDtor()
 t CVRMsg_LaunchApplicationForMimeType::Swap(CVRMsg_LaunchApplicationForMimeType*)
 t CVRMsg_LaunchApplicationForMimeType::default_instance()
 t CVRMsg_LaunchApplicationForMimeType::descriptor()
 t CVRMsg_LaunchApplicationForMimeType::descriptor() [clone .cold]
 t CVRMsg_LaunchApplicationForMimeType::mutable_args()
 t CVRMsg_LaunchApplicationForMimeType::mutable_mime_type()
 t CVRMsg_LaunchApplicationForMimeType::release_args()
 t CVRMsg_LaunchApplicationForMimeType::release_mime_type()
 t CVRMsg_LaunchApplicationForMimeType::set_allocated_args(std::string*)
 t CVRMsg_LaunchApplicationForMimeType::set_allocated_mime_type(std::string*)
 t CVRMsg_LaunchApplicationForMimeType::set_args(char const*)
 t CVRMsg_LaunchApplicationForMimeType::set_args(char const*, unsigned long)
 t CVRMsg_LaunchApplicationForMimeType::set_args(std::string const&)
 t CVRMsg_LaunchApplicationForMimeType::set_mime_type(char const*)
 t CVRMsg_LaunchApplicationForMimeType::set_mime_type(char const*, unsigned long)
 t CVRMsg_LaunchApplicationForMimeType::set_mime_type(std::string const&)
 t CVRMsg_LaunchApplicationForMimeType::~CVRMsg_LaunchApplicationForMimeType()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::ByteSize() const
 t CVRMsg_LaunchApplicationForMimeTypeResponse::CVRMsg_LaunchApplicationForMimeTypeResponse()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::CVRMsg_LaunchApplicationForMimeTypeResponse() [clone .cold]
 t CVRMsg_LaunchApplicationForMimeTypeResponse::CVRMsg_LaunchApplicationForMimeTypeResponse(CVRMsg_LaunchApplicationForMimeTypeResponse const&)
 t CVRMsg_LaunchApplicationForMimeTypeResponse::CVRMsg_LaunchApplicationForMimeTypeResponse(CVRMsg_LaunchApplicationForMimeTypeResponse const&) [clone .cold]
 t CVRMsg_LaunchApplicationForMimeTypeResponse::Clear()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::CopyFrom(CVRMsg_LaunchApplicationForMimeTypeResponse const&)
 t CVRMsg_LaunchApplicationForMimeTypeResponse::GetCachedSize() const
 t CVRMsg_LaunchApplicationForMimeTypeResponse::GetMetadata() const
 t CVRMsg_LaunchApplicationForMimeTypeResponse::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchApplicationForMimeTypeResponse::InitAsDefaultInstance()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::IsInitialized() const
 t CVRMsg_LaunchApplicationForMimeTypeResponse::MergeFrom(CVRMsg_LaunchApplicationForMimeTypeResponse const&)
 t CVRMsg_LaunchApplicationForMimeTypeResponse::MergeFrom(CVRMsg_LaunchApplicationForMimeTypeResponse const&) [clone .cold]
 t CVRMsg_LaunchApplicationForMimeTypeResponse::New() const
 t CVRMsg_LaunchApplicationForMimeTypeResponse::New() const [clone .cold]
 t CVRMsg_LaunchApplicationForMimeTypeResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchApplicationForMimeTypeResponse::SetCachedSize(int) const
 t CVRMsg_LaunchApplicationForMimeTypeResponse::SharedCtor()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::SharedDtor()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::Swap(CVRMsg_LaunchApplicationForMimeTypeResponse*)
 t CVRMsg_LaunchApplicationForMimeTypeResponse::default_instance()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::descriptor()
 t CVRMsg_LaunchApplicationForMimeTypeResponse::descriptor() [clone .cold]
 t CVRMsg_LaunchApplicationForMimeTypeResponse::~CVRMsg_LaunchApplicationForMimeTypeResponse()
 t CVRMsg_LaunchApplicationResponse::ByteSize() const
 t CVRMsg_LaunchApplicationResponse::CVRMsg_LaunchApplicationResponse()
 t CVRMsg_LaunchApplicationResponse::CVRMsg_LaunchApplicationResponse() [clone .cold]
 t CVRMsg_LaunchApplicationResponse::CVRMsg_LaunchApplicationResponse(CVRMsg_LaunchApplicationResponse const&)
 t CVRMsg_LaunchApplicationResponse::CVRMsg_LaunchApplicationResponse(CVRMsg_LaunchApplicationResponse const&) [clone .cold]
 t CVRMsg_LaunchApplicationResponse::Clear()
 t CVRMsg_LaunchApplicationResponse::CopyFrom(CVRMsg_LaunchApplicationResponse const&)
 t CVRMsg_LaunchApplicationResponse::GetCachedSize() const
 t CVRMsg_LaunchApplicationResponse::GetMetadata() const
 t CVRMsg_LaunchApplicationResponse::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchApplicationResponse::InitAsDefaultInstance()
 t CVRMsg_LaunchApplicationResponse::IsInitialized() const
 t CVRMsg_LaunchApplicationResponse::MergeFrom(CVRMsg_LaunchApplicationResponse const&)
 t CVRMsg_LaunchApplicationResponse::MergeFrom(CVRMsg_LaunchApplicationResponse const&) [clone .cold]
 t CVRMsg_LaunchApplicationResponse::New() const
 t CVRMsg_LaunchApplicationResponse::New() const [clone .cold]
 t CVRMsg_LaunchApplicationResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchApplicationResponse::SetCachedSize(int) const
 t CVRMsg_LaunchApplicationResponse::SharedCtor()
 t CVRMsg_LaunchApplicationResponse::SharedDtor()
 t CVRMsg_LaunchApplicationResponse::Swap(CVRMsg_LaunchApplicationResponse*)
 t CVRMsg_LaunchApplicationResponse::default_instance()
 t CVRMsg_LaunchApplicationResponse::descriptor()
 t CVRMsg_LaunchApplicationResponse::descriptor() [clone .cold]
 t CVRMsg_LaunchApplicationResponse::~CVRMsg_LaunchApplicationResponse()
 t CVRMsg_LaunchInternalProcess::ByteSize() const
 t CVRMsg_LaunchInternalProcess::CVRMsg_LaunchInternalProcess()
 t CVRMsg_LaunchInternalProcess::CVRMsg_LaunchInternalProcess() [clone .cold]
 t CVRMsg_LaunchInternalProcess::CVRMsg_LaunchInternalProcess(CVRMsg_LaunchInternalProcess const&)
 t CVRMsg_LaunchInternalProcess::CVRMsg_LaunchInternalProcess(CVRMsg_LaunchInternalProcess const&) [clone .cold]
 t CVRMsg_LaunchInternalProcess::Clear()
 t CVRMsg_LaunchInternalProcess::CopyFrom(CVRMsg_LaunchInternalProcess const&)
 t CVRMsg_LaunchInternalProcess::GetCachedSize() const
 t CVRMsg_LaunchInternalProcess::GetMetadata() const
 t CVRMsg_LaunchInternalProcess::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchInternalProcess::InitAsDefaultInstance()
 t CVRMsg_LaunchInternalProcess::IsInitialized() const
 t CVRMsg_LaunchInternalProcess::MergeFrom(CVRMsg_LaunchInternalProcess const&)
 t CVRMsg_LaunchInternalProcess::MergeFrom(CVRMsg_LaunchInternalProcess const&) [clone .cold]
 t CVRMsg_LaunchInternalProcess::New() const
 t CVRMsg_LaunchInternalProcess::New() const [clone .cold]
 t CVRMsg_LaunchInternalProcess::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchInternalProcess::SetCachedSize(int) const
 t CVRMsg_LaunchInternalProcess::SharedCtor()
 t CVRMsg_LaunchInternalProcess::SharedCtor() [clone .cold]
 t CVRMsg_LaunchInternalProcess::SharedDtor()
 t CVRMsg_LaunchInternalProcess::Swap(CVRMsg_LaunchInternalProcess*)
 t CVRMsg_LaunchInternalProcess::default_instance()
 t CVRMsg_LaunchInternalProcess::descriptor()
 t CVRMsg_LaunchInternalProcess::descriptor() [clone .cold]
 t CVRMsg_LaunchInternalProcess::mutable_arguments()
 t CVRMsg_LaunchInternalProcess::mutable_binary_path()
 t CVRMsg_LaunchInternalProcess::mutable_working_directory()
 t CVRMsg_LaunchInternalProcess::release_arguments()
 t CVRMsg_LaunchInternalProcess::release_binary_path()
 t CVRMsg_LaunchInternalProcess::release_working_directory()
 t CVRMsg_LaunchInternalProcess::set_allocated_arguments(std::string*)
 t CVRMsg_LaunchInternalProcess::set_allocated_binary_path(std::string*)
 t CVRMsg_LaunchInternalProcess::set_allocated_working_directory(std::string*)
 t CVRMsg_LaunchInternalProcess::set_arguments(char const*)
 t CVRMsg_LaunchInternalProcess::set_arguments(char const*, unsigned long)
 t CVRMsg_LaunchInternalProcess::set_arguments(std::string const&)
 t CVRMsg_LaunchInternalProcess::set_binary_path(char const*)
 t CVRMsg_LaunchInternalProcess::set_binary_path(char const*, unsigned long)
 t CVRMsg_LaunchInternalProcess::set_binary_path(std::string const&)
 t CVRMsg_LaunchInternalProcess::set_working_directory(char const*)
 t CVRMsg_LaunchInternalProcess::set_working_directory(char const*, unsigned long)
 t CVRMsg_LaunchInternalProcess::set_working_directory(std::string const&)
 t CVRMsg_LaunchInternalProcess::~CVRMsg_LaunchInternalProcess()
 t CVRMsg_LaunchInternalProcessResponse::ByteSize() const
 t CVRMsg_LaunchInternalProcessResponse::CVRMsg_LaunchInternalProcessResponse()
 t CVRMsg_LaunchInternalProcessResponse::CVRMsg_LaunchInternalProcessResponse() [clone .cold]
 t CVRMsg_LaunchInternalProcessResponse::CVRMsg_LaunchInternalProcessResponse(CVRMsg_LaunchInternalProcessResponse const&)
 t CVRMsg_LaunchInternalProcessResponse::CVRMsg_LaunchInternalProcessResponse(CVRMsg_LaunchInternalProcessResponse const&) [clone .cold]
 t CVRMsg_LaunchInternalProcessResponse::Clear()
 t CVRMsg_LaunchInternalProcessResponse::CopyFrom(CVRMsg_LaunchInternalProcessResponse const&)
 t CVRMsg_LaunchInternalProcessResponse::GetCachedSize() const
 t CVRMsg_LaunchInternalProcessResponse::GetMetadata() const
 t CVRMsg_LaunchInternalProcessResponse::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchInternalProcessResponse::InitAsDefaultInstance()
 t CVRMsg_LaunchInternalProcessResponse::IsInitialized() const
 t CVRMsg_LaunchInternalProcessResponse::MergeFrom(CVRMsg_LaunchInternalProcessResponse const&)
 t CVRMsg_LaunchInternalProcessResponse::MergeFrom(CVRMsg_LaunchInternalProcessResponse const&) [clone .cold]
 t CVRMsg_LaunchInternalProcessResponse::New() const
 t CVRMsg_LaunchInternalProcessResponse::New() const [clone .cold]
 t CVRMsg_LaunchInternalProcessResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchInternalProcessResponse::SetCachedSize(int) const
 t CVRMsg_LaunchInternalProcessResponse::SharedCtor()
 t CVRMsg_LaunchInternalProcessResponse::SharedDtor()
 t CVRMsg_LaunchInternalProcessResponse::Swap(CVRMsg_LaunchInternalProcessResponse*)
 t CVRMsg_LaunchInternalProcessResponse::default_instance()
 t CVRMsg_LaunchInternalProcessResponse::descriptor()
 t CVRMsg_LaunchInternalProcessResponse::descriptor() [clone .cold]
 t CVRMsg_LaunchInternalProcessResponse::~CVRMsg_LaunchInternalProcessResponse()
 t CVRMsg_LaunchTemplateApplication::ByteSize() const
 t CVRMsg_LaunchTemplateApplication::CVRMsg_LaunchTemplateApplication()
 t CVRMsg_LaunchTemplateApplication::CVRMsg_LaunchTemplateApplication() [clone .cold]
 t CVRMsg_LaunchTemplateApplication::CVRMsg_LaunchTemplateApplication(CVRMsg_LaunchTemplateApplication const&)
 t CVRMsg_LaunchTemplateApplication::CVRMsg_LaunchTemplateApplication(CVRMsg_LaunchTemplateApplication const&) [clone .cold]
 t CVRMsg_LaunchTemplateApplication::Clear()
 t CVRMsg_LaunchTemplateApplication::CopyFrom(CVRMsg_LaunchTemplateApplication const&)
 t CVRMsg_LaunchTemplateApplication::GetCachedSize() const
 t CVRMsg_LaunchTemplateApplication::GetMetadata() const
 t CVRMsg_LaunchTemplateApplication::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchTemplateApplication::InitAsDefaultInstance()
 t CVRMsg_LaunchTemplateApplication::IsInitialized() const
 t CVRMsg_LaunchTemplateApplication::MergeFrom(CVRMsg_LaunchTemplateApplication const&)
 t CVRMsg_LaunchTemplateApplication::MergeFrom(CVRMsg_LaunchTemplateApplication const&) [clone .cold]
 t CVRMsg_LaunchTemplateApplication::New() const
 t CVRMsg_LaunchTemplateApplication::New() const [clone .cold]
 t CVRMsg_LaunchTemplateApplication::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchTemplateApplication::SetCachedSize(int) const
 t CVRMsg_LaunchTemplateApplication::SharedCtor()
 t CVRMsg_LaunchTemplateApplication::SharedCtor() [clone .cold]
 t CVRMsg_LaunchTemplateApplication::SharedDtor()
 t CVRMsg_LaunchTemplateApplication::Swap(CVRMsg_LaunchTemplateApplication*)
 t CVRMsg_LaunchTemplateApplication::default_instance()
 t CVRMsg_LaunchTemplateApplication::descriptor()
 t CVRMsg_LaunchTemplateApplication::descriptor() [clone .cold]
 t CVRMsg_LaunchTemplateApplication::mutable_requested_app_key()
 t CVRMsg_LaunchTemplateApplication::mutable_template_app_key()
 t CVRMsg_LaunchTemplateApplication::release_requested_app_key()
 t CVRMsg_LaunchTemplateApplication::release_template_app_key()
 t CVRMsg_LaunchTemplateApplication::set_allocated_requested_app_key(std::string*)
 t CVRMsg_LaunchTemplateApplication::set_allocated_template_app_key(std::string*)
 t CVRMsg_LaunchTemplateApplication::set_requested_app_key(char const*)
 t CVRMsg_LaunchTemplateApplication::set_requested_app_key(char const*, unsigned long)
 t CVRMsg_LaunchTemplateApplication::set_requested_app_key(std::string const&)
 t CVRMsg_LaunchTemplateApplication::set_template_app_key(char const*)
 t CVRMsg_LaunchTemplateApplication::set_template_app_key(char const*, unsigned long)
 t CVRMsg_LaunchTemplateApplication::set_template_app_key(std::string const&)
 t CVRMsg_LaunchTemplateApplication::~CVRMsg_LaunchTemplateApplication()
 t CVRMsg_LaunchTemplateApplicationResponse::ByteSize() const
 t CVRMsg_LaunchTemplateApplicationResponse::CVRMsg_LaunchTemplateApplicationResponse()
 t CVRMsg_LaunchTemplateApplicationResponse::CVRMsg_LaunchTemplateApplicationResponse() [clone .cold]
 t CVRMsg_LaunchTemplateApplicationResponse::CVRMsg_LaunchTemplateApplicationResponse(CVRMsg_LaunchTemplateApplicationResponse const&)
 t CVRMsg_LaunchTemplateApplicationResponse::CVRMsg_LaunchTemplateApplicationResponse(CVRMsg_LaunchTemplateApplicationResponse const&) [clone .cold]
 t CVRMsg_LaunchTemplateApplicationResponse::Clear()
 t CVRMsg_LaunchTemplateApplicationResponse::CopyFrom(CVRMsg_LaunchTemplateApplicationResponse const&)
 t CVRMsg_LaunchTemplateApplicationResponse::GetCachedSize() const
 t CVRMsg_LaunchTemplateApplicationResponse::GetMetadata() const
 t CVRMsg_LaunchTemplateApplicationResponse::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchTemplateApplicationResponse::InitAsDefaultInstance()
 t CVRMsg_LaunchTemplateApplicationResponse::IsInitialized() const
 t CVRMsg_LaunchTemplateApplicationResponse::MergeFrom(CVRMsg_LaunchTemplateApplicationResponse const&)
 t CVRMsg_LaunchTemplateApplicationResponse::MergeFrom(CVRMsg_LaunchTemplateApplicationResponse const&) [clone .cold]
 t CVRMsg_LaunchTemplateApplicationResponse::New() const
 t CVRMsg_LaunchTemplateApplicationResponse::New() const [clone .cold]
 t CVRMsg_LaunchTemplateApplicationResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchTemplateApplicationResponse::SetCachedSize(int) const
 t CVRMsg_LaunchTemplateApplicationResponse::SharedCtor()
 t CVRMsg_LaunchTemplateApplicationResponse::SharedDtor()
 t CVRMsg_LaunchTemplateApplicationResponse::Swap(CVRMsg_LaunchTemplateApplicationResponse*)
 t CVRMsg_LaunchTemplateApplicationResponse::default_instance()
 t CVRMsg_LaunchTemplateApplicationResponse::descriptor()
 t CVRMsg_LaunchTemplateApplicationResponse::descriptor() [clone .cold]
 t CVRMsg_LaunchTemplateApplicationResponse::~CVRMsg_LaunchTemplateApplicationResponse()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::ByteSize() const
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::CVRMsg_LaunchTemplateApplication_AppOverrideKey()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::CVRMsg_LaunchTemplateApplication_AppOverrideKey() [clone .cold]
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::CVRMsg_LaunchTemplateApplication_AppOverrideKey(CVRMsg_LaunchTemplateApplication_AppOverrideKey const&)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::CVRMsg_LaunchTemplateApplication_AppOverrideKey(CVRMsg_LaunchTemplateApplication_AppOverrideKey const&) [clone .cold]
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::Clear()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::CopyFrom(CVRMsg_LaunchTemplateApplication_AppOverrideKey const&)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::GetCachedSize() const
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::GetMetadata() const
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::GetMetadata() const [clone .cold]
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::InitAsDefaultInstance()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::IsInitialized() const
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::MergeFrom(CVRMsg_LaunchTemplateApplication_AppOverrideKey const&)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::MergeFrom(CVRMsg_LaunchTemplateApplication_AppOverrideKey const&) [clone .cold]
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::New() const
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::New() const [clone .cold]
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::SetCachedSize(int) const
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::SharedCtor()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::SharedCtor() [clone .cold]
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::SharedDtor()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::Swap(CVRMsg_LaunchTemplateApplication_AppOverrideKey*)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::default_instance()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::descriptor()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::descriptor() [clone .cold]
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::mutable_key()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::mutable_value()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::release_key()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::release_value()
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_allocated_key(std::string*)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_allocated_value(std::string*)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_key(char const*)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_key(char const*, unsigned long)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_key(std::string const&)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_value(char const*)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_value(char const*, unsigned long)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::set_value(std::string const&)
 t CVRMsg_LaunchTemplateApplication_AppOverrideKey::~CVRMsg_LaunchTemplateApplication_AppOverrideKey()
 t CVRMsg_LogMessageToServer::ByteSize() const
 t CVRMsg_LogMessageToServer::CVRMsg_LogMessageToServer()
 t CVRMsg_LogMessageToServer::CVRMsg_LogMessageToServer() [clone .cold]
 t CVRMsg_LogMessageToServer::CVRMsg_LogMessageToServer(CVRMsg_LogMessageToServer const&)
 t CVRMsg_LogMessageToServer::CVRMsg_LogMessageToServer(CVRMsg_LogMessageToServer const&) [clone .cold]
 t CVRMsg_LogMessageToServer::Clear()
 t CVRMsg_LogMessageToServer::CopyFrom(CVRMsg_LogMessageToServer const&)
 t CVRMsg_LogMessageToServer::GetCachedSize() const
 t CVRMsg_LogMessageToServer::GetMetadata() const
 t CVRMsg_LogMessageToServer::GetMetadata() const [clone .cold]
 t CVRMsg_LogMessageToServer::InitAsDefaultInstance()
 t CVRMsg_LogMessageToServer::IsInitialized() const
 t CVRMsg_LogMessageToServer::MergeFrom(CVRMsg_LogMessageToServer const&)
 t CVRMsg_LogMessageToServer::MergeFrom(CVRMsg_LogMessageToServer const&) [clone .cold]
 t CVRMsg_LogMessageToServer::New() const
 t CVRMsg_LogMessageToServer::New() const [clone .cold]
 t CVRMsg_LogMessageToServer::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_LogMessageToServer::SetCachedSize(int) const
 t CVRMsg_LogMessageToServer::SharedCtor()
 t CVRMsg_LogMessageToServer::SharedCtor() [clone .cold]
 t CVRMsg_LogMessageToServer::SharedDtor()
 t CVRMsg_LogMessageToServer::Swap(CVRMsg_LogMessageToServer*)
 t CVRMsg_LogMessageToServer::default_instance()
 t CVRMsg_LogMessageToServer::descriptor()
 t CVRMsg_LogMessageToServer::descriptor() [clone .cold]
 t CVRMsg_LogMessageToServer::mutable_log_base_name()
 t CVRMsg_LogMessageToServer::mutable_log_message()
 t CVRMsg_LogMessageToServer::release_log_base_name()
 t CVRMsg_LogMessageToServer::release_log_message()
 t CVRMsg_LogMessageToServer::set_allocated_log_base_name(std::string*)
 t CVRMsg_LogMessageToServer::set_allocated_log_message(std::string*)
 t CVRMsg_LogMessageToServer::set_log_base_name(char const*)
 t CVRMsg_LogMessageToServer::set_log_base_name(char const*, unsigned long)
 t CVRMsg_LogMessageToServer::set_log_base_name(std::string const&)
 t CVRMsg_LogMessageToServer::set_log_message(char const*)
 t CVRMsg_LogMessageToServer::set_log_message(char const*, unsigned long)
 t CVRMsg_LogMessageToServer::set_log_message(std::string const&)
 t CVRMsg_LogMessageToServer::~CVRMsg_LogMessageToServer()
 t CVRMsg_MimeType::ByteSize() const
 t CVRMsg_MimeType::CVRMsg_MimeType()
 t CVRMsg_MimeType::CVRMsg_MimeType() [clone .cold]
 t CVRMsg_MimeType::CVRMsg_MimeType(CVRMsg_MimeType const&)
 t CVRMsg_MimeType::CVRMsg_MimeType(CVRMsg_MimeType const&) [clone .cold]
 t CVRMsg_MimeType::Clear()
 t CVRMsg_MimeType::CopyFrom(CVRMsg_MimeType const&)
 t CVRMsg_MimeType::GetCachedSize() const
 t CVRMsg_MimeType::GetMetadata() const
 t CVRMsg_MimeType::GetMetadata() const [clone .cold]
 t CVRMsg_MimeType::InitAsDefaultInstance()
 t CVRMsg_MimeType::IsInitialized() const
 t CVRMsg_MimeType::MergeFrom(CVRMsg_MimeType const&)
 t CVRMsg_MimeType::MergeFrom(CVRMsg_MimeType const&) [clone .cold]
 t CVRMsg_MimeType::New() const
 t CVRMsg_MimeType::New() const [clone .cold]
 t CVRMsg_MimeType::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_MimeType::SetCachedSize(int) const
 t CVRMsg_MimeType::SharedCtor()
 t CVRMsg_MimeType::SharedCtor() [clone .cold]
 t CVRMsg_MimeType::SharedDtor()
 t CVRMsg_MimeType::Swap(CVRMsg_MimeType*)
 t CVRMsg_MimeType::default_instance()
 t CVRMsg_MimeType::descriptor()
 t CVRMsg_MimeType::descriptor() [clone .cold]
 t CVRMsg_MimeType::mutable_mime_type()
 t CVRMsg_MimeType::release_mime_type()
 t CVRMsg_MimeType::set_allocated_mime_type(std::string*)
 t CVRMsg_MimeType::set_mime_type(char const*)
 t CVRMsg_MimeType::set_mime_type(char const*, unsigned long)
 t CVRMsg_MimeType::set_mime_type(std::string const&)
 t CVRMsg_MimeType::~CVRMsg_MimeType()
 t CVRMsg_NoResponse::ByteSize() const
 t CVRMsg_NoResponse::CVRMsg_NoResponse()
 t CVRMsg_NoResponse::CVRMsg_NoResponse() [clone .cold]
 t CVRMsg_NoResponse::CVRMsg_NoResponse(CVRMsg_NoResponse const&)
 t CVRMsg_NoResponse::CVRMsg_NoResponse(CVRMsg_NoResponse const&) [clone .cold]
 t CVRMsg_NoResponse::Clear()
 t CVRMsg_NoResponse::CopyFrom(CVRMsg_NoResponse const&)
 t CVRMsg_NoResponse::GetCachedSize() const
 t CVRMsg_NoResponse::GetMetadata() const
 t CVRMsg_NoResponse::GetMetadata() const [clone .cold]
 t CVRMsg_NoResponse::InitAsDefaultInstance()
 t CVRMsg_NoResponse::IsInitialized() const
 t CVRMsg_NoResponse::MergeFrom(CVRMsg_NoResponse const&)
 t CVRMsg_NoResponse::MergeFrom(CVRMsg_NoResponse const&) [clone .cold]
 t CVRMsg_NoResponse::New() const
 t CVRMsg_NoResponse::New() const [clone .cold]
 t CVRMsg_NoResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_NoResponse::SetCachedSize(int) const
 t CVRMsg_NoResponse::SharedCtor()
 t CVRMsg_NoResponse::SharedDtor()
 t CVRMsg_NoResponse::Swap(CVRMsg_NoResponse*)
 t CVRMsg_NoResponse::default_instance()
 t CVRMsg_NoResponse::descriptor()
 t CVRMsg_NoResponse::descriptor() [clone .cold]
 t CVRMsg_NoResponse::~CVRMsg_NoResponse()
 t CVRMsg_OculusSDKStart::ByteSize() const
 t CVRMsg_OculusSDKStart::CVRMsg_OculusSDKStart()
 t CVRMsg_OculusSDKStart::CVRMsg_OculusSDKStart() [clone .cold]
 t CVRMsg_OculusSDKStart::CVRMsg_OculusSDKStart(CVRMsg_OculusSDKStart const&)
 t CVRMsg_OculusSDKStart::CVRMsg_OculusSDKStart(CVRMsg_OculusSDKStart const&) [clone .cold]
 t CVRMsg_OculusSDKStart::Clear()
 t CVRMsg_OculusSDKStart::CopyFrom(CVRMsg_OculusSDKStart const&)
 t CVRMsg_OculusSDKStart::GetCachedSize() const
 t CVRMsg_OculusSDKStart::GetMetadata() const
 t CVRMsg_OculusSDKStart::GetMetadata() const [clone .cold]
 t CVRMsg_OculusSDKStart::InitAsDefaultInstance()
 t CVRMsg_OculusSDKStart::IsInitialized() const
 t CVRMsg_OculusSDKStart::MergeFrom(CVRMsg_OculusSDKStart const&)
 t CVRMsg_OculusSDKStart::MergeFrom(CVRMsg_OculusSDKStart const&) [clone .cold]
 t CVRMsg_OculusSDKStart::New() const
 t CVRMsg_OculusSDKStart::New() const [clone .cold]
 t CVRMsg_OculusSDKStart::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_OculusSDKStart::SetCachedSize(int) const
 t CVRMsg_OculusSDKStart::SharedCtor()
 t CVRMsg_OculusSDKStart::SharedCtor() [clone .cold]
 t CVRMsg_OculusSDKStart::SharedDtor()
 t CVRMsg_OculusSDKStart::Swap(CVRMsg_OculusSDKStart*)
 t CVRMsg_OculusSDKStart::default_instance()
 t CVRMsg_OculusSDKStart::descriptor()
 t CVRMsg_OculusSDKStart::descriptor() [clone .cold]
 t CVRMsg_OculusSDKStart::mutable_app_key()
 t CVRMsg_OculusSDKStart::release_app_key()
 t CVRMsg_OculusSDKStart::set_allocated_app_key(std::string*)
 t CVRMsg_OculusSDKStart::set_app_key(char const*)
 t CVRMsg_OculusSDKStart::set_app_key(char const*, unsigned long)
 t CVRMsg_OculusSDKStart::set_app_key(std::string const&)
 t CVRMsg_OculusSDKStart::~CVRMsg_OculusSDKStart()
 t CVRMsg_Path_HandleToString::ByteSize() const
 t CVRMsg_Path_HandleToString::CVRMsg_Path_HandleToString()
 t CVRMsg_Path_HandleToString::CVRMsg_Path_HandleToString() [clone .cold]
 t CVRMsg_Path_HandleToString::CVRMsg_Path_HandleToString(CVRMsg_Path_HandleToString const&)
 t CVRMsg_Path_HandleToString::CVRMsg_Path_HandleToString(CVRMsg_Path_HandleToString const&) [clone .cold]
 t CVRMsg_Path_HandleToString::Clear()
 t CVRMsg_Path_HandleToString::CopyFrom(CVRMsg_Path_HandleToString const&)
 t CVRMsg_Path_HandleToString::GetCachedSize() const
 t CVRMsg_Path_HandleToString::GetMetadata() const
 t CVRMsg_Path_HandleToString::GetMetadata() const [clone .cold]
 t CVRMsg_Path_HandleToString::InitAsDefaultInstance()
 t CVRMsg_Path_HandleToString::IsInitialized() const
 t CVRMsg_Path_HandleToString::MergeFrom(CVRMsg_Path_HandleToString const&)
 t CVRMsg_Path_HandleToString::MergeFrom(CVRMsg_Path_HandleToString const&) [clone .cold]
 t CVRMsg_Path_HandleToString::New() const
 t CVRMsg_Path_HandleToString::New() const [clone .cold]
 t CVRMsg_Path_HandleToString::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Path_HandleToString::SetCachedSize(int) const
 t CVRMsg_Path_HandleToString::SharedCtor()
 t CVRMsg_Path_HandleToString::SharedDtor()
 t CVRMsg_Path_HandleToString::Swap(CVRMsg_Path_HandleToString*)
 t CVRMsg_Path_HandleToString::default_instance()
 t CVRMsg_Path_HandleToString::descriptor()
 t CVRMsg_Path_HandleToString::descriptor() [clone .cold]
 t CVRMsg_Path_HandleToString::~CVRMsg_Path_HandleToString()
 t CVRMsg_Path_HandleToStringResponse::ByteSize() const
 t CVRMsg_Path_HandleToStringResponse::CVRMsg_Path_HandleToStringResponse()
 t CVRMsg_Path_HandleToStringResponse::CVRMsg_Path_HandleToStringResponse() [clone .cold]
 t CVRMsg_Path_HandleToStringResponse::CVRMsg_Path_HandleToStringResponse(CVRMsg_Path_HandleToStringResponse const&)
 t CVRMsg_Path_HandleToStringResponse::CVRMsg_Path_HandleToStringResponse(CVRMsg_Path_HandleToStringResponse const&) [clone .cold]
 t CVRMsg_Path_HandleToStringResponse::Clear()
 t CVRMsg_Path_HandleToStringResponse::CopyFrom(CVRMsg_Path_HandleToStringResponse const&)
 t CVRMsg_Path_HandleToStringResponse::GetCachedSize() const
 t CVRMsg_Path_HandleToStringResponse::GetMetadata() const
 t CVRMsg_Path_HandleToStringResponse::GetMetadata() const [clone .cold]
 t CVRMsg_Path_HandleToStringResponse::InitAsDefaultInstance()
 t CVRMsg_Path_HandleToStringResponse::IsInitialized() const
 t CVRMsg_Path_HandleToStringResponse::MergeFrom(CVRMsg_Path_HandleToStringResponse const&)
 t CVRMsg_Path_HandleToStringResponse::MergeFrom(CVRMsg_Path_HandleToStringResponse const&) [clone .cold]
 t CVRMsg_Path_HandleToStringResponse::New() const
 t CVRMsg_Path_HandleToStringResponse::New() const [clone .cold]
 t CVRMsg_Path_HandleToStringResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Path_HandleToStringResponse::SetCachedSize(int) const
 t CVRMsg_Path_HandleToStringResponse::SharedCtor()
 t CVRMsg_Path_HandleToStringResponse::SharedCtor() [clone .cold]
 t CVRMsg_Path_HandleToStringResponse::SharedDtor()
 t CVRMsg_Path_HandleToStringResponse::Swap(CVRMsg_Path_HandleToStringResponse*)
 t CVRMsg_Path_HandleToStringResponse::default_instance()
 t CVRMsg_Path_HandleToStringResponse::descriptor()
 t CVRMsg_Path_HandleToStringResponse::descriptor() [clone .cold]
 t CVRMsg_Path_HandleToStringResponse::mutable_path()
 t CVRMsg_Path_HandleToStringResponse::release_path()
 t CVRMsg_Path_HandleToStringResponse::set_allocated_path(std::string*)
 t CVRMsg_Path_HandleToStringResponse::set_path(char const*)
 t CVRMsg_Path_HandleToStringResponse::set_path(char const*, unsigned long)
 t CVRMsg_Path_HandleToStringResponse::set_path(std::string const&)
 t CVRMsg_Path_HandleToStringResponse::~CVRMsg_Path_HandleToStringResponse()
 t CVRMsg_Path_StringToHandle::ByteSize() const
 t CVRMsg_Path_StringToHandle::CVRMsg_Path_StringToHandle()
 t CVRMsg_Path_StringToHandle::CVRMsg_Path_StringToHandle() [clone .cold]
 t CVRMsg_Path_StringToHandle::CVRMsg_Path_StringToHandle(CVRMsg_Path_StringToHandle const&)
 t CVRMsg_Path_StringToHandle::CVRMsg_Path_StringToHandle(CVRMsg_Path_StringToHandle const&) [clone .cold]
 t CVRMsg_Path_StringToHandle::Clear()
 t CVRMsg_Path_StringToHandle::CopyFrom(CVRMsg_Path_StringToHandle const&)
 t CVRMsg_Path_StringToHandle::GetCachedSize() const
 t CVRMsg_Path_StringToHandle::GetMetadata() const
 t CVRMsg_Path_StringToHandle::GetMetadata() const [clone .cold]
 t CVRMsg_Path_StringToHandle::InitAsDefaultInstance()
 t CVRMsg_Path_StringToHandle::IsInitialized() const
 t CVRMsg_Path_StringToHandle::MergeFrom(CVRMsg_Path_StringToHandle const&)
 t CVRMsg_Path_StringToHandle::MergeFrom(CVRMsg_Path_StringToHandle const&) [clone .cold]
 t CVRMsg_Path_StringToHandle::New() const
 t CVRMsg_Path_StringToHandle::New() const [clone .cold]
 t CVRMsg_Path_StringToHandle::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Path_StringToHandle::SetCachedSize(int) const
 t CVRMsg_Path_StringToHandle::SharedCtor()
 t CVRMsg_Path_StringToHandle::SharedCtor() [clone .cold]
 t CVRMsg_Path_StringToHandle::SharedDtor()
 t CVRMsg_Path_StringToHandle::Swap(CVRMsg_Path_StringToHandle*)
 t CVRMsg_Path_StringToHandle::default_instance()
 t CVRMsg_Path_StringToHandle::descriptor()
 t CVRMsg_Path_StringToHandle::descriptor() [clone .cold]
 t CVRMsg_Path_StringToHandle::mutable_path()
 t CVRMsg_Path_StringToHandle::release_path()
 t CVRMsg_Path_StringToHandle::set_allocated_path(std::string*)
 t CVRMsg_Path_StringToHandle::set_path(char const*)
 t CVRMsg_Path_StringToHandle::set_path(char const*, unsigned long)
 t CVRMsg_Path_StringToHandle::set_path(std::string const&)
 t CVRMsg_Path_StringToHandle::~CVRMsg_Path_StringToHandle()
 t CVRMsg_Path_StringToHandleResponse::ByteSize() const
 t CVRMsg_Path_StringToHandleResponse::CVRMsg_Path_StringToHandleResponse()
 t CVRMsg_Path_StringToHandleResponse::CVRMsg_Path_StringToHandleResponse() [clone .cold]
 t CVRMsg_Path_StringToHandleResponse::CVRMsg_Path_StringToHandleResponse(CVRMsg_Path_StringToHandleResponse const&)
 t CVRMsg_Path_StringToHandleResponse::CVRMsg_Path_StringToHandleResponse(CVRMsg_Path_StringToHandleResponse const&) [clone .cold]
 t CVRMsg_Path_StringToHandleResponse::Clear()
 t CVRMsg_Path_StringToHandleResponse::CopyFrom(CVRMsg_Path_StringToHandleResponse const&)
 t CVRMsg_Path_StringToHandleResponse::GetCachedSize() const
 t CVRMsg_Path_StringToHandleResponse::GetMetadata() const
 t CVRMsg_Path_StringToHandleResponse::GetMetadata() const [clone .cold]
 t CVRMsg_Path_StringToHandleResponse::InitAsDefaultInstance()
 t CVRMsg_Path_StringToHandleResponse::IsInitialized() const
 t CVRMsg_Path_StringToHandleResponse::MergeFrom(CVRMsg_Path_StringToHandleResponse const&)
 t CVRMsg_Path_StringToHandleResponse::MergeFrom(CVRMsg_Path_StringToHandleResponse const&) [clone .cold]
 t CVRMsg_Path_StringToHandleResponse::New() const
 t CVRMsg_Path_StringToHandleResponse::New() const [clone .cold]
 t CVRMsg_Path_StringToHandleResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Path_StringToHandleResponse::SetCachedSize(int) const
 t CVRMsg_Path_StringToHandleResponse::SharedCtor()
 t CVRMsg_Path_StringToHandleResponse::SharedDtor()
 t CVRMsg_Path_StringToHandleResponse::Swap(CVRMsg_Path_StringToHandleResponse*)
 t CVRMsg_Path_StringToHandleResponse::default_instance()
 t CVRMsg_Path_StringToHandleResponse::descriptor()
 t CVRMsg_Path_StringToHandleResponse::descriptor() [clone .cold]
 t CVRMsg_Path_StringToHandleResponse::~CVRMsg_Path_StringToHandleResponse()
 t CVRMsg_PerformApplicationPrelaunchCheck::ByteSize() const
 t CVRMsg_PerformApplicationPrelaunchCheck::CVRMsg_PerformApplicationPrelaunchCheck()
 t CVRMsg_PerformApplicationPrelaunchCheck::CVRMsg_PerformApplicationPrelaunchCheck() [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheck::CVRMsg_PerformApplicationPrelaunchCheck(CVRMsg_PerformApplicationPrelaunchCheck const&)
 t CVRMsg_PerformApplicationPrelaunchCheck::CVRMsg_PerformApplicationPrelaunchCheck(CVRMsg_PerformApplicationPrelaunchCheck const&) [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheck::Clear()
 t CVRMsg_PerformApplicationPrelaunchCheck::CopyFrom(CVRMsg_PerformApplicationPrelaunchCheck const&)
 t CVRMsg_PerformApplicationPrelaunchCheck::GetCachedSize() const
 t CVRMsg_PerformApplicationPrelaunchCheck::GetMetadata() const
 t CVRMsg_PerformApplicationPrelaunchCheck::GetMetadata() const [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheck::InitAsDefaultInstance()
 t CVRMsg_PerformApplicationPrelaunchCheck::IsInitialized() const
 t CVRMsg_PerformApplicationPrelaunchCheck::MergeFrom(CVRMsg_PerformApplicationPrelaunchCheck const&)
 t CVRMsg_PerformApplicationPrelaunchCheck::MergeFrom(CVRMsg_PerformApplicationPrelaunchCheck const&) [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheck::New() const
 t CVRMsg_PerformApplicationPrelaunchCheck::New() const [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheck::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_PerformApplicationPrelaunchCheck::SetCachedSize(int) const
 t CVRMsg_PerformApplicationPrelaunchCheck::SharedCtor()
 t CVRMsg_PerformApplicationPrelaunchCheck::SharedCtor() [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheck::SharedDtor()
 t CVRMsg_PerformApplicationPrelaunchCheck::Swap(CVRMsg_PerformApplicationPrelaunchCheck*)
 t CVRMsg_PerformApplicationPrelaunchCheck::default_instance()
 t CVRMsg_PerformApplicationPrelaunchCheck::descriptor()
 t CVRMsg_PerformApplicationPrelaunchCheck::descriptor() [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheck::mutable_app_key()
 t CVRMsg_PerformApplicationPrelaunchCheck::release_app_key()
 t CVRMsg_PerformApplicationPrelaunchCheck::set_allocated_app_key(std::string*)
 t CVRMsg_PerformApplicationPrelaunchCheck::set_app_key(char const*)
 t CVRMsg_PerformApplicationPrelaunchCheck::set_app_key(char const*, unsigned long)
 t CVRMsg_PerformApplicationPrelaunchCheck::set_app_key(std::string const&)
 t CVRMsg_PerformApplicationPrelaunchCheck::~CVRMsg_PerformApplicationPrelaunchCheck()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::ByteSize() const
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::CVRMsg_PerformApplicationPrelaunchCheckResponse()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::CVRMsg_PerformApplicationPrelaunchCheckResponse() [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::CVRMsg_PerformApplicationPrelaunchCheckResponse(CVRMsg_PerformApplicationPrelaunchCheckResponse const&)
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::CVRMsg_PerformApplicationPrelaunchCheckResponse(CVRMsg_PerformApplicationPrelaunchCheckResponse const&) [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::Clear()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::CopyFrom(CVRMsg_PerformApplicationPrelaunchCheckResponse const&)
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::GetCachedSize() const
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::GetMetadata() const
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::GetMetadata() const [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::InitAsDefaultInstance()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::IsInitialized() const
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::MergeFrom(CVRMsg_PerformApplicationPrelaunchCheckResponse const&)
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::MergeFrom(CVRMsg_PerformApplicationPrelaunchCheckResponse const&) [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::New() const
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::New() const [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::SetCachedSize(int) const
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::SharedCtor()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::SharedDtor()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::Swap(CVRMsg_PerformApplicationPrelaunchCheckResponse*)
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::default_instance()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::descriptor()
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::descriptor() [clone .cold]
 t CVRMsg_PerformApplicationPrelaunchCheckResponse::~CVRMsg_PerformApplicationPrelaunchCheckResponse()
 t CVRMsg_PowerOffTrackedDevice::ByteSize() const
 t CVRMsg_PowerOffTrackedDevice::CVRMsg_PowerOffTrackedDevice()
 t CVRMsg_PowerOffTrackedDevice::CVRMsg_PowerOffTrackedDevice() [clone .cold]
 t CVRMsg_PowerOffTrackedDevice::CVRMsg_PowerOffTrackedDevice(CVRMsg_PowerOffTrackedDevice const&)
 t CVRMsg_PowerOffTrackedDevice::CVRMsg_PowerOffTrackedDevice(CVRMsg_PowerOffTrackedDevice const&) [clone .cold]
 t CVRMsg_PowerOffTrackedDevice::Clear()
 t CVRMsg_PowerOffTrackedDevice::CopyFrom(CVRMsg_PowerOffTrackedDevice const&)
 t CVRMsg_PowerOffTrackedDevice::GetCachedSize() const
 t CVRMsg_PowerOffTrackedDevice::GetMetadata() const
 t CVRMsg_PowerOffTrackedDevice::GetMetadata() const [clone .cold]
 t CVRMsg_PowerOffTrackedDevice::InitAsDefaultInstance()
 t CVRMsg_PowerOffTrackedDevice::IsInitialized() const
 t CVRMsg_PowerOffTrackedDevice::MergeFrom(CVRMsg_PowerOffTrackedDevice const&)
 t CVRMsg_PowerOffTrackedDevice::MergeFrom(CVRMsg_PowerOffTrackedDevice const&) [clone .cold]
 t CVRMsg_PowerOffTrackedDevice::New() const
 t CVRMsg_PowerOffTrackedDevice::New() const [clone .cold]
 t CVRMsg_PowerOffTrackedDevice::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_PowerOffTrackedDevice::SetCachedSize(int) const
 t CVRMsg_PowerOffTrackedDevice::SharedCtor()
 t CVRMsg_PowerOffTrackedDevice::SharedDtor()
 t CVRMsg_PowerOffTrackedDevice::Swap(CVRMsg_PowerOffTrackedDevice*)
 t CVRMsg_PowerOffTrackedDevice::default_instance()
 t CVRMsg_PowerOffTrackedDevice::descriptor()
 t CVRMsg_PowerOffTrackedDevice::descriptor() [clone .cold]
 t CVRMsg_PowerOffTrackedDevice::~CVRMsg_PowerOffTrackedDevice()
 t CVRMsg_PrismPrioritySet::ByteSize() const
 t CVRMsg_PrismPrioritySet::CVRMsg_PrismPrioritySet()
 t CVRMsg_PrismPrioritySet::CVRMsg_PrismPrioritySet() [clone .cold]
 t CVRMsg_PrismPrioritySet::CVRMsg_PrismPrioritySet(CVRMsg_PrismPrioritySet const&)
 t CVRMsg_PrismPrioritySet::CVRMsg_PrismPrioritySet(CVRMsg_PrismPrioritySet const&) [clone .cold]
 t CVRMsg_PrismPrioritySet::Clear()
 t CVRMsg_PrismPrioritySet::CopyFrom(CVRMsg_PrismPrioritySet const&)
 t CVRMsg_PrismPrioritySet::GetCachedSize() const
 t CVRMsg_PrismPrioritySet::GetMetadata() const
 t CVRMsg_PrismPrioritySet::GetMetadata() const [clone .cold]
 t CVRMsg_PrismPrioritySet::InitAsDefaultInstance()
 t CVRMsg_PrismPrioritySet::IsInitialized() const
 t CVRMsg_PrismPrioritySet::MergeFrom(CVRMsg_PrismPrioritySet const&)
 t CVRMsg_PrismPrioritySet::MergeFrom(CVRMsg_PrismPrioritySet const&) [clone .cold]
 t CVRMsg_PrismPrioritySet::New() const
 t CVRMsg_PrismPrioritySet::New() const [clone .cold]
 t CVRMsg_PrismPrioritySet::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_PrismPrioritySet::SetCachedSize(int) const
 t CVRMsg_PrismPrioritySet::SharedCtor()
 t CVRMsg_PrismPrioritySet::SharedDtor()
 t CVRMsg_PrismPrioritySet::Swap(CVRMsg_PrismPrioritySet*)
 t CVRMsg_PrismPrioritySet::default_instance()
 t CVRMsg_PrismPrioritySet::descriptor()
 t CVRMsg_PrismPrioritySet::descriptor() [clone .cold]
 t CVRMsg_PrismPrioritySet::~CVRMsg_PrismPrioritySet()
 t CVRMsg_QuitProcessRequest::ByteSize() const
 t CVRMsg_QuitProcessRequest::CVRMsg_QuitProcessRequest()
 t CVRMsg_QuitProcessRequest::CVRMsg_QuitProcessRequest() [clone .cold]
 t CVRMsg_QuitProcessRequest::CVRMsg_QuitProcessRequest(CVRMsg_QuitProcessRequest const&)
 t CVRMsg_QuitProcessRequest::CVRMsg_QuitProcessRequest(CVRMsg_QuitProcessRequest const&) [clone .cold]
 t CVRMsg_QuitProcessRequest::Clear()
 t CVRMsg_QuitProcessRequest::CopyFrom(CVRMsg_QuitProcessRequest const&)
 t CVRMsg_QuitProcessRequest::GetCachedSize() const
 t CVRMsg_QuitProcessRequest::GetMetadata() const
 t CVRMsg_QuitProcessRequest::GetMetadata() const [clone .cold]
 t CVRMsg_QuitProcessRequest::InitAsDefaultInstance()
 t CVRMsg_QuitProcessRequest::IsInitialized() const
 t CVRMsg_QuitProcessRequest::MergeFrom(CVRMsg_QuitProcessRequest const&)
 t CVRMsg_QuitProcessRequest::MergeFrom(CVRMsg_QuitProcessRequest const&) [clone .cold]
 t CVRMsg_QuitProcessRequest::New() const
 t CVRMsg_QuitProcessRequest::New() const [clone .cold]
 t CVRMsg_QuitProcessRequest::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_QuitProcessRequest::SetCachedSize(int) const
 t CVRMsg_QuitProcessRequest::SharedCtor()
 t CVRMsg_QuitProcessRequest::SharedDtor()
 t CVRMsg_QuitProcessRequest::Swap(CVRMsg_QuitProcessRequest*)
 t CVRMsg_QuitProcessRequest::default_instance()
 t CVRMsg_QuitProcessRequest::descriptor()
 t CVRMsg_QuitProcessRequest::descriptor() [clone .cold]
 t CVRMsg_QuitProcessRequest::~CVRMsg_QuitProcessRequest()
 t CVRMsg_QuitProcessResponse::ByteSize() const
 t CVRMsg_QuitProcessResponse::CVRMsg_QuitProcessResponse()
 t CVRMsg_QuitProcessResponse::CVRMsg_QuitProcessResponse() [clone .cold]
 t CVRMsg_QuitProcessResponse::CVRMsg_QuitProcessResponse(CVRMsg_QuitProcessResponse const&)
 t CVRMsg_QuitProcessResponse::CVRMsg_QuitProcessResponse(CVRMsg_QuitProcessResponse const&) [clone .cold]
 t CVRMsg_QuitProcessResponse::Clear()
 t CVRMsg_QuitProcessResponse::CopyFrom(CVRMsg_QuitProcessResponse const&)
 t CVRMsg_QuitProcessResponse::GetCachedSize() const
 t CVRMsg_QuitProcessResponse::GetMetadata() const
 t CVRMsg_QuitProcessResponse::GetMetadata() const [clone .cold]
 t CVRMsg_QuitProcessResponse::InitAsDefaultInstance()
 t CVRMsg_QuitProcessResponse::IsInitialized() const
 t CVRMsg_QuitProcessResponse::MergeFrom(CVRMsg_QuitProcessResponse const&)
 t CVRMsg_QuitProcessResponse::MergeFrom(CVRMsg_QuitProcessResponse const&) [clone .cold]
 t CVRMsg_QuitProcessResponse::New() const
 t CVRMsg_QuitProcessResponse::New() const [clone .cold]
 t CVRMsg_QuitProcessResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_QuitProcessResponse::SetCachedSize(int) const
 t CVRMsg_QuitProcessResponse::SharedCtor()
 t CVRMsg_QuitProcessResponse::SharedDtor()
 t CVRMsg_QuitProcessResponse::Swap(CVRMsg_QuitProcessResponse*)
 t CVRMsg_QuitProcessResponse::default_instance()
 t CVRMsg_QuitProcessResponse::descriptor()
 t CVRMsg_QuitProcessResponse::descriptor() [clone .cold]
 t CVRMsg_QuitProcessResponse::~CVRMsg_QuitProcessResponse()
 t CVRMsg_RegisterExternalWebRoot::ByteSize() const
 t CVRMsg_RegisterExternalWebRoot::CVRMsg_RegisterExternalWebRoot()
 t CVRMsg_RegisterExternalWebRoot::CVRMsg_RegisterExternalWebRoot() [clone .cold]
 t CVRMsg_RegisterExternalWebRoot::CVRMsg_RegisterExternalWebRoot(CVRMsg_RegisterExternalWebRoot const&)
 t CVRMsg_RegisterExternalWebRoot::CVRMsg_RegisterExternalWebRoot(CVRMsg_RegisterExternalWebRoot const&) [clone .cold]
 t CVRMsg_RegisterExternalWebRoot::Clear()
 t CVRMsg_RegisterExternalWebRoot::CopyFrom(CVRMsg_RegisterExternalWebRoot const&)
 t CVRMsg_RegisterExternalWebRoot::GetCachedSize() const
 t CVRMsg_RegisterExternalWebRoot::GetMetadata() const
 t CVRMsg_RegisterExternalWebRoot::GetMetadata() const [clone .cold]
 t CVRMsg_RegisterExternalWebRoot::InitAsDefaultInstance()
 t CVRMsg_RegisterExternalWebRoot::IsInitialized() const
 t CVRMsg_RegisterExternalWebRoot::MergeFrom(CVRMsg_RegisterExternalWebRoot const&)
 t CVRMsg_RegisterExternalWebRoot::MergeFrom(CVRMsg_RegisterExternalWebRoot const&) [clone .cold]
 t CVRMsg_RegisterExternalWebRoot::New() const
 t CVRMsg_RegisterExternalWebRoot::New() const [clone .cold]
 t CVRMsg_RegisterExternalWebRoot::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_RegisterExternalWebRoot::SetCachedSize(int) const
 t CVRMsg_RegisterExternalWebRoot::SharedCtor()
 t CVRMsg_RegisterExternalWebRoot::SharedCtor() [clone .cold]
 t CVRMsg_RegisterExternalWebRoot::SharedDtor()
 t CVRMsg_RegisterExternalWebRoot::Swap(CVRMsg_RegisterExternalWebRoot*)
 t CVRMsg_RegisterExternalWebRoot::default_instance()
 t CVRMsg_RegisterExternalWebRoot::descriptor()
 t CVRMsg_RegisterExternalWebRoot::descriptor() [clone .cold]
 t CVRMsg_RegisterExternalWebRoot::mutable_path()
 t CVRMsg_RegisterExternalWebRoot::release_path()
 t CVRMsg_RegisterExternalWebRoot::set_allocated_path(std::string*)
 t CVRMsg_RegisterExternalWebRoot::set_path(char const*)
 t CVRMsg_RegisterExternalWebRoot::set_path(char const*, unsigned long)
 t CVRMsg_RegisterExternalWebRoot::set_path(std::string const&)
 t CVRMsg_RegisterExternalWebRoot::~CVRMsg_RegisterExternalWebRoot()
 t CVRMsg_ReloadChaperone::ByteSize() const
 t CVRMsg_ReloadChaperone::CVRMsg_ReloadChaperone()
 t CVRMsg_ReloadChaperone::CVRMsg_ReloadChaperone() [clone .cold]
 t CVRMsg_ReloadChaperone::CVRMsg_ReloadChaperone(CVRMsg_ReloadChaperone const&)
 t CVRMsg_ReloadChaperone::CVRMsg_ReloadChaperone(CVRMsg_ReloadChaperone const&) [clone .cold]
 t CVRMsg_ReloadChaperone::Clear()
 t CVRMsg_ReloadChaperone::CopyFrom(CVRMsg_ReloadChaperone const&)
 t CVRMsg_ReloadChaperone::GetCachedSize() const
 t CVRMsg_ReloadChaperone::GetMetadata() const
 t CVRMsg_ReloadChaperone::GetMetadata() const [clone .cold]
 t CVRMsg_ReloadChaperone::InitAsDefaultInstance()
 t CVRMsg_ReloadChaperone::IsInitialized() const
 t CVRMsg_ReloadChaperone::MergeFrom(CVRMsg_ReloadChaperone const&)
 t CVRMsg_ReloadChaperone::MergeFrom(CVRMsg_ReloadChaperone const&) [clone .cold]
 t CVRMsg_ReloadChaperone::New() const
 t CVRMsg_ReloadChaperone::New() const [clone .cold]
 t CVRMsg_ReloadChaperone::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ReloadChaperone::SetCachedSize(int) const
 t CVRMsg_ReloadChaperone::SharedCtor()
 t CVRMsg_ReloadChaperone::SharedDtor()
 t CVRMsg_ReloadChaperone::Swap(CVRMsg_ReloadChaperone*)
 t CVRMsg_ReloadChaperone::default_instance()
 t CVRMsg_ReloadChaperone::descriptor()
 t CVRMsg_ReloadChaperone::descriptor() [clone .cold]
 t CVRMsg_ReloadChaperone::~CVRMsg_ReloadChaperone()
 t CVRMsg_SendWebMessage::ByteSize() const
 t CVRMsg_SendWebMessage::CVRMsg_SendWebMessage()
 t CVRMsg_SendWebMessage::CVRMsg_SendWebMessage() [clone .cold]
 t CVRMsg_SendWebMessage::CVRMsg_SendWebMessage(CVRMsg_SendWebMessage const&)
 t CVRMsg_SendWebMessage::CVRMsg_SendWebMessage(CVRMsg_SendWebMessage const&) [clone .cold]
 t CVRMsg_SendWebMessage::Clear()
 t CVRMsg_SendWebMessage::CopyFrom(CVRMsg_SendWebMessage const&)
 t CVRMsg_SendWebMessage::GetCachedSize() const
 t CVRMsg_SendWebMessage::GetMetadata() const
 t CVRMsg_SendWebMessage::GetMetadata() const [clone .cold]
 t CVRMsg_SendWebMessage::InitAsDefaultInstance()
 t CVRMsg_SendWebMessage::IsInitialized() const
 t CVRMsg_SendWebMessage::MergeFrom(CVRMsg_SendWebMessage const&)
 t CVRMsg_SendWebMessage::MergeFrom(CVRMsg_SendWebMessage const&) [clone .cold]
 t CVRMsg_SendWebMessage::New() const
 t CVRMsg_SendWebMessage::New() const [clone .cold]
 t CVRMsg_SendWebMessage::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SendWebMessage::SetCachedSize(int) const
 t CVRMsg_SendWebMessage::SharedCtor()
 t CVRMsg_SendWebMessage::SharedCtor() [clone .cold]
 t CVRMsg_SendWebMessage::SharedDtor()
 t CVRMsg_SendWebMessage::Swap(CVRMsg_SendWebMessage*)
 t CVRMsg_SendWebMessage::default_instance()
 t CVRMsg_SendWebMessage::descriptor()
 t CVRMsg_SendWebMessage::descriptor() [clone .cold]
 t CVRMsg_SendWebMessage::mutable_mailbox()
 t CVRMsg_SendWebMessage::mutable_message()
 t CVRMsg_SendWebMessage::release_mailbox()
 t CVRMsg_SendWebMessage::release_message()
 t CVRMsg_SendWebMessage::set_allocated_mailbox(std::string*)
 t CVRMsg_SendWebMessage::set_allocated_message(std::string*)
 t CVRMsg_SendWebMessage::set_mailbox(char const*)
 t CVRMsg_SendWebMessage::set_mailbox(char const*, unsigned long)
 t CVRMsg_SendWebMessage::set_mailbox(std::string const&)
 t CVRMsg_SendWebMessage::set_message(char const*)
 t CVRMsg_SendWebMessage::set_message(char const*, unsigned long)
 t CVRMsg_SendWebMessage::set_message(std::string const&)
 t CVRMsg_SendWebMessage::~CVRMsg_SendWebMessage()
 t CVRMsg_ServiceConnect::ByteSize() const
 t CVRMsg_ServiceConnect::CVRMsg_ServiceConnect()
 t CVRMsg_ServiceConnect::CVRMsg_ServiceConnect() [clone .cold]
 t CVRMsg_ServiceConnect::CVRMsg_ServiceConnect(CVRMsg_ServiceConnect const&)
 t CVRMsg_ServiceConnect::CVRMsg_ServiceConnect(CVRMsg_ServiceConnect const&) [clone .cold]
 t CVRMsg_ServiceConnect::Clear()
 t CVRMsg_ServiceConnect::CopyFrom(CVRMsg_ServiceConnect const&)
 t CVRMsg_ServiceConnect::GetCachedSize() const
 t CVRMsg_ServiceConnect::GetMetadata() const
 t CVRMsg_ServiceConnect::GetMetadata() const [clone .cold]
 t CVRMsg_ServiceConnect::InitAsDefaultInstance()
 t CVRMsg_ServiceConnect::IsInitialized() const
 t CVRMsg_ServiceConnect::MergeFrom(CVRMsg_ServiceConnect const&)
 t CVRMsg_ServiceConnect::MergeFrom(CVRMsg_ServiceConnect const&) [clone .cold]
 t CVRMsg_ServiceConnect::New() const
 t CVRMsg_ServiceConnect::New() const [clone .cold]
 t CVRMsg_ServiceConnect::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ServiceConnect::SetCachedSize(int) const
 t CVRMsg_ServiceConnect::SharedCtor()
 t CVRMsg_ServiceConnect::SharedCtor() [clone .cold]
 t CVRMsg_ServiceConnect::SharedDtor()
 t CVRMsg_ServiceConnect::Swap(CVRMsg_ServiceConnect*)
 t CVRMsg_ServiceConnect::default_instance()
 t CVRMsg_ServiceConnect::descriptor()
 t CVRMsg_ServiceConnect::descriptor() [clone .cold]
 t CVRMsg_ServiceConnect::mutable_binary_path()
 t CVRMsg_ServiceConnect::release_binary_path()
 t CVRMsg_ServiceConnect::set_allocated_binary_path(std::string*)
 t CVRMsg_ServiceConnect::set_binary_path(char const*)
 t CVRMsg_ServiceConnect::set_binary_path(char const*, unsigned long)
 t CVRMsg_ServiceConnect::set_binary_path(std::string const&)
 t CVRMsg_ServiceConnect::~CVRMsg_ServiceConnect()
 t CVRMsg_ServiceConnectResponse::ByteSize() const
 t CVRMsg_ServiceConnectResponse::CVRMsg_ServiceConnectResponse()
 t CVRMsg_ServiceConnectResponse::CVRMsg_ServiceConnectResponse() [clone .cold]
 t CVRMsg_ServiceConnectResponse::CVRMsg_ServiceConnectResponse(CVRMsg_ServiceConnectResponse const&)
 t CVRMsg_ServiceConnectResponse::CVRMsg_ServiceConnectResponse(CVRMsg_ServiceConnectResponse const&) [clone .cold]
 t CVRMsg_ServiceConnectResponse::Clear()
 t CVRMsg_ServiceConnectResponse::CopyFrom(CVRMsg_ServiceConnectResponse const&)
 t CVRMsg_ServiceConnectResponse::GetCachedSize() const
 t CVRMsg_ServiceConnectResponse::GetMetadata() const
 t CVRMsg_ServiceConnectResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ServiceConnectResponse::InitAsDefaultInstance()
 t CVRMsg_ServiceConnectResponse::IsInitialized() const
 t CVRMsg_ServiceConnectResponse::MergeFrom(CVRMsg_ServiceConnectResponse const&)
 t CVRMsg_ServiceConnectResponse::MergeFrom(CVRMsg_ServiceConnectResponse const&) [clone .cold]
 t CVRMsg_ServiceConnectResponse::New() const
 t CVRMsg_ServiceConnectResponse::New() const [clone .cold]
 t CVRMsg_ServiceConnectResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ServiceConnectResponse::SetCachedSize(int) const
 t CVRMsg_ServiceConnectResponse::SharedCtor()
 t CVRMsg_ServiceConnectResponse::SharedDtor()
 t CVRMsg_ServiceConnectResponse::Swap(CVRMsg_ServiceConnectResponse*)
 t CVRMsg_ServiceConnectResponse::default_instance()
 t CVRMsg_ServiceConnectResponse::descriptor()
 t CVRMsg_ServiceConnectResponse::descriptor() [clone .cold]
 t CVRMsg_ServiceConnectResponse::~CVRMsg_ServiceConnectResponse()
 t CVRMsg_SetApplicationOptions::ByteSize() const
 t CVRMsg_SetApplicationOptions::CVRMsg_SetApplicationOptions()
 t CVRMsg_SetApplicationOptions::CVRMsg_SetApplicationOptions() [clone .cold]
 t CVRMsg_SetApplicationOptions::CVRMsg_SetApplicationOptions(CVRMsg_SetApplicationOptions const&)
 t CVRMsg_SetApplicationOptions::CVRMsg_SetApplicationOptions(CVRMsg_SetApplicationOptions const&) [clone .cold]
 t CVRMsg_SetApplicationOptions::Clear()
 t CVRMsg_SetApplicationOptions::CopyFrom(CVRMsg_SetApplicationOptions const&)
 t CVRMsg_SetApplicationOptions::GetCachedSize() const
 t CVRMsg_SetApplicationOptions::GetMetadata() const
 t CVRMsg_SetApplicationOptions::GetMetadata() const [clone .cold]
 t CVRMsg_SetApplicationOptions::InitAsDefaultInstance()
 t CVRMsg_SetApplicationOptions::IsInitialized() const
 t CVRMsg_SetApplicationOptions::MergeFrom(CVRMsg_SetApplicationOptions const&)
 t CVRMsg_SetApplicationOptions::MergeFrom(CVRMsg_SetApplicationOptions const&) [clone .cold]
 t CVRMsg_SetApplicationOptions::New() const
 t CVRMsg_SetApplicationOptions::New() const [clone .cold]
 t CVRMsg_SetApplicationOptions::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetApplicationOptions::SetCachedSize(int) const
 t CVRMsg_SetApplicationOptions::SharedCtor()
 t CVRMsg_SetApplicationOptions::SharedCtor() [clone .cold]
 t CVRMsg_SetApplicationOptions::SharedDtor()
 t CVRMsg_SetApplicationOptions::Swap(CVRMsg_SetApplicationOptions*)
 t CVRMsg_SetApplicationOptions::default_instance()
 t CVRMsg_SetApplicationOptions::descriptor()
 t CVRMsg_SetApplicationOptions::descriptor() [clone .cold]
 t CVRMsg_SetApplicationOptions::mutable_app_key()
 t CVRMsg_SetApplicationOptions::mutable_options()
 t CVRMsg_SetApplicationOptions::mutable_options() [clone .cold]
 t CVRMsg_SetApplicationOptions::release_app_key()
 t CVRMsg_SetApplicationOptions::release_options()
 t CVRMsg_SetApplicationOptions::set_allocated_app_key(std::string*)
 t CVRMsg_SetApplicationOptions::set_allocated_options(CVRMsg_ApplicationInfo_Options*)
 t CVRMsg_SetApplicationOptions::set_app_key(char const*)
 t CVRMsg_SetApplicationOptions::set_app_key(char const*, unsigned long)
 t CVRMsg_SetApplicationOptions::set_app_key(std::string const&)
 t CVRMsg_SetApplicationOptions::~CVRMsg_SetApplicationOptions()
 t CVRMsg_SetApplicationOptionsResponse::ByteSize() const
 t CVRMsg_SetApplicationOptionsResponse::CVRMsg_SetApplicationOptionsResponse()
 t CVRMsg_SetApplicationOptionsResponse::CVRMsg_SetApplicationOptionsResponse() [clone .cold]
 t CVRMsg_SetApplicationOptionsResponse::CVRMsg_SetApplicationOptionsResponse(CVRMsg_SetApplicationOptionsResponse const&)
 t CVRMsg_SetApplicationOptionsResponse::CVRMsg_SetApplicationOptionsResponse(CVRMsg_SetApplicationOptionsResponse const&) [clone .cold]
 t CVRMsg_SetApplicationOptionsResponse::Clear()
 t CVRMsg_SetApplicationOptionsResponse::CopyFrom(CVRMsg_SetApplicationOptionsResponse const&)
 t CVRMsg_SetApplicationOptionsResponse::GetCachedSize() const
 t CVRMsg_SetApplicationOptionsResponse::GetMetadata() const
 t CVRMsg_SetApplicationOptionsResponse::GetMetadata() const [clone .cold]
 t CVRMsg_SetApplicationOptionsResponse::InitAsDefaultInstance()
 t CVRMsg_SetApplicationOptionsResponse::IsInitialized() const
 t CVRMsg_SetApplicationOptionsResponse::MergeFrom(CVRMsg_SetApplicationOptionsResponse const&)
 t CVRMsg_SetApplicationOptionsResponse::MergeFrom(CVRMsg_SetApplicationOptionsResponse const&) [clone .cold]
 t CVRMsg_SetApplicationOptionsResponse::New() const
 t CVRMsg_SetApplicationOptionsResponse::New() const [clone .cold]
 t CVRMsg_SetApplicationOptionsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetApplicationOptionsResponse::SetCachedSize(int) const
 t CVRMsg_SetApplicationOptionsResponse::SharedCtor()
 t CVRMsg_SetApplicationOptionsResponse::SharedDtor()
 t CVRMsg_SetApplicationOptionsResponse::Swap(CVRMsg_SetApplicationOptionsResponse*)
 t CVRMsg_SetApplicationOptionsResponse::default_instance()
 t CVRMsg_SetApplicationOptionsResponse::descriptor()
 t CVRMsg_SetApplicationOptionsResponse::descriptor() [clone .cold]
 t CVRMsg_SetApplicationOptionsResponse::~CVRMsg_SetApplicationOptionsResponse()
 t CVRMsg_SetApplicationProcessId::ByteSize() const
 t CVRMsg_SetApplicationProcessId::CVRMsg_SetApplicationProcessId()
 t CVRMsg_SetApplicationProcessId::CVRMsg_SetApplicationProcessId() [clone .cold]
 t CVRMsg_SetApplicationProcessId::CVRMsg_SetApplicationProcessId(CVRMsg_SetApplicationProcessId const&)
 t CVRMsg_SetApplicationProcessId::CVRMsg_SetApplicationProcessId(CVRMsg_SetApplicationProcessId const&) [clone .cold]
 t CVRMsg_SetApplicationProcessId::Clear()
 t CVRMsg_SetApplicationProcessId::CopyFrom(CVRMsg_SetApplicationProcessId const&)
 t CVRMsg_SetApplicationProcessId::GetCachedSize() const
 t CVRMsg_SetApplicationProcessId::GetMetadata() const
 t CVRMsg_SetApplicationProcessId::GetMetadata() const [clone .cold]
 t CVRMsg_SetApplicationProcessId::InitAsDefaultInstance()
 t CVRMsg_SetApplicationProcessId::IsInitialized() const
 t CVRMsg_SetApplicationProcessId::MergeFrom(CVRMsg_SetApplicationProcessId const&)
 t CVRMsg_SetApplicationProcessId::MergeFrom(CVRMsg_SetApplicationProcessId const&) [clone .cold]
 t CVRMsg_SetApplicationProcessId::New() const
 t CVRMsg_SetApplicationProcessId::New() const [clone .cold]
 t CVRMsg_SetApplicationProcessId::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetApplicationProcessId::SetCachedSize(int) const
 t CVRMsg_SetApplicationProcessId::SharedCtor()
 t CVRMsg_SetApplicationProcessId::SharedCtor() [clone .cold]
 t CVRMsg_SetApplicationProcessId::SharedDtor()
 t CVRMsg_SetApplicationProcessId::Swap(CVRMsg_SetApplicationProcessId*)
 t CVRMsg_SetApplicationProcessId::default_instance()
 t CVRMsg_SetApplicationProcessId::descriptor()
 t CVRMsg_SetApplicationProcessId::descriptor() [clone .cold]
 t CVRMsg_SetApplicationProcessId::mutable_app_key()
 t CVRMsg_SetApplicationProcessId::release_app_key()
 t CVRMsg_SetApplicationProcessId::set_allocated_app_key(std::string*)
 t CVRMsg_SetApplicationProcessId::set_app_key(char const*)
 t CVRMsg_SetApplicationProcessId::set_app_key(char const*, unsigned long)
 t CVRMsg_SetApplicationProcessId::set_app_key(std::string const&)
 t CVRMsg_SetApplicationProcessId::~CVRMsg_SetApplicationProcessId()
 t CVRMsg_SetApplicationProcessIdResponse::ByteSize() const
 t CVRMsg_SetApplicationProcessIdResponse::CVRMsg_SetApplicationProcessIdResponse()
 t CVRMsg_SetApplicationProcessIdResponse::CVRMsg_SetApplicationProcessIdResponse() [clone .cold]
 t CVRMsg_SetApplicationProcessIdResponse::CVRMsg_SetApplicationProcessIdResponse(CVRMsg_SetApplicationProcessIdResponse const&)
 t CVRMsg_SetApplicationProcessIdResponse::CVRMsg_SetApplicationProcessIdResponse(CVRMsg_SetApplicationProcessIdResponse const&) [clone .cold]
 t CVRMsg_SetApplicationProcessIdResponse::Clear()
 t CVRMsg_SetApplicationProcessIdResponse::CopyFrom(CVRMsg_SetApplicationProcessIdResponse const&)
 t CVRMsg_SetApplicationProcessIdResponse::GetCachedSize() const
 t CVRMsg_SetApplicationProcessIdResponse::GetMetadata() const
 t CVRMsg_SetApplicationProcessIdResponse::GetMetadata() const [clone .cold]
 t CVRMsg_SetApplicationProcessIdResponse::InitAsDefaultInstance()
 t CVRMsg_SetApplicationProcessIdResponse::IsInitialized() const
 t CVRMsg_SetApplicationProcessIdResponse::MergeFrom(CVRMsg_SetApplicationProcessIdResponse const&)
 t CVRMsg_SetApplicationProcessIdResponse::MergeFrom(CVRMsg_SetApplicationProcessIdResponse const&) [clone .cold]
 t CVRMsg_SetApplicationProcessIdResponse::New() const
 t CVRMsg_SetApplicationProcessIdResponse::New() const [clone .cold]
 t CVRMsg_SetApplicationProcessIdResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetApplicationProcessIdResponse::SetCachedSize(int) const
 t CVRMsg_SetApplicationProcessIdResponse::SharedCtor()
 t CVRMsg_SetApplicationProcessIdResponse::SharedDtor()
 t CVRMsg_SetApplicationProcessIdResponse::Swap(CVRMsg_SetApplicationProcessIdResponse*)
 t CVRMsg_SetApplicationProcessIdResponse::default_instance()
 t CVRMsg_SetApplicationProcessIdResponse::descriptor()
 t CVRMsg_SetApplicationProcessIdResponse::descriptor() [clone .cold]
 t CVRMsg_SetApplicationProcessIdResponse::~CVRMsg_SetApplicationProcessIdResponse()
 t CVRMsg_SetDefaultApplicationForMimeType::ByteSize() const
 t CVRMsg_SetDefaultApplicationForMimeType::CVRMsg_SetDefaultApplicationForMimeType()
 t CVRMsg_SetDefaultApplicationForMimeType::CVRMsg_SetDefaultApplicationForMimeType() [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeType::CVRMsg_SetDefaultApplicationForMimeType(CVRMsg_SetDefaultApplicationForMimeType const&)
 t CVRMsg_SetDefaultApplicationForMimeType::CVRMsg_SetDefaultApplicationForMimeType(CVRMsg_SetDefaultApplicationForMimeType const&) [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeType::Clear()
 t CVRMsg_SetDefaultApplicationForMimeType::CopyFrom(CVRMsg_SetDefaultApplicationForMimeType const&)
 t CVRMsg_SetDefaultApplicationForMimeType::GetCachedSize() const
 t CVRMsg_SetDefaultApplicationForMimeType::GetMetadata() const
 t CVRMsg_SetDefaultApplicationForMimeType::GetMetadata() const [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeType::InitAsDefaultInstance()
 t CVRMsg_SetDefaultApplicationForMimeType::IsInitialized() const
 t CVRMsg_SetDefaultApplicationForMimeType::MergeFrom(CVRMsg_SetDefaultApplicationForMimeType const&)
 t CVRMsg_SetDefaultApplicationForMimeType::MergeFrom(CVRMsg_SetDefaultApplicationForMimeType const&) [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeType::New() const
 t CVRMsg_SetDefaultApplicationForMimeType::New() const [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeType::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetDefaultApplicationForMimeType::SetCachedSize(int) const
 t CVRMsg_SetDefaultApplicationForMimeType::SharedCtor()
 t CVRMsg_SetDefaultApplicationForMimeType::SharedCtor() [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeType::SharedDtor()
 t CVRMsg_SetDefaultApplicationForMimeType::Swap(CVRMsg_SetDefaultApplicationForMimeType*)
 t CVRMsg_SetDefaultApplicationForMimeType::default_instance()
 t CVRMsg_SetDefaultApplicationForMimeType::descriptor()
 t CVRMsg_SetDefaultApplicationForMimeType::descriptor() [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeType::mutable_app_key()
 t CVRMsg_SetDefaultApplicationForMimeType::mutable_mime_type()
 t CVRMsg_SetDefaultApplicationForMimeType::release_app_key()
 t CVRMsg_SetDefaultApplicationForMimeType::release_mime_type()
 t CVRMsg_SetDefaultApplicationForMimeType::set_allocated_app_key(std::string*)
 t CVRMsg_SetDefaultApplicationForMimeType::set_allocated_mime_type(std::string*)
 t CVRMsg_SetDefaultApplicationForMimeType::set_app_key(char const*)
 t CVRMsg_SetDefaultApplicationForMimeType::set_app_key(char const*, unsigned long)
 t CVRMsg_SetDefaultApplicationForMimeType::set_app_key(std::string const&)
 t CVRMsg_SetDefaultApplicationForMimeType::set_mime_type(char const*)
 t CVRMsg_SetDefaultApplicationForMimeType::set_mime_type(char const*, unsigned long)
 t CVRMsg_SetDefaultApplicationForMimeType::set_mime_type(std::string const&)
 t CVRMsg_SetDefaultApplicationForMimeType::~CVRMsg_SetDefaultApplicationForMimeType()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::ByteSize() const
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::CVRMsg_SetDefaultApplicationForMimeTypeResponse()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::CVRMsg_SetDefaultApplicationForMimeTypeResponse() [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::CVRMsg_SetDefaultApplicationForMimeTypeResponse(CVRMsg_SetDefaultApplicationForMimeTypeResponse const&)
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::CVRMsg_SetDefaultApplicationForMimeTypeResponse(CVRMsg_SetDefaultApplicationForMimeTypeResponse const&) [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::Clear()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::CopyFrom(CVRMsg_SetDefaultApplicationForMimeTypeResponse const&)
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::GetCachedSize() const
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::GetMetadata() const
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::GetMetadata() const [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::InitAsDefaultInstance()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::IsInitialized() const
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::MergeFrom(CVRMsg_SetDefaultApplicationForMimeTypeResponse const&)
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::MergeFrom(CVRMsg_SetDefaultApplicationForMimeTypeResponse const&) [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::New() const
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::New() const [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::SetCachedSize(int) const
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::SharedCtor()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::SharedDtor()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::Swap(CVRMsg_SetDefaultApplicationForMimeTypeResponse*)
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::default_instance()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::descriptor()
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::descriptor() [clone .cold]
 t CVRMsg_SetDefaultApplicationForMimeTypeResponse::~CVRMsg_SetDefaultApplicationForMimeTypeResponse()
 t CVRMsg_SetMasterProcess::ByteSize() const
 t CVRMsg_SetMasterProcess::CVRMsg_SetMasterProcess()
 t CVRMsg_SetMasterProcess::CVRMsg_SetMasterProcess() [clone .cold]
 t CVRMsg_SetMasterProcess::CVRMsg_SetMasterProcess(CVRMsg_SetMasterProcess const&)
 t CVRMsg_SetMasterProcess::CVRMsg_SetMasterProcess(CVRMsg_SetMasterProcess const&) [clone .cold]
 t CVRMsg_SetMasterProcess::Clear()
 t CVRMsg_SetMasterProcess::CopyFrom(CVRMsg_SetMasterProcess const&)
 t CVRMsg_SetMasterProcess::GetCachedSize() const
 t CVRMsg_SetMasterProcess::GetMetadata() const
 t CVRMsg_SetMasterProcess::GetMetadata() const [clone .cold]
 t CVRMsg_SetMasterProcess::InitAsDefaultInstance()
 t CVRMsg_SetMasterProcess::IsInitialized() const
 t CVRMsg_SetMasterProcess::MergeFrom(CVRMsg_SetMasterProcess const&)
 t CVRMsg_SetMasterProcess::MergeFrom(CVRMsg_SetMasterProcess const&) [clone .cold]
 t CVRMsg_SetMasterProcess::New() const
 t CVRMsg_SetMasterProcess::New() const [clone .cold]
 t CVRMsg_SetMasterProcess::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetMasterProcess::SetCachedSize(int) const
 t CVRMsg_SetMasterProcess::SharedCtor()
 t CVRMsg_SetMasterProcess::SharedDtor()
 t CVRMsg_SetMasterProcess::Swap(CVRMsg_SetMasterProcess*)
 t CVRMsg_SetMasterProcess::default_instance()
 t CVRMsg_SetMasterProcess::descriptor()
 t CVRMsg_SetMasterProcess::descriptor() [clone .cold]
 t CVRMsg_SetMasterProcess::~CVRMsg_SetMasterProcess()
 t CVRMsg_SetMasterProcessResponse::ByteSize() const
 t CVRMsg_SetMasterProcessResponse::CVRMsg_SetMasterProcessResponse()
 t CVRMsg_SetMasterProcessResponse::CVRMsg_SetMasterProcessResponse() [clone .cold]
 t CVRMsg_SetMasterProcessResponse::CVRMsg_SetMasterProcessResponse(CVRMsg_SetMasterProcessResponse const&)
 t CVRMsg_SetMasterProcessResponse::CVRMsg_SetMasterProcessResponse(CVRMsg_SetMasterProcessResponse const&) [clone .cold]
 t CVRMsg_SetMasterProcessResponse::Clear()
 t CVRMsg_SetMasterProcessResponse::CopyFrom(CVRMsg_SetMasterProcessResponse const&)
 t CVRMsg_SetMasterProcessResponse::GetCachedSize() const
 t CVRMsg_SetMasterProcessResponse::GetMetadata() const
 t CVRMsg_SetMasterProcessResponse::GetMetadata() const [clone .cold]
 t CVRMsg_SetMasterProcessResponse::InitAsDefaultInstance()
 t CVRMsg_SetMasterProcessResponse::IsInitialized() const
 t CVRMsg_SetMasterProcessResponse::MergeFrom(CVRMsg_SetMasterProcessResponse const&)
 t CVRMsg_SetMasterProcessResponse::MergeFrom(CVRMsg_SetMasterProcessResponse const&) [clone .cold]
 t CVRMsg_SetMasterProcessResponse::New() const
 t CVRMsg_SetMasterProcessResponse::New() const [clone .cold]
 t CVRMsg_SetMasterProcessResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetMasterProcessResponse::SetCachedSize(int) const
 t CVRMsg_SetMasterProcessResponse::SharedCtor()
 t CVRMsg_SetMasterProcessResponse::SharedDtor()
 t CVRMsg_SetMasterProcessResponse::Swap(CVRMsg_SetMasterProcessResponse*)
 t CVRMsg_SetMasterProcessResponse::default_instance()
 t CVRMsg_SetMasterProcessResponse::descriptor()
 t CVRMsg_SetMasterProcessResponse::descriptor() [clone .cold]
 t CVRMsg_SetMasterProcessResponse::~CVRMsg_SetMasterProcessResponse()
 t CVRMsg_SetMasterProcessRestartHint::ByteSize() const
 t CVRMsg_SetMasterProcessRestartHint::CVRMsg_SetMasterProcessRestartHint()
 t CVRMsg_SetMasterProcessRestartHint::CVRMsg_SetMasterProcessRestartHint() [clone .cold]
 t CVRMsg_SetMasterProcessRestartHint::CVRMsg_SetMasterProcessRestartHint(CVRMsg_SetMasterProcessRestartHint const&)
 t CVRMsg_SetMasterProcessRestartHint::CVRMsg_SetMasterProcessRestartHint(CVRMsg_SetMasterProcessRestartHint const&) [clone .cold]
 t CVRMsg_SetMasterProcessRestartHint::Clear()
 t CVRMsg_SetMasterProcessRestartHint::CopyFrom(CVRMsg_SetMasterProcessRestartHint const&)
 t CVRMsg_SetMasterProcessRestartHint::GetCachedSize() const
 t CVRMsg_SetMasterProcessRestartHint::GetMetadata() const
 t CVRMsg_SetMasterProcessRestartHint::GetMetadata() const [clone .cold]
 t CVRMsg_SetMasterProcessRestartHint::InitAsDefaultInstance()
 t CVRMsg_SetMasterProcessRestartHint::IsInitialized() const
 t CVRMsg_SetMasterProcessRestartHint::MergeFrom(CVRMsg_SetMasterProcessRestartHint const&)
 t CVRMsg_SetMasterProcessRestartHint::MergeFrom(CVRMsg_SetMasterProcessRestartHint const&) [clone .cold]
 t CVRMsg_SetMasterProcessRestartHint::New() const
 t CVRMsg_SetMasterProcessRestartHint::New() const [clone .cold]
 t CVRMsg_SetMasterProcessRestartHint::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetMasterProcessRestartHint::SetCachedSize(int) const
 t CVRMsg_SetMasterProcessRestartHint::SharedCtor()
 t CVRMsg_SetMasterProcessRestartHint::SharedDtor()
 t CVRMsg_SetMasterProcessRestartHint::Swap(CVRMsg_SetMasterProcessRestartHint*)
 t CVRMsg_SetMasterProcessRestartHint::default_instance()
 t CVRMsg_SetMasterProcessRestartHint::descriptor()
 t CVRMsg_SetMasterProcessRestartHint::descriptor() [clone .cold]
 t CVRMsg_SetMasterProcessRestartHint::~CVRMsg_SetMasterProcessRestartHint()
 t CVRMsg_SetMasterProcessRestartHintResponse::ByteSize() const
 t CVRMsg_SetMasterProcessRestartHintResponse::CVRMsg_SetMasterProcessRestartHintResponse()
 t CVRMsg_SetMasterProcessRestartHintResponse::CVRMsg_SetMasterProcessRestartHintResponse() [clone .cold]
 t CVRMsg_SetMasterProcessRestartHintResponse::CVRMsg_SetMasterProcessRestartHintResponse(CVRMsg_SetMasterProcessRestartHintResponse const&)
 t CVRMsg_SetMasterProcessRestartHintResponse::CVRMsg_SetMasterProcessRestartHintResponse(CVRMsg_SetMasterProcessRestartHintResponse const&) [clone .cold]
 t CVRMsg_SetMasterProcessRestartHintResponse::Clear()
 t CVRMsg_SetMasterProcessRestartHintResponse::CopyFrom(CVRMsg_SetMasterProcessRestartHintResponse const&)
 t CVRMsg_SetMasterProcessRestartHintResponse::GetCachedSize() const
 t CVRMsg_SetMasterProcessRestartHintResponse::GetMetadata() const
 t CVRMsg_SetMasterProcessRestartHintResponse::GetMetadata() const [clone .cold]
 t CVRMsg_SetMasterProcessRestartHintResponse::InitAsDefaultInstance()
 t CVRMsg_SetMasterProcessRestartHintResponse::IsInitialized() const
 t CVRMsg_SetMasterProcessRestartHintResponse::MergeFrom(CVRMsg_SetMasterProcessRestartHintResponse const&)
 t CVRMsg_SetMasterProcessRestartHintResponse::MergeFrom(CVRMsg_SetMasterProcessRestartHintResponse const&) [clone .cold]
 t CVRMsg_SetMasterProcessRestartHintResponse::New() const
 t CVRMsg_SetMasterProcessRestartHintResponse::New() const [clone .cold]
 t CVRMsg_SetMasterProcessRestartHintResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_SetMasterProcessRestartHintResponse::SetCachedSize(int) const
 t CVRMsg_SetMasterProcessRestartHintResponse::SharedCtor()
 t CVRMsg_SetMasterProcessRestartHintResponse::SharedDtor()
 t CVRMsg_SetMasterProcessRestartHintResponse::Swap(CVRMsg_SetMasterProcessRestartHintResponse*)
 t CVRMsg_SetMasterProcessRestartHintResponse::default_instance()
 t CVRMsg_SetMasterProcessRestartHintResponse::descriptor()
 t CVRMsg_SetMasterProcessRestartHintResponse::descriptor() [clone .cold]
 t CVRMsg_SetMasterProcessRestartHintResponse::~CVRMsg_SetMasterProcessRestartHintResponse()
 t CVRMsg_Settings_GetBool::ByteSize() const
 t CVRMsg_Settings_GetBool::CVRMsg_Settings_GetBool()
 t CVRMsg_Settings_GetBool::CVRMsg_Settings_GetBool() [clone .cold]
 t CVRMsg_Settings_GetBool::CVRMsg_Settings_GetBool(CVRMsg_Settings_GetBool const&)
 t CVRMsg_Settings_GetBool::CVRMsg_Settings_GetBool(CVRMsg_Settings_GetBool const&) [clone .cold]
 t CVRMsg_Settings_GetBool::Clear()
 t CVRMsg_Settings_GetBool::CopyFrom(CVRMsg_Settings_GetBool const&)
 t CVRMsg_Settings_GetBool::GetCachedSize() const
 t CVRMsg_Settings_GetBool::GetMetadata() const
 t CVRMsg_Settings_GetBool::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetBool::InitAsDefaultInstance()
 t CVRMsg_Settings_GetBool::IsInitialized() const
 t CVRMsg_Settings_GetBool::MergeFrom(CVRMsg_Settings_GetBool const&)
 t CVRMsg_Settings_GetBool::MergeFrom(CVRMsg_Settings_GetBool const&) [clone .cold]
 t CVRMsg_Settings_GetBool::New() const
 t CVRMsg_Settings_GetBool::New() const [clone .cold]
 t CVRMsg_Settings_GetBool::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetBool::SetCachedSize(int) const
 t CVRMsg_Settings_GetBool::SharedCtor()
 t CVRMsg_Settings_GetBool::SharedCtor() [clone .cold]
 t CVRMsg_Settings_GetBool::SharedDtor()
 t CVRMsg_Settings_GetBool::Swap(CVRMsg_Settings_GetBool*)
 t CVRMsg_Settings_GetBool::default_instance()
 t CVRMsg_Settings_GetBool::descriptor()
 t CVRMsg_Settings_GetBool::descriptor() [clone .cold]
 t CVRMsg_Settings_GetBool::mutable_section_key()
 t CVRMsg_Settings_GetBool::mutable_settings_key()
 t CVRMsg_Settings_GetBool::release_section_key()
 t CVRMsg_Settings_GetBool::release_settings_key()
 t CVRMsg_Settings_GetBool::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_GetBool::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_GetBool::set_section_key(char const*)
 t CVRMsg_Settings_GetBool::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_GetBool::set_section_key(std::string const&)
 t CVRMsg_Settings_GetBool::set_settings_key(char const*)
 t CVRMsg_Settings_GetBool::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_GetBool::set_settings_key(std::string const&)
 t CVRMsg_Settings_GetBool::~CVRMsg_Settings_GetBool()
 t CVRMsg_Settings_GetBool_Response::ByteSize() const
 t CVRMsg_Settings_GetBool_Response::CVRMsg_Settings_GetBool_Response()
 t CVRMsg_Settings_GetBool_Response::CVRMsg_Settings_GetBool_Response() [clone .cold]
 t CVRMsg_Settings_GetBool_Response::CVRMsg_Settings_GetBool_Response(CVRMsg_Settings_GetBool_Response const&)
 t CVRMsg_Settings_GetBool_Response::CVRMsg_Settings_GetBool_Response(CVRMsg_Settings_GetBool_Response const&) [clone .cold]
 t CVRMsg_Settings_GetBool_Response::Clear()
 t CVRMsg_Settings_GetBool_Response::CopyFrom(CVRMsg_Settings_GetBool_Response const&)
 t CVRMsg_Settings_GetBool_Response::GetCachedSize() const
 t CVRMsg_Settings_GetBool_Response::GetMetadata() const
 t CVRMsg_Settings_GetBool_Response::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetBool_Response::InitAsDefaultInstance()
 t CVRMsg_Settings_GetBool_Response::IsInitialized() const
 t CVRMsg_Settings_GetBool_Response::MergeFrom(CVRMsg_Settings_GetBool_Response const&)
 t CVRMsg_Settings_GetBool_Response::MergeFrom(CVRMsg_Settings_GetBool_Response const&) [clone .cold]
 t CVRMsg_Settings_GetBool_Response::New() const
 t CVRMsg_Settings_GetBool_Response::New() const [clone .cold]
 t CVRMsg_Settings_GetBool_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetBool_Response::SetCachedSize(int) const
 t CVRMsg_Settings_GetBool_Response::SharedCtor()
 t CVRMsg_Settings_GetBool_Response::SharedDtor()
 t CVRMsg_Settings_GetBool_Response::Swap(CVRMsg_Settings_GetBool_Response*)
 t CVRMsg_Settings_GetBool_Response::default_instance()
 t CVRMsg_Settings_GetBool_Response::descriptor()
 t CVRMsg_Settings_GetBool_Response::descriptor() [clone .cold]
 t CVRMsg_Settings_GetBool_Response::~CVRMsg_Settings_GetBool_Response()
 t CVRMsg_Settings_GetNumeric::ByteSize() const
 t CVRMsg_Settings_GetNumeric::CVRMsg_Settings_GetNumeric()
 t CVRMsg_Settings_GetNumeric::CVRMsg_Settings_GetNumeric() [clone .cold]
 t CVRMsg_Settings_GetNumeric::CVRMsg_Settings_GetNumeric(CVRMsg_Settings_GetNumeric const&)
 t CVRMsg_Settings_GetNumeric::CVRMsg_Settings_GetNumeric(CVRMsg_Settings_GetNumeric const&) [clone .cold]
 t CVRMsg_Settings_GetNumeric::Clear()
 t CVRMsg_Settings_GetNumeric::CopyFrom(CVRMsg_Settings_GetNumeric const&)
 t CVRMsg_Settings_GetNumeric::GetCachedSize() const
 t CVRMsg_Settings_GetNumeric::GetMetadata() const
 t CVRMsg_Settings_GetNumeric::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetNumeric::InitAsDefaultInstance()
 t CVRMsg_Settings_GetNumeric::IsInitialized() const
 t CVRMsg_Settings_GetNumeric::MergeFrom(CVRMsg_Settings_GetNumeric const&)
 t CVRMsg_Settings_GetNumeric::MergeFrom(CVRMsg_Settings_GetNumeric const&) [clone .cold]
 t CVRMsg_Settings_GetNumeric::New() const
 t CVRMsg_Settings_GetNumeric::New() const [clone .cold]
 t CVRMsg_Settings_GetNumeric::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetNumeric::SetCachedSize(int) const
 t CVRMsg_Settings_GetNumeric::SharedCtor()
 t CVRMsg_Settings_GetNumeric::SharedCtor() [clone .cold]
 t CVRMsg_Settings_GetNumeric::SharedDtor()
 t CVRMsg_Settings_GetNumeric::Swap(CVRMsg_Settings_GetNumeric*)
 t CVRMsg_Settings_GetNumeric::default_instance()
 t CVRMsg_Settings_GetNumeric::descriptor()
 t CVRMsg_Settings_GetNumeric::descriptor() [clone .cold]
 t CVRMsg_Settings_GetNumeric::mutable_section_key()
 t CVRMsg_Settings_GetNumeric::mutable_settings_key()
 t CVRMsg_Settings_GetNumeric::release_section_key()
 t CVRMsg_Settings_GetNumeric::release_settings_key()
 t CVRMsg_Settings_GetNumeric::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_GetNumeric::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_GetNumeric::set_section_key(char const*)
 t CVRMsg_Settings_GetNumeric::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_GetNumeric::set_section_key(std::string const&)
 t CVRMsg_Settings_GetNumeric::set_settings_key(char const*)
 t CVRMsg_Settings_GetNumeric::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_GetNumeric::set_settings_key(std::string const&)
 t CVRMsg_Settings_GetNumeric::~CVRMsg_Settings_GetNumeric()
 t CVRMsg_Settings_GetNumeric_Response::ByteSize() const
 t CVRMsg_Settings_GetNumeric_Response::CVRMsg_Settings_GetNumeric_Response()
 t CVRMsg_Settings_GetNumeric_Response::CVRMsg_Settings_GetNumeric_Response() [clone .cold]
 t CVRMsg_Settings_GetNumeric_Response::CVRMsg_Settings_GetNumeric_Response(CVRMsg_Settings_GetNumeric_Response const&)
 t CVRMsg_Settings_GetNumeric_Response::CVRMsg_Settings_GetNumeric_Response(CVRMsg_Settings_GetNumeric_Response const&) [clone .cold]
 t CVRMsg_Settings_GetNumeric_Response::Clear()
 t CVRMsg_Settings_GetNumeric_Response::CopyFrom(CVRMsg_Settings_GetNumeric_Response const&)
 t CVRMsg_Settings_GetNumeric_Response::GetCachedSize() const
 t CVRMsg_Settings_GetNumeric_Response::GetMetadata() const
 t CVRMsg_Settings_GetNumeric_Response::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetNumeric_Response::InitAsDefaultInstance()
 t CVRMsg_Settings_GetNumeric_Response::IsInitialized() const
 t CVRMsg_Settings_GetNumeric_Response::MergeFrom(CVRMsg_Settings_GetNumeric_Response const&)
 t CVRMsg_Settings_GetNumeric_Response::MergeFrom(CVRMsg_Settings_GetNumeric_Response const&) [clone .cold]
 t CVRMsg_Settings_GetNumeric_Response::New() const
 t CVRMsg_Settings_GetNumeric_Response::New() const [clone .cold]
 t CVRMsg_Settings_GetNumeric_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetNumeric_Response::SetCachedSize(int) const
 t CVRMsg_Settings_GetNumeric_Response::SharedCtor()
 t CVRMsg_Settings_GetNumeric_Response::SharedDtor()
 t CVRMsg_Settings_GetNumeric_Response::Swap(CVRMsg_Settings_GetNumeric_Response*)
 t CVRMsg_Settings_GetNumeric_Response::default_instance()
 t CVRMsg_Settings_GetNumeric_Response::descriptor()
 t CVRMsg_Settings_GetNumeric_Response::descriptor() [clone .cold]
 t CVRMsg_Settings_GetNumeric_Response::~CVRMsg_Settings_GetNumeric_Response()
 t CVRMsg_Settings_GetString::ByteSize() const
 t CVRMsg_Settings_GetString::CVRMsg_Settings_GetString()
 t CVRMsg_Settings_GetString::CVRMsg_Settings_GetString() [clone .cold]
 t CVRMsg_Settings_GetString::CVRMsg_Settings_GetString(CVRMsg_Settings_GetString const&)
 t CVRMsg_Settings_GetString::CVRMsg_Settings_GetString(CVRMsg_Settings_GetString const&) [clone .cold]
 t CVRMsg_Settings_GetString::Clear()
 t CVRMsg_Settings_GetString::CopyFrom(CVRMsg_Settings_GetString const&)
 t CVRMsg_Settings_GetString::GetCachedSize() const
 t CVRMsg_Settings_GetString::GetMetadata() const
 t CVRMsg_Settings_GetString::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetString::InitAsDefaultInstance()
 t CVRMsg_Settings_GetString::IsInitialized() const
 t CVRMsg_Settings_GetString::MergeFrom(CVRMsg_Settings_GetString const&)
 t CVRMsg_Settings_GetString::MergeFrom(CVRMsg_Settings_GetString const&) [clone .cold]
 t CVRMsg_Settings_GetString::New() const
 t CVRMsg_Settings_GetString::New() const [clone .cold]
 t CVRMsg_Settings_GetString::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetString::SetCachedSize(int) const
 t CVRMsg_Settings_GetString::SharedCtor()
 t CVRMsg_Settings_GetString::SharedCtor() [clone .cold]
 t CVRMsg_Settings_GetString::SharedDtor()
 t CVRMsg_Settings_GetString::Swap(CVRMsg_Settings_GetString*)
 t CVRMsg_Settings_GetString::default_instance()
 t CVRMsg_Settings_GetString::descriptor()
 t CVRMsg_Settings_GetString::descriptor() [clone .cold]
 t CVRMsg_Settings_GetString::mutable_section_key()
 t CVRMsg_Settings_GetString::mutable_settings_key()
 t CVRMsg_Settings_GetString::release_section_key()
 t CVRMsg_Settings_GetString::release_settings_key()
 t CVRMsg_Settings_GetString::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_GetString::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_GetString::set_section_key(char const*)
 t CVRMsg_Settings_GetString::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_GetString::set_section_key(std::string const&)
 t CVRMsg_Settings_GetString::set_settings_key(char const*)
 t CVRMsg_Settings_GetString::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_GetString::set_settings_key(std::string const&)
 t CVRMsg_Settings_GetString::~CVRMsg_Settings_GetString()
 t CVRMsg_Settings_GetString_Response::ByteSize() const
 t CVRMsg_Settings_GetString_Response::CVRMsg_Settings_GetString_Response()
 t CVRMsg_Settings_GetString_Response::CVRMsg_Settings_GetString_Response() [clone .cold]
 t CVRMsg_Settings_GetString_Response::CVRMsg_Settings_GetString_Response(CVRMsg_Settings_GetString_Response const&)
 t CVRMsg_Settings_GetString_Response::CVRMsg_Settings_GetString_Response(CVRMsg_Settings_GetString_Response const&) [clone .cold]
 t CVRMsg_Settings_GetString_Response::Clear()
 t CVRMsg_Settings_GetString_Response::CopyFrom(CVRMsg_Settings_GetString_Response const&)
 t CVRMsg_Settings_GetString_Response::GetCachedSize() const
 t CVRMsg_Settings_GetString_Response::GetMetadata() const
 t CVRMsg_Settings_GetString_Response::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetString_Response::InitAsDefaultInstance()
 t CVRMsg_Settings_GetString_Response::IsInitialized() const
 t CVRMsg_Settings_GetString_Response::MergeFrom(CVRMsg_Settings_GetString_Response const&)
 t CVRMsg_Settings_GetString_Response::MergeFrom(CVRMsg_Settings_GetString_Response const&) [clone .cold]
 t CVRMsg_Settings_GetString_Response::New() const
 t CVRMsg_Settings_GetString_Response::New() const [clone .cold]
 t CVRMsg_Settings_GetString_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetString_Response::SetCachedSize(int) const
 t CVRMsg_Settings_GetString_Response::SharedCtor()
 t CVRMsg_Settings_GetString_Response::SharedCtor() [clone .cold]
 t CVRMsg_Settings_GetString_Response::SharedDtor()
 t CVRMsg_Settings_GetString_Response::Swap(CVRMsg_Settings_GetString_Response*)
 t CVRMsg_Settings_GetString_Response::default_instance()
 t CVRMsg_Settings_GetString_Response::descriptor()
 t CVRMsg_Settings_GetString_Response::descriptor() [clone .cold]
 t CVRMsg_Settings_GetString_Response::mutable_value()
 t CVRMsg_Settings_GetString_Response::release_value()
 t CVRMsg_Settings_GetString_Response::set_allocated_value(std::string*)
 t CVRMsg_Settings_GetString_Response::set_value(char const*)
 t CVRMsg_Settings_GetString_Response::set_value(char const*, unsigned long)
 t CVRMsg_Settings_GetString_Response::set_value(std::string const&)
 t CVRMsg_Settings_GetString_Response::~CVRMsg_Settings_GetString_Response()
 t CVRMsg_Settings_GetValueType::ByteSize() const
 t CVRMsg_Settings_GetValueType::CVRMsg_Settings_GetValueType()
 t CVRMsg_Settings_GetValueType::CVRMsg_Settings_GetValueType() [clone .cold]
 t CVRMsg_Settings_GetValueType::CVRMsg_Settings_GetValueType(CVRMsg_Settings_GetValueType const&)
 t CVRMsg_Settings_GetValueType::CVRMsg_Settings_GetValueType(CVRMsg_Settings_GetValueType const&) [clone .cold]
 t CVRMsg_Settings_GetValueType::Clear()
 t CVRMsg_Settings_GetValueType::CopyFrom(CVRMsg_Settings_GetValueType const&)
 t CVRMsg_Settings_GetValueType::GetCachedSize() const
 t CVRMsg_Settings_GetValueType::GetMetadata() const
 t CVRMsg_Settings_GetValueType::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetValueType::InitAsDefaultInstance()
 t CVRMsg_Settings_GetValueType::IsInitialized() const
 t CVRMsg_Settings_GetValueType::MergeFrom(CVRMsg_Settings_GetValueType const&)
 t CVRMsg_Settings_GetValueType::MergeFrom(CVRMsg_Settings_GetValueType const&) [clone .cold]
 t CVRMsg_Settings_GetValueType::New() const
 t CVRMsg_Settings_GetValueType::New() const [clone .cold]
 t CVRMsg_Settings_GetValueType::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetValueType::SetCachedSize(int) const
 t CVRMsg_Settings_GetValueType::SharedCtor()
 t CVRMsg_Settings_GetValueType::SharedCtor() [clone .cold]
 t CVRMsg_Settings_GetValueType::SharedDtor()
 t CVRMsg_Settings_GetValueType::Swap(CVRMsg_Settings_GetValueType*)
 t CVRMsg_Settings_GetValueType::default_instance()
 t CVRMsg_Settings_GetValueType::descriptor()
 t CVRMsg_Settings_GetValueType::descriptor() [clone .cold]
 t CVRMsg_Settings_GetValueType::mutable_section_key()
 t CVRMsg_Settings_GetValueType::mutable_settings_key()
 t CVRMsg_Settings_GetValueType::release_section_key()
 t CVRMsg_Settings_GetValueType::release_settings_key()
 t CVRMsg_Settings_GetValueType::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_GetValueType::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_GetValueType::set_section_key(char const*)
 t CVRMsg_Settings_GetValueType::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_GetValueType::set_section_key(std::string const&)
 t CVRMsg_Settings_GetValueType::set_settings_key(char const*)
 t CVRMsg_Settings_GetValueType::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_GetValueType::set_settings_key(std::string const&)
 t CVRMsg_Settings_GetValueType::~CVRMsg_Settings_GetValueType()
 t CVRMsg_Settings_GetValueType_Response::ByteSize() const
 t CVRMsg_Settings_GetValueType_Response::CVRMsg_Settings_GetValueType_Response()
 t CVRMsg_Settings_GetValueType_Response::CVRMsg_Settings_GetValueType_Response() [clone .cold]
 t CVRMsg_Settings_GetValueType_Response::CVRMsg_Settings_GetValueType_Response(CVRMsg_Settings_GetValueType_Response const&)
 t CVRMsg_Settings_GetValueType_Response::CVRMsg_Settings_GetValueType_Response(CVRMsg_Settings_GetValueType_Response const&) [clone .cold]
 t CVRMsg_Settings_GetValueType_Response::Clear()
 t CVRMsg_Settings_GetValueType_Response::CopyFrom(CVRMsg_Settings_GetValueType_Response const&)
 t CVRMsg_Settings_GetValueType_Response::GetCachedSize() const
 t CVRMsg_Settings_GetValueType_Response::GetMetadata() const
 t CVRMsg_Settings_GetValueType_Response::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_GetValueType_Response::InitAsDefaultInstance()
 t CVRMsg_Settings_GetValueType_Response::IsInitialized() const
 t CVRMsg_Settings_GetValueType_Response::MergeFrom(CVRMsg_Settings_GetValueType_Response const&)
 t CVRMsg_Settings_GetValueType_Response::MergeFrom(CVRMsg_Settings_GetValueType_Response const&) [clone .cold]
 t CVRMsg_Settings_GetValueType_Response::New() const
 t CVRMsg_Settings_GetValueType_Response::New() const [clone .cold]
 t CVRMsg_Settings_GetValueType_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_GetValueType_Response::SetCachedSize(int) const
 t CVRMsg_Settings_GetValueType_Response::SharedCtor()
 t CVRMsg_Settings_GetValueType_Response::SharedDtor()
 t CVRMsg_Settings_GetValueType_Response::Swap(CVRMsg_Settings_GetValueType_Response*)
 t CVRMsg_Settings_GetValueType_Response::clear_exists_or_not()
 t CVRMsg_Settings_GetValueType_Response::default_instance()
 t CVRMsg_Settings_GetValueType_Response::descriptor()
 t CVRMsg_Settings_GetValueType_Response::descriptor() [clone .cold]
 t CVRMsg_Settings_GetValueType_Response::~CVRMsg_Settings_GetValueType_Response()
 t CVRMsg_Settings_RemoveKeyInSection::ByteSize() const
 t CVRMsg_Settings_RemoveKeyInSection::CVRMsg_Settings_RemoveKeyInSection()
 t CVRMsg_Settings_RemoveKeyInSection::CVRMsg_Settings_RemoveKeyInSection() [clone .cold]
 t CVRMsg_Settings_RemoveKeyInSection::CVRMsg_Settings_RemoveKeyInSection(CVRMsg_Settings_RemoveKeyInSection const&)
 t CVRMsg_Settings_RemoveKeyInSection::CVRMsg_Settings_RemoveKeyInSection(CVRMsg_Settings_RemoveKeyInSection const&) [clone .cold]
 t CVRMsg_Settings_RemoveKeyInSection::Clear()
 t CVRMsg_Settings_RemoveKeyInSection::CopyFrom(CVRMsg_Settings_RemoveKeyInSection const&)
 t CVRMsg_Settings_RemoveKeyInSection::GetCachedSize() const
 t CVRMsg_Settings_RemoveKeyInSection::GetMetadata() const
 t CVRMsg_Settings_RemoveKeyInSection::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_RemoveKeyInSection::InitAsDefaultInstance()
 t CVRMsg_Settings_RemoveKeyInSection::IsInitialized() const
 t CVRMsg_Settings_RemoveKeyInSection::MergeFrom(CVRMsg_Settings_RemoveKeyInSection const&)
 t CVRMsg_Settings_RemoveKeyInSection::MergeFrom(CVRMsg_Settings_RemoveKeyInSection const&) [clone .cold]
 t CVRMsg_Settings_RemoveKeyInSection::New() const
 t CVRMsg_Settings_RemoveKeyInSection::New() const [clone .cold]
 t CVRMsg_Settings_RemoveKeyInSection::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_RemoveKeyInSection::SetCachedSize(int) const
 t CVRMsg_Settings_RemoveKeyInSection::SharedCtor()
 t CVRMsg_Settings_RemoveKeyInSection::SharedCtor() [clone .cold]
 t CVRMsg_Settings_RemoveKeyInSection::SharedDtor()
 t CVRMsg_Settings_RemoveKeyInSection::Swap(CVRMsg_Settings_RemoveKeyInSection*)
 t CVRMsg_Settings_RemoveKeyInSection::default_instance()
 t CVRMsg_Settings_RemoveKeyInSection::descriptor()
 t CVRMsg_Settings_RemoveKeyInSection::descriptor() [clone .cold]
 t CVRMsg_Settings_RemoveKeyInSection::mutable_section_key()
 t CVRMsg_Settings_RemoveKeyInSection::mutable_settings_key()
 t CVRMsg_Settings_RemoveKeyInSection::release_section_key()
 t CVRMsg_Settings_RemoveKeyInSection::release_settings_key()
 t CVRMsg_Settings_RemoveKeyInSection::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_RemoveKeyInSection::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_RemoveKeyInSection::set_section_key(char const*)
 t CVRMsg_Settings_RemoveKeyInSection::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_RemoveKeyInSection::set_section_key(std::string const&)
 t CVRMsg_Settings_RemoveKeyInSection::set_settings_key(char const*)
 t CVRMsg_Settings_RemoveKeyInSection::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_RemoveKeyInSection::set_settings_key(std::string const&)
 t CVRMsg_Settings_RemoveKeyInSection::~CVRMsg_Settings_RemoveKeyInSection()
 t CVRMsg_Settings_RemoveSection::ByteSize() const
 t CVRMsg_Settings_RemoveSection::CVRMsg_Settings_RemoveSection()
 t CVRMsg_Settings_RemoveSection::CVRMsg_Settings_RemoveSection() [clone .cold]
 t CVRMsg_Settings_RemoveSection::CVRMsg_Settings_RemoveSection(CVRMsg_Settings_RemoveSection const&)
 t CVRMsg_Settings_RemoveSection::CVRMsg_Settings_RemoveSection(CVRMsg_Settings_RemoveSection const&) [clone .cold]
 t CVRMsg_Settings_RemoveSection::Clear()
 t CVRMsg_Settings_RemoveSection::CopyFrom(CVRMsg_Settings_RemoveSection const&)
 t CVRMsg_Settings_RemoveSection::GetCachedSize() const
 t CVRMsg_Settings_RemoveSection::GetMetadata() const
 t CVRMsg_Settings_RemoveSection::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_RemoveSection::InitAsDefaultInstance()
 t CVRMsg_Settings_RemoveSection::IsInitialized() const
 t CVRMsg_Settings_RemoveSection::MergeFrom(CVRMsg_Settings_RemoveSection const&)
 t CVRMsg_Settings_RemoveSection::MergeFrom(CVRMsg_Settings_RemoveSection const&) [clone .cold]
 t CVRMsg_Settings_RemoveSection::New() const
 t CVRMsg_Settings_RemoveSection::New() const [clone .cold]
 t CVRMsg_Settings_RemoveSection::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_RemoveSection::SetCachedSize(int) const
 t CVRMsg_Settings_RemoveSection::SharedCtor()
 t CVRMsg_Settings_RemoveSection::SharedCtor() [clone .cold]
 t CVRMsg_Settings_RemoveSection::SharedDtor()
 t CVRMsg_Settings_RemoveSection::Swap(CVRMsg_Settings_RemoveSection*)
 t CVRMsg_Settings_RemoveSection::default_instance()
 t CVRMsg_Settings_RemoveSection::descriptor()
 t CVRMsg_Settings_RemoveSection::descriptor() [clone .cold]
 t CVRMsg_Settings_RemoveSection::mutable_section_key()
 t CVRMsg_Settings_RemoveSection::release_section_key()
 t CVRMsg_Settings_RemoveSection::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_RemoveSection::set_section_key(char const*)
 t CVRMsg_Settings_RemoveSection::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_RemoveSection::set_section_key(std::string const&)
 t CVRMsg_Settings_RemoveSection::~CVRMsg_Settings_RemoveSection()
 t CVRMsg_Settings_SetBool::ByteSize() const
 t CVRMsg_Settings_SetBool::CVRMsg_Settings_SetBool()
 t CVRMsg_Settings_SetBool::CVRMsg_Settings_SetBool() [clone .cold]
 t CVRMsg_Settings_SetBool::CVRMsg_Settings_SetBool(CVRMsg_Settings_SetBool const&)
 t CVRMsg_Settings_SetBool::CVRMsg_Settings_SetBool(CVRMsg_Settings_SetBool const&) [clone .cold]
 t CVRMsg_Settings_SetBool::Clear()
 t CVRMsg_Settings_SetBool::CopyFrom(CVRMsg_Settings_SetBool const&)
 t CVRMsg_Settings_SetBool::GetCachedSize() const
 t CVRMsg_Settings_SetBool::GetMetadata() const
 t CVRMsg_Settings_SetBool::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_SetBool::InitAsDefaultInstance()
 t CVRMsg_Settings_SetBool::IsInitialized() const
 t CVRMsg_Settings_SetBool::MergeFrom(CVRMsg_Settings_SetBool const&)
 t CVRMsg_Settings_SetBool::MergeFrom(CVRMsg_Settings_SetBool const&) [clone .cold]
 t CVRMsg_Settings_SetBool::New() const
 t CVRMsg_Settings_SetBool::New() const [clone .cold]
 t CVRMsg_Settings_SetBool::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_SetBool::SetCachedSize(int) const
 t CVRMsg_Settings_SetBool::SharedCtor()
 t CVRMsg_Settings_SetBool::SharedCtor() [clone .cold]
 t CVRMsg_Settings_SetBool::SharedDtor()
 t CVRMsg_Settings_SetBool::Swap(CVRMsg_Settings_SetBool*)
 t CVRMsg_Settings_SetBool::default_instance()
 t CVRMsg_Settings_SetBool::descriptor()
 t CVRMsg_Settings_SetBool::descriptor() [clone .cold]
 t CVRMsg_Settings_SetBool::mutable_section_key()
 t CVRMsg_Settings_SetBool::mutable_settings_key()
 t CVRMsg_Settings_SetBool::release_section_key()
 t CVRMsg_Settings_SetBool::release_settings_key()
 t CVRMsg_Settings_SetBool::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_SetBool::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_SetBool::set_section_key(char const*)
 t CVRMsg_Settings_SetBool::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_SetBool::set_section_key(std::string const&)
 t CVRMsg_Settings_SetBool::set_settings_key(char const*)
 t CVRMsg_Settings_SetBool::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_SetBool::set_settings_key(std::string const&)
 t CVRMsg_Settings_SetBool::~CVRMsg_Settings_SetBool()
 t CVRMsg_Settings_SetNumeric::ByteSize() const
 t CVRMsg_Settings_SetNumeric::CVRMsg_Settings_SetNumeric()
 t CVRMsg_Settings_SetNumeric::CVRMsg_Settings_SetNumeric() [clone .cold]
 t CVRMsg_Settings_SetNumeric::CVRMsg_Settings_SetNumeric(CVRMsg_Settings_SetNumeric const&)
 t CVRMsg_Settings_SetNumeric::CVRMsg_Settings_SetNumeric(CVRMsg_Settings_SetNumeric const&) [clone .cold]
 t CVRMsg_Settings_SetNumeric::Clear()
 t CVRMsg_Settings_SetNumeric::CopyFrom(CVRMsg_Settings_SetNumeric const&)
 t CVRMsg_Settings_SetNumeric::GetCachedSize() const
 t CVRMsg_Settings_SetNumeric::GetMetadata() const
 t CVRMsg_Settings_SetNumeric::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_SetNumeric::InitAsDefaultInstance()
 t CVRMsg_Settings_SetNumeric::IsInitialized() const
 t CVRMsg_Settings_SetNumeric::MergeFrom(CVRMsg_Settings_SetNumeric const&)
 t CVRMsg_Settings_SetNumeric::MergeFrom(CVRMsg_Settings_SetNumeric const&) [clone .cold]
 t CVRMsg_Settings_SetNumeric::New() const
 t CVRMsg_Settings_SetNumeric::New() const [clone .cold]
 t CVRMsg_Settings_SetNumeric::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_SetNumeric::SetCachedSize(int) const
 t CVRMsg_Settings_SetNumeric::SharedCtor()
 t CVRMsg_Settings_SetNumeric::SharedCtor() [clone .cold]
 t CVRMsg_Settings_SetNumeric::SharedDtor()
 t CVRMsg_Settings_SetNumeric::Swap(CVRMsg_Settings_SetNumeric*)
 t CVRMsg_Settings_SetNumeric::default_instance()
 t CVRMsg_Settings_SetNumeric::descriptor()
 t CVRMsg_Settings_SetNumeric::descriptor() [clone .cold]
 t CVRMsg_Settings_SetNumeric::mutable_section_key()
 t CVRMsg_Settings_SetNumeric::mutable_settings_key()
 t CVRMsg_Settings_SetNumeric::release_section_key()
 t CVRMsg_Settings_SetNumeric::release_settings_key()
 t CVRMsg_Settings_SetNumeric::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_SetNumeric::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_SetNumeric::set_section_key(char const*)
 t CVRMsg_Settings_SetNumeric::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_SetNumeric::set_section_key(std::string const&)
 t CVRMsg_Settings_SetNumeric::set_settings_key(char const*)
 t CVRMsg_Settings_SetNumeric::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_SetNumeric::set_settings_key(std::string const&)
 t CVRMsg_Settings_SetNumeric::~CVRMsg_Settings_SetNumeric()
 t CVRMsg_Settings_SetString::ByteSize() const
 t CVRMsg_Settings_SetString::CVRMsg_Settings_SetString()
 t CVRMsg_Settings_SetString::CVRMsg_Settings_SetString() [clone .cold]
 t CVRMsg_Settings_SetString::CVRMsg_Settings_SetString(CVRMsg_Settings_SetString const&)
 t CVRMsg_Settings_SetString::CVRMsg_Settings_SetString(CVRMsg_Settings_SetString const&) [clone .cold]
 t CVRMsg_Settings_SetString::Clear()
 t CVRMsg_Settings_SetString::CopyFrom(CVRMsg_Settings_SetString const&)
 t CVRMsg_Settings_SetString::GetCachedSize() const
 t CVRMsg_Settings_SetString::GetMetadata() const
 t CVRMsg_Settings_SetString::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_SetString::InitAsDefaultInstance()
 t CVRMsg_Settings_SetString::IsInitialized() const
 t CVRMsg_Settings_SetString::MergeFrom(CVRMsg_Settings_SetString const&)
 t CVRMsg_Settings_SetString::MergeFrom(CVRMsg_Settings_SetString const&) [clone .cold]
 t CVRMsg_Settings_SetString::New() const
 t CVRMsg_Settings_SetString::New() const [clone .cold]
 t CVRMsg_Settings_SetString::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_SetString::SetCachedSize(int) const
 t CVRMsg_Settings_SetString::SharedCtor()
 t CVRMsg_Settings_SetString::SharedCtor() [clone .cold]
 t CVRMsg_Settings_SetString::SharedDtor()
 t CVRMsg_Settings_SetString::Swap(CVRMsg_Settings_SetString*)
 t CVRMsg_Settings_SetString::default_instance()
 t CVRMsg_Settings_SetString::descriptor()
 t CVRMsg_Settings_SetString::descriptor() [clone .cold]
 t CVRMsg_Settings_SetString::mutable_section_key()
 t CVRMsg_Settings_SetString::mutable_settings_key()
 t CVRMsg_Settings_SetString::mutable_value()
 t CVRMsg_Settings_SetString::release_section_key()
 t CVRMsg_Settings_SetString::release_settings_key()
 t CVRMsg_Settings_SetString::release_value()
 t CVRMsg_Settings_SetString::set_allocated_section_key(std::string*)
 t CVRMsg_Settings_SetString::set_allocated_settings_key(std::string*)
 t CVRMsg_Settings_SetString::set_allocated_value(std::string*)
 t CVRMsg_Settings_SetString::set_section_key(char const*)
 t CVRMsg_Settings_SetString::set_section_key(char const*, unsigned long)
 t CVRMsg_Settings_SetString::set_section_key(std::string const&)
 t CVRMsg_Settings_SetString::set_settings_key(char const*)
 t CVRMsg_Settings_SetString::set_settings_key(char const*, unsigned long)
 t CVRMsg_Settings_SetString::set_settings_key(std::string const&)
 t CVRMsg_Settings_SetString::set_value(char const*)
 t CVRMsg_Settings_SetString::set_value(char const*, unsigned long)
 t CVRMsg_Settings_SetString::set_value(std::string const&)
 t CVRMsg_Settings_SetString::~CVRMsg_Settings_SetString()
 t CVRMsg_Settings_SetValue_Response::ByteSize() const
 t CVRMsg_Settings_SetValue_Response::CVRMsg_Settings_SetValue_Response()
 t CVRMsg_Settings_SetValue_Response::CVRMsg_Settings_SetValue_Response() [clone .cold]
 t CVRMsg_Settings_SetValue_Response::CVRMsg_Settings_SetValue_Response(CVRMsg_Settings_SetValue_Response const&)
 t CVRMsg_Settings_SetValue_Response::CVRMsg_Settings_SetValue_Response(CVRMsg_Settings_SetValue_Response const&) [clone .cold]
 t CVRMsg_Settings_SetValue_Response::Clear()
 t CVRMsg_Settings_SetValue_Response::CopyFrom(CVRMsg_Settings_SetValue_Response const&)
 t CVRMsg_Settings_SetValue_Response::GetCachedSize() const
 t CVRMsg_Settings_SetValue_Response::GetMetadata() const
 t CVRMsg_Settings_SetValue_Response::GetMetadata() const [clone .cold]
 t CVRMsg_Settings_SetValue_Response::InitAsDefaultInstance()
 t CVRMsg_Settings_SetValue_Response::IsInitialized() const
 t CVRMsg_Settings_SetValue_Response::MergeFrom(CVRMsg_Settings_SetValue_Response const&)
 t CVRMsg_Settings_SetValue_Response::MergeFrom(CVRMsg_Settings_SetValue_Response const&) [clone .cold]
 t CVRMsg_Settings_SetValue_Response::New() const
 t CVRMsg_Settings_SetValue_Response::New() const [clone .cold]
 t CVRMsg_Settings_SetValue_Response::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_Settings_SetValue_Response::SetCachedSize(int) const
 t CVRMsg_Settings_SetValue_Response::SharedCtor()
 t CVRMsg_Settings_SetValue_Response::SharedDtor()
 t CVRMsg_Settings_SetValue_Response::Swap(CVRMsg_Settings_SetValue_Response*)
 t CVRMsg_Settings_SetValue_Response::default_instance()
 t CVRMsg_Settings_SetValue_Response::descriptor()
 t CVRMsg_Settings_SetValue_Response::descriptor() [clone .cold]
 t CVRMsg_Settings_SetValue_Response::~CVRMsg_Settings_SetValue_Response()
 t CVRMsg_ShouldKillTheaterPancakeProcess::ByteSize() const
 t CVRMsg_ShouldKillTheaterPancakeProcess::CVRMsg_ShouldKillTheaterPancakeProcess()
 t CVRMsg_ShouldKillTheaterPancakeProcess::CVRMsg_ShouldKillTheaterPancakeProcess() [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcess::CVRMsg_ShouldKillTheaterPancakeProcess(CVRMsg_ShouldKillTheaterPancakeProcess const&)
 t CVRMsg_ShouldKillTheaterPancakeProcess::CVRMsg_ShouldKillTheaterPancakeProcess(CVRMsg_ShouldKillTheaterPancakeProcess const&) [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcess::Clear()
 t CVRMsg_ShouldKillTheaterPancakeProcess::CopyFrom(CVRMsg_ShouldKillTheaterPancakeProcess const&)
 t CVRMsg_ShouldKillTheaterPancakeProcess::GetCachedSize() const
 t CVRMsg_ShouldKillTheaterPancakeProcess::GetMetadata() const
 t CVRMsg_ShouldKillTheaterPancakeProcess::GetMetadata() const [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcess::InitAsDefaultInstance()
 t CVRMsg_ShouldKillTheaterPancakeProcess::IsInitialized() const
 t CVRMsg_ShouldKillTheaterPancakeProcess::MergeFrom(CVRMsg_ShouldKillTheaterPancakeProcess const&)
 t CVRMsg_ShouldKillTheaterPancakeProcess::MergeFrom(CVRMsg_ShouldKillTheaterPancakeProcess const&) [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcess::New() const
 t CVRMsg_ShouldKillTheaterPancakeProcess::New() const [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcess::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ShouldKillTheaterPancakeProcess::SetCachedSize(int) const
 t CVRMsg_ShouldKillTheaterPancakeProcess::SharedCtor()
 t CVRMsg_ShouldKillTheaterPancakeProcess::SharedDtor()
 t CVRMsg_ShouldKillTheaterPancakeProcess::Swap(CVRMsg_ShouldKillTheaterPancakeProcess*)
 t CVRMsg_ShouldKillTheaterPancakeProcess::default_instance()
 t CVRMsg_ShouldKillTheaterPancakeProcess::descriptor()
 t CVRMsg_ShouldKillTheaterPancakeProcess::descriptor() [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcess::~CVRMsg_ShouldKillTheaterPancakeProcess()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::ByteSize() const
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::CVRMsg_ShouldKillTheaterPancakeProcessResponse()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::CVRMsg_ShouldKillTheaterPancakeProcessResponse() [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::CVRMsg_ShouldKillTheaterPancakeProcessResponse(CVRMsg_ShouldKillTheaterPancakeProcessResponse const&)
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::CVRMsg_ShouldKillTheaterPancakeProcessResponse(CVRMsg_ShouldKillTheaterPancakeProcessResponse const&) [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::Clear()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::CopyFrom(CVRMsg_ShouldKillTheaterPancakeProcessResponse const&)
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::GetCachedSize() const
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::GetMetadata() const
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::InitAsDefaultInstance()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::IsInitialized() const
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::MergeFrom(CVRMsg_ShouldKillTheaterPancakeProcessResponse const&)
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::MergeFrom(CVRMsg_ShouldKillTheaterPancakeProcessResponse const&) [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::New() const
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::New() const [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::SetCachedSize(int) const
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::SharedCtor()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::SharedDtor()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::Swap(CVRMsg_ShouldKillTheaterPancakeProcessResponse*)
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::default_instance()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::descriptor()
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::descriptor() [clone .cold]
 t CVRMsg_ShouldKillTheaterPancakeProcessResponse::~CVRMsg_ShouldKillTheaterPancakeProcessResponse()
 t CVRMsg_ShutdownSystem::ByteSize() const
 t CVRMsg_ShutdownSystem::CVRMsg_ShutdownSystem()
 t CVRMsg_ShutdownSystem::CVRMsg_ShutdownSystem() [clone .cold]
 t CVRMsg_ShutdownSystem::CVRMsg_ShutdownSystem(CVRMsg_ShutdownSystem const&)
 t CVRMsg_ShutdownSystem::CVRMsg_ShutdownSystem(CVRMsg_ShutdownSystem const&) [clone .cold]
 t CVRMsg_ShutdownSystem::Clear()
 t CVRMsg_ShutdownSystem::CopyFrom(CVRMsg_ShutdownSystem const&)
 t CVRMsg_ShutdownSystem::GetCachedSize() const
 t CVRMsg_ShutdownSystem::GetMetadata() const
 t CVRMsg_ShutdownSystem::GetMetadata() const [clone .cold]
 t CVRMsg_ShutdownSystem::InitAsDefaultInstance()
 t CVRMsg_ShutdownSystem::IsInitialized() const
 t CVRMsg_ShutdownSystem::MergeFrom(CVRMsg_ShutdownSystem const&)
 t CVRMsg_ShutdownSystem::MergeFrom(CVRMsg_ShutdownSystem const&) [clone .cold]
 t CVRMsg_ShutdownSystem::New() const
 t CVRMsg_ShutdownSystem::New() const [clone .cold]
 t CVRMsg_ShutdownSystem::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ShutdownSystem::SetCachedSize(int) const
 t CVRMsg_ShutdownSystem::SharedCtor()
 t CVRMsg_ShutdownSystem::SharedDtor()
 t CVRMsg_ShutdownSystem::Swap(CVRMsg_ShutdownSystem*)
 t CVRMsg_ShutdownSystem::default_instance()
 t CVRMsg_ShutdownSystem::descriptor()
 t CVRMsg_ShutdownSystem::descriptor() [clone .cold]
 t CVRMsg_ShutdownSystem::~CVRMsg_ShutdownSystem()
 t CVRMsg_ShutdownSystemResponse::ByteSize() const
 t CVRMsg_ShutdownSystemResponse::CVRMsg_ShutdownSystemResponse()
 t CVRMsg_ShutdownSystemResponse::CVRMsg_ShutdownSystemResponse() [clone .cold]
 t CVRMsg_ShutdownSystemResponse::CVRMsg_ShutdownSystemResponse(CVRMsg_ShutdownSystemResponse const&)
 t CVRMsg_ShutdownSystemResponse::CVRMsg_ShutdownSystemResponse(CVRMsg_ShutdownSystemResponse const&) [clone .cold]
 t CVRMsg_ShutdownSystemResponse::Clear()
 t CVRMsg_ShutdownSystemResponse::CopyFrom(CVRMsg_ShutdownSystemResponse const&)
 t CVRMsg_ShutdownSystemResponse::GetCachedSize() const
 t CVRMsg_ShutdownSystemResponse::GetMetadata() const
 t CVRMsg_ShutdownSystemResponse::GetMetadata() const [clone .cold]
 t CVRMsg_ShutdownSystemResponse::InitAsDefaultInstance()
 t CVRMsg_ShutdownSystemResponse::IsInitialized() const
 t CVRMsg_ShutdownSystemResponse::MergeFrom(CVRMsg_ShutdownSystemResponse const&)
 t CVRMsg_ShutdownSystemResponse::MergeFrom(CVRMsg_ShutdownSystemResponse const&) [clone .cold]
 t CVRMsg_ShutdownSystemResponse::New() const
 t CVRMsg_ShutdownSystemResponse::New() const [clone .cold]
 t CVRMsg_ShutdownSystemResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_ShutdownSystemResponse::SetCachedSize(int) const
 t CVRMsg_ShutdownSystemResponse::SharedCtor()
 t CVRMsg_ShutdownSystemResponse::SharedDtor()
 t CVRMsg_ShutdownSystemResponse::Swap(CVRMsg_ShutdownSystemResponse*)
 t CVRMsg_ShutdownSystemResponse::default_instance()
 t CVRMsg_ShutdownSystemResponse::descriptor()
 t CVRMsg_ShutdownSystemResponse::descriptor() [clone .cold]
 t CVRMsg_ShutdownSystemResponse::~CVRMsg_ShutdownSystemResponse()
 t CVRMsg_StartAutolaunchOverlays::ByteSize() const
 t CVRMsg_StartAutolaunchOverlays::CVRMsg_StartAutolaunchOverlays()
 t CVRMsg_StartAutolaunchOverlays::CVRMsg_StartAutolaunchOverlays() [clone .cold]
 t CVRMsg_StartAutolaunchOverlays::CVRMsg_StartAutolaunchOverlays(CVRMsg_StartAutolaunchOverlays const&)
 t CVRMsg_StartAutolaunchOverlays::CVRMsg_StartAutolaunchOverlays(CVRMsg_StartAutolaunchOverlays const&) [clone .cold]
 t CVRMsg_StartAutolaunchOverlays::Clear()
 t CVRMsg_StartAutolaunchOverlays::CopyFrom(CVRMsg_StartAutolaunchOverlays const&)
 t CVRMsg_StartAutolaunchOverlays::GetCachedSize() const
 t CVRMsg_StartAutolaunchOverlays::GetMetadata() const
 t CVRMsg_StartAutolaunchOverlays::GetMetadata() const [clone .cold]
 t CVRMsg_StartAutolaunchOverlays::InitAsDefaultInstance()
 t CVRMsg_StartAutolaunchOverlays::IsInitialized() const
 t CVRMsg_StartAutolaunchOverlays::MergeFrom(CVRMsg_StartAutolaunchOverlays const&)
 t CVRMsg_StartAutolaunchOverlays::MergeFrom(CVRMsg_StartAutolaunchOverlays const&) [clone .cold]
 t CVRMsg_StartAutolaunchOverlays::New() const
 t CVRMsg_StartAutolaunchOverlays::New() const [clone .cold]
 t CVRMsg_StartAutolaunchOverlays::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_StartAutolaunchOverlays::SetCachedSize(int) const
 t CVRMsg_StartAutolaunchOverlays::SharedCtor()
 t CVRMsg_StartAutolaunchOverlays::SharedDtor()
 t CVRMsg_StartAutolaunchOverlays::Swap(CVRMsg_StartAutolaunchOverlays*)
 t CVRMsg_StartAutolaunchOverlays::default_instance()
 t CVRMsg_StartAutolaunchOverlays::descriptor()
 t CVRMsg_StartAutolaunchOverlays::descriptor() [clone .cold]
 t CVRMsg_StartAutolaunchOverlays::~CVRMsg_StartAutolaunchOverlays()
 t CVRMsg_StartDashboard::ByteSize() const
 t CVRMsg_StartDashboard::CVRMsg_StartDashboard()
 t CVRMsg_StartDashboard::CVRMsg_StartDashboard() [clone .cold]
 t CVRMsg_StartDashboard::CVRMsg_StartDashboard(CVRMsg_StartDashboard const&)
 t CVRMsg_StartDashboard::CVRMsg_StartDashboard(CVRMsg_StartDashboard const&) [clone .cold]
 t CVRMsg_StartDashboard::Clear()
 t CVRMsg_StartDashboard::CopyFrom(CVRMsg_StartDashboard const&)
 t CVRMsg_StartDashboard::GetCachedSize() const
 t CVRMsg_StartDashboard::GetMetadata() const
 t CVRMsg_StartDashboard::GetMetadata() const [clone .cold]
 t CVRMsg_StartDashboard::InitAsDefaultInstance()
 t CVRMsg_StartDashboard::IsInitialized() const
 t CVRMsg_StartDashboard::MergeFrom(CVRMsg_StartDashboard const&)
 t CVRMsg_StartDashboard::MergeFrom(CVRMsg_StartDashboard const&) [clone .cold]
 t CVRMsg_StartDashboard::New() const
 t CVRMsg_StartDashboard::New() const [clone .cold]
 t CVRMsg_StartDashboard::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_StartDashboard::SetCachedSize(int) const
 t CVRMsg_StartDashboard::SharedCtor()
 t CVRMsg_StartDashboard::SharedDtor()
 t CVRMsg_StartDashboard::Swap(CVRMsg_StartDashboard*)
 t CVRMsg_StartDashboard::default_instance()
 t CVRMsg_StartDashboard::descriptor()
 t CVRMsg_StartDashboard::descriptor() [clone .cold]
 t CVRMsg_StartDashboard::~CVRMsg_StartDashboard()
 t CVRMsg_StartDashboardResponse::ByteSize() const
 t CVRMsg_StartDashboardResponse::CVRMsg_StartDashboardResponse()
 t CVRMsg_StartDashboardResponse::CVRMsg_StartDashboardResponse() [clone .cold]
 t CVRMsg_StartDashboardResponse::CVRMsg_StartDashboardResponse(CVRMsg_StartDashboardResponse const&)
 t CVRMsg_StartDashboardResponse::CVRMsg_StartDashboardResponse(CVRMsg_StartDashboardResponse const&) [clone .cold]
 t CVRMsg_StartDashboardResponse::Clear()
 t CVRMsg_StartDashboardResponse::CopyFrom(CVRMsg_StartDashboardResponse const&)
 t CVRMsg_StartDashboardResponse::GetCachedSize() const
 t CVRMsg_StartDashboardResponse::GetMetadata() const
 t CVRMsg_StartDashboardResponse::GetMetadata() const [clone .cold]
 t CVRMsg_StartDashboardResponse::InitAsDefaultInstance()
 t CVRMsg_StartDashboardResponse::IsInitialized() const
 t CVRMsg_StartDashboardResponse::MergeFrom(CVRMsg_StartDashboardResponse const&)
 t CVRMsg_StartDashboardResponse::MergeFrom(CVRMsg_StartDashboardResponse const&) [clone .cold]
 t CVRMsg_StartDashboardResponse::New() const
 t CVRMsg_StartDashboardResponse::New() const [clone .cold]
 t CVRMsg_StartDashboardResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_StartDashboardResponse::SetCachedSize(int) const
 t CVRMsg_StartDashboardResponse::SharedCtor()
 t CVRMsg_StartDashboardResponse::SharedDtor()
 t CVRMsg_StartDashboardResponse::Swap(CVRMsg_StartDashboardResponse*)
 t CVRMsg_StartDashboardResponse::default_instance()
 t CVRMsg_StartDashboardResponse::descriptor()
 t CVRMsg_StartDashboardResponse::descriptor() [clone .cold]
 t CVRMsg_StartDashboardResponse::~CVRMsg_StartDashboardResponse()
 t CVRMsg_StartHomeAppResponse::ByteSize() const
 t CVRMsg_StartHomeAppResponse::CVRMsg_StartHomeAppResponse()
 t CVRMsg_StartHomeAppResponse::CVRMsg_StartHomeAppResponse() [clone .cold]
 t CVRMsg_StartHomeAppResponse::CVRMsg_StartHomeAppResponse(CVRMsg_StartHomeAppResponse const&)
 t CVRMsg_StartHomeAppResponse::CVRMsg_StartHomeAppResponse(CVRMsg_StartHomeAppResponse const&) [clone .cold]
 t CVRMsg_StartHomeAppResponse::Clear()
 t CVRMsg_StartHomeAppResponse::CopyFrom(CVRMsg_StartHomeAppResponse const&)
 t CVRMsg_StartHomeAppResponse::GetCachedSize() const
 t CVRMsg_StartHomeAppResponse::GetMetadata() const
 t CVRMsg_StartHomeAppResponse::GetMetadata() const [clone .cold]
 t CVRMsg_StartHomeAppResponse::InitAsDefaultInstance()
 t CVRMsg_StartHomeAppResponse::IsInitialized() const
 t CVRMsg_StartHomeAppResponse::MergeFrom(CVRMsg_StartHomeAppResponse const&)
 t CVRMsg_StartHomeAppResponse::MergeFrom(CVRMsg_StartHomeAppResponse const&) [clone .cold]
 t CVRMsg_StartHomeAppResponse::New() const
 t CVRMsg_StartHomeAppResponse::New() const [clone .cold]
 t CVRMsg_StartHomeAppResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_StartHomeAppResponse::SetCachedSize(int) const
 t CVRMsg_StartHomeAppResponse::SharedCtor()
 t CVRMsg_StartHomeAppResponse::SharedDtor()
 t CVRMsg_StartHomeAppResponse::Swap(CVRMsg_StartHomeAppResponse*)
 t CVRMsg_StartHomeAppResponse::default_instance()
 t CVRMsg_StartHomeAppResponse::descriptor()
 t CVRMsg_StartHomeAppResponse::descriptor() [clone .cold]
 t CVRMsg_StartHomeAppResponse::~CVRMsg_StartHomeAppResponse()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::ByteSize() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::CVRMsg_TrackedCamera_AcquireVideoStreamingService()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::CVRMsg_TrackedCamera_AcquireVideoStreamingService() [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::CVRMsg_TrackedCamera_AcquireVideoStreamingService(CVRMsg_TrackedCamera_AcquireVideoStreamingService const&)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::CVRMsg_TrackedCamera_AcquireVideoStreamingService(CVRMsg_TrackedCamera_AcquireVideoStreamingService const&) [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::Clear()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::CopyFrom(CVRMsg_TrackedCamera_AcquireVideoStreamingService const&)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::GetCachedSize() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::GetMetadata() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::IsInitialized() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::MergeFrom(CVRMsg_TrackedCamera_AcquireVideoStreamingService const&)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::MergeFrom(CVRMsg_TrackedCamera_AcquireVideoStreamingService const&) [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::New() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::New() const [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::SharedCtor()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::SharedDtor()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::Swap(CVRMsg_TrackedCamera_AcquireVideoStreamingService*)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::default_instance()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::descriptor()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingService::~CVRMsg_TrackedCamera_AcquireVideoStreamingService()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::ByteSize() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse() [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse(CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse const&)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse(CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::Clear()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::CopyFrom(CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse const&)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::MergeFrom(CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse const&)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::MergeFrom(CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::New() const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::SharedCtor()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::SharedDtor()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::Swap(CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse*)
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::default_instance()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::descriptor()
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse::~CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse()
 t CVRMsg_TrackedCamera_Enable::ByteSize() const
 t CVRMsg_TrackedCamera_Enable::CVRMsg_TrackedCamera_Enable()
 t CVRMsg_TrackedCamera_Enable::CVRMsg_TrackedCamera_Enable() [clone .cold]
 t CVRMsg_TrackedCamera_Enable::CVRMsg_TrackedCamera_Enable(CVRMsg_TrackedCamera_Enable const&)
 t CVRMsg_TrackedCamera_Enable::CVRMsg_TrackedCamera_Enable(CVRMsg_TrackedCamera_Enable const&) [clone .cold]
 t CVRMsg_TrackedCamera_Enable::Clear()
 t CVRMsg_TrackedCamera_Enable::CopyFrom(CVRMsg_TrackedCamera_Enable const&)
 t CVRMsg_TrackedCamera_Enable::GetCachedSize() const
 t CVRMsg_TrackedCamera_Enable::GetMetadata() const
 t CVRMsg_TrackedCamera_Enable::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_Enable::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_Enable::IsInitialized() const
 t CVRMsg_TrackedCamera_Enable::MergeFrom(CVRMsg_TrackedCamera_Enable const&)
 t CVRMsg_TrackedCamera_Enable::MergeFrom(CVRMsg_TrackedCamera_Enable const&) [clone .cold]
 t CVRMsg_TrackedCamera_Enable::New() const
 t CVRMsg_TrackedCamera_Enable::New() const [clone .cold]
 t CVRMsg_TrackedCamera_Enable::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_Enable::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_Enable::SharedCtor()
 t CVRMsg_TrackedCamera_Enable::SharedDtor()
 t CVRMsg_TrackedCamera_Enable::Swap(CVRMsg_TrackedCamera_Enable*)
 t CVRMsg_TrackedCamera_Enable::default_instance()
 t CVRMsg_TrackedCamera_Enable::descriptor()
 t CVRMsg_TrackedCamera_Enable::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_Enable::~CVRMsg_TrackedCamera_Enable()
 t CVRMsg_TrackedCamera_EnableResponse::ByteSize() const
 t CVRMsg_TrackedCamera_EnableResponse::CVRMsg_TrackedCamera_EnableResponse()
 t CVRMsg_TrackedCamera_EnableResponse::CVRMsg_TrackedCamera_EnableResponse() [clone .cold]
 t CVRMsg_TrackedCamera_EnableResponse::CVRMsg_TrackedCamera_EnableResponse(CVRMsg_TrackedCamera_EnableResponse const&)
 t CVRMsg_TrackedCamera_EnableResponse::CVRMsg_TrackedCamera_EnableResponse(CVRMsg_TrackedCamera_EnableResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_EnableResponse::Clear()
 t CVRMsg_TrackedCamera_EnableResponse::CopyFrom(CVRMsg_TrackedCamera_EnableResponse const&)
 t CVRMsg_TrackedCamera_EnableResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_EnableResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_EnableResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_EnableResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_EnableResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_EnableResponse::MergeFrom(CVRMsg_TrackedCamera_EnableResponse const&)
 t CVRMsg_TrackedCamera_EnableResponse::MergeFrom(CVRMsg_TrackedCamera_EnableResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_EnableResponse::New() const
 t CVRMsg_TrackedCamera_EnableResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_EnableResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_EnableResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_EnableResponse::SharedCtor()
 t CVRMsg_TrackedCamera_EnableResponse::SharedDtor()
 t CVRMsg_TrackedCamera_EnableResponse::Swap(CVRMsg_TrackedCamera_EnableResponse*)
 t CVRMsg_TrackedCamera_EnableResponse::default_instance()
 t CVRMsg_TrackedCamera_EnableResponse::descriptor()
 t CVRMsg_TrackedCamera_EnableResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_EnableResponse::~CVRMsg_TrackedCamera_EnableResponse()
 t CVRMsg_TrackedCamera_GetDistortion::ByteSize() const
 t CVRMsg_TrackedCamera_GetDistortion::CVRMsg_TrackedCamera_GetDistortion()
 t CVRMsg_TrackedCamera_GetDistortion::CVRMsg_TrackedCamera_GetDistortion() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion::CVRMsg_TrackedCamera_GetDistortion(CVRMsg_TrackedCamera_GetDistortion const&)
 t CVRMsg_TrackedCamera_GetDistortion::CVRMsg_TrackedCamera_GetDistortion(CVRMsg_TrackedCamera_GetDistortion const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion::Clear()
 t CVRMsg_TrackedCamera_GetDistortion::CopyFrom(CVRMsg_TrackedCamera_GetDistortion const&)
 t CVRMsg_TrackedCamera_GetDistortion::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetDistortion::GetMetadata() const
 t CVRMsg_TrackedCamera_GetDistortion::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetDistortion::IsInitialized() const
 t CVRMsg_TrackedCamera_GetDistortion::MergeFrom(CVRMsg_TrackedCamera_GetDistortion const&)
 t CVRMsg_TrackedCamera_GetDistortion::MergeFrom(CVRMsg_TrackedCamera_GetDistortion const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion::New() const
 t CVRMsg_TrackedCamera_GetDistortion::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetDistortion::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetDistortion::SharedCtor()
 t CVRMsg_TrackedCamera_GetDistortion::SharedDtor()
 t CVRMsg_TrackedCamera_GetDistortion::Swap(CVRMsg_TrackedCamera_GetDistortion*)
 t CVRMsg_TrackedCamera_GetDistortion::default_instance()
 t CVRMsg_TrackedCamera_GetDistortion::descriptor()
 t CVRMsg_TrackedCamera_GetDistortion::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion::~CVRMsg_TrackedCamera_GetDistortion()
 t CVRMsg_TrackedCamera_GetDistortionResponse::ByteSize() const
 t CVRMsg_TrackedCamera_GetDistortionResponse::CVRMsg_TrackedCamera_GetDistortionResponse()
 t CVRMsg_TrackedCamera_GetDistortionResponse::CVRMsg_TrackedCamera_GetDistortionResponse() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse::CVRMsg_TrackedCamera_GetDistortionResponse(CVRMsg_TrackedCamera_GetDistortionResponse const&)
 t CVRMsg_TrackedCamera_GetDistortionResponse::CVRMsg_TrackedCamera_GetDistortionResponse(CVRMsg_TrackedCamera_GetDistortionResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse::Clear()
 t CVRMsg_TrackedCamera_GetDistortionResponse::CopyFrom(CVRMsg_TrackedCamera_GetDistortionResponse const&)
 t CVRMsg_TrackedCamera_GetDistortionResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetDistortionResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_GetDistortionResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetDistortionResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_GetDistortionResponse::MergeFrom(CVRMsg_TrackedCamera_GetDistortionResponse const&)
 t CVRMsg_TrackedCamera_GetDistortionResponse::MergeFrom(CVRMsg_TrackedCamera_GetDistortionResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse::New() const
 t CVRMsg_TrackedCamera_GetDistortionResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetDistortionResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetDistortionResponse::SharedCtor()
 t CVRMsg_TrackedCamera_GetDistortionResponse::SharedDtor()
 t CVRMsg_TrackedCamera_GetDistortionResponse::Swap(CVRMsg_TrackedCamera_GetDistortionResponse*)
 t CVRMsg_TrackedCamera_GetDistortionResponse::default_instance()
 t CVRMsg_TrackedCamera_GetDistortionResponse::descriptor()
 t CVRMsg_TrackedCamera_GetDistortionResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse::~CVRMsg_TrackedCamera_GetDistortionResponse()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::ByteSize() const
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord(CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord const&)
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord(CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::Clear()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::CopyFrom(CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord const&)
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::GetMetadata() const
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::IsInitialized() const
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::MergeFrom(CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord const&)
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::MergeFrom(CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::New() const
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::SharedCtor()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::SharedDtor()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::Swap(CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord*)
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::default_instance()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::descriptor()
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord::~CVRMsg_TrackedCamera_GetDistortionResponse_OutputCoord()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::ByteSize() const
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::CVRMsg_TrackedCamera_GetDistortion_InputCoord()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::CVRMsg_TrackedCamera_GetDistortion_InputCoord() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::CVRMsg_TrackedCamera_GetDistortion_InputCoord(CVRMsg_TrackedCamera_GetDistortion_InputCoord const&)
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::CVRMsg_TrackedCamera_GetDistortion_InputCoord(CVRMsg_TrackedCamera_GetDistortion_InputCoord const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::Clear()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::CopyFrom(CVRMsg_TrackedCamera_GetDistortion_InputCoord const&)
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::GetMetadata() const
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::IsInitialized() const
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::MergeFrom(CVRMsg_TrackedCamera_GetDistortion_InputCoord const&)
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::MergeFrom(CVRMsg_TrackedCamera_GetDistortion_InputCoord const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::New() const
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::SharedCtor()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::SharedDtor()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::Swap(CVRMsg_TrackedCamera_GetDistortion_InputCoord*)
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::default_instance()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::descriptor()
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetDistortion_InputCoord::~CVRMsg_TrackedCamera_GetDistortion_InputCoord()
 t CVRMsg_TrackedCamera_GetFormatDimensions::ByteSize() const
 t CVRMsg_TrackedCamera_GetFormatDimensions::CVRMsg_TrackedCamera_GetFormatDimensions()
 t CVRMsg_TrackedCamera_GetFormatDimensions::CVRMsg_TrackedCamera_GetFormatDimensions() [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensions::CVRMsg_TrackedCamera_GetFormatDimensions(CVRMsg_TrackedCamera_GetFormatDimensions const&)
 t CVRMsg_TrackedCamera_GetFormatDimensions::CVRMsg_TrackedCamera_GetFormatDimensions(CVRMsg_TrackedCamera_GetFormatDimensions const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensions::Clear()
 t CVRMsg_TrackedCamera_GetFormatDimensions::CopyFrom(CVRMsg_TrackedCamera_GetFormatDimensions const&)
 t CVRMsg_TrackedCamera_GetFormatDimensions::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetFormatDimensions::GetMetadata() const
 t CVRMsg_TrackedCamera_GetFormatDimensions::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensions::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetFormatDimensions::IsInitialized() const
 t CVRMsg_TrackedCamera_GetFormatDimensions::MergeFrom(CVRMsg_TrackedCamera_GetFormatDimensions const&)
 t CVRMsg_TrackedCamera_GetFormatDimensions::MergeFrom(CVRMsg_TrackedCamera_GetFormatDimensions const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensions::New() const
 t CVRMsg_TrackedCamera_GetFormatDimensions::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensions::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetFormatDimensions::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetFormatDimensions::SharedCtor()
 t CVRMsg_TrackedCamera_GetFormatDimensions::SharedDtor()
 t CVRMsg_TrackedCamera_GetFormatDimensions::Swap(CVRMsg_TrackedCamera_GetFormatDimensions*)
 t CVRMsg_TrackedCamera_GetFormatDimensions::default_instance()
 t CVRMsg_TrackedCamera_GetFormatDimensions::descriptor()
 t CVRMsg_TrackedCamera_GetFormatDimensions::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensions::~CVRMsg_TrackedCamera_GetFormatDimensions()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::ByteSize() const
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::CVRMsg_TrackedCamera_GetFormatDimensionsResponse()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::CVRMsg_TrackedCamera_GetFormatDimensionsResponse() [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::CVRMsg_TrackedCamera_GetFormatDimensionsResponse(CVRMsg_TrackedCamera_GetFormatDimensionsResponse const&)
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::CVRMsg_TrackedCamera_GetFormatDimensionsResponse(CVRMsg_TrackedCamera_GetFormatDimensionsResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::Clear()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::CopyFrom(CVRMsg_TrackedCamera_GetFormatDimensionsResponse const&)
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::MergeFrom(CVRMsg_TrackedCamera_GetFormatDimensionsResponse const&)
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::MergeFrom(CVRMsg_TrackedCamera_GetFormatDimensionsResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::New() const
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::SharedCtor()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::SharedDtor()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::Swap(CVRMsg_TrackedCamera_GetFormatDimensionsResponse*)
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::default_instance()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::descriptor()
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetFormatDimensionsResponse::~CVRMsg_TrackedCamera_GetFormatDimensionsResponse()
 t CVRMsg_TrackedCamera_GetFrameBounds::ByteSize() const
 t CVRMsg_TrackedCamera_GetFrameBounds::CVRMsg_TrackedCamera_GetFrameBounds()
 t CVRMsg_TrackedCamera_GetFrameBounds::CVRMsg_TrackedCamera_GetFrameBounds() [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBounds::CVRMsg_TrackedCamera_GetFrameBounds(CVRMsg_TrackedCamera_GetFrameBounds const&)
 t CVRMsg_TrackedCamera_GetFrameBounds::CVRMsg_TrackedCamera_GetFrameBounds(CVRMsg_TrackedCamera_GetFrameBounds const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBounds::Clear()
 t CVRMsg_TrackedCamera_GetFrameBounds::CopyFrom(CVRMsg_TrackedCamera_GetFrameBounds const&)
 t CVRMsg_TrackedCamera_GetFrameBounds::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetFrameBounds::GetMetadata() const
 t CVRMsg_TrackedCamera_GetFrameBounds::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBounds::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetFrameBounds::IsInitialized() const
 t CVRMsg_TrackedCamera_GetFrameBounds::MergeFrom(CVRMsg_TrackedCamera_GetFrameBounds const&)
 t CVRMsg_TrackedCamera_GetFrameBounds::MergeFrom(CVRMsg_TrackedCamera_GetFrameBounds const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBounds::New() const
 t CVRMsg_TrackedCamera_GetFrameBounds::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBounds::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetFrameBounds::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetFrameBounds::SharedCtor()
 t CVRMsg_TrackedCamera_GetFrameBounds::SharedDtor()
 t CVRMsg_TrackedCamera_GetFrameBounds::Swap(CVRMsg_TrackedCamera_GetFrameBounds*)
 t CVRMsg_TrackedCamera_GetFrameBounds::default_instance()
 t CVRMsg_TrackedCamera_GetFrameBounds::descriptor()
 t CVRMsg_TrackedCamera_GetFrameBounds::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBounds::~CVRMsg_TrackedCamera_GetFrameBounds()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::ByteSize() const
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::CVRMsg_TrackedCamera_GetFrameBoundsResponse()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::CVRMsg_TrackedCamera_GetFrameBoundsResponse() [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::CVRMsg_TrackedCamera_GetFrameBoundsResponse(CVRMsg_TrackedCamera_GetFrameBoundsResponse const&)
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::CVRMsg_TrackedCamera_GetFrameBoundsResponse(CVRMsg_TrackedCamera_GetFrameBoundsResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::Clear()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::CopyFrom(CVRMsg_TrackedCamera_GetFrameBoundsResponse const&)
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::MergeFrom(CVRMsg_TrackedCamera_GetFrameBoundsResponse const&)
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::MergeFrom(CVRMsg_TrackedCamera_GetFrameBoundsResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::New() const
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::SharedCtor()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::SharedDtor()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::Swap(CVRMsg_TrackedCamera_GetFrameBoundsResponse*)
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::default_instance()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::descriptor()
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetFrameBoundsResponse::~CVRMsg_TrackedCamera_GetFrameBoundsResponse()
 t CVRMsg_TrackedCamera_GetIntrinsics::ByteSize() const
 t CVRMsg_TrackedCamera_GetIntrinsics::CVRMsg_TrackedCamera_GetIntrinsics()
 t CVRMsg_TrackedCamera_GetIntrinsics::CVRMsg_TrackedCamera_GetIntrinsics() [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsics::CVRMsg_TrackedCamera_GetIntrinsics(CVRMsg_TrackedCamera_GetIntrinsics const&)
 t CVRMsg_TrackedCamera_GetIntrinsics::CVRMsg_TrackedCamera_GetIntrinsics(CVRMsg_TrackedCamera_GetIntrinsics const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsics::Clear()
 t CVRMsg_TrackedCamera_GetIntrinsics::CopyFrom(CVRMsg_TrackedCamera_GetIntrinsics const&)
 t CVRMsg_TrackedCamera_GetIntrinsics::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetIntrinsics::GetMetadata() const
 t CVRMsg_TrackedCamera_GetIntrinsics::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsics::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetIntrinsics::IsInitialized() const
 t CVRMsg_TrackedCamera_GetIntrinsics::MergeFrom(CVRMsg_TrackedCamera_GetIntrinsics const&)
 t CVRMsg_TrackedCamera_GetIntrinsics::MergeFrom(CVRMsg_TrackedCamera_GetIntrinsics const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsics::New() const
 t CVRMsg_TrackedCamera_GetIntrinsics::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsics::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetIntrinsics::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetIntrinsics::SharedCtor()
 t CVRMsg_TrackedCamera_GetIntrinsics::SharedDtor()
 t CVRMsg_TrackedCamera_GetIntrinsics::Swap(CVRMsg_TrackedCamera_GetIntrinsics*)
 t CVRMsg_TrackedCamera_GetIntrinsics::default_instance()
 t CVRMsg_TrackedCamera_GetIntrinsics::descriptor()
 t CVRMsg_TrackedCamera_GetIntrinsics::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsics::~CVRMsg_TrackedCamera_GetIntrinsics()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::ByteSize() const
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::CVRMsg_TrackedCamera_GetIntrinsicsResponse()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::CVRMsg_TrackedCamera_GetIntrinsicsResponse() [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::CVRMsg_TrackedCamera_GetIntrinsicsResponse(CVRMsg_TrackedCamera_GetIntrinsicsResponse const&)
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::CVRMsg_TrackedCamera_GetIntrinsicsResponse(CVRMsg_TrackedCamera_GetIntrinsicsResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::Clear()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::CopyFrom(CVRMsg_TrackedCamera_GetIntrinsicsResponse const&)
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::MergeFrom(CVRMsg_TrackedCamera_GetIntrinsicsResponse const&)
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::MergeFrom(CVRMsg_TrackedCamera_GetIntrinsicsResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::New() const
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::SharedCtor()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::SharedDtor()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::Swap(CVRMsg_TrackedCamera_GetIntrinsicsResponse*)
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::default_instance()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::descriptor()
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetIntrinsicsResponse::~CVRMsg_TrackedCamera_GetIntrinsicsResponse()
 t CVRMsg_TrackedCamera_GetProjection::ByteSize() const
 t CVRMsg_TrackedCamera_GetProjection::CVRMsg_TrackedCamera_GetProjection()
 t CVRMsg_TrackedCamera_GetProjection::CVRMsg_TrackedCamera_GetProjection() [clone .cold]
 t CVRMsg_TrackedCamera_GetProjection::CVRMsg_TrackedCamera_GetProjection(CVRMsg_TrackedCamera_GetProjection const&)
 t CVRMsg_TrackedCamera_GetProjection::CVRMsg_TrackedCamera_GetProjection(CVRMsg_TrackedCamera_GetProjection const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetProjection::Clear()
 t CVRMsg_TrackedCamera_GetProjection::CopyFrom(CVRMsg_TrackedCamera_GetProjection const&)
 t CVRMsg_TrackedCamera_GetProjection::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetProjection::GetMetadata() const
 t CVRMsg_TrackedCamera_GetProjection::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetProjection::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetProjection::IsInitialized() const
 t CVRMsg_TrackedCamera_GetProjection::MergeFrom(CVRMsg_TrackedCamera_GetProjection const&)
 t CVRMsg_TrackedCamera_GetProjection::MergeFrom(CVRMsg_TrackedCamera_GetProjection const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetProjection::New() const
 t CVRMsg_TrackedCamera_GetProjection::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetProjection::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetProjection::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetProjection::SharedCtor()
 t CVRMsg_TrackedCamera_GetProjection::SharedDtor()
 t CVRMsg_TrackedCamera_GetProjection::Swap(CVRMsg_TrackedCamera_GetProjection*)
 t CVRMsg_TrackedCamera_GetProjection::default_instance()
 t CVRMsg_TrackedCamera_GetProjection::descriptor()
 t CVRMsg_TrackedCamera_GetProjection::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetProjection::~CVRMsg_TrackedCamera_GetProjection()
 t CVRMsg_TrackedCamera_GetProjectionResponse::ByteSize() const
 t CVRMsg_TrackedCamera_GetProjectionResponse::CVRMsg_TrackedCamera_GetProjectionResponse()
 t CVRMsg_TrackedCamera_GetProjectionResponse::CVRMsg_TrackedCamera_GetProjectionResponse() [clone .cold]
 t CVRMsg_TrackedCamera_GetProjectionResponse::CVRMsg_TrackedCamera_GetProjectionResponse(CVRMsg_TrackedCamera_GetProjectionResponse const&)
 t CVRMsg_TrackedCamera_GetProjectionResponse::CVRMsg_TrackedCamera_GetProjectionResponse(CVRMsg_TrackedCamera_GetProjectionResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetProjectionResponse::Clear()
 t CVRMsg_TrackedCamera_GetProjectionResponse::CopyFrom(CVRMsg_TrackedCamera_GetProjectionResponse const&)
 t CVRMsg_TrackedCamera_GetProjectionResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetProjectionResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_GetProjectionResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetProjectionResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetProjectionResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_GetProjectionResponse::MergeFrom(CVRMsg_TrackedCamera_GetProjectionResponse const&)
 t CVRMsg_TrackedCamera_GetProjectionResponse::MergeFrom(CVRMsg_TrackedCamera_GetProjectionResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetProjectionResponse::New() const
 t CVRMsg_TrackedCamera_GetProjectionResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetProjectionResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetProjectionResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetProjectionResponse::SharedCtor()
 t CVRMsg_TrackedCamera_GetProjectionResponse::SharedDtor()
 t CVRMsg_TrackedCamera_GetProjectionResponse::Swap(CVRMsg_TrackedCamera_GetProjectionResponse*)
 t CVRMsg_TrackedCamera_GetProjectionResponse::default_instance()
 t CVRMsg_TrackedCamera_GetProjectionResponse::descriptor()
 t CVRMsg_TrackedCamera_GetProjectionResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetProjectionResponse::~CVRMsg_TrackedCamera_GetProjectionResponse()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::ByteSize() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::CVRMsg_TrackedCamera_GetVideoStreamFormat()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::CVRMsg_TrackedCamera_GetVideoStreamFormat() [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::CVRMsg_TrackedCamera_GetVideoStreamFormat(CVRMsg_TrackedCamera_GetVideoStreamFormat const&)
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::CVRMsg_TrackedCamera_GetVideoStreamFormat(CVRMsg_TrackedCamera_GetVideoStreamFormat const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::Clear()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::CopyFrom(CVRMsg_TrackedCamera_GetVideoStreamFormat const&)
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::GetMetadata() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::IsInitialized() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::MergeFrom(CVRMsg_TrackedCamera_GetVideoStreamFormat const&)
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::MergeFrom(CVRMsg_TrackedCamera_GetVideoStreamFormat const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::New() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::SharedCtor()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::SharedDtor()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::Swap(CVRMsg_TrackedCamera_GetVideoStreamFormat*)
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::default_instance()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::descriptor()
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormat::~CVRMsg_TrackedCamera_GetVideoStreamFormat()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::ByteSize() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::CVRMsg_TrackedCamera_GetVideoStreamFormatResponse()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::CVRMsg_TrackedCamera_GetVideoStreamFormatResponse() [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::CVRMsg_TrackedCamera_GetVideoStreamFormatResponse(CVRMsg_TrackedCamera_GetVideoStreamFormatResponse const&)
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::CVRMsg_TrackedCamera_GetVideoStreamFormatResponse(CVRMsg_TrackedCamera_GetVideoStreamFormatResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::Clear()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::CopyFrom(CVRMsg_TrackedCamera_GetVideoStreamFormatResponse const&)
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::MergeFrom(CVRMsg_TrackedCamera_GetVideoStreamFormatResponse const&)
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::MergeFrom(CVRMsg_TrackedCamera_GetVideoStreamFormatResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::New() const
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::SharedCtor()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::SharedDtor()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::Swap(CVRMsg_TrackedCamera_GetVideoStreamFormatResponse*)
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::default_instance()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::descriptor()
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_GetVideoStreamFormatResponse::~CVRMsg_TrackedCamera_GetVideoStreamFormatResponse()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::ByteSize() const
 t CVRMsg_TrackedCamera_IsVideoStreamActive::CVRMsg_TrackedCamera_IsVideoStreamActive()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::CVRMsg_TrackedCamera_IsVideoStreamActive() [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActive::CVRMsg_TrackedCamera_IsVideoStreamActive(CVRMsg_TrackedCamera_IsVideoStreamActive const&)
 t CVRMsg_TrackedCamera_IsVideoStreamActive::CVRMsg_TrackedCamera_IsVideoStreamActive(CVRMsg_TrackedCamera_IsVideoStreamActive const&) [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActive::Clear()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::CopyFrom(CVRMsg_TrackedCamera_IsVideoStreamActive const&)
 t CVRMsg_TrackedCamera_IsVideoStreamActive::GetCachedSize() const
 t CVRMsg_TrackedCamera_IsVideoStreamActive::GetMetadata() const
 t CVRMsg_TrackedCamera_IsVideoStreamActive::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActive::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::IsInitialized() const
 t CVRMsg_TrackedCamera_IsVideoStreamActive::MergeFrom(CVRMsg_TrackedCamera_IsVideoStreamActive const&)
 t CVRMsg_TrackedCamera_IsVideoStreamActive::MergeFrom(CVRMsg_TrackedCamera_IsVideoStreamActive const&) [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActive::New() const
 t CVRMsg_TrackedCamera_IsVideoStreamActive::New() const [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActive::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_IsVideoStreamActive::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_IsVideoStreamActive::SharedCtor()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::SharedDtor()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::Swap(CVRMsg_TrackedCamera_IsVideoStreamActive*)
 t CVRMsg_TrackedCamera_IsVideoStreamActive::default_instance()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::descriptor()
 t CVRMsg_TrackedCamera_IsVideoStreamActive::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActive::~CVRMsg_TrackedCamera_IsVideoStreamActive()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::ByteSize() const
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::CVRMsg_TrackedCamera_IsVideoStreamActiveResponse()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::CVRMsg_TrackedCamera_IsVideoStreamActiveResponse() [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::CVRMsg_TrackedCamera_IsVideoStreamActiveResponse(CVRMsg_TrackedCamera_IsVideoStreamActiveResponse const&)
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::CVRMsg_TrackedCamera_IsVideoStreamActiveResponse(CVRMsg_TrackedCamera_IsVideoStreamActiveResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::Clear()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::CopyFrom(CVRMsg_TrackedCamera_IsVideoStreamActiveResponse const&)
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::MergeFrom(CVRMsg_TrackedCamera_IsVideoStreamActiveResponse const&)
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::MergeFrom(CVRMsg_TrackedCamera_IsVideoStreamActiveResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::New() const
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::SharedCtor()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::SharedDtor()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::Swap(CVRMsg_TrackedCamera_IsVideoStreamActiveResponse*)
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::default_instance()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::descriptor()
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_IsVideoStreamActiveResponse::~CVRMsg_TrackedCamera_IsVideoStreamActiveResponse()
 t CVRMsg_TrackedCamera_PauseVideoStream::ByteSize() const
 t CVRMsg_TrackedCamera_PauseVideoStream::CVRMsg_TrackedCamera_PauseVideoStream()
 t CVRMsg_TrackedCamera_PauseVideoStream::CVRMsg_TrackedCamera_PauseVideoStream() [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStream::CVRMsg_TrackedCamera_PauseVideoStream(CVRMsg_TrackedCamera_PauseVideoStream const&)
 t CVRMsg_TrackedCamera_PauseVideoStream::CVRMsg_TrackedCamera_PauseVideoStream(CVRMsg_TrackedCamera_PauseVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStream::Clear()
 t CVRMsg_TrackedCamera_PauseVideoStream::CopyFrom(CVRMsg_TrackedCamera_PauseVideoStream const&)
 t CVRMsg_TrackedCamera_PauseVideoStream::GetCachedSize() const
 t CVRMsg_TrackedCamera_PauseVideoStream::GetMetadata() const
 t CVRMsg_TrackedCamera_PauseVideoStream::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStream::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_PauseVideoStream::IsInitialized() const
 t CVRMsg_TrackedCamera_PauseVideoStream::MergeFrom(CVRMsg_TrackedCamera_PauseVideoStream const&)
 t CVRMsg_TrackedCamera_PauseVideoStream::MergeFrom(CVRMsg_TrackedCamera_PauseVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStream::New() const
 t CVRMsg_TrackedCamera_PauseVideoStream::New() const [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStream::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_PauseVideoStream::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_PauseVideoStream::SharedCtor()
 t CVRMsg_TrackedCamera_PauseVideoStream::SharedDtor()
 t CVRMsg_TrackedCamera_PauseVideoStream::Swap(CVRMsg_TrackedCamera_PauseVideoStream*)
 t CVRMsg_TrackedCamera_PauseVideoStream::default_instance()
 t CVRMsg_TrackedCamera_PauseVideoStream::descriptor()
 t CVRMsg_TrackedCamera_PauseVideoStream::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStream::~CVRMsg_TrackedCamera_PauseVideoStream()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::ByteSize() const
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::CVRMsg_TrackedCamera_PauseVideoStreamResponse()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::CVRMsg_TrackedCamera_PauseVideoStreamResponse() [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::CVRMsg_TrackedCamera_PauseVideoStreamResponse(CVRMsg_TrackedCamera_PauseVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::CVRMsg_TrackedCamera_PauseVideoStreamResponse(CVRMsg_TrackedCamera_PauseVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::Clear()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::CopyFrom(CVRMsg_TrackedCamera_PauseVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_PauseVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_PauseVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::New() const
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::SharedCtor()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::SharedDtor()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::Swap(CVRMsg_TrackedCamera_PauseVideoStreamResponse*)
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::default_instance()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::descriptor()
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_PauseVideoStreamResponse::~CVRMsg_TrackedCamera_PauseVideoStreamResponse()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::ByteSize() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::CVRMsg_TrackedCamera_ReleaseVideoStreamingService()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::CVRMsg_TrackedCamera_ReleaseVideoStreamingService() [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::CVRMsg_TrackedCamera_ReleaseVideoStreamingService(CVRMsg_TrackedCamera_ReleaseVideoStreamingService const&)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::CVRMsg_TrackedCamera_ReleaseVideoStreamingService(CVRMsg_TrackedCamera_ReleaseVideoStreamingService const&) [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::Clear()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::CopyFrom(CVRMsg_TrackedCamera_ReleaseVideoStreamingService const&)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::GetCachedSize() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::GetMetadata() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::IsInitialized() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::MergeFrom(CVRMsg_TrackedCamera_ReleaseVideoStreamingService const&)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::MergeFrom(CVRMsg_TrackedCamera_ReleaseVideoStreamingService const&) [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::New() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::New() const [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::SharedCtor()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::SharedDtor()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::Swap(CVRMsg_TrackedCamera_ReleaseVideoStreamingService*)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::default_instance()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::descriptor()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingService::~CVRMsg_TrackedCamera_ReleaseVideoStreamingService()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::ByteSize() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse() [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse(CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse const&)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse(CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::Clear()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::CopyFrom(CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse const&)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::MergeFrom(CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse const&)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::MergeFrom(CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::New() const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::SharedCtor()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::SharedDtor()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::Swap(CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse*)
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::default_instance()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::descriptor()
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse::~CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse()
 t CVRMsg_TrackedCamera_ResumeVideoStream::ByteSize() const
 t CVRMsg_TrackedCamera_ResumeVideoStream::CVRMsg_TrackedCamera_ResumeVideoStream()
 t CVRMsg_TrackedCamera_ResumeVideoStream::CVRMsg_TrackedCamera_ResumeVideoStream() [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStream::CVRMsg_TrackedCamera_ResumeVideoStream(CVRMsg_TrackedCamera_ResumeVideoStream const&)
 t CVRMsg_TrackedCamera_ResumeVideoStream::CVRMsg_TrackedCamera_ResumeVideoStream(CVRMsg_TrackedCamera_ResumeVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStream::Clear()
 t CVRMsg_TrackedCamera_ResumeVideoStream::CopyFrom(CVRMsg_TrackedCamera_ResumeVideoStream const&)
 t CVRMsg_TrackedCamera_ResumeVideoStream::GetCachedSize() const
 t CVRMsg_TrackedCamera_ResumeVideoStream::GetMetadata() const
 t CVRMsg_TrackedCamera_ResumeVideoStream::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStream::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_ResumeVideoStream::IsInitialized() const
 t CVRMsg_TrackedCamera_ResumeVideoStream::MergeFrom(CVRMsg_TrackedCamera_ResumeVideoStream const&)
 t CVRMsg_TrackedCamera_ResumeVideoStream::MergeFrom(CVRMsg_TrackedCamera_ResumeVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStream::New() const
 t CVRMsg_TrackedCamera_ResumeVideoStream::New() const [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStream::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_ResumeVideoStream::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_ResumeVideoStream::SharedCtor()
 t CVRMsg_TrackedCamera_ResumeVideoStream::SharedDtor()
 t CVRMsg_TrackedCamera_ResumeVideoStream::Swap(CVRMsg_TrackedCamera_ResumeVideoStream*)
 t CVRMsg_TrackedCamera_ResumeVideoStream::default_instance()
 t CVRMsg_TrackedCamera_ResumeVideoStream::descriptor()
 t CVRMsg_TrackedCamera_ResumeVideoStream::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStream::~CVRMsg_TrackedCamera_ResumeVideoStream()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::ByteSize() const
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::CVRMsg_TrackedCamera_ResumeVideoStreamResponse()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::CVRMsg_TrackedCamera_ResumeVideoStreamResponse() [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::CVRMsg_TrackedCamera_ResumeVideoStreamResponse(CVRMsg_TrackedCamera_ResumeVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::CVRMsg_TrackedCamera_ResumeVideoStreamResponse(CVRMsg_TrackedCamera_ResumeVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::Clear()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::CopyFrom(CVRMsg_TrackedCamera_ResumeVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_ResumeVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_ResumeVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::New() const
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::SharedCtor()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::SharedDtor()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::Swap(CVRMsg_TrackedCamera_ResumeVideoStreamResponse*)
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::default_instance()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::descriptor()
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_ResumeVideoStreamResponse::~CVRMsg_TrackedCamera_ResumeVideoStreamResponse()
 t CVRMsg_TrackedCamera_SetAutoExposure::ByteSize() const
 t CVRMsg_TrackedCamera_SetAutoExposure::CVRMsg_TrackedCamera_SetAutoExposure()
 t CVRMsg_TrackedCamera_SetAutoExposure::CVRMsg_TrackedCamera_SetAutoExposure() [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposure::CVRMsg_TrackedCamera_SetAutoExposure(CVRMsg_TrackedCamera_SetAutoExposure const&)
 t CVRMsg_TrackedCamera_SetAutoExposure::CVRMsg_TrackedCamera_SetAutoExposure(CVRMsg_TrackedCamera_SetAutoExposure const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposure::Clear()
 t CVRMsg_TrackedCamera_SetAutoExposure::CopyFrom(CVRMsg_TrackedCamera_SetAutoExposure const&)
 t CVRMsg_TrackedCamera_SetAutoExposure::GetCachedSize() const
 t CVRMsg_TrackedCamera_SetAutoExposure::GetMetadata() const
 t CVRMsg_TrackedCamera_SetAutoExposure::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposure::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_SetAutoExposure::IsInitialized() const
 t CVRMsg_TrackedCamera_SetAutoExposure::MergeFrom(CVRMsg_TrackedCamera_SetAutoExposure const&)
 t CVRMsg_TrackedCamera_SetAutoExposure::MergeFrom(CVRMsg_TrackedCamera_SetAutoExposure const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposure::New() const
 t CVRMsg_TrackedCamera_SetAutoExposure::New() const [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposure::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_SetAutoExposure::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_SetAutoExposure::SharedCtor()
 t CVRMsg_TrackedCamera_SetAutoExposure::SharedDtor()
 t CVRMsg_TrackedCamera_SetAutoExposure::Swap(CVRMsg_TrackedCamera_SetAutoExposure*)
 t CVRMsg_TrackedCamera_SetAutoExposure::default_instance()
 t CVRMsg_TrackedCamera_SetAutoExposure::descriptor()
 t CVRMsg_TrackedCamera_SetAutoExposure::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposure::~CVRMsg_TrackedCamera_SetAutoExposure()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::ByteSize() const
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::CVRMsg_TrackedCamera_SetAutoExposureResponse()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::CVRMsg_TrackedCamera_SetAutoExposureResponse() [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::CVRMsg_TrackedCamera_SetAutoExposureResponse(CVRMsg_TrackedCamera_SetAutoExposureResponse const&)
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::CVRMsg_TrackedCamera_SetAutoExposureResponse(CVRMsg_TrackedCamera_SetAutoExposureResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::Clear()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::CopyFrom(CVRMsg_TrackedCamera_SetAutoExposureResponse const&)
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::MergeFrom(CVRMsg_TrackedCamera_SetAutoExposureResponse const&)
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::MergeFrom(CVRMsg_TrackedCamera_SetAutoExposureResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::New() const
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::SharedCtor()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::SharedDtor()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::Swap(CVRMsg_TrackedCamera_SetAutoExposureResponse*)
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::default_instance()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::descriptor()
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_SetAutoExposureResponse::~CVRMsg_TrackedCamera_SetAutoExposureResponse()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::ByteSize() const
 t CVRMsg_TrackedCamera_SetCompatibilityMode::CVRMsg_TrackedCamera_SetCompatibilityMode()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::CVRMsg_TrackedCamera_SetCompatibilityMode() [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityMode::CVRMsg_TrackedCamera_SetCompatibilityMode(CVRMsg_TrackedCamera_SetCompatibilityMode const&)
 t CVRMsg_TrackedCamera_SetCompatibilityMode::CVRMsg_TrackedCamera_SetCompatibilityMode(CVRMsg_TrackedCamera_SetCompatibilityMode const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityMode::Clear()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::CopyFrom(CVRMsg_TrackedCamera_SetCompatibilityMode const&)
 t CVRMsg_TrackedCamera_SetCompatibilityMode::GetCachedSize() const
 t CVRMsg_TrackedCamera_SetCompatibilityMode::GetMetadata() const
 t CVRMsg_TrackedCamera_SetCompatibilityMode::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityMode::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::IsInitialized() const
 t CVRMsg_TrackedCamera_SetCompatibilityMode::MergeFrom(CVRMsg_TrackedCamera_SetCompatibilityMode const&)
 t CVRMsg_TrackedCamera_SetCompatibilityMode::MergeFrom(CVRMsg_TrackedCamera_SetCompatibilityMode const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityMode::New() const
 t CVRMsg_TrackedCamera_SetCompatibilityMode::New() const [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityMode::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_SetCompatibilityMode::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_SetCompatibilityMode::SharedCtor()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::SharedDtor()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::Swap(CVRMsg_TrackedCamera_SetCompatibilityMode*)
 t CVRMsg_TrackedCamera_SetCompatibilityMode::default_instance()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::descriptor()
 t CVRMsg_TrackedCamera_SetCompatibilityMode::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityMode::~CVRMsg_TrackedCamera_SetCompatibilityMode()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::ByteSize() const
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::CVRMsg_TrackedCamera_SetCompatibilityModeResponse()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::CVRMsg_TrackedCamera_SetCompatibilityModeResponse() [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::CVRMsg_TrackedCamera_SetCompatibilityModeResponse(CVRMsg_TrackedCamera_SetCompatibilityModeResponse const&)
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::CVRMsg_TrackedCamera_SetCompatibilityModeResponse(CVRMsg_TrackedCamera_SetCompatibilityModeResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::Clear()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::CopyFrom(CVRMsg_TrackedCamera_SetCompatibilityModeResponse const&)
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::MergeFrom(CVRMsg_TrackedCamera_SetCompatibilityModeResponse const&)
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::MergeFrom(CVRMsg_TrackedCamera_SetCompatibilityModeResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::New() const
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::SharedCtor()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::SharedDtor()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::Swap(CVRMsg_TrackedCamera_SetCompatibilityModeResponse*)
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::default_instance()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::descriptor()
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_SetCompatibilityModeResponse::~CVRMsg_TrackedCamera_SetCompatibilityModeResponse()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::ByteSize() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::CVRMsg_TrackedCamera_SetVideoStreamFormat()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::CVRMsg_TrackedCamera_SetVideoStreamFormat() [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::CVRMsg_TrackedCamera_SetVideoStreamFormat(CVRMsg_TrackedCamera_SetVideoStreamFormat const&)
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::CVRMsg_TrackedCamera_SetVideoStreamFormat(CVRMsg_TrackedCamera_SetVideoStreamFormat const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::Clear()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::CopyFrom(CVRMsg_TrackedCamera_SetVideoStreamFormat const&)
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::GetCachedSize() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::GetMetadata() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::IsInitialized() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::MergeFrom(CVRMsg_TrackedCamera_SetVideoStreamFormat const&)
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::MergeFrom(CVRMsg_TrackedCamera_SetVideoStreamFormat const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::New() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::New() const [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::SharedCtor()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::SharedDtor()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::Swap(CVRMsg_TrackedCamera_SetVideoStreamFormat*)
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::default_instance()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::descriptor()
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormat::~CVRMsg_TrackedCamera_SetVideoStreamFormat()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::ByteSize() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::CVRMsg_TrackedCamera_SetVideoStreamFormatResponse()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::CVRMsg_TrackedCamera_SetVideoStreamFormatResponse() [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::CVRMsg_TrackedCamera_SetVideoStreamFormatResponse(CVRMsg_TrackedCamera_SetVideoStreamFormatResponse const&)
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::CVRMsg_TrackedCamera_SetVideoStreamFormatResponse(CVRMsg_TrackedCamera_SetVideoStreamFormatResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::Clear()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::CopyFrom(CVRMsg_TrackedCamera_SetVideoStreamFormatResponse const&)
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::MergeFrom(CVRMsg_TrackedCamera_SetVideoStreamFormatResponse const&)
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::MergeFrom(CVRMsg_TrackedCamera_SetVideoStreamFormatResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::New() const
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::SharedCtor()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::SharedDtor()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::Swap(CVRMsg_TrackedCamera_SetVideoStreamFormatResponse*)
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::default_instance()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::descriptor()
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_SetVideoStreamFormatResponse::~CVRMsg_TrackedCamera_SetVideoStreamFormatResponse()
 t CVRMsg_TrackedCamera_StartVideoStream::ByteSize() const
 t CVRMsg_TrackedCamera_StartVideoStream::CVRMsg_TrackedCamera_StartVideoStream()
 t CVRMsg_TrackedCamera_StartVideoStream::CVRMsg_TrackedCamera_StartVideoStream() [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStream::CVRMsg_TrackedCamera_StartVideoStream(CVRMsg_TrackedCamera_StartVideoStream const&)
 t CVRMsg_TrackedCamera_StartVideoStream::CVRMsg_TrackedCamera_StartVideoStream(CVRMsg_TrackedCamera_StartVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStream::Clear()
 t CVRMsg_TrackedCamera_StartVideoStream::CopyFrom(CVRMsg_TrackedCamera_StartVideoStream const&)
 t CVRMsg_TrackedCamera_StartVideoStream::GetCachedSize() const
 t CVRMsg_TrackedCamera_StartVideoStream::GetMetadata() const
 t CVRMsg_TrackedCamera_StartVideoStream::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStream::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_StartVideoStream::IsInitialized() const
 t CVRMsg_TrackedCamera_StartVideoStream::MergeFrom(CVRMsg_TrackedCamera_StartVideoStream const&)
 t CVRMsg_TrackedCamera_StartVideoStream::MergeFrom(CVRMsg_TrackedCamera_StartVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStream::New() const
 t CVRMsg_TrackedCamera_StartVideoStream::New() const [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStream::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_StartVideoStream::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_StartVideoStream::SharedCtor()
 t CVRMsg_TrackedCamera_StartVideoStream::SharedDtor()
 t CVRMsg_TrackedCamera_StartVideoStream::Swap(CVRMsg_TrackedCamera_StartVideoStream*)
 t CVRMsg_TrackedCamera_StartVideoStream::default_instance()
 t CVRMsg_TrackedCamera_StartVideoStream::descriptor()
 t CVRMsg_TrackedCamera_StartVideoStream::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStream::~CVRMsg_TrackedCamera_StartVideoStream()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::ByteSize() const
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::CVRMsg_TrackedCamera_StartVideoStreamResponse()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::CVRMsg_TrackedCamera_StartVideoStreamResponse() [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::CVRMsg_TrackedCamera_StartVideoStreamResponse(CVRMsg_TrackedCamera_StartVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::CVRMsg_TrackedCamera_StartVideoStreamResponse(CVRMsg_TrackedCamera_StartVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::Clear()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::CopyFrom(CVRMsg_TrackedCamera_StartVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_StartVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_StartVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::New() const
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::SharedCtor()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::SharedDtor()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::Swap(CVRMsg_TrackedCamera_StartVideoStreamResponse*)
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::default_instance()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::descriptor()
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_StartVideoStreamResponse::~CVRMsg_TrackedCamera_StartVideoStreamResponse()
 t CVRMsg_TrackedCamera_StopVideoStream::ByteSize() const
 t CVRMsg_TrackedCamera_StopVideoStream::CVRMsg_TrackedCamera_StopVideoStream()
 t CVRMsg_TrackedCamera_StopVideoStream::CVRMsg_TrackedCamera_StopVideoStream() [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStream::CVRMsg_TrackedCamera_StopVideoStream(CVRMsg_TrackedCamera_StopVideoStream const&)
 t CVRMsg_TrackedCamera_StopVideoStream::CVRMsg_TrackedCamera_StopVideoStream(CVRMsg_TrackedCamera_StopVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStream::Clear()
 t CVRMsg_TrackedCamera_StopVideoStream::CopyFrom(CVRMsg_TrackedCamera_StopVideoStream const&)
 t CVRMsg_TrackedCamera_StopVideoStream::GetCachedSize() const
 t CVRMsg_TrackedCamera_StopVideoStream::GetMetadata() const
 t CVRMsg_TrackedCamera_StopVideoStream::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStream::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_StopVideoStream::IsInitialized() const
 t CVRMsg_TrackedCamera_StopVideoStream::MergeFrom(CVRMsg_TrackedCamera_StopVideoStream const&)
 t CVRMsg_TrackedCamera_StopVideoStream::MergeFrom(CVRMsg_TrackedCamera_StopVideoStream const&) [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStream::New() const
 t CVRMsg_TrackedCamera_StopVideoStream::New() const [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStream::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_StopVideoStream::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_StopVideoStream::SharedCtor()
 t CVRMsg_TrackedCamera_StopVideoStream::SharedDtor()
 t CVRMsg_TrackedCamera_StopVideoStream::Swap(CVRMsg_TrackedCamera_StopVideoStream*)
 t CVRMsg_TrackedCamera_StopVideoStream::default_instance()
 t CVRMsg_TrackedCamera_StopVideoStream::descriptor()
 t CVRMsg_TrackedCamera_StopVideoStream::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStream::~CVRMsg_TrackedCamera_StopVideoStream()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::ByteSize() const
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::CVRMsg_TrackedCamera_StopVideoStreamResponse()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::CVRMsg_TrackedCamera_StopVideoStreamResponse() [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::CVRMsg_TrackedCamera_StopVideoStreamResponse(CVRMsg_TrackedCamera_StopVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::CVRMsg_TrackedCamera_StopVideoStreamResponse(CVRMsg_TrackedCamera_StopVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::Clear()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::CopyFrom(CVRMsg_TrackedCamera_StopVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::GetCachedSize() const
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::GetMetadata() const
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::GetMetadata() const [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::InitAsDefaultInstance()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::IsInitialized() const
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_StopVideoStreamResponse const&)
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::MergeFrom(CVRMsg_TrackedCamera_StopVideoStreamResponse const&) [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::New() const
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::New() const [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::SetCachedSize(int) const
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::SharedCtor()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::SharedDtor()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::Swap(CVRMsg_TrackedCamera_StopVideoStreamResponse*)
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::default_instance()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::descriptor()
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::descriptor() [clone .cold]
 t CVRMsg_TrackedCamera_StopVideoStreamResponse::~CVRMsg_TrackedCamera_StopVideoStreamResponse()
 t CVRMsg_TriggerHapticPulse::ByteSize() const
 t CVRMsg_TriggerHapticPulse::CVRMsg_TriggerHapticPulse()
 t CVRMsg_TriggerHapticPulse::CVRMsg_TriggerHapticPulse() [clone .cold]
 t CVRMsg_TriggerHapticPulse::CVRMsg_TriggerHapticPulse(CVRMsg_TriggerHapticPulse const&)
 t CVRMsg_TriggerHapticPulse::CVRMsg_TriggerHapticPulse(CVRMsg_TriggerHapticPulse const&) [clone .cold]
 t CVRMsg_TriggerHapticPulse::Clear()
 t CVRMsg_TriggerHapticPulse::CopyFrom(CVRMsg_TriggerHapticPulse const&)
 t CVRMsg_TriggerHapticPulse::GetCachedSize() const
 t CVRMsg_TriggerHapticPulse::GetMetadata() const
 t CVRMsg_TriggerHapticPulse::GetMetadata() const [clone .cold]
 t CVRMsg_TriggerHapticPulse::InitAsDefaultInstance()
 t CVRMsg_TriggerHapticPulse::IsInitialized() const
 t CVRMsg_TriggerHapticPulse::MergeFrom(CVRMsg_TriggerHapticPulse const&)
 t CVRMsg_TriggerHapticPulse::MergeFrom(CVRMsg_TriggerHapticPulse const&) [clone .cold]
 t CVRMsg_TriggerHapticPulse::New() const
 t CVRMsg_TriggerHapticPulse::New() const [clone .cold]
 t CVRMsg_TriggerHapticPulse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_TriggerHapticPulse::SetCachedSize(int) const
 t CVRMsg_TriggerHapticPulse::SharedCtor()
 t CVRMsg_TriggerHapticPulse::SharedDtor()
 t CVRMsg_TriggerHapticPulse::Swap(CVRMsg_TriggerHapticPulse*)
 t CVRMsg_TriggerHapticPulse::default_instance()
 t CVRMsg_TriggerHapticPulse::descriptor()
 t CVRMsg_TriggerHapticPulse::descriptor() [clone .cold]
 t CVRMsg_TriggerHapticPulse::~CVRMsg_TriggerHapticPulse()
 t CVRMsg_UpdateChaperoneUniverse::ByteSize() const
 t CVRMsg_UpdateChaperoneUniverse::CVRMsg_UpdateChaperoneUniverse()
 t CVRMsg_UpdateChaperoneUniverse::CVRMsg_UpdateChaperoneUniverse() [clone .cold]
 t CVRMsg_UpdateChaperoneUniverse::CVRMsg_UpdateChaperoneUniverse(CVRMsg_UpdateChaperoneUniverse const&)
 t CVRMsg_UpdateChaperoneUniverse::CVRMsg_UpdateChaperoneUniverse(CVRMsg_UpdateChaperoneUniverse const&) [clone .cold]
 t CVRMsg_UpdateChaperoneUniverse::Clear()
 t CVRMsg_UpdateChaperoneUniverse::CopyFrom(CVRMsg_UpdateChaperoneUniverse const&)
 t CVRMsg_UpdateChaperoneUniverse::GetCachedSize() const
 t CVRMsg_UpdateChaperoneUniverse::GetMetadata() const
 t CVRMsg_UpdateChaperoneUniverse::GetMetadata() const [clone .cold]
 t CVRMsg_UpdateChaperoneUniverse::InitAsDefaultInstance()
 t CVRMsg_UpdateChaperoneUniverse::IsInitialized() const
 t CVRMsg_UpdateChaperoneUniverse::MergeFrom(CVRMsg_UpdateChaperoneUniverse const&)
 t CVRMsg_UpdateChaperoneUniverse::MergeFrom(CVRMsg_UpdateChaperoneUniverse const&) [clone .cold]
 t CVRMsg_UpdateChaperoneUniverse::New() const
 t CVRMsg_UpdateChaperoneUniverse::New() const [clone .cold]
 t CVRMsg_UpdateChaperoneUniverse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_UpdateChaperoneUniverse::SetCachedSize(int) const
 t CVRMsg_UpdateChaperoneUniverse::SharedCtor()
 t CVRMsg_UpdateChaperoneUniverse::SharedCtor() [clone .cold]
 t CVRMsg_UpdateChaperoneUniverse::SharedDtor()
 t CVRMsg_UpdateChaperoneUniverse::Swap(CVRMsg_UpdateChaperoneUniverse*)
 t CVRMsg_UpdateChaperoneUniverse::default_instance()
 t CVRMsg_UpdateChaperoneUniverse::descriptor()
 t CVRMsg_UpdateChaperoneUniverse::descriptor() [clone .cold]
 t CVRMsg_UpdateChaperoneUniverse::mutable_universe_json()
 t CVRMsg_UpdateChaperoneUniverse::release_universe_json()
 t CVRMsg_UpdateChaperoneUniverse::set_allocated_universe_json(std::string*)
 t CVRMsg_UpdateChaperoneUniverse::set_universe_json(char const*)
 t CVRMsg_UpdateChaperoneUniverse::set_universe_json(char const*, unsigned long)
 t CVRMsg_UpdateChaperoneUniverse::set_universe_json(std::string const&)
 t CVRMsg_UpdateChaperoneUniverse::~CVRMsg_UpdateChaperoneUniverse()
 t CVRMsg_UpdateChaperoneUniverseResponse::ByteSize() const
 t CVRMsg_UpdateChaperoneUniverseResponse::CVRMsg_UpdateChaperoneUniverseResponse()
 t CVRMsg_UpdateChaperoneUniverseResponse::CVRMsg_UpdateChaperoneUniverseResponse() [clone .cold]
 t CVRMsg_UpdateChaperoneUniverseResponse::CVRMsg_UpdateChaperoneUniverseResponse(CVRMsg_UpdateChaperoneUniverseResponse const&)
 t CVRMsg_UpdateChaperoneUniverseResponse::CVRMsg_UpdateChaperoneUniverseResponse(CVRMsg_UpdateChaperoneUniverseResponse const&) [clone .cold]
 t CVRMsg_UpdateChaperoneUniverseResponse::Clear()
 t CVRMsg_UpdateChaperoneUniverseResponse::CopyFrom(CVRMsg_UpdateChaperoneUniverseResponse const&)
 t CVRMsg_UpdateChaperoneUniverseResponse::GetCachedSize() const
 t CVRMsg_UpdateChaperoneUniverseResponse::GetMetadata() const
 t CVRMsg_UpdateChaperoneUniverseResponse::GetMetadata() const [clone .cold]
 t CVRMsg_UpdateChaperoneUniverseResponse::InitAsDefaultInstance()
 t CVRMsg_UpdateChaperoneUniverseResponse::IsInitialized() const
 t CVRMsg_UpdateChaperoneUniverseResponse::MergeFrom(CVRMsg_UpdateChaperoneUniverseResponse const&)
 t CVRMsg_UpdateChaperoneUniverseResponse::MergeFrom(CVRMsg_UpdateChaperoneUniverseResponse const&) [clone .cold]
 t CVRMsg_UpdateChaperoneUniverseResponse::New() const
 t CVRMsg_UpdateChaperoneUniverseResponse::New() const [clone .cold]
 t CVRMsg_UpdateChaperoneUniverseResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_UpdateChaperoneUniverseResponse::SetCachedSize(int) const
 t CVRMsg_UpdateChaperoneUniverseResponse::SharedCtor()
 t CVRMsg_UpdateChaperoneUniverseResponse::SharedDtor()
 t CVRMsg_UpdateChaperoneUniverseResponse::Swap(CVRMsg_UpdateChaperoneUniverseResponse*)
 t CVRMsg_UpdateChaperoneUniverseResponse::default_instance()
 t CVRMsg_UpdateChaperoneUniverseResponse::descriptor()
 t CVRMsg_UpdateChaperoneUniverseResponse::descriptor() [clone .cold]
 t CVRMsg_UpdateChaperoneUniverseResponse::~CVRMsg_UpdateChaperoneUniverseResponse()
 t CVRMsg_UpdateZeroPose::ByteSize() const
 t CVRMsg_UpdateZeroPose::CVRMsg_UpdateZeroPose()
 t CVRMsg_UpdateZeroPose::CVRMsg_UpdateZeroPose() [clone .cold]
 t CVRMsg_UpdateZeroPose::CVRMsg_UpdateZeroPose(CVRMsg_UpdateZeroPose const&)
 t CVRMsg_UpdateZeroPose::CVRMsg_UpdateZeroPose(CVRMsg_UpdateZeroPose const&) [clone .cold]
 t CVRMsg_UpdateZeroPose::Clear()
 t CVRMsg_UpdateZeroPose::CopyFrom(CVRMsg_UpdateZeroPose const&)
 t CVRMsg_UpdateZeroPose::GetCachedSize() const
 t CVRMsg_UpdateZeroPose::GetMetadata() const
 t CVRMsg_UpdateZeroPose::GetMetadata() const [clone .cold]
 t CVRMsg_UpdateZeroPose::InitAsDefaultInstance()
 t CVRMsg_UpdateZeroPose::IsInitialized() const
 t CVRMsg_UpdateZeroPose::MergeFrom(CVRMsg_UpdateZeroPose const&)
 t CVRMsg_UpdateZeroPose::MergeFrom(CVRMsg_UpdateZeroPose const&) [clone .cold]
 t CVRMsg_UpdateZeroPose::New() const
 t CVRMsg_UpdateZeroPose::New() const [clone .cold]
 t CVRMsg_UpdateZeroPose::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_UpdateZeroPose::SetCachedSize(int) const
 t CVRMsg_UpdateZeroPose::SharedCtor()
 t CVRMsg_UpdateZeroPose::SharedDtor()
 t CVRMsg_UpdateZeroPose::Swap(CVRMsg_UpdateZeroPose*)
 t CVRMsg_UpdateZeroPose::default_instance()
 t CVRMsg_UpdateZeroPose::descriptor()
 t CVRMsg_UpdateZeroPose::descriptor() [clone .cold]
 t CVRMsg_UpdateZeroPose::~CVRMsg_UpdateZeroPose()
 t CVRMsg_WritePropertyDataToFile::ByteSize() const
 t CVRMsg_WritePropertyDataToFile::CVRMsg_WritePropertyDataToFile()
 t CVRMsg_WritePropertyDataToFile::CVRMsg_WritePropertyDataToFile() [clone .cold]
 t CVRMsg_WritePropertyDataToFile::CVRMsg_WritePropertyDataToFile(CVRMsg_WritePropertyDataToFile const&)
 t CVRMsg_WritePropertyDataToFile::CVRMsg_WritePropertyDataToFile(CVRMsg_WritePropertyDataToFile const&) [clone .cold]
 t CVRMsg_WritePropertyDataToFile::Clear()
 t CVRMsg_WritePropertyDataToFile::CopyFrom(CVRMsg_WritePropertyDataToFile const&)
 t CVRMsg_WritePropertyDataToFile::GetCachedSize() const
 t CVRMsg_WritePropertyDataToFile::GetMetadata() const
 t CVRMsg_WritePropertyDataToFile::GetMetadata() const [clone .cold]
 t CVRMsg_WritePropertyDataToFile::InitAsDefaultInstance()
 t CVRMsg_WritePropertyDataToFile::IsInitialized() const
 t CVRMsg_WritePropertyDataToFile::MergeFrom(CVRMsg_WritePropertyDataToFile const&)
 t CVRMsg_WritePropertyDataToFile::MergeFrom(CVRMsg_WritePropertyDataToFile const&) [clone .cold]
 t CVRMsg_WritePropertyDataToFile::New() const
 t CVRMsg_WritePropertyDataToFile::New() const [clone .cold]
 t CVRMsg_WritePropertyDataToFile::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_WritePropertyDataToFile::SetCachedSize(int) const
 t CVRMsg_WritePropertyDataToFile::SharedCtor()
 t CVRMsg_WritePropertyDataToFile::SharedCtor() [clone .cold]
 t CVRMsg_WritePropertyDataToFile::SharedDtor()
 t CVRMsg_WritePropertyDataToFile::Swap(CVRMsg_WritePropertyDataToFile*)
 t CVRMsg_WritePropertyDataToFile::default_instance()
 t CVRMsg_WritePropertyDataToFile::descriptor()
 t CVRMsg_WritePropertyDataToFile::descriptor() [clone .cold]
 t CVRMsg_WritePropertyDataToFile::mutable_path()
 t CVRMsg_WritePropertyDataToFile::release_path()
 t CVRMsg_WritePropertyDataToFile::set_allocated_path(std::string*)
 t CVRMsg_WritePropertyDataToFile::set_path(char const*)
 t CVRMsg_WritePropertyDataToFile::set_path(char const*, unsigned long)
 t CVRMsg_WritePropertyDataToFile::set_path(std::string const&)
 t CVRMsg_WritePropertyDataToFile::~CVRMsg_WritePropertyDataToFile()
 t CVRMsg_WritePropertyDataToFileResponse::ByteSize() const
 t CVRMsg_WritePropertyDataToFileResponse::CVRMsg_WritePropertyDataToFileResponse()
 t CVRMsg_WritePropertyDataToFileResponse::CVRMsg_WritePropertyDataToFileResponse() [clone .cold]
 t CVRMsg_WritePropertyDataToFileResponse::CVRMsg_WritePropertyDataToFileResponse(CVRMsg_WritePropertyDataToFileResponse const&)
 t CVRMsg_WritePropertyDataToFileResponse::CVRMsg_WritePropertyDataToFileResponse(CVRMsg_WritePropertyDataToFileResponse const&) [clone .cold]
 t CVRMsg_WritePropertyDataToFileResponse::Clear()
 t CVRMsg_WritePropertyDataToFileResponse::CopyFrom(CVRMsg_WritePropertyDataToFileResponse const&)
 t CVRMsg_WritePropertyDataToFileResponse::GetCachedSize() const
 t CVRMsg_WritePropertyDataToFileResponse::GetMetadata() const
 t CVRMsg_WritePropertyDataToFileResponse::GetMetadata() const [clone .cold]
 t CVRMsg_WritePropertyDataToFileResponse::InitAsDefaultInstance()
 t CVRMsg_WritePropertyDataToFileResponse::IsInitialized() const
 t CVRMsg_WritePropertyDataToFileResponse::MergeFrom(CVRMsg_WritePropertyDataToFileResponse const&)
 t CVRMsg_WritePropertyDataToFileResponse::MergeFrom(CVRMsg_WritePropertyDataToFileResponse const&) [clone .cold]
 t CVRMsg_WritePropertyDataToFileResponse::New() const
 t CVRMsg_WritePropertyDataToFileResponse::New() const [clone .cold]
 t CVRMsg_WritePropertyDataToFileResponse::SerializeWithCachedSizesToArray(unsigned char*) const
 t CVRMsg_WritePropertyDataToFileResponse::SetCachedSize(int) const
 t CVRMsg_WritePropertyDataToFileResponse::SharedCtor()
 t CVRMsg_WritePropertyDataToFileResponse::SharedDtor()
 t CVRMsg_WritePropertyDataToFileResponse::Swap(CVRMsg_WritePropertyDataToFileResponse*)
 t CVRMsg_WritePropertyDataToFileResponse::default_instance()
 t CVRMsg_WritePropertyDataToFileResponse::descriptor()
 t CVRMsg_WritePropertyDataToFileResponse::descriptor() [clone .cold]
 t CVRMsg_WritePropertyDataToFileResponse::~CVRMsg_WritePropertyDataToFileResponse()
 t CVRNotifications_001::CreateNotification(unsigned long, unsigned long, char const*, char const*, char const*, vr::NotificationBitmap_t const*, unsigned int*)
 t CVRNotifications_001::DismissNotification(unsigned int)
 t CVRNotifications_001::GetErrorString(vr::EVRNotificationError, char*, unsigned int)
 t CVROverlayLatest::Cleanup()
 t CVROverlayLatest::ClearOverlayCursorPositionOverride(unsigned long)
 t CVROverlayLatest::ClearOverlayCursorPositionOverride(unsigned long) [clone .cold]
 t CVROverlayLatest::ClearOverlayTexture(unsigned long)
 t CVROverlayLatest::ClearOverlayTexture(unsigned long) [clone .cold]
 t CVROverlayLatest::CloseMessageOverlay()
 t CVROverlayLatest::CloseMessageOverlay() [clone .cold]
 t CVROverlayLatest::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlayLatest::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*) [clone .cold]
 t CVROverlayLatest::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlayLatest::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*) [clone .cold]
 t CVROverlayLatest::CreateMemoryBlock(unsigned long, void const*)
 t CVROverlayLatest::CreateMemoryBlock(unsigned long, void const*) [clone .cold]
 t CVROverlayLatest::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlayLatest::CreateOverlay(char const*, char const*, unsigned long*) [clone .cold]
 t CVROverlayLatest::DestroyOverlay(unsigned long)
 t CVROverlayLatest::DestroyOverlay(unsigned long) [clone .cold]
 t CVROverlayLatest::FindOverlay(char const*, unsigned long*)
 t CVROverlayLatest::FindOverlay(char const*, unsigned long*) [clone .cold]
 t CVROverlayLatest::FreeMemoryBlock(unsigned long)
 t CVROverlayLatest::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlayLatest::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*) [clone .cold]
 t CVROverlayLatest::GetIPCEvent(unsigned long, vr::EVROverlayError*)
 t CVROverlayLatest::GetIPCEvent(unsigned long, vr::EVROverlayError*) [clone .cold]
 t CVROverlayLatest::GetKeyboardText(char*, unsigned int)
 t CVROverlayLatest::GetKeyboardText(char*, unsigned int) [clone .cold]
 t CVROverlayLatest::GetOverlayAlpha(unsigned long, float*)
 t CVROverlayLatest::GetOverlayAlpha(unsigned long, float*) [clone .cold]
 t CVROverlayLatest::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlayLatest::GetOverlayColor(unsigned long, float*, float*, float*) [clone .cold]
 t CVROverlayLatest::GetOverlayCurvature(unsigned long, float*)
 t CVROverlayLatest::GetOverlayCurvature(unsigned long, float*) [clone .cold]
 t CVROverlayLatest::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlayLatest::GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t CVROverlayLatest::GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*) [clone .cold]
 t CVROverlayLatest::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlayLatest::GetOverlayFlags(unsigned long, unsigned int*) [clone .cold]
 t CVROverlayLatest::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlayLatest::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*) [clone .cold]
 t CVROverlayLatest::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlayLatest::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*) [clone .cold]
 t CVROverlayLatest::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlayLatest::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*) [clone .cold]
 t CVROverlayLatest::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlayLatest::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*) [clone .cold]
 t CVROverlayLatest::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlayLatest::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*) [clone .cold]
 t CVROverlayLatest::GetOverlayPreCurvePitch(unsigned long, float*)
 t CVROverlayLatest::GetOverlayPreCurvePitch(unsigned long, float*) [clone .cold]
 t CVROverlayLatest::GetOverlayRenderingPid(unsigned long)
 t CVROverlayLatest::GetOverlayRenderingPid(unsigned long) [clone .cold]
 t CVROverlayLatest::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlayLatest::GetOverlaySortOrder(unsigned long, unsigned int*) [clone .cold]
 t CVROverlayLatest::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlayLatest::GetOverlayTexelAspect(unsigned long, float*) [clone .cold]
 t CVROverlayLatest::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlayLatest::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*) [clone .cold]
 t CVROverlayLatest::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlayLatest::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*) [clone .cold]
 t CVROverlayLatest::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlayLatest::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*) [clone .cold]
 t CVROverlayLatest::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlayLatest::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*) [clone .cold]
 t CVROverlayLatest::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlayLatest::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*) [clone .cold]
 t CVROverlayLatest::GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t CVROverlayLatest::GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*) [clone .cold]
 t CVROverlayLatest::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlayLatest::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*) [clone .cold]
 t CVROverlayLatest::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlayLatest::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int) [clone .cold]
 t CVROverlayLatest::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlayLatest::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*) [clone .cold]
 t CVROverlayLatest::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlayLatest::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*) [clone .cold]
 t CVROverlayLatest::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlayLatest::GetOverlayWidthInMeters(unsigned long, float*) [clone .cold]
 t CVROverlayLatest::GetPrimaryDashboardDevice()
 t CVROverlayLatest::GetPrimaryDashboardDevice() [clone .cold]
 t CVROverlayLatest::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlayLatest::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*) [clone .cold]
 t CVROverlayLatest::HideKeyboard()
 t CVROverlayLatest::HideKeyboard() [clone .cold]
 t CVROverlayLatest::HideOverlay(unsigned long)
 t CVROverlayLatest::HideOverlay(unsigned long) [clone .cold]
 t CVROverlayLatest::Init(CVRSystemLatest*, vr::IVRCompositorSystemInternal*, CVRCompositorClient*)
 t CVROverlayLatest::Init(CVRSystemLatest*, vr::IVRCompositorSystemInternal*, CVRCompositorClient*) [clone .cold]
 t CVROverlayLatest::IsActiveDashboardOverlay(unsigned long)
 t CVROverlayLatest::IsActiveDashboardOverlay(unsigned long) [clone .cold]
 t CVROverlayLatest::IsDashboardVisible()
 t CVROverlayLatest::IsHoverTargetOverlay(unsigned long)
 t CVROverlayLatest::IsHoverTargetOverlay(unsigned long) [clone .cold]
 t CVROverlayLatest::IsOverlayVisible(unsigned long)
 t CVROverlayLatest::IsOverlayVisible(unsigned long) [clone .cold]
 t CVROverlayLatest::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlayLatest::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int) [clone .cold]
 t CVROverlayLatest::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlayLatest::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlayLatest::SetDashboardOverlaySceneProcess(unsigned long, unsigned int) [clone .cold]
 t CVROverlayLatest::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlayLatest::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t) [clone .cold]
 t CVROverlayLatest::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlayLatest::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayAlpha(unsigned long, float)
 t CVROverlayLatest::SetOverlayAlpha(unsigned long, float) [clone .cold]
 t CVROverlayLatest::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlayLatest::SetOverlayColor(unsigned long, float, float, float) [clone .cold]
 t CVROverlayLatest::SetOverlayCursor(unsigned long, unsigned long)
 t CVROverlayLatest::SetOverlayCursor(unsigned long, unsigned long) [clone .cold]
 t CVROverlayLatest::SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t CVROverlayLatest::SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayCurvature(unsigned long, float)
 t CVROverlayLatest::SetOverlayCurvature(unsigned long, float) [clone .cold]
 t CVROverlayLatest::SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t CVROverlayLatest::SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool) [clone .cold]
 t CVROverlayLatest::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlayLatest::SetOverlayFromFile(unsigned long, char const*) [clone .cold]
 t CVROverlayLatest::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlayLatest::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod) [clone .cold]
 t CVROverlayLatest::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlayLatest::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int) [clone .cold]
 t CVROverlayLatest::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlayLatest::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayName(unsigned long, char const*)
 t CVROverlayLatest::SetOverlayName(unsigned long, char const*) [clone .cold]
 t CVROverlayLatest::SetOverlayPreCurvePitch(unsigned long, float)
 t CVROverlayLatest::SetOverlayPreCurvePitch(unsigned long, float) [clone .cold]
 t CVROverlayLatest::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlayLatest::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int) [clone .cold]
 t CVROverlayLatest::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlayLatest::SetOverlayRenderingPid(unsigned long, unsigned int) [clone .cold]
 t CVROverlayLatest::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlayLatest::SetOverlaySortOrder(unsigned long, unsigned int) [clone .cold]
 t CVROverlayLatest::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlayLatest::SetOverlayTexelAspect(unsigned long, float) [clone .cold]
 t CVROverlayLatest::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlayLatest::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlayLatest::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlayLatest::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace) [clone .cold]
 t CVROverlayLatest::SetOverlayTextureXR(unsigned long, vr::Texture_t const*, unsigned int, vr::EVRSubmitFlags)
 t CVROverlayLatest::SetOverlayTextureXR(unsigned long, vr::Texture_t const*, unsigned int, vr::EVRSubmitFlags) [clone .cold]
 t CVROverlayLatest::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlayLatest::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t CVROverlayLatest::SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlayLatest::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayTransformProjection(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*, vr::VROverlayProjection_t const*, vr::EVREye)
 t CVROverlayLatest::SetOverlayTransformProjection(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*, vr::VROverlayProjection_t const*, vr::EVREye) [clone .cold]
 t CVROverlayLatest::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlayLatest::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*) [clone .cold]
 t CVROverlayLatest::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlayLatest::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*) [clone .cold]
 t CVROverlayLatest::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlayLatest::SetOverlayWidthInMeters(unsigned long, float) [clone .cold]
 t CVROverlayLatest::ShowDashboard(char const*)
 t CVROverlayLatest::ShowDashboard(char const*) [clone .cold]
 t CVROverlayLatest::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t CVROverlayLatest::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t CVROverlayLatest::ShowKeyboardInternal(unsigned long, EKeyboardState, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, unsigned int, unsigned long)
 t CVROverlayLatest::ShowKeyboardInternal(unsigned long, EKeyboardState, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, unsigned int, unsigned long) [clone .cold]
 t CVROverlayLatest::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlayLatest::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*) [clone .cold]
 t CVROverlayLatest::ShowOverlay(unsigned long)
 t CVROverlayLatest::ShowOverlay(unsigned long) [clone .cold]
 t CVROverlayLatest::TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t CVROverlayLatest::TriggerLaserMouseHapticVibration(unsigned long, float, float, float) [clone .cold]
 t CVROverlayLatest::WaitFrameSync(unsigned int)
 t CVROverlayLatest::WaitFrameSync(unsigned int) [clone .cold]
 t CVROverlayLatest::~CVROverlayLatest()
 t CVROverlayViewLatest::AcquireOverlayView(unsigned long, vr::VRNativeDevice_t*, vr::VROverlayView_t*, unsigned int)
 t CVROverlayViewLatest::AcquireOverlayView(unsigned long, vr::VRNativeDevice_t*, vr::VROverlayView_t*, unsigned int) [clone .cold]
 t CVROverlayViewLatest::Cleanup()
 t CVROverlayViewLatest::GetResourceInfo(unsigned long)
 t CVROverlayViewLatest::GetResourceInfo(unsigned long) [clone .cold]
 t CVROverlayViewLatest::GetTextureDetailsFromHandle(unsigned long, unsigned long, vr::EColorSpace, vr::VRNativeDevice_t*, vr::VROverlayView_t*, vr::Texture_t*)
 t CVROverlayViewLatest::GetTextureDetailsFromHandle(unsigned long, unsigned long, vr::EColorSpace, vr::VRNativeDevice_t*, vr::VROverlayView_t*, vr::Texture_t*) [clone .cold]
 t CVROverlayViewLatest::Init(vr::IVRCompositorSystemInternal*, CVRCompositorClient*)
 t CVROverlayViewLatest::Init(vr::IVRCompositorSystemInternal*, CVRCompositorClient*) [clone .cold]
 t CVROverlayViewLatest::IsViewingPermitted(unsigned long)
 t CVROverlayViewLatest::IsViewingPermitted(unsigned long) [clone .cold]
 t CVROverlayViewLatest::LockGLTexture(unsigned long, void*)
 t CVROverlayViewLatest::PostOverlayEvent(unsigned long, vr::VREvent_t const*)
 t CVROverlayViewLatest::ReleaseOverlayView(vr::VROverlayView_t*)
 t CVROverlayViewLatest::ReleaseOverlayView(vr::VROverlayView_t*) [clone .cold]
 t CVROverlayViewLatest::ReleaseResourceInfo(vr::VROverlayView_t*)
 t CVROverlayViewLatest::ReleaseResourceInfo(vr::VROverlayView_t*) [clone .cold]
 t CVROverlayViewLatest::UnlockGLTexture(unsigned long)
 t CVROverlayViewLatest::~CVROverlayViewLatest()
 t CVROverlayView_001::AcquireOverlayView(unsigned long, OverlayView001_t*, unsigned int)
 t CVROverlayView_001::PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t CVROverlayView_001::ReleaseOverlayView(unsigned long)
 t CVROverlayView_002::AcquireOverlayView(unsigned long, vr::VRNativeDevice_t*, vr::VROverlayView_t*, unsigned int)
 t CVROverlayView_002::IsViewingPermitted(unsigned long)
 t CVROverlayView_002::PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t CVROverlayView_002::ReleaseOverlayView(vr::VROverlayView_t*)
 t CVROverlay_001::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_001::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_001::DestroyOverlay(unsigned long)
 t CVROverlay_001::FindOverlay(char const*, unsigned long*)
 t CVROverlay_001::GetHighQualityOverlay()
 t CVROverlay_001::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_001::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_001::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_001::GetOverlayGamma(unsigned long, float*)
 t CVROverlay_001::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_001::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_001::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_001::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_001::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_001::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_001::GetOverlayVisibility(unsigned long, VROverlayVisibility*)
 t CVROverlay_001::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_001::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_001::HideOverlay(unsigned long)
 t CVROverlay_001::IsActiveSystemOverlay(unsigned long)
 t CVROverlay_001::IsOverlayVisible(unsigned long)
 t CVROverlay_001::IsSystemOverlayVisible()
 t CVROverlay_001::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_001::SetHighQualityOverlay(unsigned long)
 t CVROverlay_001::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_001::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_001::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_001::SetOverlayGamma(unsigned long, float)
 t CVROverlay_001::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_001::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_001::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_001::SetOverlayTexture(unsigned long, void*)
 t CVROverlay_001::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_001::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_001::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_001::SetOverlayVisibility(unsigned long, VROverlayVisibility)
 t CVROverlay_001::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_001::ShowOverlay(unsigned long)
 t CVROverlay_002::ClearOverlayTexture(unsigned long)
 t CVROverlay_002::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_002::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_002::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_002::DestroyOverlay(unsigned long)
 t CVROverlay_002::FindOverlay(char const*, unsigned long*)
 t CVROverlay_002::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_002::GetHighQualityOverlay()
 t CVROverlay_002::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_002::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_002::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_002::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_002::GetOverlayGamma(unsigned long, float*)
 t CVROverlay_002::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_002::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_002::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_002::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_002::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_002::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_002::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_002::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_002::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_002::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_002::HideOverlay(unsigned long)
 t CVROverlay_002::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_002::IsDashboardVisible()
 t CVROverlay_002::IsOverlayVisible(unsigned long)
 t CVROverlay_002::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_002::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_002::SetHighQualityOverlay(unsigned long)
 t CVROverlay_002::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_002::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_002::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_002::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_002::SetOverlayGamma(unsigned long, float)
 t CVROverlay_002::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_002::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_002::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_002::SetOverlayTexture(unsigned long, vr::ETextureType, void*)
 t CVROverlay_002::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_002::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_002::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_002::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_002::ShowDashboard(char const*)
 t CVROverlay_002::ShowOverlay(unsigned long)
 t CVROverlay_003::ClearOverlayTexture(unsigned long)
 t CVROverlay_003::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_003::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_003::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_003::DestroyOverlay(unsigned long)
 t CVROverlay_003::FindOverlay(char const*, unsigned long*)
 t CVROverlay_003::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_003::GetHighQualityOverlay()
 t CVROverlay_003::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_003::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_003::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_003::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_003::GetOverlayGamma(unsigned long, float*)
 t CVROverlay_003::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_003::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_003::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_003::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_003::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_003::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_003::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_003::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_003::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_003::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_003::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_003::HideOverlay(unsigned long)
 t CVROverlay_003::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_003::IsDashboardVisible()
 t CVROverlay_003::IsOverlayVisible(unsigned long)
 t CVROverlay_003::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_003::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_003::SetHighQualityOverlay(unsigned long)
 t CVROverlay_003::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_003::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_003::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_003::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_003::SetOverlayGamma(unsigned long, float)
 t CVROverlay_003::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_003::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_003::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_003::SetOverlayTexture(unsigned long, vr::ETextureType, void*)
 t CVROverlay_003::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_003::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_003::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_003::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_003::ShowDashboard(char const*)
 t CVROverlay_003::ShowOverlay(unsigned long)
 t CVROverlay_004::ClearOverlayTexture(unsigned long)
 t CVROverlay_004::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_004::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_004::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_004::DestroyOverlay(unsigned long)
 t CVROverlay_004::FindOverlay(char const*, unsigned long*)
 t CVROverlay_004::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_004::GetHighQualityOverlay()
 t CVROverlay_004::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_004::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_004::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_004::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_004::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_004::GetOverlayGamma(unsigned long, float*)
 t CVROverlay_004::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_004::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_004::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_004::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_004::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_004::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_004::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_004::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_004::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_004::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_004::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_004::HideOverlay(unsigned long)
 t CVROverlay_004::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_004::IsDashboardVisible()
 t CVROverlay_004::IsOverlayVisible(unsigned long)
 t CVROverlay_004::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_004::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_004::SetHighQualityOverlay(unsigned long)
 t CVROverlay_004::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_004::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_004::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_004::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_004::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_004::SetOverlayGamma(unsigned long, float)
 t CVROverlay_004::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_004::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_004::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_004::SetOverlayTexture(unsigned long, vr::ETextureType, void*)
 t CVROverlay_004::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_004::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_004::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_004::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_004::ShowDashboard(char const*)
 t CVROverlay_004::ShowOverlay(unsigned long)
 t CVROverlay_005::ClearOverlayTexture(unsigned long)
 t CVROverlay_005::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_005::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_005::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_005::DestroyOverlay(unsigned long)
 t CVROverlay_005::FindOverlay(char const*, unsigned long*)
 t CVROverlay_005::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_005::GetHighQualityOverlay()
 t CVROverlay_005::GetKeyboardText(char*, unsigned int)
 t CVROverlay_005::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_005::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_005::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_005::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_005::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_005::GetOverlayGamma(unsigned long, float*)
 t CVROverlay_005::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_005::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_005::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_005::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_005::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_005::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_005::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_005::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_005::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_005::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_005::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_005::HideKeyboard()
 t CVROverlay_005::HideOverlay(unsigned long)
 t CVROverlay_005::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_005::IsDashboardVisible()
 t CVROverlay_005::IsFocusOverlay(unsigned long)
 t CVROverlay_005::IsOverlayVisible(unsigned long)
 t CVROverlay_005::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_005::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_005::SetHighQualityOverlay(unsigned long)
 t CVROverlay_005::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_005::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_005::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_005::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_005::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_005::SetOverlayGamma(unsigned long, float)
 t CVROverlay_005::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_005::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_005::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_005::SetOverlayTexture(unsigned long, vr::ETextureType, void*)
 t CVROverlay_005::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_005::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_005::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_005::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_005::ShowDashboard(char const*)
 t CVROverlay_005::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool)
 t CVROverlay_005::ShowOverlay(unsigned long)
 t CVROverlay_006::ClearOverlayTexture(unsigned long)
 t CVROverlay_006::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_006::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_006::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_006::DestroyOverlay(unsigned long)
 t CVROverlay_006::FindOverlay(char const*, unsigned long*)
 t CVROverlay_006::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_006::GetGamepadFocusOverlay()
 t CVROverlay_006::GetHighQualityOverlay()
 t CVROverlay_006::GetKeyboardText(char*, unsigned int)
 t CVROverlay_006::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_006::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_006::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_006::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_006::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_006::GetOverlayGamma(unsigned long, float*)
 t CVROverlay_006::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_006::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_006::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_006::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_006::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_006::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_006::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_006::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_006::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_006::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_006::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_006::HideKeyboard()
 t CVROverlay_006::HideOverlay(unsigned long)
 t CVROverlay_006::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_006::IsDashboardVisible()
 t CVROverlay_006::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_006::IsOverlayVisible(unsigned long)
 t CVROverlay_006::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_006::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_006::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_006::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_006::SetHighQualityOverlay(unsigned long)
 t CVROverlay_006::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_006::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_006::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_006::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_006::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_006::SetOverlayGamma(unsigned long, float)
 t CVROverlay_006::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_006::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_006::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_006::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_006::SetOverlayTexture(unsigned long, vr::ETextureType, void*)
 t CVROverlay_006::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_006::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_006::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_006::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_006::ShowDashboard(char const*)
 t CVROverlay_006::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_006::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_006::ShowOverlay(unsigned long)
 t CVROverlay_007::ClearOverlayTexture(unsigned long)
 t CVROverlay_007::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_007::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_007::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_007::DestroyOverlay(unsigned long)
 t CVROverlay_007::FindOverlay(char const*, unsigned long*)
 t CVROverlay_007::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_007::GetGamepadFocusOverlay()
 t CVROverlay_007::GetHighQualityOverlay()
 t CVROverlay_007::GetKeyboardText(char*, unsigned int)
 t CVROverlay_007::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_007::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_007::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_007::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_007::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_007::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_007::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_007::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_007::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_007::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_007::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_007::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_007::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_007::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_007::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_007::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_007::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_007::HideKeyboard()
 t CVROverlay_007::HideOverlay(unsigned long)
 t CVROverlay_007::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_007::IsDashboardVisible()
 t CVROverlay_007::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_007::IsOverlayVisible(unsigned long)
 t CVROverlay_007::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_007::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_007::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_007::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_007::SetHighQualityOverlay(unsigned long)
 t CVROverlay_007::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_007::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_007::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_007::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_007::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_007::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_007::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_007::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_007::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_007::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_007::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_007::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_007::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_007::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_007::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_007::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_007::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_007::ShowDashboard(char const*)
 t CVROverlay_007::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_007::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_007::ShowOverlay(unsigned long)
 t CVROverlay_008::ClearOverlayTexture(unsigned long)
 t CVROverlay_008::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_008::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_008::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_008::DestroyOverlay(unsigned long)
 t CVROverlay_008::FindOverlay(char const*, unsigned long*)
 t CVROverlay_008::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_008::GetGamepadFocusOverlay()
 t CVROverlay_008::GetHighQualityOverlay()
 t CVROverlay_008::GetKeyboardText(char*, unsigned int)
 t CVROverlay_008::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_008::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_008::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_008::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_008::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_008::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_008::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_008::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_008::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_008::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_008::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_008::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_008::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_008::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_008::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_008::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_008::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_008::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_008::HideKeyboard()
 t CVROverlay_008::HideOverlay(unsigned long)
 t CVROverlay_008::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_008::IsDashboardVisible()
 t CVROverlay_008::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_008::IsOverlayVisible(unsigned long)
 t CVROverlay_008::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_008::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_008::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_008::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_008::SetHighQualityOverlay(unsigned long)
 t CVROverlay_008::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_008::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_008::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_008::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_008::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_008::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_008::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_008::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_008::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_008::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_008::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_008::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_008::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_008::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_008::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_008::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_008::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_008::ShowDashboard(char const*)
 t CVROverlay_008::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_008::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_008::ShowOverlay(unsigned long)
 t CVROverlay_009::ClearOverlayTexture(unsigned long)
 t CVROverlay_009::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_009::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_009::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_009::DestroyOverlay(unsigned long)
 t CVROverlay_009::FindOverlay(char const*, unsigned long*)
 t CVROverlay_009::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_009::GetGamepadFocusOverlay()
 t CVROverlay_009::GetHighQualityOverlay()
 t CVROverlay_009::GetKeyboardText(char*, unsigned int)
 t CVROverlay_009::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_009::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_009::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_009::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_009::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_009::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_009::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_009::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_009::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_009::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_009::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_009::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_009::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_009::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_009::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_009::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_009::GetPrimaryDashboardDevice()
 t CVROverlay_009::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_009::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_009::HideKeyboard()
 t CVROverlay_009::HideOverlay(unsigned long)
 t CVROverlay_009::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_009::IsDashboardVisible()
 t CVROverlay_009::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_009::IsOverlayVisible(unsigned long)
 t CVROverlay_009::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_009::PollNextOverlayEvent(unsigned long, vr::VREvent_t*)
 t CVROverlay_009::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_009::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_009::SetHighQualityOverlay(unsigned long)
 t CVROverlay_009::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_009::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_009::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_009::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_009::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_009::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_009::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_009::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_009::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_009::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_009::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_009::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_009::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_009::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_009::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_009::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_009::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_009::ShowDashboard(char const*)
 t CVROverlay_009::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_009::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_009::ShowOverlay(unsigned long)
 t CVROverlay_010::ClearOverlayTexture(unsigned long)
 t CVROverlay_010::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_010::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_010::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_010::DestroyOverlay(unsigned long)
 t CVROverlay_010::FindOverlay(char const*, unsigned long*)
 t CVROverlay_010::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_010::GetGamepadFocusOverlay()
 t CVROverlay_010::GetHighQualityOverlay()
 t CVROverlay_010::GetKeyboardText(char*, unsigned int)
 t CVROverlay_010::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_010::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_010::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_010::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_010::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_010::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_010::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_010::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_010::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_010::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_010::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_010::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_010::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_010::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_010::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_010::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_010::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_010::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_010::GetPrimaryDashboardDevice()
 t CVROverlay_010::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_010::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_010::HideKeyboard()
 t CVROverlay_010::HideOverlay(unsigned long)
 t CVROverlay_010::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_010::IsDashboardVisible()
 t CVROverlay_010::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_010::IsOverlayVisible(unsigned long)
 t CVROverlay_010::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_010::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_010::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_010::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_010::SetHighQualityOverlay(unsigned long)
 t CVROverlay_010::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_010::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_010::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_010::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_010::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_010::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_010::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_010::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_010::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_010::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_010::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_010::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_010::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_010::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_010::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_010::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_010::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_010::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_010::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_010::ShowDashboard(char const*)
 t CVROverlay_010::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_010::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_010::ShowOverlay(unsigned long)
 t CVROverlay_011::ClearOverlayTexture(unsigned long)
 t CVROverlay_011::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_011::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_011::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_011::DestroyOverlay(unsigned long)
 t CVROverlay_011::FindOverlay(char const*, unsigned long*)
 t CVROverlay_011::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_011::GetGamepadFocusOverlay()
 t CVROverlay_011::GetHighQualityOverlay()
 t CVROverlay_011::GetKeyboardText(char*, unsigned int)
 t CVROverlay_011::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_011::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_011::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_011::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_011::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_011::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_011::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_011::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_011::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_011::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_011::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_011::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*)
 t CVROverlay_011::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_011::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_011::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_011::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_011::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_011::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_011::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_011::GetPrimaryDashboardDevice()
 t CVROverlay_011::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_011::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_011::HideKeyboard()
 t CVROverlay_011::HideOverlay(unsigned long)
 t CVROverlay_011::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_011::IsDashboardVisible()
 t CVROverlay_011::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_011::IsOverlayVisible(unsigned long)
 t CVROverlay_011::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_011::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_011::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_011::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_011::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_011::SetHighQualityOverlay(unsigned long)
 t CVROverlay_011::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_011::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_011::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_011::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_011::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_011::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_011::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_011::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_011::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_011::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_011::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_011::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_011::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_011::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_011::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_011::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_011::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_011::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_011::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_011::ShowDashboard(char const*)
 t CVROverlay_011::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_011::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_011::ShowOverlay(unsigned long)
 t CVROverlay_012::ClearOverlayTexture(unsigned long)
 t CVROverlay_012::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_012::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_012::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_012::DestroyOverlay(unsigned long)
 t CVROverlay_012::FindOverlay(char const*, unsigned long*)
 t CVROverlay_012::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_012::GetGamepadFocusOverlay()
 t CVROverlay_012::GetHighQualityOverlay()
 t CVROverlay_012::GetKeyboardText(char*, unsigned int)
 t CVROverlay_012::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_012::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_012::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_012::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_012::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_012::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_012::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_012::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_012::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_012::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_012::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_012::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*)
 t CVROverlay_012::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_012::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_012::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_012::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_012::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_012::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_012::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_012::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_012::GetPrimaryDashboardDevice()
 t CVROverlay_012::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_012::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_012::HideKeyboard()
 t CVROverlay_012::HideOverlay(unsigned long)
 t CVROverlay_012::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_012::IsDashboardVisible()
 t CVROverlay_012::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_012::IsOverlayVisible(unsigned long)
 t CVROverlay_012::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_012::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_012::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_012::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_012::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_012::SetHighQualityOverlay(unsigned long)
 t CVROverlay_012::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_012::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_012::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_012::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_012::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_012::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_012::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_012::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_012::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_012::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_012::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_012::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_012::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_012::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_012::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_012::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_012::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_012::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_012::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_012::ShowDashboard(char const*)
 t CVROverlay_012::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_012::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_012::ShowOverlay(unsigned long)
 t CVROverlay_013::ClearOverlayTexture(unsigned long)
 t CVROverlay_013::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_013::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_013::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_013::DestroyOverlay(unsigned long)
 t CVROverlay_013::FindOverlay(char const*, unsigned long*)
 t CVROverlay_013::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_013::GetGamepadFocusOverlay()
 t CVROverlay_013::GetHighQualityOverlay()
 t CVROverlay_013::GetKeyboardText(char*, unsigned int)
 t CVROverlay_013::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_013::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_013::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_013::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_013::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_013::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_013::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_013::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_013::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_013::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_013::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_013::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_013::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_013::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_013::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*)
 t CVROverlay_013::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_013::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_013::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_013::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_013::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_013::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_013::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_013::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_013::GetPrimaryDashboardDevice()
 t CVROverlay_013::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_013::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_013::HideKeyboard()
 t CVROverlay_013::HideOverlay(unsigned long)
 t CVROverlay_013::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_013::IsDashboardVisible()
 t CVROverlay_013::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_013::IsOverlayVisible(unsigned long)
 t CVROverlay_013::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_013::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_013::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_013::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_013::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_013::SetHighQualityOverlay(unsigned long)
 t CVROverlay_013::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_013::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_013::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_013::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_013::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_013::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_013::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_013::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_013::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_013::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_013::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_013::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_013::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_013::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_013::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_013::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_013::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_013::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_013::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_013::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_013::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_013::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_013::ShowDashboard(char const*)
 t CVROverlay_013::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_013::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_013::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_013::ShowOverlay(unsigned long)
 t CVROverlay_014::ClearOverlayTexture(unsigned long)
 t CVROverlay_014::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_014::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_014::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_014::DestroyOverlay(unsigned long)
 t CVROverlay_014::FindOverlay(char const*, unsigned long*)
 t CVROverlay_014::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_014::GetGamepadFocusOverlay()
 t CVROverlay_014::GetHighQualityOverlay()
 t CVROverlay_014::GetKeyboardText(char*, unsigned int)
 t CVROverlay_014::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_014::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_014::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_014::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_014::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_014::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_014::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_014::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_014::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_014::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_014::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_014::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_014::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_014::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_014::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_014::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_014::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_014::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_014::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_014::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_014::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_014::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_014::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_014::GetPrimaryDashboardDevice()
 t CVROverlay_014::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_014::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_014::HideKeyboard()
 t CVROverlay_014::HideOverlay(unsigned long)
 t CVROverlay_014::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_014::IsDashboardVisible()
 t CVROverlay_014::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_014::IsOverlayVisible(unsigned long)
 t CVROverlay_014::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_014::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_014::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_014::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_014::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_014::SetHighQualityOverlay(unsigned long)
 t CVROverlay_014::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_014::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_014::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_014::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_014::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_014::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_014::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_014::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_014::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_014::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_014::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_014::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_014::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_014::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_014::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_014::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_014::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_014::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_014::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_014::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_014::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_014::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_014::ShowDashboard(char const*)
 t CVROverlay_014::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_014::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_014::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_014::ShowOverlay(unsigned long)
 t CVROverlay_015::ClearOverlayTexture(unsigned long)
 t CVROverlay_015::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_015::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_015::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_015::DestroyOverlay(unsigned long)
 t CVROverlay_015::FindOverlay(char const*, unsigned long*)
 t CVROverlay_015::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_015::GetGamepadFocusOverlay()
 t CVROverlay_015::GetHighQualityOverlay()
 t CVROverlay_015::GetKeyboardText(char*, unsigned int)
 t CVROverlay_015::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_015::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_015::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_015::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_015::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_015::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_015::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_015::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_015::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_015::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_015::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_015::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_015::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_015::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_015::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_015::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_015::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_015::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_015::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_015::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_015::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_015::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_015::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_015::GetPrimaryDashboardDevice()
 t CVROverlay_015::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_015::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_015::HideKeyboard()
 t CVROverlay_015::HideOverlay(unsigned long)
 t CVROverlay_015::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_015::IsDashboardVisible()
 t CVROverlay_015::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_015::IsOverlayVisible(unsigned long)
 t CVROverlay_015::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_015::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_015::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_015::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_015::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_015::SetHighQualityOverlay(unsigned long)
 t CVROverlay_015::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_015::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_015::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_015::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_015::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_015::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_015::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_015::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_015::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_015::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_015::SetOverlayName(unsigned long, char const*)
 t CVROverlay_015::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_015::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_015::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_015::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_015::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_015::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_015::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_015::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_015::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_015::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_015::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_015::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_015::ShowDashboard(char const*)
 t CVROverlay_015::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_015::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_015::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_015::ShowOverlay(unsigned long)
 t CVROverlay_016::ClearOverlayTexture(unsigned long)
 t CVROverlay_016::CloseMessageOverlay()
 t CVROverlay_016::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_016::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_016::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_016::DestroyOverlay(unsigned long)
 t CVROverlay_016::FindOverlay(char const*, unsigned long*)
 t CVROverlay_016::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_016::GetGamepadFocusOverlay()
 t CVROverlay_016::GetHighQualityOverlay()
 t CVROverlay_016::GetKeyboardText(char*, unsigned int)
 t CVROverlay_016::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_016::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_016::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_016::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_016::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_016::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_016::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_016::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_016::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_016::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_016::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_016::GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t CVROverlay_016::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_016::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_016::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_016::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_016::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_016::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_016::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_016::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_016::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_016::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_016::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_016::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_016::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_016::GetPrimaryDashboardDevice()
 t CVROverlay_016::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_016::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_016::HideKeyboard()
 t CVROverlay_016::HideOverlay(unsigned long)
 t CVROverlay_016::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_016::IsDashboardVisible()
 t CVROverlay_016::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_016::IsOverlayVisible(unsigned long)
 t CVROverlay_016::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_016::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_016::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_016::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_016::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_016::SetHighQualityOverlay(unsigned long)
 t CVROverlay_016::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_016::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_016::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_016::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_016::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_016::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_016::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_016::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_016::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_016::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_016::SetOverlayName(unsigned long, char const*)
 t CVROverlay_016::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_016::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_016::SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t CVROverlay_016::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_016::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_016::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_016::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_016::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_016::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_016::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_016::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_016::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_016::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_016::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_016::ShowDashboard(char const*)
 t CVROverlay_016::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_016::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_016::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_016::ShowOverlay(unsigned long)
 t CVROverlay_017::ClearOverlayTexture(unsigned long)
 t CVROverlay_017::CloseMessageOverlay()
 t CVROverlay_017::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_017::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_017::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_017::DestroyOverlay(unsigned long)
 t CVROverlay_017::FindOverlay(char const*, unsigned long*)
 t CVROverlay_017::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_017::GetGamepadFocusOverlay()
 t CVROverlay_017::GetHighQualityOverlay()
 t CVROverlay_017::GetKeyboardText(char*, unsigned int)
 t CVROverlay_017::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_017::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_017::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_017::GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t CVROverlay_017::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_017::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_017::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_017::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_017::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_017::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_017::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_017::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_017::GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t CVROverlay_017::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_017::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_017::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_017::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_017::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_017::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_017::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_017::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_017::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_017::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_017::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_017::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_017::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_017::GetPrimaryDashboardDevice()
 t CVROverlay_017::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_017::HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t CVROverlay_017::HideKeyboard()
 t CVROverlay_017::HideOverlay(unsigned long)
 t CVROverlay_017::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_017::IsDashboardVisible()
 t CVROverlay_017::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_017::IsOverlayVisible(unsigned long)
 t CVROverlay_017::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_017::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_017::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_017::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_017::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_017::SetHighQualityOverlay(unsigned long)
 t CVROverlay_017::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_017::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_017::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_017::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_017::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_017::SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const&, float)
 t CVROverlay_017::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_017::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_017::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_017::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_017::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_017::SetOverlayName(unsigned long, char const*)
 t CVROverlay_017::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_017::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_017::SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t CVROverlay_017::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_017::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_017::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_017::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_017::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_017::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_017::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_017::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_017::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_017::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_017::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_017::ShowDashboard(char const*)
 t CVROverlay_017::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_017::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_017::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_017::ShowOverlay(unsigned long)
 t CVROverlay_018::ClearOverlayTexture(unsigned long)
 t CVROverlay_018::CloseMessageOverlay()
 t CVROverlay_018::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_018::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_018::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_018::DestroyOverlay(unsigned long)
 t CVROverlay_018::FindOverlay(char const*, unsigned long*)
 t CVROverlay_018::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_018::GetGamepadFocusOverlay()
 t CVROverlay_018::GetHighQualityOverlay()
 t CVROverlay_018::GetKeyboardText(char*, unsigned int)
 t CVROverlay_018::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_018::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_018::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_018::GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t CVROverlay_018::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_018::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_018::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_018::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_018::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_018::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_018::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_018::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_018::GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t CVROverlay_018::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_018::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_018::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_018::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_018::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_018::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_018::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_018::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_018::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_018::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_018::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_018::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_018::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_018::GetPrimaryDashboardDevice()
 t CVROverlay_018::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_018::HideKeyboard()
 t CVROverlay_018::HideOverlay(unsigned long)
 t CVROverlay_018::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_018::IsDashboardVisible()
 t CVROverlay_018::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_018::IsOverlayVisible(unsigned long)
 t CVROverlay_018::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_018::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_018::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_018::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_018::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_018::SetHighQualityOverlay(unsigned long)
 t CVROverlay_018::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_018::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_018::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_018::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_018::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_018::SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const&, float)
 t CVROverlay_018::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_018::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_018::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_018::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_018::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_018::SetOverlayName(unsigned long, char const*)
 t CVROverlay_018::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_018::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_018::SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t CVROverlay_018::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_018::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_018::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_018::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_018::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_018::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_018::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_018::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_018::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_018::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_018::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_018::ShowDashboard(char const*)
 t CVROverlay_018::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_018::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_018::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_018::ShowOverlay(unsigned long)
 t CVROverlay_019::ClearOverlayTexture(unsigned long)
 t CVROverlay_019::CloseMessageOverlay()
 t CVROverlay_019::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_019::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_019::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_019::DestroyOverlay(unsigned long)
 t CVROverlay_019::FindOverlay(char const*, unsigned long*)
 t CVROverlay_019::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_019::GetGamepadFocusOverlay()
 t CVROverlay_019::GetHighQualityOverlay()
 t CVROverlay_019::GetKeyboardText(char*, unsigned int)
 t CVROverlay_019::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_019::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_019::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_019::GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t CVROverlay_019::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_019::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_019::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_019::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_019::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_019::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_019::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_019::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_019::GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t CVROverlay_019::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_019::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_019::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_019::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_019::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_019::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_019::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_019::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_019::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_019::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_019::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_019::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_019::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_019::GetPrimaryDashboardDevice()
 t CVROverlay_019::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_019::HideKeyboard()
 t CVROverlay_019::HideOverlay(unsigned long)
 t CVROverlay_019::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_019::IsDashboardVisible()
 t CVROverlay_019::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_019::IsOverlayVisible(unsigned long)
 t CVROverlay_019::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_019::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_019::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_019::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_019::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_019::SetHighQualityOverlay(unsigned long)
 t CVROverlay_019::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_019::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_019::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_019::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_019::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_019::SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t CVROverlay_019::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_019::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_019::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_019::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_019::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_019::SetOverlayName(unsigned long, char const*)
 t CVROverlay_019::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_019::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_019::SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t CVROverlay_019::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_019::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_019::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_019::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_019::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_019::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_019::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_019::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_019::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_019::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_019::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_019::ShowDashboard(char const*)
 t CVROverlay_019::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_019::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_019::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_019::ShowOverlay(unsigned long)
 t CVROverlay_020::ClearOverlayTexture(unsigned long)
 t CVROverlay_020::CloseMessageOverlay()
 t CVROverlay_020::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_020::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_020::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_020::DestroyOverlay(unsigned long)
 t CVROverlay_020::FindOverlay(char const*, unsigned long*)
 t CVROverlay_020::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_020::GetGamepadFocusOverlay()
 t CVROverlay_020::GetKeyboardText(char*, unsigned int)
 t CVROverlay_020::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_020::GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t CVROverlay_020::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_020::GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t CVROverlay_020::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_020::GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t CVROverlay_020::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_020::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_020::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_020::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_020::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_020::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_020::GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t CVROverlay_020::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_020::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_020::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_020::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_020::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_020::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_020::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_020::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_020::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_020::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_020::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_020::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_020::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_020::GetPrimaryDashboardDevice()
 t CVROverlay_020::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_020::HideKeyboard()
 t CVROverlay_020::HideOverlay(unsigned long)
 t CVROverlay_020::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_020::IsDashboardVisible()
 t CVROverlay_020::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_020::IsOverlayVisible(unsigned long)
 t CVROverlay_020::MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t CVROverlay_020::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_020::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_020::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_020::SetGamepadFocusOverlay(unsigned long)
 t CVROverlay_020::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_020::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_020::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_020::SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t CVROverlay_020::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_020::SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t CVROverlay_020::SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t CVROverlay_020::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_020::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_020::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_020::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_020::SetOverlayName(unsigned long, char const*)
 t CVROverlay_020::SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t CVROverlay_020::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_020::SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t CVROverlay_020::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_020::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_020::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_020::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_020::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_020::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_020::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_020::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_020::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_020::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_020::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_020::ShowDashboard(char const*)
 t CVROverlay_020::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_020::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_020::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_020::ShowOverlay(unsigned long)
 t CVROverlay_021::ClearOverlayTexture(unsigned long)
 t CVROverlay_021::CloseMessageOverlay()
 t CVROverlay_021::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_021::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_021::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_021::DestroyOverlay(unsigned long)
 t CVROverlay_021::FindOverlay(char const*, unsigned long*)
 t CVROverlay_021::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_021::GetKeyboardText(char*, unsigned int)
 t CVROverlay_021::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_021::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_021::GetOverlayCurvature(unsigned long, float*)
 t CVROverlay_021::GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t CVROverlay_021::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_021::GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t CVROverlay_021::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_021::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_021::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_021::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_021::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_021::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_021::GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t CVROverlay_021::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_021::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_021::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_021::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_021::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_021::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_021::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_021::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_021::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_021::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_021::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_021::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_021::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_021::GetPrimaryDashboardDevice()
 t CVROverlay_021::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_021::HideKeyboard()
 t CVROverlay_021::HideOverlay(unsigned long)
 t CVROverlay_021::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_021::IsDashboardVisible()
 t CVROverlay_021::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_021::IsOverlayVisible(unsigned long)
 t CVROverlay_021::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_021::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_021::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_021::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_021::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_021::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_021::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_021::SetOverlayCurvature(unsigned long, float)
 t CVROverlay_021::SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t CVROverlay_021::SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t CVROverlay_021::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_021::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_021::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_021::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_021::SetOverlayName(unsigned long, char const*)
 t CVROverlay_021::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_021::SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t CVROverlay_021::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_021::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_021::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_021::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_021::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_021::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_021::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_021::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_021::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_021::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_021::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_021::ShowDashboard(char const*)
 t CVROverlay_021::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_021::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_021::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_021::ShowOverlay(unsigned long)
 t CVROverlay_022::ClearOverlayCursorPositionOverride(unsigned long)
 t CVROverlay_022::ClearOverlayTexture(unsigned long)
 t CVROverlay_022::CloseMessageOverlay()
 t CVROverlay_022::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_022::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_022::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_022::DestroyOverlay(unsigned long)
 t CVROverlay_022::FindOverlay(char const*, unsigned long*)
 t CVROverlay_022::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_022::GetKeyboardText(char*, unsigned int)
 t CVROverlay_022::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_022::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_022::GetOverlayCurvature(unsigned long, float*)
 t CVROverlay_022::GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t CVROverlay_022::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_022::GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t CVROverlay_022::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_022::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_022::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_022::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_022::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_022::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_022::GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t CVROverlay_022::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_022::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_022::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_022::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_022::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_022::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_022::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_022::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_022::GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_022::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_022::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_022::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_022::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_022::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_022::GetPrimaryDashboardDevice()
 t CVROverlay_022::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_022::HideKeyboard()
 t CVROverlay_022::HideOverlay(unsigned long)
 t CVROverlay_022::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_022::IsDashboardVisible()
 t CVROverlay_022::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_022::IsOverlayVisible(unsigned long)
 t CVROverlay_022::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_022::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_022::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_022::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_022::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_022::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_022::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_022::SetOverlayCursor(unsigned long, unsigned long)
 t CVROverlay_022::SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_022::SetOverlayCurvature(unsigned long, float)
 t CVROverlay_022::SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t CVROverlay_022::SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t CVROverlay_022::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_022::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_022::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_022::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_022::SetOverlayName(unsigned long, char const*)
 t CVROverlay_022::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_022::SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t CVROverlay_022::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_022::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_022::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_022::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_022::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_022::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_022::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_022::SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_022::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_022::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_022::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_022::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_022::ShowDashboard(char const*)
 t CVROverlay_022::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_022::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_022::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_022::ShowOverlay(unsigned long)
 t CVROverlay_022::TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t CVROverlay_023::ClearOverlayCursorPositionOverride(unsigned long)
 t CVROverlay_023::ClearOverlayTexture(unsigned long)
 t CVROverlay_023::CloseMessageOverlay()
 t CVROverlay_023::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_023::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_023::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_023::DestroyOverlay(unsigned long)
 t CVROverlay_023::FindOverlay(char const*, unsigned long*)
 t CVROverlay_023::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_023::GetKeyboardText(char*, unsigned int)
 t CVROverlay_023::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_023::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_023::GetOverlayCurvature(unsigned long, float*)
 t CVROverlay_023::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_023::GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t CVROverlay_023::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_023::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_023::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_023::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_023::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_023::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_023::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_023::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_023::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_023::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_023::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_023::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_023::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_023::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_023::GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_023::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_023::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_023::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_023::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_023::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_023::GetPrimaryDashboardDevice()
 t CVROverlay_023::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_023::HideKeyboard()
 t CVROverlay_023::HideOverlay(unsigned long)
 t CVROverlay_023::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_023::IsDashboardVisible()
 t CVROverlay_023::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_023::IsOverlayVisible(unsigned long)
 t CVROverlay_023::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_023::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_023::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_023::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_023::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_023::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_023::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_023::SetOverlayCursor(unsigned long, unsigned long)
 t CVROverlay_023::SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_023::SetOverlayCurvature(unsigned long, float)
 t CVROverlay_023::SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t CVROverlay_023::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_023::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_023::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_023::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_023::SetOverlayName(unsigned long, char const*)
 t CVROverlay_023::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_023::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_023::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_023::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_023::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_023::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_023::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_023::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_023::SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_023::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_023::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_023::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_023::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_023::ShowDashboard(char const*)
 t CVROverlay_023::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_023::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t CVROverlay_023::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_023::ShowOverlay(unsigned long)
 t CVROverlay_023::TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t CVROverlay_024::ClearOverlayCursorPositionOverride(unsigned long)
 t CVROverlay_024::ClearOverlayTexture(unsigned long)
 t CVROverlay_024::CloseMessageOverlay()
 t CVROverlay_024::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_024::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_024::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_024::DestroyOverlay(unsigned long)
 t CVROverlay_024::FindOverlay(char const*, unsigned long*)
 t CVROverlay_024::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_024::GetKeyboardText(char*, unsigned int)
 t CVROverlay_024::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_024::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_024::GetOverlayCurvature(unsigned long, float*)
 t CVROverlay_024::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_024::GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t CVROverlay_024::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_024::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_024::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_024::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_024::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_024::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_024::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_024::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_024::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_024::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_024::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_024::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_024::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_024::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_024::GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_024::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_024::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_024::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_024::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_024::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_024::GetPrimaryDashboardDevice()
 t CVROverlay_024::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_024::HideKeyboard()
 t CVROverlay_024::HideOverlay(unsigned long)
 t CVROverlay_024::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_024::IsDashboardVisible()
 t CVROverlay_024::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_024::IsOverlayVisible(unsigned long)
 t CVROverlay_024::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_024::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_024::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_024::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_024::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_024::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_024::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_024::SetOverlayCursor(unsigned long, unsigned long)
 t CVROverlay_024::SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_024::SetOverlayCurvature(unsigned long, float)
 t CVROverlay_024::SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t CVROverlay_024::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_024::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_024::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_024::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_024::SetOverlayName(unsigned long, char const*)
 t CVROverlay_024::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_024::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_024::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_024::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_024::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_024::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_024::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_024::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_024::SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_024::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_024::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_024::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_024::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_024::ShowDashboard(char const*)
 t CVROverlay_024::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t CVROverlay_024::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t CVROverlay_024::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_024::ShowOverlay(unsigned long)
 t CVROverlay_024::TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t CVROverlay_025::ClearOverlayCursorPositionOverride(unsigned long)
 t CVROverlay_025::ClearOverlayTexture(unsigned long)
 t CVROverlay_025::CloseMessageOverlay()
 t CVROverlay_025::ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t CVROverlay_025::CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t CVROverlay_025::CreateOverlay(char const*, char const*, unsigned long*)
 t CVROverlay_025::DestroyOverlay(unsigned long)
 t CVROverlay_025::FindOverlay(char const*, unsigned long*)
 t CVROverlay_025::GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t CVROverlay_025::GetKeyboardText(char*, unsigned int)
 t CVROverlay_025::GetOverlayAlpha(unsigned long, float*)
 t CVROverlay_025::GetOverlayColor(unsigned long, float*, float*, float*)
 t CVROverlay_025::GetOverlayCurvature(unsigned long, float*)
 t CVROverlay_025::GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t CVROverlay_025::GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t CVROverlay_025::GetOverlayFlags(unsigned long, unsigned int*)
 t CVROverlay_025::GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t CVROverlay_025::GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t CVROverlay_025::GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_025::GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_025::GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t CVROverlay_025::GetOverlayRenderingPid(unsigned long)
 t CVROverlay_025::GetOverlaySortOrder(unsigned long, unsigned int*)
 t CVROverlay_025::GetOverlayTexelAspect(unsigned long, float*)
 t CVROverlay_025::GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t CVROverlay_025::GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t CVROverlay_025::GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t CVROverlay_025::GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t CVROverlay_025::GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t CVROverlay_025::GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t CVROverlay_025::GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t CVROverlay_025::GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t CVROverlay_025::GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t CVROverlay_025::GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t CVROverlay_025::GetOverlayWidthInMeters(unsigned long, float*)
 t CVROverlay_025::GetPrimaryDashboardDevice()
 t CVROverlay_025::GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t CVROverlay_025::HideKeyboard()
 t CVROverlay_025::HideOverlay(unsigned long)
 t CVROverlay_025::IsActiveDashboardOverlay(unsigned long)
 t CVROverlay_025::IsDashboardVisible()
 t CVROverlay_025::IsHoverTargetOverlay(unsigned long)
 t CVROverlay_025::IsOverlayVisible(unsigned long)
 t CVROverlay_025::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVROverlay_025::ReleaseNativeOverlayHandle(unsigned long, void*)
 t CVROverlay_025::SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t CVROverlay_025::SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t CVROverlay_025::SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_025::SetOverlayAlpha(unsigned long, float)
 t CVROverlay_025::SetOverlayColor(unsigned long, float, float, float)
 t CVROverlay_025::SetOverlayCursor(unsigned long, unsigned long)
 t CVROverlay_025::SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_025::SetOverlayCurvature(unsigned long, float)
 t CVROverlay_025::SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t CVROverlay_025::SetOverlayFromFile(unsigned long, char const*)
 t CVROverlay_025::SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t CVROverlay_025::SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t CVROverlay_025::SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_025::SetOverlayName(unsigned long, char const*)
 t CVROverlay_025::SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t CVROverlay_025::SetOverlayRenderingPid(unsigned long, unsigned int)
 t CVROverlay_025::SetOverlaySortOrder(unsigned long, unsigned int)
 t CVROverlay_025::SetOverlayTexelAspect(unsigned long, float)
 t CVROverlay_025::SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t CVROverlay_025::SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t CVROverlay_025::SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t CVROverlay_025::SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t CVROverlay_025::SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t CVROverlay_025::SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t CVROverlay_025::SetOverlayTransformProjection(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*, vr::VROverlayProjection_t const*, vr::EVREye)
 t CVROverlay_025::SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t CVROverlay_025::SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t CVROverlay_025::SetOverlayWidthInMeters(unsigned long, float)
 t CVROverlay_025::ShowDashboard(char const*)
 t CVROverlay_025::ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t CVROverlay_025::ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t CVROverlay_025::ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t CVROverlay_025::ShowOverlay(unsigned long)
 t CVROverlay_025::TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t CVRPathRegistry::AddExternalDriver(char const*)
 t CVRPathRegistry::AddExternalDriver(char const*) [clone .cold]
 t CVRPathRegistry::CVRPathRegistry()
 t CVRPathRegistry::GetConfigHistoryCount() const
 t CVRPathRegistry::GetConfigHistoryPath(unsigned int) const
 t CVRPathRegistry::GetExternalDriverCount() const
 t CVRPathRegistry::GetExternalDriverPath(unsigned int) const
 t CVRPathRegistry::GetInstalledRuntimes() const
 t CVRPathRegistry::GetInstalledRuntimes() const [clone .cold]
 t CVRPathRegistry::GetLogHistoryCount() const
 t CVRPathRegistry::GetLogHistoryPath(unsigned int) const
 t CVRPathRegistry::GetRuntimeHistoryCount() const
 t CVRPathRegistry::GetRuntimeHistoryPath(unsigned int) const
 t CVRPathRegistry::GetSteamPath()
 t CVRPathRegistry::GetSteamPath() [clone .cold]
 t CVRPathRegistry::GetVRConfigPathFromSteamOrOS()
 t CVRPathRegistry::GetVRConfigPathFromSteamOrOS() [clone .cold]
 t CVRPathRegistry::GetVRLogPathFromSteamOrOS()
 t CVRPathRegistry::GetVRLogPathFromSteamOrOS() [clone .cold]
 t CVRPathRegistry::GetVRRuntimePathFromExecutable(char const*)
 t CVRPathRegistry::GetVRRuntimePathFromExecutable(char const*) [clone .cold]
 t CVRPathRegistry::RemoveExternalDriver(char const*)
 t CVRPathRegistry::SetConfigPath(char const*)
 t CVRPathRegistry::SetConfigPath(char const*) [clone .cold]
 t CVRPathRegistry::SetLogPath(char const*)
 t CVRPathRegistry::SetLogPath(char const*) [clone .cold]
 t CVRPathRegistry::SetRuntimePath(char const*)
 t CVRPathRegistry::SetRuntimePath(char const*) [clone .cold]
 t CVRPathRegistry_Public::BLoadFromFile(std::string*)
 t CVRPathRegistry_Public::BLoadFromFile(std::string*) [clone .cold]
 t CVRPathRegistry_Public::BSaveToFile() const
 t CVRPathRegistry_Public::BSaveToFile() const [clone .cold]
 t CVRPathRegistry_Public::CVRPathRegistry_Public()
 t CVRPathRegistry_Public::GetConfigPath() const
 t CVRPathRegistry_Public::GetLogPath() const
 t CVRPathRegistry_Public::GetOpenVRConfigPath()
 t CVRPathRegistry_Public::GetOpenVRConfigPath() [clone .cold]
 t CVRPathRegistry_Public::GetPaths(std::string*, std::string*, std::string*, char const*, char const*, std::vector<std::string, std::allocator<std::string> >*)
 t CVRPathRegistry_Public::GetPaths(std::string*, std::string*, std::string*, char const*, char const*, std::vector<std::string, std::allocator<std::string> >*) [clone .cold]
 t CVRPathRegistry_Public::GetRuntimePath() const
 t CVRPathRegistry_Public::GetSteamAppId()
 t CVRPathRegistry_Public::GetVRPathRegistryFilename()
 t CVRPathRegistry_Public::GetVRPathRegistryFilename() [clone .cold]
 t CVRPathRegistry_Public::InitSteamAppId()
 t CVRPathRegistry_Public::InitSteamAppId() [clone .cold]
 t CVRPathRegistry_Public::IsChildOfVRServer()
 t CVRPathRegistry_Public::IsSteamVRMain()
 t CVRPathRegistry_Public::ToJsonString(std::string&)
 t CVRPathRegistry_Public::ToJsonString(std::string&) [clone .cold]
 t CVRPathRegistry_Public::~CVRPathRegistry_Public()
 t CVRRenderModels_001::FreeRenderModel(RenderModel001_t*)
 t CVRRenderModels_001::GetComponentButtonMask(char const*, char const*)
 t CVRRenderModels_001::GetComponentCount(char const*)
 t CVRRenderModels_001::GetComponentName(char const*, unsigned int, char*, unsigned int)
 t CVRRenderModels_001::GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t CVRRenderModels_001::GetComponentState(char const*, char const*, vr::VRControllerState001_t, vr::RenderModel_ComponentState_t*)
 t CVRRenderModels_001::GetRenderModelCount()
 t CVRRenderModels_001::GetRenderModelName(unsigned int, char*, unsigned int)
 t CVRRenderModels_001::LoadRenderModel(char const*, RenderModel001_t*)
 t CVRRenderModels_002::FreeRenderModel(vr::RenderModel_t*)
 t CVRRenderModels_002::FreeTexture(vr::RenderModel_TextureMap_t*)
 t CVRRenderModels_002::GetComponentButtonMask(char const*, char const*)
 t CVRRenderModels_002::GetComponentCount(char const*)
 t CVRRenderModels_002::GetComponentName(char const*, unsigned int, char*, unsigned int)
 t CVRRenderModels_002::GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t CVRRenderModels_002::GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ComponentState_t*)
 t CVRRenderModels_002::GetRenderModelCount()
 t CVRRenderModels_002::GetRenderModelName(unsigned int, char*, unsigned int)
 t CVRRenderModels_002::LoadRenderModel(char const*, vr::RenderModel_t**)
 t CVRRenderModels_002::LoadTexture(int, vr::RenderModel_TextureMap_t**)
 t CVRRenderModels_002::RenderModelHasComponent(char const*, char const*)
 t CVRRenderModels_003::FreeRenderModel(vr::RenderModel_t*)
 t CVRRenderModels_003::FreeTexture(vr::RenderModel_TextureMap_t*)
 t CVRRenderModels_003::FreeTextureD3D11(void*)
 t CVRRenderModels_003::GetComponentButtonMask(char const*, char const*)
 t CVRRenderModels_003::GetComponentCount(char const*)
 t CVRRenderModels_003::GetComponentName(char const*, unsigned int, char*, unsigned int)
 t CVRRenderModels_003::GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t CVRRenderModels_003::GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ComponentState_t*)
 t CVRRenderModels_003::GetRenderModelCount()
 t CVRRenderModels_003::GetRenderModelName(unsigned int, char*, unsigned int)
 t CVRRenderModels_003::LoadRenderModel_Async(char const*, vr::RenderModel_t**)
 t CVRRenderModels_003::LoadTextureD3D11_Async(int, void*, void**)
 t CVRRenderModels_003::LoadTexture_Async(int, vr::RenderModel_TextureMap_t**)
 t CVRRenderModels_003::RenderModelHasComponent(char const*, char const*)
 t CVRRenderModels_004::FreeRenderModel(vr::RenderModel_t*)
 t CVRRenderModels_004::FreeTexture(vr::RenderModel_TextureMap_t*)
 t CVRRenderModels_004::FreeTextureD3D11(void*)
 t CVRRenderModels_004::GetComponentButtonMask(char const*, char const*)
 t CVRRenderModels_004::GetComponentCount(char const*)
 t CVRRenderModels_004::GetComponentName(char const*, unsigned int, char*, unsigned int)
 t CVRRenderModels_004::GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t CVRRenderModels_004::GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t CVRRenderModels_004::GetRenderModelCount()
 t CVRRenderModels_004::GetRenderModelName(unsigned int, char*, unsigned int)
 t CVRRenderModels_004::LoadIntoTextureD3D11_Async(int, void*)
 t CVRRenderModels_004::LoadRenderModel_Async(char const*, vr::RenderModel_t**)
 t CVRRenderModels_004::LoadTextureD3D11_Async(int, void*, void**)
 t CVRRenderModels_004::LoadTexture_Async(int, vr::RenderModel_TextureMap_t**)
 t CVRRenderModels_004::RenderModelHasComponent(char const*, char const*)
 t CVRRenderModels_005::FreeRenderModel(vr::RenderModel_t*)
 t CVRRenderModels_005::FreeTexture(vr::RenderModel_TextureMap_t*)
 t CVRRenderModels_005::FreeTextureD3D11(void*)
 t CVRRenderModels_005::GetComponentButtonMask(char const*, char const*)
 t CVRRenderModels_005::GetComponentCount(char const*)
 t CVRRenderModels_005::GetComponentName(char const*, unsigned int, char*, unsigned int)
 t CVRRenderModels_005::GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t CVRRenderModels_005::GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t CVRRenderModels_005::GetRenderModelCount()
 t CVRRenderModels_005::GetRenderModelErrorNameFromEnum(vr::EVRRenderModelError)
 t CVRRenderModels_005::GetRenderModelName(unsigned int, char*, unsigned int)
 t CVRRenderModels_005::GetRenderModelOriginalPath(char const*, char*, unsigned int, vr::EVRRenderModelError*)
 t CVRRenderModels_005::GetRenderModelThumbnailURL(char const*, char*, unsigned int, vr::EVRRenderModelError*)
 t CVRRenderModels_005::LoadIntoTextureD3D11_Async(int, void*)
 t CVRRenderModels_005::LoadRenderModel_Async(char const*, vr::RenderModel_t**)
 t CVRRenderModels_005::LoadTextureD3D11_Async(int, void*, void**)
 t CVRRenderModels_005::LoadTexture_Async(int, vr::RenderModel_TextureMap_t**)
 t CVRRenderModels_005::RenderModelHasComponent(char const*, char const*)
 t CVRReplyMailbox::Open(std::string const&)
 t CVRReplyMailbox::SendMailboxMessageAndWaitForResponse(std::string const&, Json::Value&&, std::string const&, Json::Value*)
 t CVRReplyMailbox::SendMailboxMessageAndWaitForResponse(std::string const&, Json::Value&&, std::string const&, Json::Value*) [clone .cold]
 t CVRReplyMailbox::~CVRReplyMailbox()
 t CVRResourcesLatest::AddNamedResourcePath(std::string const&, std::string const&)
 t CVRResourcesLatest::AddNamedResourcePath(std::string const&, std::string const&) [clone .cold]
 t CVRResourcesLatest::BInit(std::string const&)
 t CVRResourcesLatest::BInit(std::string const&) [clone .cold]
 t CVRResourcesLatest::Cleanup()
 t CVRResourcesLatest::GetResourceFullPath(char const*, char const*, char*, unsigned int)
 t CVRResourcesLatest::GetResourceFullPath(char const*, char const*, char*, unsigned int) [clone .cold]
 t CVRResourcesLatest::GetResourceFullPath(std::string const&, std::string const&)
 t CVRResourcesLatest::GetResourceFullPath(std::string const&, std::string const&) [clone .cold]
 t CVRResourcesLatest::GetResourceMapping(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >*)
 t CVRResourcesLatest::GetResourceMapping(std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >*) [clone .cold]
 t CVRResourcesLatest::GetResourceNames(std::vector<std::string, std::allocator<std::string> >*, std::string const&)
 t CVRResourcesLatest::GetResourceNames(std::vector<std::string, std::allocator<std::string> >*, std::string const&) [clone .cold]
 t CVRResourcesLatest::LoadSharedResource(char const*, char*, unsigned int)
 t CVRResourcesLatest::LoadSharedResource(char const*, char*, unsigned int) [clone .cold]
 t CVRResourcesLatest::~CVRResourcesLatest()
 t CVRScreenshotsLatest::GetScreenshotPropertyFilename(unsigned int, vr::EVRScreenshotPropertyFilenames, char*, unsigned int, vr::EVRScreenshotError*)
 t CVRScreenshotsLatest::GetScreenshotPropertyFilename(unsigned int, vr::EVRScreenshotPropertyFilenames, char*, unsigned int, vr::EVRScreenshotError*) [clone .cold]
 t CVRScreenshotsLatest::GetScreenshotPropertyType(unsigned int, vr::EVRScreenshotError*)
 t CVRScreenshotsLatest::GetScreenshotPropertyType(unsigned int, vr::EVRScreenshotError*) [clone .cold]
 t CVRScreenshotsLatest::HookScreenshot(vr::EVRScreenshotType const*, int)
 t CVRScreenshotsLatest::HookScreenshot(vr::EVRScreenshotType const*, int) [clone .cold]
 t CVRScreenshotsLatest::Init(CVRSystemLatest*, vr::IVRCompositorSystemInternal*, CVRCompositorClient*)
 t CVRScreenshotsLatest::Init(CVRSystemLatest*, vr::IVRCompositorSystemInternal*, CVRCompositorClient*) [clone .cold]
 t CVRScreenshotsLatest::RequestScreenshot(unsigned int*, vr::EVRScreenshotType, char const*, char const*)
 t CVRScreenshotsLatest::RequestScreenshot(unsigned int*, vr::EVRScreenshotType, char const*, char const*) [clone .cold]
 t CVRScreenshotsLatest::SubmitScreenshot(unsigned int, vr::EVRScreenshotType, char const*, char const*)
 t CVRScreenshotsLatest::SubmitScreenshot(unsigned int, vr::EVRScreenshotType, char const*, char const*) [clone .cold]
 t CVRScreenshotsLatest::TakeStereoScreenshot(unsigned int*, char const*, char const*)
 t CVRScreenshotsLatest::TakeStereoScreenshot(unsigned int*, char const*, char const*) [clone .cold]
 t CVRScreenshotsLatest::UpdateScreenshotProgress(unsigned int, float)
 t CVRScreenshotsLatest::UpdateScreenshotProgress(unsigned int, float) [clone .cold]
 t CVRScreenshots_001::GetScreenshotPropertyFilename(unsigned int, vr::EVRScreenshotPropertyFilenames, char*, unsigned int, vr::EVRScreenshotError*)
 t CVRScreenshots_001::GetScreenshotPropertyType(unsigned int, vr::EVRScreenshotError*)
 t CVRScreenshots_001::HookScreenshot(vr::EVRScreenshotType const*, int)
 t CVRScreenshots_001::RequestScreenshot(unsigned int*, vr::EVRScreenshotType, char const*, char const*)
 t CVRScreenshots_001::SubmitScreenshot(unsigned int, vr::EVRScreenshotType, char const*, char const*)
 t CVRScreenshots_001::TakeStereoScreenshot(unsigned int*, char const*, char const*)
 t CVRSettings_001::GetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t CVRSettings_001::GetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t CVRSettings_001::GetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t CVRSettings_001::GetSettingsErrorNameFromEnum(vr::EVRSettingsError)
 t CVRSettings_001::GetString(char const*, char const*, char*, unsigned int, char const*, vr::EVRSettingsError*)
 t CVRSettings_001::RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*)
 t CVRSettings_001::RemoveSection(char const*, vr::EVRSettingsError*)
 t CVRSettings_001::SetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t CVRSettings_001::SetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t CVRSettings_001::SetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t CVRSettings_001::SetString(char const*, char const*, char const*, vr::EVRSettingsError*)
 t CVRSettings_001::Sync(bool, vr::EVRSettingsError*)
 t CVRSettings_002::GetBool(char const*, char const*, vr::EVRSettingsError*)
 t CVRSettings_002::GetFloat(char const*, char const*, vr::EVRSettingsError*)
 t CVRSettings_002::GetInt32(char const*, char const*, vr::EVRSettingsError*)
 t CVRSettings_002::GetSettingsErrorNameFromEnum(vr::EVRSettingsError)
 t CVRSettings_002::GetString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*)
 t CVRSettings_002::RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*)
 t CVRSettings_002::RemoveSection(char const*, vr::EVRSettingsError*)
 t CVRSettings_002::SetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t CVRSettings_002::SetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t CVRSettings_002::SetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t CVRSettings_002::SetString(char const*, char const*, char const*, vr::EVRSettingsError*)
 t CVRSettings_002::Sync(bool, vr::EVRSettingsError*)
 t CVRSharedGLTexture::CVRSharedGLTexture(CVRCompositorSharedTextures*, unsigned int, unsigned int, unsigned int, unsigned int, CVRCompositorSharedTextures::VulkanDeviceData_t*, IVRRenderer*, bool)
 t CVRSharedGLTexture::CVRSharedGLTexture(CVRCompositorSharedTextures*, unsigned int, unsigned int, unsigned int, unsigned int, CVRCompositorSharedTextures::VulkanDeviceData_t*, IVRRenderer*, bool) [clone .cold]
 t CVRSharedGLTexture::CreateSemaphore()
 t CVRSharedGLTexture::GetHandle()
 t CVRSharedGLTexture::GetSemaphore()
 t CVRSharedGLTexture::GetSize(unsigned int&, unsigned int&)
 t CVRSharedGLTexture::Init()
 t CVRSharedGLTexture::IsReleaseable() const
 t CVRSharedGLTexture::IsSemaphoreInUse(CVRSharedGLTexture::VulkanInteropSemaphore_t*)
 t CVRSharedGLTexture::Update(void*, vr::VRTextureBounds_t*, unsigned int, unsigned int, CVRCompositorSharedTextures::CommandBuffer_t*)
 t CVRSharedGLTexture::~CVRSharedGLTexture()
 t CVRSharedGLTexture::~CVRSharedGLTexture() [clone .part.0]
 t CVRSharedState::BInit(CVRSharedState::SharedStatePermissions, unsigned int, std::string const&, std::string const&, bool)
 t CVRSharedState::BOpen(CVRSharedState::SharedStatePermissions, unsigned int, std::string const&, IPC::CIPCHandle const (&) [2], bool)
 t CVRSharedState::Cleanup()
 t CVRSharedState::GetSharedStatePointer()
 t CVRSharedState::InitForExport(IPC::CIPCHandle (&) [2], unsigned int)
 t CVRSharedState::IsValid() const
 t CVRSharedState::LockSharedMem()
 t CVRSharedState::UnlockSharedMem()
 t CVRSharedStatePtrBase::CVRSharedStatePtrBase(CVRSharedState const*)
 t CVRSharedStatePtrBase::CVRSharedStatePtrBase(CVRSharedState*)
 t CVRSharedStatePtrBase::DoLock()
 t CVRSharedStatePtrBase::GetSharedStatePointer()
 t CVRSharedStatePtrBase::~CVRSharedStatePtrBase()
 t CVRSharedVulkanTexture::CVRSharedVulkanTexture(CVRCompositorSharedTextures*, CVRCompositorSharedTextures::VulkanDeviceData_t*, vr::VRVulkanTextureData_t*, IVRRenderer*, unsigned int, unsigned int, bool)
 t CVRSharedVulkanTexture::GetHandle()
 t CVRSharedVulkanTexture::GetSize(unsigned int&, unsigned int&)
 t CVRSharedVulkanTexture::Init()
 t CVRSharedVulkanTexture::Update(void*, vr::VRTextureBounds_t*, unsigned int, unsigned int, CVRCompositorSharedTextures::CommandBuffer_t*)
 t CVRSharedVulkanTexture::~CVRSharedVulkanTexture()
 t CVRSpatialAnchorsLatest::AllocateSpatialAnchorHandle()
 t CVRSpatialAnchorsLatest::AllocateSpatialAnchorHandle() [clone .cold]
 t CVRSpatialAnchorsLatest::BInit(CVRSystemLatest*, CVRClient*, IVRClientInternal*)
 t CVRSpatialAnchorsLatest::BInit(CVRSystemLatest*, CVRClient*, IVRClientInternal*) [clone .cold]
 t CVRSpatialAnchorsLatest::CVRSpatialAnchorsLatest()
 t CVRSpatialAnchorsLatest::CVRSpatialAnchorsLatest() [clone .cold]
 t CVRSpatialAnchorsLatest::CreateSpatialAnchorFromDescriptor(char const*, unsigned int*)
 t CVRSpatialAnchorsLatest::CreateSpatialAnchorFromDescriptor(char const*, unsigned int*) [clone .cold]
 t CVRSpatialAnchorsLatest::CreateSpatialAnchorFromPose(unsigned int, vr::ETrackingUniverseOrigin, vr::SpatialAnchorPose_t*, unsigned int*)
 t CVRSpatialAnchorsLatest::CreateSpatialAnchorFromPose(unsigned int, vr::ETrackingUniverseOrigin, vr::SpatialAnchorPose_t*, unsigned int*) [clone .cold]
 t CVRSpatialAnchorsLatest::GetChaperoneOriginMatrix(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t&)
 t CVRSpatialAnchorsLatest::GetCurrentUniverseId(bool)
 t CVRSpatialAnchorsLatest::GetSpatialAnchorDescriptor(unsigned int, char*, unsigned int*)
 t CVRSpatialAnchorsLatest::GetSpatialAnchorPose(unsigned int, vr::ETrackingUniverseOrigin, vr::SpatialAnchorPose_t*)
 t CVRSpatialAnchorsLatest::GetSpatialAnchorPose(unsigned int, vr::ETrackingUniverseOrigin, vr::SpatialAnchorPose_t*) [clone .cold]
 t CVRSpatialAnchorsLatest::~CVRSpatialAnchorsLatest()
 t CVRSpatialAnchorsPropertyHelpers::GetSpatialAnchorDescriptor(unsigned int, char*, unsigned int*)
 t CVRSpatialAnchorsPropertyHelpers::GetSpatialAnchorPose(unsigned int, VRSpatialAnchorProperty_Pose_t*)
 t CVRSpatialAnchorsPropertyHelpers::SetDescriptorNotYetAvailable(unsigned int)
 t CVRSpatialAnchorsPropertyHelpers::SetSpatialAnchorDescriptor(unsigned int, char const*)
 t CVRSpatialAnchorsPropertyHelpers::SetSpatialAnchorPose(unsigned int, VRSpatialAnchorProperty_Pose_t*)
 t CVRSteamPrivate_001::GameActionTaskChange(unsigned int, char const*, char const*, char const*)
 t CVRSteamPrivate_001::GetWebSharedSecret()
 t CVRSteamPrivate_001::MicrotxnFinished()
 t CVRSteamPrivate_001::OculusSDKAppStarted()
 t CVRSteamPrivate_001::QuitProcess(unsigned int)
 t CVRSteamPrivate_001::QuitSteamVR()
 t CVRSteamPrivate_002::GameActionTaskChange(unsigned int, char const*, char const*, char const*)
 t CVRSteamPrivate_002::GetWebSharedSecret()
 t CVRSteamPrivate_002::MicrotxnFinished()
 t CVRSteamPrivate_002::OculusSDKAppStarted()
 t CVRSteamPrivate_002::QuitProcess(unsigned int)
 t CVRSteamPrivate_002::QuitSteamVR()
 t CVRSteamPrivate_002::ShouldSetAsOpenXrRuntime()
 t CVRSystemLatest::AcknowledgeQuit_Exiting()
 t CVRSystemLatest::AcknowledgeQuit_Exiting() [clone .cold]
 t CVRSystemLatest::AddSystemBehaviorFlag(EVRInternalSystemBehaviorFlags)
 t CVRSystemLatest::AddSystemBehaviorFlag(EVRInternalSystemBehaviorFlags) [clone .cold]
 t CVRSystemLatest::ApplyApplicationSpecificPoseTransform(unsigned int, vr::TrackedDevicePose_t*, float)
 t CVRSystemLatest::ApplyApplicationSpecificPoseTransform(vr::TrackedDevicePose_t*, unsigned int, float)
 t CVRSystemLatest::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystemLatest::CVRSystemLatest(vr::IVRProperties*)
 t CVRSystemLatest::CVRSystemLatest(vr::IVRProperties*) [clone .cold]
 t CVRSystemLatest::ClearHiddenAreaCache()
 t CVRSystemLatest::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystemLatest::ComputeDistortion(vr::EVREye, vr::DistortionChannel_t, bool, unsigned int, vr::DistortionCoordinate_t const*, vr::DistortionCoordinate_t*)
 t CVRSystemLatest::GetAppContainerFilePaths(char*, unsigned int)
 t CVRSystemLatest::GetApplicationSpecificFovScale() const
 t CVRSystemLatest::GetApplicationSpecificFovScale() const [clone .cold]
 t CVRSystemLatest::GetApplicationSpecificScaling()
 t CVRSystemLatest::GetApplicationSpecificScaling() [clone .cold]
 t CVRSystemLatest::GetArrayTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, unsigned int, void*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystemLatest::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystemLatest::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystemLatest::GetChaperoneDataRefreshIndex() const
 t CVRSystemLatest::GetChaperoneDataRefreshIndex() const [clone .cold]
 t CVRSystemLatest::GetCompositorError()
 t CVRSystemLatest::GetCompositorError() [clone .cold]
 t CVRSystemLatest::GetCompositorProcessId()
 t CVRSystemLatest::GetCompositorProcessId() [clone .cold]
 t CVRSystemLatest::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystemLatest::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystemLatest::GetControllerRoleForTrackedDeviceIndex(unsigned int) [clone .cold]
 t CVRSystemLatest::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystemLatest::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystemLatest::GetControllerStateWithPoseInternal(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystemLatest::GetControllerStateWithPoseInternal(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*) [clone .cold]
 t CVRSystemLatest::GetD3D9AdapterIndex()
 t CVRSystemLatest::GetDXGIOutputInfo(int*)
 t CVRSystemLatest::GetDXGIOutputInfo(int*) [clone .cold]
 t CVRSystemLatest::GetDXGIOutputInfo(int*, int*)
 t CVRSystemLatest::GetDXGIOutputInfo(int*, int*) [clone .cold]
 t CVRSystemLatest::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystemLatest::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int, vr::IVRCompositorSystemInternal::PredictionFlags_t)
 t CVRSystemLatest::GetDeviceToAbsoluteTrackingPoseAtTime(vr::ETrackingUniverseOrigin, double, vr::TrackedDevicePose_t*, unsigned int, vr::IVRCompositorSystemInternal::PredictionFlags_t, bool)
 t CVRSystemLatest::GetDeviceToAbsoluteTrackingPoseAtTime(vr::ETrackingUniverseOrigin, double, vr::TrackedDevicePose_t*, unsigned int, vr::IVRCompositorSystemInternal::PredictionFlags_t, bool) [clone .cold]
 t CVRSystemLatest::GetEdidVendorID(int*)
 t CVRSystemLatest::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystemLatest::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystemLatest::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*) [clone .cold]
 t CVRSystemLatest::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystemLatest::GetEyeToHeadTransform(vr::EVREye) [clone .cold]
 t CVRSystemLatest::GetEyeToHeadTransformCompositorResidual(vr::EVREye)
 t CVRSystemLatest::GetEyeToHeadTransformCompositorResidual(vr::EVREye) [clone .cold]
 t CVRSystemLatest::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystemLatest::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystemLatest::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType) [clone .cold]
 t CVRSystemLatest::GetHoverTargetOverlay()
 t CVRSystemLatest::GetHoverTargetOverlay() [clone .cold]
 t CVRSystemLatest::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystemLatest::GetLastQueriedApplicationProjectionMatrix(vr::EVREye)
 t CVRSystemLatest::GetMCImage(unsigned int*, unsigned int*, unsigned int*, void*, unsigned int)
 t CVRSystemLatest::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystemLatest::GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t CVRSystemLatest::GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*) [clone .cold]
 t CVRSystemLatest::GetPoseAtTime(vr::ETrackingUniverseOrigin, float, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystemLatest::GetPredictedPose(vr::ETrackingUniverseOrigin, float, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystemLatest::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystemLatest::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystemLatest::GetProjectionRawWithScale(vr::EVREye, float*, float*, float*, float*, float)
 t CVRSystemLatest::GetProjectionRawWithScale(vr::EVREye, float*, float*, float*, float*, float) [clone .cold]
 t CVRSystemLatest::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystemLatest::GetRawProjectionMatrix(vr::EVREye, float, float)
 t CVRSystemLatest::GetRawProjectionMatrix(vr::EVREye, float, float) [clone .cold]
 t CVRSystemLatest::GetRawRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystemLatest::GetRawRecommendedRenderTargetSize(unsigned int*, unsigned int*) [clone .cold]
 t CVRSystemLatest::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystemLatest::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystemLatest::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*) [clone .cold]
 t CVRSystemLatest::GetRemoteFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t CVRSystemLatest::GetRemoteFrameTimings(vr::Compositor_FrameTiming*, unsigned int) [clone .cold]
 t CVRSystemLatest::GetRuntimeVersion()
 t CVRSystemLatest::GetRuntimeVersion() [clone .cold]
 t CVRSystemLatest::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystemLatest::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystemLatest::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int) [clone .cold]
 t CVRSystemLatest::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystemLatest::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystemLatest::GetTimeSinceLastVsync(float*, unsigned long*) [clone .cold]
 t CVRSystemLatest::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystemLatest::GetTrackedDeviceClass(unsigned int)
 t CVRSystemLatest::GetTrackedDeviceClassUnmodified(unsigned int)
 t CVRSystemLatest::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystemLatest::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystemLatest::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystemLatest::GetWindowBounds(int*, int*, unsigned int*, unsigned int*) [clone .cold]
 t CVRSystemLatest::GetZeroPoseFromDevicePose(VRTrackingState_Pose_t const&, vr::HmdMatrix34_t*) const
 t CVRSystemLatest::GetZeroPoseFromDevicePose(VRTrackingState_Pose_t const&, vr::HmdMatrix34_t*) const [clone .part.0]
 t CVRSystemLatest::HasRemoteFrameTiming()
 t CVRSystemLatest::HasSystemBehaviorFlag(EVRInternalSystemBehaviorFlags)
 t CVRSystemLatest::HasSystemBehaviorFlag(EVRInternalSystemBehaviorFlags) [clone .cold]
 t CVRSystemLatest::IncrementChaperoneDataRefreshIndex()
 t CVRSystemLatest::IncrementChaperoneDataRefreshIndex() [clone .cold]
 t CVRSystemLatest::Init(vr::EVRApplicationType, CVRClient*, IVRClientInternal*, CRenderModelManager*, vr::IVRControlPanel*, vr::CVRApplicationsLatest*)
 t CVRSystemLatest::Init(vr::EVRApplicationType, CVRClient*, IVRClientInternal*, CRenderModelManager*, vr::IVRControlPanel*, vr::CVRApplicationsLatest*) [clone .cold]
 t CVRSystemLatest::IsDisplayOnDesktop()
 t CVRSystemLatest::IsDisplayOnDesktop() [clone .cold]
 t CVRSystemLatest::IsInputAvailable()
 t CVRSystemLatest::IsSteamVRDrawingControllers()
 t CVRSystemLatest::IsSteamVRDrawingControllers() [clone .cold]
 t CVRSystemLatest::IsTrackedDeviceConnected(unsigned int)
 t CVRSystemLatest::IsTrackedDeviceValid(unsigned int)
 t CVRSystemLatest::PerformFirmwareUpdate(unsigned int)
 t CVRSystemLatest::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystemLatest::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystemLatest::PollNextEventWithPoseInternal(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned long)
 t CVRSystemLatest::PollNextEventWithPoseInternal(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned long) [clone .cold]
 t CVRSystemLatest::PollNextEventWithPoseWrapper(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned long)
 t CVRSystemLatest::PollNextEventWithPoseWrapper(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned long) [clone .cold]
 t CVRSystemLatest::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t CVRSystemLatest::PostDriverEvent(vr::VREvent_t const&, unsigned int)
 t CVRSystemLatest::PostGlobalEvent(vr::VREvent_t const&, unsigned int)
 t CVRSystemLatest::PostLocalEvent(vr::VREvent_t const&)
 t CVRSystemLatest::PostLocalEvent(vr::VREvent_t const&) [clone .cold]
 t CVRSystemLatest::PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t CVRSystemLatest::PostVsyncEvent(float, unsigned long)
 t CVRSystemLatest::PostVsyncEvent(float, unsigned long) [clone .cold]
 t CVRSystemLatest::PredictRawPose(vr::HmdMatrix34_t const&, bool, double, VRTrackingState_DeviceInfo_t const&, VRTrackingState_Pose_t const&, vr::TrackedDevicePose_t*)
 t CVRSystemLatest::PushEventOntoQueue(VRSharedEvent_t const&)
 t CVRSystemLatest::PushEventOntoQueue(VRSharedEvent_t const&) [clone .cold]
 t CVRSystemLatest::PushOverlayEvent(VRSharedEvent_t, unsigned long)
 t CVRSystemLatest::RegisterInterface(char const*, void*)
 t CVRSystemLatest::RemoveSystemBehaviorFlag(EVRInternalSystemBehaviorFlags)
 t CVRSystemLatest::RemoveSystemBehaviorFlag(EVRInternalSystemBehaviorFlags) [clone .cold]
 t CVRSystemLatest::ReprojectVertices(vr::HmdMatrix44_t const&, vr::HmdMatrix44_t const&, unsigned int, vr::HmdVector2_t const*, vr::HmdVector2_t*)
 t CVRSystemLatest::ScaleHiddenAreaMesh(vr::EVREye, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType, float)
 t CVRSystemLatest::ScaleHiddenAreaMesh(vr::EVREye, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType, float) [clone .part.0]
 t CVRSystemLatest::SetCompositorError(vr::EVRInitError)
 t CVRSystemLatest::SetCompositorError(vr::EVRInitError) [clone .cold]
 t CVRSystemLatest::SetDisplayVisibility(bool)
 t CVRSystemLatest::SetOutputDevice(unsigned long)
 t CVRSystemLatest::SetOutputDevice(unsigned long) [clone .cold]
 t CVRSystemLatest::ShouldApplicationPause()
 t CVRSystemLatest::ShouldApplicationPause() [clone .cold]
 t CVRSystemLatest::ShouldApplicationReduceRenderingWork()
 t CVRSystemLatest::ShouldBlockThisEventForThisProcess(vr::VREvent_t const&, unsigned long, unsigned long, unsigned int, unsigned int)
 t CVRSystemLatest::ShouldBlockThisEventForThisProcess(vr::VREvent_t const&, unsigned long, unsigned long, unsigned int, unsigned int) [clone .cold]
 t CVRSystemLatest::ThisProcessIsCompositor()
 t CVRSystemLatest::ThisProcessIsCompositor() [clone .cold]
 t CVRSystemLatest::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystemLatest::TriggerHapticPulse(unsigned int, unsigned int, unsigned short) [clone .cold]
 t CVRSystemLatest::~CVRSystemLatest()
 t CVRSystem_001::AttachToWindow(void*)
 t CVRSystem_001::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_001::FreeRenderModel(RenderModel001_t*)
 t CVRSystem_001::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_001::GetD3D9AdapterIndex()
 t CVRSystem_001::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_001::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_001::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_001::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_001::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_001::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_001::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_001::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_001::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_001::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_001::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_001::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_001::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_001::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_001::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_001::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_001::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_001::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_001::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_001::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_001::LoadRenderModel(char const*, RenderModel001_t*)
 t CVRSystem_001::PollNextEvent(VREvent001_t*)
 t CVRSystem_001::ResetSeatedZeroPose()
 t CVRSystem_002::AttachToWindow(void*)
 t CVRSystem_002::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_002::FreeRenderModel(RenderModel001_t*)
 t CVRSystem_002::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_002::GetD3D9AdapterIndex()
 t CVRSystem_002::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_002::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_002::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_002::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_002::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_002::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_002::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_002::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_002::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_002::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_002::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_002::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_002::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_002::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_002::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_002::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_002::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_002::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_002::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_002::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_002::LoadRenderModel(char const*, RenderModel001_t*)
 t CVRSystem_002::PollNextEvent(VREvent001_t*)
 t CVRSystem_002::ResetSeatedZeroPose()
 t CVRSystem_003::AttachToWindow(void*)
 t CVRSystem_003::CaptureInputFocus()
 t CVRSystem_003::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_003::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_003::FreeRenderModel(RenderModel001_t*)
 t CVRSystem_003::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_003::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_003::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_003::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_003::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_003::GetD3D9AdapterIndex()
 t CVRSystem_003::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_003::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_003::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_003::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_003::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_003::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_003::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_003::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_003::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_003::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_003::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_003::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_003::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_003::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_003::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_003::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_003::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_003::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_003::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_003::HandleControllerOverlayInteractionAsMouse(vr::Compositor_OverlaySettings const&, vr::HmdVector2_t, vr::HmdVector2_t, unsigned int, vr::EVRControllerEventOutputType)
 t CVRSystem_003::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_003::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_003::LoadRenderModel(char const*, RenderModel001_t*)
 t CVRSystem_003::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_003::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_003::ReleaseInputFocus()
 t CVRSystem_003::ResetSeatedZeroPose()
 t CVRSystem_003::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_004::AttachToWindow(void*)
 t CVRSystem_004::CaptureInputFocus()
 t CVRSystem_004::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_004::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_004::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_004::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_004::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_004::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_004::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_004::GetD3D9AdapterIndex()
 t CVRSystem_004::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_004::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_004::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_004::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_004::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_004::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_004::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_004::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_004::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_004::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_004::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_004::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_004::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_004::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_004::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_004::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_004::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_004::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_004::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_004::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_004::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_004::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_004::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_004::ReleaseInputFocus()
 t CVRSystem_004::ResetSeatedZeroPose()
 t CVRSystem_004::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_005::AttachToWindow(void*)
 t CVRSystem_005::CaptureInputFocus()
 t CVRSystem_005::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_005::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_005::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_005::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_005::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_005::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_005::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_005::GetD3D9AdapterIndex()
 t CVRSystem_005::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_005::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_005::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_005::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_005::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_005::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_005::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_005::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_005::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_005::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_005::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_005::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_005::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_005::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_005::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_005::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_005::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_005::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_005::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_005::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_005::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_005::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_005::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_005::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_005::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_005::ReleaseInputFocus()
 t CVRSystem_005::ResetSeatedZeroPose()
 t CVRSystem_005::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_006::AttachToWindow(void*)
 t CVRSystem_006::CaptureInputFocus()
 t CVRSystem_006::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_006::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_006::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_006::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_006::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_006::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_006::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_006::GetD3D9AdapterIndex()
 t CVRSystem_006::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_006::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_006::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_006::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_006::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_006::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_006::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_006::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_006::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_006::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_006::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_006::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_006::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_006::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_006::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_006::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_006::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_006::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_006::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_006::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_006::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_006::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_006::IsDisplayOnDesktop()
 t CVRSystem_006::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_006::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_006::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_006::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_006::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_006::ReleaseInputFocus()
 t CVRSystem_006::ResetSeatedZeroPose()
 t CVRSystem_006::SetDisplayVisibility(bool)
 t CVRSystem_006::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_007::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const&, vr::HmdMatrix34_t const&)
 t CVRSystem_007::AttachToWindow(void*)
 t CVRSystem_007::CaptureInputFocus()
 t CVRSystem_007::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_007::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_007::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_007::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_007::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_007::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_007::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_007::GetD3D9AdapterIndex()
 t CVRSystem_007::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_007::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_007::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_007::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_007::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_007::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_007::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_007::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_007::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_007::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_007::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_007::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_007::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_007::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_007::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_007::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_007::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_007::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_007::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_007::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_007::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_007::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_007::IsDisplayOnDesktop()
 t CVRSystem_007::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_007::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_007::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_007::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_007::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_007::ReleaseInputFocus()
 t CVRSystem_007::ResetSeatedZeroPose()
 t CVRSystem_007::SetDisplayVisibility(bool)
 t CVRSystem_007::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_008::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_008::AttachToWindow(void*)
 t CVRSystem_008::CaptureInputFocus()
 t CVRSystem_008::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_008::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_008::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_008::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_008::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_008::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_008::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_008::GetD3D9AdapterIndex()
 t CVRSystem_008::GetDXGIOutputInfo(int*, int*)
 t CVRSystem_008::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_008::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_008::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t CVRSystem_008::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_008::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_008::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_008::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_008::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_008::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_008::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_008::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_008::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_008::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_008::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_008::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_008::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_008::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_008::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_008::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_008::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_008::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t CVRSystem_008::IsDisplayOnDesktop()
 t CVRSystem_008::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_008::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_008::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_008::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_008::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_008::ReleaseInputFocus()
 t CVRSystem_008::ResetSeatedZeroPose()
 t CVRSystem_008::SetDisplayVisibility(bool)
 t CVRSystem_008::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_009::AcknowledgeQuit_Exiting()
 t CVRSystem_009::AcknowledgeQuit_UserPrompt()
 t CVRSystem_009::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_009::CaptureInputFocus()
 t CVRSystem_009::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_009::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_009::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_009::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_009::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_009::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_009::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_009::GetD3D9AdapterIndex()
 t CVRSystem_009::GetDXGIOutputInfo(int*)
 t CVRSystem_009::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_009::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_009::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_009::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_009::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_009::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_009::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_009::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_009::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_009::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_009::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_009::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_009::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_009::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_009::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_009::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_009::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_009::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_009::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_009::IsDisplayOnDesktop()
 t CVRSystem_009::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_009::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_009::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_009::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_009::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_009::ReleaseInputFocus()
 t CVRSystem_009::ResetSeatedZeroPose()
 t CVRSystem_009::SetDisplayVisibility(bool)
 t CVRSystem_009::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_010::AcknowledgeQuit_Exiting()
 t CVRSystem_010::AcknowledgeQuit_UserPrompt()
 t CVRSystem_010::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_010::CaptureInputFocus()
 t CVRSystem_010::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_010::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_010::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_010::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_010::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_010::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_010::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_010::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_010::GetD3D9AdapterIndex()
 t CVRSystem_010::GetDXGIOutputInfo(int*)
 t CVRSystem_010::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_010::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_010::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_010::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_010::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_010::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_010::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_010::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_010::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_010::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_010::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_010::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_010::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_010::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_010::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_010::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_010::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_010::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_010::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_010::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_010::IsDisplayOnDesktop()
 t CVRSystem_010::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_010::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_010::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_010::PerformanceTestEnableCapture(bool)
 t CVRSystem_010::PerformanceTestReportFidelityLevelChange(int)
 t CVRSystem_010::PollNextEvent(vr::VREvent_t*)
 t CVRSystem_010::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_010::ReleaseInputFocus()
 t CVRSystem_010::ResetSeatedZeroPose()
 t CVRSystem_010::SetDisplayVisibility(bool)
 t CVRSystem_010::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_011::AcknowledgeQuit_Exiting()
 t CVRSystem_011::AcknowledgeQuit_UserPrompt()
 t CVRSystem_011::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_011::CaptureInputFocus()
 t CVRSystem_011::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_011::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_011::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_011::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_011::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_011::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_011::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_011::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_011::GetD3D9AdapterIndex()
 t CVRSystem_011::GetDXGIOutputInfo(int*)
 t CVRSystem_011::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_011::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_011::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_011::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_011::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_011::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_011::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_011::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_011::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_011::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_011::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_011::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_011::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_011::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_011::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_011::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_011::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_011::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_011::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_011::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_011::IsDisplayOnDesktop()
 t CVRSystem_011::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_011::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_011::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_011::PerformanceTestEnableCapture(bool)
 t CVRSystem_011::PerformanceTestReportFidelityLevelChange(int)
 t CVRSystem_011::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_011::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_011::ReleaseInputFocus()
 t CVRSystem_011::ResetSeatedZeroPose()
 t CVRSystem_011::SetDisplayVisibility(bool)
 t CVRSystem_011::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_012::AcknowledgeQuit_Exiting()
 t CVRSystem_012::AcknowledgeQuit_UserPrompt()
 t CVRSystem_012::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_012::CaptureInputFocus()
 t CVRSystem_012::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_012::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_012::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_012::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_012::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_012::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_012::GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t CVRSystem_012::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t CVRSystem_012::GetD3D9AdapterIndex()
 t CVRSystem_012::GetDXGIOutputInfo(int*)
 t CVRSystem_012::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_012::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_012::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_012::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_012::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_012::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_012::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_012::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_012::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_012::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_012::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_012::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_012::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_012::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_012::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_012::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_012::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_012::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_012::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_012::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_012::IsDisplayOnDesktop()
 t CVRSystem_012::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_012::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_012::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_012::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_012::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_012::ReleaseInputFocus()
 t CVRSystem_012::ResetSeatedZeroPose()
 t CVRSystem_012::SetDisplayVisibility(bool)
 t CVRSystem_012::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_013::AcknowledgeQuit_Exiting()
 t CVRSystem_013::AcknowledgeQuit_UserPrompt()
 t CVRSystem_013::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_013::CaptureInputFocus()
 t CVRSystem_013::ComputeDistortion(vr::EVREye, float, float)
 t CVRSystem_013::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_013::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_013::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_013::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_013::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_013::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_013::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_013::GetD3D9AdapterIndex()
 t CVRSystem_013::GetDXGIOutputInfo(int*)
 t CVRSystem_013::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_013::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_013::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_013::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_013::GetHiddenAreaMesh(vr::EVREye)
 t CVRSystem_013::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_013::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_013::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_013::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_013::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_013::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_013::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_013::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_013::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_013::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_013::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_013::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_013::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_013::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_013::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_013::IsDisplayOnDesktop()
 t CVRSystem_013::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_013::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_013::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_013::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_013::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_013::ReleaseInputFocus()
 t CVRSystem_013::ResetSeatedZeroPose()
 t CVRSystem_013::SetDisplayVisibility(bool)
 t CVRSystem_013::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_014::AcknowledgeQuit_Exiting()
 t CVRSystem_014::AcknowledgeQuit_UserPrompt()
 t CVRSystem_014::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_014::CaptureInputFocus()
 t CVRSystem_014::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_014::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_014::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_014::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_014::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_014::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_014::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_014::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_014::GetD3D9AdapterIndex()
 t CVRSystem_014::GetDXGIOutputInfo(int*)
 t CVRSystem_014::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_014::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_014::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_014::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_014::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_014::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_014::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_014::GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t CVRSystem_014::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_014::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_014::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_014::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_014::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_014::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_014::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_014::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_014::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_014::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_014::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_014::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_014::IsDisplayOnDesktop()
 t CVRSystem_014::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_014::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_014::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_014::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_014::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_014::ReleaseInputFocus()
 t CVRSystem_014::ResetSeatedZeroPose()
 t CVRSystem_014::SetDisplayVisibility(bool)
 t CVRSystem_014::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_015::AcknowledgeQuit_Exiting()
 t CVRSystem_015::AcknowledgeQuit_UserPrompt()
 t CVRSystem_015::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_015::CaptureInputFocus()
 t CVRSystem_015::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_015::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_015::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_015::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_015::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_015::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_015::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_015::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_015::GetD3D9AdapterIndex()
 t CVRSystem_015::GetDXGIOutputInfo(int*)
 t CVRSystem_015::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_015::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_015::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_015::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_015::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_015::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_015::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_015::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystem_015::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_015::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_015::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_015::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_015::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_015::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_015::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_015::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_015::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_015::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_015::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_015::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_015::IsDisplayOnDesktop()
 t CVRSystem_015::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_015::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_015::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_015::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_015::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_015::ReleaseInputFocus()
 t CVRSystem_015::ResetSeatedZeroPose()
 t CVRSystem_015::SetDisplayVisibility(bool)
 t CVRSystem_015::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_016::AcknowledgeQuit_Exiting()
 t CVRSystem_016::AcknowledgeQuit_UserPrompt()
 t CVRSystem_016::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_016::CaptureInputFocus()
 t CVRSystem_016::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_016::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_016::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_016::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_016::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_016::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_016::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_016::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_016::GetD3D9AdapterIndex()
 t CVRSystem_016::GetDXGIOutputInfo(int*)
 t CVRSystem_016::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_016::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_016::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_016::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_016::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_016::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_016::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_016::GetOutputDevice(unsigned long*, vr::ETextureType)
 t CVRSystem_016::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystem_016::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_016::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_016::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_016::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_016::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_016::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_016::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_016::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_016::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_016::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_016::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_016::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_016::IsDisplayOnDesktop()
 t CVRSystem_016::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_016::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_016::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_016::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_016::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_016::ReleaseInputFocus()
 t CVRSystem_016::ResetSeatedZeroPose()
 t CVRSystem_016::SetDisplayVisibility(bool)
 t CVRSystem_016::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_017::AcknowledgeQuit_Exiting()
 t CVRSystem_017::AcknowledgeQuit_UserPrompt()
 t CVRSystem_017::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_017::CaptureInputFocus()
 t CVRSystem_017::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_017::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_017::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_017::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_017::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_017::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_017::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_017::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_017::GetD3D9AdapterIndex()
 t CVRSystem_017::GetDXGIOutputInfo(int*)
 t CVRSystem_017::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_017::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_017::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_017::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_017::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_017::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_017::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_017::GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t CVRSystem_017::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystem_017::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_017::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_017::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_017::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_017::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_017::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_017::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_017::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_017::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_017::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_017::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_017::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_017::IsDisplayOnDesktop()
 t CVRSystem_017::IsInputFocusCapturedByAnotherProcess()
 t CVRSystem_017::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_017::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_017::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_017::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_017::ReleaseInputFocus()
 t CVRSystem_017::ResetSeatedZeroPose()
 t CVRSystem_017::SetDisplayVisibility(bool)
 t CVRSystem_017::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_018::AcknowledgeQuit_Exiting()
 t CVRSystem_018::AcknowledgeQuit_UserPrompt()
 t CVRSystem_018::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_018::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_018::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_018::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_018::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_018::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_018::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_018::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_018::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_018::GetD3D9AdapterIndex()
 t CVRSystem_018::GetDXGIOutputInfo(int*)
 t CVRSystem_018::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_018::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_018::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_018::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_018::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_018::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_018::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_018::GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t CVRSystem_018::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystem_018::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_018::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_018::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_018::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_018::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_018::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_018::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_018::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_018::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_018::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_018::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_018::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_018::IsDisplayOnDesktop()
 t CVRSystem_018::IsInputAvailable()
 t CVRSystem_018::IsSteamVRDrawingControllers()
 t CVRSystem_018::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_018::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_018::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_018::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_018::ResetSeatedZeroPose()
 t CVRSystem_018::SetDisplayVisibility(bool)
 t CVRSystem_018::ShouldApplicationPause()
 t CVRSystem_018::ShouldApplicationReduceRenderingWork()
 t CVRSystem_018::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_019::AcknowledgeQuit_Exiting()
 t CVRSystem_019::AcknowledgeQuit_UserPrompt()
 t CVRSystem_019::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_019::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_019::DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t CVRSystem_019::GetArrayTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, unsigned int, void*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_019::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_019::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_019::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_019::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_019::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_019::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_019::GetD3D9AdapterIndex()
 t CVRSystem_019::GetDXGIOutputInfo(int*)
 t CVRSystem_019::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_019::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_019::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_019::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_019::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_019::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_019::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_019::GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t CVRSystem_019::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystem_019::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_019::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_019::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_019::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_019::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_019::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_019::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_019::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_019::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_019::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_019::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_019::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_019::IsDisplayOnDesktop()
 t CVRSystem_019::IsInputAvailable()
 t CVRSystem_019::IsSteamVRDrawingControllers()
 t CVRSystem_019::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_019::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_019::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_019::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_019::ResetSeatedZeroPose()
 t CVRSystem_019::SetDisplayVisibility(bool)
 t CVRSystem_019::ShouldApplicationPause()
 t CVRSystem_019::ShouldApplicationReduceRenderingWork()
 t CVRSystem_019::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_020::AcknowledgeQuit_Exiting()
 t CVRSystem_020::AcknowledgeQuit_UserPrompt()
 t CVRSystem_020::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_020::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_020::GetAppContainerFilePaths(char*, unsigned int)
 t CVRSystem_020::GetArrayTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, unsigned int, void*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_020::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_020::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_020::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_020::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_020::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_020::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_020::GetD3D9AdapterIndex()
 t CVRSystem_020::GetDXGIOutputInfo(int*)
 t CVRSystem_020::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_020::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_020::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_020::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_020::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_020::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_020::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_020::GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t CVRSystem_020::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystem_020::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_020::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_020::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_020::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_020::GetRuntimeVersion()
 t CVRSystem_020::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_020::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_020::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_020::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_020::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_020::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_020::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_020::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_020::IsDisplayOnDesktop()
 t CVRSystem_020::IsInputAvailable()
 t CVRSystem_020::IsSteamVRDrawingControllers()
 t CVRSystem_020::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_020::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_020::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_020::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_020::ResetSeatedZeroPose()
 t CVRSystem_020::SetDisplayVisibility(bool)
 t CVRSystem_020::ShouldApplicationPause()
 t CVRSystem_020::ShouldApplicationReduceRenderingWork()
 t CVRSystem_020::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRSystem_021::AcknowledgeQuit_Exiting()
 t CVRSystem_021::ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t CVRSystem_021::ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t CVRSystem_021::GetAppContainerFilePaths(char*, unsigned int)
 t CVRSystem_021::GetArrayTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, unsigned int, void*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_021::GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_021::GetButtonIdNameFromEnum(vr::EVRButtonId)
 t CVRSystem_021::GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t CVRSystem_021::GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t CVRSystem_021::GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t CVRSystem_021::GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_021::GetD3D9AdapterIndex()
 t CVRSystem_021::GetDXGIOutputInfo(int*)
 t CVRSystem_021::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t CVRSystem_021::GetEventTypeNameFromEnum(vr::EVREventType)
 t CVRSystem_021::GetEyeToHeadTransform(vr::EVREye)
 t CVRSystem_021::GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_021::GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t CVRSystem_021::GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_021::GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_021::GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t CVRSystem_021::GetProjectionMatrix(vr::EVREye, float, float)
 t CVRSystem_021::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t CVRSystem_021::GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t CVRSystem_021::GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_021::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t CVRSystem_021::GetRuntimeVersion()
 t CVRSystem_021::GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t CVRSystem_021::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t CVRSystem_021::GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRSystem_021::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRSystem_021::GetTrackedDeviceActivityLevel(unsigned int)
 t CVRSystem_021::GetTrackedDeviceClass(unsigned int)
 t CVRSystem_021::GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t CVRSystem_021::GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRSystem_021::IsDisplayOnDesktop()
 t CVRSystem_021::IsInputAvailable()
 t CVRSystem_021::IsSteamVRDrawingControllers()
 t CVRSystem_021::IsTrackedDeviceConnected(unsigned int)
 t CVRSystem_021::PerformFirmwareUpdate(unsigned int)
 t CVRSystem_021::PollNextEvent(vr::VREvent_t*, unsigned int)
 t CVRSystem_021::PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t CVRSystem_021::ResetSeatedZeroPose()
 t CVRSystem_021::SetDisplayVisibility(bool)
 t CVRSystem_021::ShouldApplicationPause()
 t CVRSystem_021::ShouldApplicationReduceRenderingWork()
 t CVRSystem_021::TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t CVRTrackedCameraExternalService::CVRTrackedCameraExternalService()
 t CVRTrackedCameraExternalService::Cleanup()
 t CVRTrackedCameraExternalService::GetTrackedCamera()
 t CVRTrackedCameraExternalService::GetWritableTrackedCamera()
 t CVRTrackedCameraExternalService::Init(CVRTrackedCameraExternalService::Role, unsigned int)
 t CVRTrackedCameraExternalService::Init(CVRTrackedCameraExternalService::Role, unsigned int) [clone .cold]
 t CVRTrackedCameraExternalService::LockSharedMem(unsigned int)
 t CVRTrackedCameraExternalService::UnlockSharedMem()
 t CVRTrackedCameraExternalService::~CVRTrackedCameraExternalService()
 t CVRTrackedCameraExternalServicePtr::operator->()
 t CVRTrackedCameraExternalServicePtrBase::CVRTrackedCameraExternalServicePtrBase(CVRTrackedCameraExternalService*, unsigned int)
 t CVRTrackedCameraExternalServicePtrBase::~CVRTrackedCameraExternalServicePtrBase()
 t CVRTrackedCameraExternalServiceWritablePtr::Access()
 t CVRTrackedCameraExternalServiceWritablePtr::operator->()
 t CVRTrackedCameraStream::CVRTrackedCameraStream()
 t CVRTrackedCameraStream::Cleanup()
 t CVRTrackedCameraStream::GetFrameBuffer(int)
 t CVRTrackedCameraStream::GetFrameBufferCount()
 t CVRTrackedCameraStream::GetFrameBufferDataSize()
 t CVRTrackedCameraStream::GetTrackedCameraStream()
 t CVRTrackedCameraStream::GetWritableTrackedCameraStream()
 t CVRTrackedCameraStream::Init(CVRTrackedCameraStream::Role, unsigned int)
 t CVRTrackedCameraStream::Init(CVRTrackedCameraStream::Role, unsigned int) [clone .cold]
 t CVRTrackedCameraStream::InitFrameBuffering(CVRTrackedCameraStream::Role, int, int)
 t CVRTrackedCameraStream::InitFrameBuffering(CVRTrackedCameraStream::Role, int, int) [clone .cold]
 t CVRTrackedCameraStream::LockSharedMem(unsigned int)
 t CVRTrackedCameraStream::UnlockSharedMem()
 t CVRTrackedCameraStream::~CVRTrackedCameraStream()
 t CVRTrackedCameraStreamPtr::operator->()
 t CVRTrackedCameraStreamPtrBase::CVRTrackedCameraStreamPtrBase(CVRTrackedCameraStream*, unsigned int)
 t CVRTrackedCameraStreamPtrBase::~CVRTrackedCameraStreamPtrBase()
 t CVRTrackedCameraStreamWritablePtr::operator->()
 t CVRTrackedCamera_002::AcquireVideoStreamingService(unsigned int, void**)
 t CVRTrackedCamera_002::GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t CVRTrackedCamera_002::GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t CVRTrackedCamera_002::GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t CVRTrackedCamera_002::GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t CVRTrackedCamera_002::GetVideoStreamFrameBuffer(void*, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_002::HasCamera(unsigned int, bool*)
 t CVRTrackedCamera_002::ReleaseVideoStreamingService(void*)
 t CVRTrackedCamera_003::AcquireVideoStreamingService(unsigned int, void**)
 t CVRTrackedCamera_003::GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t CVRTrackedCamera_003::GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t CVRTrackedCamera_003::GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t CVRTrackedCamera_003::GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t CVRTrackedCamera_003::GetVideoStreamFrameBuffer(void*, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_003::GetVideoStreamTextureD3D11(void*, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_003::GetVideoStreamTextureGL(void*, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_003::GetVideoStreamTextureSize(unsigned int, vr::EVRTrackedCameraFrameType, vr::VRTextureBounds_t*, unsigned int*, unsigned int*)
 t CVRTrackedCamera_003::HasCamera(unsigned int, bool*)
 t CVRTrackedCamera_003::ReleaseVideoStreamTextureGL(void*, unsigned int)
 t CVRTrackedCamera_003::ReleaseVideoStreamingService(void*)
 t CVRTrackedCamera_004::AcquireVideoStreamingService(unsigned int, unsigned long*)
 t CVRTrackedCamera_004::GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t CVRTrackedCamera_004::GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t CVRTrackedCamera_004::GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t CVRTrackedCamera_004::GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t CVRTrackedCamera_004::GetVideoStreamFrameBuffer(unsigned long, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_004::GetVideoStreamTextureD3D11(unsigned long, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_004::GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_004::GetVideoStreamTextureSize(unsigned int, vr::EVRTrackedCameraFrameType, vr::VRTextureBounds_t*, unsigned int*, unsigned int*)
 t CVRTrackedCamera_004::HasCamera(unsigned int, bool*)
 t CVRTrackedCamera_004::ReleaseVideoStreamTextureGL(unsigned long, unsigned int)
 t CVRTrackedCamera_004::ReleaseVideoStreamingService(unsigned long)
 t CVRTrackedCamera_005::AcquireVideoStreamingService(unsigned int, unsigned long*)
 t CVRTrackedCamera_005::GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t CVRTrackedCamera_005::GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t CVRTrackedCamera_005::GetCameraIntrinsics(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t CVRTrackedCamera_005::GetCameraProjection(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t CVRTrackedCamera_005::GetVideoStreamFrameBuffer(unsigned long, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_005::GetVideoStreamTextureD3D11(unsigned long, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_005::GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t CVRTrackedCamera_005::GetVideoStreamTextureSize(unsigned int, vr::EVRTrackedCameraFrameType, vr::VRTextureBounds_t*, unsigned int*, unsigned int*)
 t CVRTrackedCamera_005::HasCamera(unsigned int, bool*)
 t CVRTrackedCamera_005::ReleaseVideoStreamTextureGL(unsigned long, unsigned int)
 t CVRTrackedCamera_005::ReleaseVideoStreamingService(unsigned long)
 t CVRTrackedDevice_004::Activate(unsigned int)
 t CVRTrackedDevice_004::CopyPropertiesToPropertyManager()
 t CVRTrackedDevice_004::Deactivate()
 t CVRTrackedDevice_004::DebugRequest(char const*, char*, unsigned int)
 t CVRTrackedDevice_004::EnterStandby()
 t CVRTrackedDevice_004::GetBoolTrackedDeviceProperty(vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRTrackedDevice_004::GetComponent(char const*)
 t CVRTrackedDevice_004::GetFloatTrackedDeviceProperty(vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRTrackedDevice_004::GetInt32TrackedDeviceProperty(vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRTrackedDevice_004::GetMatrix34TrackedDeviceProperty(vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRTrackedDevice_004::GetNativeDevice()
 t CVRTrackedDevice_004::GetPose()
 t CVRTrackedDevice_004::GetStringTrackedDeviceProperty(vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t CVRTrackedDevice_004::GetUint64TrackedDeviceProperty(vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t CVRTrackedDevice_004::LegacyGetDeviceInfo(std::string*, vr::ETrackedDeviceClass*)
 t CVRTrackedDevice_004::~CVRTrackedDevice_004()
 t CVRTrackedDevice_Latest::Activate(unsigned int)
 t CVRTrackedDevice_Latest::Deactivate()
 t CVRTrackedDevice_Latest::DebugRequest(char const*, char*, unsigned int)
 t CVRTrackedDevice_Latest::EnterStandby()
 t CVRTrackedDevice_Latest::GetComponent(char const*)
 t CVRTrackedDevice_Latest::GetNativeDevice()
 t CVRTrackedDevice_Latest::GetPose()
 t CVRTrackedDevice_Latest::LegacyGetDeviceInfo(std::string*, vr::ETrackedDeviceClass*)
 t CVRTrackedDevice_Latest::~CVRTrackedDevice_Latest()
 t CVRVirtualDisplayComponentAdapter* CVRVirtualDisplayComponentAdapter::Create<CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRVirtualDisplayComponentAdapter* CVRVirtualDisplayComponentAdapter::Create<vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t CVRVirtualDisplayComponentAdapter* CreateLatestAdapter<CVRVirtualDisplayComponent_Latest, CVRVirtualDisplayComponentAdapter, CCompositorPluginProvider>(CCompositorPluginProvider*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, char const*, char const*)
 t CVRVirtualDisplayComponentAdapter* CreateLatestAdapter<CVRVirtualDisplayComponent_Latest, CVRVirtualDisplayComponentAdapter, vr::ITrackedDeviceServerDriver>(vr::ITrackedDeviceServerDriver*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, char const*, char const*)
 t CVRVirtualDisplayComponent_001::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRVirtualDisplayComponent_001::Present(unsigned long)
 t CVRVirtualDisplayComponent_001::WaitForPresent()
 t CVRVirtualDisplayComponent_001::~CVRVirtualDisplayComponent_001()
 t CVRVirtualDisplayComponent_Latest::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVRVirtualDisplayComponent_Latest::Present(vr::PresentInfo_t const*, unsigned int)
 t CVRVirtualDisplayComponent_Latest::WaitForPresent()
 t CVRVirtualDisplayComponent_Latest::~CVRVirtualDisplayComponent_Latest()
 t CVRWatchdogHost_001::WatchdogWakeUp()
 t CVirtualDisplayClient::Cleanup()
 t CVirtualDisplayClient::GetTimeSinceLastVsync(float*, unsigned long*)
 t CVirtualDisplayClient::Init(CVRClient*)
 t CVirtualDisplayClient::Init(CVRClient*) [clone .cold]
 t CVirtualDisplayClient::Present(vr::PresentInfo_t const*, unsigned int)
 t CVirtualDisplayClient::Present(vr::PresentInfo_t const*, unsigned int) [clone .cold]
 t CVirtualDisplayClient::WaitForPresent()
 t CVkAllocator::AllocateMemory(VkMemoryRequirements2 const&, VkImage_T*, VkBuffer_T*, char const*, VkAllocationDetails_t const&, CVkMemory&)
 t CVkAllocator::AllocateMemory(VkMemoryRequirements2 const&, VkImage_T*, VkBuffer_T*, char const*, VkAllocationDetails_t const&, CVkMemory&) [clone .cold]
 t CVkAllocator::AllocateMemoryFromType(CVkAllocator::MemoryTypeInfo_t const&, VkMemoryRequirements2 const&, VkImage_T*, VkBuffer_T*, char const*, VkAllocationDetails_t const&, CVkMemory&)
 t CVkAllocator::AllocateMemoryFromType(CVkAllocator::MemoryTypeInfo_t const&, VkMemoryRequirements2 const&, VkImage_T*, VkBuffer_T*, char const*, VkAllocationDetails_t const&, CVkMemory&) [clone .cold]
 t CVkAllocator::CVkAllocator(CVkDevice*, char const*)
 t CVkAllocator::CreateBuffer(unsigned int, unsigned int, char const*, VkBufferAllocationDetails_t const&, VkBuffer_T*)
 t CVkAllocator::CreateBuffer(unsigned int, unsigned int, char const*, VkBufferAllocationDetails_t const&, VkBuffer_T*) [clone .cold]
 t CVkAllocator::CreateImage(unsigned int, unsigned int, VkFormat, unsigned int, char const*, VkImageAllocationDetails_t const&, VkImage_T*)
 t CVkAllocator::CreateImage(unsigned int, unsigned int, VkFormat, unsigned int, char const*, VkImageAllocationDetails_t const&, VkImage_T*) [clone .cold]
 t CVkAllocator::EnumerateMemoryTypes()
 t CVkAllocator::GetCompatibleMemoryType(VkAllocationDetails_t const&, VkMemoryRequirements2 const&)
 t CVkAllocator::GetCompatibleMemoryTypes(VkAllocationDetails_t const&, VkMemoryRequirements2 const&)
 t CVkAllocator::GetCompatibleMemoryTypes(VkAllocationDetails_t const&, VkMemoryRequirements2 const&) [clone .cold]
 t CVkAllocator::ImportBuffer(VkBufferSharedData_t const&, char const*)
 t CVkAllocator::ImportImage(VkImageSharedData_t const&, char const*)
 t CVkAllocator::Initialize()
 t CVkBuffer::CmdCopyBuffer(CVkCommandBuffer*, CVkBuffer*, unsigned long)
 t CVkBuffer::CmdCopyImageToBuffer(CVkCommandBuffer*, CVkImage*, unsigned int, VkImageLayout)
 t CVkBuffer::CmdPipelineBarrier(CVkCommandBuffer*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long)
 t CVkBuffer::PrepareForExport(VkBufferSharedData_t&, unsigned int)
 t CVkBuffer::Release()
 t CVkBuffer::~CVkBuffer()
 t CVkCommandBuffer::AcquireMutex(VkDeviceMemory_T*, unsigned long, unsigned int)
 t CVkCommandBuffer::Begin()
 t CVkCommandBuffer::CVkCommandBuffer(CVkDevice*, CVkCommandBufferPool*, char const*)
 t CVkCommandBuffer::CmdBeginDebugUtilsLabel(char const*, float const*)
 t CVkCommandBuffer::CmdEndDebugUtilsLabel()
 t CVkCommandBuffer::CmdInsertDebugLabel(char const*)
 t CVkCommandBuffer::CmdInsertVRFrameMarker()
 t CVkCommandBuffer::CmdPipelineBarrier(unsigned int, unsigned int)
 t CVkCommandBuffer::CmdPipelineBarrier(unsigned int, unsigned int, unsigned int, unsigned int)
 t CVkCommandBuffer::End()
 t CVkCommandBuffer::Initialize()
 t CVkCommandBuffer::MarkReferencedResourcesInUse(CVkTimeline*, facet::CVkTimelinePoint const&)
 t CVkCommandBuffer::MarkReferencedResourcesInUse(CVkTimeline*, facet::CVkTimelinePoint const&) [clone .cold]
 t CVkCommandBuffer::OnPostSubmit()
 t CVkCommandBuffer::OnPreSubmit()
 t CVkCommandBuffer::QueueFamilyIndex() const
 t CVkCommandBuffer::ReferenceResource(CVkResourceBase*)
 t CVkCommandBuffer::ReferenceResource(CVkResourceBase*) [clone .cold]
 t CVkCommandBuffer::Release()
 t CVkCommandBuffer::ReleaseMutex(VkDeviceMemory_T*, unsigned long)
 t CVkCommandBuffer::Reset()
 t CVkCommandBuffer::Signal(CVkTimeline*, facet::CVkTimelinePoint const&)
 t CVkCommandBuffer::Signal(VkSemaphore_T*)
 t CVkCommandBuffer::ValidateReferencedResources()
 t CVkCommandBuffer::Wait(CVkTimeline*, facet::CVkTimelinePoint const&, unsigned int)
 t CVkCommandBuffer::Wait(VkSemaphore_T*, unsigned int)
 t CVkCommandBuffer::~CVkCommandBuffer()
 t CVkCommandBufferPool::BorrowResource(char const*)
 t CVkCommandBufferPool::BorrowResource(char const*) [clone .cold]
 t CVkCommandBufferPool::CreateResource()
 t CVkCommandBufferPool::CreateResource() [clone .cold]
 t CVkCommandBufferPool::Initialize(CVkDevice*, char const*, unsigned int)
 t CVkCommandBufferPool::Initialize(CVkDevice*, char const*, unsigned int) [clone .cold]
 t CVkCommandBufferPool::Release()
 t CVkCommandBufferPool::~CVkCommandBufferPool()
 t CVkDevice::CVkDevice(char const*)
 t CVkDevice::CVkDevice(char const*) [clone .cold]
 t CVkDevice::ChoosePhysicalDevice()
 t CVkDevice::ChoosePhysicalDevice() [clone .cold]
 t CVkDevice::CreateDevice(CreateDeviceDetails_t const&)
 t CVkDevice::CreateDevice(CreateDeviceDetails_t const&) [clone .cold]
 t CVkDevice::CreateInstance(char const*, unsigned int, unsigned int, CreateInstanceDetails_t const&)
 t CVkDevice::CreateInstance(char const*, unsigned int, unsigned int, CreateInstanceDetails_t const&) [clone .cold]
 t CVkDevice::EnableDeviceExtension(char const*, bool)
 t CVkDevice::EnableDeviceExtension(char const*, bool) [clone .cold]
 t CVkDevice::EnableInstanceExtension(char const*, bool)
 t CVkDevice::EnableInstanceExtension(char const*, bool) [clone .cold]
 t CVkDevice::EnableLayer(char const*, bool)
 t CVkDevice::EnableLayer(char const*, bool) [clone .cold]
 t CVkDevice::FillPhysicalDeviceInfo(VkPhysicalDevice_T*, PhysicalDeviceInfo_t*)
 t CVkDevice::GetQueueType(unsigned int)
 t CVkDevice::Initialize(void (*(*)(VkInstance_T*, char const*))())
 t CVkDevice::Initialize(void (*(*)(VkInstance_T*, char const*))()) [clone .cold]
 t CVkDevice::IsCompatibleVulkanVersion(unsigned int)
 t CVkDevice::IsDeviceExtensionAvailable(char const*)
 t CVkDevice::IsDeviceExtensionEnabled(char const*)
 t CVkDevice::IsDeviceExtensionEnabled(char const*) [clone .cold]
 t CVkDevice::IsExtensionAvailableLocked(std::vector<VkExtensionProperties, std::allocator<VkExtensionProperties> >&, char const*)
 t CVkDevice::IsGlobalPriorityQuerySupported(VkPhysicalDevice_T*)
 t CVkDevice::IsInstanceExtensionAvailable(char const*)
 t CVkDevice::IsInstanceExtensionEnabled(char const*)
 t CVkDevice::IsInstanceExtensionEnabled(char const*) [clone .cold]
 t CVkDevice::IsLayerAvailable(char const*)
 t CVkDevice::IsLayerAvailableLocked(char const*) const
 t CVkDevice::IsLayerEnabled(char const*)
 t CVkDevice::IsLayerEnabled(char const*) [clone .cold]
 t CVkDevice::IsLayerEnabledLocked(char const*) const
 t CVkDevice::LoadAvailableLayers()
 t CVkDevice::LoadAvailableLayers() [clone .cold]
 t CVkDevice::LoadInstanceExtensions(char const*)
 t CVkDevice::LoadInstanceExtensions(char const*) [clone .cold]
 t CVkDevice::SetDebugName(VkBuffer_T*, std::string const&)
 t CVkDevice::SetDebugName(VkCommandBuffer_T*, std::string const&)
 t CVkDevice::SetDebugName(VkCommandPool_T*, std::string const&)
 t CVkDevice::SetDebugName(VkDeviceMemory_T*, std::string const&)
 t CVkDevice::SetDebugName(VkDevice_T*, std::string const&)
 t CVkDevice::SetDebugName(VkImageView_T*, std::string const&)
 t CVkDevice::SetDebugName(VkImage_T*, std::string const&)
 t CVkDevice::SetDebugName(VkQueryPool_T*, std::string const&)
 t CVkDevice::SetDebugName(VkSemaphore_T*, std::string const&)
 t CVkDevice::SetDebugName(VkShaderModule_T*, std::string const&)
 t CVkDevice::SetDebugName(unsigned long, VkObjectType, std::string const&)
 t CVkDevice::Shutdown()
 t CVkDevice::UseDevice(VkDevice_T*)
 t CVkDevice::UseInstance(VkInstance_T*)
 t CVkDevice::UsePhysicalDevice(VkPhysicalDevice_T*)
 t CVkDevice::~CVkDevice()
 t CVkGarbageCollector::Acquire(CVkResourceBase*)
 t CVkGarbageCollector::Acquire(CVkResourceBase*) [clone .cold]
 t CVkGarbageCollector::BucketSize(CVkTimeline*)
 t CVkGarbageCollector::DebugDump()
 t CVkGarbageCollector::DisposeResource(CVkResourceBase*)
 t CVkGarbageCollector::DoMaintenance()
 t CVkGarbageCollector::DoMaintenance() [clone .cold]
 t CVkGarbageCollector::FlushAllResources()
 t CVkGarbageCollector::TotalBuckets()
 t CVkGarbageCollector::TotalSize()
 t CVkGarbageCollector::WaitForWork()
 t CVkGarbageCollector::WaitForWork() [clone .cold]
 t CVkGarbageCollector::~CVkGarbageCollector()
 t CVkImage::AspectMask() const
 t CVkImage::BytesRequired() const
 t CVkImage::CmdClearColorImage(CVkCommandBuffer*, VkClearColorValue const&, VkImageLayout, unsigned int)
 t CVkImage::CmdCopyBufferToImage(CVkCommandBuffer*, CVkBuffer*, VkImageLayout, unsigned int)
 t CVkImage::CmdCopyImage(CVkCommandBuffer*, CVkImage*, std::vector<VkImageCopy, std::allocator<VkImageCopy> > const&, VkImageLayout, VkImageLayout)
 t CVkImage::CmdPipelineBarrier(CVkCommandBuffer*, VkImageLayout, VkImageLayout, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
 t CVkImage::PrepareForExport(VkImageSharedData_t&, unsigned int)
 t CVkImage::Release()
 t CVkImage::~CVkImage()
 t CVkMemory::Map()
 t CVkMemory::Map() [clone .cold]
 t CVkMemory::Release()
 t CVkMemory::Unmap()
 t CVkMemory::Unmap() [clone .cold]
 t CVkMemory::~CVkMemory()
 t CVkPoolGarbageCollector<CVkCommandBuffer>::DisposeResource(CVkResourceBase*)
 t CVkPoolGarbageCollector<CVkCommandBuffer>::~CVkPoolGarbageCollector()
 t CVkQueue::EmitFullDebugBarrier(CVkCommandBuffer const*)
 t CVkQueue::Initialize(unsigned int, unsigned int)
 t CVkQueue::Present(VkSwapchainKHR_T*, unsigned int, VkSemaphore_T*, unsigned long)
 t CVkQueue::Present(VkSwapchainKHR_T*, unsigned int, VkSemaphore_T*, unsigned long) [clone .cold]
 t CVkQueue::Submit(CVkCommandBuffer*)
 t CVkQueue::Submit(CVkCommandBuffer*) [clone .cold]
 t CVkResourceBase::GC()
 t CVkResourceBase::IsInUse()
 t CVkResourceBase::IsTimeline()
 t CVkResourceBase::MarkInUse(CVkTimeline*, facet::CVkTimelinePoint const&)
 t CVkResourceBase::WaitForResource(unsigned long)
 t CVkResourcePool<CVkCommandBuffer>::BorrowResource()
 t CVkResourcePool<CVkCommandBuffer>::CVkResourcePool()
 t CVkResourcePool<CVkCommandBuffer>::Grow(unsigned int)
 t CVkResourcePool<CVkCommandBuffer>::~CVkResourcePool()
 t CVkTimeline::CheckPhysicalDeviceCapabilities()
 t CVkTimeline::Create(CVkDevice*, char const*, VkTimelineCreationDetails_t const&)
 t CVkTimeline::Create(CVkDevice*, char const*, VkTimelineCreationDetails_t const&) [clone .cold]
 t CVkTimeline::ExportTimeline(VkTimelineCreationDetails_t const&)
 t CVkTimeline::HasSignaled(facet::CVkTimelinePoint const&)
 t CVkTimeline::Import(CVkDevice*, char const*, VkTimelineSharedData_t const&)
 t CVkTimeline::Import(CVkDevice*, char const*, VkTimelineSharedData_t const&) [clone .cold]
 t CVkTimeline::ImportTimeline(VkTimelineCreationDetails_t const&)
 t CVkTimeline::Initialize(VkTimelineCreationDetails_t const&)
 t CVkTimeline::InitializeFromIPC(VkTimelineSharedData_t const&)
 t CVkTimeline::IsTimeline()
 t CVkTimeline::PrepareForExport(VkTimelineSharedData_t&, unsigned int)
 t CVkTimeline::Release()
 t CVkTimeline::Signal(facet::CVkTimelinePoint const&)
 t CVkTimeline::Wait(facet::CVkTimelinePoint const&, unsigned long)
 t CVkTimeline::WaitMultiple(std::vector<CVkTimeline*, std::allocator<CVkTimeline*> > const&, std::vector<facet::CVkTimelinePoint, std::allocator<facet::CVkTimelinePoint> > const&, bool, unsigned long)
 t CVkTimeline::WaitMultiple(std::vector<CVkTimeline*, std::allocator<CVkTimeline*> > const&, std::vector<facet::CVkTimelinePoint, std::allocator<facet::CVkTimelinePoint> > const&, bool, unsigned long) [clone .cold]
 t CVkTimeline::~CVkTimeline()
 t CVulkanVRRenderer::AcquireSync(unsigned long)
 t CVulkanVRRenderer::AcquireSync(unsigned long) [clone .cold]
 t CVulkanVRRenderer::AddFencedResource(CVulkanVRRenderer::FencedResourceType_t, unsigned long, unsigned long)
 t CVulkanVRRenderer::AllocateMemory(VkDevice_T*, unsigned long, bool, bool, bool, VkImage_T*, VkBuffer_T*, unsigned int, unsigned int*)
 t CVulkanVRRenderer::BIsDebugMarkerEnabled()
 t CVulkanVRRenderer::BakeComputePipeline(VRRenderer::DispatchInfo*)
 t CVulkanVRRenderer::BakeComputePipeline(VRRenderer::DispatchInfo*) [clone .cold]
 t CVulkanVRRenderer::BakeDescriptor(VRRenderer::DrawInfo*)
 t CVulkanVRRenderer::BakeDescriptor(VRRenderer::DrawInfo*) [clone .cold]
 t CVulkanVRRenderer::BakeRenderPass()
 t CVulkanVRRenderer::BakeRenderPass() [clone .cold]
 t CVulkanVRRenderer::BeginCmdDebugMarker(VkCommandBuffer_T*, char const*, float*)
 t CVulkanVRRenderer::BeginCommandBuffer()
 t CVulkanVRRenderer::BeginDebugEvent(char const*)
 t CVulkanVRRenderer::BeginFrame(unsigned long)
 t CVulkanVRRenderer::BindRenderTargets(unsigned int, VRRenderer::TextureBase**, VRRenderer::TextureBase*, VRRenderer::Viewport*, VRRenderer::FragmentShadingRate*)
 t CVulkanVRRenderer::CVulkanVRRenderer()
 t CVulkanVRRenderer::CVulkanVRRenderer() [clone .cold]
 t CVulkanVRRenderer::CleanupSyncResources()
 t CVulkanVRRenderer::ClearRenderableTexture(VRRenderer::TextureBase*, float*, bool)
 t CVulkanVRRenderer::CompatibilityFlush()
 t CVulkanVRRenderer::CopyConstantBufferRegion(VRRenderer::ConstantBufferBase*, VRRenderer::ConstantBufferBase*, unsigned int, unsigned int, unsigned int)
 t CVulkanVRRenderer::CopyIntoTexture(VRRenderer::TextureBase*, unsigned int, unsigned int, VRRenderer::TextureBase*, unsigned int, unsigned int, unsigned int, unsigned int)
 t CVulkanVRRenderer::CopyTextureData(VRRenderer::TextureBase*, void*, unsigned int)
 t CVulkanVRRenderer::CreateBlendState(VRRenderer::BlendStateCreateInfo*)
 t CVulkanVRRenderer::CreateBufferHelper(VkDevice_T*, int, unsigned int, VkDeviceMemory_T**, bool, unsigned long*, unsigned int*, unsigned int*)
 t CVulkanVRRenderer::CreateConstantBuffer(unsigned int, unsigned long*, VRRenderer::BufferUsage, unsigned int, bool)
 t CVulkanVRRenderer::CreateConstantBuffer(unsigned int, unsigned long*, VRRenderer::BufferUsage, unsigned int, bool) [clone .cold]
 t CVulkanVRRenderer::CreateDepthStencilState(VRRenderer::DepthStencilStateCreateInfo*)
 t CVulkanVRRenderer::CreateDynamicVertexBuffer(unsigned int, unsigned long*)
 t CVulkanVRRenderer::CreateEventQuery()
 t CVulkanVRRenderer::CreateGPUCountingSemaphore(unsigned long*, unsigned int)
 t CVulkanVRRenderer::CreateGPUCountingSemaphore(unsigned long*, unsigned int) [clone .cold]
 t CVulkanVRRenderer::CreateGPUSemaphore(unsigned long*, bool)
 t CVulkanVRRenderer::CreateGPUSemaphore(unsigned long*, bool) [clone .cold]
 t CVulkanVRRenderer::CreateIndexBuffer(unsigned int, unsigned long*)
 t CVulkanVRRenderer::CreateIndexBuffer(unsigned int, unsigned long*) [clone .cold]
 t CVulkanVRRenderer::CreateRasterizerState(VRRenderer::RasterizerStateCreateInfo*)
 t CVulkanVRRenderer::CreateSampler(VRRenderer::SamplerCreateInfo*)
 t CVulkanVRRenderer::CreateTexture(unsigned int, unsigned int, VRRenderer::TextureCreateInfo*)
 t CVulkanVRRenderer::CreateTexture(unsigned int, unsigned int, VRRenderer::TextureCreateInfo*) [clone .cold]
 t CVulkanVRRenderer::CreateVertexBuffer(unsigned int, unsigned long*)
 t CVulkanVRRenderer::CreateVertexBuffer(unsigned int, unsigned long*) [clone .cold]
 t CVulkanVRRenderer::Dispatch(VRRenderer::DispatchInfo*, char const*)
 t CVulkanVRRenderer::Draw(VRRenderer::DrawInfo*, char const*)
 t CVulkanVRRenderer::EmitTextureBarrier(VRRenderer::TextureBase*, VkImageLayout, VRRenderer::QueueMode, bool)
 t CVulkanVRRenderer::EndCmdDebugMarker(VkCommandBuffer_T*)
 t CVulkanVRRenderer::EndCommandBuffer()
 t CVulkanVRRenderer::EndCommandBuffer() [clone .cold]
 t CVulkanVRRenderer::EndDebugEvent()
 t CVulkanVRRenderer::EndFrame(unsigned long)
 t CVulkanVRRenderer::EnumerateHeaps(VkPhysicalDevice_T*)
 t CVulkanVRRenderer::EnumerateHeaps(VkPhysicalDevice_T*) [clone .cold]
 t CVulkanVRRenderer::FindComputePipeline(VRRenderer::DispatchInfo*)
 t CVulkanVRRenderer::FindDescriptor(VRRenderer::DrawInfo*)
 t CVulkanVRRenderer::Flush(VRRenderer::QueueMode)
 t CVulkanVRRenderer::FramebufferState_t::operator<(CVulkanVRRenderer::FramebufferState_t const&) const
 t CVulkanVRRenderer::FramebufferState_t::operator<(CVulkanVRRenderer::FramebufferState_t const&) const [clone .part.0]
 t CVulkanVRRenderer::FreeFencedResource(CVulkanVRRenderer::FencedResourceType_t, unsigned long, unsigned long)
 t CVulkanVRRenderer::FreeFencedResources(unsigned int, unsigned int)
 t CVulkanVRRenderer::FreeResourcesAssociatedWithExternalCommandBuffer(VkCommandBuffer_T*)
 t CVulkanVRRenderer::FreeShaders()
 t CVulkanVRRenderer::GetBytesUsed()
 t CVulkanVRRenderer::GetConstantBufferSharedResource(VRRenderer::ConstantBufferBase*)
 t CVulkanVRRenderer::GetGPUCountingSemaphoreSharedResource(VRRenderer::GPUCountingSemaphoreBase*)
 t CVulkanVRRenderer::GetGPUSemaphoreSharedResource(VRRenderer::GPUSemaphoreBase*)
 t CVulkanVRRenderer::GetNativeDevice(VRRenderer::QueueMode)
 t CVulkanVRRenderer::GetRendererAPI()
 t CVulkanVRRenderer::GetTextureLOD(VRRenderer::TextureBase*, unsigned int)
 t CVulkanVRRenderer::GetTextureNativePointer(VRRenderer::TextureBase*)
 t CVulkanVRRenderer::GetTextureSharedHandle(VRRenderer::TextureBase*)
 t CVulkanVRRenderer::GetTextureSharedResource(VRRenderer::TextureBase*)
 t CVulkanVRRenderer::GetVRTextureFormat(VkFormat)
 t CVulkanVRRenderer::ImportConstantBufferFromSharedHandle(unsigned long)
 t CVulkanVRRenderer::ImportConstantBufferFromSharedHandle(unsigned long) [clone .cold]
 t CVulkanVRRenderer::ImportGPUCountingSemaphoreFromSharedHandle(unsigned long)
 t CVulkanVRRenderer::ImportGPUCountingSemaphoreFromSharedHandle(unsigned long) [clone .cold]
 t CVulkanVRRenderer::ImportGPUSemaphoreFromSharedHandle(unsigned long)
 t CVulkanVRRenderer::ImportGPUSemaphoreFromSharedHandle(unsigned long) [clone .cold]
 t CVulkanVRRenderer::ImportIndexBufferFromSharedHandle(unsigned long)
 t CVulkanVRRenderer::ImportTextureFromNativeRenderTarget(void*)
 t CVulkanVRRenderer::ImportTextureFromNativeTexture(void*, vr::EColorSpace, unsigned int, unsigned int)
 t CVulkanVRRenderer::ImportTextureFromNativeTexture(void*, vr::EColorSpace, unsigned int, unsigned int) [clone .cold]
 t CVulkanVRRenderer::ImportTextureFromSharedHandle(unsigned long, vr::EColorSpace, unsigned int, unsigned int, bool)
 t CVulkanVRRenderer::ImportTextureFromSharedHandle(unsigned long, vr::EColorSpace, unsigned int, unsigned int, bool) [clone .cold]
 t CVulkanVRRenderer::ImportVertexBufferFromSharedHandle(unsigned long)
 t CVulkanVRRenderer::Initialize(vr::IHmdWindow*, vr::IVRIPCResourceManagerClient*, VkInstance_T*, VkPhysicalDevice_T*, VkDevice_T*, VkQueue_T*, unsigned int, VkQueue_T*, unsigned int, vr::IVRResources*, vr::IVRCompositorSystemInternal*, bool, bool)
 t CVulkanVRRenderer::Initialize(vr::IHmdWindow*, vr::IVRIPCResourceManagerClient*, VkInstance_T*, VkPhysicalDevice_T*, VkDevice_T*, VkQueue_T*, unsigned int, VkQueue_T*, unsigned int, vr::IVRResources*, vr::IVRCompositorSystemInternal*, bool, bool) [clone .cold]
 t CVulkanVRRenderer::InsertCmdDebugMarker(VkCommandBuffer_T*, char const*, float*)
 t CVulkanVRRenderer::InsertEventQuery(VRRenderer::EventQueryBase*)
 t CVulkanVRRenderer::IsDeferred() const
 t CVulkanVRRenderer::IsEventQueryComplete(VRRenderer::EventQueryBase*)
 t CVulkanVRRenderer::LoadShaders()
 t CVulkanVRRenderer::MapConstantBuffer(VRRenderer::ConstantBufferBase*, VRRenderer::MapType, void**)
 t CVulkanVRRenderer::MapTexture(VRRenderer::TextureBase*, VRRenderer::MapType, void**, unsigned int*)
 t CVulkanVRRenderer::Present(vr::IHmdWindow::EWindowType)
 t CVulkanVRRenderer::Present(vr::IHmdWindow::EWindowType) [clone .cold]
 t CVulkanVRRenderer::QueueClearsIfNeeded()
 t CVulkanVRRenderer::QueueClearsIfNeeded() [clone .cold]
 t CVulkanVRRenderer::QueueComputeClearsIfNeeded(VRRenderer::DispatchInfo*)
 t CVulkanVRRenderer::RecycleConstantBuffer(VRRenderer::ConstantBufferBase**, unsigned int)
 t CVulkanVRRenderer::RecycleIndexBuffer(VRRenderer::IndexBufferBase**, unsigned int)
 t CVulkanVRRenderer::RecycleVertexBuffer(VRRenderer::VertexBufferBase**, unsigned int)
 t CVulkanVRRenderer::RegisterGPUTiming(CGpuTiming*, VRRenderer::QueueMode)
 t CVulkanVRRenderer::ReleaseBlendState(VRRenderer::BlendStateBase**)
 t CVulkanVRRenderer::ReleaseConstantBuffer(VRRenderer::ConstantBufferBase**)
 t CVulkanVRRenderer::ReleaseConstantBufferSharedResource(vr::IVRSharedBuffer**)
 t CVulkanVRRenderer::ReleaseDepthStencilState(VRRenderer::DepthStencilStateBase**)
 t CVulkanVRRenderer::ReleaseEventQuery(VRRenderer::EventQueryBase**)
 t CVulkanVRRenderer::ReleaseGPUCountingSemaphore(VRRenderer::GPUCountingSemaphoreBase**)
 t CVulkanVRRenderer::ReleaseGPUCountingSemaphoreSharedResource(vr::IVRSharedCountingSemaphore**)
 t CVulkanVRRenderer::ReleaseGPUSemaphore(VRRenderer::GPUSemaphoreBase**)
 t CVulkanVRRenderer::ReleaseGPUSemaphoreSharedResource(vr::IVRSharedSemaphore**)
 t CVulkanVRRenderer::ReleaseIndexBuffer(VRRenderer::IndexBufferBase**)
 t CVulkanVRRenderer::ReleaseRasterizerState(VRRenderer::RasterizerStateBase**)
 t CVulkanVRRenderer::ReleaseSampler(VRRenderer::SamplerBase**)
 t CVulkanVRRenderer::ReleaseSync(unsigned long)
 t CVulkanVRRenderer::ReleaseSync(unsigned long) [clone .cold]
 t CVulkanVRRenderer::ReleaseTexture(VRRenderer::TextureBase**)
 t CVulkanVRRenderer::ReleaseTextureSharedResource(vr::IVRSharedImage**)
 t CVulkanVRRenderer::ReleaseVertexBuffer(VRRenderer::VertexBufferBase**)
 t CVulkanVRRenderer::ReloadShaders()
 t CVulkanVRRenderer::RenderPassState_t::operator<(CVulkanVRRenderer::RenderPassState_t const&) const
 t CVulkanVRRenderer::RenderPassState_t::operator<(CVulkanVRRenderer::RenderPassState_t const&) const [clone .part.0]
 t CVulkanVRRenderer::RenderStateRestore()
 t CVulkanVRRenderer::RenderStateSave()
 t CVulkanVRRenderer::ResolveTexture(VRRenderer::TextureBase*, VRRenderer::TextureBase*, unsigned int)
 t CVulkanVRRenderer::SetBufferDebugName(VkBuffer_T*, char const*)
 t CVulkanVRRenderer::SetDeferred(bool)
 t CVulkanVRRenderer::SetDeviceMemoryDebugName(VkDeviceMemory_T*, char const*)
 t CVulkanVRRenderer::SetImageDebugName(VkImage_T*, char const*)
 t CVulkanVRRenderer::SetImageLayout(VkCommandBuffer_T*, VkImage_T*, unsigned int, VkImageLayout, VkImageLayout, unsigned int, unsigned int)
 t CVulkanVRRenderer::SetImageViewDebugName(VkImageView_T*, char const*)
 t CVulkanVRRenderer::SetObjectDebugName(unsigned long, VkDebugReportObjectTypeEXT, char const*)
 t CVulkanVRRenderer::SetQueueMode(VRRenderer::QueueMode)
 t CVulkanVRRenderer::SetRenderThreadId(unsigned int)
 t CVulkanVRRenderer::SetUseExternalCommandBuffer(VkCommandBuffer_T*, VRRenderer::QueueMode)
 t CVulkanVRRenderer::Signal(VRRenderer::GPUCountingSemaphoreBase*, unsigned long, VRRenderer::QueueMode)
 t CVulkanVRRenderer::TextureBarrier(VRRenderer::TextureBase*, VRRenderer::ImageLayout_t, VRRenderer::QueueMode)
 t CVulkanVRRenderer::TextureRequiresConversionToLinear(VRRenderer::TextureBase*, vr::EColorSpace)
 t CVulkanVRRenderer::UnmapConstantBuffer(VRRenderer::ConstantBufferBase*, VRRenderer::MapType)
 t CVulkanVRRenderer::UnmapTexture(VRRenderer::TextureBase*, void**)
 t CVulkanVRRenderer::UnregisterGPUTiming(CGpuTiming*)
 t CVulkanVRRenderer::UpdateBufferHelper(VkBuffer_T*, unsigned long, void const*, VkAccessFlagBits)
 t CVulkanVRRenderer::UpdateConstantBuffer(VRRenderer::ConstantBufferBase*, void const*)
 t CVulkanVRRenderer::UpdateGPUTimingCurrentCommandBuffer()
 t CVulkanVRRenderer::UpdateIndexBuffer(VRRenderer::IndexBufferBase*, void const*)
 t CVulkanVRRenderer::UpdateTexture(VRRenderer::TextureBase*, void const*, bool)
 t CVulkanVRRenderer::UpdateVertexBuffer(VRRenderer::VertexBufferBase*, void const*)
 t CVulkanVRRenderer::Wait(VRRenderer::GPUCountingSemaphoreBase*, unsigned long, VRRenderer::QueueMode)
 t CVulkanVRRenderer::WaitForPresent()
 t CVulkanVRRenderer::WriteToDebugPngFile(VRRenderer::TextureBase*, std::string const&)
 t CVulkanVRRenderer::~CVulkanVRRenderer()
 t CWatchdogDriverContext::GetDriverHandle()
 t CWatchdogDriverContext::GetGenericInterface(char const*, vr::EVRInitError*)
 t CWatchdogTrackedDeviceProvider_Latest::Cleanup()
 t CWatchdogTrackedDeviceProvider_Latest::GetSourceVersion()
 t CWatchdogTrackedDeviceProvider_Latest::Init(vr::IVRDriverContext*)
 t CWatchdogTrackedDeviceProvider_Latest::~CWatchdogTrackedDeviceProvider_Latest()
 t CachedActionToJson(CachedActionValue_t const&, std::vector<VRAction_Entry_t, std::allocator<VRAction_Entry_t> > const&)
 t CachedActionToJson(CachedActionValue_t const&, std::vector<VRAction_Entry_t, std::allocator<VRAction_Entry_t> > const&) [clone .cold]
 t CanAppSetThis(char const*, char const*)
 t CanAppSetThis(char const*, char const*) [clone .cold]
 t CapitalizeFirstLetter(std::string const&)
 t CapitalizeFirstLetter(std::string const&) [clone .cold]
 t ChaperoneInterfaceRegistration<CVRChaperone_001>::GetInterface()
 t ChaperoneInterfaceRegistration<CVRChaperone_001>::~ChaperoneInterfaceRegistration()
 t ChaperoneInterfaceRegistration<CVRChaperone_002>::GetInterface()
 t ChaperoneInterfaceRegistration<CVRChaperone_002>::~ChaperoneInterfaceRegistration()
 t ChaperoneInterfaceRegistration<CVRChaperone_003>::GetInterface()
 t ChaperoneInterfaceRegistration<CVRChaperone_003>::~ChaperoneInterfaceRegistration()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_001>::GetInterface()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_001>::~ChaperoneSetupInterfaceRegistration()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_002>::GetInterface()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_002>::~ChaperoneSetupInterfaceRegistration()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_003>::GetInterface()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_003>::~ChaperoneSetupInterfaceRegistration()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_004>::GetInterface()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_004>::~ChaperoneSetupInterfaceRegistration()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_005>::GetInterface()
 t ChaperoneSetupInterfaceRegistration<CVRChaperoneSetup_005>::~ChaperoneSetupInterfaceRegistration()
 t CharNeedsEscape_Component(char)
 t CharNeedsEscape_FullPath(char)
 t CheckMinMax(std::string&, float, float, float, float)
 t CheckPoseRecipe(CPoseRecipe const&, unsigned char)
 t CleanupAssertCallback()
 t CleanupDriverLog()
 t CleanupInternalInterfaces()
 t CleanupSharedResourceNamespace()
 t ClearChaperoneCaches()
 t ClearChaperoneData()
 t CloseKeyboard(TVRSharedState<VRSystemLayerState_t, false>*)
 t CloseKeyboard(TVRSharedState<VRSystemLayerState_t, false>*) [clone .cold]
 t CloseLog()
 t CollapseActionValues(std::vector<VRAction_Entry_t, std::allocator<VRAction_Entry_t> > const&, std::function<bool (unsigned long)>)
 t CollapseDuplicatePaths(std::vector<std::string, std::allocator<std::string> >&)
 t CollapseDuplicatePaths(std::vector<std::string, std::allocator<std::string> >&) [clone .cold]
 t CollapseInputValues(std::vector<VRInputValue_t, std::allocator<VRInputValue_t> > const&, bool)
 t CompareTrackedDeviceEntry(void const*, void const*)
 t ComponentAdapterBaseWithParent<IVRDriverDirectModeComponent_004, &k_pchDriverDirectModeComponentPrefix, 4, CVRDriverDirectModeComponent_004, CVRDriverDirectModeComponent_003>::CreateAdapter(void*, std::string const&)
 t ComponentAdapterBaseWithParent<vr::IVRCameraComponent, &k_pchCameraComponentPrefix, 3, CVRCameraComponent_Latest, CVRCameraComponent_002>::CreateAdapter(void*, std::string const&)
 t ComponentAdapterBaseWithParent<vr::IVRDriverDirectModeComponent, &k_pchDriverDirectModeComponentPrefix, 8, CVRDriverDirectModeComponent_Latest, CVRDriverDirectModeComponent_007>::CreateAdapter(void*, std::string const&)
 t ComposeDpadInputPath(std::string, std::string, std::string, std::string)
 t ComposeDpadInputPath(std::string, std::string, std::string, std::string) [clone .cold]
 t CompositorInterfaceRegistration<CVRCompositor_003>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_003>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_004>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_004>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_005>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_005>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_006>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_006>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_007>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_007>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_008>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_008>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_009>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_009>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_010>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_010>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_011>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_011>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_012>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_012>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_013>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_013>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_014>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_014>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_015>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_015>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_016>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_016>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_017>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_017>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_018>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_018>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_019>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_019>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_020>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_020>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_021>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_021>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_022>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_022>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_023>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_023>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_024>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_024>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_025>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_025>::~CompositorInterfaceRegistration()
 t CompositorInterfaceRegistration<CVRCompositor_026>::GetInterface()
 t CompositorInterfaceRegistration<CVRCompositor_026>::~CompositorInterfaceRegistration()
 t ComputeBindingCachePath(std::string const&, std::string const&)
 t ComputeBindingCachePath(std::string const&, std::string const&) [clone .cold]
 t ComputeConeLineIntersection(vr::HmdVector3_t const&, vr::HmdVector3_t const&, vr::HmdVector3_t const&, vr::HmdVector3_t const&, float, float*, float*)
 t ComputeOverlayIntersectionInternal(OverlayTransformDetails_t const&, vr::HmdVector3_t, vr::HmdVector3_t, vr::HmdVector2_t*, vr::HmdVector3_t*, vr::HmdVector3_t*, float*)
 t ComputePaddedSize(unsigned int)
 t ComputeParallelProjection(vr::HmdMatrix33_t const&, float*, float*, float*, float*)
 t ComputeReadEventName(std::string const&, unsigned int)
 t ComputeReadEventName(std::string const&, unsigned int) [clone .cold]
 t ComputeSimpleIndexControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)
 t ComputeSimpleIndexControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&) [clone .cold]
 t ComputeSimpleMRControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)
 t ComputeSimpleMRControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&) [clone .cold]
 t ComputeSimpleTouchControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)
 t ComputeSimpleTouchControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&) [clone .cold]
 t ComputeSimpleViveControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)
 t ComputeSimpleViveControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&) [clone .cold]
 t ComputeSubresourceRegion(vr::VRTextureBounds_t*, unsigned int, unsigned int, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t ComputeTouchIndexControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)
 t ComputeTouchIndexControllerBindings(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&) [clone .cold]
 t ComputeTransformDetails(vr::HmdMatrix34_t const&, vr::HmdVector2_t const&, float, float, float, float, float, vr::HmdVector2_t const&, vr::VRTextureBounds_t const&)
 t ComputeXrViewForEye(vr::EVREye, XrPosef const&, CFrameData*)
 t ComputedBoolSettingForString(std::string const&)
 t ConfigCachedActionValue_t::ConfigCachedActionValue_t(ConfigCachedActionValue_t const&)
 t ConfigCachedActionValue_t::~ConfigCachedActionValue_t()
 t ControlPanelInterfaceRegistration<CVRControlPanel_001>::GetInterface()
 t ControlPanelInterfaceRegistration<CVRControlPanel_001>::~ControlPanelInterfaceRegistration()
 t ControlPanelInterfaceRegistration<CVRControlPanel_002>::GetInterface()
 t ControlPanelInterfaceRegistration<CVRControlPanel_002>::~ControlPanelInterfaceRegistration()
 t ControlPanelInterfaceRegistration<CVRControlPanel_003>::GetInterface()
 t ControlPanelInterfaceRegistration<CVRControlPanel_003>::~ControlPanelInterfaceRegistration()
 t ControlPanelInterfaceRegistration<CVRControlPanel_004>::GetInterface()
 t ControlPanelInterfaceRegistration<CVRControlPanel_004>::~ControlPanelInterfaceRegistration()
 t ControlPanelInterfaceRegistration<CVRControlPanel_005>::GetInterface()
 t ControlPanelInterfaceRegistration<CVRControlPanel_005>::~ControlPanelInterfaceRegistration()
 t ControllerAvailabilityState::BControllerPathAvailableAndMatchesType(std::string const&, std::string const&) const [clone .isra.0]
 t ControllerAvailabilityState::BPathAvailable(std::string const&) const
 t ControllerAvailabilityState::ControllerAvailabilityState(std::string const&)
 t ControllerButtonsToMouseButtons(unsigned long)
 t ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)
 t ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType) [clone .cold]
 t ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)::{lambda(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)#1}::operator()(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&) const [clone .constprop.0]
 t ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)::{lambda(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)#1}::operator()(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&) const [clone .constprop.0] [clone .cold]
 t ConvertPublicEventToTrackingEvent(VRSharedEvent_t*, vr::VREvent_t const&)
 t ConvertToV1EventStruct(Old_VREvent_t*, vr::VREvent_t const*)
 t ConvertTrackingEventToPublicEvent(vr::VREvent_t*, VRSharedEvent_t const&, unsigned int)
 t CopyText(char const*, char*, unsigned int)
 t CreateCompositorDriverProviderAdapter(void* (*)(char const*, int*), vr::IVRDriverContext*, int*)
 t CreateFallbackURL(CInputActionDefaultBindingFile)
 t CreateOverlayInternal(VRSystemLayerState_t*, char const*, char const*, unsigned long*)
 t CreateServerDriverProviderAdapter(void* (*)(char const*, int*), vr::IVRDriverContext*, int*)
 t CreateSettingKey(char const*, char const*)
 t CreateSettingKey(char const*, char const*) [clone .cold]
 t CreateSimpleProcess
 t CreateSimpleThread(unsigned int (*)(void*), void*, unsigned int*, unsigned int)
 t CreateWatchdogDriverProviderAdapter(void* (*)(char const*, int*), vr::IVRDriverContext*, int*)
 t DXGI1::GetAdapterDescription(int, wchar_t*, unsigned int)
 t DXGI1::GetAdapterIndex(unsigned long, int*)
 t DXGI1::GetAdapterLuid(int, unsigned long*)
 t DashboardManagerInterfaceRegistration<CVRDashboardManager_001>::GetInterface()
 t DashboardManagerInterfaceRegistration<CVRDashboardManager_001>::~DashboardManagerInterfaceRegistration()
 t DebugDriverLog(char const*, ...)
 t DebugMessengerCallback(VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*, void*)
 t DeclareCurrentThreadIsMainThread
 t DirectX::XMMatrixInverse(DirectX::__vector4*, DirectX::XMMATRIX const&)
 t DriverCompare(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)
 t DriverLog(char const*, ...)
 t DriverLogString(char const*)
 t DriverLogVarArgs(char const*, __va_list_tag*)
 t Drm::BoAlloc(amdgpu_bo_alloc_request*, amdgpu_bo**)
 t Drm::BoCpuMap(amdgpu_bo*, unsigned char**)
 t Drm::BoCpuUnmap(amdgpu_bo*)
 t Drm::BoFree(amdgpu_bo*)
 t Drm::BoImport(amdgpu_bo_handle_type, unsigned int, amdgpu_bo_import_result*)
 t Drm::BoListCreate(unsigned int, amdgpu_bo**, unsigned char*, amdgpu_bo_list**)
 t Drm::BoListDestroy(amdgpu_bo_list*)
 t Drm::BoVaOp(amdgpu_bo*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned int)
 t Drm::CsQueryFenceStatus(amdgpu_cs_fence*, unsigned long, unsigned long, unsigned int*)
 t Drm::CsSubmit(unsigned long, amdgpu_cs_request*, unsigned int)
 t Drm::Drm()
 t Drm::Init()
 t Drm::LoadEntrypoints()
 t Drm::QueryFirmwareVersion(unsigned int, unsigned int, unsigned int, unsigned int*, unsigned int*)
 t Drm::VaRangeAlloc(amdgpu_gpu_va_range, unsigned long, unsigned long, unsigned long, unsigned long*, amdgpu_va**, unsigned long)
 t Drm::VaRangeFree(amdgpu_va*)
 t Drm::~Drm()
 t DumpCallTimes()
 t DumpLogStrings(CVRLog*, std::vector<std::string, std::allocator<std::string> >&)
 t DumpLogStrings(std::vector<std::string, std::allocator<std::string> >&)
 t EnableWebDebugger()
 t EventWriteString(char const*, EVRTraceEvent)
 t EventWriteStringBegin(char const*, unsigned long)
 t EventWriteStringEnd(char const*, unsigned long)
 t EventWriteStringF(char const*, ...)
 t ExportVulkanMemoryAsFD(VkDevice_T*, VkDeviceMemory_T*, int*)
 t ExportVulkanSemaphoreAsFD(VkDevice_T*, VkSemaphore_T*, int*)
 t FileSelect(dirent const*)
 t FillDataStruct(_finddata_t*)
 t FillPipeAddr(sockaddr_un&, std::string)
 t FillPipeAddr(sockaddr_un&, std::string) [clone .cold]
 t FindActionSetLocalizedString(std::string const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&, std::string const&)
 t FindAppByKey(VRApplicationsState_t const*, char const*)
 t FindAppByProcessId(VRApplicationsState_t const*, unsigned int)
 t FindBestInterfaceMatch(char const*, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t FindInterface(char const*)
 t FindLanguageTag(Json::Value const&, std::string const&)
 t FindLanguageTag(Json::Value const&, std::string const&) [clone .cold]
 t FindOverlayByKey(VRSystemLayerState_t const*, char const*, unsigned long*)
 t FindOverlayTextureReadLock(VRCompositor_OverlayState_t const&, unsigned int, unsigned int*, unsigned int*)
 t FnTableRegistration::FnTableRegistration(char const*, void*)
 t FnTableRegistration::~FnTableRegistration()
 t Format(char const*, ...)
 t Format(char const*, ...) [clone .cold]
 t FormatStdString(char const*, ...)
 t ForwardRequestToServer(XrSession_T*, Json::Value&&)
 t ForwardRequestToServer(XrSession_T*, Json::Value&&) [clone .cold]
 t GenerateInteractionProfiles(CSxrInstance*)
 t GenerateLinuxManifest(std::string, std::string)
 t GenerateLinuxManifest(std::string, std::string) [clone .cold]
 t GenericInterfaceRegistration::GetInterface()
 t GenericInterfaceRegistration::~GenericInterfaceRegistration()
 t GetActionBindingCategoryEnumFromName(std::string const&)
 t GetActionBindingCategoryNameFromEnum(EActionBindingCategory)
 t GetApplicationStringPropertyFromManifest(vr::EVRApplicationProperty, CVRMsg_ApplicationInfo_Manifest const&, vr::EVRApplicationError*, std::string&)
 t GetBacktraceStrings(std::vector<std::string, std::allocator<std::string> >&) [clone .constprop.0]
 t GetBacktraceStrings(std::vector<std::string, std::allocator<std::string> >&) [clone .constprop.0] [clone .cold]
 t GetCommandLineArguments(std::vector<std::string, std::allocator<std::string> >&)
 t GetCommandLineArguments(std::vector<std::string, std::allocator<std::string> >&) [clone .cold]
 t GetCommandOutput(std::string const&, std::string*, std::string*)
 t GetCommandOutput(std::string const&, std::string*, std::string*) [clone .cold]
 t GetDashboardDesktopProvider()
 t GetDefaultClientCore()
 t GetDefaultCompositorClient()
 t GetDefaultManifestPath()
 t GetDefaultManifestPath() [clone .cold]
 t GetDefaultOverlay()
 t GetDefaultSystem()
 t GetDpadBindings(char const*)
 t GetDpadBindings(char const*) [clone .cold]
 t GetDpadDirection(std::string)
 t GetDpadSubMode(std::string)
 t GetEnglishStringForHmdError(vr::EVRInitError)
 t GetEnvironmentVariable(char const*)
 t GetEnvironmentVariableAsBool(char const*, bool)
 t GetEnvironmentVariableAsBool(char const*, bool) [clone .cold]
 t GetExtensionsAsVector(char const*, unsigned int, std::vector<std::string, std::allocator<std::string> >&) [clone .constprop.0]
 t GetExtensionsAsVector(char const*, unsigned int, std::vector<std::string, std::allocator<std::string> >&) [clone .constprop.0] [clone .cold]
 t GetFileCreateTime(char const*, long*)
 t GetFileLength(char const*)
 t GetFilenameTimeString()
 t GetGMUnixTime()
 t GetGMUnixTimeAtNextLocalTime(unsigned long, int, int, int)
 t GetGenericInterfaceInternal(char const*, vr::EVRInitError*)
 t GetHMDLatestInterfaceInternal()
 t GetHmdErrorPriority(vr::EVRInitError)
 t GetIDForVRInitError(vr::EVRInitError)
 t GetInputPathTypes(unsigned long, unsigned long)
 t GetInputSourceType(Json::Value const&, std::string)
 t GetInputSourceType(Json::Value const&, std::string) [clone .cold]
 t GetInputValueVisibilityFromString(char const*)
 t GetLinuxBaseManifestPath()
 t GetLinuxBaseManifestPath() [clone .cold]
 t GetManifestPath()
 t GetManifestPath() [clone .cold]
 t GetMaxPriorityForApplicationType(vr::EVRApplicationType)
 t GetModuleRelativeRuntimeDir()
 t GetModuleRelativeRuntimeDir() [clone .cold]
 t GetNamespacingUid()
 t GetNamespacingUid() [clone .cold]
 t GetNextEventId()
 t GetNotificationImageMemoryName(unsigned int, char*, unsigned int)
 t GetOneBoolSettingSlowly(char const*, char const*, vr::EVRSettingsError*)
 t GetOneBoolSettingSlowly(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t GetOpenGLFunctions() [clone .part.0]
 t GetOpenXrActiveRuntimePath()
 t GetOpenXrActiveRuntimePath() [clone .cold]
 t GetOpenXrApiLayerRegistryPath(bool)
 t GetOpenXrAvailableRuntimesPath()
 t GetOverlayTextureToWrite(VRCompositor_OverlayState_t const&, int*, unsigned int*)
 t GetRawFromReferenceSpace(XrSpaceLocation&, XrSpaceVelocity&, long, XrReferenceSpaceType)
 t GetResourceBaseDir()
 t GetResourceBaseDir() [clone .cold]
 t GetRuntimeLibraryPath()
 t GetRuntimeLibraryPath() [clone .cold]
 t GetSceneApplicationState(VRApplicationsState_t const*)
 t GetSharedResourceNamespace()
 t GetSharedResourceNamespace() [clone .cold]
 t GetSteamVRLanguage(ISteamUtils*)
 t GetStringForCompositorError(vr::EVRCompositorError)
 t GetStringForInputActionType(EInputActionType)
 t GetStringForInputValueType(EInputValueType)
 t GetStringForInputValueVisibility(EInputValueVisibility)
 t GetStringForPropertyError(vr::ETrackedPropertyError)
 t GetStringForPropertyTypeTag(unsigned int)
 t GetStringForRenderModelError(vr::EVRRenderModelError)
 t GetStringForScalarType(vr::EVRScalarType)
 t GetStringForScalarUnits(vr::EVRScalarUnits)
 t GetStringForSceneApplicationState(vr::EVRSceneApplicationState)
 t GetStringForTrackedControllerRole(vr::ETrackedControllerRole)
 t GetStringForTrackedDeviceClass(vr::ETrackedDeviceClass)
 t GetStringForTrackedDeviceProperty(vr::ETrackedDeviceProperty)
 t GetStringForTrackerRole(ETrackerRole)
 t GetStringForTransitionState(EPrivateApplicationTransitionState)
 t GetStringForVRApplicationType(vr::EVRApplicationType)
 t GetStringForVRApplicationsError(vr::EVRApplicationError)
 t GetStringForVRButtonId(vr::EVRButtonId)
 t GetStringForVRControllerAxisType(vr::EVRControllerAxisType)
 t GetStringForVREventType(vr::EVREventType)
 t GetStringForVRInputError(vr::EVRInputError)
 t GetStringForVRMsgType(VRMsgType)
 t GetStringForVRNotificationError(vr::EVRNotificationError)
 t GetStringForVROverlayError(vr::EVROverlayError)
 t GetStringForVROverlayFlags(vr::VROverlayFlags)
 t GetStringForVRSettingsError(vr::EVRSettingsError)
 t GetStringForVRTrackedCameraError(vr::EVRTrackedCameraError)
 t GetStringForXrSessionState(XrSessionState)
 t GetStringFromInternalInputFocus(EVRInternalSystemBehaviorFlags)
 t GetSubmitFlagsFromTextureDetails(float const (&) [4][4])
 t GetSystemBaseTicks()
 t GetSystemTicksFromTime(double)
 t GetSystemTime()
 t GetSystemTimeFrequency()
 t GetSystemTimeFromTicks(unsigned long)
 t GetSystemTimeInTicks()
 t GetTextureBoundsFromTextureDetails(float const (&) [4][4])
 t GetTraceMarkerFd()
 t GetTraceMarkerFd() [clone .cold]
 t GetTrackedControllerRoleFromString(char const*)
 t GetTrackedDeviceClassFromString(char const*)
 t GetTrackedDeviceProperties()
 t GetTrackedDeviceProperties() [clone .cold]
 t GetTrackedDeviceString(vr::IVRSystem*, unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t GetTrackerRoleFromString(std::string const&)
 t GetUserDocumentsPath()
 t GetVRLog()
 t GetVRLogTimeString(bool)
 t GetVulkanDeviceFunctions(VkDevice_T*)
 t GetVulkanInstanceExtensionsRequiredImpl(char*, unsigned int)
 t GetVulkanInstanceExtensionsRequiredImpl(char*, unsigned int) [clone .cold]
 t HasInterfaceAdapter(char const*)
 t HmdInterfaceRegistration<CHmd_001>::GetInterface()
 t HmdInterfaceRegistration<CHmd_001>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CHmd_002>::GetInterface()
 t HmdInterfaceRegistration<CHmd_002>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CHmd_003>::GetInterface()
 t HmdInterfaceRegistration<CHmd_003>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CHmd_004>::GetInterface()
 t HmdInterfaceRegistration<CHmd_004>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CHmd_005>::GetInterface()
 t HmdInterfaceRegistration<CHmd_005>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CHmd_006>::GetInterface()
 t HmdInterfaceRegistration<CHmd_006>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_001>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_001>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_002>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_002>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_003>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_003>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_004>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_004>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_005>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_005>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_006>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_006>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_007>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_007>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_008>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_008>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_009>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_009>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_010>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_010>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_011>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_011>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_012>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_012>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_013>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_013>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_014>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_014>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_015>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_015>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_016>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_016>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_017>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_017>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_018>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_018>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_019>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_019>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_020>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_020>::~HmdInterfaceRegistration()
 t HmdInterfaceRegistration<CVRSystem_021>::GetInterface()
 t HmdInterfaceRegistration<CVRSystem_021>::~HmdInterfaceRegistration()
 t HmdMatrix34FromJson(Json::Value const&, vr::HmdMatrix34_t&)
 t HmdMatrix34ToJson(vr::HmdMatrix34_t const&)
 t HmdMatrix34ToJson(vr::HmdMatrix34_t const&) [clone .cold]
 t HmdMatrix_34to44(vr::HmdMatrix34_t const&)
 t HmdMatrix_GetRotationEuler(vr::HmdMatrix34_t const&)
 t HmdMatrix_Invert(vr::HmdMatrix34_t const&, bool*)
 t HmdMatrix_Invert(vr::HmdMatrix44_t const&, vr::HmdMatrix44_t*)
 t HmdMatrix_InvertTR(vr::HmdMatrix34_t const&)
 t HmdMatrix_Multiply(vr::HmdMatrix34_t const&, vr::HmdMatrix34_t const&)
 t HmdMatrix_Multiply(vr::HmdMatrix44_t const&, vr::HmdMatrix44_t const&)
 t HmdVector2FromJson(Json::Value const&, vr::HmdVector2_t&)
 t HmdVector2ToJson(vr::HmdVector2_t const&)
 t HmdVector2ToJson(vr::HmdVector2_t const&) [clone .cold]
 t HmdVector3FromJson(Json::Value const&, vr::HmdVector3_t&)
 t HmdVector3FromJson(Json::Value const&, vr::HmdVector3d_t&)
 t HmdVector3ToJson(vr::HmdVector3_t const&)
 t HmdVector3ToJson(vr::HmdVector3_t const&) [clone .cold]
 t HmdVector3ToJson(vr::HmdVector3d_t const&)
 t HmdVector3ToJson(vr::HmdVector3d_t const&) [clone .cold]
 t IHmdSystem_002::Cleanup()
 t IHmdSystem_002::GetCurrentHmd(char const*)
 t IHmdSystem_002::GetGenericInterface(char const*, vr::EVRInitError*)
 t IHmdSystem_002::Init(char const*, char const*)
 t IHmdSystem_002::IsInterfaceVersionValid(char const*)
 t IHmdSystem_003::BIsHmdPresent()
 t IHmdSystem_003::Cleanup()
 t IHmdSystem_003::GetCurrentHmd(char const*)
 t IHmdSystem_003::GetGenericInterface(char const*, vr::EVRInitError*)
 t IHmdSystem_003::GetStringForHmdError(vr::EVRInitError)
 t IHmdSystem_003::Init(char const*, char const*)
 t IHmdSystem_003::IsInterfaceVersionValid(char const*)
 t IInputFilter::Create(IInputFilterValueStore*, CActionFilter const&)
 t IInputFilter::Create(IInputFilterValueStore*, CActionFilter const&) [clone .cold]
 t IInputFilterValueStore::GetDevicePose(vr::ETrackingUniverseOrigin, unsigned long, float, vr::TrackedDevicePose_t*)
 t IInputFilterValueStore::ReadDebugValue(unsigned long)
 t IInputFilterValueStore::TriggerHapticVibration(unsigned long, unsigned long, unsigned long, float, float, float, float)
 t IOBufferInterfaceRegistration<CVRIOBuffer_001>::GetInterface()
 t IOBufferInterfaceRegistration<CVRIOBuffer_001>::~IOBufferInterfaceRegistration()
 t IOBufferInterfaceRegistration<CVRIOBuffer_002>::GetInterface()
 t IOBufferInterfaceRegistration<CVRIOBuffer_002>::~IOBufferInterfaceRegistration()
 t IPC::CIPCHandle::Import() const
 t IPC::CIPCHandle::InitForExport(IPC::TSharedHandleBase<int, -1>, unsigned int)
 t IPC::CreateEvent(char const*, bool, bool, bool*, bool)
 t IPC::CreateEventWithNamespace(std::string const&, bool, bool, bool*)
 t IPC::CreateEventWithNamespace(std::string const&, bool, bool, bool*) [clone .cold]
 t IPC::CreateMutex(char const*, bool, bool*, bool)
 t IPC::CreateMutexWithNamespace(std::string const&, bool, bool*)
 t IPC::CreateMutexWithNamespace(std::string const&, bool, bool*) [clone .cold]
 t IPC::CreateSharedMem(char const*, unsigned int, IPC::ISharedMem::Access, bool*, bool)
 t IPC::CreateSharedMemWithNamespace(std::string const&, unsigned int, IPC::ISharedMem::Access, bool*)
 t IPC::CreateSharedMemWithNamespace(std::string const&, unsigned int, IPC::ISharedMem::Access, bool*) [clone .cold]
 t IPC::ISharedMem::GetOpaque() const
 t IPC::ISyncObject::GetOpaque() const
 t IPC::InitializeSharedObjectManager()
 t IPC::LinuxSharedFd::Init(int)
 t IPC::LinuxSharedFd::Init(unsigned long)
 t IPC::LinuxSharedFd::SendTrampoline(void*)
 t IPC::PosixSharedMemory::Destroy()
 t IPC::PosixSharedMemory::Init(char const*, unsigned int, IPC::ISharedMem::Access, bool*, bool)
 t IPC::PosixSharedMemory::IsValid() const
 t IPC::PosixSharedMemory::Pointer() const
 t IPC::PosixSharedMemory::~PosixSharedMemory()
 t IPC::PurgeAllDead()
 t IPC::PurgeCurrentProcess()
 t IPC::ReceiveSharedFd(unsigned long, int&)
 t IPC::SendSharedFd(int, unsigned long&)
 t IPC::SharedObjMgr()
 t IPC::SharedObjectEvent::Destroy()
 t IPC::SharedObjectEvent::ResetEvent()
 t IPC::SharedObjectEvent::SetEvent()
 t IPC::SharedObjectEvent::Wait(unsigned int)
 t IPC::SharedObjectEvent::~SharedObjectEvent()
 t IPC::SharedObjectManager::Init(bool)
 t IPC::SharedObjectManager::Purge(int) [clone .isra.0]
 t IPC::SharedObjectManager::~SharedObjectManager()
 t IPC::SharedObjectMutex::Destroy()
 t IPC::SharedObjectMutex::Release()
 t IPC::SharedObjectMutex::Wait(unsigned int)
 t IPC::SharedObjectMutex::~SharedObjectMutex()
 t IPC::WaitMultiple(unsigned int, unsigned int, IPC::ISyncObject*, ...)
 t IPC::crc32(unsigned int, void const*, unsigned long) [clone .constprop.0]
 t IVRApplications_004_FnTable_AddApplicationManifest(char const*, bool)
 t IVRApplications_004_FnTable_CancelApplicationLaunch(char const*)
 t IVRApplications_004_FnTable_GetApplicationAutoLaunch(char const*)
 t IVRApplications_004_FnTable_GetApplicationCount()
 t IVRApplications_004_FnTable_GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t IVRApplications_004_FnTable_GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t IVRApplications_004_FnTable_GetApplicationProcessId(char const*)
 t IVRApplications_004_FnTable_GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t IVRApplications_004_FnTable_GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t IVRApplications_004_FnTable_GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t IVRApplications_004_FnTable_GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t IVRApplications_004_FnTable_GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t IVRApplications_004_FnTable_GetStartingApplication(char*, unsigned int)
 t IVRApplications_004_FnTable_GetTransitionState()
 t IVRApplications_004_FnTable_IdentifyApplication(unsigned int, char const*)
 t IVRApplications_004_FnTable_IsApplicationInstalled(char const*)
 t IVRApplications_004_FnTable_IsQuitUserPromptRequested()
 t IVRApplications_004_FnTable_LaunchApplication(char const*)
 t IVRApplications_004_FnTable_LaunchDashboardOverlay(char const*)
 t IVRApplications_004_FnTable_LaunchInternalProcess(char const*, char const*, char const*)
 t IVRApplications_004_FnTable_PerformApplicationPrelaunchCheck(char const*)
 t IVRApplications_004_FnTable_RemoveApplicationManifest(char const*)
 t IVRApplications_004_FnTable_SetApplicationAutoLaunch(char const*, bool)
 t IVRApplications_005_FnTable_AddApplicationManifest(char const*, bool)
 t IVRApplications_005_FnTable_CancelApplicationLaunch(char const*)
 t IVRApplications_005_FnTable_GetApplicationAutoLaunch(char const*)
 t IVRApplications_005_FnTable_GetApplicationCount()
 t IVRApplications_005_FnTable_GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t IVRApplications_005_FnTable_GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t IVRApplications_005_FnTable_GetApplicationProcessId(char const*)
 t IVRApplications_005_FnTable_GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t IVRApplications_005_FnTable_GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t IVRApplications_005_FnTable_GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t IVRApplications_005_FnTable_GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t IVRApplications_005_FnTable_GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t IVRApplications_005_FnTable_GetStartingApplication(char*, unsigned int)
 t IVRApplications_005_FnTable_GetTransitionState()
 t IVRApplications_005_FnTable_IdentifyApplication(unsigned int, char const*)
 t IVRApplications_005_FnTable_IsApplicationInstalled(char const*)
 t IVRApplications_005_FnTable_IsQuitUserPromptRequested()
 t IVRApplications_005_FnTable_LaunchApplication(char const*)
 t IVRApplications_005_FnTable_LaunchDashboardOverlay(char const*)
 t IVRApplications_005_FnTable_LaunchInternalProcess(char const*, char const*, char const*)
 t IVRApplications_005_FnTable_LaunchTemplateApplication(char const*, char const*, vr::AppOverrideKeys_t const*, unsigned int)
 t IVRApplications_005_FnTable_PerformApplicationPrelaunchCheck(char const*)
 t IVRApplications_005_FnTable_RemoveApplicationManifest(char const*)
 t IVRApplications_005_FnTable_SetApplicationAutoLaunch(char const*, bool)
 t IVRApplications_006_FnTable_AddApplicationManifest(char const*, bool)
 t IVRApplications_006_FnTable_CancelApplicationLaunch(char const*)
 t IVRApplications_006_FnTable_GetApplicationAutoLaunch(char const*)
 t IVRApplications_006_FnTable_GetApplicationCount()
 t IVRApplications_006_FnTable_GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t IVRApplications_006_FnTable_GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t IVRApplications_006_FnTable_GetApplicationLaunchArguments(unsigned int, char*, unsigned int)
 t IVRApplications_006_FnTable_GetApplicationProcessId(char const*)
 t IVRApplications_006_FnTable_GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t IVRApplications_006_FnTable_GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t IVRApplications_006_FnTable_GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t IVRApplications_006_FnTable_GetApplicationSupportedMimeTypes(char const*, char*, unsigned int)
 t IVRApplications_006_FnTable_GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t IVRApplications_006_FnTable_GetApplicationsThatSupportMimeType(char const*, char*, unsigned int)
 t IVRApplications_006_FnTable_GetApplicationsTransitionStateNameFromEnum(vr::EVRApplicationTransitionState)
 t IVRApplications_006_FnTable_GetCurrentSceneProcessId()
 t IVRApplications_006_FnTable_GetDefaultApplicationForMimeType(char const*, char*, unsigned int)
 t IVRApplications_006_FnTable_GetStartingApplication(char*, unsigned int)
 t IVRApplications_006_FnTable_GetTransitionState()
 t IVRApplications_006_FnTable_IdentifyApplication(unsigned int, char const*)
 t IVRApplications_006_FnTable_IsApplicationInstalled(char const*)
 t IVRApplications_006_FnTable_IsQuitUserPromptRequested()
 t IVRApplications_006_FnTable_LaunchApplication(char const*)
 t IVRApplications_006_FnTable_LaunchApplicationFromMimeType(char const*, char const*)
 t IVRApplications_006_FnTable_LaunchDashboardOverlay(char const*)
 t IVRApplications_006_FnTable_LaunchInternalProcess(char const*, char const*, char const*)
 t IVRApplications_006_FnTable_LaunchTemplateApplication(char const*, char const*, vr::AppOverrideKeys_t const*, unsigned int)
 t IVRApplications_006_FnTable_PerformApplicationPrelaunchCheck(char const*)
 t IVRApplications_006_FnTable_RemoveApplicationManifest(char const*)
 t IVRApplications_006_FnTable_SetApplicationAutoLaunch(char const*, bool)
 t IVRApplications_006_FnTable_SetDefaultApplicationForMimeType(char const*, char const*)
 t IVRCameraComponent002::GetCameraDistortion(float, float, float*, float*)
 t IVRCameraComponent002::GetCameraIntrinsics(vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t IVRCameraComponent002::GetCameraProjection(vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t IVRChaperoneSetup_005_FnTable_CommitWorkingCopy(vr::EChaperoneConfigFile)
 t IVRChaperoneSetup_005_FnTable_ExportLiveToBuffer(char*, unsigned int*)
 t IVRChaperoneSetup_005_FnTable_GetLiveCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t IVRChaperoneSetup_005_FnTable_GetLiveCollisionBoundsTagsInfo(unsigned char*, unsigned int*)
 t IVRChaperoneSetup_005_FnTable_GetLivePhysicalBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t IVRChaperoneSetup_005_FnTable_GetLiveSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t IVRChaperoneSetup_005_FnTable_GetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t IVRChaperoneSetup_005_FnTable_GetWorkingPlayAreaRect(vr::HmdQuad_t*)
 t IVRChaperoneSetup_005_FnTable_GetWorkingPlayAreaSize(float*, float*)
 t IVRChaperoneSetup_005_FnTable_GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t IVRChaperoneSetup_005_FnTable_GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t IVRChaperoneSetup_005_FnTable_ImportFromBufferToWorking(char const*, unsigned int)
 t IVRChaperoneSetup_005_FnTable_ReloadFromDisk(vr::EChaperoneConfigFile)
 t IVRChaperoneSetup_005_FnTable_RevertWorkingCopy()
 t IVRChaperoneSetup_005_FnTable_SetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t IVRChaperoneSetup_005_FnTable_SetWorkingCollisionBoundsTagsInfo(unsigned char*, unsigned int)
 t IVRChaperoneSetup_005_FnTable_SetWorkingPhysicalBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t IVRChaperoneSetup_005_FnTable_SetWorkingPlayAreaSize(float, float)
 t IVRChaperoneSetup_005_FnTable_SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t IVRChaperoneSetup_005_FnTable_SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t IVRChaperone_003_FnTable_AreBoundsVisible()
 t IVRChaperone_003_FnTable_ForceBoundsVisible(bool)
 t IVRChaperone_003_FnTable_GetBoundsColor(vr::HmdColor_t*, int, float, vr::HmdColor_t*)
 t IVRChaperone_003_FnTable_GetCalibrationState()
 t IVRChaperone_003_FnTable_GetPlayAreaRect(vr::HmdQuad_t*)
 t IVRChaperone_003_FnTable_GetPlayAreaSize(float*, float*)
 t IVRChaperone_003_FnTable_ReloadInfo()
 t IVRChaperone_003_FnTable_SetSceneColor(vr::HmdColor_t)
 t IVRCompositor_013_FnTable_CanRenderScene()
 t IVRCompositor_013_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_013_FnTable_ClearSkyboxOverride()
 t IVRCompositor_013_FnTable_CompositorBringToFront()
 t IVRCompositor_013_FnTable_CompositorDumpImages()
 t IVRCompositor_013_FnTable_CompositorGoToBack()
 t IVRCompositor_013_FnTable_CompositorQuit()
 t IVRCompositor_013_FnTable_FadeGrid(float, bool)
 t IVRCompositor_013_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_013_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_013_FnTable_ForceReconnectProcess()
 t IVRCompositor_013_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_013_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_013_FnTable_GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t IVRCompositor_013_FnTable_GetLastFrameRenderer()
 t IVRCompositor_013_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_013_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_013_FnTable_GetTrackingSpace()
 t IVRCompositor_013_FnTable_HideMirrorWindow()
 t IVRCompositor_013_FnTable_IsFullscreen()
 t IVRCompositor_013_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_013_FnTable_PostPresentHandoff()
 t IVRCompositor_013_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_013_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_013_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_013_FnTable_ShowMirrorWindow()
 t IVRCompositor_013_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_013_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_014_FnTable_CanRenderScene()
 t IVRCompositor_014_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_014_FnTable_ClearSkyboxOverride()
 t IVRCompositor_014_FnTable_CompositorBringToFront()
 t IVRCompositor_014_FnTable_CompositorDumpImages()
 t IVRCompositor_014_FnTable_CompositorGoToBack()
 t IVRCompositor_014_FnTable_CompositorQuit()
 t IVRCompositor_014_FnTable_FadeGrid(float, bool)
 t IVRCompositor_014_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_014_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_014_FnTable_ForceReconnectProcess()
 t IVRCompositor_014_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_014_FnTable_GetCurrentScreenshotType()
 t IVRCompositor_014_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_014_FnTable_GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t IVRCompositor_014_FnTable_GetLastFrameRenderer()
 t IVRCompositor_014_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_014_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_014_FnTable_GetTrackingSpace()
 t IVRCompositor_014_FnTable_HideMirrorWindow()
 t IVRCompositor_014_FnTable_IsFullscreen()
 t IVRCompositor_014_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_014_FnTable_PostPresentHandoff()
 t IVRCompositor_014_FnTable_RequestScreenshot(vr::EVRScreenshotType, char const*)
 t IVRCompositor_014_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_014_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_014_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_014_FnTable_ShowMirrorWindow()
 t IVRCompositor_014_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_014_FnTable_SuspendRendering(bool)
 t IVRCompositor_014_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_015_FnTable_CanRenderScene()
 t IVRCompositor_015_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_015_FnTable_ClearSkyboxOverride()
 t IVRCompositor_015_FnTable_CompositorBringToFront()
 t IVRCompositor_015_FnTable_CompositorDumpImages()
 t IVRCompositor_015_FnTable_CompositorGoToBack()
 t IVRCompositor_015_FnTable_CompositorQuit()
 t IVRCompositor_015_FnTable_FadeGrid(float, bool)
 t IVRCompositor_015_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_015_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_015_FnTable_ForceReconnectProcess()
 t IVRCompositor_015_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_015_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_015_FnTable_GetCurrentScreenshotType()
 t IVRCompositor_015_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_015_FnTable_GetFrameTiming(Compositor_FrameTiming_015*, unsigned int)
 t IVRCompositor_015_FnTable_GetLastFrameRenderer()
 t IVRCompositor_015_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_015_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_015_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_015_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_015_FnTable_GetTrackingSpace()
 t IVRCompositor_015_FnTable_HideMirrorWindow()
 t IVRCompositor_015_FnTable_IsFullscreen()
 t IVRCompositor_015_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_015_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_015_FnTable_PostPresentHandoff()
 t IVRCompositor_015_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_015_FnTable_RequestScreenshot(vr::EVRScreenshotType, char const*, char const*)
 t IVRCompositor_015_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_015_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_015_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_015_FnTable_ShowMirrorWindow()
 t IVRCompositor_015_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_015_FnTable_SuspendRendering(bool)
 t IVRCompositor_015_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_015_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_016_FnTable_CanRenderScene()
 t IVRCompositor_016_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_016_FnTable_ClearSkyboxOverride()
 t IVRCompositor_016_FnTable_CompositorBringToFront()
 t IVRCompositor_016_FnTable_CompositorDumpImages()
 t IVRCompositor_016_FnTable_CompositorGoToBack()
 t IVRCompositor_016_FnTable_CompositorQuit()
 t IVRCompositor_016_FnTable_FadeGrid(float, bool)
 t IVRCompositor_016_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_016_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_016_FnTable_ForceReconnectProcess()
 t IVRCompositor_016_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_016_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_016_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_016_FnTable_GetFrameTiming(Compositor_FrameTiming_016*, unsigned int)
 t IVRCompositor_016_FnTable_GetLastFrameRenderer()
 t IVRCompositor_016_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_016_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_016_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_016_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_016_FnTable_GetTrackingSpace()
 t IVRCompositor_016_FnTable_HideMirrorWindow()
 t IVRCompositor_016_FnTable_IsFullscreen()
 t IVRCompositor_016_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_016_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_016_FnTable_PostPresentHandoff()
 t IVRCompositor_016_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_016_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_016_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_016_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_016_FnTable_ShowMirrorWindow()
 t IVRCompositor_016_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_016_FnTable_SuspendRendering(bool)
 t IVRCompositor_016_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_016_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_017_FnTable_CanRenderScene()
 t IVRCompositor_017_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_017_FnTable_ClearSkyboxOverride()
 t IVRCompositor_017_FnTable_CompositorBringToFront()
 t IVRCompositor_017_FnTable_CompositorDumpImages()
 t IVRCompositor_017_FnTable_CompositorGoToBack()
 t IVRCompositor_017_FnTable_CompositorQuit()
 t IVRCompositor_017_FnTable_FadeGrid(float, bool)
 t IVRCompositor_017_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_017_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_017_FnTable_ForceReconnectProcess()
 t IVRCompositor_017_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_017_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_017_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_017_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_017_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_017_FnTable_GetLastFrameRenderer()
 t IVRCompositor_017_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_017_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_017_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_017_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_017_FnTable_GetTrackingSpace()
 t IVRCompositor_017_FnTable_HideMirrorWindow()
 t IVRCompositor_017_FnTable_IsFullscreen()
 t IVRCompositor_017_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_017_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_017_FnTable_PostPresentHandoff()
 t IVRCompositor_017_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_017_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_017_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_017_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_017_FnTable_ShowMirrorWindow()
 t IVRCompositor_017_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_017_FnTable_SuspendRendering(bool)
 t IVRCompositor_017_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_017_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_018_FnTable_CanRenderScene()
 t IVRCompositor_018_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_018_FnTable_ClearSkyboxOverride()
 t IVRCompositor_018_FnTable_CompositorBringToFront()
 t IVRCompositor_018_FnTable_CompositorDumpImages()
 t IVRCompositor_018_FnTable_CompositorGoToBack()
 t IVRCompositor_018_FnTable_CompositorQuit()
 t IVRCompositor_018_FnTable_FadeGrid(float, bool)
 t IVRCompositor_018_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_018_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_018_FnTable_ForceReconnectProcess()
 t IVRCompositor_018_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_018_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_018_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_018_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_018_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_018_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_018_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_018_FnTable_GetLastFrameRenderer()
 t IVRCompositor_018_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_018_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_018_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_018_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_018_FnTable_GetTrackingSpace()
 t IVRCompositor_018_FnTable_HideMirrorWindow()
 t IVRCompositor_018_FnTable_IsFullscreen()
 t IVRCompositor_018_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_018_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_018_FnTable_PostPresentHandoff()
 t IVRCompositor_018_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_018_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_018_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_018_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_018_FnTable_ShowMirrorWindow()
 t IVRCompositor_018_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_018_FnTable_SuspendRendering(bool)
 t IVRCompositor_018_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_018_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_019_FnTable_CanRenderScene()
 t IVRCompositor_019_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_019_FnTable_ClearSkyboxOverride()
 t IVRCompositor_019_FnTable_CompositorBringToFront()
 t IVRCompositor_019_FnTable_CompositorDumpImages()
 t IVRCompositor_019_FnTable_CompositorGoToBack()
 t IVRCompositor_019_FnTable_CompositorQuit()
 t IVRCompositor_019_FnTable_FadeGrid(float, bool)
 t IVRCompositor_019_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_019_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_019_FnTable_ForceReconnectProcess()
 t IVRCompositor_019_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_019_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_019_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_019_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_019_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_019_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_019_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_019_FnTable_GetLastFrameRenderer()
 t IVRCompositor_019_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_019_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_019_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_019_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_019_FnTable_GetTrackingSpace()
 t IVRCompositor_019_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_019_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_019_FnTable_HideMirrorWindow()
 t IVRCompositor_019_FnTable_IsFullscreen()
 t IVRCompositor_019_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_019_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_019_FnTable_PostPresentHandoff()
 t IVRCompositor_019_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_019_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_019_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_019_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_019_FnTable_ShowMirrorWindow()
 t IVRCompositor_019_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_019_FnTable_SuspendRendering(bool)
 t IVRCompositor_019_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_019_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_020_FnTable_CanRenderScene()
 t IVRCompositor_020_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_020_FnTable_ClearSkyboxOverride()
 t IVRCompositor_020_FnTable_CompositorBringToFront()
 t IVRCompositor_020_FnTable_CompositorDumpImages()
 t IVRCompositor_020_FnTable_CompositorGoToBack()
 t IVRCompositor_020_FnTable_CompositorQuit()
 t IVRCompositor_020_FnTable_FadeGrid(float, bool)
 t IVRCompositor_020_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_020_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_020_FnTable_ForceReconnectProcess()
 t IVRCompositor_020_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_020_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_020_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_020_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_020_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_020_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_020_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_020_FnTable_GetLastFrameRenderer()
 t IVRCompositor_020_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_020_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_020_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_020_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_020_FnTable_GetTrackingSpace()
 t IVRCompositor_020_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_020_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_020_FnTable_HideMirrorWindow()
 t IVRCompositor_020_FnTable_IsFullscreen()
 t IVRCompositor_020_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_020_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_020_FnTable_PostPresentHandoff()
 t IVRCompositor_020_FnTable_ReleaseMirrorTextureD3D11(void*)
 t IVRCompositor_020_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_020_FnTable_SetExplicitTimingMode(bool)
 t IVRCompositor_020_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_020_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_020_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_020_FnTable_ShowMirrorWindow()
 t IVRCompositor_020_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_020_FnTable_SubmitExplicitTimingData()
 t IVRCompositor_020_FnTable_SuspendRendering(bool)
 t IVRCompositor_020_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_020_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_021_FnTable_CanRenderScene()
 t IVRCompositor_021_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_021_FnTable_ClearSkyboxOverride()
 t IVRCompositor_021_FnTable_CompositorBringToFront()
 t IVRCompositor_021_FnTable_CompositorDumpImages()
 t IVRCompositor_021_FnTable_CompositorGoToBack()
 t IVRCompositor_021_FnTable_CompositorQuit()
 t IVRCompositor_021_FnTable_FadeGrid(float, bool)
 t IVRCompositor_021_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_021_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_021_FnTable_ForceReconnectProcess()
 t IVRCompositor_021_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_021_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_021_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_021_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_021_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_021_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_021_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_021_FnTable_GetLastFrameRenderer()
 t IVRCompositor_021_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_021_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_021_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_021_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_021_FnTable_GetTrackingSpace()
 t IVRCompositor_021_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_021_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_021_FnTable_HideMirrorWindow()
 t IVRCompositor_021_FnTable_IsFullscreen()
 t IVRCompositor_021_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_021_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_021_FnTable_PostPresentHandoff()
 t IVRCompositor_021_FnTable_ReleaseMirrorTextureD3D11(void*)
 t IVRCompositor_021_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_021_FnTable_SetExplicitTimingMode(bool)
 t IVRCompositor_021_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_021_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_021_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_021_FnTable_ShowMirrorWindow()
 t IVRCompositor_021_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_021_FnTable_SubmitExplicitTimingData()
 t IVRCompositor_021_FnTable_SuspendRendering(bool)
 t IVRCompositor_021_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_021_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_022_FnTable_CanRenderScene()
 t IVRCompositor_022_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_022_FnTable_ClearSkyboxOverride()
 t IVRCompositor_022_FnTable_CompositorBringToFront()
 t IVRCompositor_022_FnTable_CompositorDumpImages()
 t IVRCompositor_022_FnTable_CompositorGoToBack()
 t IVRCompositor_022_FnTable_CompositorQuit()
 t IVRCompositor_022_FnTable_FadeGrid(float, bool)
 t IVRCompositor_022_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_022_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_022_FnTable_ForceReconnectProcess()
 t IVRCompositor_022_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_022_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_022_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_022_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_022_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_022_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_022_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_022_FnTable_GetLastFrameRenderer()
 t IVRCompositor_022_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_022_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_022_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_022_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_022_FnTable_GetTrackingSpace()
 t IVRCompositor_022_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_022_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_022_FnTable_HideMirrorWindow()
 t IVRCompositor_022_FnTable_IsCurrentSceneFocusAppLoading()
 t IVRCompositor_022_FnTable_IsFullscreen()
 t IVRCompositor_022_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_022_FnTable_IsMotionSmoothingEnabled()
 t IVRCompositor_022_FnTable_IsMotionSmoothingSupported()
 t IVRCompositor_022_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_022_FnTable_PostPresentHandoff()
 t IVRCompositor_022_FnTable_ReleaseMirrorTextureD3D11(void*)
 t IVRCompositor_022_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_022_FnTable_SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t IVRCompositor_022_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_022_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_022_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_022_FnTable_ShowMirrorWindow()
 t IVRCompositor_022_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_022_FnTable_SubmitExplicitTimingData()
 t IVRCompositor_022_FnTable_SuspendRendering(bool)
 t IVRCompositor_022_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_022_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_023_FnTable_CanRenderScene()
 t IVRCompositor_023_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_023_FnTable_ClearSkyboxOverride()
 t IVRCompositor_023_FnTable_ClearStageOverride()
 t IVRCompositor_023_FnTable_CompositorBringToFront()
 t IVRCompositor_023_FnTable_CompositorDumpImages()
 t IVRCompositor_023_FnTable_CompositorGoToBack()
 t IVRCompositor_023_FnTable_CompositorQuit()
 t IVRCompositor_023_FnTable_FadeGrid(float, bool)
 t IVRCompositor_023_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_023_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_023_FnTable_ForceReconnectProcess()
 t IVRCompositor_023_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_023_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_023_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_023_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_023_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_023_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_023_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_023_FnTable_GetLastFrameRenderer()
 t IVRCompositor_023_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_023_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_023_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_023_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_023_FnTable_GetTrackingSpace()
 t IVRCompositor_023_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_023_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_023_FnTable_HideMirrorWindow()
 t IVRCompositor_023_FnTable_IsCurrentSceneFocusAppLoading()
 t IVRCompositor_023_FnTable_IsFullscreen()
 t IVRCompositor_023_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_023_FnTable_IsMotionSmoothingEnabled()
 t IVRCompositor_023_FnTable_IsMotionSmoothingSupported()
 t IVRCompositor_023_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_023_FnTable_PostPresentHandoff()
 t IVRCompositor_023_FnTable_ReleaseMirrorTextureD3D11(void*)
 t IVRCompositor_023_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_023_FnTable_SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t IVRCompositor_023_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_023_FnTable_SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, float, float, vr::HmdColor_t const*)
 t IVRCompositor_023_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_023_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_023_FnTable_ShowMirrorWindow()
 t IVRCompositor_023_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_023_FnTable_SubmitExplicitTimingData()
 t IVRCompositor_023_FnTable_SuspendRendering(bool)
 t IVRCompositor_023_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_023_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_024_FnTable_CanRenderScene()
 t IVRCompositor_024_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_024_FnTable_ClearSkyboxOverride()
 t IVRCompositor_024_FnTable_ClearStageOverride()
 t IVRCompositor_024_FnTable_CompositorBringToFront()
 t IVRCompositor_024_FnTable_CompositorDumpImages()
 t IVRCompositor_024_FnTable_CompositorGoToBack()
 t IVRCompositor_024_FnTable_CompositorQuit()
 t IVRCompositor_024_FnTable_FadeGrid(float, bool)
 t IVRCompositor_024_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_024_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_024_FnTable_ForceReconnectProcess()
 t IVRCompositor_024_FnTable_GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int)
 t IVRCompositor_024_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_024_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_024_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_024_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_024_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_024_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_024_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_024_FnTable_GetLastFrameRenderer()
 t IVRCompositor_024_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_024_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_024_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_024_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_024_FnTable_GetTrackingSpace()
 t IVRCompositor_024_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_024_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_024_FnTable_HideMirrorWindow()
 t IVRCompositor_024_FnTable_IsCurrentSceneFocusAppLoading()
 t IVRCompositor_024_FnTable_IsFullscreen()
 t IVRCompositor_024_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_024_FnTable_IsMotionSmoothingEnabled()
 t IVRCompositor_024_FnTable_IsMotionSmoothingSupported()
 t IVRCompositor_024_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_024_FnTable_PostPresentHandoff()
 t IVRCompositor_024_FnTable_ReleaseMirrorTextureD3D11(void*)
 t IVRCompositor_024_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_024_FnTable_SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t IVRCompositor_024_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_024_FnTable_SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t IVRCompositor_024_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_024_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_024_FnTable_ShowMirrorWindow()
 t IVRCompositor_024_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_024_FnTable_SubmitExplicitTimingData()
 t IVRCompositor_024_FnTable_SuspendRendering(bool)
 t IVRCompositor_024_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_024_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_025_FnTable_CanRenderScene()
 t IVRCompositor_025_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_025_FnTable_ClearSkyboxOverride()
 t IVRCompositor_025_FnTable_ClearStageOverride()
 t IVRCompositor_025_FnTable_CompositorBringToFront()
 t IVRCompositor_025_FnTable_CompositorDumpImages()
 t IVRCompositor_025_FnTable_CompositorGoToBack()
 t IVRCompositor_025_FnTable_CompositorQuit()
 t IVRCompositor_025_FnTable_FadeGrid(float, bool)
 t IVRCompositor_025_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_025_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_025_FnTable_ForceReconnectProcess()
 t IVRCompositor_025_FnTable_GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int)
 t IVRCompositor_025_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_025_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_025_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_025_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_025_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_025_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_025_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_025_FnTable_GetLastFrameRenderer()
 t IVRCompositor_025_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_025_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_025_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_025_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_025_FnTable_GetTrackingSpace()
 t IVRCompositor_025_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_025_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_025_FnTable_HideMirrorWindow()
 t IVRCompositor_025_FnTable_IsCurrentSceneFocusAppLoading()
 t IVRCompositor_025_FnTable_IsFullscreen()
 t IVRCompositor_025_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_025_FnTable_IsMotionSmoothingEnabled()
 t IVRCompositor_025_FnTable_IsMotionSmoothingSupported()
 t IVRCompositor_025_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_025_FnTable_PostPresentHandoff()
 t IVRCompositor_025_FnTable_ReleaseMirrorTextureD3D11(void*)
 t IVRCompositor_025_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_025_FnTable_SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t IVRCompositor_025_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_025_FnTable_SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t IVRCompositor_025_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_025_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_025_FnTable_ShowMirrorWindow()
 t IVRCompositor_025_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_025_FnTable_SubmitExplicitTimingData()
 t IVRCompositor_025_FnTable_SuspendRendering(bool)
 t IVRCompositor_025_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_025_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_026_FnTable_CanRenderScene()
 t IVRCompositor_026_FnTable_ClearLastSubmittedFrame()
 t IVRCompositor_026_FnTable_ClearSkyboxOverride()
 t IVRCompositor_026_FnTable_ClearStageOverride()
 t IVRCompositor_026_FnTable_CompositorBringToFront()
 t IVRCompositor_026_FnTable_CompositorDumpImages()
 t IVRCompositor_026_FnTable_CompositorGoToBack()
 t IVRCompositor_026_FnTable_CompositorQuit()
 t IVRCompositor_026_FnTable_FadeGrid(float, bool)
 t IVRCompositor_026_FnTable_FadeToColor(float, float, float, float, float, bool)
 t IVRCompositor_026_FnTable_ForceInterleavedReprojectionOn(bool)
 t IVRCompositor_026_FnTable_ForceReconnectProcess()
 t IVRCompositor_026_FnTable_GetCompositorBenchmarkResults(vr::Compositor_BenchmarkResults*, unsigned int)
 t IVRCompositor_026_FnTable_GetCumulativeStats(vr::Compositor_CumulativeStats*, unsigned int)
 t IVRCompositor_026_FnTable_GetCurrentFadeColor(bool)
 t IVRCompositor_026_FnTable_GetCurrentGridAlpha()
 t IVRCompositor_026_FnTable_GetCurrentSceneFocusProcess()
 t IVRCompositor_026_FnTable_GetFrameTimeRemaining()
 t IVRCompositor_026_FnTable_GetFrameTiming(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_026_FnTable_GetFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t IVRCompositor_026_FnTable_GetLastFrameRenderer()
 t IVRCompositor_026_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t*)
 t IVRCompositor_026_FnTable_GetLastPosePredictionIDs(unsigned int*, unsigned int*)
 t IVRCompositor_026_FnTable_GetLastPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_026_FnTable_GetMirrorTextureD3D11(vr::EVREye, void*, void**)
 t IVRCompositor_026_FnTable_GetMirrorTextureGL(vr::EVREye, unsigned int*, void**)
 t IVRCompositor_026_FnTable_GetPosesForFrame(unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRCompositor_026_FnTable_GetTrackingSpace()
 t IVRCompositor_026_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t IVRCompositor_026_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t IVRCompositor_026_FnTable_HideMirrorWindow()
 t IVRCompositor_026_FnTable_IsCurrentSceneFocusAppLoading()
 t IVRCompositor_026_FnTable_IsFullscreen()
 t IVRCompositor_026_FnTable_IsMirrorWindowVisible()
 t IVRCompositor_026_FnTable_IsMotionSmoothingEnabled()
 t IVRCompositor_026_FnTable_IsMotionSmoothingSupported()
 t IVRCompositor_026_FnTable_LockGLSharedTextureForAccess(void*)
 t IVRCompositor_026_FnTable_PostPresentHandoff()
 t IVRCompositor_026_FnTable_ReleaseMirrorTextureD3D11(void*)
 t IVRCompositor_026_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t IVRCompositor_026_FnTable_SetExplicitTimingMode(vr::EVRCompositorTimingMode)
 t IVRCompositor_026_FnTable_SetSkyboxOverride(vr::Texture_t const*, unsigned int)
 t IVRCompositor_026_FnTable_SetStageOverride_Async(char const*, vr::HmdMatrix34_t const*, vr::Compositor_StageRenderSettings const*, unsigned int)
 t IVRCompositor_026_FnTable_SetTrackingSpace(vr::ETrackingUniverseOrigin)
 t IVRCompositor_026_FnTable_ShouldAppRenderWithLowResources()
 t IVRCompositor_026_FnTable_ShowMirrorWindow()
 t IVRCompositor_026_FnTable_Submit(vr::EVREye, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t IVRCompositor_026_FnTable_SubmitExplicitTimingData()
 t IVRCompositor_026_FnTable_SuspendRendering(bool)
 t IVRCompositor_026_FnTable_UnlockGLSharedTextureForAccess(void*)
 t IVRCompositor_026_FnTable_WaitGetPoses(vr::TrackedDevicePose_t*, unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t IVRIOBuffer_002_FnTable_Close(unsigned long)
 t IVRIOBuffer_002_FnTable_HasReaders(unsigned long)
 t IVRIOBuffer_002_FnTable_Open(char const*, vr::EIOBufferMode, unsigned int, unsigned int, unsigned long*)
 t IVRIOBuffer_002_FnTable_PropertyContainer(unsigned long)
 t IVRIOBuffer_002_FnTable_Read(unsigned long, void*, unsigned int, unsigned int*)
 t IVRIOBuffer_002_FnTable_Write(unsigned long, void*, unsigned int)
 t IVRInput_001_FnTable_ActivateActionSet(unsigned long)
 t IVRInput_001_FnTable_CancelFilters(vr::EVRInputFilterCancelType, unsigned long)
 t IVRInput_001_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_001_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_001_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_001_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int)
 t IVRInput_001_FnTable_GetCurrentActionSet()
 t IVRInput_001_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int)
 t IVRInput_001_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t IVRInput_001_FnTable_GetOriginTrackedDeviceInfo(unsigned long, InputOriginInfo001_t*, unsigned int)
 t IVRInput_001_FnTable_GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int)
 t IVRInput_001_FnTable_SetPrimaryHand(unsigned int)
 t IVRInput_001_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_001_FnTable_SwapPrimaryAndSecondaryHands()
 t IVRInput_001_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float)
 t IVRInput_001_FnTable_UpdateActionState()
 t IVRInput_002_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_002_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_002_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_002_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int)
 t IVRInput_002_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int)
 t IVRInput_002_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_002_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t IVRInput_002_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_002_FnTable_GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int)
 t IVRInput_002_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_002_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float)
 t IVRInput_002_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVRInput_003_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_003_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_003_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_003_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int)
 t IVRInput_003_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int)
 t IVRInput_003_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_003_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t IVRInput_003_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_003_FnTable_GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int)
 t IVRInput_003_FnTable_GetSkeletalActionData(unsigned long, vr::EVRSkeletalTransformSpace, float, vr::InputSkeletonActionData_t*, unsigned int, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_003_FnTable_GetSkeletalActionDataCompressed(unsigned long, vr::EVRSkeletalTransformSpace, float, void*, unsigned int, unsigned int*)
 t IVRInput_003_FnTable_SetActionManifestPath(char const*)
 t IVRInput_003_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_003_FnTable_ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t IVRInput_003_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float)
 t IVRInput_003_FnTable_UncompressSkeletalActionData(void*, unsigned int, vr::EVRSkeletalTransformSpace*, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_003_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVRInput_004_FnTable_DecompressSkeletalBoneData(void*, unsigned int, vr::EVRSkeletalTransformSpace*, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_004_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_004_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_004_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_004_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t IVRInput_004_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t IVRInput_004_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_004_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int)
 t IVRInput_004_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_004_FnTable_GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_004_FnTable_GetSkeletalActionData(unsigned long, vr::InputSkeletalActionDataV04_t*, unsigned int, unsigned long)
 t IVRInput_004_FnTable_GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int, unsigned long)
 t IVRInput_004_FnTable_GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*, unsigned long)
 t IVRInput_004_FnTable_SetActionManifestPath(char const*)
 t IVRInput_004_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_004_FnTable_ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t IVRInput_004_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t IVRInput_004_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVRInput_005_FnTable_DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_005_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_005_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_005_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_005_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t IVRInput_005_FnTable_GetBoneCount(unsigned long, unsigned int*)
 t IVRInput_005_FnTable_GetBoneHierarchy(unsigned long, int*, unsigned int)
 t IVRInput_005_FnTable_GetBoneName(unsigned long, int, char*, unsigned int)
 t IVRInput_005_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t IVRInput_005_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_005_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t IVRInput_005_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_005_FnTable_GetPoseActionData(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_005_FnTable_GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t IVRInput_005_FnTable_GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_005_FnTable_GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t IVRInput_005_FnTable_GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_005_FnTable_GetSkeletalSummaryData(unsigned long, vr::VRSkeletalSummaryData_t*)
 t IVRInput_005_FnTable_GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t IVRInput_005_FnTable_IsUsingLegacyInput()
 t IVRInput_005_FnTable_SetActionManifestPath(char const*)
 t IVRInput_005_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_005_FnTable_ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t IVRInput_005_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t IVRInput_005_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVRInput_006_FnTable_DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_006_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_006_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_006_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_006_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t IVRInput_006_FnTable_GetBoneCount(unsigned long, unsigned int*)
 t IVRInput_006_FnTable_GetBoneHierarchy(unsigned long, int*, unsigned int)
 t IVRInput_006_FnTable_GetBoneName(unsigned long, int, char*, unsigned int)
 t IVRInput_006_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t IVRInput_006_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_006_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t IVRInput_006_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_006_FnTable_GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_006_FnTable_GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_006_FnTable_GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t IVRInput_006_FnTable_GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_006_FnTable_GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t IVRInput_006_FnTable_GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_006_FnTable_GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t IVRInput_006_FnTable_GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t IVRInput_006_FnTable_IsUsingLegacyInput()
 t IVRInput_006_FnTable_SetActionManifestPath(char const*)
 t IVRInput_006_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_006_FnTable_ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t IVRInput_006_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t IVRInput_006_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVRInput_007_FnTable_DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_007_FnTable_GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t IVRInput_007_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_007_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_007_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_007_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t IVRInput_007_FnTable_GetBoneCount(unsigned long, unsigned int*)
 t IVRInput_007_FnTable_GetBoneHierarchy(unsigned long, int*, unsigned int)
 t IVRInput_007_FnTable_GetBoneName(unsigned long, int, char*, unsigned int)
 t IVRInput_007_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t IVRInput_007_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_007_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t IVRInput_007_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_007_FnTable_GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_007_FnTable_GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_007_FnTable_GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t IVRInput_007_FnTable_GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_007_FnTable_GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t IVRInput_007_FnTable_GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_007_FnTable_GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t IVRInput_007_FnTable_GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t IVRInput_007_FnTable_IsUsingLegacyInput()
 t IVRInput_007_FnTable_OpenBindingUI(char const*, unsigned long, unsigned long, bool)
 t IVRInput_007_FnTable_SetActionManifestPath(char const*)
 t IVRInput_007_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_007_FnTable_ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t IVRInput_007_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t IVRInput_007_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVRInput_008_FnTable_DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_008_FnTable_GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t IVRInput_008_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_008_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_008_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_008_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t IVRInput_008_FnTable_GetBoneCount(unsigned long, unsigned int*)
 t IVRInput_008_FnTable_GetBoneHierarchy(unsigned long, int*, unsigned int)
 t IVRInput_008_FnTable_GetBoneName(unsigned long, int, char*, unsigned int)
 t IVRInput_008_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t IVRInput_008_FnTable_GetDominantHand(vr::ETrackedControllerRole*)
 t IVRInput_008_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_008_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t IVRInput_008_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_008_FnTable_GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_008_FnTable_GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_008_FnTable_GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t IVRInput_008_FnTable_GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_008_FnTable_GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t IVRInput_008_FnTable_GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_008_FnTable_GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t IVRInput_008_FnTable_GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t IVRInput_008_FnTable_IsUsingLegacyInput()
 t IVRInput_008_FnTable_OpenBindingUI(char const*, unsigned long, unsigned long, bool)
 t IVRInput_008_FnTable_SetActionManifestPath(char const*)
 t IVRInput_008_FnTable_SetDominantHand(vr::ETrackedControllerRole)
 t IVRInput_008_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_008_FnTable_ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t IVRInput_008_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t IVRInput_008_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVRInput_009_FnTable_DecompressSkeletalBoneData(void const*, unsigned int, vr::EVRSkeletalTransformSpace, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_009_FnTable_GetActionBindingInfo(unsigned long, vr::InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t IVRInput_009_FnTable_GetActionHandle(char const*, unsigned long*)
 t IVRInput_009_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t IVRInput_009_FnTable_GetActionSetHandle(char const*, unsigned long*)
 t IVRInput_009_FnTable_GetAnalogActionData(unsigned long, vr::InputAnalogActionData_t*, unsigned int, unsigned long)
 t IVRInput_009_FnTable_GetBoneCount(unsigned long, unsigned int*)
 t IVRInput_009_FnTable_GetBoneHierarchy(unsigned long, int*, unsigned int)
 t IVRInput_009_FnTable_GetBoneName(unsigned long, int, char*, unsigned int)
 t IVRInput_009_FnTable_GetComponentStateForBinding(char const*, char const*, vr::InputBindingInfo_t const*, unsigned int, unsigned int, vr::RenderModel_ComponentState_t*)
 t IVRInput_009_FnTable_GetDigitalActionData(unsigned long, vr::InputDigitalActionData_t*, unsigned int, unsigned long)
 t IVRInput_009_FnTable_GetDominantHand(vr::ETrackedControllerRole*)
 t IVRInput_009_FnTable_GetInputSourceHandle(char const*, unsigned long*)
 t IVRInput_009_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t IVRInput_009_FnTable_GetOriginTrackedDeviceInfo(unsigned long, vr::InputOriginInfo_t*, unsigned int)
 t IVRInput_009_FnTable_GetPoseActionDataForNextFrame(unsigned long, vr::ETrackingUniverseOrigin, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_009_FnTable_GetPoseActionDataRelativeToNow(unsigned long, vr::ETrackingUniverseOrigin, float, vr::InputPoseActionData_t*, unsigned int, unsigned long)
 t IVRInput_009_FnTable_GetSkeletalActionData(unsigned long, vr::InputSkeletalActionData_t*, unsigned int)
 t IVRInput_009_FnTable_GetSkeletalBoneData(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalMotionRange, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_009_FnTable_GetSkeletalBoneDataCompressed(unsigned long, vr::EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t IVRInput_009_FnTable_GetSkeletalReferenceTransforms(unsigned long, vr::EVRSkeletalTransformSpace, vr::EVRSkeletalReferencePose, vr::VRBoneTransform_t*, unsigned int)
 t IVRInput_009_FnTable_GetSkeletalSummaryData(unsigned long, vr::EVRSummaryType, vr::VRSkeletalSummaryData_t*)
 t IVRInput_009_FnTable_GetSkeletalTrackingLevel(unsigned long, vr::EVRSkeletalTrackingLevel*)
 t IVRInput_009_FnTable_IsUsingLegacyInput()
 t IVRInput_009_FnTable_OpenBindingUI(char const*, unsigned long, unsigned long, bool)
 t IVRInput_009_FnTable_SetActionManifestPath(char const*)
 t IVRInput_009_FnTable_SetDominantHand(vr::ETrackedControllerRole)
 t IVRInput_009_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t IVRInput_009_FnTable_ShowBindingsForActionSet(vr::VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t IVRInput_009_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t IVRInput_009_FnTable_UpdateActionState(vr::VRActiveActionSet_t*, unsigned int, unsigned int)
 t IVROverlayView_001_FnTable_AcquireOverlayView(unsigned long, OverlayView001_t*, unsigned int)
 t IVROverlayView_001_FnTable_PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t IVROverlayView_001_FnTable_ReleaseOverlayView(unsigned long)
 t IVROverlayView_002_FnTable_AcquireOverlayView(unsigned long, vr::VRNativeDevice_t*, vr::VROverlayView_t*, unsigned int)
 t IVROverlayView_002_FnTable_IsViewingPermitted(unsigned long)
 t IVROverlayView_002_FnTable_PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t IVROverlayView_002_FnTable_ReleaseOverlayView(vr::VROverlayView_t*)
 t IVROverlay_010_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_010_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_010_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_010_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_010_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_010_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_010_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_010_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_010_FnTable_GetHighQualityOverlay()
 t IVROverlay_010_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_010_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_010_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_010_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_010_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_010_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_010_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_010_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_010_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_010_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_010_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_010_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_010_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_010_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_010_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_010_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_010_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_010_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_010_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_010_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_010_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_010_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_010_FnTable_HideKeyboard()
 t IVROverlay_010_FnTable_HideOverlay(unsigned long)
 t IVROverlay_010_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_010_FnTable_IsDashboardVisible()
 t IVROverlay_010_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_010_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_010_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_010_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_010_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_010_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_010_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_010_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_010_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_010_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_010_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_010_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_010_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_010_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_010_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_010_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_010_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_010_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_010_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_010_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_010_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_010_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_010_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_010_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_010_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_010_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_010_FnTable_ShowDashboard(char const*)
 t IVROverlay_010_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_010_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_010_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_011_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_011_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_011_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_011_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_011_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_011_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_011_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_011_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_011_FnTable_GetHighQualityOverlay()
 t IVROverlay_011_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_011_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_011_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_011_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_011_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_011_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_011_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_011_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_011_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_011_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_011_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_011_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_011_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*)
 t IVROverlay_011_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_011_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_011_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_011_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_011_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_011_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_011_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_011_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_011_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_011_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_011_FnTable_HideKeyboard()
 t IVROverlay_011_FnTable_HideOverlay(unsigned long)
 t IVROverlay_011_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_011_FnTable_IsDashboardVisible()
 t IVROverlay_011_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_011_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_011_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_011_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_011_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_011_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_011_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_011_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_011_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_011_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_011_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_011_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_011_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_011_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_011_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_011_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_011_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_011_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_011_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_011_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_011_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_011_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_011_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_011_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_011_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_011_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_011_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_011_FnTable_ShowDashboard(char const*)
 t IVROverlay_011_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_011_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_011_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_012_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_012_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_012_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_012_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_012_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_012_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_012_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_012_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_012_FnTable_GetHighQualityOverlay()
 t IVROverlay_012_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_012_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_012_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_012_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_012_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_012_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_012_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_012_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_012_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_012_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_012_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_012_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_012_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*)
 t IVROverlay_012_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_012_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_012_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_012_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_012_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_012_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_012_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_012_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_012_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_012_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_012_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_012_FnTable_HideKeyboard()
 t IVROverlay_012_FnTable_HideOverlay(unsigned long)
 t IVROverlay_012_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_012_FnTable_IsDashboardVisible()
 t IVROverlay_012_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_012_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_012_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_012_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_012_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_012_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_012_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_012_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_012_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_012_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_012_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_012_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_012_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_012_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_012_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_012_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_012_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_012_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_012_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_012_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_012_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_012_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_012_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_012_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_012_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_012_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_012_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_012_FnTable_ShowDashboard(char const*)
 t IVROverlay_012_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_012_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_012_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_013_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_013_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_013_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_013_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_013_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_013_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_013_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_013_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_013_FnTable_GetHighQualityOverlay()
 t IVROverlay_013_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_013_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_013_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_013_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_013_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_013_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_013_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_013_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_013_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_013_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_013_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_013_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_013_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_013_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_013_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_013_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*)
 t IVROverlay_013_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_013_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_013_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_013_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_013_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_013_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_013_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_013_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_013_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_013_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_013_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_013_FnTable_HideKeyboard()
 t IVROverlay_013_FnTable_HideOverlay(unsigned long)
 t IVROverlay_013_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_013_FnTable_IsDashboardVisible()
 t IVROverlay_013_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_013_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_013_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_013_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_013_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_013_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_013_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_013_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_013_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_013_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_013_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_013_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_013_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_013_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_013_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_013_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_013_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_013_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_013_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_013_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_013_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_013_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_013_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_013_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_013_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_013_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_013_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_013_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_013_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_013_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_013_FnTable_ShowDashboard(char const*)
 t IVROverlay_013_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_013_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_013_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_013_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_014_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_014_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_014_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_014_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_014_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_014_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_014_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_014_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_014_FnTable_GetHighQualityOverlay()
 t IVROverlay_014_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_014_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_014_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_014_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_014_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_014_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_014_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_014_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_014_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_014_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_014_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_014_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_014_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_014_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_014_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_014_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_014_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_014_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_014_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_014_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_014_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_014_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_014_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_014_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_014_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_014_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_014_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_014_FnTable_HideKeyboard()
 t IVROverlay_014_FnTable_HideOverlay(unsigned long)
 t IVROverlay_014_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_014_FnTable_IsDashboardVisible()
 t IVROverlay_014_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_014_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_014_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_014_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_014_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_014_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_014_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_014_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_014_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_014_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_014_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_014_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_014_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_014_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_014_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_014_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_014_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_014_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_014_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_014_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_014_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_014_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_014_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_014_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_014_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_014_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_014_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_014_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_014_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_014_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_014_FnTable_ShowDashboard(char const*)
 t IVROverlay_014_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_014_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_014_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_014_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_015_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_015_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_015_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_015_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_015_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_015_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_015_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_015_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_015_FnTable_GetHighQualityOverlay()
 t IVROverlay_015_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_015_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_015_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_015_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_015_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_015_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_015_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_015_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_015_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_015_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_015_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_015_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_015_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_015_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_015_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_015_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_015_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_015_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_015_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_015_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_015_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_015_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_015_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_015_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_015_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_015_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_015_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_015_FnTable_HideKeyboard()
 t IVROverlay_015_FnTable_HideOverlay(unsigned long)
 t IVROverlay_015_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_015_FnTable_IsDashboardVisible()
 t IVROverlay_015_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_015_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_015_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_015_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_015_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_015_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_015_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_015_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_015_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_015_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_015_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_015_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_015_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_015_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_015_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_015_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_015_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_015_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_015_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_015_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_015_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_015_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_015_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_015_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_015_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_015_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_015_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_015_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_015_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_015_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_015_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_015_FnTable_ShowDashboard(char const*)
 t IVROverlay_015_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_015_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_015_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_015_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_016_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_016_FnTable_CloseMessageOverlay()
 t IVROverlay_016_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_016_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_016_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_016_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_016_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_016_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_016_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_016_FnTable_GetHighQualityOverlay()
 t IVROverlay_016_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_016_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_016_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_016_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_016_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_016_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_016_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_016_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_016_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_016_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_016_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_016_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_016_FnTable_GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t IVROverlay_016_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_016_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_016_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_016_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_016_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_016_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_016_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_016_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_016_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_016_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_016_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_016_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_016_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_016_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_016_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_016_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_016_FnTable_HideKeyboard()
 t IVROverlay_016_FnTable_HideOverlay(unsigned long)
 t IVROverlay_016_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_016_FnTable_IsDashboardVisible()
 t IVROverlay_016_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_016_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_016_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_016_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_016_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_016_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_016_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_016_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_016_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_016_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_016_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_016_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_016_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_016_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_016_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_016_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_016_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_016_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_016_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_016_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_016_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_016_FnTable_SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t IVROverlay_016_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_016_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_016_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_016_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_016_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_016_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_016_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_016_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_016_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_016_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_016_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_016_FnTable_ShowDashboard(char const*)
 t IVROverlay_016_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_016_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_016_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_016_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_017_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_017_FnTable_CloseMessageOverlay()
 t IVROverlay_017_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_017_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_017_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_017_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_017_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_017_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_017_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_017_FnTable_GetHighQualityOverlay()
 t IVROverlay_017_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_017_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_017_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_017_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_017_FnTable_GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t IVROverlay_017_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_017_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_017_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_017_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_017_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_017_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_017_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_017_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_017_FnTable_GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t IVROverlay_017_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_017_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_017_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_017_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_017_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_017_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_017_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_017_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_017_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_017_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_017_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_017_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_017_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_017_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_017_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_017_FnTable_HandleControllerOverlayInteractionAsMouse(unsigned long, unsigned int)
 t IVROverlay_017_FnTable_HideKeyboard()
 t IVROverlay_017_FnTable_HideOverlay(unsigned long)
 t IVROverlay_017_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_017_FnTable_IsDashboardVisible()
 t IVROverlay_017_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_017_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_017_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_017_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_017_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_017_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_017_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_017_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_017_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_017_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_017_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_017_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_017_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_017_FnTable_SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const&, float)
 t IVROverlay_017_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_017_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_017_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_017_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_017_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_017_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_017_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_017_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_017_FnTable_SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t IVROverlay_017_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_017_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_017_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_017_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_017_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_017_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_017_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_017_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_017_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_017_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_017_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_017_FnTable_ShowDashboard(char const*)
 t IVROverlay_017_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_017_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_017_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_017_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_018_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_018_FnTable_CloseMessageOverlay()
 t IVROverlay_018_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_018_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_018_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_018_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_018_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_018_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_018_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_018_FnTable_GetHighQualityOverlay()
 t IVROverlay_018_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_018_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_018_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_018_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_018_FnTable_GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t IVROverlay_018_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_018_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_018_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_018_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_018_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_018_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_018_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_018_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_018_FnTable_GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t IVROverlay_018_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_018_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_018_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_018_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_018_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_018_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_018_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_018_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_018_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_018_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_018_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_018_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_018_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_018_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_018_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_018_FnTable_HideKeyboard()
 t IVROverlay_018_FnTable_HideOverlay(unsigned long)
 t IVROverlay_018_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_018_FnTable_IsDashboardVisible()
 t IVROverlay_018_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_018_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_018_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_018_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_018_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_018_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_018_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_018_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_018_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_018_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_018_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_018_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_018_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_018_FnTable_SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const&, float)
 t IVROverlay_018_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_018_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_018_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_018_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_018_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_018_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_018_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_018_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_018_FnTable_SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t IVROverlay_018_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_018_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_018_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_018_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_018_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_018_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_018_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_018_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_018_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_018_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_018_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_018_FnTable_ShowDashboard(char const*)
 t IVROverlay_018_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_018_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_018_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_018_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_019_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_019_FnTable_CloseMessageOverlay()
 t IVROverlay_019_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_019_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_019_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_019_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_019_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_019_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_019_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_019_FnTable_GetHighQualityOverlay()
 t IVROverlay_019_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_019_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_019_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_019_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_019_FnTable_GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t IVROverlay_019_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_019_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_019_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_019_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_019_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_019_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_019_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_019_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_019_FnTable_GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t IVROverlay_019_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_019_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_019_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_019_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_019_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_019_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_019_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_019_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_019_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_019_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_019_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_019_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_019_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_019_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_019_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_019_FnTable_HideKeyboard()
 t IVROverlay_019_FnTable_HideOverlay(unsigned long)
 t IVROverlay_019_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_019_FnTable_IsDashboardVisible()
 t IVROverlay_019_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_019_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_019_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_019_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_019_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_019_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_019_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_019_FnTable_SetHighQualityOverlay(unsigned long)
 t IVROverlay_019_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_019_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_019_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_019_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_019_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_019_FnTable_SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t IVROverlay_019_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_019_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_019_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_019_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_019_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_019_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_019_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_019_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_019_FnTable_SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t IVROverlay_019_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_019_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_019_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_019_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_019_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_019_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_019_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_019_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_019_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_019_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_019_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_019_FnTable_ShowDashboard(char const*)
 t IVROverlay_019_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_019_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_019_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_019_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_020_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_020_FnTable_CloseMessageOverlay()
 t IVROverlay_020_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_020_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_020_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_020_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_020_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_020_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_020_FnTable_GetGamepadFocusOverlay()
 t IVROverlay_020_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_020_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_020_FnTable_GetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float*, float*)
 t IVROverlay_020_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_020_FnTable_GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t IVROverlay_020_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_020_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags_Old, bool*)
 t IVROverlay_020_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_020_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_020_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_020_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_020_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_020_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_020_FnTable_GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t IVROverlay_020_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_020_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_020_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_020_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_020_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_020_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_020_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_020_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_020_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_020_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_020_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_020_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_020_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_020_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_020_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_020_FnTable_HideKeyboard()
 t IVROverlay_020_FnTable_HideOverlay(unsigned long)
 t IVROverlay_020_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_020_FnTable_IsDashboardVisible()
 t IVROverlay_020_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_020_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_020_FnTable_MoveGamepadFocusToNeighbor(vr::EOverlayDirection, unsigned long)
 t IVROverlay_020_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_020_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_020_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_020_FnTable_SetGamepadFocusOverlay(unsigned long)
 t IVROverlay_020_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_020_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_020_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_020_FnTable_SetOverlayAutoCurveDistanceRangeInMeters(unsigned long, float, float)
 t IVROverlay_020_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_020_FnTable_SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t IVROverlay_020_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags_Old, bool)
 t IVROverlay_020_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_020_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_020_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_020_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_020_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_020_FnTable_SetOverlayNeighbor(vr::EOverlayDirection, unsigned long, unsigned long)
 t IVROverlay_020_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_020_FnTable_SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t IVROverlay_020_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_020_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_020_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_020_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_020_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_020_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_020_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_020_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_020_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_020_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_020_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_020_FnTable_ShowDashboard(char const*)
 t IVROverlay_020_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_020_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_020_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_020_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_021_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_021_FnTable_CloseMessageOverlay()
 t IVROverlay_021_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_021_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_021_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_021_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_021_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_021_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_021_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_021_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_021_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_021_FnTable_GetOverlayCurvature(unsigned long, float*)
 t IVROverlay_021_FnTable_GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t IVROverlay_021_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_021_FnTable_GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t IVROverlay_021_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_021_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_021_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_021_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_021_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_021_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_021_FnTable_GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t IVROverlay_021_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_021_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_021_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_021_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_021_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_021_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_021_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_021_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_021_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_021_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_021_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_021_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_021_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_021_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_021_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_021_FnTable_HideKeyboard()
 t IVROverlay_021_FnTable_HideOverlay(unsigned long)
 t IVROverlay_021_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_021_FnTable_IsDashboardVisible()
 t IVROverlay_021_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_021_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_021_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_021_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_021_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_021_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_021_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_021_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_021_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_021_FnTable_SetOverlayCurvature(unsigned long, float)
 t IVROverlay_021_FnTable_SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t IVROverlay_021_FnTable_SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t IVROverlay_021_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_021_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_021_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_021_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_021_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_021_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_021_FnTable_SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t IVROverlay_021_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_021_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_021_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_021_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_021_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_021_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_021_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_021_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_021_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_021_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_021_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_021_FnTable_ShowDashboard(char const*)
 t IVROverlay_021_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_021_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_021_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_021_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_022_FnTable_ClearOverlayCursorPositionOverride(unsigned long)
 t IVROverlay_022_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_022_FnTable_CloseMessageOverlay()
 t IVROverlay_022_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_022_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_022_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_022_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_022_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_022_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_022_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_022_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_022_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_022_FnTable_GetOverlayCurvature(unsigned long, float*)
 t IVROverlay_022_FnTable_GetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t*, float*)
 t IVROverlay_022_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_022_FnTable_GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t IVROverlay_022_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_022_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_022_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_022_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_022_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_022_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_022_FnTable_GetOverlayRenderModel(unsigned long, char*, unsigned int, vr::HmdColor_t*, vr::EVROverlayError*)
 t IVROverlay_022_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_022_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_022_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_022_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_022_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_022_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_022_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_022_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_022_FnTable_GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_022_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_022_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_022_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_022_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_022_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_022_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_022_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_022_FnTable_HideKeyboard()
 t IVROverlay_022_FnTable_HideOverlay(unsigned long)
 t IVROverlay_022_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_022_FnTable_IsDashboardVisible()
 t IVROverlay_022_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_022_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_022_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_022_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_022_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_022_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_022_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_022_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_022_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_022_FnTable_SetOverlayCursor(unsigned long, unsigned long)
 t IVROverlay_022_FnTable_SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_022_FnTable_SetOverlayCurvature(unsigned long, float)
 t IVROverlay_022_FnTable_SetOverlayDualAnalogTransform(unsigned long, vr::EDualAnalogWhich, vr::HmdVector2_t const*, float)
 t IVROverlay_022_FnTable_SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t IVROverlay_022_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_022_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_022_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_022_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_022_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_022_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_022_FnTable_SetOverlayRenderModel(unsigned long, char const*, vr::HmdColor_t const*)
 t IVROverlay_022_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_022_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_022_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_022_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_022_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_022_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_022_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_022_FnTable_SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_022_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_022_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_022_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_022_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_022_FnTable_ShowDashboard(char const*)
 t IVROverlay_022_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_022_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_022_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_022_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_022_FnTable_TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t IVROverlay_023_FnTable_ClearOverlayCursorPositionOverride(unsigned long)
 t IVROverlay_023_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_023_FnTable_CloseMessageOverlay()
 t IVROverlay_023_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_023_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_023_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_023_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_023_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_023_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_023_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_023_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_023_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_023_FnTable_GetOverlayCurvature(unsigned long, float*)
 t IVROverlay_023_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_023_FnTable_GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t IVROverlay_023_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_023_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_023_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_023_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_023_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_023_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_023_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_023_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_023_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_023_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_023_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_023_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_023_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_023_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_023_FnTable_GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_023_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_023_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_023_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_023_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_023_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_023_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_023_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_023_FnTable_HideKeyboard()
 t IVROverlay_023_FnTable_HideOverlay(unsigned long)
 t IVROverlay_023_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_023_FnTable_IsDashboardVisible()
 t IVROverlay_023_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_023_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_023_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_023_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_023_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_023_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_023_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_023_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_023_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_023_FnTable_SetOverlayCursor(unsigned long, unsigned long)
 t IVROverlay_023_FnTable_SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_023_FnTable_SetOverlayCurvature(unsigned long, float)
 t IVROverlay_023_FnTable_SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t IVROverlay_023_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_023_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_023_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_023_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_023_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_023_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_023_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_023_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_023_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_023_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_023_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_023_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_023_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_023_FnTable_SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_023_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_023_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_023_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_023_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_023_FnTable_ShowDashboard(char const*)
 t IVROverlay_023_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_023_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, char const*, unsigned int, char const*, bool, unsigned long)
 t IVROverlay_023_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_023_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_023_FnTable_TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t IVROverlay_024_FnTable_ClearOverlayCursorPositionOverride(unsigned long)
 t IVROverlay_024_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_024_FnTable_CloseMessageOverlay()
 t IVROverlay_024_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_024_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_024_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_024_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_024_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_024_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_024_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_024_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_024_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_024_FnTable_GetOverlayCurvature(unsigned long, float*)
 t IVROverlay_024_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_024_FnTable_GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t IVROverlay_024_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_024_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_024_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_024_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_024_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_024_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_024_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_024_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_024_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_024_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_024_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_024_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_024_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_024_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_024_FnTable_GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_024_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_024_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_024_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_024_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_024_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_024_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_024_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_024_FnTable_HideKeyboard()
 t IVROverlay_024_FnTable_HideOverlay(unsigned long)
 t IVROverlay_024_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_024_FnTable_IsDashboardVisible()
 t IVROverlay_024_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_024_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_024_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_024_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_024_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_024_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_024_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_024_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_024_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_024_FnTable_SetOverlayCursor(unsigned long, unsigned long)
 t IVROverlay_024_FnTable_SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_024_FnTable_SetOverlayCurvature(unsigned long, float)
 t IVROverlay_024_FnTable_SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t IVROverlay_024_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_024_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_024_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_024_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_024_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_024_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_024_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_024_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_024_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_024_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_024_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_024_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_024_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_024_FnTable_SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_024_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_024_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_024_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_024_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_024_FnTable_ShowDashboard(char const*)
 t IVROverlay_024_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t IVROverlay_024_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t IVROverlay_024_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_024_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_024_FnTable_TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t IVROverlay_025_FnTable_ClearOverlayCursorPositionOverride(unsigned long)
 t IVROverlay_025_FnTable_ClearOverlayTexture(unsigned long)
 t IVROverlay_025_FnTable_CloseMessageOverlay()
 t IVROverlay_025_FnTable_ComputeOverlayIntersection(unsigned long, vr::VROverlayIntersectionParams_t const*, vr::VROverlayIntersectionResults_t*)
 t IVROverlay_025_FnTable_CreateDashboardOverlay(char const*, char const*, unsigned long*, unsigned long*)
 t IVROverlay_025_FnTable_CreateOverlay(char const*, char const*, unsigned long*)
 t IVROverlay_025_FnTable_DestroyOverlay(unsigned long)
 t IVROverlay_025_FnTable_FindOverlay(char const*, unsigned long*)
 t IVROverlay_025_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t IVROverlay_025_FnTable_GetKeyboardText(char*, unsigned int)
 t IVROverlay_025_FnTable_GetOverlayAlpha(unsigned long, float*)
 t IVROverlay_025_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t IVROverlay_025_FnTable_GetOverlayCurvature(unsigned long, float*)
 t IVROverlay_025_FnTable_GetOverlayErrorNameFromEnum(vr::EVROverlayError)
 t IVROverlay_025_FnTable_GetOverlayFlag(unsigned long, vr::VROverlayFlags, bool*)
 t IVROverlay_025_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t IVROverlay_025_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t IVROverlay_025_FnTable_GetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod*)
 t IVROverlay_025_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_025_FnTable_GetOverlayMouseScale(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_025_FnTable_GetOverlayName(unsigned long, char*, unsigned int, vr::EVROverlayError*)
 t IVROverlay_025_FnTable_GetOverlayRenderingPid(unsigned long)
 t IVROverlay_025_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t IVROverlay_025_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t IVROverlay_025_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, vr::ETextureType*, vr::EColorSpace*, vr::VRTextureBounds_t*)
 t IVROverlay_025_FnTable_GetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t*)
 t IVROverlay_025_FnTable_GetOverlayTextureColorSpace(unsigned long, vr::EColorSpace*)
 t IVROverlay_025_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t IVROverlay_025_FnTable_GetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin*, vr::HmdMatrix34_t*)
 t IVROverlay_025_FnTable_GetOverlayTransformCursor(unsigned long, vr::HmdVector2_t*)
 t IVROverlay_025_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, vr::HmdMatrix34_t*)
 t IVROverlay_025_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t IVROverlay_025_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, vr::HmdMatrix34_t*)
 t IVROverlay_025_FnTable_GetOverlayTransformType(unsigned long, vr::VROverlayTransformType*)
 t IVROverlay_025_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t IVROverlay_025_FnTable_GetPrimaryDashboardDevice()
 t IVROverlay_025_FnTable_GetTransformForOverlayCoordinates(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdVector2_t, vr::HmdMatrix34_t*)
 t IVROverlay_025_FnTable_HideKeyboard()
 t IVROverlay_025_FnTable_HideOverlay(unsigned long)
 t IVROverlay_025_FnTable_IsActiveDashboardOverlay(unsigned long)
 t IVROverlay_025_FnTable_IsDashboardVisible()
 t IVROverlay_025_FnTable_IsHoverTargetOverlay(unsigned long)
 t IVROverlay_025_FnTable_IsOverlayVisible(unsigned long)
 t IVROverlay_025_FnTable_PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t IVROverlay_025_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t IVROverlay_025_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t IVROverlay_025_FnTable_SetKeyboardPositionForOverlay(unsigned long, vr::HmdRect2_t)
 t IVROverlay_025_FnTable_SetKeyboardTransformAbsolute(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_025_FnTable_SetOverlayAlpha(unsigned long, float)
 t IVROverlay_025_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t IVROverlay_025_FnTable_SetOverlayCursor(unsigned long, unsigned long)
 t IVROverlay_025_FnTable_SetOverlayCursorPositionOverride(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_025_FnTable_SetOverlayCurvature(unsigned long, float)
 t IVROverlay_025_FnTable_SetOverlayFlag(unsigned long, vr::VROverlayFlags, bool)
 t IVROverlay_025_FnTable_SetOverlayFromFile(unsigned long, char const*)
 t IVROverlay_025_FnTable_SetOverlayInputMethod(unsigned long, vr::VROverlayInputMethod)
 t IVROverlay_025_FnTable_SetOverlayIntersectionMask(unsigned long, vr::VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t IVROverlay_025_FnTable_SetOverlayMouseScale(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_025_FnTable_SetOverlayName(unsigned long, char const*)
 t IVROverlay_025_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t IVROverlay_025_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t IVROverlay_025_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t IVROverlay_025_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t IVROverlay_025_FnTable_SetOverlayTexture(unsigned long, vr::Texture_t const*)
 t IVROverlay_025_FnTable_SetOverlayTextureBounds(unsigned long, vr::VRTextureBounds_t const*)
 t IVROverlay_025_FnTable_SetOverlayTextureColorSpace(unsigned long, vr::EColorSpace)
 t IVROverlay_025_FnTable_SetOverlayTransformAbsolute(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t IVROverlay_025_FnTable_SetOverlayTransformCursor(unsigned long, vr::HmdVector2_t const*)
 t IVROverlay_025_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, vr::HmdMatrix34_t const*)
 t IVROverlay_025_FnTable_SetOverlayTransformProjection(unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*, vr::VROverlayProjection_t const*, vr::EVREye)
 t IVROverlay_025_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char const*)
 t IVROverlay_025_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t IVROverlay_025_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t IVROverlay_025_FnTable_ShowDashboard(char const*)
 t IVROverlay_025_FnTable_ShowKeyboard(vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t IVROverlay_025_FnTable_ShowKeyboardForOverlay(unsigned long, vr::EGamepadTextInputMode, vr::EGamepadTextInputLineMode, unsigned int, char const*, unsigned int, char const*, unsigned long)
 t IVROverlay_025_FnTable_ShowMessageOverlay(char const*, char const*, char const*, char const*, char const*, char const*)
 t IVROverlay_025_FnTable_ShowOverlay(unsigned long)
 t IVROverlay_025_FnTable_TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t IVRRenderModels_004_FnTable_FreeRenderModel(vr::RenderModel_t*)
 t IVRRenderModels_004_FnTable_FreeTexture(vr::RenderModel_TextureMap_t*)
 t IVRRenderModels_004_FnTable_FreeTextureD3D11(void*)
 t IVRRenderModels_004_FnTable_GetComponentButtonMask(char const*, char const*)
 t IVRRenderModels_004_FnTable_GetComponentCount(char const*)
 t IVRRenderModels_004_FnTable_GetComponentName(char const*, unsigned int, char*, unsigned int)
 t IVRRenderModels_004_FnTable_GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t IVRRenderModels_004_FnTable_GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t IVRRenderModels_004_FnTable_GetRenderModelCount()
 t IVRRenderModels_004_FnTable_GetRenderModelName(unsigned int, char*, unsigned int)
 t IVRRenderModels_004_FnTable_LoadIntoTextureD3D11_Async(int, void*)
 t IVRRenderModels_004_FnTable_LoadRenderModel_Async(char const*, vr::RenderModel_t**)
 t IVRRenderModels_004_FnTable_LoadTextureD3D11_Async(int, void*, void**)
 t IVRRenderModels_004_FnTable_LoadTexture_Async(int, vr::RenderModel_TextureMap_t**)
 t IVRRenderModels_004_FnTable_RenderModelHasComponent(char const*, char const*)
 t IVRRenderModels_005_FnTable_FreeRenderModel(vr::RenderModel_t*)
 t IVRRenderModels_005_FnTable_FreeTexture(vr::RenderModel_TextureMap_t*)
 t IVRRenderModels_005_FnTable_FreeTextureD3D11(void*)
 t IVRRenderModels_005_FnTable_GetComponentButtonMask(char const*, char const*)
 t IVRRenderModels_005_FnTable_GetComponentCount(char const*)
 t IVRRenderModels_005_FnTable_GetComponentName(char const*, unsigned int, char*, unsigned int)
 t IVRRenderModels_005_FnTable_GetComponentRenderModelName(char const*, char const*, char*, unsigned int)
 t IVRRenderModels_005_FnTable_GetComponentState(char const*, char const*, vr::VRControllerState001_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t IVRRenderModels_005_FnTable_GetRenderModelCount()
 t IVRRenderModels_005_FnTable_GetRenderModelErrorNameFromEnum(vr::EVRRenderModelError)
 t IVRRenderModels_005_FnTable_GetRenderModelName(unsigned int, char*, unsigned int)
 t IVRRenderModels_005_FnTable_GetRenderModelOriginalPath(char const*, char*, unsigned int, vr::EVRRenderModelError*)
 t IVRRenderModels_005_FnTable_GetRenderModelThumbnailURL(char const*, char*, unsigned int, vr::EVRRenderModelError*)
 t IVRRenderModels_005_FnTable_LoadIntoTextureD3D11_Async(int, void*)
 t IVRRenderModels_005_FnTable_LoadRenderModel_Async(char const*, vr::RenderModel_t**)
 t IVRRenderModels_005_FnTable_LoadTextureD3D11_Async(int, void*, void**)
 t IVRRenderModels_005_FnTable_LoadTexture_Async(int, vr::RenderModel_TextureMap_t**)
 t IVRRenderModels_005_FnTable_RenderModelHasComponent(char const*, char const*)
 t IVRRenderer::ReplaceTextureReferences(VRRenderer::TextureBase*, VRRenderer::TextureBase*)
 t IVRSettings_001_FnTable_GetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_GetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_GetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_GetSettingsErrorNameFromEnum(vr::EVRSettingsError)
 t IVRSettings_001_FnTable_GetString(char const*, char const*, char*, unsigned int, char const*, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_RemoveSection(char const*, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_SetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_SetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_SetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_SetString(char const*, char const*, char const*, vr::EVRSettingsError*)
 t IVRSettings_001_FnTable_Sync(bool, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_GetBool(char const*, char const*, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_GetFloat(char const*, char const*, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_GetInt32(char const*, char const*, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_GetSettingsErrorNameFromEnum(vr::EVRSettingsError)
 t IVRSettings_002_FnTable_GetString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_RemoveSection(char const*, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_SetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_SetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_SetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_SetString(char const*, char const*, char const*, vr::EVRSettingsError*)
 t IVRSettings_002_FnTable_Sync(bool, vr::EVRSettingsError*)
 t IVRSystem_011_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_011_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_011_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_011_FnTable_CaptureInputFocus()
 t IVRSystem_011_FnTable_ComputeDistortion(vr::EVREye, float, float)
 t IVRSystem_011_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_011_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_011_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_011_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_011_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_011_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t IVRSystem_011_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t IVRSystem_011_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_011_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_011_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_011_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_011_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_011_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_011_FnTable_GetHiddenAreaMesh(vr::EVREye)
 t IVRSystem_011_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_011_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_011_FnTable_GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t IVRSystem_011_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_011_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_011_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_011_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_011_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_011_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_011_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_011_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_011_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_011_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_011_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_011_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_011_FnTable_IsDisplayOnDesktop()
 t IVRSystem_011_FnTable_IsInputFocusCapturedByAnotherProcess()
 t IVRSystem_011_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_011_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_011_FnTable_PerformanceTestEnableCapture(bool)
 t IVRSystem_011_FnTable_PerformanceTestReportFidelityLevelChange(int)
 t IVRSystem_011_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_011_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_011_FnTable_ReleaseInputFocus()
 t IVRSystem_011_FnTable_ResetSeatedZeroPose()
 t IVRSystem_011_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_011_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_012_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_012_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_012_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_012_FnTable_CaptureInputFocus()
 t IVRSystem_012_FnTable_ComputeDistortion(vr::EVREye, float, float)
 t IVRSystem_012_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_012_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_012_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_012_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_012_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_012_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*)
 t IVRSystem_012_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, vr::TrackedDevicePose_t*)
 t IVRSystem_012_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_012_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_012_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_012_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_012_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_012_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_012_FnTable_GetHiddenAreaMesh(vr::EVREye)
 t IVRSystem_012_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_012_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_012_FnTable_GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t IVRSystem_012_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_012_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_012_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_012_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_012_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_012_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_012_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_012_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_012_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_012_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_012_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_012_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_012_FnTable_IsDisplayOnDesktop()
 t IVRSystem_012_FnTable_IsInputFocusCapturedByAnotherProcess()
 t IVRSystem_012_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_012_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_012_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_012_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_012_FnTable_ReleaseInputFocus()
 t IVRSystem_012_FnTable_ResetSeatedZeroPose()
 t IVRSystem_012_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_012_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_013_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_013_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_013_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_013_FnTable_CaptureInputFocus()
 t IVRSystem_013_FnTable_ComputeDistortion(vr::EVREye, float, float)
 t IVRSystem_013_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_013_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_013_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_013_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_013_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_013_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_013_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_013_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_013_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_013_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_013_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_013_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_013_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_013_FnTable_GetHiddenAreaMesh(vr::EVREye)
 t IVRSystem_013_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_013_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_013_FnTable_GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t IVRSystem_013_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_013_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_013_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_013_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_013_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_013_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_013_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_013_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_013_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_013_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_013_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_013_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_013_FnTable_IsDisplayOnDesktop()
 t IVRSystem_013_FnTable_IsInputFocusCapturedByAnotherProcess()
 t IVRSystem_013_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_013_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_013_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_013_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_013_FnTable_ReleaseInputFocus()
 t IVRSystem_013_FnTable_ResetSeatedZeroPose()
 t IVRSystem_013_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_013_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_014_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_014_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_014_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_014_FnTable_CaptureInputFocus()
 t IVRSystem_014_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_014_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_014_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_014_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_014_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_014_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_014_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_014_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_014_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_014_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_014_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_014_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_014_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_014_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_014_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_014_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_014_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_014_FnTable_GetProjectionMatrix(vr::EVREye, float, float, vr::ETextureType)
 t IVRSystem_014_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_014_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_014_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_014_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_014_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_014_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_014_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_014_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_014_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_014_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_014_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_014_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_014_FnTable_IsDisplayOnDesktop()
 t IVRSystem_014_FnTable_IsInputFocusCapturedByAnotherProcess()
 t IVRSystem_014_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_014_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_014_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_014_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_014_FnTable_ReleaseInputFocus()
 t IVRSystem_014_FnTable_ResetSeatedZeroPose()
 t IVRSystem_014_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_014_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_015_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_015_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_015_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_015_FnTable_CaptureInputFocus()
 t IVRSystem_015_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_015_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_015_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_015_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_015_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_015_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_015_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_015_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_015_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_015_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_015_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_015_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_015_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_015_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_015_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_015_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_015_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_015_FnTable_GetProjectionMatrix(vr::EVREye, float, float)
 t IVRSystem_015_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_015_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_015_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_015_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_015_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_015_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_015_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_015_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_015_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_015_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_015_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_015_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_015_FnTable_IsDisplayOnDesktop()
 t IVRSystem_015_FnTable_IsInputFocusCapturedByAnotherProcess()
 t IVRSystem_015_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_015_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_015_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_015_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_015_FnTable_ReleaseInputFocus()
 t IVRSystem_015_FnTable_ResetSeatedZeroPose()
 t IVRSystem_015_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_015_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_016_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_016_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_016_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_016_FnTable_CaptureInputFocus()
 t IVRSystem_016_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_016_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_016_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_016_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_016_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_016_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_016_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_016_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_016_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_016_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_016_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_016_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_016_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_016_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_016_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_016_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_016_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_016_FnTable_GetOutputDevice(unsigned long*, vr::ETextureType)
 t IVRSystem_016_FnTable_GetProjectionMatrix(vr::EVREye, float, float)
 t IVRSystem_016_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_016_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_016_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_016_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_016_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_016_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_016_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_016_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_016_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_016_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_016_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_016_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_016_FnTable_IsDisplayOnDesktop()
 t IVRSystem_016_FnTable_IsInputFocusCapturedByAnotherProcess()
 t IVRSystem_016_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_016_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_016_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_016_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_016_FnTable_ReleaseInputFocus()
 t IVRSystem_016_FnTable_ResetSeatedZeroPose()
 t IVRSystem_016_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_016_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_017_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_017_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_017_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_017_FnTable_CaptureInputFocus()
 t IVRSystem_017_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_017_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_017_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_017_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_017_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_017_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_017_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_017_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_017_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_017_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_017_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_017_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_017_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_017_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_017_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_017_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_017_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_017_FnTable_GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t IVRSystem_017_FnTable_GetProjectionMatrix(vr::EVREye, float, float)
 t IVRSystem_017_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_017_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_017_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_017_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_017_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_017_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_017_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_017_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_017_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_017_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_017_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_017_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_017_FnTable_IsDisplayOnDesktop()
 t IVRSystem_017_FnTable_IsInputFocusCapturedByAnotherProcess()
 t IVRSystem_017_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_017_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_017_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_017_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_017_FnTable_ReleaseInputFocus()
 t IVRSystem_017_FnTable_ResetSeatedZeroPose()
 t IVRSystem_017_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_017_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_018_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_018_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_018_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_018_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_018_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_018_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_018_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_018_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_018_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_018_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_018_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_018_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_018_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_018_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_018_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_018_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_018_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_018_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_018_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_018_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_018_FnTable_GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t IVRSystem_018_FnTable_GetProjectionMatrix(vr::EVREye, float, float)
 t IVRSystem_018_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_018_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_018_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_018_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_018_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_018_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_018_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_018_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_018_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_018_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_018_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_018_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_018_FnTable_IsDisplayOnDesktop()
 t IVRSystem_018_FnTable_IsInputAvailable()
 t IVRSystem_018_FnTable_IsSteamVRDrawingControllers()
 t IVRSystem_018_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_018_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_018_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_018_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_018_FnTable_ResetSeatedZeroPose()
 t IVRSystem_018_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_018_FnTable_ShouldApplicationPause()
 t IVRSystem_018_FnTable_ShouldApplicationReduceRenderingWork()
 t IVRSystem_018_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_019_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_019_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_019_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_019_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_019_FnTable_DriverDebugRequest(unsigned int, char const*, char*, unsigned int)
 t IVRSystem_019_FnTable_GetArrayTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, unsigned int, void*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_019_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_019_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_019_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_019_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_019_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_019_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_019_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_019_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_019_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_019_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_019_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_019_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_019_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_019_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_019_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_019_FnTable_GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t IVRSystem_019_FnTable_GetProjectionMatrix(vr::EVREye, float, float)
 t IVRSystem_019_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_019_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_019_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_019_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_019_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_019_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_019_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_019_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_019_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_019_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_019_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_019_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_019_FnTable_IsDisplayOnDesktop()
 t IVRSystem_019_FnTable_IsInputAvailable()
 t IVRSystem_019_FnTable_IsSteamVRDrawingControllers()
 t IVRSystem_019_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_019_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_019_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_019_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_019_FnTable_ResetSeatedZeroPose()
 t IVRSystem_019_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_019_FnTable_ShouldApplicationPause()
 t IVRSystem_019_FnTable_ShouldApplicationReduceRenderingWork()
 t IVRSystem_019_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_020_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_020_FnTable_AcknowledgeQuit_UserPrompt()
 t IVRSystem_020_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_020_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_020_FnTable_GetAppContainerFilePaths(char*, unsigned int)
 t IVRSystem_020_FnTable_GetArrayTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, unsigned int, void*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_020_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_020_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_020_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_020_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_020_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_020_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_020_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_020_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_020_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_020_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_020_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_020_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_020_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_020_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_020_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_020_FnTable_GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t IVRSystem_020_FnTable_GetProjectionMatrix(vr::EVREye, float, float)
 t IVRSystem_020_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_020_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_020_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_020_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_020_FnTable_GetRuntimeVersion()
 t IVRSystem_020_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_020_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_020_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_020_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_020_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_020_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_020_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_020_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_020_FnTable_IsDisplayOnDesktop()
 t IVRSystem_020_FnTable_IsInputAvailable()
 t IVRSystem_020_FnTable_IsSteamVRDrawingControllers()
 t IVRSystem_020_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_020_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_020_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_020_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_020_FnTable_ResetSeatedZeroPose()
 t IVRSystem_020_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_020_FnTable_ShouldApplicationPause()
 t IVRSystem_020_FnTable_ShouldApplicationReduceRenderingWork()
 t IVRSystem_020_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRSystem_021_FnTable_AcknowledgeQuit_Exiting()
 t IVRSystem_021_FnTable_ApplyTransform(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const*, vr::HmdMatrix34_t const*)
 t IVRSystem_021_FnTable_ComputeDistortion(vr::EVREye, float, float, vr::DistortionCoordinates_t*)
 t IVRSystem_021_FnTable_GetAppContainerFilePaths(char*, unsigned int)
 t IVRSystem_021_FnTable_GetArrayTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, unsigned int, void*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_021_FnTable_GetBoolTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_021_FnTable_GetButtonIdNameFromEnum(vr::EVRButtonId)
 t IVRSystem_021_FnTable_GetControllerAxisTypeNameFromEnum(vr::EVRControllerAxisType)
 t IVRSystem_021_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t IVRSystem_021_FnTable_GetControllerState(unsigned int, vr::VRControllerState001_t*, unsigned int)
 t IVRSystem_021_FnTable_GetControllerStateWithPose(vr::ETrackingUniverseOrigin, unsigned int, vr::VRControllerState001_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_021_FnTable_GetD3D9AdapterIndex()
 t IVRSystem_021_FnTable_GetDXGIOutputInfo(int*)
 t IVRSystem_021_FnTable_GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int)
 t IVRSystem_021_FnTable_GetEventTypeNameFromEnum(vr::EVREventType)
 t IVRSystem_021_FnTable_GetEyeToHeadTransform(vr::EVREye)
 t IVRSystem_021_FnTable_GetFloatTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_021_FnTable_GetHiddenAreaMesh(vr::EVREye, vr::EHiddenAreaMeshType)
 t IVRSystem_021_FnTable_GetInt32TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_021_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_021_FnTable_GetOutputDevice(unsigned long*, vr::ETextureType, VkInstance_T*)
 t IVRSystem_021_FnTable_GetProjectionMatrix(vr::EVREye, float, float)
 t IVRSystem_021_FnTable_GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t IVRSystem_021_FnTable_GetPropErrorNameFromEnum(vr::ETrackedPropertyError)
 t IVRSystem_021_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_021_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t IVRSystem_021_FnTable_GetRuntimeVersion()
 t IVRSystem_021_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t IVRSystem_021_FnTable_GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t IVRSystem_021_FnTable_GetStringTrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, char*, unsigned int, vr::ETrackedPropertyError*)
 t IVRSystem_021_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t IVRSystem_021_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t IVRSystem_021_FnTable_GetTrackedDeviceClass(unsigned int)
 t IVRSystem_021_FnTable_GetTrackedDeviceIndexForControllerRole(vr::ETrackedControllerRole)
 t IVRSystem_021_FnTable_GetUint64TrackedDeviceProperty(unsigned int, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t IVRSystem_021_FnTable_IsDisplayOnDesktop()
 t IVRSystem_021_FnTable_IsInputAvailable()
 t IVRSystem_021_FnTable_IsSteamVRDrawingControllers()
 t IVRSystem_021_FnTable_IsTrackedDeviceConnected(unsigned int)
 t IVRSystem_021_FnTable_PerformFirmwareUpdate(unsigned int)
 t IVRSystem_021_FnTable_PollNextEvent(vr::VREvent_t*, unsigned int)
 t IVRSystem_021_FnTable_PollNextEventWithPose(vr::ETrackingUniverseOrigin, vr::VREvent_t*, unsigned int, vr::TrackedDevicePose_t*)
 t IVRSystem_021_FnTable_ResetSeatedZeroPose()
 t IVRSystem_021_FnTable_SetDisplayVisibility(bool)
 t IVRSystem_021_FnTable_ShouldApplicationPause()
 t IVRSystem_021_FnTable_ShouldApplicationReduceRenderingWork()
 t IVRSystem_021_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t IVRTrackedCamera_002_FnTable_AcquireVideoStreamingService(unsigned int, void**)
 t IVRTrackedCamera_002_FnTable_GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t IVRTrackedCamera_002_FnTable_GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t IVRTrackedCamera_002_FnTable_GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t IVRTrackedCamera_002_FnTable_GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t IVRTrackedCamera_002_FnTable_GetVideoStreamFrameBuffer(void*, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_002_FnTable_HasCamera(unsigned int, bool*)
 t IVRTrackedCamera_002_FnTable_ReleaseVideoStreamingService(void*)
 t IVRTrackedCamera_003_FnTable_AcquireVideoStreamingService(unsigned int, void**)
 t IVRTrackedCamera_003_FnTable_GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t IVRTrackedCamera_003_FnTable_GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t IVRTrackedCamera_003_FnTable_GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t IVRTrackedCamera_003_FnTable_GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t IVRTrackedCamera_003_FnTable_GetVideoStreamFrameBuffer(void*, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_003_FnTable_GetVideoStreamTextureD3D11(void*, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_003_FnTable_GetVideoStreamTextureGL(void*, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_003_FnTable_GetVideoStreamTextureSize(unsigned int, vr::EVRTrackedCameraFrameType, vr::VRTextureBounds_t*, unsigned int*, unsigned int*)
 t IVRTrackedCamera_003_FnTable_HasCamera(unsigned int, bool*)
 t IVRTrackedCamera_003_FnTable_ReleaseVideoStreamTextureGL(void*, unsigned int)
 t IVRTrackedCamera_003_FnTable_ReleaseVideoStreamingService(void*)
 t IVRTrackedCamera_004_FnTable_AcquireVideoStreamingService(unsigned int, unsigned long*)
 t IVRTrackedCamera_004_FnTable_GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t IVRTrackedCamera_004_FnTable_GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t IVRTrackedCamera_004_FnTable_GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t IVRTrackedCamera_004_FnTable_GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t IVRTrackedCamera_004_FnTable_GetVideoStreamFrameBuffer(unsigned long, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_004_FnTable_GetVideoStreamTextureD3D11(unsigned long, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_004_FnTable_GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_004_FnTable_GetVideoStreamTextureSize(unsigned int, vr::EVRTrackedCameraFrameType, vr::VRTextureBounds_t*, unsigned int*, unsigned int*)
 t IVRTrackedCamera_004_FnTable_HasCamera(unsigned int, bool*)
 t IVRTrackedCamera_004_FnTable_ReleaseVideoStreamTextureGL(unsigned long, unsigned int)
 t IVRTrackedCamera_004_FnTable_ReleaseVideoStreamingService(unsigned long)
 t IVRTrackedCamera_005_FnTable_AcquireVideoStreamingService(unsigned int, unsigned long*)
 t IVRTrackedCamera_005_FnTable_GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t IVRTrackedCamera_005_FnTable_GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t IVRTrackedCamera_005_FnTable_GetCameraIntrinsics(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t IVRTrackedCamera_005_FnTable_GetCameraProjection(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t IVRTrackedCamera_005_FnTable_GetVideoStreamFrameBuffer(unsigned long, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_005_FnTable_GetVideoStreamTextureD3D11(unsigned long, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_005_FnTable_GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t IVRTrackedCamera_005_FnTable_GetVideoStreamTextureSize(unsigned int, vr::EVRTrackedCameraFrameType, vr::VRTextureBounds_t*, unsigned int*, unsigned int*)
 t IVRTrackedCamera_005_FnTable_HasCamera(unsigned int, bool*)
 t IVRTrackedCamera_005_FnTable_ReleaseVideoStreamTextureGL(unsigned long, unsigned int)
 t IVRTrackedCamera_005_FnTable_ReleaseVideoStreamingService(unsigned long)
 t IXrBinding::PostEndFrame()
 t IXrBinding::PreBeginFrame()
 t IXrBinding::PreEndFrame()
 t IXrBinding::WaitForQueueToFlush()
 t IXrSwapchain::GetCompositionSwapchain()
 t InMemoryInputStream::~InMemoryInputStream()
 t InMemoryStreamInputBuf::~InMemoryStreamInputBuf()
 t InitAssertCallback()
 t InitAssertCallback() [clone .cold]
 t InitDriverLog(vr::IVRDriverLog*)
 t InitDriverLog(vr::IVRDriverLog*) [clone .cold]
 t InitInternalCameraPassThruInterface(std::function<void* (char const*)>)
 t InitInternalClientInterfaces(std::function<void* (char const*)>)
 t InitInternalInterfaces(std::function<void* (char const*)>, bool)
 t InitInternalInterfaces(std::function<void* (char const*)>, bool) [clone .cold]
 t InitInternalInterfacesNonStandard(void* (*)(char const*))
 t InitInternalInterfacesNonStandard(void* (*)(char const*)) [clone .cold]
 t InitLog(char const*, char const*)
 t InitMainThread()
 t InitSharedResourceNamespace()
 t InitSharedResourceNamespace() [clone .cold]
 t InitSharedResourceNamespaceAsWatchdog()
 t InitSharedResourceNamespaceAsWatchdog() [clone .cold]
 t InitSharedResourceNamespaceForTest()
 t InitSystemBaseTimeTicks(unsigned long)
 t InitializeCompositorSharedState(VRCompositorState_t*)
 t InitializeInterfaceAdapters()
 t InitializeInterfaceFnTables()
 t InputActionRequirementToEnum(std::string const&)
 t InputActionRequirementToStdString(EInputActionRequirement)
 t InputActionScopeToStdString(EInputActionScope)
 t InputActionSetOptionTypeToEnum(std::string const&)
 t InputActionSetOptionTypeToStdString(EInputOptionType)
 t InputActionSetUsageToEnum(std::string const&)
 t InputActionSetUsageToStdString(EInputActionSetUsage)
 t InputActionTypeToStdString(EInputActionType)
 t InputConfig_t::GetOriginInfoInternal(unsigned long, unsigned long*, unsigned long*, unsigned long*)
 t InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long)
 t InputConfig_t::IsDeviceIncludedInRestriction(unsigned long, unsigned long) [clone .cold]
 t InputInterfaceRegistration<CVRInput_001>::GetInterface()
 t InputInterfaceRegistration<CVRInput_001>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_002>::GetInterface()
 t InputInterfaceRegistration<CVRInput_002>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_003>::GetInterface()
 t InputInterfaceRegistration<CVRInput_003>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_004>::GetInterface()
 t InputInterfaceRegistration<CVRInput_004>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_005>::GetInterface()
 t InputInterfaceRegistration<CVRInput_005>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_006>::GetInterface()
 t InputInterfaceRegistration<CVRInput_006>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_007>::GetInterface()
 t InputInterfaceRegistration<CVRInput_007>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_008>::GetInterface()
 t InputInterfaceRegistration<CVRInput_008>::~InputInterfaceRegistration()
 t InputInterfaceRegistration<CVRInput_009>::GetInterface()
 t InputInterfaceRegistration<CVRInput_009>::~InputInterfaceRegistration()
 t InterfaceRegistrationBase::Find(char const*)
 t InterfaceRegistrationBase::InterfaceRegistrationBase(char const*)
 t InterfaceRegistrationBase::InterfaceRegistrationBase(char const*) [clone .cold]
 t InterfaceStringMatchesPrefixAndVersion(std::string const&, std::string const&, int)
 t InternalBitBufErrorHandler(BitBufErrorType, char const*)
 t IpAndPortToString(unsigned int, unsigned short)
 t IpToString(unsigned int)
 t IsAppKeyValid(char const*)
 t IsDashboardVisibleInternal()
 t IsDashboardVisibleInternal() [clone .cold]
 t IsDpadPath(unsigned long)
 t IsDpadPath(unsigned long) [clone .cold]
 t IsDpadValidForComponent(unsigned long)
 t IsDpadValidForComponent(unsigned long) [clone .cold]
 t IsDriverLogActive()
 t IsExtendedStorage(PropertyTableEntry_t const*, unsigned int*, unsigned int*, unsigned int*)
 t IsInputPathLegal(unsigned long, std::string const&, std::string const&)
 t IsInputPathLegal(unsigned long, std::string const&, std::string const&) [clone .cold]
 t IsInputPathLegal(unsigned long, unsigned long)
 t IsInteractionProfileLegal(unsigned long)
 t IsOSUserAdmin()
 t IsOnLaptop()
 t IsOnMainBranch()
 t IsOverlayVisibleInternal(VRCompositor_OverlayState_t const&)
 t IsOverlayVisibleInternal(VRCompositor_OverlayState_t const&) [clone .cold]
 t IsPosix()
 t IsRunningAsService()
 t IsRunningFromPerforce()
 t IsRunningFromPerforce() [clone .cold]
 t IsRunningInAppContainer()
 t IsRunningInAppContainer() [clone .cold]
 t IsValidApplicationPropertyError(vr::ETrackedPropertyError)
 t IsWorkstationLocked()
 t Json::BuiltStyledStreamWriter::BuiltStyledStreamWriter(std::string const&, Json::CommentStyle::Enum, std::string const&, std::string const&, std::string const&, bool, unsigned int)
 t Json::BuiltStyledStreamWriter::BuiltStyledStreamWriter(std::string const&, Json::CommentStyle::Enum, std::string const&, std::string const&, std::string const&, bool, unsigned int) [clone .cold]
 t Json::BuiltStyledStreamWriter::hasCommentForValue(Json::Value const&)
 t Json::BuiltStyledStreamWriter::indent()
 t Json::BuiltStyledStreamWriter::isMultineArray(Json::Value const&)
 t Json::BuiltStyledStreamWriter::pushValue(std::string const&)
 t Json::BuiltStyledStreamWriter::unindent()
 t Json::BuiltStyledStreamWriter::write(Json::Value const&, std::ostream*)
 t Json::BuiltStyledStreamWriter::writeArrayValue(Json::Value const&)
 t Json::BuiltStyledStreamWriter::writeArrayValue(Json::Value const&) [clone .cold]
 t Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine(Json::Value const&)
 t Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine(Json::Value const&) [clone .cold]
 t Json::BuiltStyledStreamWriter::writeCommentBeforeValue(Json::Value const&)
 t Json::BuiltStyledStreamWriter::writeCommentBeforeValue(Json::Value const&) [clone .cold]
 t Json::BuiltStyledStreamWriter::writeIndent()
 t Json::BuiltStyledStreamWriter::writeValue(Json::Value const&)
 t Json::BuiltStyledStreamWriter::writeValue(Json::Value const&) [clone .cold]
 t Json::BuiltStyledStreamWriter::writeWithIndent(std::string const&)
 t Json::BuiltStyledStreamWriter::~BuiltStyledStreamWriter()
 t Json::CharReaderBuilder::CharReaderBuilder()
 t Json::CharReaderBuilder::CharReaderBuilder() [clone .cold]
 t Json::CharReaderBuilder::newCharReader() const
 t Json::CharReaderBuilder::newCharReader() const [clone .cold]
 t Json::CharReaderBuilder::operator[](std::string)
 t Json::CharReaderBuilder::setDefaults(Json::Value*)
 t Json::CharReaderBuilder::setDefaults(Json::Value*) [clone .cold]
 t Json::CharReaderBuilder::strictMode(Json::Value*)
 t Json::CharReaderBuilder::strictMode(Json::Value*) [clone .cold]
 t Json::CharReaderBuilder::validate(Json::Value*) const
 t Json::CharReaderBuilder::validate(Json::Value*) const [clone .cold]
 t Json::CharReaderBuilder::~CharReaderBuilder()
 t Json::Exception::Exception(std::string const&)
 t Json::Exception::Exception(std::string const&) [clone .cold]
 t Json::Exception::what() const
 t Json::Exception::~Exception()
 t Json::FastWriter::FastWriter()
 t Json::FastWriter::dropNullPlaceholders()
 t Json::FastWriter::enableYAMLCompatibility()
 t Json::FastWriter::omitEndingLineFeed()
 t Json::FastWriter::write(Json::Value const&)
 t Json::FastWriter::writeValue(Json::Value const&)
 t Json::FastWriter::writeValue(Json::Value const&) [clone .cold]
 t Json::FastWriter::~FastWriter()
 t Json::Features::Features()
 t Json::Features::all()
 t Json::Features::strictMode()
 t Json::LogicError::LogicError(std::string const&)
 t Json::LogicError::LogicError(std::string const&) [clone .cold]
 t Json::LogicError::~LogicError()
 t Json::OurCharReader::parse(char const*, char const*, Json::Value*, std::string*)
 t Json::OurCharReader::~OurCharReader()
 t Json::OurFeatures::all()
 t Json::OurReader::OurReader(Json::OurFeatures const&)
 t Json::OurReader::OurReader(Json::OurFeatures const&) [clone .cold]
 t Json::OurReader::addComment(char const*, char const*, Json::CommentPlacement)
 t Json::OurReader::addComment(char const*, char const*, Json::CommentPlacement) [clone .cold]
 t Json::OurReader::addError(std::string const&, Json::OurReader::Token&, char const*)
 t Json::OurReader::addError(std::string const&, Json::OurReader::Token&, char const*) [clone .cold]
 t Json::OurReader::addErrorAndRecover(std::string const&, Json::OurReader::Token&, Json::OurReader::TokenType)
 t Json::OurReader::currentValue()
 t Json::OurReader::decodeDouble(Json::OurReader::Token&)
 t Json::OurReader::decodeDouble(Json::OurReader::Token&) [clone .cold]
 t Json::OurReader::decodeDouble(Json::OurReader::Token&, Json::Value&)
 t Json::OurReader::decodeDouble(Json::OurReader::Token&, Json::Value&) [clone .cold]
 t Json::OurReader::decodeNumber(Json::OurReader::Token&)
 t Json::OurReader::decodeNumber(Json::OurReader::Token&) [clone .cold]
 t Json::OurReader::decodeNumber(Json::OurReader::Token&, Json::Value&)
 t Json::OurReader::decodeNumber(Json::OurReader::Token&, Json::Value&) [clone .cold]
 t Json::OurReader::decodeString(Json::OurReader::Token&)
 t Json::OurReader::decodeString(Json::OurReader::Token&) [clone .cold]
 t Json::OurReader::decodeString(Json::OurReader::Token&, std::string&)
 t Json::OurReader::decodeString(Json::OurReader::Token&, std::string&) [clone .cold]
 t Json::OurReader::decodeUnicodeCodePoint(Json::OurReader::Token&, char const*&, char const*, unsigned int&)
 t Json::OurReader::decodeUnicodeCodePoint(Json::OurReader::Token&, char const*&, char const*, unsigned int&) [clone .cold]
 t Json::OurReader::decodeUnicodeEscapeSequence(Json::OurReader::Token&, char const*&, char const*, unsigned int&)
 t Json::OurReader::decodeUnicodeEscapeSequence(Json::OurReader::Token&, char const*&, char const*, unsigned int&) [clone .cold]
 t Json::OurReader::getFormattedErrorMessages() const
 t Json::OurReader::getFormattedErrorMessages() const [clone .cold]
 t Json::OurReader::getLocationLineAndColumn(char const*) const
 t Json::OurReader::getLocationLineAndColumn(char const*, int&, int&) const
 t Json::OurReader::getNextChar()
 t Json::OurReader::getStructuredErrors() const
 t Json::OurReader::getStructuredErrors() const [clone .cold]
 t Json::OurReader::good() const
 t Json::OurReader::match(char const*, int)
 t Json::OurReader::parse(char const*, char const*, Json::Value&, bool)
 t Json::OurReader::parse(char const*, char const*, Json::Value&, bool) [clone .cold]
 t Json::OurReader::pushError(Json::Value const&, std::string const&)
 t Json::OurReader::pushError(Json::Value const&, std::string const&) [clone .cold]
 t Json::OurReader::pushError(Json::Value const&, std::string const&, Json::Value const&)
 t Json::OurReader::pushError(Json::Value const&, std::string const&, Json::Value const&) [clone .cold]
 t Json::OurReader::readArray(Json::OurReader::Token&)
 t Json::OurReader::readArray(Json::OurReader::Token&) [clone .cold]
 t Json::OurReader::readCStyleComment()
 t Json::OurReader::readComment()
 t Json::OurReader::readCppStyleComment()
 t Json::OurReader::readNumber(bool)
 t Json::OurReader::readObject(Json::OurReader::Token&)
 t Json::OurReader::readObject(Json::OurReader::Token&) [clone .cold]
 t Json::OurReader::readString()
 t Json::OurReader::readStringSingleQuote()
 t Json::OurReader::readToken(Json::OurReader::Token&)
 t Json::OurReader::readValue()
 t Json::OurReader::readValue() [clone .cold]
 t Json::OurReader::recoverFromError(Json::OurReader::TokenType)
 t Json::OurReader::skipCommentTokens(Json::OurReader::Token&)
 t Json::OurReader::skipSpaces()
 t Json::Path::Path(std::string const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&)
 t Json::Path::Path(std::string const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&) [clone .cold]
 t Json::Path::addPathInArg(std::string const&, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > const&, __gnu_cxx::__normal_iterator<Json::PathArgument const* const*, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > >&, Json::PathArgument::Kind)
 t Json::Path::invalidPath(std::string const&, int)
 t Json::Path::make(Json::Value&) const
 t Json::Path::makePath(std::string const&, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > const&)
 t Json::Path::makePath(std::string const&, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > const&) [clone .cold]
 t Json::Path::resolve(Json::Value const&) const
 t Json::Path::resolve(Json::Value const&, Json::Value const&) const
 t Json::PathArgument::PathArgument()
 t Json::PathArgument::PathArgument(char const*)
 t Json::PathArgument::PathArgument(std::string const&)
 t Json::PathArgument::PathArgument(unsigned int)
 t Json::Reader::Reader()
 t Json::Reader::Reader() [clone .cold]
 t Json::Reader::Reader(Json::Features const&)
 t Json::Reader::Reader(Json::Features const&) [clone .cold]
 t Json::Reader::addComment(char const*, char const*, Json::CommentPlacement)
 t Json::Reader::addComment(char const*, char const*, Json::CommentPlacement) [clone .cold]
 t Json::Reader::addError(std::string const&, Json::Reader::Token&, char const*)
 t Json::Reader::addError(std::string const&, Json::Reader::Token&, char const*) [clone .cold]
 t Json::Reader::addErrorAndRecover(std::string const&, Json::Reader::Token&, Json::Reader::TokenType)
 t Json::Reader::currentValue()
 t Json::Reader::decodeDouble(Json::Reader::Token&)
 t Json::Reader::decodeDouble(Json::Reader::Token&) [clone .cold]
 t Json::Reader::decodeDouble(Json::Reader::Token&, Json::Value&)
 t Json::Reader::decodeDouble(Json::Reader::Token&, Json::Value&) [clone .cold]
 t Json::Reader::decodeNumber(Json::Reader::Token&)
 t Json::Reader::decodeNumber(Json::Reader::Token&) [clone .cold]
 t Json::Reader::decodeNumber(Json::Reader::Token&, Json::Value&)
 t Json::Reader::decodeNumber(Json::Reader::Token&, Json::Value&) [clone .cold]
 t Json::Reader::decodeString(Json::Reader::Token&)
 t Json::Reader::decodeString(Json::Reader::Token&) [clone .cold]
 t Json::Reader::decodeString(Json::Reader::Token&, std::string&)
 t Json::Reader::decodeString(Json::Reader::Token&, std::string&) [clone .cold]
 t Json::Reader::decodeUnicodeCodePoint(Json::Reader::Token&, char const*&, char const*, unsigned int&)
 t Json::Reader::decodeUnicodeCodePoint(Json::Reader::Token&, char const*&, char const*, unsigned int&) [clone .cold]
 t Json::Reader::decodeUnicodeEscapeSequence(Json::Reader::Token&, char const*&, char const*, unsigned int&)
 t Json::Reader::decodeUnicodeEscapeSequence(Json::Reader::Token&, char const*&, char const*, unsigned int&) [clone .cold]
 t Json::Reader::getFormatedErrorMessages() const
 t Json::Reader::getFormattedErrorMessages() const
 t Json::Reader::getFormattedErrorMessages() const [clone .cold]
 t Json::Reader::getLocationLineAndColumn(char const*) const
 t Json::Reader::getLocationLineAndColumn(char const*, int&, int&) const
 t Json::Reader::getLocationSnippet(char const*) const
 t Json::Reader::getLocationSnippet(char const*) const [clone .cold]
 t Json::Reader::getNextChar()
 t Json::Reader::getStructuredErrors() const
 t Json::Reader::getStructuredErrors() const [clone .cold]
 t Json::Reader::good() const
 t Json::Reader::match(char const*, int)
 t Json::Reader::parse(char const*, char const*, Json::Value&, bool)
 t Json::Reader::parse(char const*, char const*, Json::Value&, bool) [clone .cold]
 t Json::Reader::parse(std::istream&, Json::Value&, bool)
 t Json::Reader::parse(std::istream&, Json::Value&, bool) [clone .cold]
 t Json::Reader::parse(std::string const&, Json::Value&, bool)
 t Json::Reader::pushError(Json::Value const&, std::string const&)
 t Json::Reader::pushError(Json::Value const&, std::string const&) [clone .cold]
 t Json::Reader::pushError(Json::Value const&, std::string const&, Json::Value const&)
 t Json::Reader::pushError(Json::Value const&, std::string const&, Json::Value const&) [clone .cold]
 t Json::Reader::readArray(Json::Reader::Token&)
 t Json::Reader::readArray(Json::Reader::Token&) [clone .cold]
 t Json::Reader::readCStyleComment()
 t Json::Reader::readComment()
 t Json::Reader::readCppStyleComment()
 t Json::Reader::readNumber()
 t Json::Reader::readObject(Json::Reader::Token&)
 t Json::Reader::readObject(Json::Reader::Token&) [clone .cold]
 t Json::Reader::readString()
 t Json::Reader::readToken(Json::Reader::Token&)
 t Json::Reader::readValue()
 t Json::Reader::readValue() [clone .cold]
 t Json::Reader::recoverFromError(Json::Reader::TokenType)
 t Json::Reader::skipCommentTokens(Json::Reader::Token&)
 t Json::Reader::skipSpaces()
 t Json::Reader::~Reader()
 t Json::RuntimeError::RuntimeError(std::string const&)
 t Json::RuntimeError::RuntimeError(std::string const&) [clone .cold]
 t Json::RuntimeError::~RuntimeError()
 t Json::StreamWriter::Factory::~Factory()
 t Json::StreamWriter::StreamWriter()
 t Json::StreamWriter::~StreamWriter()
 t Json::StreamWriterBuilder::StreamWriterBuilder()
 t Json::StreamWriterBuilder::StreamWriterBuilder() [clone .cold]
 t Json::StreamWriterBuilder::newStreamWriter() const
 t Json::StreamWriterBuilder::newStreamWriter() const [clone .cold]
 t Json::StreamWriterBuilder::operator[](std::string)
 t Json::StreamWriterBuilder::setDefaults(Json::Value*)
 t Json::StreamWriterBuilder::setDefaults(Json::Value*) [clone .cold]
 t Json::StreamWriterBuilder::validate(Json::Value*) const
 t Json::StreamWriterBuilder::validate(Json::Value*) const [clone .cold]
 t Json::StreamWriterBuilder::~StreamWriterBuilder()
 t Json::StyledStreamWriter::StyledStreamWriter(std::string)
 t Json::StyledStreamWriter::StyledStreamWriter(std::string) [clone .cold]
 t Json::StyledStreamWriter::hasCommentForValue(Json::Value const&)
 t Json::StyledStreamWriter::indent()
 t Json::StyledStreamWriter::isMultineArray(Json::Value const&)
 t Json::StyledStreamWriter::pushValue(std::string const&)
 t Json::StyledStreamWriter::unindent()
 t Json::StyledStreamWriter::write(std::ostream&, Json::Value const&)
 t Json::StyledStreamWriter::writeArrayValue(Json::Value const&)
 t Json::StyledStreamWriter::writeArrayValue(Json::Value const&) [clone .cold]
 t Json::StyledStreamWriter::writeCommentAfterValueOnSameLine(Json::Value const&)
 t Json::StyledStreamWriter::writeCommentAfterValueOnSameLine(Json::Value const&) [clone .cold]
 t Json::StyledStreamWriter::writeCommentBeforeValue(Json::Value const&)
 t Json::StyledStreamWriter::writeCommentBeforeValue(Json::Value const&) [clone .cold]
 t Json::StyledStreamWriter::writeIndent()
 t Json::StyledStreamWriter::writeValue(Json::Value const&)
 t Json::StyledStreamWriter::writeValue(Json::Value const&) [clone .cold]
 t Json::StyledStreamWriter::writeWithIndent(std::string const&)
 t Json::StyledStreamWriter::~StyledStreamWriter()
 t Json::StyledWriter::StyledWriter()
 t Json::StyledWriter::hasCommentForValue(Json::Value const&)
 t Json::StyledWriter::indent()
 t Json::StyledWriter::indent() [clone .cold]
 t Json::StyledWriter::isMultineArray(Json::Value const&)
 t Json::StyledWriter::pushValue(std::string const&)
 t Json::StyledWriter::unindent()
 t Json::StyledWriter::write(Json::Value const&)
 t Json::StyledWriter::writeArrayValue(Json::Value const&)
 t Json::StyledWriter::writeArrayValue(Json::Value const&) [clone .cold]
 t Json::StyledWriter::writeCommentAfterValueOnSameLine(Json::Value const&)
 t Json::StyledWriter::writeCommentAfterValueOnSameLine(Json::Value const&) [clone .cold]
 t Json::StyledWriter::writeCommentBeforeValue(Json::Value const&)
 t Json::StyledWriter::writeCommentBeforeValue(Json::Value const&) [clone .cold]
 t Json::StyledWriter::writeIndent()
 t Json::StyledWriter::writeValue(Json::Value const&)
 t Json::StyledWriter::writeValue(Json::Value const&) [clone .cold]
 t Json::StyledWriter::writeWithIndent(std::string const&)
 t Json::StyledWriter::~StyledWriter()
 t Json::Value*& std::deque<Json::Value*, std::allocator<Json::Value*> >::emplace_back<Json::Value*>(Json::Value*&&) [clone .isra.0]
 t Json::Value::CZString::CZString(Json::Value::CZString const&)
 t Json::Value::CZString::CZString(Json::Value::CZString const&) [clone .cold]
 t Json::Value::CZString::CZString(Json::Value::CZString&&)
 t Json::Value::CZString::CZString(char const*, unsigned int, Json::Value::CZString::DuplicationPolicy)
 t Json::Value::CZString::CZString(unsigned int)
 t Json::Value::CZString::data() const
 t Json::Value::CZString::index() const
 t Json::Value::CZString::isStaticString() const
 t Json::Value::CZString::length() const
 t Json::Value::CZString::operator<(Json::Value::CZString const&) const
 t Json::Value::CZString::operator=(Json::Value::CZString)
 t Json::Value::CZString::operator==(Json::Value::CZString const&) const
 t Json::Value::CZString::swap(Json::Value::CZString&)
 t Json::Value::CZString::~CZString()
 t Json::Value::CommentInfo::CommentInfo()
 t Json::Value::CommentInfo::setComment(char const*, unsigned long)
 t Json::Value::CommentInfo::setComment(char const*, unsigned long) [clone .cold]
 t Json::Value::CommentInfo::~CommentInfo()
 t Json::Value::Value(Json::StaticString const&)
 t Json::Value::Value(Json::Value const&)
 t Json::Value::Value(Json::Value const&) [clone .cold]
 t Json::Value::Value(Json::Value&&)
 t Json::Value::Value(Json::ValueType)
 t Json::Value::Value(bool)
 t Json::Value::Value(char const*)
 t Json::Value::Value(char const*, char const*)
 t Json::Value::Value(double)
 t Json::Value::Value(float)
 t Json::Value::Value(int)
 t Json::Value::Value(long long)
 t Json::Value::Value(std::string const&)
 t Json::Value::Value(unsigned int)
 t Json::Value::Value(unsigned long long)
 t Json::Value::append(Json::Value const&)
 t Json::Value::append(Json::Value const&) [clone .cold]
 t Json::Value::asBool() const
 t Json::Value::asCString() const
 t Json::Value::asCString() const [clone .cold]
 t Json::Value::asDouble() const
 t Json::Value::asFloat() const
 t Json::Value::asInt() const
 t Json::Value::asInt64() const
 t Json::Value::asLargestInt() const
 t Json::Value::asLargestUInt() const
 t Json::Value::asString() const
 t Json::Value::asUInt() const
 t Json::Value::asUInt64() const
 t Json::Value::begin()
 t Json::Value::begin() const
 t Json::Value::clear()
 t Json::Value::clear() [clone .cold]
 t Json::Value::compare(Json::Value const&) const
 t Json::Value::empty() const
 t Json::Value::end()
 t Json::Value::end() const
 t Json::Value::find(char const*, char const*) const
 t Json::Value::find(char const*, char const*) const [clone .cold]
 t Json::Value::get(char const*, Json::Value const&) const
 t Json::Value::get(char const*, char const*, Json::Value const&) const
 t Json::Value::get(char const*, char const*, Json::Value const&) const [clone .cold]
 t Json::Value::get(std::string const&, Json::Value const&) const
 t Json::Value::get(unsigned int, Json::Value const&) const
 t Json::Value::get(unsigned int, Json::Value const&) const [clone .cold]
 t Json::Value::getComment(Json::CommentPlacement) const
 t Json::Value::getMemberNames() const
 t Json::Value::getMemberNames() const [clone .cold]
 t Json::Value::getOffsetLimit() const
 t Json::Value::getOffsetStart() const
 t Json::Value::getString(char const**, char const**) const
 t Json::Value::hasComment(Json::CommentPlacement) const
 t Json::Value::initBasic(Json::ValueType, bool)
 t Json::Value::isArray() const
 t Json::Value::isBool() const
 t Json::Value::isConvertibleTo(Json::ValueType) const
 t Json::Value::isConvertibleTo(Json::ValueType) const [clone .cold]
 t Json::Value::isDouble() const
 t Json::Value::isInt() const
 t Json::Value::isInt64() const
 t Json::Value::isIntegral() const
 t Json::Value::isMember(char const*) const
 t Json::Value::isMember(char const*, char const*) const
 t Json::Value::isMember(std::string const&) const
 t Json::Value::isNull() const
 t Json::Value::isNumeric() const
 t Json::Value::isObject() const
 t Json::Value::isString() const
 t Json::Value::isUInt() const
 t Json::Value::isUInt64() const
 t Json::Value::isValidIndex(unsigned int) const
 t Json::Value::operator!() const
 t Json::Value::operator!=(Json::Value const&) const
 t Json::Value::operator<(Json::Value const&) const
 t Json::Value::operator<=(Json::Value const&) const
 t Json::Value::operator=(Json::Value)
 t Json::Value::operator==(Json::Value const&) const
 t Json::Value::operator>(Json::Value const&) const
 t Json::Value::operator>=(Json::Value const&) const
 t Json::Value::operator[](Json::StaticString const&)
 t Json::Value::operator[](char const*)
 t Json::Value::operator[](char const*) const
 t Json::Value::operator[](int)
 t Json::Value::operator[](int) [clone .cold]
 t Json::Value::operator[](int) const
 t Json::Value::operator[](int) const [clone .cold]
 t Json::Value::operator[](std::string const&)
 t Json::Value::operator[](std::string const&) const
 t Json::Value::operator[](unsigned int)
 t Json::Value::operator[](unsigned int) [clone .cold]
 t Json::Value::operator[](unsigned int) const
 t Json::Value::operator[](unsigned int) const [clone .cold]
 t Json::Value::removeIndex(unsigned int, Json::Value*)
 t Json::Value::removeIndex(unsigned int, Json::Value*) [clone .cold]
 t Json::Value::removeMember(char const*)
 t Json::Value::removeMember(char const*) [clone .cold]
 t Json::Value::removeMember(char const*, Json::Value*)
 t Json::Value::removeMember(char const*, char const*, Json::Value*)
 t Json::Value::removeMember(char const*, char const*, Json::Value*) [clone .cold]
 t Json::Value::removeMember(std::string const&)
 t Json::Value::removeMember(std::string const&, Json::Value*)
 t Json::Value::resize(unsigned int)
 t Json::Value::resize(unsigned int) [clone .cold]
 t Json::Value::resolveReference(char const*)
 t Json::Value::resolveReference(char const*) [clone .cold]
 t Json::Value::resolveReference(char const*, char const*)
 t Json::Value::resolveReference(char const*, char const*) [clone .cold]
 t Json::Value::setComment(char const*, Json::CommentPlacement)
 t Json::Value::setComment(char const*, unsigned long, Json::CommentPlacement)
 t Json::Value::setComment(std::string const&, Json::CommentPlacement)
 t Json::Value::setOffsetLimit(unsigned long)
 t Json::Value::setOffsetStart(unsigned long)
 t Json::Value::size() const
 t Json::Value::swap(Json::Value&)
 t Json::Value::swapPayload(Json::Value&)
 t Json::Value::toStyledString() const
 t Json::Value::toStyledString() const [clone .cold]
 t Json::Value::type() const
 t Json::Value::~Value()
 t Json::ValueConstIterator::ValueConstIterator()
 t Json::ValueConstIterator::ValueConstIterator(Json::ValueIterator const&)
 t Json::ValueConstIterator::ValueConstIterator(std::_Rb_tree_iterator<std::pair<Json::Value::CZString const, Json::Value> > const&)
 t Json::ValueConstIterator::operator=(Json::ValueIteratorBase const&)
 t Json::ValueIterator::ValueIterator()
 t Json::ValueIterator::ValueIterator(Json::ValueConstIterator const&)
 t Json::ValueIterator::ValueIterator(Json::ValueConstIterator const&) [clone .cold]
 t Json::ValueIterator::ValueIterator(Json::ValueIterator const&)
 t Json::ValueIterator::ValueIterator(std::_Rb_tree_iterator<std::pair<Json::Value::CZString const, Json::Value> > const&)
 t Json::ValueIterator::operator=(Json::ValueIterator const&)
 t Json::ValueIteratorBase::ValueIteratorBase()
 t Json::ValueIteratorBase::ValueIteratorBase(std::_Rb_tree_iterator<std::pair<Json::Value::CZString const, Json::Value> > const&)
 t Json::ValueIteratorBase::computeDistance(Json::ValueIteratorBase const&) const
 t Json::ValueIteratorBase::copy(Json::ValueIteratorBase const&)
 t Json::ValueIteratorBase::decrement()
 t Json::ValueIteratorBase::deref() const
 t Json::ValueIteratorBase::increment()
 t Json::ValueIteratorBase::index() const
 t Json::ValueIteratorBase::isEqual(Json::ValueIteratorBase const&) const
 t Json::ValueIteratorBase::key() const
 t Json::ValueIteratorBase::key() const [clone .cold]
 t Json::ValueIteratorBase::memberName() const
 t Json::ValueIteratorBase::memberName(char const**) const
 t Json::ValueIteratorBase::name() const
 t Json::Writer::~Writer()
 t Json::codePointToUTF8(unsigned int)
 t Json::codePointToUTF8(unsigned int) [clone .cold]
 t Json::duplicateAndPrefixStringValue(char const*, unsigned int)
 t Json::duplicateAndPrefixStringValue(char const*, unsigned int) [clone .cold]
 t Json::normalizeEOL(char const*, char const*)
 t Json::normalizeEOL(char const*, char const*) [clone .cold]
 t Json::operator<<(std::ostream&, Json::Value const&)
 t Json::operator<<(std::ostream&, Json::Value const&) [clone .cold]
 t Json::operator>>(std::istream&, Json::Value&)
 t Json::operator>>(std::istream&, Json::Value&) [clone .cold]
 t Json::parseFromStream(Json::CharReader::Factory const&, std::istream&, Json::Value*, std::string*)
 t Json::parseFromStream(Json::CharReader::Factory const&, std::istream&, Json::Value*, std::string*) [clone .cold]
 t Json::throwLogicError(std::string const&)
 t Json::throwRuntimeError(std::string const&)
 t Json::valueToQuotedString(char const*)
 t Json::valueToQuotedString(char const*) [clone .cold]
 t Json::valueToQuotedStringN(char const*, unsigned int)
 t Json::valueToQuotedStringN(char const*, unsigned int) [clone .cold]
 t Json::valueToString(bool)
 t Json::valueToString(double)
 t Json::valueToString(double, bool, unsigned int)
 t Json::valueToString(int)
 t Json::valueToString(long long)
 t Json::valueToString(unsigned int)
 t Json::valueToString(unsigned long long)
 t Json::writeString(Json::StreamWriter::Factory const&, Json::Value const&)
 t Json::writeString(Json::StreamWriter::Factory const&, Json::Value const&) [clone .cold]
 t LegacySuffix(EActionBindingCategory)
 t LfMutexLockRobust(LfMutex*, timespec const*)
 t LfMutexUnlockRobust(LfMutex*)
 t LiquidVR::BCanRunDirectModeBasedOnDriverVersion(unsigned int, unsigned int)
 t LiquidVR::BCanRunVulkanBasedOnDriverVersion()
 t LiquidVR::CVcetMotionEstimator::GetMotionOutput(unsigned int, short*, unsigned int, unsigned int*, unsigned int*, float*)
 t LiquidVR::CVcetMotionEstimator::~CVcetMotionEstimator()
 t LiquidVR::CalculateMotion(unsigned int, LiquidVR::YUVSurface const*, LiquidVR::YUVSurface const*)
 t LiquidVR::CreateALVRD3D11Device(void*, void**)
 t LiquidVR::CreateDeviceForDisplay(void*, void*, void**, bool*, LiquidVR::DisplayMode_t*)
 t LiquidVR::CreateGPUSemaphoreVulkan(void*, void*, void**, void**)
 t LiquidVR::CreateHiddenDisplay(int, void**)
 t LiquidVR::CreatePresentableSurface(void*, unsigned int, void**)
 t LiquidVR::CreateVulkanExtensionAndDevice(void*, void*, void**, void**)
 t LiquidVR::D3D11CreateDeviceHP3D(void*, unsigned int, void*, unsigned int, unsigned int const*, unsigned int, unsigned int, void**, unsigned int*, void**)
 t LiquidVR::GetAdapterLuid(int, void*)
 t LiquidVR::GetAverageMotionEstimationTimeInSeconds()
 t LiquidVR::GetCurrentDriverVersion()
 t LiquidVR::GetDisplayVisibility(int, LiquidVR::DisplayInfo*)
 t LiquidVR::GetMotionOutput(unsigned int, short*, unsigned int, unsigned int*, unsigned int*, float*)
 t LiquidVR::GetMotionVectorInput(unsigned int, LiquidVR::YUVSurface*)
 t LiquidVR::GetSharedHandle(void*, unsigned long*)
 t LiquidVR::GetSurfaceResource(void*, void**)
 t LiquidVR::GetTextureLayout(LiquidVR::TextureLayout*)
 t LiquidVR::GetTimeSinceLastVsync(void*, float*, unsigned long*)
 t LiquidVR::InitializeMotionEstimation(void*, unsigned int, unsigned int)
 t LiquidVR::OpenSharedD3D11ImageForVulkan(void*, void*, int, unsigned int, unsigned int, unsigned int, bool, void**)
 t LiquidVR::Present(void*, bool, bool)
 t LiquidVR::QueueGPUSemaphoreSignal(void*, void*)
 t LiquidVR::QueueGPUSemaphoreWait(void*, void*)
 t LiquidVR::RegisterMotionVectorInput(vr::IVRSharedImage*, LiquidVR::YUVSurface*)
 t LiquidVR::SetDisplayVisibility(int, int, LiquidVR::DisplayVisibility)
 t LiquidVR::Shutdown()
 t LiquidVR::ShutdownMotionEstimation()
 t LiquidVR::SupportsAlwaysOnMotionSmoothing()
 t LiquidVR::SupportsMotionSmoothing()
 t LiquidVR::SupportsMotionSmoothing() [clone .cold]
 t LiquidVR::SupportsTextureImport()
 t LiquidVR::TopologyChanged()
 t LiquidVR::WaitForPresent()
 t LiquidVR::WaitTilFinished(unsigned int, unsigned int)
 t LoadObjFromUtf8Path(std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, char const*, char const*)
 t LoadObjFromUtf8Path(std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, char const*, char const*) [clone .cold]
 t Log(ELogLevel, char const*, ...)
 t Log(char const*, ...)
 t LogDirect(ELogLevel, char const*, __va_list_tag (&) [1])
 t LogHapticDebugIfEnabled(char const*, ...)
 t LogHapticDebugIfEnabled(char const*, ...) [clone .cold]
 t LogSceneApplicationState(VRApplicationsState_t const*, char const*)
 t MailboxInterfaceRegistration<CVRMailbox_001>::GetInterface()
 t MailboxInterfaceRegistration<CVRMailbox_001>::~MailboxInterfaceRegistration()
 t MakeFileWriteable(char const*)
 t MaterialUtf8FileReader::operator()(std::string const&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >&)
 t MaterialUtf8FileReader::~MaterialUtf8FileReader()
 t Matrix44Aligned::ToQuaternion() const
 t Matrix44Aligned::ToTransform() const
 t MergeJsonValues(Json::Value&, Json::Value&)
 t MergeJsonValues(Json::Value&, Json::Value&) [clone .cold]
 t MillisecondsFromNanoseconds(unsigned long)
 t ModeSlot_t::GetActionPath() const
 t ModeSlot_t::GetActionScope() const
 t ModeSlot_t::GetActionType() const
 t ModeSlot_t::~ModeSlot_t()
 t Mode_t::GetBoolParameter(std::string const&, bool) const
 t Mode_t::GetFloatParameter(std::string const&, float) const
 t Mode_t::GetStringParameter(std::string const&, std::string const&) const
 t Mode_t::HasParameter(std::string const&) const
 t Mode_t::~Mode_t()
 t NanosecondsFromSystemTicks(unsigned long)
 t NotificationsInterfaceRegistration<CVRNotifications_001>::GetInterface()
 t NotificationsInterfaceRegistration<CVRNotifications_001>::~NotificationsInterfaceRegistration()
 t NvAPI::AcquireHiddenDisplay(int, unsigned int, unsigned int, void*, void**, std::vector<NvAPI::DisplayMode_t, std::allocator<NvAPI::DisplayMode_t> >*)
 t NvAPI::BCanRunDirectModeBasedOnDriverVersion(unsigned int, unsigned int)
 t NvAPI::BSupportsRuntimeFramerateChangeBasedOnDriverVersion()
 t NvAPI::CreatePresentableSurface(void*, NvAPI::DisplayMode_t const&, unsigned int, unsigned int*, void**)
 t NvAPI::DeclareVRProcess(bool)
 t NvAPI::DestroySurface(void*, unsigned int)
 t NvAPI::DirectModeRenderWait(void*, void*, bool)
 t NvAPI::DisplayMode_t::operator==(NvAPI::DisplayMode_t const&) const
 t NvAPI::DisplayPortLinkInfo_t::DumpRawDataToLog() const
 t NvAPI::DisplayPortLinkInfo_t::GetSymbolErrorCount(int*, int) const
 t NvAPI::FindHighestRefreshWithExactResolution(NvAPI::DisplayMode_t*, std::vector<NvAPI::DisplayMode_t, std::allocator<NvAPI::DisplayMode_t> > const&, int, int)
 t NvAPI::GetAdapterLuid(int, void*)
 t NvAPI::GetCurrentDriverVersion()
 t NvAPI::GetDisplayStatus(void*, NvAPI::DisplayStatus_t*)
 t NvAPI::GetDisplayVisibility(int)
 t NvAPI::GetGpuBusUtilization(int, float*)
 t NvAPI::GetTimeSinceLastVsync(void*, float*, unsigned long*)
 t NvAPI::GetVSyncToFlip(float*)
 t NvAPI::GetVideoMemoryInfo(void*, NvAPI::VideoMemoryInfo_t*)
 t NvAPI::HintCreateLowLatencyDevice(bool)
 t NvAPI::ImplicitSLIControl(void*, bool)
 t NvAPI::Present(void*, void*, unsigned int, NvAPI::PresentMode, unsigned int)
 t NvAPI::ReadDisplayPortLinkInfo(NvAPI::DisplayPortLinkInfo_t*, void*)
 t NvAPI::ReleaseHiddenDisplay(void**)
 t NvAPI::SetDisplayMode(void*, NvAPI::DisplayMode_t const&, unsigned int)
 t NvAPI::SetDisplayVisibility(int, NvAPI::DisplayVisibility)
 t NvAPI::SupportsHighPriorityRenderContext()
 t NvAPI::SupportsMotionSmoothing()
 t NvAPI::WaitForPresent(void*, unsigned int, unsigned int*)
 t NvAPI::WaitForVBlank(void*, unsigned int)
 t OSWaitForDebugger()
 t OpenURL(char const*)
 t OpenURL(char const*) [clone .cold]
 t OpenVR_EnsurePathRegistryIntact(std::vector<std::string, std::allocator<std::string> >*)
 t OpenVR_EnsurePathRegistryIntact(std::vector<std::string, std::allocator<std::string> >*) [clone .cold]
 t OpenVR_ReadVersionFile(std::string&, unsigned int*)
 t OpenVR_ReadVersionFile(std::string&, unsigned int*) [clone .cold]
 t OpenVR_ReadVersionFile(std::string&, unsigned int*)::{unnamed type#1}::~basic_string()
 t OpenVR_SetupLogging(CVRLog*, bool, char const*, std::vector<std::string, std::allocator<std::string> >*, bool, unsigned long)
 t OpenVR_SetupLogging(CVRLog*, bool, char const*, std::vector<std::string, std::allocator<std::string> >*, bool, unsigned long) [clone .cold]
 t OverlayInterfaceRegistration<CVROverlay_001>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_001>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_002>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_002>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_003>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_003>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_004>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_004>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_005>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_005>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_006>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_006>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_007>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_007>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_008>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_008>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_009>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_009>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_010>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_010>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_011>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_011>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_012>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_012>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_013>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_013>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_014>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_014>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_015>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_015>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_016>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_016>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_017>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_017>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_018>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_018>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_019>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_019>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_020>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_020>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_021>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_021>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_022>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_022>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_023>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_023>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_024>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_024>::~OverlayInterfaceRegistration()
 t OverlayInterfaceRegistration<CVROverlay_025>::GetInterface()
 t OverlayInterfaceRegistration<CVROverlay_025>::~OverlayInterfaceRegistration()
 t OverlayViewInterfaceRegistration<CVROverlayView_001>::GetInterface()
 t OverlayViewInterfaceRegistration<CVROverlayView_001>::~OverlayViewInterfaceRegistration()
 t OverlayViewInterfaceRegistration<CVROverlayView_002>::GetInterface()
 t OverlayViewInterfaceRegistration<CVROverlayView_002>::~OverlayViewInterfaceRegistration()
 t OxrApiLayer_t::~OxrApiLayer_t()
 t ParseStringListFromJson(std::vector<std::string, std::allocator<std::string> >*, Json::Value const&, char const*)
 t ParseStringListFromJson(std::vector<std::string, std::allocator<std::string> >*, Json::Value const&, char const*) [clone .cold]
 t Path_Compact(std::string const&, char)
 t Path_Compact(std::string const&, char) [clone .cold]
 t Path_DeleteDirectory(std::string const&, bool)
 t Path_Exists(std::string const&)
 t Path_FilePathToUrl(std::string const&, std::string const&)
 t Path_FilePathToUrl(std::string const&, std::string const&) [clone .cold]
 t Path_FindParentDirectoryRecursively(std::string const&, std::string const&)
 t Path_FindParentDirectoryRecursively(std::string const&, std::string const&) [clone .cold]
 t Path_FindParentSubDirectoryRecursively(std::string const&, std::string const&)
 t Path_FindParentSubDirectoryRecursively(std::string const&, std::string const&) [clone .cold]
 t Path_FixSlashes(std::string const&, char)
 t Path_FixSlashes(std::string const&, char) [clone .cold]
 t Path_GetExecutablePath()
 t Path_GetExtension(std::string const&)
 t Path_GetSlash()
 t Path_GetTemporaryDirectory()
 t Path_GetThisModulePath()
 t Path_GetWorkingDirectory()
 t Path_GetWorkingDirectory() [clone .cold]
 t Path_IsAbsolute(std::string const&)
 t Path_IsAppBundle(std::string const&)
 t Path_IsDirectory(std::string const&)
 t Path_IsDirectory(std::string const&) [clone .cold]
 t Path_IsSamePath(std::string const&, std::string const&)
 t Path_IsSamePath(std::string const&, std::string const&) [clone .cold]
 t Path_Join(std::string const&, std::string const&, char)
 t Path_Join(std::string const&, std::string const&, char) [clone .cold]
 t Path_Join(std::string const&, std::string const&, std::string const&, char)
 t Path_Join(std::string const&, std::string const&, std::string const&, char) [clone .cold]
 t Path_Join(std::string const&, std::string const&, std::string const&, std::string const&, char)
 t Path_Join(std::string const&, std::string const&, std::string const&, std::string const&, char) [clone .cold]
 t Path_Join(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&, char)
 t Path_Join(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&, char) [clone .cold]
 t Path_MakeAbsolute(std::string const&, std::string const&)
 t Path_MakeAbsolute(std::string const&, std::string const&) [clone .cold]
 t Path_MakeWritable(std::string const&)
 t Path_ReadBinaryFile(std::string const&)
 t Path_ReadBinaryFile(std::string const&) [clone .cold]
 t Path_ReadBinaryFile(std::string const&, int*)
 t Path_ReadBinaryFile(std::string const&, unsigned char*, unsigned int)
 t Path_ReadTextFile(std::string const&)
 t Path_RemoveTrailingSlash(std::string const&, char)
 t Path_RemoveTrailingSlash(std::string const&, char) [clone .cold]
 t Path_SanitizeFilename(std::string const&)
 t Path_SanitizeFilename(std::string const&) [clone .cold]
 t Path_SetWorkingDirectory(std::string const&)
 t Path_StripDirectory(std::string const&, char)
 t Path_StripExtension(std::string const&)
 t Path_StripFilename(std::string const&, char)
 t Path_UnlinkFile(std::string const&)
 t Path_UrlToFilePath(std::string const&)
 t Path_UrlToFilePath(std::string const&) [clone .cold]
 t Path_WriteBinaryFile(std::string const&, unsigned char*, unsigned int)
 t Path_WriteStringToTextFile(std::string const&, char const*)
 t Path_WriteStringToTextFileAtomic(std::string const&, char const*)
 t Path_WriteStringToTextFileAtomic(std::string const&, char const*) [clone .cold]
 t Plat_IsInDebugSession
 t PointMaskIntersectionTest(float, float, vr::VROverlayIntersectionMaskPrimitive_t const*, unsigned int)
 t PredictRawPose(double, vr::HmdMatrix34_t const&, VRTrackingState_DeviceInfo_t const&, VRTrackingState_Pose_t const&, vr::TrackedDevicePose_t*)
 t ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)
 t ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*) [clone .cold]
 t ProcessDpadBindings(unsigned int, XrBindingModificationsKHR const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, SuggestedBinding*, std::vector<unsigned long, std::allocator<unsigned long> >&)
 t ProcessDpadBindings(unsigned int, XrBindingModificationsKHR const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, SuggestedBinding*, std::vector<unsigned long, std::allocator<unsigned long> >&) [clone .cold]
 t QuaternionAligned::ToMatrix(VectorAligned const&) const
 t ReadJsonFile(std::string const&, Json::Value&, std::string*)
 t ReadJsonFile(std::string const&, Json::Value&, std::string*) [clone .cold]
 t ReadJsonFromString(std::string const&, Json::Value&, std::string*)
 t ReadJsonFromString(std::string const&, Json::Value&, std::string*) [clone .cold]
 t ReadLocalizationBlock(std::string const&, Json::Value const&, std::string const&, Json::Value&)
 t ReadLocalizationBlock(std::string const&, Json::Value const&, std::string const&, Json::Value&) [clone .cold]
 t ReadLocalizationFile(std::string const&, std::string const&, Json::Value&)
 t ReadLocalizationFile(std::string const&, std::string const&, Json::Value&) [clone .cold]
 t ReapChildProcesses(int)
 t Reflection::Detail::ToBaseT<CBoneMaskResource, CAnimResource>::operator()(void const*)
 t Reflection::Detail::ToBaseT<CBoneMaskResource, CAnimResource>::operator()(void*)
 t Reflection::Detail::ToBaseT<CKeyframedDataResource, CAnimResource>::operator()(void const*)
 t Reflection::Detail::ToBaseT<CKeyframedDataResource, CAnimResource>::operator()(void*)
 t Reflection::Detail::TypeInfoT<CAnimResource>::IsDerivedFrom(unsigned int) const
 t Reflection::Detail::TypeInfoT<CAnimResource>::~TypeInfoT()
 t Reflection::Detail::TypeInfoT<CBoneMaskResource>::IsDerivedFrom(unsigned int) const
 t Reflection::Detail::TypeInfoT<CBoneMaskResource>::~TypeInfoT()
 t Reflection::Detail::TypeInfoT<CKeyframedDataResource>::IsDerivedFrom(unsigned int) const
 t Reflection::Detail::TypeInfoT<CKeyframedDataResource>::~TypeInfoT()
 t Reflection::Detail::TypeInfoT<Reflection::Object>::IsDerivedFrom(unsigned int) const
 t Reflection::Detail::TypeInfoT<Reflection::Object>::~TypeInfoT()
 t Reflection::Object::CastToBase(int)
 t Reflection::Object::CastToBase(int) const
 t Reflection::Object::GetTypeInfo() const
 t Reflection::Object::MyTypeID()
 t Reflection::Object::MyTypeInfo()
 t Reflection::Object::~Object()
 t Reflection::TypeInfo::CastToBase(void const*, unsigned int) const
 t Reflection::TypeInfo::CastToBase(void*, unsigned int) const
 t Reflection::TypeInfo::IsDerivedFrom(unsigned int) const
 t Reflection::TypeInfo::IsDerivedFromInternal(unsigned int) const
 t Reflection::TypeInfo::TypeInfo(Reflection::TypeInfo const&)
 t Reflection::TypeInfo::TypeInfo(char const*, unsigned int)
 t RegisterInterface(char const*, void*)
 t RegisterInterface(char const*, void*) [clone .cold]
 t ReleaseThreadHandle
 t RemapBindingForBothHands(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >&, std::string const&, std::string const&)
 t RemapBindingForBothHands(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >&, std::string const&, std::string const&) [clone .cold]
 t RemapBindingWithOptionalClick(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >&, std::string const&, std::string const&)
 t RemapBindingWithOptionalClick(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >&, std::string const&, std::string const&) [clone .cold]
 t RemoveNotificationsOwnedByOverlay(VRSystemLayerState_t*, unsigned long)
 t RenderModelsInterfaceRegistration<CVRRenderModels_001>::GetInterface()
 t RenderModelsInterfaceRegistration<CVRRenderModels_001>::~RenderModelsInterfaceRegistration()
 t RenderModelsInterfaceRegistration<CVRRenderModels_002>::GetInterface()
 t RenderModelsInterfaceRegistration<CVRRenderModels_002>::~RenderModelsInterfaceRegistration()
 t RenderModelsInterfaceRegistration<CVRRenderModels_003>::GetInterface()
 t RenderModelsInterfaceRegistration<CVRRenderModels_003>::~RenderModelsInterfaceRegistration()
 t RenderModelsInterfaceRegistration<CVRRenderModels_004>::GetInterface()
 t RenderModelsInterfaceRegistration<CVRRenderModels_004>::~RenderModelsInterfaceRegistration()
 t RenderModelsInterfaceRegistration<CVRRenderModels_005>::GetInterface()
 t RenderModelsInterfaceRegistration<CVRRenderModels_005>::~RenderModelsInterfaceRegistration()
 t RepairUTF8(char const*, char const*, std::string&)
 t RepairUTF8(char const*, char const*, std::string&) [clone .cold]
 t RepairUTF8(std::string const&, std::string&)
 t ReplaceInterface(char const*, void*)
 t ReplaceSubstr(std::string&, std::string const&, std::string const&)
 t ReturnQuadVector(std::vector<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> >&, vr::HmdQuad_t*, unsigned int*)
 t ReturnStdString(std::string const&, char*, unsigned int)
 t RoundExtendedStorage(unsigned int)
 t RunWithAdminPrompt(std::string const&, std::string const&)
 t ScaleOverlayBoundsToSharedTexture(vr::VRTextureBounds_t const&, vr::VRTextureBounds_t const&)
 t ScreenshotsInterfaceRegistration<CVRScreenshots_001>::GetInterface()
 t ScreenshotsInterfaceRegistration<CVRScreenshots_001>::~ScreenshotsInterfaceRegistration()
 t SecondsToSystemTicks(double)
 t SelectClosestPoseToTime(VRTrackingState_t const*, unsigned int, double, bool, VRTrackingState_Pose_t const**)
 t SetBitBufErrorHandler(void (*)(BitBufErrorType, char const*))
 t SetCurrentProcessExplicitAppUserModelID()
 t SetDashboardEnabledInternal(VRSystemLayerState_t*, bool)
 t SetDashboardVisibleInternal(bool)
 t SetDashboardVisibleInternal(bool) [clone .cold]
 t SetEnvironmentVariable(char const*, char const*)
 t SetExtendedStorage(PropertyTableEntry_t*, unsigned int, unsigned int, unsigned int)
 t SetInitErrorIfHigherPriority(vr::EVRInitError*, int*, vr::EVRInitError)
 t SetMaxLogLevel(ELogLevel)
 t SetOverlayFlagInternal(VRSystemLayerState_t*, unsigned long, vr::VROverlayFlags, bool)
 t SetOverlayTransformAbsoluteInternal(VRSystemLayerState_t*, unsigned long, vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t const*)
 t SetOverlayTransformTrackedDeviceRelativeInternal(VRSystemLayerState_t*, unsigned long, unsigned int, vr::HmdMatrix34_t const*)
 t SetProcessSchedulingPriorityClassRealtime(unsigned int)
 t SettingsIdToEvent(ESettingsSectionId)
 t SettingsIdToSectionName(ESettingsSectionId)
 t SettingsInterfaceRegistration<CVRSettings_001>::GetInterface()
 t SettingsInterfaceRegistration<CVRSettings_001>::~SettingsInterfaceRegistration()
 t SettingsInterfaceRegistration<CVRSettings_002>::GetInterface()
 t SettingsInterfaceRegistration<CVRSettings_002>::~SettingsInterfaceRegistration()
 t SettingsSectionNameToId(char const*)
 t SharedLib_GetFunction(void*, char const*)
 t SharedLib_Load(char const*, std::string*)
 t SharedLib_Unload(void*)
 t SkeletalCompression::CalcReferencePose(CAnimSkeleton const*)
 t SkeletalCompression::CalcReferencePose(CAnimSkeleton const*) [clone .cold]
 t SkeletalCompression::CompressHandSkeleton(CSmartPtr<CAnimPose, CRefCountAccessor> const&, void*, unsigned int)
 t SkeletalCompression::CompressHandSkeleton(CSmartPtr<CAnimPose, CRefCountAccessor> const&, void*, unsigned int) [clone .cold]
 t SkeletalCompression::DecompressHandSkeleton(void const*, unsigned int, CSmartPtr<CAnimPose, CRefCountAccessor> const&)
 t SkeletalCompression::DecompressHandSkeleton(void const*, unsigned int, CSmartPtr<CAnimPose, CRefCountAccessor> const&) [clone .cold]
 t SkeletalCompression::DequantizeFloat(unsigned int, float, int)
 t SkeletalCompression::QuantizeFloat(float, float, int)
 t SkeletalCompression::ReadFloat(bf_read&, float, int)
 t SkeletalCompression::ReadQuat(bf_read&, float, int)
 t SkeletalCompression::ReadVariableLengthValue(bf_read&)
 t SkeletalCompression::ReadVector(bf_read&, float, int)
 t SkeletalCompression::WriteFloat(bf_write&, float, float, int)
 t SkeletalCompression::WriteQuat(bf_write&, QuaternionAligned const&, float, int)
 t SkeletalCompression::WriteVariableLengthValue(bf_write&, unsigned int)
 t SkeletalCompression::WriteVector(bf_write&, VectorAligned const&, float, int)
 t SkeletalInputUtils::CalcSummaryData(bool, CAnimSkeleton const&, CSmartPtr<CAnimPose, CRefCountAccessor> const&, vr::VRSkeletalSummaryData_t*)
 t SkeletalInputUtils::CalcSummaryData(bool, CAnimSkeleton const&, CSmartPtr<CAnimPose, CRefCountAccessor> const&, vr::VRSkeletalSummaryData_t*) [clone .cold]
 t SkeletalInputUtils::ConcatenateTransforms(CAnimSkeleton const&, vr::VRBoneTransform_t const&, vr::VRBoneTransform_t*, unsigned int)
 t SkeletalInputUtils::ConcatenateTransforms(CAnimSkeleton const&, vr::VRBoneTransform_t*, unsigned int)
 t SkeletalInputUtils::GetSplayAngle(CSmartPtr<CAnimPose, CRefCountAccessor> const&, int, int)
 t Slerp(CTransform const&, CTransform const&, float)
 t SolveQudratic(float, float, float, float*, float*)
 t SortedTrackedDeviceIndicesOfClass(VRTrackingState_t const*, std::function<bool (vr::ETrackedDeviceClass)>, unsigned int*, unsigned int, unsigned int, bool)
 t SplitInputPath(std::string const&, std::string*, std::string*)
 t SplitInputPath(std::string const&, std::string*, std::string*) [clone .cold]
 t StaticCompositorPresent(int)
 t SteamLanguageToSteamVRLanguage(std::string const&)
 t SteamPrivateInterfaceRegistration<CVRSteamPrivate_001>::GetInterface()
 t SteamPrivateInterfaceRegistration<CVRSteamPrivate_001>::~SteamPrivateInterfaceRegistration()
 t SteamPrivateInterfaceRegistration<CVRSteamPrivate_002>::GetInterface()
 t SteamPrivateInterfaceRegistration<CVRSteamPrivate_002>::~SteamPrivateInterfaceRegistration()
 t SteamThreadTools::CThread::BHasValidThreadID()
 t SteamThreadTools::CThread::CThread()
 t SteamThreadTools::CThread::GetCurrentCThread()
 t SteamThreadTools::CThread::GetName()
 t SteamThreadTools::CThread::GetPriority() const
 t SteamThreadTools::CThread::GetResult() const
 t SteamThreadTools::CThread::GetThreadProc()
 t SteamThreadTools::CThread::Init()
 t SteamThreadTools::CThread::IsAlive()
 t SteamThreadTools::CThread::IsThreadRunning()
 t SteamThreadTools::CThread::Join(unsigned int)
 t SteamThreadTools::CThread::OnExit()
 t SteamThreadTools::CThread::Resume()
 t SteamThreadTools::CThread::SetName(char const*)
 t SteamThreadTools::CThread::SetPriority(int)
 t SteamThreadTools::CThread::Sleep(unsigned int)
 t SteamThreadTools::CThread::Start(unsigned int)
 t SteamThreadTools::CThread::Start(unsigned int) [clone .cold]
 t SteamThreadTools::CThread::Stop(int)
 t SteamThreadTools::CThread::Suspend()
 t SteamThreadTools::CThread::Terminate(int)
 t SteamThreadTools::CThread::ThreadExceptionWrapper(void*)
 t SteamThreadTools::CThread::ThreadProc(void*)
 t SteamThreadTools::CThread::ThreadProc(void*) [clone .cold]
 t SteamThreadTools::CThread::WaitForCreateComplete(SteamThreadTools::CThreadEvent*)
 t SteamThreadTools::CThread::Yield()
 t SteamThreadTools::CThread::~CThread()
 t SteamThreadTools::CThread::~CThread() [clone .part.0]
 t SteamThreadTools::CThreadEvent::CThreadEvent(bool)
 t SteamThreadTools::CThreadEvent::CThreadEvent(char const*, bool, bool)
 t SteamThreadTools::CThreadEvent::CThreadEvent(char const*, bool, bool) [clone .cold]
 t SteamThreadTools::CThreadEvent::Check()
 t SteamThreadTools::CThreadEvent::Reset()
 t SteamThreadTools::CThreadEvent::Set()
 t SteamThreadTools::CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool)
 t SteamThreadTools::CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool) [clone .cold]
 t SteamThreadTools::CThreadFullMutex::IsCreator() const
 t SteamThreadTools::CThreadFullMutex::Release()
 t SteamThreadTools::CThreadLocalBase::CThreadLocalBase()
 t SteamThreadTools::CThreadLocalBase::Get() const
 t SteamThreadTools::CThreadLocalBase::Set(void*)
 t SteamThreadTools::CThreadLocalBase::~CThreadLocalBase()
 t SteamThreadTools::CThreadLocalInt<long>::~CThreadLocalInt()
 t SteamThreadTools::CThreadLocalPtr<SteamThreadTools::CThread>::~CThreadLocalPtr()
 t SteamThreadTools::CThreadMutex::CThreadMutex()
 t SteamThreadTools::CThreadMutex::~CThreadMutex()
 t SteamThreadTools::CThreadRWLock::LockForWrite()
 t SteamThreadTools::CThreadRWLock::UnlockWrite()
 t SteamThreadTools::CThreadRWLock::WaitForRead()
 t SteamThreadTools::CThreadSemaphore::CThreadSemaphore(long, long)
 t SteamThreadTools::CThreadSemaphore::CThreadSemaphore(long, long) [clone .cold]
 t SteamThreadTools::CThreadSemaphore::Release(long)
 t SteamThreadTools::CThreadSpinLock::Lock(unsigned int) volatile
 t SteamThreadTools::CThreadSpinRWLock::LockForRead()
 t SteamThreadTools::CThreadSpinRWLock::SpinLockForWrite(unsigned int)
 t SteamThreadTools::CThreadSpinRWLock::UnlockRead()
 t SteamThreadTools::CThreadSpinRWLock::UnlockWrite()
 t SteamThreadTools::CThreadSyncObject::AcquireSemaphoreInternal(unsigned int)
 t SteamThreadTools::CThreadSyncObject::AssertUseable()
 t SteamThreadTools::CThreadSyncObject::CThreadSyncObject()
 t SteamThreadTools::CThreadSyncObject::CloseSemaphoreInternal(int, bool, char const*)
 t SteamThreadTools::CThreadSyncObject::CreateAnonymousSyncObjectInternal(bool, bool)
 t SteamThreadTools::CThreadSyncObject::CreateSemaphoreInternal(char const*, long, bool, bool*)
 t SteamThreadTools::CThreadSyncObject::EnsureSemaphoreClearedInternal(int)
 t SteamThreadTools::CThreadSyncObject::EnsureSemaphorePostedInternal(int)
 t SteamThreadTools::CThreadSyncObject::IsSemaphoreOrphanedInternal(int, int)
 t SteamThreadTools::CThreadSyncObject::OpenSemaphoreInternal(char const*, bool)
 t SteamThreadTools::CThreadSyncObject::ReleaseSemaphoreInternal(int, long)
 t SteamThreadTools::CThreadSyncObject::SaveNameToFile(char const*)
 t SteamThreadTools::CThreadSyncObject::SignalThreadSyncObjectInternal()
 t SteamThreadTools::CThreadSyncObject::Wait(unsigned int)
 t SteamThreadTools::CThreadSyncObject::Wait(unsigned int) [clone .part.0]
 t SteamThreadTools::CThreadSyncObject::operator!() const
 t SteamThreadTools::CThreadSyncObject::~CThreadSyncObject()
 t SteamThreadTools::CThreadSyncObject::~CThreadSyncObject() [clone .part.0]
 t SteamVRVersionAsString()
 t SteamVRVersionAsString() [clone .cold]
 t StringHasPrefix(std::string const&, std::string const&)
 t StringHasPrefixCaseSensitive(std::string const&, std::string const&)
 t StringHasSuffix(std::string const&, std::string const&)
 t StringHasSuffixCaseSensitive(std::string const&, std::string const&)
 t StringListToJson(std::vector<std::string, std::allocator<std::string> > const&, Json::Value&, char const*)
 t StringListToJson(std::vector<std::string, std::allocator<std::string> > const&, Json::Value&, char const*) [clone .cold]
 t StringToLower(std::string const&)
 t StringToLower(std::string const&) [clone .cold]
 t StringToUint64(std::string const&)
 t StringToUpper(std::string const&)
 t StringToUpper(std::string const&) [clone .cold]
 t SystemInterfaceRegistration<CHmdSystem_001>::GetInterface()
 t SystemInterfaceRegistration<CHmdSystem_001>::~SystemInterfaceRegistration()
 t SystemInterfaceRegistration<CHmdSystem_004>::GetInterface()
 t SystemInterfaceRegistration<CHmdSystem_004>::~SystemInterfaceRegistration()
 t SystemInterfaceRegistration<CVRClientCore_001>::GetInterface()
 t SystemInterfaceRegistration<CVRClientCore_001>::~SystemInterfaceRegistration()
 t SystemInterfaceRegistration<CVRClientCore_002>::GetInterface()
 t SystemInterfaceRegistration<CVRClientCore_002>::~SystemInterfaceRegistration()
 t SystemInterfaceRegistration<IHmdSystem_002>::GetInterface()
 t SystemInterfaceRegistration<IHmdSystem_002>::~SystemInterfaceRegistration()
 t SystemInterfaceRegistration<IHmdSystem_003>::GetInterface()
 t SystemInterfaceRegistration<IHmdSystem_003>::~SystemInterfaceRegistration()
 t SystemTicksFromNanoseconds(unsigned long)
 t SystemTicksToSeconds(unsigned long)
 t SystemTimeSleep(unsigned int)
 t SystemTimeSleepUntil(double)
 t TVRSharedState<CBlockQueue::BlockQueueHeader_t, true>::BInitWithSuffix(CVRSharedState::SharedStatePermissions, std::string const&)
 t TVRSharedState<CompositionState_t, false>::BInit(CVRSharedState::SharedStatePermissions)
 t ThreadCloseProcess
 t ThreadGetCurrentHandle
 t ThreadGetCurrentId
 t ThreadGetCurrentProcessHandle
 t ThreadGetCurrentProcessId
 t ThreadGetCurrentRunningRef
 t ThreadGetPriority
 t ThreadGetProcessExitCode
 t ThreadGetProcessListInfo
 t ThreadGetProcessParentID
 t ThreadGetProcessPriority
 t ThreadInMainThread
 t ThreadInterlockedAssignIf
 t ThreadInterlockedAssignIf64
 t ThreadInterlockedAssignPointerIf
 t ThreadInterlockedCompareExchange
 t ThreadInterlockedCompareExchange64
 t ThreadInterlockedCompareExchangePointer
 t ThreadInterlockedDecrement
 t ThreadInterlockedDecrement64
 t ThreadInterlockedExchange
 t ThreadInterlockedExchange64
 t ThreadInterlockedExchangeAdd
 t ThreadInterlockedExchangeAdd64
 t ThreadInterlockedExchangePointer
 t ThreadInterlockedIncrement
 t ThreadInterlockedIncrement64
 t ThreadIsProcessActive
 t ThreadIsThreadRunning
 t ThreadOpenProcess
 t ThreadOverrideCurrentProcessId
 t ThreadProcConvert(void*)
 t ThreadResumeSignal(int)
 t ThreadSetAffinity
 t ThreadSetDebugName
 t ThreadSetDescription
 t ThreadSetPriority
 t ThreadSetPriority.cold
 t ThreadSetProcessPriority
 t ThreadShellExecute
 t ThreadSleep
 t ThreadSuspendSignal(int)
 t ThreadTerminate
 t ThreadTerminateProcessCode
 t ThreadWaitForProcessExit
 t ThreadYield()
 t TokenizeString(std::string const&, char)
 t TokenizeString(std::string const&, char) [clone .cold]
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_002>::GetInterface()
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_002>::~TrackedCameraInterfaceRegistration()
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_003>::GetInterface()
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_003>::~TrackedCameraInterfaceRegistration()
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_004>::GetInterface()
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_004>::~TrackedCameraInterfaceRegistration()
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_005>::GetInterface()
 t TrackedCameraInterfaceRegistration<CVRTrackedCamera_005>::~TrackedCameraInterfaceRegistration()
 t TrackingOrigin_t::FromJson(Json::Value const&)
 t TrackingOrigin_t::FromJson(Json::Value const&) [clone .cold]
 t TrackingOrigin_t::GetOriginFromRawTrackingTransform() const
 t TrackingOrigin_t::HasSaneTranslation() const
 t TrackingOrigin_t::SetRawTrackingFromOriginTransform(vr::HmdMatrix34_t const&)
 t TrackingOrigin_t::ToJson() const
 t TrackingOrigin_t::ToJson() const [clone .cold]
 t TranslateOpenXRInputComponentPath(std::string const&, std::string const&, std::string const&)
 t TranslateOpenXRInputComponentPath(std::string const&, std::string const&, std::string const&) [clone .cold]
 t TranslateXrInputPath(unsigned long, std::string const&)
 t TranslateXrInputPath(unsigned long, std::string const&) [clone .cold]
 t TrimTrailingWhitespace(std::string const&)
 t UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)
 t UTF16to8(wchar_t const*)
 t UTF16to8(wchar_t const*) [clone .cold]
 t UTF8to16(char const*)
 t UTF8to16(char const*) [clone .cold]
 t UTF8to16(std::string const&)
 t Uint64ToString(unsigned long)
 t UnixTimeToDateAndTimeString(unsigned long)
 t UnixTimeToDateString(unsigned long)
 t UnlinkFile(char const*)
 t VKDebugMessageCallback(unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*, void*)
 t VRCompositor_OverlayBase_t::VRCompositor_OverlayBase_t()
 t VRCompositor_OverlayState_t::VRCompositor_OverlayState_t()
 t VRCrashHandlingInit(std::function<void (bool)>)
 t VRCrashHandlingInit(std::function<void (bool)>) [clone .cold]
 t VRCrashHandlingInit(std::function<void (bool)>)::{lambda(void*)#1}::_FUN(void*)
 t VRCrashPreCrashSetMinidumpComment(char const*) [clone .part.0]
 t VRInputConnectionState_t::Clear()
 t VRInputState_t::Clear()
 t VRInputState_t::FindComponentByHandle(unsigned long)
 t VRInputState_t::FindComponentByHandle(unsigned long) const
 t VRInputState_t::FindComponentByLeafPath(unsigned long)
 t VRInputState_t::FindComponentByPath(unsigned long)
 t VRMessageOverlayState_t::CopyCurrentMessageDetails(vr::VRMessageOverlayMessageDetails&) const
 t VRMessageOverlayState_t::CreateClientMessageOverlayName(unsigned int, char*, unsigned int)
 t VRMessageOverlayState_t::Dequeue()
 t VRMessageOverlayState_t::Enqueue(unsigned int, char const*, char const*, char const**)
 t VRMessageOverlayState_t::EnsureQueueIsValid()
 t VRMessageOverlayState_t::GetCurrentMessageProcessId(unsigned int&) const
 t VRMessageOverlayState_t::GetQueueSize()
 t VRMessageOverlayState_t::RemoveMessagesByClientProcess(unsigned int)
 t VRMessageOverlayState_t::VRMessageOverlayState_t()
 t VRRenderer::BlendStateBase::AsD3D11()
 t VRRenderer::ConstantBufferBase::AsD3D11()
 t VRRenderer::DepthStencilStateBase::AsD3D11()
 t VRRenderer::EventQueryBase::AsD3D11()
 t VRRenderer::GPUCountingSemaphoreBase::AsD3D11()
 t VRRenderer::GPUSemaphoreBase::AsD3D11()
 t VRRenderer::IndexBufferBase::AsD3D11()
 t VRRenderer::RasterizerStateBase::AsD3D11()
 t VRRenderer::SamplerBase::AsD3D11()
 t VRRenderer::TextureBase::AsD3D11()
 t VRRenderer::VertexBufferBase::AsD3D11()
 t VRSetProcessCrashIdentifier(char const*)
 t VRSpatialAnchorsState_t::Clear()
 t VRWriteMiniDump(char const*, bool)
 t VRWriteMiniDumpIfSetup(char const*, bool)
 t VRWriteMiniDump_Internal(char const*, unsigned int, void*, bool) [clone .constprop.0]
 t VRWriteMiniDump_Internal(char const*, unsigned int, void*, bool) [clone .constprop.0] [clone .cold]
 t VR_IVRApplications_FnTable_AddApplicationManifest(char*, bool)
 t VR_IVRApplications_FnTable_CancelApplicationLaunch(char*)
 t VR_IVRApplications_FnTable_GetApplicationAutoLaunch(char*)
 t VR_IVRApplications_FnTable_GetApplicationCount()
 t VR_IVRApplications_FnTable_GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t VR_IVRApplications_FnTable_GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t VR_IVRApplications_FnTable_GetApplicationLaunchArguments(unsigned int, char*, unsigned int)
 t VR_IVRApplications_FnTable_GetApplicationProcessId(char*)
 t VR_IVRApplications_FnTable_GetApplicationPropertyBool(char*, EVRApplicationProperty, EVRApplicationError*)
 t VR_IVRApplications_FnTable_GetApplicationPropertyString(char*, EVRApplicationProperty, char*, unsigned int, EVRApplicationError*)
 t VR_IVRApplications_FnTable_GetApplicationPropertyUint64(char*, EVRApplicationProperty, EVRApplicationError*)
 t VR_IVRApplications_FnTable_GetApplicationSupportedMimeTypes(char*, char*, unsigned int)
 t VR_IVRApplications_FnTable_GetApplicationsErrorNameFromEnum(EVRApplicationError)
 t VR_IVRApplications_FnTable_GetApplicationsThatSupportMimeType(char*, char*, unsigned int)
 t VR_IVRApplications_FnTable_GetCurrentSceneProcessId()
 t VR_IVRApplications_FnTable_GetDefaultApplicationForMimeType(char*, char*, unsigned int)
 t VR_IVRApplications_FnTable_GetSceneApplicationState()
 t VR_IVRApplications_FnTable_GetSceneApplicationStateNameFromEnum(EVRSceneApplicationState)
 t VR_IVRApplications_FnTable_GetStartingApplication(char*, unsigned int)
 t VR_IVRApplications_FnTable_IdentifyApplication(unsigned int, char*)
 t VR_IVRApplications_FnTable_IsApplicationInstalled(char*)
 t VR_IVRApplications_FnTable_LaunchApplication(char*)
 t VR_IVRApplications_FnTable_LaunchApplicationFromMimeType(char*, char*)
 t VR_IVRApplications_FnTable_LaunchDashboardOverlay(char*)
 t VR_IVRApplications_FnTable_LaunchInternalProcess(char*, char*, char*)
 t VR_IVRApplications_FnTable_LaunchTemplateApplication(char*, char*, AppOverrideKeys_t*, unsigned int)
 t VR_IVRApplications_FnTable_PerformApplicationPrelaunchCheck(char*)
 t VR_IVRApplications_FnTable_RemoveApplicationManifest(char*)
 t VR_IVRApplications_FnTable_SetApplicationAutoLaunch(char*, bool)
 t VR_IVRApplications_FnTable_SetDefaultApplicationForMimeType(char*, char*)
 t VR_IVRBlockQueue_FnTable_AcquireReadOnlyBlock(unsigned long, unsigned long*, void**, EBlockQueueReadType)
 t VR_IVRBlockQueue_FnTable_AcquireWriteOnlyBlock(unsigned long, unsigned long*, void**)
 t VR_IVRBlockQueue_FnTable_Connect(unsigned long*, char*)
 t VR_IVRBlockQueue_FnTable_Create(unsigned long*, char*, unsigned int, unsigned int, unsigned int, unsigned int)
 t VR_IVRBlockQueue_FnTable_Destroy(unsigned long)
 t VR_IVRBlockQueue_FnTable_QueueHasReader(unsigned long, bool*)
 t VR_IVRBlockQueue_FnTable_ReleaseReadOnlyBlock(unsigned long, unsigned long)
 t VR_IVRBlockQueue_FnTable_ReleaseWriteOnlyBlock(unsigned long, unsigned long)
 t VR_IVRBlockQueue_FnTable_WaitAndAcquireReadOnlyBlock(unsigned long, unsigned long*, void**, EBlockQueueReadType, unsigned int)
 t VR_IVRChaperoneSetup_FnTable_CommitWorkingCopy(EChaperoneConfigFile)
 t VR_IVRChaperoneSetup_FnTable_ExportLiveToBuffer(char*, unsigned int*)
 t VR_IVRChaperoneSetup_FnTable_GetLiveCollisionBoundsInfo(HmdQuad_t*, unsigned int*)
 t VR_IVRChaperoneSetup_FnTable_GetLiveSeatedZeroPoseToRawTrackingPose(HmdMatrix34_t*)
 t VR_IVRChaperoneSetup_FnTable_GetWorkingCollisionBoundsInfo(HmdQuad_t*, unsigned int*)
 t VR_IVRChaperoneSetup_FnTable_GetWorkingPlayAreaRect(HmdQuad_t*)
 t VR_IVRChaperoneSetup_FnTable_GetWorkingPlayAreaSize(float*, float*)
 t VR_IVRChaperoneSetup_FnTable_GetWorkingSeatedZeroPoseToRawTrackingPose(HmdMatrix34_t*)
 t VR_IVRChaperoneSetup_FnTable_GetWorkingStandingZeroPoseToRawTrackingPose(HmdMatrix34_t*)
 t VR_IVRChaperoneSetup_FnTable_HideWorkingSetPreview()
 t VR_IVRChaperoneSetup_FnTable_ImportFromBufferToWorking(char*, unsigned int)
 t VR_IVRChaperoneSetup_FnTable_ReloadFromDisk(EChaperoneConfigFile)
 t VR_IVRChaperoneSetup_FnTable_RevertWorkingCopy()
 t VR_IVRChaperoneSetup_FnTable_RoomSetupStarting()
 t VR_IVRChaperoneSetup_FnTable_SetWorkingCollisionBoundsInfo(HmdQuad_t*, unsigned int)
 t VR_IVRChaperoneSetup_FnTable_SetWorkingPerimeter(HmdVector2_t*, unsigned int)
 t VR_IVRChaperoneSetup_FnTable_SetWorkingPlayAreaSize(float, float)
 t VR_IVRChaperoneSetup_FnTable_SetWorkingSeatedZeroPoseToRawTrackingPose(HmdMatrix34_t*)
 t VR_IVRChaperoneSetup_FnTable_SetWorkingStandingZeroPoseToRawTrackingPose(HmdMatrix34_t*)
 t VR_IVRChaperoneSetup_FnTable_ShowWorkingSetPreview()
 t VR_IVRChaperone_FnTable_AreBoundsVisible()
 t VR_IVRChaperone_FnTable_ForceBoundsVisible(bool)
 t VR_IVRChaperone_FnTable_GetBoundsColor(HmdColor_t*, int, float, HmdColor_t*)
 t VR_IVRChaperone_FnTable_GetCalibrationState()
 t VR_IVRChaperone_FnTable_GetPlayAreaRect(HmdQuad_t*)
 t VR_IVRChaperone_FnTable_GetPlayAreaSize(float*, float*)
 t VR_IVRChaperone_FnTable_ReloadInfo()
 t VR_IVRChaperone_FnTable_ResetZeroPose(ETrackingUniverseOrigin)
 t VR_IVRChaperone_FnTable_SetSceneColor(HmdColor_t)
 t VR_IVRCompositor_FnTable_CanRenderScene()
 t VR_IVRCompositor_FnTable_ClearLastSubmittedFrame()
 t VR_IVRCompositor_FnTable_ClearSkyboxOverride()
 t VR_IVRCompositor_FnTable_ClearStageOverride()
 t VR_IVRCompositor_FnTable_CompositorBringToFront()
 t VR_IVRCompositor_FnTable_CompositorDumpImages()
 t VR_IVRCompositor_FnTable_CompositorGoToBack()
 t VR_IVRCompositor_FnTable_CompositorQuit()
 t VR_IVRCompositor_FnTable_FadeGrid(float, bool)
 t VR_IVRCompositor_FnTable_FadeToColor(float, float, float, float, float, bool)
 t VR_IVRCompositor_FnTable_ForceInterleavedReprojectionOn(bool)
 t VR_IVRCompositor_FnTable_ForceReconnectProcess()
 t VR_IVRCompositor_FnTable_GetCompositorBenchmarkResults(Compositor_BenchmarkResults*, unsigned int)
 t VR_IVRCompositor_FnTable_GetCumulativeStats(Compositor_CumulativeStats*, unsigned int)
 t VR_IVRCompositor_FnTable_GetCurrentFadeColor(bool)
 t VR_IVRCompositor_FnTable_GetCurrentGridAlpha()
 t VR_IVRCompositor_FnTable_GetCurrentSceneFocusProcess()
 t VR_IVRCompositor_FnTable_GetFrameTimeRemaining()
 t VR_IVRCompositor_FnTable_GetFrameTiming(Compositor_FrameTiming*, unsigned int)
 t VR_IVRCompositor_FnTable_GetFrameTimings(Compositor_FrameTiming*, unsigned int)
 t VR_IVRCompositor_FnTable_GetLastFrameRenderer()
 t VR_IVRCompositor_FnTable_GetLastPoseForTrackedDeviceIndex(unsigned int, TrackedDevicePose_t*, TrackedDevicePose_t*)
 t VR_IVRCompositor_FnTable_GetLastPosePredictionIDs(unsigned int*, unsigned int*)
 t VR_IVRCompositor_FnTable_GetLastPoses(TrackedDevicePose_t*, unsigned int, TrackedDevicePose_t*, unsigned int)
 t VR_IVRCompositor_FnTable_GetMirrorTextureD3D11(EVREye, void*, void**)
 t VR_IVRCompositor_FnTable_GetMirrorTextureGL(EVREye, unsigned int*, void**)
 t VR_IVRCompositor_FnTable_GetPosesForFrame(unsigned int, TrackedDevicePose_t*, unsigned int)
 t VR_IVRCompositor_FnTable_GetTrackingSpace()
 t VR_IVRCompositor_FnTable_GetVulkanDeviceExtensionsRequired(VkPhysicalDevice_T*, char*, unsigned int)
 t VR_IVRCompositor_FnTable_GetVulkanInstanceExtensionsRequired(char*, unsigned int)
 t VR_IVRCompositor_FnTable_HideMirrorWindow()
 t VR_IVRCompositor_FnTable_IsCurrentSceneFocusAppLoading()
 t VR_IVRCompositor_FnTable_IsFullscreen()
 t VR_IVRCompositor_FnTable_IsMirrorWindowVisible()
 t VR_IVRCompositor_FnTable_IsMotionSmoothingEnabled()
 t VR_IVRCompositor_FnTable_IsMotionSmoothingSupported()
 t VR_IVRCompositor_FnTable_LockGLSharedTextureForAccess(void*)
 t VR_IVRCompositor_FnTable_PostPresentHandoff()
 t VR_IVRCompositor_FnTable_ReleaseMirrorTextureD3D11(void*)
 t VR_IVRCompositor_FnTable_ReleaseSharedGLTexture(unsigned int, void*)
 t VR_IVRCompositor_FnTable_SetExplicitTimingMode(EVRCompositorTimingMode)
 t VR_IVRCompositor_FnTable_SetSkyboxOverride(Texture_t*, unsigned int)
 t VR_IVRCompositor_FnTable_SetStageOverride_Async(char*, HmdMatrix34_t*, Compositor_StageRenderSettings*, unsigned int)
 t VR_IVRCompositor_FnTable_SetTrackingSpace(ETrackingUniverseOrigin)
 t VR_IVRCompositor_FnTable_ShouldAppRenderWithLowResources()
 t VR_IVRCompositor_FnTable_ShowMirrorWindow()
 t VR_IVRCompositor_FnTable_Submit(EVREye, Texture_t*, VRTextureBounds_t*, EVRSubmitFlags)
 t VR_IVRCompositor_FnTable_SubmitExplicitTimingData()
 t VR_IVRCompositor_FnTable_SuspendRendering(bool)
 t VR_IVRCompositor_FnTable_UnlockGLSharedTextureForAccess(void*)
 t VR_IVRCompositor_FnTable_WaitGetPoses(TrackedDevicePose_t*, unsigned int, TrackedDevicePose_t*, unsigned int)
 t VR_IVRDebug_FnTable_BeginVrProfilerEvent(unsigned long*)
 t VR_IVRDebug_FnTable_DriverDebugRequest(unsigned int, char*, char*, unsigned int)
 t VR_IVRDebug_FnTable_EmitVrProfilerEvent(char*)
 t VR_IVRDebug_FnTable_FinishVrProfilerEvent(unsigned long, char*)
 t VR_IVRDriverManager_FnTable_GetDriverCount()
 t VR_IVRDriverManager_FnTable_GetDriverHandle(char*)
 t VR_IVRDriverManager_FnTable_GetDriverName(unsigned int, char*, unsigned int)
 t VR_IVRDriverManager_FnTable_IsEnabled(unsigned int)
 t VR_IVRExtendedDisplay_FnTable_GetDXGIOutputInfo(int*, int*)
 t VR_IVRExtendedDisplay_FnTable_GetEyeOutputViewport(EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t VR_IVRExtendedDisplay_FnTable_GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t VR_IVRHeadsetView_FnTable_GetHeadsetViewAspectRatio()
 t VR_IVRHeadsetView_FnTable_GetHeadsetViewBlendRange(float*, float*)
 t VR_IVRHeadsetView_FnTable_GetHeadsetViewCropped()
 t VR_IVRHeadsetView_FnTable_GetHeadsetViewMode()
 t VR_IVRHeadsetView_FnTable_GetHeadsetViewSize(unsigned int*, unsigned int*)
 t VR_IVRHeadsetView_FnTable_SetHeadsetViewBlendRange(float, float)
 t VR_IVRHeadsetView_FnTable_SetHeadsetViewCropped(bool)
 t VR_IVRHeadsetView_FnTable_SetHeadsetViewMode(HeadsetViewMode_t)
 t VR_IVRHeadsetView_FnTable_SetHeadsetViewSize(unsigned int, unsigned int)
 t VR_IVRIOBuffer_FnTable_Close(unsigned long)
 t VR_IVRIOBuffer_FnTable_HasReaders(unsigned long)
 t VR_IVRIOBuffer_FnTable_Open(char*, EIOBufferMode, unsigned int, unsigned int, unsigned long*)
 t VR_IVRIOBuffer_FnTable_PropertyContainer(unsigned long)
 t VR_IVRIOBuffer_FnTable_Read(unsigned long, void*, unsigned int, unsigned int*)
 t VR_IVRIOBuffer_FnTable_Write(unsigned long, void*, unsigned int)
 t VR_IVRInput_FnTable_DecompressSkeletalBoneData(void*, unsigned int, EVRSkeletalTransformSpace, VRBoneTransform_t*, unsigned int)
 t VR_IVRInput_FnTable_GetActionBindingInfo(unsigned long, InputBindingInfo_t*, unsigned int, unsigned int, unsigned int*)
 t VR_IVRInput_FnTable_GetActionHandle(char*, unsigned long*)
 t VR_IVRInput_FnTable_GetActionOrigins(unsigned long, unsigned long, unsigned long*, unsigned int)
 t VR_IVRInput_FnTable_GetActionSetHandle(char*, unsigned long*)
 t VR_IVRInput_FnTable_GetAnalogActionData(unsigned long, InputAnalogActionData_t*, unsigned int, unsigned long)
 t VR_IVRInput_FnTable_GetBindingVariant(unsigned long, char*, unsigned int)
 t VR_IVRInput_FnTable_GetBoneCount(unsigned long, unsigned int*)
 t VR_IVRInput_FnTable_GetBoneHierarchy(unsigned long, int*, unsigned int)
 t VR_IVRInput_FnTable_GetBoneName(unsigned long, int, char*, unsigned int)
 t VR_IVRInput_FnTable_GetComponentStateForBinding(char*, char*, InputBindingInfo_t*, unsigned int, unsigned int, RenderModel_ComponentState_t*)
 t VR_IVRInput_FnTable_GetDigitalActionData(unsigned long, InputDigitalActionData_t*, unsigned int, unsigned long)
 t VR_IVRInput_FnTable_GetDominantHand(ETrackedControllerRole*)
 t VR_IVRInput_FnTable_GetInputSourceHandle(char*, unsigned long*)
 t VR_IVRInput_FnTable_GetOriginLocalizedName(unsigned long, char*, unsigned int, int)
 t VR_IVRInput_FnTable_GetOriginTrackedDeviceInfo(unsigned long, InputOriginInfo_t*, unsigned int)
 t VR_IVRInput_FnTable_GetPoseActionDataForNextFrame(unsigned long, ETrackingUniverseOrigin, InputPoseActionData_t*, unsigned int, unsigned long)
 t VR_IVRInput_FnTable_GetPoseActionDataRelativeToNow(unsigned long, ETrackingUniverseOrigin, float, InputPoseActionData_t*, unsigned int, unsigned long)
 t VR_IVRInput_FnTable_GetSkeletalActionData(unsigned long, InputSkeletalActionData_t*, unsigned int)
 t VR_IVRInput_FnTable_GetSkeletalBoneData(unsigned long, EVRSkeletalTransformSpace, EVRSkeletalMotionRange, VRBoneTransform_t*, unsigned int)
 t VR_IVRInput_FnTable_GetSkeletalBoneDataCompressed(unsigned long, EVRSkeletalMotionRange, void*, unsigned int, unsigned int*)
 t VR_IVRInput_FnTable_GetSkeletalReferenceTransforms(unsigned long, EVRSkeletalTransformSpace, EVRSkeletalReferencePose, VRBoneTransform_t*, unsigned int)
 t VR_IVRInput_FnTable_GetSkeletalSummaryData(unsigned long, EVRSummaryType, VRSkeletalSummaryData_t*)
 t VR_IVRInput_FnTable_GetSkeletalTrackingLevel(unsigned long, EVRSkeletalTrackingLevel*)
 t VR_IVRInput_FnTable_IsUsingLegacyInput()
 t VR_IVRInput_FnTable_OpenBindingUI(char*, unsigned long, unsigned long, bool)
 t VR_IVRInput_FnTable_SetActionManifestPath(char*)
 t VR_IVRInput_FnTable_SetDominantHand(ETrackedControllerRole)
 t VR_IVRInput_FnTable_ShowActionOrigins(unsigned long, unsigned long)
 t VR_IVRInput_FnTable_ShowBindingsForActionSet(VRActiveActionSet_t*, unsigned int, unsigned int, unsigned long)
 t VR_IVRInput_FnTable_TriggerHapticVibrationAction(unsigned long, float, float, float, float, unsigned long)
 t VR_IVRInput_FnTable_UpdateActionState(VRActiveActionSet_t*, unsigned int, unsigned int)
 t VR_IVRNotifications_FnTable_CreateNotification(unsigned long, unsigned long, EVRNotificationType, char*, EVRNotificationStyle, NotificationBitmap_t*, unsigned int*)
 t VR_IVRNotifications_FnTable_RemoveNotification(unsigned int)
 t VR_IVROverlayView_FnTable_AcquireOverlayView(unsigned long, VRNativeDevice_t*, VROverlayView_t*, unsigned int)
 t VR_IVROverlayView_FnTable_IsViewingPermitted(unsigned long)
 t VR_IVROverlayView_FnTable_PostOverlayEvent(unsigned long, VREvent_t*)
 t VR_IVROverlayView_FnTable_ReleaseOverlayView(VROverlayView_t*)
 t VR_IVROverlay_FnTable_ClearOverlayCursorPositionOverride(unsigned long)
 t VR_IVROverlay_FnTable_ClearOverlayTexture(unsigned long)
 t VR_IVROverlay_FnTable_CloseMessageOverlay()
 t VR_IVROverlay_FnTable_ComputeOverlayIntersection(unsigned long, VROverlayIntersectionParams_t*, VROverlayIntersectionResults_t*)
 t VR_IVROverlay_FnTable_CreateDashboardOverlay(char*, char*, unsigned long*, unsigned long*)
 t VR_IVROverlay_FnTable_CreateOverlay(char*, char*, unsigned long*)
 t VR_IVROverlay_FnTable_DestroyOverlay(unsigned long)
 t VR_IVROverlay_FnTable_FindOverlay(char*, unsigned long*)
 t VR_IVROverlay_FnTable_GetDashboardOverlaySceneProcess(unsigned long, unsigned int*)
 t VR_IVROverlay_FnTable_GetKeyboardText(char*, unsigned int)
 t VR_IVROverlay_FnTable_GetOverlayAlpha(unsigned long, float*)
 t VR_IVROverlay_FnTable_GetOverlayColor(unsigned long, float*, float*, float*)
 t VR_IVROverlay_FnTable_GetOverlayCurvature(unsigned long, float*)
 t VR_IVROverlay_FnTable_GetOverlayErrorNameFromEnum(EVROverlayError)
 t VR_IVROverlay_FnTable_GetOverlayFlag(unsigned long, VROverlayFlags, bool*)
 t VR_IVROverlay_FnTable_GetOverlayFlags(unsigned long, unsigned int*)
 t VR_IVROverlay_FnTable_GetOverlayImageData(unsigned long, void*, unsigned int, unsigned int*, unsigned int*)
 t VR_IVROverlay_FnTable_GetOverlayInputMethod(unsigned long, VROverlayInputMethod*)
 t VR_IVROverlay_FnTable_GetOverlayKey(unsigned long, char*, unsigned int, EVROverlayError*)
 t VR_IVROverlay_FnTable_GetOverlayMouseScale(unsigned long, HmdVector2_t*)
 t VR_IVROverlay_FnTable_GetOverlayName(unsigned long, char*, unsigned int, EVROverlayError*)
 t VR_IVROverlay_FnTable_GetOverlayPreCurvePitch(unsigned long, float*)
 t VR_IVROverlay_FnTable_GetOverlayRenderingPid(unsigned long)
 t VR_IVROverlay_FnTable_GetOverlaySortOrder(unsigned long, unsigned int*)
 t VR_IVROverlay_FnTable_GetOverlayTexelAspect(unsigned long, float*)
 t VR_IVROverlay_FnTable_GetOverlayTexture(unsigned long, void**, void*, unsigned int*, unsigned int*, unsigned int*, ETextureType*, EColorSpace*, VRTextureBounds_t*)
 t VR_IVROverlay_FnTable_GetOverlayTextureBounds(unsigned long, VRTextureBounds_t*)
 t VR_IVROverlay_FnTable_GetOverlayTextureColorSpace(unsigned long, EColorSpace*)
 t VR_IVROverlay_FnTable_GetOverlayTextureSize(unsigned long, unsigned int*, unsigned int*)
 t VR_IVROverlay_FnTable_GetOverlayTransformAbsolute(unsigned long, ETrackingUniverseOrigin*, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_GetOverlayTransformCursor(unsigned long, HmdVector2_t*)
 t VR_IVROverlay_FnTable_GetOverlayTransformOverlayRelative(unsigned long, unsigned long*, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_GetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int*, char*, unsigned int)
 t VR_IVROverlay_FnTable_GetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int*, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_GetOverlayTransformType(unsigned long, VROverlayTransformType*)
 t VR_IVROverlay_FnTable_GetOverlayWidthInMeters(unsigned long, float*)
 t VR_IVROverlay_FnTable_GetPrimaryDashboardDevice()
 t VR_IVROverlay_FnTable_GetTransformForOverlayCoordinates(unsigned long, ETrackingUniverseOrigin, HmdVector2_t, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_HideKeyboard()
 t VR_IVROverlay_FnTable_HideOverlay(unsigned long)
 t VR_IVROverlay_FnTable_IsActiveDashboardOverlay(unsigned long)
 t VR_IVROverlay_FnTable_IsDashboardVisible()
 t VR_IVROverlay_FnTable_IsHoverTargetOverlay(unsigned long)
 t VR_IVROverlay_FnTable_IsOverlayVisible(unsigned long)
 t VR_IVROverlay_FnTable_PollNextOverlayEvent(unsigned long, VREvent_t*, unsigned int)
 t VR_IVROverlay_FnTable_ReleaseNativeOverlayHandle(unsigned long, void*)
 t VR_IVROverlay_FnTable_SetDashboardOverlaySceneProcess(unsigned long, unsigned int)
 t VR_IVROverlay_FnTable_SetKeyboardPositionForOverlay(unsigned long, HmdRect2_t)
 t VR_IVROverlay_FnTable_SetKeyboardTransformAbsolute(ETrackingUniverseOrigin, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_SetOverlayAlpha(unsigned long, float)
 t VR_IVROverlay_FnTable_SetOverlayColor(unsigned long, float, float, float)
 t VR_IVROverlay_FnTable_SetOverlayCursor(unsigned long, unsigned long)
 t VR_IVROverlay_FnTable_SetOverlayCursorPositionOverride(unsigned long, HmdVector2_t*)
 t VR_IVROverlay_FnTable_SetOverlayCurvature(unsigned long, float)
 t VR_IVROverlay_FnTable_SetOverlayFlag(unsigned long, VROverlayFlags, bool)
 t VR_IVROverlay_FnTable_SetOverlayFromFile(unsigned long, char*)
 t VR_IVROverlay_FnTable_SetOverlayInputMethod(unsigned long, VROverlayInputMethod)
 t VR_IVROverlay_FnTable_SetOverlayIntersectionMask(unsigned long, VROverlayIntersectionMaskPrimitive_t*, unsigned int, unsigned int)
 t VR_IVROverlay_FnTable_SetOverlayMouseScale(unsigned long, HmdVector2_t*)
 t VR_IVROverlay_FnTable_SetOverlayName(unsigned long, char*)
 t VR_IVROverlay_FnTable_SetOverlayPreCurvePitch(unsigned long, float)
 t VR_IVROverlay_FnTable_SetOverlayRaw(unsigned long, void*, unsigned int, unsigned int, unsigned int)
 t VR_IVROverlay_FnTable_SetOverlayRenderingPid(unsigned long, unsigned int)
 t VR_IVROverlay_FnTable_SetOverlaySortOrder(unsigned long, unsigned int)
 t VR_IVROverlay_FnTable_SetOverlayTexelAspect(unsigned long, float)
 t VR_IVROverlay_FnTable_SetOverlayTexture(unsigned long, Texture_t*)
 t VR_IVROverlay_FnTable_SetOverlayTextureBounds(unsigned long, VRTextureBounds_t*)
 t VR_IVROverlay_FnTable_SetOverlayTextureColorSpace(unsigned long, EColorSpace)
 t VR_IVROverlay_FnTable_SetOverlayTransformAbsolute(unsigned long, ETrackingUniverseOrigin, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_SetOverlayTransformCursor(unsigned long, HmdVector2_t*)
 t VR_IVROverlay_FnTable_SetOverlayTransformOverlayRelative(unsigned long, unsigned long, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_SetOverlayTransformProjection(unsigned long, ETrackingUniverseOrigin, HmdMatrix34_t*, VROverlayProjection_t*, EVREye)
 t VR_IVROverlay_FnTable_SetOverlayTransformTrackedDeviceComponent(unsigned long, unsigned int, char*)
 t VR_IVROverlay_FnTable_SetOverlayTransformTrackedDeviceRelative(unsigned long, unsigned int, HmdMatrix34_t*)
 t VR_IVROverlay_FnTable_SetOverlayWidthInMeters(unsigned long, float)
 t VR_IVROverlay_FnTable_ShowDashboard(char*)
 t VR_IVROverlay_FnTable_ShowKeyboard(EGamepadTextInputMode, EGamepadTextInputLineMode, unsigned int, char*, unsigned int, char*, unsigned long)
 t VR_IVROverlay_FnTable_ShowKeyboardForOverlay(unsigned long, EGamepadTextInputMode, EGamepadTextInputLineMode, unsigned int, char*, unsigned int, char*, unsigned long)
 t VR_IVROverlay_FnTable_ShowMessageOverlay(char*, char*, char*, char*, char*, char*)
 t VR_IVROverlay_FnTable_ShowOverlay(unsigned long)
 t VR_IVROverlay_FnTable_TriggerLaserMouseHapticVibration(unsigned long, float, float, float)
 t VR_IVROverlay_FnTable_WaitFrameSync(unsigned int)
 t VR_IVRPaths_FnTable_HandleToString(unsigned long, char*, unsigned int, unsigned int*)
 t VR_IVRPaths_FnTable_ReadPathBatch(unsigned long, PathRead_t*, unsigned int)
 t VR_IVRPaths_FnTable_StringToHandle(unsigned long*, char*)
 t VR_IVRPaths_FnTable_WritePathBatch(unsigned long, PathWrite_t*, unsigned int)
 t VR_IVRProperties_FnTable_GetPropErrorNameFromEnum(ETrackedPropertyError)
 t VR_IVRProperties_FnTable_ReadPropertyBatch(unsigned long, PropertyRead_t*, unsigned int)
 t VR_IVRProperties_FnTable_TrackedDeviceToPropertyContainer(unsigned int)
 t VR_IVRProperties_FnTable_WritePropertyBatch(unsigned long, PropertyWrite_t*, unsigned int)
 t VR_IVRRenderModels_FnTable_FreeRenderModel(RenderModel_t*)
 t VR_IVRRenderModels_FnTable_FreeTexture(RenderModel_TextureMap_t*)
 t VR_IVRRenderModels_FnTable_FreeTextureD3D11(void*)
 t VR_IVRRenderModels_FnTable_GetComponentButtonMask(char*, char*)
 t VR_IVRRenderModels_FnTable_GetComponentCount(char*)
 t VR_IVRRenderModels_FnTable_GetComponentName(char*, unsigned int, char*, unsigned int)
 t VR_IVRRenderModels_FnTable_GetComponentRenderModelName(char*, char*, char*, unsigned int)
 t VR_IVRRenderModels_FnTable_GetComponentState(char*, char*, VRControllerState_t*, RenderModel_ControllerMode_State_t*, RenderModel_ComponentState_t*)
 t VR_IVRRenderModels_FnTable_GetComponentStateForDevicePath(char*, char*, unsigned long, RenderModel_ControllerMode_State_t*, RenderModel_ComponentState_t*)
 t VR_IVRRenderModels_FnTable_GetRenderModelCount()
 t VR_IVRRenderModels_FnTable_GetRenderModelErrorNameFromEnum(EVRRenderModelError)
 t VR_IVRRenderModels_FnTable_GetRenderModelName(unsigned int, char*, unsigned int)
 t VR_IVRRenderModels_FnTable_GetRenderModelOriginalPath(char*, char*, unsigned int, EVRRenderModelError*)
 t VR_IVRRenderModels_FnTable_GetRenderModelThumbnailURL(char*, char*, unsigned int, EVRRenderModelError*)
 t VR_IVRRenderModels_FnTable_LoadIntoTextureD3D11_Async(int, void*)
 t VR_IVRRenderModels_FnTable_LoadRenderModel_Async(char*, RenderModel_t**)
 t VR_IVRRenderModels_FnTable_LoadTextureD3D11_Async(int, void*, void**)
 t VR_IVRRenderModels_FnTable_LoadTexture_Async(int, RenderModel_TextureMap_t**)
 t VR_IVRRenderModels_FnTable_RenderModelHasComponent(char*, char*)
 t VR_IVRResources_FnTable_GetResourceFullPath(char*, char*, char*, unsigned int)
 t VR_IVRResources_FnTable_LoadSharedResource(char*, char*, unsigned int)
 t VR_IVRScreenshots_FnTable_GetScreenshotPropertyFilename(unsigned int, EVRScreenshotPropertyFilenames, char*, unsigned int, EVRScreenshotError*)
 t VR_IVRScreenshots_FnTable_GetScreenshotPropertyType(unsigned int, EVRScreenshotError*)
 t VR_IVRScreenshots_FnTable_HookScreenshot(EVRScreenshotType*, int)
 t VR_IVRScreenshots_FnTable_RequestScreenshot(unsigned int*, EVRScreenshotType, char*, char*)
 t VR_IVRScreenshots_FnTable_SubmitScreenshot(unsigned int, EVRScreenshotType, char*, char*)
 t VR_IVRScreenshots_FnTable_TakeStereoScreenshot(unsigned int*, char*, char*)
 t VR_IVRScreenshots_FnTable_UpdateScreenshotProgress(unsigned int, float)
 t VR_IVRSettings_FnTable_GetBool(char*, char*, EVRSettingsError*)
 t VR_IVRSettings_FnTable_GetFloat(char*, char*, EVRSettingsError*)
 t VR_IVRSettings_FnTable_GetInt32(char*, char*, EVRSettingsError*)
 t VR_IVRSettings_FnTable_GetSettingsErrorNameFromEnum(EVRSettingsError)
 t VR_IVRSettings_FnTable_GetString(char*, char*, char*, unsigned int, EVRSettingsError*)
 t VR_IVRSettings_FnTable_RemoveKeyInSection(char*, char*, EVRSettingsError*)
 t VR_IVRSettings_FnTable_RemoveSection(char*, EVRSettingsError*)
 t VR_IVRSettings_FnTable_SetBool(char*, char*, bool, EVRSettingsError*)
 t VR_IVRSettings_FnTable_SetFloat(char*, char*, float, EVRSettingsError*)
 t VR_IVRSettings_FnTable_SetInt32(char*, char*, int, EVRSettingsError*)
 t VR_IVRSettings_FnTable_SetString(char*, char*, char*, EVRSettingsError*)
 t VR_IVRSpatialAnchors_FnTable_CreateSpatialAnchorFromDescriptor(char*, unsigned int*)
 t VR_IVRSpatialAnchors_FnTable_CreateSpatialAnchorFromPose(unsigned int, ETrackingUniverseOrigin, SpatialAnchorPose_t*, unsigned int*)
 t VR_IVRSpatialAnchors_FnTable_GetSpatialAnchorDescriptor(unsigned int, char*, unsigned int*)
 t VR_IVRSpatialAnchors_FnTable_GetSpatialAnchorPose(unsigned int, ETrackingUniverseOrigin, SpatialAnchorPose_t*)
 t VR_IVRSystem_FnTable_AcknowledgeQuit_Exiting()
 t VR_IVRSystem_FnTable_ApplyTransform(TrackedDevicePose_t*, TrackedDevicePose_t*, HmdMatrix34_t*)
 t VR_IVRSystem_FnTable_ComputeDistortion(EVREye, float, float, DistortionCoordinates_t*)
 t VR_IVRSystem_FnTable_GetAppContainerFilePaths(char*, unsigned int)
 t VR_IVRSystem_FnTable_GetArrayTrackedDeviceProperty(unsigned int, ETrackedDeviceProperty, unsigned int, void*, unsigned int, ETrackedPropertyError*)
 t VR_IVRSystem_FnTable_GetBoolTrackedDeviceProperty(unsigned int, ETrackedDeviceProperty, ETrackedPropertyError*)
 t VR_IVRSystem_FnTable_GetButtonIdNameFromEnum(EVRButtonId)
 t VR_IVRSystem_FnTable_GetControllerAxisTypeNameFromEnum(EVRControllerAxisType)
 t VR_IVRSystem_FnTable_GetControllerRoleForTrackedDeviceIndex(unsigned int)
 t VR_IVRSystem_FnTable_GetControllerState(unsigned int, VRControllerState_t*, unsigned int)
 t VR_IVRSystem_FnTable_GetControllerStateWithPose(ETrackingUniverseOrigin, unsigned int, VRControllerState_t*, unsigned int, TrackedDevicePose_t*)
 t VR_IVRSystem_FnTable_GetD3D9AdapterIndex()
 t VR_IVRSystem_FnTable_GetDXGIOutputInfo(int*)
 t VR_IVRSystem_FnTable_GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin, float, TrackedDevicePose_t*, unsigned int)
 t VR_IVRSystem_FnTable_GetEventTypeNameFromEnum(EVREventType)
 t VR_IVRSystem_FnTable_GetEyeToHeadTransform(EVREye)
 t VR_IVRSystem_FnTable_GetFloatTrackedDeviceProperty(unsigned int, ETrackedDeviceProperty, ETrackedPropertyError*)
 t VR_IVRSystem_FnTable_GetHiddenAreaMesh(EVREye, EHiddenAreaMeshType)
 t VR_IVRSystem_FnTable_GetInt32TrackedDeviceProperty(unsigned int, ETrackedDeviceProperty, ETrackedPropertyError*)
 t VR_IVRSystem_FnTable_GetMatrix34TrackedDeviceProperty(unsigned int, ETrackedDeviceProperty, ETrackedPropertyError*)
 t VR_IVRSystem_FnTable_GetOutputDevice(unsigned long*, ETextureType, VkInstance_T*)
 t VR_IVRSystem_FnTable_GetProjectionMatrix(EVREye, float, float)
 t VR_IVRSystem_FnTable_GetProjectionRaw(EVREye, float*, float*, float*, float*)
 t VR_IVRSystem_FnTable_GetPropErrorNameFromEnum(ETrackedPropertyError)
 t VR_IVRSystem_FnTable_GetRawZeroPoseToStandingAbsoluteTrackingPose()
 t VR_IVRSystem_FnTable_GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t VR_IVRSystem_FnTable_GetRuntimeVersion()
 t VR_IVRSystem_FnTable_GetSeatedZeroPoseToStandingAbsoluteTrackingPose()
 t VR_IVRSystem_FnTable_GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)
 t VR_IVRSystem_FnTable_GetStringTrackedDeviceProperty(unsigned int, ETrackedDeviceProperty, char*, unsigned int, ETrackedPropertyError*)
 t VR_IVRSystem_FnTable_GetTimeSinceLastVsync(float*, unsigned long*)
 t VR_IVRSystem_FnTable_GetTrackedDeviceActivityLevel(unsigned int)
 t VR_IVRSystem_FnTable_GetTrackedDeviceClass(unsigned int)
 t VR_IVRSystem_FnTable_GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole)
 t VR_IVRSystem_FnTable_GetUint64TrackedDeviceProperty(unsigned int, ETrackedDeviceProperty, ETrackedPropertyError*)
 t VR_IVRSystem_FnTable_IsDisplayOnDesktop()
 t VR_IVRSystem_FnTable_IsInputAvailable()
 t VR_IVRSystem_FnTable_IsSteamVRDrawingControllers()
 t VR_IVRSystem_FnTable_IsTrackedDeviceConnected(unsigned int)
 t VR_IVRSystem_FnTable_PerformFirmwareUpdate(unsigned int)
 t VR_IVRSystem_FnTable_PollNextEvent(VREvent_t*, unsigned int)
 t VR_IVRSystem_FnTable_PollNextEventWithPose(ETrackingUniverseOrigin, VREvent_t*, unsigned int, TrackedDevicePose_t*)
 t VR_IVRSystem_FnTable_SetDisplayVisibility(bool)
 t VR_IVRSystem_FnTable_ShouldApplicationPause()
 t VR_IVRSystem_FnTable_ShouldApplicationReduceRenderingWork()
 t VR_IVRSystem_FnTable_TriggerHapticPulse(unsigned int, unsigned int, unsigned short)
 t VR_IVRTrackedCamera_FnTable_AcquireVideoStreamingService(unsigned int, unsigned long*)
 t VR_IVRTrackedCamera_FnTable_GetCameraErrorNameFromEnum(EVRTrackedCameraError)
 t VR_IVRTrackedCamera_FnTable_GetCameraFrameSize(unsigned int, EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t VR_IVRTrackedCamera_FnTable_GetCameraIntrinsics(unsigned int, unsigned int, EVRTrackedCameraFrameType, HmdVector2_t*, HmdVector2_t*)
 t VR_IVRTrackedCamera_FnTable_GetCameraProjection(unsigned int, unsigned int, EVRTrackedCameraFrameType, float, float, HmdMatrix44_t*)
 t VR_IVRTrackedCamera_FnTable_GetCameraTrackingSpace()
 t VR_IVRTrackedCamera_FnTable_GetVideoStreamFrameBuffer(unsigned long, EVRTrackedCameraFrameType, void*, unsigned int, CameraVideoStreamFrameHeader_t*, unsigned int)
 t VR_IVRTrackedCamera_FnTable_GetVideoStreamTextureD3D11(unsigned long, EVRTrackedCameraFrameType, void*, void**, CameraVideoStreamFrameHeader_t*, unsigned int)
 t VR_IVRTrackedCamera_FnTable_GetVideoStreamTextureGL(unsigned long, EVRTrackedCameraFrameType, unsigned int*, CameraVideoStreamFrameHeader_t*, unsigned int)
 t VR_IVRTrackedCamera_FnTable_GetVideoStreamTextureSize(unsigned int, EVRTrackedCameraFrameType, VRTextureBounds_t*, unsigned int*, unsigned int*)
 t VR_IVRTrackedCamera_FnTable_HasCamera(unsigned int, bool*)
 t VR_IVRTrackedCamera_FnTable_ReleaseVideoStreamTextureGL(unsigned long, unsigned int)
 t VR_IVRTrackedCamera_FnTable_ReleaseVideoStreamingService(unsigned long)
 t VR_IVRTrackedCamera_FnTable_SetCameraTrackingSpace(ETrackingUniverseOrigin)
 t V_StripExtension(std::string&)
 t V_URLDecode(char*, int, char const*, int)
 t V_URLDecodeInternal(char*, int, char const*, int, bool)
 t V_URLDecodeInternal(char*, int, char const*, int, bool) [clone .part.0]
 t V_URLDecodeNoPlusForSpace(char*, int, char const*, int)
 t V_URLEncode(char*, int, char const*, int)
 t V_URLEncode(char*, int, char const*, int) [clone .cold]
 t V_URLEncodeFullPath(char*, int, char const*, int)
 t V_URLEncodeFullPath(char*, int, char const*, int) [clone .cold]
 t V_URLEncodeInternal(char*, int, char const*, int, bool, std::function<bool (char)>)
 t V_URLEncodeNoPlusForSpace(char*, int, char const*, int)
 t V_URLEncodeNoPlusForSpace(char*, int, char const*, int) [clone .cold]
 t VcetBo::Allocate(unsigned int, unsigned int, bool)
 t VcetBo::Allocate(unsigned long, bool, unsigned int)
 t VcetBo::GetHeightAlignment()
 t VcetBo::GetHeightAlignment(VcetContext*)
 t VcetBo::GetWidthAlignment()
 t VcetBo::GetWidthAlignment(VcetContext*)
 t VcetBo::Import(int, bool)
 t VcetBo::IsHeightAligned(VcetContext*, unsigned int)
 t VcetBo::IsWidthAligned(VcetContext*, unsigned int)
 t VcetBo::Map()
 t VcetBo::Unmap()
 t VcetBo::VcetBo(VcetContext*)
 t VcetBo::~VcetBo()
 t VcetBoAlignDimensions
 t VcetBoCreate
 t VcetBoCreate.cold
 t VcetBoCreateImage
 t VcetBoCreateImage.cold
 t VcetBoDestroy
 t VcetBoImport
 t VcetBoImport.cold
 t VcetBoMap
 t VcetBoUnmap
 t VcetCalculateMv
 t VcetContext::AllocateResource(VcetBo*&, unsigned long, bool)
 t VcetContext::AllocateResource(VcetBo*&, unsigned long, bool) [clone .cold]
 t VcetContext::AllocateResources()
 t VcetContext::AllocateResources() [clone .cold]
 t VcetContext::CalculateMv(VcetBo*, VcetBo*, VcetBo*, unsigned int, unsigned int, VcetJob*)
 t VcetContext::CreateSession()
 t VcetContext::DestroySession()
 t VcetContext::DestroySession() [clone .part.0]
 t VcetContext::GetBsSize()
 t VcetContext::GetCpbSize()
 t VcetContext::GetFamilyId()
 t VcetContext::GetFbSize()
 t VcetContext::GetIpType()
 t VcetContext::GetNextIb()
 t VcetContext::Init(unsigned int, unsigned int)
 t VcetContext::IsMvDumpSupported()
 t VcetContext::MinimalInit()
 t VcetContext::Submit(VcetIb*)
 t VcetContext::VcetContext()
 t VcetContext::~VcetContext()
 t VcetContextCreate
 t VcetContextCreate.cold
 t VcetContextDestroy
 t VcetIb::Init()
 t VcetIb::RefResource(VcetBo*)
 t VcetIb::Reset()
 t VcetIb::VcetIb(VcetContext*)
 t VcetIb::WaitFromCompletion(unsigned long)
 t VcetIb::Write(unsigned int)
 t VcetIb::Write(unsigned int*, unsigned int)
 t VcetIb::WriteAuxBuffer(unsigned long)
 t VcetIb::WriteBsBuffer()
 t VcetIb::WriteCalculateMv(VcetBo*, VcetBo*, VcetBo*, unsigned int, unsigned int)
 t VcetIb::WriteConfigInit()
 t VcetIb::WriteContextBuffer()
 t VcetIb::WriteCreate(unsigned int, unsigned int)
 t VcetIb::WriteCreateSession(unsigned int, unsigned int)
 t VcetIb::WriteDestroy()
 t VcetIb::WriteEncodeCmd(VcetBo*, unsigned int, unsigned int)
 t VcetIb::WriteFeedbackBuffer()
 t VcetIb::WriteMvCmd(VcetBo*, VcetBo*, unsigned int, unsigned int)
 t VcetIb::WriteNop(unsigned int)
 t VcetIb::WriteSession()
 t VcetIb::WriteTaskInfo(unsigned int)
 t VcetIb::WriteVceConfig()
 t VcetIb::WriteoDestroySession()
 t VcetIb::~VcetIb()
 t VcetIsSystemSupported
 t VcetIsSystemSupported.cold
 t VcetJob::Init()
 t VcetJob::VcetJob(VcetContext*)
 t VcetJob::WaitForCompletion(unsigned long)
 t VcetJob::~VcetJob()
 t VcetJobCreate
 t VcetJobCreate.cold
 t VcetJobDestroy
 t VcetJobWait
 t VerifyTidIntegrity()
 t VersionIsLess(std::string const&, std::string const&)
 t VersionIsLess(std::string const&, std::string const&) [clone .cold]
 t VkExtensionProperties* std::__uninitialized_default_n_1<true>::__uninit_default_n<VkExtensionProperties*, unsigned long>(VkExtensionProperties*, unsigned long)
 t VkLayerProperties* std::__uninitialized_default_n_1<true>::__uninit_default_n<VkLayerProperties*, unsigned long>(VkLayerProperties*, unsigned long)
 t VrInitGpuProfiling()
 t VulkanVRRenderer::BlendState::AsVulkan()
 t VulkanVRRenderer::BlendState::~BlendState()
 t VulkanVRRenderer::ConstantBuffer::AsVulkan()
 t VulkanVRRenderer::ConstantBuffer::~ConstantBuffer()
 t VulkanVRRenderer::DepthStencilState::AsVulkan()
 t VulkanVRRenderer::DepthStencilState::~DepthStencilState()
 t VulkanVRRenderer::EventQuery::AsVulkan()
 t VulkanVRRenderer::EventQuery::~EventQuery()
 t VulkanVRRenderer::GPUCountingSemaphore::AsVulkan()
 t VulkanVRRenderer::GPUCountingSemaphore::~GPUCountingSemaphore()
 t VulkanVRRenderer::GPUSemaphore::AsVulkan()
 t VulkanVRRenderer::GPUSemaphore::~GPUSemaphore()
 t VulkanVRRenderer::IndexBuffer::AsVulkan()
 t VulkanVRRenderer::IndexBuffer::~IndexBuffer()
 t VulkanVRRenderer::RasterizerState::AsVulkan()
 t VulkanVRRenderer::RasterizerState::~RasterizerState()
 t VulkanVRRenderer::Sampler::AsVulkan()
 t VulkanVRRenderer::Sampler::~Sampler()
 t VulkanVRRenderer::Texture::AsVulkan()
 t VulkanVRRenderer::Texture::~Texture()
 t VulkanVRRenderer::VertexBuffer::AsVulkan()
 t VulkanVRRenderer::VertexBuffer::~VertexBuffer()
 t WatchdogHost<CVRWatchdogHost_001>::GetInterface()
 t WatchdogHost<CVRWatchdogHost_001>::~WatchdogHost()
 t WillLog(ELogLevel)
 t WinRT::AcquireDisplay(int)
 t WinRT::GetAdapterLuid(int, void*)
 t WinRT::GetCurrentDriverVersion()
 t WinRT::GetDeviceString(int)
 t WinRT::GetDisplayMode(WinRT::DisplayMode_t*)
 t WinRT::GetDisplayModes(unsigned int*, WinRT::DisplayMode_t*)
 t WinRT::GetSurfaces(unsigned int*, IPC::TSharedHandleBase<int, -1>*)
 t WinRT::HasDisplay(int)
 t WinRT::Present()
 t WinRT::SetDisplayMode(WinRT::DisplayMode_t*)
 t WinRT::Shutdown()
 t WinRT::WaitForPresent(unsigned long*, float*)
 t WriteOverlayTexture(VRCompositor_OverlayState_t&, unsigned int, unsigned long, vr::VRTextureBounds_t const&)
 t XrResult CSxrSession::ReadCachedActionState<XrActionStateBoolean>(XrAction_T*, unsigned long, XrActionType, XrActionStateBoolean*, XrActionStateBoolean const&, std::function<XrResult (XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*)>)
 t XrResult CSxrSession::ReadCachedActionState<XrActionStateFloat>(XrAction_T*, unsigned long, XrActionType, XrActionStateFloat*, XrActionStateFloat const&, std::function<XrResult (XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*)>)
 t XrResult CSxrSession::ReadCachedActionState<XrActionStatePose>(XrAction_T*, unsigned long, XrActionType, XrActionStatePose*, XrActionStatePose const&, std::function<XrResult (XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*)>)
 t XrResult CSxrSession::ReadCachedActionState<XrActionStateVector2f>(XrAction_T*, unsigned long, XrActionType, XrActionStateVector2f*, XrActionStateVector2f const&, std::function<XrResult (XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*)>)
 t XrView& std::vector<XrView, std::allocator<XrView> >::emplace_back<XrView>(XrView&&) [clone .isra.0]
 t _GLOBAL__sub_I.00101_ipcposix.cpp
 t _GLOBAL__sub_I__dynamic_openvr_api_flat.cpp
 t _GLOBAL__sub_I_actionbindingconfig.cpp
 t _GLOBAL__sub_I_animpose.cpp
 t _GLOBAL__sub_I_animresource.cpp
 t _GLOBAL__sub_I_animresourcefactory.cpp
 t _GLOBAL__sub_I_animresourcemanager.cpp
 t _GLOBAL__sub_I_animskeleton.cpp
 t _GLOBAL__sub_I_animutils.cpp
 t _GLOBAL__sub_I_atomicops_internals_x86_gcc.cc
 t _GLOBAL__sub_I_bitbuf.cpp
 t _GLOBAL__sub_I_blendposeoperation.cpp
 t _GLOBAL__sub_I_blockqueue.cpp
 t _GLOBAL__sub_I_bonemaskresource.cpp
 t _GLOBAL__sub_I_bonemaskresource.cpp.cold
 t _GLOBAL__sub_I_coded_stream.cc
 t _GLOBAL__sub_I_common.cc
 t _GLOBAL__sub_I_computedsettings.cpp
 t _GLOBAL__sub_I_descriptor.cc
 t _GLOBAL__sub_I_descriptor.pb.cc
 t _GLOBAL__sub_I_descriptor_database.cc
 t _GLOBAL__sub_I_downsample_renderer.cpp
 t _GLOBAL__sub_I_driverdirectinternalclient.cpp
 t _GLOBAL__sub_I_driverlog.cpp
 t _GLOBAL__sub_I_drivermanager.cpp
 t _GLOBAL__sub_I_dynamic_message.cc
 t _GLOBAL__sub_I_extension_set.cc
 t _GLOBAL__sub_I_extension_set_heavy.cc
 t _GLOBAL__sub_I_generated_message_reflection.cc
 t _GLOBAL__sub_I_generated_message_util.cc
 t _GLOBAL__sub_I_hmderrors.cpp
 t _GLOBAL__sub_I_hmdlatest.cpp
 t _GLOBAL__sub_I_inputactionmanifest.cpp
 t _GLOBAL__sub_I_inputfilter.cpp
 t _GLOBAL__sub_I_inputfilter_boolean.cpp
 t _GLOBAL__sub_I_inputfilter_dpad.cpp
 t _GLOBAL__sub_I_inputfilter_grab.cpp
 t _GLOBAL__sub_I_inputfilter_haptics.cpp
 t _GLOBAL__sub_I_inputfilter_joystick_settings.cpp
 t _GLOBAL__sub_I_inputfilter_pose.cpp
 t _GLOBAL__sub_I_inputfilter_scalar.cpp
 t _GLOBAL__sub_I_inputfilter_scroll_joystick_discrete.cpp
 t _GLOBAL__sub_I_inputfilter_scroll_joystick_smooth.cpp
 t _GLOBAL__sub_I_inputfilter_scroll_trackpad_discrete.cpp
 t _GLOBAL__sub_I_inputfilter_scroll_trackpad_smooth.cpp
 t _GLOBAL__sub_I_interface_adapters_client.cpp
 t _GLOBAL__sub_I_interface_adapters_client.cpp.cold
 t _GLOBAL__sub_I_ipcpipe.cpp
 t _GLOBAL__sub_I_keyframeddataresource.cpp
 t _GLOBAL__sub_I_keyframeddataresource.cpp.cold
 t _GLOBAL__sub_I_keyframesamplerposeoperation.cpp
 t _GLOBAL__sub_I_legacyinput.cpp
 t _GLOBAL__sub_I_liquidvr.cpp
 t _GLOBAL__sub_I_localization.cpp
 t _GLOBAL__sub_I_logbuffer.cpp
 t _GLOBAL__sub_I_matrix44aligned.cpp
 t _GLOBAL__sub_I_mcstore.cpp
 t _GLOBAL__sub_I_mempool.cpp
 t _GLOBAL__sub_I_message.cc
 t _GLOBAL__sub_I_message_lite.cc
 t _GLOBAL__sub_I_mirrorposeoperation.cpp
 t _GLOBAL__sub_I_msaa_resolve_renderer.cpp
 t _GLOBAL__sub_I_once.cc
 t _GLOBAL__sub_I_openvr_internal.cpp
 t _GLOBAL__sub_I_openxr_common.cpp
 t _GLOBAL__sub_I_openxr_common.cpp.cold
 t _GLOBAL__sub_I_openxr_compositor_factory.cpp
 t _GLOBAL__sub_I_openxr_compositor_openvr.cpp
 t _GLOBAL__sub_I_openxr_compositor_openvr.cpp.cold
 t _GLOBAL__sub_I_openxr_compositor_prism.cpp
 t _GLOBAL__sub_I_openxr_compositor_prism.cpp.cold
 t _GLOBAL__sub_I_openxr_conformance.cpp
 t _GLOBAL__sub_I_openxr_conformance.cpp.cold
 t _GLOBAL__sub_I_openxr_device.cpp
 t _GLOBAL__sub_I_openxr_device.cpp.cold
 t _GLOBAL__sub_I_openxr_entrypoints.cpp
 t _GLOBAL__sub_I_openxr_entrypoints.cpp.cold
 t _GLOBAL__sub_I_openxr_generic_tracker.cpp
 t _GLOBAL__sub_I_openxr_generic_tracker.cpp.cold
 t _GLOBAL__sub_I_openxr_graphics_gl_openvr.cpp
 t _GLOBAL__sub_I_openxr_graphics_gl_openvr.cpp.cold
 t _GLOBAL__sub_I_openxr_graphics_prism.cpp
 t _GLOBAL__sub_I_openxr_graphics_prism.cpp.cold
 t _GLOBAL__sub_I_openxr_graphics_vulkan_openvr.cpp
 t _GLOBAL__sub_I_openxr_graphics_vulkan_openvr.cpp.cold
 t _GLOBAL__sub_I_openxr_hand_tracker.cpp
 t _GLOBAL__sub_I_openxr_hand_tracker.cpp.cold
 t _GLOBAL__sub_I_openxr_input.cpp
 t _GLOBAL__sub_I_openxr_input.cpp.cold
 t _GLOBAL__sub_I_openxr_interaction_profiles.cpp
 t _GLOBAL__sub_I_openxr_interaction_profiles.cpp.cold
 t _GLOBAL__sub_I_openxr_session.cpp
 t _GLOBAL__sub_I_openxr_session.cpp.cold
 t _GLOBAL__sub_I_openxr_space.cpp
 t _GLOBAL__sub_I_openxr_space.cpp.cold
 t _GLOBAL__sub_I_openxr_utils.cpp
 t _GLOBAL__sub_I_oxrtools.cpp
 t _GLOBAL__sub_I_oxrtools.cpp.cold
 t _GLOBAL__sub_I_pathmanager.cpp
 t _GLOBAL__sub_I_poserecipe.cpp
 t _GLOBAL__sub_I_poseupdatecontext.cpp
 t _GLOBAL__sub_I_propertymanager.cpp
 t _GLOBAL__sub_I_quaternionaligned.cpp
 t _GLOBAL__sub_I_reflection.cpp
 t _GLOBAL__sub_I_reflection_ops.cc
 t _GLOBAL__sub_I_rendermodelmanager.cpp
 t _GLOBAL__sub_I_repeated_field.cc
 t _GLOBAL__sub_I_settingsmanager.cpp
 t _GLOBAL__sub_I_sharedresource_linux.cpp
 t _GLOBAL__sub_I_sharedresourcenamespace.cpp
 t _GLOBAL__sub_I_sharedtexture_linux.cpp
 t _GLOBAL__sub_I_skeletalcompression.cpp
 t _GLOBAL__sub_I_skeletalinpututils.cpp
 t _GLOBAL__sub_I_skeletonlist.cpp
 t _GLOBAL__sub_I_stringprintf.cc
 t _GLOBAL__sub_I_strtod.cc
 t _GLOBAL__sub_I_strtools_public.cpp
 t _GLOBAL__sub_I_structurally_valid.cc
 t _GLOBAL__sub_I_strutil.cc
 t _GLOBAL__sub_I_substitute.cc
 t _GLOBAL__sub_I_text_format.cc
 t _GLOBAL__sub_I_threadtools.cpp
 t _GLOBAL__sub_I_threadwatchdog.cpp
 t _GLOBAL__sub_I_tiny_gltf.cpp
 t _GLOBAL__sub_I_tokenizer.cc
 t _GLOBAL__sub_I_trackeddeviceadapters.cpp
 t _GLOBAL__sub_I_transform.cpp
 t _GLOBAL__sub_I_twoboneikposeoperation.cpp
 t _GLOBAL__sub_I_unknown_field_set.cc
 t _GLOBAL__sub_I_vectoraligned.cpp
 t _GLOBAL__sub_I_virtualdisplayclient.cpp
 t _GLOBAL__sub_I_vkdevice.cpp
 t _GLOBAL__sub_I_vkdevice.cpp.cold
 t _GLOBAL__sub_I_vr_cl_tracked_camera.cpp
 t _GLOBAL__sub_I_vr_messages.pb.cc
 t _GLOBAL__sub_I_vrapplications.cpp
 t _GLOBAL__sub_I_vrapplicationssharedstate.cpp
 t _GLOBAL__sub_I_vrassert.cpp
 t _GLOBAL__sub_I_vrchaperoneclient.cpp
 t _GLOBAL__sub_I_vrchaperoneinfo.cpp
 t _GLOBAL__sub_I_vrclient.cpp
 t _GLOBAL__sub_I_vrclientcore.cpp
 t _GLOBAL__sub_I_vrcompositorclient.cpp
 t _GLOBAL__sub_I_vrcompositorclientbase.cpp
 t _GLOBAL__sub_I_vrcompositorsharedstate.cpp
 t _GLOBAL__sub_I_vrcompositorsharedtextures.cpp
 t _GLOBAL__sub_I_vrcrash.cpp
 t _GLOBAL__sub_I_vrdebug.cpp
 t _GLOBAL__sub_I_vrframerategovernor.cpp
 t _GLOBAL__sub_I_vrinput.cpp
 t _GLOBAL__sub_I_vrinputsharedstate.cpp
 t _GLOBAL__sub_I_vriobuffer.cpp
 t _GLOBAL__sub_I_vrlog.cpp
 t _GLOBAL__sub_I_vrmailbox.cpp
 t _GLOBAL__sub_I_vrmailboxclient.cpp
 t _GLOBAL__sub_I_vrnotifications.cpp
 t _GLOBAL__sub_I_vroverlay.cpp
 t _GLOBAL__sub_I_vroverlayinternal.cpp
 t _GLOBAL__sub_I_vroverlayview.cpp
 t _GLOBAL__sub_I_vrscreenshots.cpp
 t _GLOBAL__sub_I_vrsettings.cpp
 t _GLOBAL__sub_I_vrspatialanchors.cpp
 t _GLOBAL__sub_I_vrsteamprivate.cpp
 t _GLOBAL__sub_I_vrsystemlayersharedstate.cpp
 t _GLOBAL__sub_I_vulkan.cpp
 t _GLOBAL__sub_I_vulkan.cpp.cold
 t _GLOBAL__sub_I_vulkanrenderer.cpp
 t _GLOBAL__sub_I_vulkantools.cpp
 t _GLOBAL__sub_I_wire_format.cc
 t _GLOBAL__sub_I_wire_format_lite.cc
 t _GLOBAL__sub_I_zero_copy_stream.cc
 t _GLOBAL__sub_I_zero_copy_stream_impl.cc
 t _GLOBAL__sub_I_zero_copy_stream_impl_lite.cc
 t _Unwind_Backtrace
 t _Unwind_Backtrace.cold
 t _Unwind_DebugHook
 t _Unwind_DeleteException
 t _Unwind_FindEnclosingFunction
 t _Unwind_Find_FDE
 t _Unwind_Find_FDE.cold
 t _Unwind_ForcedUnwind
 t _Unwind_ForcedUnwind_Phase2
 t _Unwind_ForcedUnwind_Phase2.cold
 t _Unwind_GetCFA
 t _Unwind_GetDataRelBase
 t _Unwind_GetGR
 t _Unwind_GetGR.cold
 t _Unwind_GetIP
 t _Unwind_GetIPInfo
 t _Unwind_GetLanguageSpecificData
 t _Unwind_GetRegionStart
 t _Unwind_GetTextRelBase
 t _Unwind_IteratePhdrCallback
 t _Unwind_IteratePhdrCallback.cold
 t _Unwind_RaiseException
 t _Unwind_RaiseException.cold
 t _Unwind_RaiseException_Phase2
 t _Unwind_RaiseException_Phase2.cold
 t _Unwind_Resume
 t _Unwind_Resume.cold
 t _Unwind_Resume_or_Rethrow
 t _Unwind_Resume_or_Rethrow.cold
 t _Unwind_SetGR
 t _Unwind_SetGR.cold
 t _Unwind_SetIP
 t __deregister_frame
 t __deregister_frame_info
 t __deregister_frame_info_bases
 t __do_global_dtors_aux
 t __frame_state_for
 t __gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t __gnu_cxx::__enable_if<std::__is_char<char>::__value, bool>::__type std::operator==<char>(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) [clone .isra.0]
 t __gnu_cxx::__enable_if<std::__is_random_access_iter<CSxrInstance::XrEvent_t*, std::iterator_traits<CSxrInstance::XrEvent_t*>::iterator_category>::__value, std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*> >::__type std::__copy_move_a1<true, CSxrInstance::XrEvent_t*, CSxrInstance::XrEvent_t>(CSxrInstance::XrEvent_t*, CSxrInstance::XrEvent_t*, std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*>)
 t __gnu_cxx::__enable_if<std::__is_random_access_iter<CSxrInstance::XrEvent_t*, std::iterator_traits<CSxrInstance::XrEvent_t*>::iterator_category>::__value, std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*> >::__type std::__copy_move_backward_a1<true, CSxrInstance::XrEvent_t*, CSxrInstance::XrEvent_t>(CSxrInstance::XrEvent_t*, CSxrInstance::XrEvent_t*, std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*>)
 t __gnu_cxx::__enable_if<std::__is_random_access_iter<CVRCompositorSharedTextures::CommandBuffer_t**, std::iterator_traits<CVRCompositorSharedTextures::CommandBuffer_t**>::iterator_category>::__value, std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t*&, CVRCompositorSharedTextures::CommandBuffer_t**> >::__type std::__copy_move_a1<false, CVRCompositorSharedTextures::CommandBuffer_t**, CVRCompositorSharedTextures::CommandBuffer_t*>(CVRCompositorSharedTextures::CommandBuffer_t**, CVRCompositorSharedTextures::CommandBuffer_t**, std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t*&, CVRCompositorSharedTextures::CommandBuffer_t**>)
 t __gnu_cxx::__normal_iterator<CSxrDeletableBase**, std::vector<CSxrDeletableBase*, std::allocator<CSxrDeletableBase*> > > std::__find_if<__gnu_cxx::__normal_iterator<CSxrDeletableBase**, std::vector<CSxrDeletableBase*, std::allocator<CSxrDeletableBase*> > >, __gnu_cxx::__ops::_Iter_equals_val<CSxrDeletableBase* const> >(__gnu_cxx::__normal_iterator<CSxrDeletableBase**, std::vector<CSxrDeletableBase*, std::allocator<CSxrDeletableBase*> > >, __gnu_cxx::__normal_iterator<CSxrDeletableBase**, std::vector<CSxrDeletableBase*, std::allocator<CSxrDeletableBase*> > >, __gnu_cxx::__ops::_Iter_equals_val<CSxrDeletableBase* const>, std::random_access_iterator_tag) [clone .isra.0]
 t __gnu_cxx::__normal_iterator<CVRInputLatest::FrameActionData_t*, std::vector<CVRInputLatest::FrameActionData_t, std::allocator<CVRInputLatest::FrameActionData_t> > > std::__find_if<__gnu_cxx::__normal_iterator<CVRInputLatest::FrameActionData_t*, std::vector<CVRInputLatest::FrameActionData_t, std::allocator<CVRInputLatest::FrameActionData_t> > >, __gnu_cxx::__ops::_Iter_pred<CVRInputLatest::InputFrame_t::ComputeActionChange(CVRInputLatest::InputFrame_t*, unsigned long, unsigned long, VRAction_Entry_t&)::{lambda(CVRInputLatest::FrameActionData_t const&)#1}> >(__gnu_cxx::__ops::_Iter_pred<CVRInputLatest::InputFrame_t::ComputeActionChange(CVRInputLatest::InputFrame_t*, unsigned long, unsigned long, VRAction_Entry_t&)::{lambda(CVRInputLatest::FrameActionData_t const&)#1}>, __gnu_cxx::__ops::_Iter_pred<CVRInputLatest::InputFrame_t::ComputeActionChange(CVRInputLatest::InputFrame_t*, unsigned long, unsigned long, VRAction_Entry_t&)::{lambda(CVRInputLatest::FrameActionData_t const&)#1}>, __gnu_cxx::__ops::_Iter_pred<CVRInputLatest::InputFrame_t::ComputeActionChange(CVRInputLatest::InputFrame_t*, unsigned long, unsigned long, VRAction_Entry_t&)::{lambda(CVRInputLatest::FrameActionData_t const&)#1}>, std::random_access_iterator_tag) [clone .constprop.0]
 t __gnu_cxx::__normal_iterator<char const*, std::string> std::__find_if<__gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__ops::_Iter_comp_to_iter<CRenderModelManager::GetModelInfo(char const*, bool)::{lambda(char, char)#1}, __gnu_cxx::__normal_iterator<char const*, std::string> > >(__gnu_cxx::__ops::_Iter_comp_to_iter<CRenderModelManager::GetModelInfo(char const*, bool)::{lambda(char, char)#1}, __gnu_cxx::__normal_iterator<char const*, std::string> >, __gnu_cxx::__ops::_Iter_comp_to_iter<CRenderModelManager::GetModelInfo(char const*, bool)::{lambda(char, char)#1}, __gnu_cxx::__normal_iterator<char const*, std::string> >, __gnu_cxx::__ops::_Iter_comp_to_iter<CRenderModelManager::GetModelInfo(char const*, bool)::{lambda(char, char)#1}, __gnu_cxx::__normal_iterator<char const*, std::string> >, std::random_access_iterator_tag) [clone .constprop.0]
 t __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > > std::__unique<__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__ops::_Iter_equal_to_iter) [clone .isra.0]
 t __gnu_cxx::__normal_iterator<std::pair<std::string, std::string>*, std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > > > std::__find_if<__gnu_cxx::__normal_iterator<std::pair<std::string, std::string>*, std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<std::string, std::string> const> >(__gnu_cxx::__normal_iterator<std::pair<std::string, std::string>*, std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > > >, __gnu_cxx::__normal_iterator<std::pair<std::string, std::string>*, std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > > >, __gnu_cxx::__ops::_Iter_equals_val<std::pair<std::string, std::string> const>, std::random_access_iterator_tag) [clone .isra.0]
 t __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > > std::__find_if<__gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__ops::_Iter_equals_val<std::string const> >(__gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__ops::_Iter_equals_val<std::string const>, std::random_access_iterator_tag) [clone .isra.0]
 t __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > > std::__find_if<__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__ops::_Iter_equals_val<std::string const> >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__ops::_Iter_equals_val<std::string const>, std::random_access_iterator_tag) [clone .isra.0]
 t __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > > std::__find_if<__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__ops::_Iter_equals_val<vr_internal::CVRPathHandle const> >(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, __gnu_cxx::__ops::_Iter_equals_val<vr_internal::CVRPathHandle const>, std::random_access_iterator_tag) [clone .isra.0]
 t __gnu_cxx::__normal_iterator<void* const*, std::vector<void*, std::allocator<void*> > > std::__find_if<__gnu_cxx::__normal_iterator<void* const*, std::vector<void*, std::allocator<void*> > >, __gnu_cxx::__ops::_Iter_equals_val<void* const> >(__gnu_cxx::__normal_iterator<void* const*, std::vector<void*, std::allocator<void*> > >, __gnu_cxx::__normal_iterator<void* const*, std::vector<void*, std::allocator<void*> > >, __gnu_cxx::__ops::_Iter_equals_val<void* const>, std::random_access_iterator_tag) [clone .isra.0]
 t __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) [clone .isra.136]
 t __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) [clone .isra.737]
 t __register_frame
 t __register_frame_info
 t __register_frame_info_bases
 t __register_frame_info_table
 t __register_frame_info_table_bases
 t __register_frame_table
 t __tcf_0
 t __tcf_1
 t _findclose(long)
 t _findfirst(char const*, _finddata_t*)
 t _findnext(long, _finddata_t*)
 t _fini
 t _init
 t add_fdes
 t add_fdes.cold
 t bf_read::CheckReadUBitLong(int)
 t bf_read::CompareBitsAt(int, bf_read*, int, int)
 t bf_read::ExciseBits(int, int)
 t bf_read::GetAssertOnOverflow() const
 t bf_read::PeekUBitLong(int)
 t bf_read::ReadAndAllocateString(bool*)
 t bf_read::ReadBitAngle(int)
 t bf_read::ReadBitLong(int, bool)
 t bf_read::ReadBits(void*, int)
 t bf_read::ReadBytes(void*, int)
 t bf_read::ReadFloat()
 t bf_read::ReadLongLong()
 t bf_read::ReadSBitLong(int)
 t bf_read::ReadString(char*, int, bool, int*)
 t bf_read::ReadUBitLongNoInline(int)
 t bf_read::ReadUBitVarInternal(int)
 t bf_read::ReadVarInt32()
 t bf_read::ReadVarInt64()
 t bf_read::ReadWString(wchar_t*, int, bool, int*)
 t bf_read::Reset()
 t bf_read::SetAssertOnOverflow(bool)
 t bf_read::SetDebugName(char const*)
 t bf_read::SetOverflowFlag()
 t bf_read::StartReading(void const*, int, int, int)
 t bf_read::bf_read()
 t bf_read::bf_read(char const*, void const*, int, int)
 t bf_read::bf_read(void const*, int, int)
 t bf_write::ByteSizeSignedVarInt32(int)
 t bf_write::ByteSizeSignedVarInt64(long)
 t bf_write::ByteSizeVarInt32(unsigned int)
 t bf_write::ByteSizeVarInt64(unsigned long)
 t bf_write::GetAssertOnOverflow() const
 t bf_write::GetDebugName()
 t bf_write::Reset()
 t bf_write::SeekToBit(int)
 t bf_write::SetAssertOnOverflow(bool)
 t bf_write::SetDebugName(char const*)
 t bf_write::StartWriting(void*, int, int, int)
 t bf_write::WriteBitAngle(float, int)
 t bf_write::WriteBitLong(unsigned int, int, bool)
 t bf_write::WriteBitNormalizedFloat(float, int)
 t bf_write::WriteBits(void const*, int)
 t bf_write::WriteBits(void const*, int) [clone .part.0]
 t bf_write::WriteBitsFromBuffer(bf_read*, int)
 t bf_write::WriteBytes(void const*, int)
 t bf_write::WriteFloat(float)
 t bf_write::WriteLongLong(long)
 t bf_write::WriteSBitLong(int, int)
 t bf_write::WriteSignedVarInt32(int)
 t bf_write::WriteSignedVarInt64(long)
 t bf_write::WriteString(char const*)
 t bf_write::WriteString(wchar_t const*)
 t bf_write::WriteVarInt32(unsigned int)
 t bf_write::WriteVarInt64(unsigned long)
 t bf_write::bf_write()
 t bf_write::bf_write(char const*, void*, int, int)
 t bf_write::bf_write(void*, int, int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ApplicationInfo>(unsigned int, unsigned int, CVRMsg_ApplicationInfo&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ApplicationManifestResponse>(unsigned int, unsigned int, CVRMsg_ApplicationManifestResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CancelApplicationLaunchResponse>(unsigned int, unsigned int, CVRMsg_CancelApplicationLaunchResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ChangeAppTypeResponse>(unsigned int, unsigned int, CVRMsg_ChangeAppTypeResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ClientMailbox_GetNextMessageResponse>(unsigned int, unsigned int, CVRMsg_ClientMailbox_GetNextMessageResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ClientMailbox_RegisterMailboxResponse>(unsigned int, unsigned int, CVRMsg_ClientMailbox_RegisterMailboxResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ClientMailbox_SendMailboxMessageResponse>(unsigned int, unsigned int, CVRMsg_ClientMailbox_SendMailboxMessageResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ClientMailbox_UnregisterMailboxResponse>(unsigned int, unsigned int, CVRMsg_ClientMailbox_UnregisterMailboxResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorConnectResponse>(unsigned int, unsigned int, CVRMsg_CompositorConnectResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorGetScreenshotPropertyFilenameResponse>(unsigned int, unsigned int, CVRMsg_CompositorGetScreenshotPropertyFilenameResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorGetScreenshotPropertyTypeResponse>(unsigned int, unsigned int, CVRMsg_CompositorGetScreenshotPropertyTypeResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorHookScreenshotResponse>(unsigned int, unsigned int, CVRMsg_CompositorHookScreenshotResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorNewSharedBufferResponse>(unsigned int, unsigned int, CVRMsg_CompositorNewSharedBufferResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorNewSharedImageResponse>(unsigned int, unsigned int, CVRMsg_CompositorNewSharedImageResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorNewSharedSemaphoreResponse>(unsigned int, unsigned int, CVRMsg_CompositorNewSharedSemaphoreResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorRefSharedResourceResponse>(unsigned int, unsigned int, CVRMsg_CompositorRefSharedResourceResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorRequestScreenshotResponse>(unsigned int, unsigned int, CVRMsg_CompositorRequestScreenshotResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorSubmitScreenshotResponse>(unsigned int, unsigned int, CVRMsg_CompositorSubmitScreenshotResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorTakeStereoScreenshotResponse>(unsigned int, unsigned int, CVRMsg_CompositorTakeStereoScreenshotResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorUnrefSharedResourceResponse>(unsigned int, unsigned int, CVRMsg_CompositorUnrefSharedResourceResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CompositorUpdateScreenshotProgressResponse>(unsigned int, unsigned int, CVRMsg_CompositorUpdateScreenshotProgressResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ConnectResponse>(unsigned int, unsigned int, CVRMsg_ConnectResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_CreateSwapTextureSetResponse>(unsigned int, unsigned int, CVRMsg_CreateSwapTextureSetResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_DriverDebugResponse>(unsigned int, unsigned int, CVRMsg_DriverDebugResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_GetApplicationLaunchArgumentsResponse>(unsigned int, unsigned int, CVRMsg_GetApplicationLaunchArgumentsResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_GetDisplayInfoResponse>(unsigned int, unsigned int, CVRMsg_GetDisplayInfoResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_GetDriverDetailResponse>(unsigned int, unsigned int, CVRMsg_GetDriverDetailResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_GetDriverInfoResponse>(unsigned int, unsigned int, CVRMsg_GetDriverInfoResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Input_GetActionBindingsResponse>(unsigned int, unsigned int, CVRMsg_Input_GetActionBindingsResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Input_SetActionManifestPathResponse>(unsigned int, unsigned int, CVRMsg_Input_SetActionManifestPathResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_LaunchApplicationForMimeTypeResponse>(unsigned int, unsigned int, CVRMsg_LaunchApplicationForMimeTypeResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_LaunchApplicationResponse>(unsigned int, unsigned int, CVRMsg_LaunchApplicationResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_LaunchInternalProcessResponse>(unsigned int, unsigned int, CVRMsg_LaunchInternalProcessResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_LaunchTemplateApplicationResponse>(unsigned int, unsigned int, CVRMsg_LaunchTemplateApplicationResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Path_HandleToStringResponse>(unsigned int, unsigned int, CVRMsg_Path_HandleToStringResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Path_StringToHandleResponse>(unsigned int, unsigned int, CVRMsg_Path_StringToHandleResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_PerformApplicationPrelaunchCheckResponse>(unsigned int, unsigned int, CVRMsg_PerformApplicationPrelaunchCheckResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_QuitProcessResponse>(unsigned int, unsigned int, CVRMsg_QuitProcessResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_SetApplicationOptionsResponse>(unsigned int, unsigned int, CVRMsg_SetApplicationOptionsResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_SetApplicationProcessIdResponse>(unsigned int, unsigned int, CVRMsg_SetApplicationProcessIdResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_SetDefaultApplicationForMimeTypeResponse>(unsigned int, unsigned int, CVRMsg_SetDefaultApplicationForMimeTypeResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_SetMasterProcessResponse>(unsigned int, unsigned int, CVRMsg_SetMasterProcessResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_SetMasterProcessRestartHintResponse>(unsigned int, unsigned int, CVRMsg_SetMasterProcessRestartHintResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Settings_GetBool_Response>(unsigned int, unsigned int, CVRMsg_Settings_GetBool_Response&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Settings_GetNumeric_Response>(unsigned int, unsigned int, CVRMsg_Settings_GetNumeric_Response&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Settings_GetString_Response>(unsigned int, unsigned int, CVRMsg_Settings_GetString_Response&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Settings_GetValueType_Response>(unsigned int, unsigned int, CVRMsg_Settings_GetValueType_Response&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_Settings_SetValue_Response>(unsigned int, unsigned int, CVRMsg_Settings_SetValue_Response&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ShouldKillTheaterPancakeProcessResponse>(unsigned int, unsigned int, CVRMsg_ShouldKillTheaterPancakeProcessResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_ShutdownSystemResponse>(unsigned int, unsigned int, CVRMsg_ShutdownSystemResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_EnableResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_EnableResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_GetDistortionResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_GetDistortionResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_GetFormatDimensionsResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_GetFormatDimensionsResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_GetFrameBoundsResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_GetFrameBoundsResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_GetIntrinsicsResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_GetIntrinsicsResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_GetProjectionResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_GetProjectionResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_GetVideoStreamFormatResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_GetVideoStreamFormatResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_IsVideoStreamActiveResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_IsVideoStreamActiveResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_PauseVideoStreamResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_PauseVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_ResumeVideoStreamResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_ResumeVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_SetAutoExposureResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_SetAutoExposureResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_SetCompatibilityModeResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_SetCompatibilityModeResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_SetVideoStreamFormatResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_SetVideoStreamFormatResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_StartVideoStreamResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_StartVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_TrackedCamera_StopVideoStreamResponse>(unsigned int, unsigned int, CVRMsg_TrackedCamera_StopVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_UpdateChaperoneUniverseResponse>(unsigned int, unsigned int, CVRMsg_UpdateChaperoneUniverseResponse&, unsigned int)
 t bool CIPCPipe::ReceiveProtobufMessage<CVRMsg_WritePropertyDataToFileResponse>(unsigned int, unsigned int, CVRMsg_WritePropertyDataToFileResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessage<CVRMsg_DriverDebugRequest>(unsigned int, unsigned int, CVRMsg_DriverDebugRequest const&)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CancelApplicationLaunch, CVRMsg_CancelApplicationLaunchResponse>(unsigned int, CVRMsg_CancelApplicationLaunch const&, unsigned int, CVRMsg_CancelApplicationLaunchResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_ChangeAppType, CVRMsg_ChangeAppTypeResponse>(unsigned int, CVRMsg_ChangeAppType const&, unsigned int, CVRMsg_ChangeAppTypeResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_ClientMailbox_SendMailboxMessage, CVRMsg_ClientMailbox_SendMailboxMessageResponse>(unsigned int, CVRMsg_ClientMailbox_SendMailboxMessage const&, unsigned int, CVRMsg_ClientMailbox_SendMailboxMessageResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_ClientMailbox_UnregisterMailbox, CVRMsg_ClientMailbox_UnregisterMailboxResponse>(unsigned int, CVRMsg_ClientMailbox_UnregisterMailbox const&, unsigned int, CVRMsg_ClientMailbox_UnregisterMailboxResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorConnect, CVRMsg_CompositorConnectResponse>(unsigned int, CVRMsg_CompositorConnect const&, unsigned int, CVRMsg_CompositorConnectResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorGetScreenshotPropertyFilename, CVRMsg_CompositorGetScreenshotPropertyFilenameResponse>(unsigned int, CVRMsg_CompositorGetScreenshotPropertyFilename const&, unsigned int, CVRMsg_CompositorGetScreenshotPropertyFilenameResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorGetScreenshotPropertyType, CVRMsg_CompositorGetScreenshotPropertyTypeResponse>(unsigned int, CVRMsg_CompositorGetScreenshotPropertyType const&, unsigned int, CVRMsg_CompositorGetScreenshotPropertyTypeResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorHookScreenshot, CVRMsg_CompositorHookScreenshotResponse>(unsigned int, CVRMsg_CompositorHookScreenshot const&, unsigned int, CVRMsg_CompositorHookScreenshotResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorNewSharedBuffer, CVRMsg_CompositorNewSharedBufferResponse>(unsigned int, CVRMsg_CompositorNewSharedBuffer const&, unsigned int, CVRMsg_CompositorNewSharedBufferResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorNewSharedImage, CVRMsg_CompositorNewSharedImageResponse>(unsigned int, CVRMsg_CompositorNewSharedImage const&, unsigned int, CVRMsg_CompositorNewSharedImageResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorRefSharedResource, CVRMsg_CompositorRefSharedResourceResponse>(unsigned int, CVRMsg_CompositorRefSharedResource const&, unsigned int, CVRMsg_CompositorRefSharedResourceResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorRequestScreenshot, CVRMsg_CompositorRequestScreenshotResponse>(unsigned int, CVRMsg_CompositorRequestScreenshot const&, unsigned int, CVRMsg_CompositorRequestScreenshotResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorSubmitScreenshot, CVRMsg_CompositorSubmitScreenshotResponse>(unsigned int, CVRMsg_CompositorSubmitScreenshot const&, unsigned int, CVRMsg_CompositorSubmitScreenshotResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorTakeStereoScreenshot, CVRMsg_CompositorTakeStereoScreenshotResponse>(unsigned int, CVRMsg_CompositorTakeStereoScreenshot const&, unsigned int, CVRMsg_CompositorTakeStereoScreenshotResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorUnrefSharedResource, CVRMsg_CompositorUnrefSharedResourceResponse>(unsigned int, CVRMsg_CompositorUnrefSharedResource const&, unsigned int, CVRMsg_CompositorUnrefSharedResourceResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CompositorUpdateScreenshotProgress, CVRMsg_CompositorUpdateScreenshotProgressResponse>(unsigned int, CVRMsg_CompositorUpdateScreenshotProgress const&, unsigned int, CVRMsg_CompositorUpdateScreenshotProgressResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_CreateSwapTextureSet, CVRMsg_CreateSwapTextureSetResponse>(unsigned int, CVRMsg_CreateSwapTextureSet const&, unsigned int, CVRMsg_CreateSwapTextureSetResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_GetApplicationInfo, CVRMsg_ApplicationInfo>(unsigned int, CVRMsg_GetApplicationInfo const&, unsigned int, CVRMsg_ApplicationInfo&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_GetApplicationLaunchArguments, CVRMsg_GetApplicationLaunchArgumentsResponse>(unsigned int, CVRMsg_GetApplicationLaunchArguments const&, unsigned int, CVRMsg_GetApplicationLaunchArgumentsResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_GetDriverDetail, CVRMsg_GetDriverDetailResponse>(unsigned int, CVRMsg_GetDriverDetail const&, unsigned int, CVRMsg_GetDriverDetailResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Input_SetActionManifestPath, CVRMsg_Input_SetActionManifestPathResponse>(unsigned int, CVRMsg_Input_SetActionManifestPath const&, unsigned int, CVRMsg_Input_SetActionManifestPathResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_LaunchApplicationForMimeType, CVRMsg_LaunchApplicationForMimeTypeResponse>(unsigned int, CVRMsg_LaunchApplicationForMimeType const&, unsigned int, CVRMsg_LaunchApplicationForMimeTypeResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_LaunchInternalProcess, CVRMsg_LaunchInternalProcessResponse>(unsigned int, CVRMsg_LaunchInternalProcess const&, unsigned int, CVRMsg_LaunchInternalProcessResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_LaunchTemplateApplication, CVRMsg_LaunchTemplateApplicationResponse>(unsigned int, CVRMsg_LaunchTemplateApplication const&, unsigned int, CVRMsg_LaunchTemplateApplicationResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Path_HandleToString, CVRMsg_Path_HandleToStringResponse>(unsigned int, CVRMsg_Path_HandleToString const&, unsigned int, CVRMsg_Path_HandleToStringResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Path_StringToHandle, CVRMsg_Path_StringToHandleResponse>(unsigned int, CVRMsg_Path_StringToHandle const&, unsigned int, CVRMsg_Path_StringToHandleResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_PerformApplicationPrelaunchCheck, CVRMsg_PerformApplicationPrelaunchCheckResponse>(unsigned int, CVRMsg_PerformApplicationPrelaunchCheck const&, unsigned int, CVRMsg_PerformApplicationPrelaunchCheckResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_SetApplicationOptions, CVRMsg_SetApplicationOptionsResponse>(unsigned int, CVRMsg_SetApplicationOptions const&, unsigned int, CVRMsg_SetApplicationOptionsResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_SetApplicationProcessId, CVRMsg_SetApplicationProcessIdResponse>(unsigned int, CVRMsg_SetApplicationProcessId const&, unsigned int, CVRMsg_SetApplicationProcessIdResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_SetDefaultApplicationForMimeType, CVRMsg_SetDefaultApplicationForMimeTypeResponse>(unsigned int, CVRMsg_SetDefaultApplicationForMimeType const&, unsigned int, CVRMsg_SetDefaultApplicationForMimeTypeResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_SetMasterProcess, CVRMsg_SetMasterProcessResponse>(unsigned int, CVRMsg_SetMasterProcess const&, unsigned int, CVRMsg_SetMasterProcessResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_SetMasterProcessRestartHint, CVRMsg_SetMasterProcessRestartHintResponse>(unsigned int, CVRMsg_SetMasterProcessRestartHint const&, unsigned int, CVRMsg_SetMasterProcessRestartHintResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_GetBool, CVRMsg_Settings_GetBool_Response>(unsigned int, CVRMsg_Settings_GetBool const&, unsigned int, CVRMsg_Settings_GetBool_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_GetNumeric, CVRMsg_Settings_GetNumeric_Response>(unsigned int, CVRMsg_Settings_GetNumeric const&, unsigned int, CVRMsg_Settings_GetNumeric_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_GetString, CVRMsg_Settings_GetString_Response>(unsigned int, CVRMsg_Settings_GetString const&, unsigned int, CVRMsg_Settings_GetString_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_GetValueType, CVRMsg_Settings_GetValueType_Response>(unsigned int, CVRMsg_Settings_GetValueType const&, unsigned int, CVRMsg_Settings_GetValueType_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_RemoveKeyInSection, CVRMsg_Settings_SetValue_Response>(unsigned int, CVRMsg_Settings_RemoveKeyInSection const&, unsigned int, CVRMsg_Settings_SetValue_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_RemoveSection, CVRMsg_Settings_SetValue_Response>(unsigned int, CVRMsg_Settings_RemoveSection const&, unsigned int, CVRMsg_Settings_SetValue_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_SetBool, CVRMsg_Settings_SetValue_Response>(unsigned int, CVRMsg_Settings_SetBool const&, unsigned int, CVRMsg_Settings_SetValue_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_SetNumeric, CVRMsg_Settings_SetValue_Response>(unsigned int, CVRMsg_Settings_SetNumeric const&, unsigned int, CVRMsg_Settings_SetValue_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_Settings_SetString, CVRMsg_Settings_SetValue_Response>(unsigned int, CVRMsg_Settings_SetString const&, unsigned int, CVRMsg_Settings_SetValue_Response&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_ShouldKillTheaterPancakeProcess, CVRMsg_ShouldKillTheaterPancakeProcessResponse>(unsigned int, CVRMsg_ShouldKillTheaterPancakeProcess const&, unsigned int, CVRMsg_ShouldKillTheaterPancakeProcessResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_ShutdownSystem, CVRMsg_ShutdownSystemResponse>(unsigned int, CVRMsg_ShutdownSystem const&, unsigned int, CVRMsg_ShutdownSystemResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_AcquireVideoStreamingService, CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse>(unsigned int, CVRMsg_TrackedCamera_AcquireVideoStreamingService const&, unsigned int, CVRMsg_TrackedCamera_AcquireVideoStreamingServiceResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_Enable, CVRMsg_TrackedCamera_EnableResponse>(unsigned int, CVRMsg_TrackedCamera_Enable const&, unsigned int, CVRMsg_TrackedCamera_EnableResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_GetFormatDimensions, CVRMsg_TrackedCamera_GetFormatDimensionsResponse>(unsigned int, CVRMsg_TrackedCamera_GetFormatDimensions const&, unsigned int, CVRMsg_TrackedCamera_GetFormatDimensionsResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_GetFrameBounds, CVRMsg_TrackedCamera_GetFrameBoundsResponse>(unsigned int, CVRMsg_TrackedCamera_GetFrameBounds const&, unsigned int, CVRMsg_TrackedCamera_GetFrameBoundsResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_GetProjection, CVRMsg_TrackedCamera_GetProjectionResponse>(unsigned int, CVRMsg_TrackedCamera_GetProjection const&, unsigned int, CVRMsg_TrackedCamera_GetProjectionResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_GetVideoStreamFormat, CVRMsg_TrackedCamera_GetVideoStreamFormatResponse>(unsigned int, CVRMsg_TrackedCamera_GetVideoStreamFormat const&, unsigned int, CVRMsg_TrackedCamera_GetVideoStreamFormatResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_IsVideoStreamActive, CVRMsg_TrackedCamera_IsVideoStreamActiveResponse>(unsigned int, CVRMsg_TrackedCamera_IsVideoStreamActive const&, unsigned int, CVRMsg_TrackedCamera_IsVideoStreamActiveResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_PauseVideoStream, CVRMsg_TrackedCamera_PauseVideoStreamResponse>(unsigned int, CVRMsg_TrackedCamera_PauseVideoStream const&, unsigned int, CVRMsg_TrackedCamera_PauseVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_ReleaseVideoStreamingService, CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse>(unsigned int, CVRMsg_TrackedCamera_ReleaseVideoStreamingService const&, unsigned int, CVRMsg_TrackedCamera_ReleaseVideoStreamingServiceResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_ResumeVideoStream, CVRMsg_TrackedCamera_ResumeVideoStreamResponse>(unsigned int, CVRMsg_TrackedCamera_ResumeVideoStream const&, unsigned int, CVRMsg_TrackedCamera_ResumeVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_SetAutoExposure, CVRMsg_TrackedCamera_SetAutoExposureResponse>(unsigned int, CVRMsg_TrackedCamera_SetAutoExposure const&, unsigned int, CVRMsg_TrackedCamera_SetAutoExposureResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_SetCompatibilityMode, CVRMsg_TrackedCamera_SetCompatibilityModeResponse>(unsigned int, CVRMsg_TrackedCamera_SetCompatibilityMode const&, unsigned int, CVRMsg_TrackedCamera_SetCompatibilityModeResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_SetVideoStreamFormat, CVRMsg_TrackedCamera_SetVideoStreamFormatResponse>(unsigned int, CVRMsg_TrackedCamera_SetVideoStreamFormat const&, unsigned int, CVRMsg_TrackedCamera_SetVideoStreamFormatResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_StartVideoStream, CVRMsg_TrackedCamera_StartVideoStreamResponse>(unsigned int, CVRMsg_TrackedCamera_StartVideoStream const&, unsigned int, CVRMsg_TrackedCamera_StartVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_TrackedCamera_StopVideoStream, CVRMsg_TrackedCamera_StopVideoStreamResponse>(unsigned int, CVRMsg_TrackedCamera_StopVideoStream const&, unsigned int, CVRMsg_TrackedCamera_StopVideoStreamResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_UpdateChaperoneUniverse, CVRMsg_UpdateChaperoneUniverseResponse>(unsigned int, CVRMsg_UpdateChaperoneUniverse const&, unsigned int, CVRMsg_UpdateChaperoneUniverseResponse&, unsigned int)
 t bool CIPCPipe::SendProtobufMessageAndWaitForResponse<CVRMsg_WritePropertyDataToFile, CVRMsg_WritePropertyDataToFileResponse>(unsigned int, CVRMsg_WritePropertyDataToFile const&, unsigned int, CVRMsg_WritePropertyDataToFileResponse&, unsigned int)
 t bool CSettingsValue::Set<bool>(bool const&)
 t bool CSettingsValue::Set<bool>(bool const&) [clone .cold]
 t bool CSettingsValue::Set<double>(double const&)
 t bool CSettingsValue::Set<std::string>(std::string const&)
 t bool const& CSettingsValue::Get<bool>() const
 t bool glm::all<4, (glm::qualifier)0>(glm::vec<4, bool, (glm::qualifier)0> const&)
 t bool std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<false, false>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, false, false>&)
 t bool std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<false, true>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, false, true>&)
 t bool std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<true, false>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, true, false>&)
 t bool std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<true, true>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, true, true>&)
 t bool std::__detail::__regex_algo_impl<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, char, std::regex_traits<char>, (std::__detail::_RegexExecutorPolicy)0, false>(__gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, std::match_results<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > >&, std::basic_regex<char, std::regex_traits<char> > const&, std::regex_constants::match_flag_type)
 t bool std::__do_str_codecvt<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, char, std::codecvt<wchar_t, char, __mbstate_t>, __mbstate_t, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const>(char const*, char const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&, std::codecvt<wchar_t, char, __mbstate_t> const&, __mbstate_t&, unsigned long&, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const)
 t bool std::__do_str_codecvt<std::string, wchar_t, std::codecvt<wchar_t, char, __mbstate_t>, __mbstate_t, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const>(wchar_t const*, wchar_t const*, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&, __mbstate_t&, unsigned long&, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const)
 t bool std::binary_search<__gnu_cxx::__normal_iterator<char const*, std::vector<char, std::allocator<char> > >, char>(__gnu_cxx::__normal_iterator<char const*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::vector<char, std::allocator<char> > >, char const&)
 t bool std::operator< <char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t bool std::operator< <std::string, int>(std::pair<std::string, int> const&, std::pair<std::string, int> const&)
 t bool std::operator==<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
 t bool std::operator==<std::string, std::allocator<std::string> >(std::vector<std::string, std::allocator<std::string> > const&, std::vector<std::string, std::allocator<std::string> > const&) [clone .isra.0]
 t cIntToHexDigit(int)
 t char const** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<char const*>(char const* const*, char const* const*, char const**)
 t char& std::vector<char, std::allocator<char> >::emplace_back<char>(char&&) [clone .isra.0]
 t char* std::string::_S_construct<__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, std::allocator<char> const&, std::forward_iterator_tag) [clone .isra.0]
 t char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .isra.0]
 t char* std::string::_S_construct<char const*>(char const*, char const*, std::allocator<char> const&, std::forward_iterator_tag) [clone .part.0]
 t char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag) [clone .isra.19]
 t char* std::string::_S_construct<char*>(char*, char*, std::allocator<char> const&, std::forward_iterator_tag) [clone .part.0]
 t classify_object_over_fdes
 t classify_object_over_fdes.cold
 t crc32(unsigned int, void const*, unsigned long)
 t deregister_tm_clones
 t double const& CSettingsManager::GetValue<double>(char const*, char const*, vr::EVRSettingsError*)
 t double const& CSettingsValue::Get<double>() const
 t execute_cfa_program
 t execute_cfa_program.cold
 t execute_stack_op
 t execute_stack_op.cold
 t facet::AppendToNextChain(void const*&, void const*)
 t facet::AppendToNextChain(void*&, void*)
 t facet::BytesPerCompressedBlock(VkFormat)
 t facet::BytesPerTexel(VkFormat)
 t facet::BytesRequired(VkFormat, unsigned int, unsigned int)
 t facet::BytesRequired(VkFormat, unsigned int, unsigned int, unsigned int)
 t facet::CCompositionClient::AcquireCompositorSlot(unsigned int)
 t facet::CCompositionClient::AcquireCompositorSlot(unsigned int) [clone .cold]
 t facet::CCompositionClient::AcquireImage(facet::CCompositionClient::CSwapchain*, unsigned int)
 t facet::CCompositionClient::AcquireImage(facet::CCompositionClient::CSwapchain*, unsigned int) [clone .cold]
 t facet::CCompositionClient::BeginFrameRendering(unsigned long, unsigned long)
 t facet::CCompositionClient::BeginFrameRendering(unsigned long, unsigned long) [clone .cold]
 t facet::CCompositionClient::CCompositionClient()
 t facet::CCompositionClient::CCompositionClient() [clone .cold]
 t facet::CCompositionClient::CFrameState::AddLayerProjection(facet::CCompositionClient::FrameProjectionLayerData_t const&)
 t facet::CCompositionClient::CFrameState::AddLayerProjection(facet::CCompositionClient::FrameProjectionLayerData_t const&) [clone .cold]
 t facet::CCompositionClient::CFrameState::AddLayerQuad(facet::CCompositionClient::FrameQuadLayerData_t const&)
 t facet::CCompositionClient::CFrameState::AddLayerQuad(facet::CCompositionClient::FrameQuadLayerData_t const&) [clone .cold]
 t facet::CCompositionClient::CFrameState::BeginRendering()
 t facet::CCompositionClient::CFrameState::BeginRendering() [clone .cold]
 t facet::CCompositionClient::CFrameState::CFrameState(facet::CCompositionClient*)
 t facet::CCompositionClient::CFrameState::Discard()
 t facet::CCompositionClient::CFrameState::Discard() [clone .cold]
 t facet::CCompositionClient::CFrameState::End()
 t facet::CCompositionClient::CFrameState::End() [clone .cold]
 t facet::CCompositionClient::CFrameState::EndRendering(IPC::TSharedHandleBase<int, -1>)
 t facet::CCompositionClient::CFrameState::EndRendering(IPC::TSharedHandleBase<int, -1>) [clone .cold]
 t facet::CCompositionClient::CFrameState::FrameIndex() const
 t facet::CCompositionClient::CFrameState::IsDiscarded() const
 t facet::CCompositionClient::CFrameState::IsValid() const
 t facet::CCompositionClient::CFrameState::LayerCount() const
 t facet::CCompositionClient::CFrameState::Start()
 t facet::CCompositionClient::CFrameState::Start() [clone .cold]
 t facet::CCompositionClient::CFrameState::Submit(unsigned long)
 t facet::CCompositionClient::CFrameState::Submit(unsigned long) [clone .cold]
 t facet::CCompositionClient::CFrameState::Wait(facet::CCompositionClient::FrameWaitResult_t&, facet::IFramerateGovernor*)
 t facet::CCompositionClient::CFrameState::Wait(facet::CCompositionClient::FrameWaitResult_t&, facet::IFramerateGovernor*) [clone .cold]
 t facet::CCompositionClient::CSwapchain::AcquireCompositorSlot()
 t facet::CCompositionClient::CSwapchain::AcquireCompositorSlot() [clone .cold]
 t facet::CCompositionClient::CSwapchain::CImage::GetImage() const
 t facet::CCompositionClient::CSwapchain::CImage::GetInteropImage() const
 t facet::CCompositionClient::CSwapchain::CImage::SetState(facet::CCompositionClient::CSwapchain::CImage::State_t)
 t facet::CCompositionClient::CSwapchain::CImage::Transition(CVkCommandBuffer*, facet::CCompositionClient::CSwapchain::TransitionType_t, unsigned int, unsigned int)
 t facet::CCompositionClient::CSwapchain::CSwapchain(facet::CCompositionClient*, CVkDevice*, char const*)
 t facet::CCompositionClient::CSwapchain::CSwapchain(facet::CCompositionClient*, CVkDevice*, char const*) [clone .cold]
 t facet::CCompositionClient::CSwapchain::CreateVulkanResources(facet::CCompositionClient::CreateSwapchainInfo_t const&)
 t facet::CCompositionClient::CSwapchain::CreateVulkanResources(facet::CCompositionClient::CreateSwapchainInfo_t const&) [clone .cold]
 t facet::CCompositionClient::CSwapchain::GetAPIImage() const
 t facet::CCompositionClient::CSwapchain::GetAPIImage(unsigned int) const
 t facet::CCompositionClient::CSwapchain::GetIndices(facet::CCompositionClient::FrameImageData_t const&) const
 t facet::CCompositionClient::CSwapchain::GetInteropImage() const
 t facet::CCompositionClient::CSwapchain::GetInteropImage(unsigned int) const
 t facet::CCompositionClient::CSwapchain::Initialize(facet::CCompositionClient::CreateSwapchainInfo_t const&)
 t facet::CCompositionClient::CSwapchain::IsIdMatch(SwapchainState_t const&)
 t facet::CCompositionClient::CSwapchain::RegisterCompositorResources()
 t facet::CCompositionClient::CSwapchain::RegisterCompositorResources() [clone .cold]
 t facet::CCompositionClient::CSwapchain::Release()
 t facet::CCompositionClient::CSwapchain::ReleaseCompositorSlot()
 t facet::CCompositionClient::CSwapchain::ReleaseCompositorSlot() [clone .part.0]
 t facet::CCompositionClient::CSwapchain::ReleaseCompositorSlot() [clone .part.0] [clone .cold]
 t facet::CCompositionClient::CSwapchain::ReleaseVulkanResources()
 t facet::CCompositionClient::CSwapchain::SetUsageType(facet::CCompositionClient::CSwapchain::UsageType_t)
 t facet::CCompositionClient::CSwapchain::SetUsageType(facet::CCompositionClient::CSwapchain::UsageType_t) [clone .cold]
 t facet::CCompositionClient::CSwapchain::Transition(CVkCommandBuffer*, unsigned int, facet::CCompositionClient::CSwapchain::TransitionType_t)
 t facet::CCompositionClient::CSwapchain::UnregisterCompositorResources()
 t facet::CCompositionClient::CSwapchain::UnregisterCompositorResources() [clone .part.0]
 t facet::CCompositionClient::CSwapchain::UnregisterCompositorResources() [clone .part.0] [clone .cold]
 t facet::CCompositionClient::ConnectToPrism()
 t facet::CCompositionClient::ConnectToPrism() [clone .cold]
 t facet::CCompositionClient::CreateInteropImage(facet::InteropImageData_t const&)
 t facet::CCompositionClient::CreateSwapchain(facet::CCompositionClient::CreateSwapchainInfo_t const&)
 t facet::CCompositionClient::CreateSwapchain(facet::CCompositionClient::CreateSwapchainInfo_t const&) [clone .cold]
 t facet::CCompositionClient::CreateVulkanResources()
 t facet::CCompositionClient::CreateVulkanResources() [clone .cold]
 t facet::CCompositionClient::DiscardFrame(unsigned long)
 t facet::CCompositionClient::DiscardFrame(unsigned long) [clone .cold]
 t facet::CCompositionClient::DiscardFrameLocked(unsigned long)
 t facet::CCompositionClient::DiscardFrameLocked(unsigned long) [clone .cold]
 t facet::CCompositionClient::DoMaintenance()
 t facet::CCompositionClient::DoMaintenance() [clone .cold]
 t facet::CCompositionClient::EndFrameRendering(unsigned long, IPC::TSharedHandleBase<int, -1>)
 t facet::CCompositionClient::EndFrameRendering(unsigned long, IPC::TSharedHandleBase<int, -1>) [clone .cold]
 t facet::CCompositionClient::EndFrameRenderingLocked(unsigned long, IPC::TSharedHandleBase<int, -1>)
 t facet::CCompositionClient::EndFrameRenderingLocked(unsigned long, IPC::TSharedHandleBase<int, -1>) [clone .cold]
 t facet::CCompositionClient::EndSession()
 t facet::CCompositionClient::EndSession() [clone .cold]
 t facet::CCompositionClient::ForceAcquireImage(facet::CCompositionClient::SwapchainImage_t const&)
 t facet::CCompositionClient::ForceAcquireImage(facet::CCompositionClient::SwapchainImage_t const&) [clone .cold]
 t facet::CCompositionClient::GetCompositorBaseTicks() const
 t facet::CCompositionClient::GetCompositorBaseTicks() const [clone .cold]
 t facet::CCompositionClient::GetCompositorInitError() const
 t facet::CCompositionClient::GetCompositorInitError() const [clone .cold]
 t facet::CCompositionClient::GetVkFormatFromAPIFormat(long) const
 t facet::CCompositionClient::InitAndConstructCompositionState()
 t facet::CCompositionClient::InitAndConstructCompositionState() [clone .cold]
 t facet::CCompositionClient::InitDevice(facet::InteropAPI_t, facet::InteropDeviceDetails_t const&)
 t facet::CCompositionClient::InitVulkan()
 t facet::CCompositionClient::Initialize()
 t facet::CCompositionClient::IsTextureFormatSupported(long) const
 t facet::CCompositionClient::PrePrismWait(unsigned long)
 t facet::CCompositionClient::PrePrismWait(unsigned long) [clone .cold]
 t facet::CCompositionClient::RegisterCompositorResources()
 t facet::CCompositionClient::RegisterCompositorResources() [clone .cold]
 t facet::CCompositionClient::ReleaseCompositorSlot()
 t facet::CCompositionClient::ReleaseCompositorSlot() [clone .cold]
 t facet::CCompositionClient::ReleaseImage(facet::CCompositionClient::CSwapchain*, unsigned int)
 t facet::CCompositionClient::ReleaseImage(facet::CCompositionClient::CSwapchain*, unsigned int) [clone .cold]
 t facet::CCompositionClient::ReleaseVulkanResources()
 t facet::CCompositionClient::ReleaseVulkanResources() [clone .cold]
 t facet::CCompositionClient::SetSyncTexture(IPC::TSharedHandleBase<int, -1>)
 t facet::CCompositionClient::SetSyncTexture(IPC::TSharedHandleBase<int, -1>) [clone .cold]
 t facet::CCompositionClient::SetUndistortParameters(PrismUndistortParameters_t const&)
 t facet::CCompositionClient::SetUndistortParameters(PrismUndistortParameters_t const&) [clone .cold]
 t facet::CCompositionClient::StartSession(unsigned int)
 t facet::CCompositionClient::StartSession(unsigned int) [clone .cold]
 t facet::CCompositionClient::SubmitLayers(unsigned long, unsigned long, unsigned long)
 t facet::CCompositionClient::SubmitLayers(unsigned long, unsigned long, unsigned long) [clone .cold]
 t facet::CCompositionClient::UnregisterCompositorResources()
 t facet::CCompositionClient::UnregisterCompositorResources() [clone .cold]
 t facet::CCompositionClient::WaitFrame(unsigned long, facet::CCompositionClient::FrameWaitResult_t&, facet::IFramerateGovernor*)
 t facet::CCompositionClient::WaitFrame(unsigned long, facet::CCompositionClient::FrameWaitResult_t&, facet::IFramerateGovernor*) [clone .cold]
 t facet::CCompositionClient::WaitImage(facet::CCompositionClient::CSwapchain*, unsigned int, unsigned int)
 t facet::CCompositionClient::WaitImage(facet::CCompositionClient::CSwapchain*, unsigned int, unsigned int) [clone .cold]
 t facet::CCompositionClient::~CCompositionClient()
 t facet::CVkInteropDeviceFactory::CreateInteropDevice(facet::InteropAPI_t)
 t facet::CVkInteropDeviceNull::CreateImage(CVkAllocator*, facet::InteropImageData_t const&)
 t facet::CVkInteropDeviceNull::CreateImage(CVkAllocator*, facet::InteropImageData_t const&) [clone .cold]
 t facet::CVkInteropDeviceNull::GetVkFormatFromAPIFormat(long)
 t facet::CVkInteropDeviceNull::Initialize(facet::InteropDeviceDetails_t)
 t facet::CVkInteropDeviceNull::IsTextureFormatSupported(long)
 t facet::CVkInteropDeviceNull::~CVkInteropDeviceNull()
 t facet::CVkInteropImageNull::AcquireAccess(CVkCommandBuffer*)
 t facet::CVkInteropImageNull::AcquireAccess(unsigned long)
 t facet::CVkInteropImageNull::CVkInteropImageNull(facet::CVkInteropDeviceNull*)
 t facet::CVkInteropImageNull::GetAPIImage()
 t facet::CVkInteropImageNull::GetImage()
 t facet::CVkInteropImageNull::Initialize(CVkAllocator*, facet::InteropImageData_t const&)
 t facet::CVkInteropImageNull::ReleaseAccess(CVkCommandBuffer*)
 t facet::CVkInteropImageNull::ReleaseAccess(std::vector<facet::IVkInteropImage*, std::allocator<facet::IVkInteropImage*> > const&)
 t facet::CVkInteropImageNull::SyncAndSubmit(facet::InteropSyncAndSubmitData_t const&)
 t facet::CVkInteropImageNull::~CVkInteropImageNull()
 t facet::CVkTimestampQueryPool<2u>::Create(CVkDevice*, char const*)
 t facet::CVkTimestampQueryPool<2u>::~CVkTimestampQueryPool()
 t facet::CVkTimestampQueryPoolBase::CmdWriteTimestamp(CVkCommandBuffer*, unsigned int, VkPipelineStageFlagBits)
 t facet::CVkTimestampQueryPoolBase::Initialize(unsigned int)
 t facet::CVkTimestampQueryPoolBase::Release()
 t facet::CVkTimestampQueryPoolBase::ResetAll(unsigned int)
 t facet::CVkTimestampQueryPoolBase::ResetQuery(unsigned int)
 t facet::CVkTimestampQueryPoolBase::ToMs(unsigned long) const
 t facet::CVkTimestampQueryPoolBase::UpdateResults(facet::CVkTimestampQueryPoolBase::WaitBehavior_t, unsigned int, unsigned long*)
 t facet::CVkTimestampQueryPoolBase::~CVkTimestampQueryPoolBase()
 t facet::CopyDeviceId(facet::VkDeviceId_t&, facet::VkDeviceId_t const&)
 t facet::DXGIFormatFromVk(VkFormat)
 t facet::FromIPC(int)
 t facet::GetFlatIndex(SwapchainIndices_t const&)
 t facet::GetFov(glm::mat<4, 4, float, (glm::qualifier)0> const&, float*, float*, float*, float*)
 t facet::GetLUIDFromDeviceId(facet::VkDeviceId_t const&, unsigned long&)
 t facet::GetSrgbFormat(VkFormat)
 t facet::GetVulkanSampleCount(unsigned int)
 t facet::InitDeviceId(facet::VkDeviceId_t&, VkPhysicalDeviceIDProperties const&)
 t facet::IsCompressedFormat(VkFormat)
 t facet::IsDepthFormat(VkFormat)
 t facet::IsDepthOnlyFormat(VkFormat)
 t facet::IsDepthStencilFormat(VkFormat)
 t facet::IsDeviceIdValid(facet::VkDeviceId_t const&)
 t facet::IsInDebugSession()
 t facet::IsSrgbFormat(VkFormat)
 t facet::NumCompressedBlocks(unsigned int, unsigned int)
 t facet::ToIPC(unsigned long)
 t facet::VkFormatFromDXGI(unsigned int, VkFormat*)
 t facet::WaitUntil(double)
 t fde_mixed_encoding_compare
 t fde_mixed_encoding_compare.cold
 t fde_single_encoding_compare
 t fde_single_encoding_compare.cold
 t fde_unencoded_compare
 t frame_downheap
 t frame_dummy
 t frame_heapsort
 t get_cie_encoding
 t gli::dx::dx()
 t gli::gl::gl(gli::gl::profile)
 t gli::load(char const*)
 t gli::load(char const*, unsigned long) [clone .isra.0]
 t gli::storage_linear::level_size(unsigned long) const
 t gli::texture::cache::cache(gli::storage_linear&, gli::format, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
 t gli::texture::texture(gli::target, gli::format, glm::vec<3, int, (glm::qualifier)0> const&, unsigned long, unsigned long, unsigned long, glm::vec<4, gli::swizzle, (glm::qualifier)0> const&)
 t gli::texture::~texture()
 t glm::detail::compute_inverse<4, 4, float, (glm::qualifier)0, false>::call(glm::mat<4, 4, float, (glm::qualifier)0> const&)
 t glm::mat<4, 4, float, (glm::qualifier)0> glm::operator*<float, (glm::qualifier)0>(glm::mat<4, 4, float, (glm::qualifier)0> const&, glm::mat<4, 4, float, (glm::qualifier)0> const&)
 t glm::vec<4, bool, (glm::qualifier)0> glm::equal<4, unsigned int, (glm::qualifier)0>(glm::vec<4, unsigned int, (glm::qualifier)0> const&, glm::vec<4, unsigned int, (glm::qualifier)0> const&)
 t iHexCharToInt(char)
 t init_dwarf_reg_size_table
 t int GetBitCount<bf_read>(bf_read*)
 t int GetBitCount<bf_write>(bf_write*)
 t int* std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<int>(int const*, int const*, int*)
 t int* std::move_backward<int*, int*>(int*, int*, int*)
 t linear_search_fdes
 t linear_search_fdes.cold
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::parse<char const*, 0>(char const*, char const*, std::function<bool (int, nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::parse_event_t, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)>, bool)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>& nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::operator[]<char const>(char const*)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>& std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::emplace_back<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&&) [clone .isra.0]
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>* nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(bool&) [clone .isra.0]
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>* nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(nlohmann::detail::value_t&&)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::basic_json(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::basic_json(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, bool, nlohmann::detail::value_t)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::basic_json(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, bool, nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > const&)#1}::operator()(nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > const&) const [clone .isra.0]
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::dump(int, char, bool, nlohmann::detail::error_handler_t) const
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::json_value::destroy(nlohmann::detail::value_t)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::json_value::json_value(nlohmann::detail::value_t)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::max_size() const
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::operator[](std::string const&)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::operator[](unsigned long) const
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::push_back(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::size() const
 t nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::type_name() const [clone .isra.0]
 t nlohmann::detail::dtoa_impl::format_buffer(char*, int, int, int, int)
 t nlohmann::detail::exception::exception(nlohmann::detail::exception const&)
 t nlohmann::detail::exception::name(std::string const&, int)
 t nlohmann::detail::exception::what() const
 t nlohmann::detail::exception::~exception()
 t nlohmann::detail::input_buffer_adapter::get_character()
 t nlohmann::detail::input_buffer_adapter::~input_buffer_adapter()
 t nlohmann::detail::invalid_iterator::create(int, std::string const&)
 t nlohmann::detail::invalid_iterator::~invalid_iterator()
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, 0>(nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >)
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::find<char const (&) [10]>(char const (&) [10])
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::find<char const (&) [11]>(char const (&) [11])
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::find<char const (&) [6]>(char const (&) [6])
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::find<char const (&) [7]>(char const (&) [7])
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::find<char const (&) [8]>(char const (&) [8])
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::find<char const (&) [9]>(char const (&) [9])
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::set_end()
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const>::key() const
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const>::operator*() const
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const>::operator++() [clone .isra.0]
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const>::operator->() const
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const>::operator==(nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const> const&) const
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const>::set_begin()
 t nlohmann::detail::iter_impl<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const>::set_end()
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::end_array()
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::end_object()
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::key(std::string&)
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::null()
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::parse_error(unsigned long, std::string const&, nlohmann::detail::exception const&) [clone .isra.0]
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::start_array(unsigned long)
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::start_object(unsigned long)
 t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser()
 t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::parse_error(unsigned long, std::string const&, nlohmann::detail::exception const&) [clone .isra.0]
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::get()
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::get_codepoint()
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::get_token_string() const
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::next_byte_in_range(std::initializer_list<int>)
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::scan()
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::scan_number()
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::scan_string()
 t nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::~lexer()
 t nlohmann::detail::other_error::create(int, std::string const&)
 t nlohmann::detail::other_error::~other_error()
 t nlohmann::detail::out_of_range::create(int, std::string const&)
 t nlohmann::detail::out_of_range::~out_of_range()
 t nlohmann::detail::output_string_adapter<char, std::string>::write_character(char)
 t nlohmann::detail::output_string_adapter<char, std::string>::write_characters(char const*, unsigned long)
 t nlohmann::detail::output_string_adapter<char, std::string>::~output_string_adapter()
 t nlohmann::detail::parse_error::create(int, nlohmann::detail::position_t const&, std::string const&)
 t nlohmann::detail::parse_error::~parse_error()
 t nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::exception_message(nlohmann::detail::lexer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::token_type, std::string const&)
 t nlohmann::detail::parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::parse(bool, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t nlohmann::detail::serializer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::dump(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, bool, bool, unsigned int, unsigned int)
 t nlohmann::detail::serializer<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::dump_escaped(std::string const&, bool)
 t nlohmann::detail::type_error::create(int, std::string const&)
 t nlohmann::detail::type_error::~type_error()
 t non-virtual thunk to CHmdSystemLatest::AbortTransition()
 t non-virtual thunk to CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType)
 t non-virtual thunk to CHmdSystemLatest::ForceQuitProcess(unsigned int)
 t non-virtual thunk to CHmdSystemLatest::ForwardLogMessageToServer(unsigned long, char const*, unsigned int, unsigned int, char const*)
 t non-virtual thunk to CHmdSystemLatest::GetAppContainerFilePaths()
 t non-virtual thunk to CHmdSystemLatest::GetApplicationType()
 t non-virtual thunk to CHmdSystemLatest::GetCameraRoomViewVisible()
 t non-virtual thunk to CHmdSystemLatest::GetClientPathContainer()
 t non-virtual thunk to CHmdSystemLatest::GetContainerHandleForDevice(unsigned int)
 t non-virtual thunk to CHmdSystemLatest::GetCurrentProcessAppKey()
 t non-virtual thunk to CHmdSystemLatest::GetDashboardEnabled()
 t non-virtual thunk to CHmdSystemLatest::GetDriverCount()
 t non-virtual thunk to CHmdSystemLatest::GetDriverDisplayCount(char const*)
 t non-virtual thunk to CHmdSystemLatest::GetDriverDisplayId(char const*, unsigned int, char*, unsigned int)
 t non-virtual thunk to CHmdSystemLatest::GetDriverDisplayModelNumber(char const*, char const*, char*, unsigned int)
 t non-virtual thunk to CHmdSystemLatest::GetDriverDisplaySerialNumber(char const*, char const*, char*, unsigned int)
 t non-virtual thunk to CHmdSystemLatest::GetDriverId(unsigned int, char*, unsigned int)
 t non-virtual thunk to CHmdSystemLatest::GetDriverInitError(char const*)
 t non-virtual thunk to CHmdSystemLatest::GetDriverManager()
 t non-virtual thunk to CHmdSystemLatest::GetGraphicsHardwareInfo(GraphicsHardwareInfo_t*)
 t non-virtual thunk to CHmdSystemLatest::GetHeadsetViewAspectRatio()
 t non-virtual thunk to CHmdSystemLatest::GetHeadsetViewBlendRange(float*, float*)
 t non-virtual thunk to CHmdSystemLatest::GetHeadsetViewCropped()
 t non-virtual thunk to CHmdSystemLatest::GetHeadsetViewMode()
 t non-virtual thunk to CHmdSystemLatest::GetHeadsetViewSize(unsigned int*, unsigned int*)
 t non-virtual thunk to CHmdSystemLatest::GetIPCResourceManagerClient()
 t non-virtual thunk to CHmdSystemLatest::GetLegacyInput()
 t non-virtual thunk to CHmdSystemLatest::GetPaths()
 t non-virtual thunk to CHmdSystemLatest::GetPoseAtTime(vr::ETrackingUniverseOrigin, float, unsigned int, vr::TrackedDevicePose_t*)
 t non-virtual thunk to CHmdSystemLatest::GetPredictedPose(vr::ETrackingUniverseOrigin, float, unsigned int, vr::TrackedDevicePose_t*)
 t non-virtual thunk to CHmdSystemLatest::GetProperties()
 t non-virtual thunk to CHmdSystemLatest::GetRawPose(unsigned int, VRTrackingState_Pose_t*)
 t non-virtual thunk to CHmdSystemLatest::GetResourceFullPath(std::string const&, std::string const&)
 t non-virtual thunk to CHmdSystemLatest::GetResourceNames(std::vector<std::string, std::allocator<std::string> >*, std::string const&)
 t non-virtual thunk to CHmdSystemLatest::GetResources()
 t non-virtual thunk to CHmdSystemLatest::GetSettings()
 t non-virtual thunk to CHmdSystemLatest::GetSettingsDirtyCount(char const*)
 t non-virtual thunk to CHmdSystemLatest::GetSystemTimeBaseTicks()
 t non-virtual thunk to CHmdSystemLatest::GetVRInitStartupInfo()
 t non-virtual thunk to CHmdSystemLatest::GetVRMonitorState()
 t non-virtual thunk to CHmdSystemLatest::GetVRMonitorState() [clone .cold]
 t non-virtual thunk to CHmdSystemLatest::GetVRRenderModels()
 t non-virtual thunk to CHmdSystemLatest::GetVRStartupReason()
 t non-virtual thunk to CHmdSystemLatest::GetVRSystem()
 t non-virtual thunk to CHmdSystemLatest::GetWebSharedSecret()
 t non-virtual thunk to CHmdSystemLatest::IsSystemProcess()
 t non-virtual thunk to CHmdSystemLatest::LogMessage(unsigned long, char const*, unsigned int, ELogLevel, char const*)
 t non-virtual thunk to CHmdSystemLatest::OnConsoleClosed(unsigned long)
 t non-virtual thunk to CHmdSystemLatest::OnConsoleOpened(unsigned long)
 t non-virtual thunk to CHmdSystemLatest::OverlayIsFromSceneAppWebUI(unsigned long)
 t non-virtual thunk to CHmdSystemLatest::PostGlobalEvent(vr::VREvent_t const&, unsigned int)
 t non-virtual thunk to CHmdSystemLatest::PostLocalEvent(vr::VREvent_t const&)
 t non-virtual thunk to CHmdSystemLatest::PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t non-virtual thunk to CHmdSystemLatest::PowerOffTrackedDevice(unsigned int)
 t non-virtual thunk to CHmdSystemLatest::QuitProcess(unsigned int)
 t non-virtual thunk to CHmdSystemLatest::ReconnectSubsystemProcesses()
 t non-virtual thunk to CHmdSystemLatest::ReconnectSubsystemProcesses() [clone .cold]
 t non-virtual thunk to CHmdSystemLatest::RegisterExternalWebRoot(char const*)
 t non-virtual thunk to CHmdSystemLatest::SendWebMessage(std::string const&, Json::Value const&)
 t non-virtual thunk to CHmdSystemLatest::SendWebMessage(std::string const&, std::string const&)
 t non-virtual thunk to CHmdSystemLatest::ServerPipeLost()
 t non-virtual thunk to CHmdSystemLatest::SetCameraRoomViewVisible(bool)
 t non-virtual thunk to CHmdSystemLatest::SetDashboardEnabled(bool)
 t non-virtual thunk to CHmdSystemLatest::SetHeadsetViewBlendRange(float, float)
 t non-virtual thunk to CHmdSystemLatest::SetHeadsetViewCropped(bool)
 t non-virtual thunk to CHmdSystemLatest::SetHeadsetViewMode(vr::HeadsetViewMode_t)
 t non-virtual thunk to CHmdSystemLatest::SetHeadsetViewSize(unsigned int, unsigned int)
 t non-virtual thunk to CHmdSystemLatest::SetMasterProcessRestartHint()
 t non-virtual thunk to CHmdSystemLatest::SetMasterProcessToThis()
 t non-virtual thunk to CHmdSystemLatest::SetVRMonitorState(vr::EVRState)
 t non-virtual thunk to CHmdSystemLatest::SetVRMonitorState(vr::EVRState) [clone .cold]
 t non-virtual thunk to CHmdSystemLatest::ShouldDisableWatchdogs()
 t non-virtual thunk to CHmdSystemLatest::ShouldShowTrackerUI()
 t non-virtual thunk to CHmdSystemLatest::ShowDevTools(int)
 t non-virtual thunk to CHmdSystemLatest::ShowUI(vr::EShowUIType)
 t non-virtual thunk to CHmdSystemLatest::Shutdown(bool)
 t non-virtual thunk to CHmdSystemLatest::ShutdownSystem()
 t non-virtual thunk to CHmdSystemLatest::StartAutolaunchOverlays()
 t non-virtual thunk to CHmdSystemLatest::StartHomeApp()
 t non-virtual thunk to CHmdSystemLatest::StartSecondaryComponents()
 t non-virtual thunk to CHmdSystemLatest::SubmitTextureSetInfo(unsigned int, unsigned int, unsigned long const*, vr::Texture_t const*, vr::Texture_t const*, vr::VRTextureBounds_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t non-virtual thunk to CHmdSystemLatest::ThisProcessIsCompositor()
 t non-virtual thunk to CHmdSystemLatest::TopologyChanged()
 t non-virtual thunk to CHmdSystemLatest::TransformPoseToUniverse(vr::TrackedDevicePose_t*, vr::TrackedDevicePose_t const&, vr::ETrackingUniverseOrigin)
 t non-virtual thunk to CHmdSystemLatest::WatchdogWakeUp(vr::ETrackedDeviceClass)
 t non-virtual thunk to CHmdSystemLatest::WritePropertyDataToFile(char const*)
 t non-virtual thunk to CPathManager_Server::AddAliasPath(unsigned long, unsigned long, unsigned long)
 t non-virtual thunk to CPathManager_Server::AddAliasPathListener(vr::IAliasPathListener*)
 t non-virtual thunk to CPathManager_Server::AddAliasRoot(std::string const&)
 t non-virtual thunk to CPathManager_Server::AliasRootAndLeafToFullPath(unsigned long, unsigned long)
 t non-virtual thunk to CPathManager_Server::GetAllPathHandles() const
 t non-virtual thunk to CPathManager_Server::PropertyIDToPathHandle(unsigned int)
 t non-virtual thunk to CPropertyManager::CreateFixedSizeContainerForRead(unsigned long*, void const*, unsigned int)
 t non-virtual thunk to CPropertyManager::CreateFixedSizeContainerForWrite(unsigned long*, void*, unsigned int)
 t non-virtual thunk to CPropertyManager::CreatePropertyContainer(unsigned long)
 t non-virtual thunk to CPropertyManager::DestroyPropertyContainer(unsigned long)
 t non-virtual thunk to CPropertyManager::ReleaseFixedSizeContainer(unsigned long)
 t non-virtual thunk to CRenderModelManager::ClearCache()
 t non-virtual thunk to CRenderModelManager::FindComponentForInputState(char const*, unsigned long, char*, unsigned int)
 t non-virtual thunk to CRenderModelManager::GetComponentState(char const*, char const*, unsigned long, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t non-virtual thunk to CRenderModelManager::GetComponentStateExplicit(char const*, char const*, vr::RenderModel_InputState_t const*, vr::RenderModel_ControllerMode_State_t const*, vr::RenderModel_ComponentState_t*)
 t non-virtual thunk to CRenderModelManager::IsComponentRelevantForInputState(char const*, char const*, unsigned long)
 t non-virtual thunk to CRenderModelManager::RegisterTextureFilePath(char const*, vr::RenderModelTextureOptions_t const*)
 t non-virtual thunk to CSettingsManager::GetKeysInSection(char const*, std::vector<std::string, std::allocator<std::string> >*, vr::EVRSettingsError*)
 t non-virtual thunk to CSettingsManager::GetNumeric(char const*, char const*, vr::EVRSettingsError*)
 t non-virtual thunk to CSettingsManager::GetValueType(ESettingValueType*, char const*, char const*)
 t non-virtual thunk to CSettingsManager::SetNumeric(char const*, char const*, double, vr::EVRSettingsError*)
 t non-virtual thunk to CSxrAction::~CSxrAction()
 t non-virtual thunk to CSxrActionSet::~CSxrActionSet()
 t non-virtual thunk to CSxrChildHandle<CSxrAction, XrAction_T*, CSxrActionSet>::~CSxrChildHandle()
 t non-virtual thunk to CSxrChildHandle<CSxrActionSet, XrActionSet_T*, CSxrInstance>::~CSxrChildHandle()
 t non-virtual thunk to CSxrChildHandle<CSxrHandTrackerEXT, XrHandTrackerEXT_T*, CSxrSession>::~CSxrChildHandle()
 t non-virtual thunk to CSxrChildHandle<CSxrSession, XrSession_T*, CSxrInstance>::~CSxrChildHandle()
 t non-virtual thunk to CSxrChildHandle<CSxrSwapchainBase, XrSwapchain_T*, CSxrSession>::~CSxrChildHandle()
 t non-virtual thunk to CSxrChildVariableParentHandle<CSxrSpace, XrSpace_T*, CSxrAction, CSxrSession>::~CSxrChildVariableParentHandle()
 t non-virtual thunk to CSxrHandTrackerEXT::~CSxrHandTrackerEXT()
 t non-virtual thunk to CSxrInstance::~CSxrInstance()
 t non-virtual thunk to CSxrSession::~CSxrSession()
 t non-virtual thunk to CSxrSpace::~CSxrSpace()
 t non-virtual thunk to CSxrSwapchainBase::EndFrame()
 t non-virtual thunk to CSxrSwapchainBase::GetLastReleasedFrameIndex()
 t non-virtual thunk to CSxrSwapchainBase::GetLastReleasedImageIndex()
 t non-virtual thunk to CSxrSwapchainBase::GetSwapchainId()
 t non-virtual thunk to CSxrSwapchainBase::~CSxrSwapchainBase()
 t non-virtual thunk to CSxrSwapchainGLOpenVR::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*)
 t non-virtual thunk to CSxrSwapchainGLOpenVR::EndFrame()
 t non-virtual thunk to CSxrSwapchainGLOpenVR::EnumerateSwapchainImages(unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t non-virtual thunk to CSxrSwapchainGLOpenVR::GetPresentableDepthTexture(vr::VRTextureWithPoseAndDepth_t*)
 t non-virtual thunk to CSxrSwapchainGLOpenVR::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*)
 t non-virtual thunk to CSxrSwapchainGLOpenVR::Init()
 t non-virtual thunk to CSxrSwapchainGLOpenVR::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*)
 t non-virtual thunk to CSxrSwapchainGLOpenVR::WaitSwapchainImage(XrSwapchainImageWaitInfo const*)
 t non-virtual thunk to CSxrSwapchainGLOpenVR::~CSxrSwapchainGLOpenVR()
 t non-virtual thunk to CSxrSwapchainPrism::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*)
 t non-virtual thunk to CSxrSwapchainPrism::EnumerateSwapchainImages(unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t non-virtual thunk to CSxrSwapchainPrism::GetCompositionSwapchain()
 t non-virtual thunk to CSxrSwapchainPrism::GetPresentableDepthTexture(vr::VRTextureWithPoseAndDepth_t*)
 t non-virtual thunk to CSxrSwapchainPrism::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*)
 t non-virtual thunk to CSxrSwapchainPrism::GetSwapchainId()
 t non-virtual thunk to CSxrSwapchainPrism::Init()
 t non-virtual thunk to CSxrSwapchainPrism::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*)
 t non-virtual thunk to CSxrSwapchainPrism::WaitSwapchainImage(XrSwapchainImageWaitInfo const*)
 t non-virtual thunk to CSxrSwapchainPrism::~CSxrSwapchainPrism()
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::AcquireSwapchainImage(XrSwapchainImageAcquireInfo const*, unsigned int*)
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::EnumerateSwapchainImages(unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::GetPresentableDepthTexture(vr::VRTextureWithPoseAndDepth_t*)
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::GetPresentableTexture(XrSwapchainSubImage const&, vr::VRTextureWithPoseAndDepth_t*, vr::EVRSubmitFlags*)
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::Init()
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::ReleaseSwapchainImage(XrSwapchainImageReleaseInfo const*)
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::WaitSwapchainImage(XrSwapchainImageWaitInfo const*)
 t non-virtual thunk to CSxrSwapchainVulkanOpenVR::~CSxrSwapchainVulkanOpenVR()
 t non-virtual thunk to CVRCameraComponent_002::GetCameraCompatibilityMode(vr::ECameraCompatibilityMode*)
 t non-virtual thunk to CVRCameraComponent_002::GetCameraDistortion(unsigned int, float, float, float*, float*)
 t non-virtual thunk to CVRCameraComponent_002::GetCameraFrameBounds(vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRCameraComponent_002::GetCameraFrameBufferingRequirements(int*, unsigned int*)
 t non-virtual thunk to CVRCameraComponent_002::GetCameraFrameDimensions(vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRCameraComponent_002::GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*, vr::EVRDistortionFunctionType*, double*)
 t non-virtual thunk to CVRCameraComponent_002::GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t non-virtual thunk to CVRCameraComponent_002::GetCameraVideoStreamFormat()
 t non-virtual thunk to CVRCameraComponent_002::GetVideoStreamFrame()
 t non-virtual thunk to CVRCameraComponent_002::IsVideoStreamActive(bool*, float*)
 t non-virtual thunk to CVRCameraComponent_002::PauseVideoStream()
 t non-virtual thunk to CVRCameraComponent_002::ReleaseVideoStreamFrame(vr::CameraVideoStreamFrame_t const*)
 t non-virtual thunk to CVRCameraComponent_002::ResumeVideoStream()
 t non-virtual thunk to CVRCameraComponent_002::SetAutoExposure(bool)
 t non-virtual thunk to CVRCameraComponent_002::SetCameraCompatibilityMode(vr::ECameraCompatibilityMode)
 t non-virtual thunk to CVRCameraComponent_002::SetCameraFrameBuffering(int, void**, unsigned int)
 t non-virtual thunk to CVRCameraComponent_002::SetCameraVideoSinkCallback(vr::ICameraVideoSinkCallback*)
 t non-virtual thunk to CVRCameraComponent_002::SetCameraVideoStreamFormat(vr::ECameraVideoStreamFormat)
 t non-virtual thunk to CVRCameraComponent_002::SetFrameRate(int, int)
 t non-virtual thunk to CVRCameraComponent_002::StartVideoStream()
 t non-virtual thunk to CVRCameraComponent_002::StopVideoStream()
 t non-virtual thunk to CVRCameraComponent_002::~CVRCameraComponent_002()
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraCompatibilityMode(vr::ECameraCompatibilityMode*)
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraDistortion(unsigned int, float, float, float*, float*)
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraFrameBounds(vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraFrameBufferingRequirements(int*, unsigned int*)
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraFrameDimensions(vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraIntrinsics(unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*, vr::EVRDistortionFunctionType*, double*)
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraProjection(unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t non-virtual thunk to CVRCameraComponent_Latest::GetCameraVideoStreamFormat()
 t non-virtual thunk to CVRCameraComponent_Latest::GetVideoStreamFrame()
 t non-virtual thunk to CVRCameraComponent_Latest::IsVideoStreamActive(bool*, float*)
 t non-virtual thunk to CVRCameraComponent_Latest::PauseVideoStream()
 t non-virtual thunk to CVRCameraComponent_Latest::ReleaseVideoStreamFrame(vr::CameraVideoStreamFrame_t const*)
 t non-virtual thunk to CVRCameraComponent_Latest::ResumeVideoStream()
 t non-virtual thunk to CVRCameraComponent_Latest::SetAutoExposure(bool)
 t non-virtual thunk to CVRCameraComponent_Latest::SetCameraCompatibilityMode(vr::ECameraCompatibilityMode)
 t non-virtual thunk to CVRCameraComponent_Latest::SetCameraFrameBuffering(int, void**, unsigned int)
 t non-virtual thunk to CVRCameraComponent_Latest::SetCameraVideoSinkCallback(vr::ICameraVideoSinkCallback*)
 t non-virtual thunk to CVRCameraComponent_Latest::SetCameraVideoStreamFormat(vr::ECameraVideoStreamFormat)
 t non-virtual thunk to CVRCameraComponent_Latest::SetFrameRate(int, int)
 t non-virtual thunk to CVRCameraComponent_Latest::StartVideoStream()
 t non-virtual thunk to CVRCameraComponent_Latest::StopVideoStream()
 t non-virtual thunk to CVRCameraComponent_Latest::~CVRCameraComponent_Latest()
 t non-virtual thunk to CVRChaperoneClient::ApplyZeroPose(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t)
 t non-virtual thunk to CVRChaperoneClient::CommitWorkingCopy(vr::EChaperoneConfigFile)
 t non-virtual thunk to CVRChaperoneClient::ExportLiveToBuffer(char*, unsigned int*)
 t non-virtual thunk to CVRChaperoneClient::GetLiveCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t non-virtual thunk to CVRChaperoneClient::GetLiveSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRChaperoneClient::GetOriginFromTrackingMatrix(vr::ETrackingUniverseOrigin, vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRChaperoneClient::GetRawZeroPoseToStandingAbsoluteTrackingPose(vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRChaperoneClient::GetSeatedZeroPoseToStandingAbsoluteTrackingPose(vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRChaperoneClient::GetSetupZeroPoseToStandingAbsoluteTrackingPose(vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRChaperoneClient::GetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int*)
 t non-virtual thunk to CVRChaperoneClient::GetWorkingPlayAreaRect(vr::HmdQuad_t*)
 t non-virtual thunk to CVRChaperoneClient::GetWorkingPlayAreaSize(float*, float*)
 t non-virtual thunk to CVRChaperoneClient::GetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRChaperoneClient::GetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRChaperoneClient::HideWorkingSetPreview()
 t non-virtual thunk to CVRChaperoneClient::ImportFromBufferToWorking(char const*, unsigned int)
 t non-virtual thunk to CVRChaperoneClient::IsOriginCalibrated(vr::ETrackingUniverseOrigin)
 t non-virtual thunk to CVRChaperoneClient::ReloadFromDisk(vr::EChaperoneConfigFile)
 t non-virtual thunk to CVRChaperoneClient::RevertWorkingCopy()
 t non-virtual thunk to CVRChaperoneClient::RoomSetupStarting()
 t non-virtual thunk to CVRChaperoneClient::SetWorkingCollisionBoundsInfo(vr::HmdQuad_t*, unsigned int)
 t non-virtual thunk to CVRChaperoneClient::SetWorkingPerimeter(vr::HmdVector2_t*, unsigned int)
 t non-virtual thunk to CVRChaperoneClient::SetWorkingPlayAreaSize(float, float)
 t non-virtual thunk to CVRChaperoneClient::SetWorkingSeatedZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t non-virtual thunk to CVRChaperoneClient::SetWorkingStandingZeroPoseToRawTrackingPose(vr::HmdMatrix34_t const*)
 t non-virtual thunk to CVRChaperoneClient::ShowWorkingSetPreview()
 t non-virtual thunk to CVRCompositorClient::NewSharedVulkanBuffer(unsigned long, unsigned int, unsigned long*)
 t non-virtual thunk to CVRCompositorClient::NewSharedVulkanImage(unsigned int, unsigned int, unsigned int, bool, unsigned long*)
 t non-virtual thunk to CVRCompositorClient::NewSharedVulkanSemaphore(unsigned long*)
 t non-virtual thunk to CVRCompositorClient::PredictPoses(unsigned int, vr::TrackedDevicePose_t*, unsigned int)
 t non-virtual thunk to CVRCompositorClient::PredictRenderedFrame(int, float, float, vr::PredictedFrameInfo_t*)
 t non-virtual thunk to CVRCompositorClient::RefResource(unsigned long, unsigned long*)
 t non-virtual thunk to CVRCompositorClient::RenderStart()
 t non-virtual thunk to CVRCompositorClient::ResetRenderedFramePredictions()
 t non-virtual thunk to CVRCompositorClient::SubmitEye(vr::EVREye, unsigned int, vr::VRTextureWithPose_t const*, vr::VRTextureBounds_t const*, vr::EVRSubmitFlags)
 t non-virtual thunk to CVRCompositorClient::UnrefResource(unsigned long)
 t non-virtual thunk to CVRCompositorClient::~CVRCompositorClient()
 t non-virtual thunk to CVRControllerComponent_Latest::GetControllerState()
 t non-virtual thunk to CVRControllerComponent_Latest::TriggerHapticPulse(unsigned int, unsigned short)
 t non-virtual thunk to CVRControllerComponent_Latest::~CVRControllerComponent_Latest()
 t non-virtual thunk to CVRDisplayComponent_Latest::ComputeDistortion(vr::EVREye, float, float)
 t non-virtual thunk to CVRDisplayComponent_Latest::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRDisplayComponent_Latest::GetProjectionRaw(vr::EVREye, float*, float*, float*, float*)
 t non-virtual thunk to CVRDisplayComponent_Latest::GetRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t non-virtual thunk to CVRDisplayComponent_Latest::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRDisplayComponent_Latest::IsDisplayOnDesktop()
 t non-virtual thunk to CVRDisplayComponent_Latest::IsDisplayRealDisplay()
 t non-virtual thunk to CVRDisplayComponent_Latest::~CVRDisplayComponent_Latest()
 t non-virtual thunk to CVRDriverDirectModeComponent_001::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_001::~CVRDriverDirectModeComponent_001()
 t non-virtual thunk to CVRDriverDirectModeComponent_002::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_002::DestroySwapTextureSet(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_002::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_002::Present(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_002::~CVRDriverDirectModeComponent_002()
 t non-virtual thunk to CVRDriverDirectModeComponent_003::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_003::DestroySwapTextureSet(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_003::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_003::Present(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_003::~CVRDriverDirectModeComponent_003()
 t non-virtual thunk to CVRDriverDirectModeComponent_004::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_004::DestroySwapTextureSet(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_004::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t non-virtual thunk to CVRDriverDirectModeComponent_004::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_004::Present(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_004::~CVRDriverDirectModeComponent_004()
 t non-virtual thunk to CVRDriverDirectModeComponent_005::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_005::DestroySwapTextureSet(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_005::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t non-virtual thunk to CVRDriverDirectModeComponent_005::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_005::Present(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_005::~CVRDriverDirectModeComponent_005()
 t non-virtual thunk to CVRDriverDirectModeComponent_006::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_006::DestroySwapTextureSet(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_006::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t non-virtual thunk to CVRDriverDirectModeComponent_006::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_006::Present(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_006::~CVRDriverDirectModeComponent_006()
 t non-virtual thunk to CVRDriverDirectModeComponent_007::CreateSwapTextureSet(unsigned int, vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, vr::IVRDriverDirectModeComponent::SwapTextureSet_t*)
 t non-virtual thunk to CVRDriverDirectModeComponent_007::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_007::DestroySwapTextureSet(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_007::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t non-virtual thunk to CVRDriverDirectModeComponent_007::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_007::Present(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_007::SubmitLayer(vr::IVRDriverDirectModeComponent::SubmitLayerPerEye_t const (&) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_007::~CVRDriverDirectModeComponent_007()
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::CreateSwapTextureSet(unsigned int, vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, vr::IVRDriverDirectModeComponent::SwapTextureSet_t*)
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::DestroyAllSwapTextureSets(unsigned int)
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::DestroySwapTextureSet(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::PostPresent(vr::IVRDriverDirectModeComponent::Throttling_t const*)
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::Present(unsigned long)
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::SubmitLayer(vr::IVRDriverDirectModeComponent::SubmitLayerPerEye_t const (&) [2])
 t non-virtual thunk to CVRDriverDirectModeComponent_Latest::~CVRDriverDirectModeComponent_Latest()
 t non-virtual thunk to CVRInputLatest::ClearXrInputConfig()
 t non-virtual thunk to CVRInputLatest::DoAttachedControllersSupportXrHandTracking() const
 t non-virtual thunk to CVRInputLatest::DoesActionHaveOrigin(unsigned long, unsigned long, bool&)
 t non-virtual thunk to CVRInputLatest::GetBestXrInteractionProfile(unsigned long)
 t non-virtual thunk to CVRInputLatest::GetCurrentFrameTime() const
 t non-virtual thunk to CVRInputLatest::GetHandPose(vr::EVRHandSide, float, vr::TrackedDevicePose_t*)
 t non-virtual thunk to CVRInputLatest::GetPerInputTutorialActions(char const*, unsigned long*, vr::PerInputTutorialActions_t*, unsigned int)
 t non-virtual thunk to CVRInputLatest::GetPoseModification(unsigned long, vr::HmdMatrix34_t*)
 t non-virtual thunk to CVRInputLatest::GetPoseModificationFromPath(unsigned long, vr::HmdMatrix34_t*, unsigned int*)
 t non-virtual thunk to CVRInputLatest::GetSkeletonBoneDataForHand(vr::EVRHandSide, vr::VRBoneTransform_t*, unsigned int, vr::EVRSkeletalMotionRange)
 t non-virtual thunk to CVRInputLatest::IsActionBound(unsigned long)
 t non-virtual thunk to CVRInputLatest::IsInTutorialMode()
 t non-virtual thunk to CVRInputLatest::SetInTutorialMode(bool)
 t non-virtual thunk to CVRInputLatest::SetXrInputConfig(std::string const&, std::vector<std::string, std::allocator<std::string> > const&)
 t non-virtual thunk to CVRResourcesLatest::AddNamedResourcePath(std::string const&, std::string const&)
 t non-virtual thunk to CVRResourcesLatest::GetResourceFullPath(std::string const&, std::string const&)
 t non-virtual thunk to CVRResourcesLatest::GetResourceNames(std::vector<std::string, std::allocator<std::string> >*, std::string const&)
 t non-virtual thunk to CVRSystemLatest::AddSystemBehaviorFlag(EVRInternalSystemBehaviorFlags)
 t non-virtual thunk to CVRSystemLatest::ApplyApplicationSpecificPoseTransform(unsigned int, vr::TrackedDevicePose_t*, float)
 t non-virtual thunk to CVRSystemLatest::ApplyApplicationSpecificPoseTransform(vr::TrackedDevicePose_t*, unsigned int, float)
 t non-virtual thunk to CVRSystemLatest::ComputeDistortion(vr::EVREye, vr::DistortionChannel_t, bool, unsigned int, vr::DistortionCoordinate_t const*, vr::DistortionCoordinate_t*)
 t non-virtual thunk to CVRSystemLatest::GetApplicationSpecificScaling()
 t non-virtual thunk to CVRSystemLatest::GetCompositorError()
 t non-virtual thunk to CVRSystemLatest::GetCompositorError() [clone .cold]
 t non-virtual thunk to CVRSystemLatest::GetCompositorProcessId()
 t non-virtual thunk to CVRSystemLatest::GetCompositorProcessId() [clone .cold]
 t non-virtual thunk to CVRSystemLatest::GetDXGIOutputInfo(int*, int*)
 t non-virtual thunk to CVRSystemLatest::GetDeviceToAbsoluteTrackingPose(vr::ETrackingUniverseOrigin, float, vr::TrackedDevicePose_t*, unsigned int, vr::IVRCompositorSystemInternal::PredictionFlags_t)
 t non-virtual thunk to CVRSystemLatest::GetDeviceToAbsoluteTrackingPoseAtTime(vr::ETrackingUniverseOrigin, double, vr::TrackedDevicePose_t*, unsigned int, vr::IVRCompositorSystemInternal::PredictionFlags_t, bool)
 t non-virtual thunk to CVRSystemLatest::GetEyeOutputViewport(vr::EVREye, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRSystemLatest::GetEyeToHeadTransformCompositorResidual(vr::EVREye)
 t non-virtual thunk to CVRSystemLatest::GetHoverTargetOverlay()
 t non-virtual thunk to CVRSystemLatest::GetHoverTargetOverlay() [clone .cold]
 t non-virtual thunk to CVRSystemLatest::GetLastQueriedApplicationProjectionMatrix(vr::EVREye)
 t non-virtual thunk to CVRSystemLatest::GetMCImage(unsigned int*, unsigned int*, unsigned int*, void*, unsigned int)
 t non-virtual thunk to CVRSystemLatest::GetRawProjectionMatrix(vr::EVREye, float, float)
 t non-virtual thunk to CVRSystemLatest::GetRawRecommendedRenderTargetSize(unsigned int*, unsigned int*)
 t non-virtual thunk to CVRSystemLatest::GetRawRecommendedRenderTargetSize(unsigned int*, unsigned int*) [clone .cold]
 t non-virtual thunk to CVRSystemLatest::GetRemoteFrameTimings(vr::Compositor_FrameTiming*, unsigned int)
 t non-virtual thunk to CVRSystemLatest::GetTrackedDeviceClassUnmodified(unsigned int)
 t non-virtual thunk to CVRSystemLatest::GetWindowBounds(int*, int*, unsigned int*, unsigned int*)
 t non-virtual thunk to CVRSystemLatest::HasRemoteFrameTiming()
 t non-virtual thunk to CVRSystemLatest::HasSystemBehaviorFlag(EVRInternalSystemBehaviorFlags)
 t non-virtual thunk to CVRSystemLatest::HasSystemBehaviorFlag(EVRInternalSystemBehaviorFlags) [clone .cold]
 t non-virtual thunk to CVRSystemLatest::PollNextOverlayEvent(unsigned long, vr::VREvent_t*, unsigned int)
 t non-virtual thunk to CVRSystemLatest::PostGlobalEvent(vr::VREvent_t const&, unsigned int)
 t non-virtual thunk to CVRSystemLatest::PostOverlayEvent(unsigned long, vr::VREvent_t const&)
 t non-virtual thunk to CVRSystemLatest::PostVsyncEvent(float, unsigned long)
 t non-virtual thunk to CVRSystemLatest::RegisterInterface(char const*, void*)
 t non-virtual thunk to CVRSystemLatest::RemoveSystemBehaviorFlag(EVRInternalSystemBehaviorFlags)
 t non-virtual thunk to CVRSystemLatest::ReprojectVertices(vr::HmdMatrix44_t const&, vr::HmdMatrix44_t const&, unsigned int, vr::HmdVector2_t const*, vr::HmdVector2_t*)
 t non-virtual thunk to CVRSystemLatest::SetCompositorError(vr::EVRInitError)
 t non-virtual thunk to CVRSystemLatest::SetCompositorError(vr::EVRInitError) [clone .cold]
 t non-virtual thunk to CVRSystemLatest::SetOutputDevice(unsigned long)
 t non-virtual thunk to CVRSystemLatest::SetOutputDevice(unsigned long) [clone .cold]
 t non-virtual thunk to CVRSystemLatest::ThisProcessIsCompositor()
 t non-virtual thunk to CVRTrackedDevice_004::Activate(unsigned int)
 t non-virtual thunk to CVRTrackedDevice_004::Deactivate()
 t non-virtual thunk to CVRTrackedDevice_004::DebugRequest(char const*, char*, unsigned int)
 t non-virtual thunk to CVRTrackedDevice_004::EnterStandby()
 t non-virtual thunk to CVRTrackedDevice_004::GetComponent(char const*)
 t non-virtual thunk to CVRTrackedDevice_004::GetNativeDevice()
 t non-virtual thunk to CVRTrackedDevice_004::GetPose()
 t non-virtual thunk to CVRTrackedDevice_004::LegacyGetDeviceInfo(std::string*, vr::ETrackedDeviceClass*)
 t non-virtual thunk to CVRTrackedDevice_004::~CVRTrackedDevice_004()
 t non-virtual thunk to CVRTrackedDevice_Latest::Activate(unsigned int)
 t non-virtual thunk to CVRTrackedDevice_Latest::Deactivate()
 t non-virtual thunk to CVRTrackedDevice_Latest::DebugRequest(char const*, char*, unsigned int)
 t non-virtual thunk to CVRTrackedDevice_Latest::EnterStandby()
 t non-virtual thunk to CVRTrackedDevice_Latest::GetComponent(char const*)
 t non-virtual thunk to CVRTrackedDevice_Latest::GetNativeDevice()
 t non-virtual thunk to CVRTrackedDevice_Latest::GetPose()
 t non-virtual thunk to CVRTrackedDevice_Latest::LegacyGetDeviceInfo(std::string*, vr::ETrackedDeviceClass*)
 t non-virtual thunk to CVRTrackedDevice_Latest::~CVRTrackedDevice_Latest()
 t non-virtual thunk to CVRVirtualDisplayComponent_Latest::GetTimeSinceLastVsync(float*, unsigned long*)
 t non-virtual thunk to CVRVirtualDisplayComponent_Latest::Present(vr::PresentInfo_t const*, unsigned int)
 t non-virtual thunk to CVRVirtualDisplayComponent_Latest::WaitForPresent()
 t non-virtual thunk to CVRVirtualDisplayComponent_Latest::~CVRVirtualDisplayComponent_Latest()
 t non-virtual thunk to vr::CVRApplicationsLatest::IsSceneAppOpenOrTransitioning()
 t non-virtual thunk to vr::CVRApplicationsLatest::IsSceneAppOpenOrTransitioning() [clone .cold]
 t non-virtual thunk to vr::CVRApplicationsLatest::IsSceneAppQuitting(unsigned int)
 t non-virtual thunk to vr::CVRApplicationsLatest::SetSceneAppDetails(bool, bool, bool, bool, bool)
 t non-virtual thunk to vr::CVRSettingsLatest::GetKeysInSection(char const*, std::vector<std::string, std::allocator<std::string> >*, vr::EVRSettingsError*)
 t non-virtual thunk to vr::CVRSettingsLatest::GetNumeric(char const*, char const*, vr::EVRSettingsError*)
 t non-virtual thunk to vr::CVRSettingsLatest::GetValueType(ESettingValueType*, char const*, char const*)
 t non-virtual thunk to vr::CVRSettingsLatest::SetNumeric(char const*, char const*, double, vr::EVRSettingsError*)
 t non-virtual thunk to vr::CVRTrackedCamera::EnableCameraForStreaming(unsigned int, bool)
 t non-virtual thunk to vr::CVRTrackedCamera::GetCameraDistortion(unsigned int, unsigned int, float*, float*, float*, float*, int)
 t non-virtual thunk to vr::CVRTrackedCamera::GetCameraDistortionFunction(unsigned int, unsigned int, vr::EVRDistortionFunctionType*, double*)
 t non-virtual thunk to vr::CVRTrackedCamera::GetCameraFormatDimensions(unsigned int, vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*)
 t non-virtual thunk to vr::CVRTrackedCamera::GetCameraFrameBounds(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t non-virtual thunk to vr::CVRTrackedCamera::GetCameraIntrinsics(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t non-virtual thunk to vr::CVRTrackedCamera::GetCameraProjection(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t non-virtual thunk to vr::CVRTrackedCamera::GetCameraVideoStreamFormat(unsigned int, vr::ECameraVideoStreamFormat*)
 t non-virtual thunk to vr::CVRTrackedCamera::GetVideoStreamFrame(unsigned int, vr::CameraVideoStreamFrame_t const**)
 t non-virtual thunk to vr::CVRTrackedCamera::GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrame_t*)
 t non-virtual thunk to vr::CVRTrackedCamera::IsVideoStreamActive(unsigned int, bool*, bool*, float*)
 t non-virtual thunk to vr::CVRTrackedCamera::PauseVideoStream(unsigned int)
 t non-virtual thunk to vr::CVRTrackedCamera::ReleaseVideoStreamFrame(unsigned int, vr::CameraVideoStreamFrame_t const*)
 t non-virtual thunk to vr::CVRTrackedCamera::ResumeVideoStream(unsigned int)
 t non-virtual thunk to vr::CVRTrackedCamera::SetAutoExposure(unsigned int, bool)
 t non-virtual thunk to vr::CVRTrackedCamera::SetCameraCompatibilityMode(unsigned int, vr::ECameraCompatibilityMode)
 t non-virtual thunk to vr::CVRTrackedCamera::SetCameraVideoStreamFormat(unsigned int, vr::ECameraVideoStreamFormat)
 t non-virtual thunk to vr::CVRTrackedCamera::StartVideoStream(unsigned int)
 t non-virtual thunk to vr::CVRTrackedCamera::StopVideoStream(unsigned int)
 t oxrapilayermanagement::BIsJsonMember(Json::Value*, Json::Value&, std::string, std::string&)
 t oxrapilayermanagement::BIsJsonMember(Json::Value*, Json::Value&, std::string, std::string&) [clone .cold]
 t oxrapilayermanagement::BIsJsonMember(Json::Value*, Json::Value&, std::string, std::string&, std::string&)
 t oxrapilayermanagement::BIsJsonMember(Json::Value*, Json::Value&, std::string, std::string&, std::string&) [clone .cold]
 t oxrapilayermanagement::GetApiLayers(std::vector<OxrApiLayer_t, std::allocator<OxrApiLayer_t> >&, std::string, bool)
 t oxrapilayermanagement::GetApiLayers(std::vector<OxrApiLayer_t, std::allocator<OxrApiLayer_t> >&, std::string, bool) [clone .cold]
 t oxrapilayermanagement::GetInstalledApiLayers()
 t oxrapilayermanagement::GetInstalledApiLayers() [clone .cold]
 t oxrapilayermanagement::SetApiLayerState(std::string, bool)
 t oxrapilayermanagement::SetApiLayerState(std::string, bool) [clone .cold]
 t oxrruntimemanagement::AddSteamVRToAvailableRuntimes()
 t oxrruntimemanagement::ChangesRequireRoot()
 t oxrruntimemanagement::GetCurrentActiveRuntime(std::string*)
 t oxrruntimemanagement::GetCurrentActiveRuntime(std::string*) [clone .cold]
 t oxrruntimemanagement::GetCurrentDefaultRuntimePath()
 t oxrruntimemanagement::IsActiveRuntime(OxrRuntimeProvider_t)
 t oxrruntimemanagement::SetDefaultRuntime()
 t oxrruntimemanagement::SetDefaultRuntime() [clone .cold]
 t protobuf_AddDesc_vr_5fmessages_2eproto()
 t protobuf_AddDesc_vr_5fmessages_2eproto() [clone .cold]
 t protobuf_AssignDesc_vr_5fmessages_2eproto()
 t protobuf_AssignDesc_vr_5fmessages_2eproto() [clone .cold]
 t protobuf_ShutdownFile_vr_5fmessages_2eproto()
 t read_encoded_value
 t read_encoded_value.cold
 t read_encoded_value_with_base
 t read_encoded_value_with_base.cold
 t register_tm_clones
 t resample_row_1(unsigned char*, unsigned char*, unsigned char*, int, int)
 t search_object
 t search_object.cold
 t stbi__YCbCr_to_RGB_simd(unsigned char*, unsigned char const*, unsigned char const*, unsigned char const*, int, int)
 t stbi__bmp_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) [clone .constprop.0]
 t stbi__bmp_parse_header(stbi__context*, stbi__bmp_data*) [clone .part.0]
 t stbi__build_huffman(stbi__huffman*, int*)
 t stbi__compute_huffman_codes(stbi__zbuf*)
 t stbi__convert_format(unsigned char*, int, int, unsigned int, unsigned int) [clone .part.0]
 t stbi__convert_format16(unsigned short*, int, int, unsigned int, unsigned int) [clone .part.0]
 t stbi__create_png_image_raw(stbi__png*, unsigned char*, unsigned int, int, unsigned int, unsigned int, int, int)
 t stbi__decode_jpeg_header(stbi__jpeg*, int)
 t stbi__decode_jpeg_image(stbi__jpeg*)
 t stbi__free_jpeg_components(stbi__jpeg*, int, int) [clone .constprop.0]
 t stbi__get16be(stbi__context*)
 t stbi__get16le(stbi__context*)
 t stbi__get32le(stbi__context*)
 t stbi__get8(stbi__context*)
 t stbi__get_marker(stbi__jpeg*)
 t stbi__getn(stbi__context*, unsigned char*, int)
 t stbi__gif_header(stbi__context*, stbi__gif*, int*, int)
 t stbi__gif_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) [clone .constprop.0]
 t stbi__gif_load_next(stbi__context*, stbi__gif*, int*, int, unsigned char*) [clone .constprop.0]
 t stbi__gif_parse_colortable(stbi__context*, unsigned char (*) [4], int, int)
 t stbi__gif_test_raw(stbi__context*)
 t stbi__grow_buffer_unsafe(stbi__jpeg*)
 t stbi__hdr_convert(float*, unsigned char*, int)
 t stbi__hdr_gettoken(stbi__context*, char*)
 t stbi__hdr_info(stbi__context*, int*, int*, int*)
 t stbi__hdr_load(stbi__context*, int*, int*, int*, int, stbi__result_info*) [clone .constprop.0]
 t stbi__hdr_test(stbi__context*)
 t stbi__high_bit(unsigned int)
 t stbi__idct_simd(unsigned char*, int, short*)
 t stbi__info_main(stbi__context*, int*, int*, int*)
 t stbi__is_16_main(stbi__context*)
 t stbi__jpeg_decode_block(stbi__jpeg*, short*, stbi__huffman*, stbi__huffman*, short*, int, unsigned short*)
 t stbi__jpeg_decode_block_prog_dc(stbi__jpeg*, short*, stbi__huffman*, int) [clone .part.0]
 t stbi__load_and_postprocess_16bit(stbi__context*, int*, int*, int*, int)
 t stbi__load_and_postprocess_8bit(stbi__context*, int*, int*, int*, int)
 t stbi__load_gif_main(stbi__context*, int**, int*, int*, int*, int*, int) [clone .constprop.0]
 t stbi__load_main(stbi__context*, int*, int*, int*, int, stbi__result_info*, int)
 t stbi__loadf_main(stbi__context*, int*, int*, int*, int)
 t stbi__mad3sizes_valid(int, int, int, int)
 t stbi__mad4sizes_valid(int, int, int, int, int) [clone .constprop.0]
 t stbi__malloc_mad2(int, int, int)
 t stbi__malloc_mad3(int, int, int, int)
 t stbi__out_gif_code(stbi__gif*, unsigned short)
 t stbi__parse_png_file(stbi__png*, int, int)
 t stbi__parse_zlib(stbi__zbuf*, int)
 t stbi__pnm_getinteger(stbi__context*, char*)
 t stbi__pnm_info(stbi__context*, int*, int*, int*)
 t stbi__pnm_skip_whitespace(stbi__context*, char*)
 t stbi__process_marker(stbi__jpeg*, int)
 t stbi__readval(stbi__context*, int, unsigned char*)
 t stbi__resample_row_generic(unsigned char*, unsigned char*, unsigned char*, int, int)
 t stbi__resample_row_h_2(unsigned char*, unsigned char*, unsigned char*, int, int)
 t stbi__resample_row_hv_2_simd(unsigned char*, unsigned char*, unsigned char*, int, int)
 t stbi__resample_row_v_2(unsigned char*, unsigned char*, unsigned char*, int, int)
 t stbi__skip(stbi__context*, int)
 t stbi__start_callbacks(stbi__context*, stbi_io_callbacks*, void*)
 t stbi__stdio_eof(void*)
 t stbi__stdio_read(void*, char*, int)
 t stbi__stdio_skip(void*, int)
 t stbi__stdio_write(void*, void*, int)
 t stbi__vertical_flip(void*, int, int, int)
 t stbi__zbuild_huffman(stbi__zhuffman*, unsigned char const*, int)
 t stbi__zhuffman_decode_slowpath(stbi__zbuf*, stbi__zhuffman*)
 t stbi_convert_iphone_png_to_rgb
 t stbi_failure_reason
 t stbi_flip_vertically_on_write
 t stbi_hdr_to_ldr_gamma
 t stbi_hdr_to_ldr_scale
 t stbi_image_free
 t stbi_info
 t stbi_info_from_callbacks
 t stbi_info_from_file
 t stbi_info_from_memory
 t stbi_is_16_bit
 t stbi_is_16_bit_from_callbacks
 t stbi_is_16_bit_from_file
 t stbi_is_16_bit_from_memory
 t stbi_is_hdr
 t stbi_is_hdr_from_callbacks
 t stbi_is_hdr_from_file
 t stbi_is_hdr_from_memory
 t stbi_ldr_to_hdr_gamma
 t stbi_ldr_to_hdr_scale
 t stbi_load
 t stbi_load_16
 t stbi_load_16_from_callbacks
 t stbi_load_16_from_memory
 t stbi_load_from_callbacks
 t stbi_load_from_file
 t stbi_load_from_file_16
 t stbi_load_from_memory
 t stbi_load_gif_from_memory
 t stbi_loadf
 t stbi_loadf_from_callbacks
 t stbi_loadf_from_file
 t stbi_loadf_from_memory
 t stbi_set_flip_vertically_on_load
 t stbi_set_unpremultiply_on_load
 t stbi_write_bmp
 t stbi_write_bmp_core(stbi__write_context*, int, int, int, void const*)
 t stbi_write_bmp_to_func
 t stbi_write_hdr
 t stbi_write_hdr_core(stbi__write_context*, int, int, int, float*) [clone .part.0]
 t stbi_write_hdr_to_func
 t stbi_write_jpg
 t stbi_write_jpg_core(stbi__write_context*, int, int, int, void const*, int) [clone .part.0]
 t stbi_write_jpg_to_func
 t stbi_write_png
 t stbi_write_png_to_func
 t stbi_write_png_to_mem
 t stbi_write_tga
 t stbi_write_tga_core(stbi__write_context*, int, int, int, void*)
 t stbi_write_tga_to_func
 t stbi_zlib_compress
 t stbi_zlib_decode_buffer
 t stbi_zlib_decode_malloc
 t stbi_zlib_decode_malloc_guesssize
 t stbi_zlib_decode_malloc_guesssize_headerflag
 t stbi_zlib_decode_noheader_buffer
 t stbi_zlib_decode_noheader_malloc
 t stbiw__encode_png_line(unsigned char*, int, int, int, int, int, int, signed char*)
 t stbiw__jpg_DCT(float*, float*, float*, float*, float*, float*, float*, float*)
 t stbiw__jpg_processDU(stbi__write_context*, int*, int*, float*, float*, int, unsigned short const (*) [2], unsigned short const (*) [2])
 t stbiw__jpg_writeBits(stbi__write_context*, int*, int*, unsigned short const*)
 t stbiw__linear_to_rgbe(unsigned char*, float*)
 t stbiw__outfile(stbi__write_context*, int, int, int, int, int, int, void*, int, int, char const*, ...) [clone .constprop.0]
 t stbiw__sbgrowf(void**, int, int) [clone .constprop.0] [clone .isra.0]
 t stbiw__wpcrc(unsigned char**, int)
 t stbiw__write_pixel(stbi__write_context*, int, int, int, int, unsigned char*) [clone .constprop.0]
 t stbiw__writef(stbi__write_context*, char const*, ...) [clone .constprop.0]
 t stbiw__writefv(stbi__write_context*, char const*, __va_list_tag*)
 t stbiw__zhash(unsigned char*)
 t stbiw__zlib_flushf(unsigned char*, unsigned int*, int*)
 t std::_Bvector_base<std::allocator<bool> >::_M_deallocate()
 t std::_Deque_base<CRenderModelLoadThread::TextureEntry_t, std::allocator<CRenderModelLoadThread::TextureEntry_t> >::_M_initialize_map(unsigned long)
 t std::_Deque_base<CRenderModelLoadThread::TextureEntry_t, std::allocator<CRenderModelLoadThread::TextureEntry_t> >::~_Deque_base()
 t std::_Deque_base<CVRCompositorSharedTextures::CommandBuffer_t*, std::allocator<CVRCompositorSharedTextures::CommandBuffer_t*> >::_M_initialize_map(unsigned long)
 t std::_Deque_base<CVRCompositorSharedTextures::CommandBuffer_t*, std::allocator<CVRCompositorSharedTextures::CommandBuffer_t*> >::~_Deque_base()
 t std::_Deque_base<CVRSharedGLTexture::VulkanInteropSemaphore_t*, std::allocator<CVRSharedGLTexture::VulkanInteropSemaphore_t*> >::_M_initialize_map(unsigned long)
 t std::_Deque_base<CVRSharedGLTexture::VulkanInteropSemaphore_t*, std::allocator<CVRSharedGLTexture::VulkanInteropSemaphore_t*> >::~_Deque_base()
 t std::_Deque_base<CVkCommandBuffer*, std::allocator<CVkCommandBuffer*> >::~_Deque_base()
 t std::_Deque_base<Json::Reader::ErrorInfo, std::allocator<Json::Reader::ErrorInfo> >::_M_initialize_map(unsigned long)
 t std::_Deque_base<Json::Value*, std::allocator<Json::Value*> >::_M_initialize_map(unsigned long)
 t std::_Deque_base<Json::Value*, std::allocator<Json::Value*> >::~_Deque_base()
 t std::_Deque_base<long, std::allocator<long> >::_M_initialize_map(unsigned long)
 t std::_Deque_base<long, std::allocator<long> >::~_Deque_base()
 t std::_Deque_base<std::__detail::_StateSeq<std::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::regex_traits<char> > > >::~_Deque_base()
 t std::_Deque_base<std::string, std::allocator<std::string> >::_M_initialize_map(unsigned long)
 t std::_Deque_base<vr::HmdVector2_t, std::allocator<vr::HmdVector2_t> >::~_Deque_base()
 t std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t*&, CVRCompositorSharedTextures::CommandBuffer_t**> std::uninitialized_copy<std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t* const&, CVRCompositorSharedTextures::CommandBuffer_t* const*>, std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t*&, CVRCompositorSharedTextures::CommandBuffer_t**> >(std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t* const&, CVRCompositorSharedTextures::CommandBuffer_t* const*>, std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t* const&, CVRCompositorSharedTextures::CommandBuffer_t* const*>, std::_Deque_iterator<CVRCompositorSharedTextures::CommandBuffer_t*, CVRCompositorSharedTextures::CommandBuffer_t*&, CVRCompositorSharedTextures::CommandBuffer_t**>)
 t std::_Function_base::~_Function_base()
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*), sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)::{lambda(XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*)#1}>::_M_invoke(std::_Any_data const&, XrAction_T*&&, unsigned long&&, XrActionStateBoolean*&&, unsigned long*&&)
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*), sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)::{lambda(XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*), sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)::{lambda(XrAction_T*, unsigned long, XrActionStateBoolean*, unsigned long*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*), sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)::{lambda(XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*)#1}>::_M_invoke(std::_Any_data const&, XrAction_T*&&, unsigned long&&, XrActionStateFloat*&&, unsigned long*&&)
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*), sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)::{lambda(XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*), sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)::{lambda(XrAction_T*, unsigned long, XrActionStateFloat*, unsigned long*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*), sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)::{lambda(XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*)#1}>::_M_invoke(std::_Any_data const&, XrAction_T*&&, unsigned long&&, XrActionStatePose*&&, unsigned long*&&)
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*), sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)::{lambda(XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*), sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)::{lambda(XrAction_T*, unsigned long, XrActionStatePose*, unsigned long*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*), sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)::{lambda(XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*)#1}>::_M_invoke(std::_Any_data const&, XrAction_T*&&, unsigned long&&, XrActionStateVector2f*&&, unsigned long*&&)
 t std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*), sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)::{lambda(XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<XrResult (XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*), sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)::{lambda(XrAction_T*, unsigned long, XrActionStateVector2f*, unsigned long*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<XrResult (std::vector<XrView, std::allocator<XrView> >&), sxr_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*)::{lambda(std::vector<XrView, std::allocator<XrView> >&)#1}>::_M_invoke(std::_Any_data const&, std::vector<XrView, std::allocator<XrView> >&)
 t std::_Function_handler<XrResult (std::vector<XrView, std::allocator<XrView> >&), sxr_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*)::{lambda(std::vector<XrView, std::allocator<XrView> >&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<XrResult (std::vector<XrView, std::allocator<XrView> >&), sxr_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*)::{lambda(std::vector<XrView, std::allocator<XrView> >&)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (XrActiveActionSetPrioritiesEXT const*), sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(XrActiveActionSetPrioritiesEXT const*)#1}>::_M_invoke(std::_Any_data const&, XrActiveActionSetPrioritiesEXT const*&&)
 t std::_Function_handler<bool (XrActiveActionSetPrioritiesEXT const*), sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(XrActiveActionSetPrioritiesEXT const*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (XrActiveActionSetPrioritiesEXT const*), sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(XrActiveActionSetPrioritiesEXT const*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (XrBindingModificationsKHR const*), sxr_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*)::{lambda(XrBindingModificationsKHR const*)#1}>::_M_invoke(std::_Any_data const&, XrBindingModificationsKHR const*&&)
 t std::_Function_handler<bool (XrBindingModificationsKHR const*), sxr_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*)::{lambda(XrBindingModificationsKHR const*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (XrBindingModificationsKHR const*), sxr_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*)::{lambda(XrBindingModificationsKHR const*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (XrInteractionProfileAnalogThresholdVALVE const*), ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#1}>::_M_invoke(std::_Any_data const&, XrInteractionProfileAnalogThresholdVALVE const*&&)
 t std::_Function_handler<bool (XrInteractionProfileAnalogThresholdVALVE const*), ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (XrInteractionProfileAnalogThresholdVALVE const*), ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (XrInteractionProfileAnalogThresholdVALVE const*), ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#2}>::_M_invoke(std::_Any_data const&, XrInteractionProfileAnalogThresholdVALVE const*&&)
 t std::_Function_handler<bool (XrInteractionProfileAnalogThresholdVALVE const*), ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#2}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (XrInteractionProfileAnalogThresholdVALVE const*), ProcessAnalogThresholds(bool, unsigned int, XrBindingModificationsKHR const*, CSxrAction const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > const*, SuggestedBinding*)::{lambda(XrInteractionProfileAnalogThresholdVALVE const*)#2}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (XrInteractionProfileDpadBindingEXT const*), ProcessDpadBindings(unsigned int, XrBindingModificationsKHR const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, SuggestedBinding*, std::vector<unsigned long, std::allocator<unsigned long> >&)::{lambda(XrInteractionProfileDpadBindingEXT const*)#1}>::_M_invoke(std::_Any_data const&, XrInteractionProfileDpadBindingEXT const*&&)
 t std::_Function_handler<bool (XrInteractionProfileDpadBindingEXT const*), ProcessDpadBindings(unsigned int, XrBindingModificationsKHR const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, SuggestedBinding*, std::vector<unsigned long, std::allocator<unsigned long> >&)::{lambda(XrInteractionProfileDpadBindingEXT const*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (XrInteractionProfileDpadBindingEXT const*), ProcessDpadBindings(unsigned int, XrBindingModificationsKHR const*, XrInteractionProfileSuggestedBinding const*, XrActionSuggestedBinding const*, SuggestedBinding*, std::vector<unsigned long, std::allocator<unsigned long> >&)::{lambda(XrInteractionProfileDpadBindingEXT const*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), bool (*)(char)>::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), bool (*)(char)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, false, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::regex_traits<char>, true, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, false, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, false, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, true, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, true, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::regex_traits<char>, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, false, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, false, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, true, false> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, true, true> >::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::regex_traits<char>, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (unsigned long), CVRInputLatest::InputFrame_t::GetAndCollapseActionValues(VRAction_Entry_t*, unsigned long, unsigned long)::{lambda(unsigned long)#1}>::_M_invoke(std::_Any_data const&, unsigned long&&)
 t std::_Function_handler<bool (unsigned long), CVRInputLatest::InputFrame_t::GetAndCollapseActionValues(VRAction_Entry_t*, unsigned long, unsigned long)::{lambda(unsigned long)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (unsigned long), CVRInputLatest::InputFrame_t::GetAndCollapseActionValues(VRAction_Entry_t*, unsigned long, unsigned long)::{lambda(unsigned long)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (unsigned short, unsigned short, unsigned short), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(unsigned short, unsigned short, unsigned short)#14}>::_M_invoke(std::_Any_data const&, unsigned short&&, std::_Any_data const&, std::_Any_data const&)
 t std::_Function_handler<bool (unsigned short, unsigned short, unsigned short), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(unsigned short, unsigned short, unsigned short)#14}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (unsigned short, unsigned short, unsigned short), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(unsigned short, unsigned short, unsigned short)#14}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::ETrackedDeviceClass), CVRSystemLatest::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)::{lambda(vr::ETrackedDeviceClass)#1}>::_M_invoke(std::_Any_data const&, vr::ETrackedDeviceClass&&)
 t std::_Function_handler<bool (vr::ETrackedDeviceClass), CVRSystemLatest::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)::{lambda(vr::ETrackedDeviceClass)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::ETrackedDeviceClass), CVRSystemLatest::GetSortedTrackedDeviceIndicesOfClass(vr::ETrackedDeviceClass, unsigned int*, unsigned int, unsigned int)::{lambda(vr::ETrackedDeviceClass)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&), ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)::{lambda(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)#1}>::_M_invoke(std::_Any_data const&, vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)
 t std::_Function_handler<bool (vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&), ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)::{lambda(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&), ConvertHiddenAreaMesh(vr::HiddenAreaMesh_t const&, vr::EHiddenAreaMeshType, vr::HiddenAreaMesh_t&, vr::EHiddenAreaMeshType)::{lambda(vr::HiddenAreaMesh_t const&, vr::HiddenAreaMesh_t&)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#2}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#2}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#2}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#3}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#3}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#3}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#4}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#4}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#4}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#5}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#5}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#5}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#6}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#6}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#6}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#7}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#7}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#7}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#8}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#8}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#8}> const&, std::_Manager_operation)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#9}>::_M_invoke(std::_Any_data const&, vr::HmdVector3_t const&)
 t std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#9}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (vr::HmdVector3_t const&), CRenderModelManager::Tessellate(vr::RenderModel_t*, char const*)::{lambda(vr::HmdVector3_t const&)#9}> const&, std::_Manager_operation)
 t std::_Function_handler<void (ELogLevel, char const*, void*), CLogBuffer::CLogBuffer()::{lambda(ELogLevel, char const*, void*)#1}>::_M_invoke(std::_Any_data const&, ELogLevel&&, char const*&&, void*&&)
 t std::_Function_handler<void (ELogLevel, char const*, void*), CLogBuffer::CLogBuffer()::{lambda(ELogLevel, char const*, void*)#1}>::_M_invoke(std::_Any_data const&, ELogLevel&&, char const*&&, void*&&) [clone .cold]
 t std::_Function_handler<void (ELogLevel, char const*, void*), CLogBuffer::CLogBuffer()::{lambda(ELogLevel, char const*, void*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void (ELogLevel, char const*, void*), CLogBuffer::CLogBuffer()::{lambda(ELogLevel, char const*, void*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<void (ELogLevel, char const*, void*), CVRLog::InitLog(char const*, char const*, bool, unsigned long)::{lambda(ELogLevel, char const*, void*)#1}>::_M_invoke(std::_Any_data const&, ELogLevel&&, char const*&&, void*&&)
 t std::_Function_handler<void (ELogLevel, char const*, void*), CVRLog::InitLog(char const*, char const*, bool, unsigned long)::{lambda(ELogLevel, char const*, void*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void (ELogLevel, char const*, void*), CVRLog::InitLog(char const*, char const*, bool, unsigned long)::{lambda(ELogLevel, char const*, void*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}>::_M_invoke(std::_Any_data const&, ELogLevel&&, char const*&&, void*&&)
 t std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<void (Json::Value const&), CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}>::_M_invoke(std::_Any_data const&, Json::Value const&)
 t std::_Function_handler<void (Json::Value const&), CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}>::_M_invoke(std::_Any_data const&, Json::Value const&) [clone .cold]
 t std::_Function_handler<void (Json::Value const&), CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void (Json::Value const&), CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<void (Json::Value const&), CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void (Json::Value const&), CVRMailbox::AutoForwardMessageType(std::string, std::string const&)::{lambda(Json::Value const&)#1}> const&, std::_Manager_operation) [clone .cold]
 t std::_Function_handler<void (Json::Value const&), std::_Bind<void (CVRMailbox::*(CVRMailbox*, std::_Placeholder<1>))(Json::Value const&)> >::_M_invoke(std::_Any_data const&, Json::Value const&)
 t std::_Function_handler<void (Json::Value const&), std::_Bind<void (CVRMailbox::*(CVRMailbox*, std::_Placeholder<1>))(Json::Value const&)> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<void (char const*, char const*, unsigned int, bool, void*, bool*), void (*)(char const*, char const*, unsigned int, bool, void*, bool*)>::_M_invoke(std::_Any_data const&, char const*&&, char const*&&, unsigned int&&, bool&&, void*&&, bool*&&)
 t std::_Function_handler<void (char const*, char const*, unsigned int, bool, void*, bool*), void (*)(char const*, char const*, unsigned int, bool, void*, bool*)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<void* (char const*), CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType)::{lambda(char const*)#1}>::_M_invoke(std::_Any_data const&, char const*&&)
 t std::_Function_handler<void* (char const*), CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType)::{lambda(char const*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void* (char const*), CHmdSystemLatest::ChangeAppType(vr::EVRApplicationType)::{lambda(char const*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<void* (char const*), CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#1}>::_M_invoke(std::_Any_data const&, char const*&&)
 t std::_Function_handler<void* (char const*), CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void* (char const*), CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#1}> const&, std::_Manager_operation)
 t std::_Function_handler<void* (char const*), CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#2}>::_M_invoke(std::_Any_data const&, char const*&&)
 t std::_Function_handler<void* (char const*), CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#2}>::_M_manager(std::_Any_data&, std::_Function_handler<void* (char const*), CHmdSystemLatest::Init(vr::EVRApplicationType, char const*)::{lambda(char const*)#2}> const&, std::_Manager_operation)
 t std::_Function_handler<void* (char const*), InitInternalInterfacesNonStandard(void* (*)(char const*))::{lambda(char const*)#1}>::_M_invoke(std::_Any_data const&, char const*&&)
 t std::_Function_handler<void* (char const*), InitInternalInterfacesNonStandard(void* (*)(char const*))::{lambda(char const*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void* (char const*), InitInternalInterfacesNonStandard(void* (*)(char const*))::{lambda(char const*)#1}> const&, std::_Manager_operation)
 t std::_Hashtable<XrViewConfigurationType, std::pair<XrViewConfigurationType const, std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> > >, std::allocator<std::pair<XrViewConfigurationType const, std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> > > >, std::__detail::_Select1st, std::equal_to<XrViewConfigurationType>, vr::CEnumHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&)
 t std::_Hashtable<XrViewConfigurationType, std::pair<XrViewConfigurationType const, std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> > >, std::allocator<std::pair<XrViewConfigurationType const, std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> > > >, std::__detail::_Select1st, std::equal_to<XrViewConfigurationType>, vr::CEnumHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()
 t std::_Hashtable<XrViewConfigurationType, std::pair<XrViewConfigurationType const, std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> > >, std::allocator<std::pair<XrViewConfigurationType const, std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> > > >, std::__detail::_Select1st, std::equal_to<XrViewConfigurationType>, vr::CEnumHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&)
 t std::_Hashtable<XrViewConfigurationType, std::pair<XrViewConfigurationType const, std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> > >, std::allocator<std::pair<XrViewConfigurationType const, std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> > > >, std::__detail::_Select1st, std::equal_to<XrViewConfigurationType>, vr::CEnumHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()
 t std::_Hashtable<std::pair<int, int>, std::pair<std::pair<int, int> const, unsigned int>, std::allocator<std::pair<std::pair<int, int> const, unsigned int> >, std::__detail::_Select1st, vr::UndirectedEdgeEqual, vr::UndirectedEdgeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::pair<int, int> const&, unsigned long) const
 t std::_Hashtable<std::pair<int, int>, std::pair<std::pair<int, int> const, unsigned int>, std::allocator<std::pair<std::pair<int, int> const, unsigned int> >, std::__detail::_Select1st, vr::UndirectedEdgeEqual, vr::UndirectedEdgeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&)
 t std::_Hashtable<std::string, std::pair<std::string const, CVkExtensionEntry>, std::allocator<std::pair<std::string const, CVkExtensionEntry> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const
 t std::_Hashtable<std::string, std::pair<std::string const, CVkExtensionEntry>, std::allocator<std::pair<std::string const, CVkExtensionEntry> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)
 t std::_Hashtable<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const
 t std::_Hashtable<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)
 t std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > >, std::allocator<std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const
 t std::_Hashtable<std::string, std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > >, std::allocator<std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)
 t std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, std::string const&, unsigned long) const
 t std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(std::string const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, unsigned long>, true>*, unsigned long) [clone .isra.0]
 t std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(std::string const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<std::string const, unsigned long>, true>*, unsigned long) [clone .isra.0] [clone .cold]
 t std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&)
 t std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::~_Scoped_node()
 t std::_Hashtable<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&)
 t std::_Hashtable<std::type_index, std::pair<std::type_index const, ChildData>, std::allocator<std::pair<std::type_index const, ChildData> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::count(std::type_index const&) const
 t std::_Hashtable<unsigned long, std::pair<unsigned long const, std::string>, std::allocator<std::pair<unsigned long const, std::string> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, std::string>, false>*, unsigned long) [clone .isra.0]
 t std::_Hashtable<unsigned long, std::pair<unsigned long const, std::string>, std::allocator<std::pair<unsigned long const, std::string> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_insert_unique_node(unsigned long const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<unsigned long const, std::string>, false>*, unsigned long) [clone .isra.0] [clone .cold]
 t std::_Hashtable<unsigned long, std::pair<unsigned long const, std::string>, std::allocator<std::pair<unsigned long const, std::string> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()
 t std::_Hashtable<unsigned long, std::pair<unsigned long const, vr::IVRExternalProperties*>, std::allocator<std::pair<unsigned long const, vr::IVRExternalProperties*> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<unsigned long const, vr::IVRExternalProperties*>, false, false>)
 t std::_Hashtable<unsigned long, std::pair<unsigned long const, vr::IVRExternalProperties*>, std::allocator<std::pair<unsigned long const, vr::IVRExternalProperties*> >, std::__detail::_Select1st, std::equal_to<unsigned long>, std::hash<unsigned long>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::find(unsigned long const&)
 t std::_Hashtable<vr::HmdVector2_t, std::pair<vr::HmdVector2_t const, int>, std::allocator<std::pair<vr::HmdVector2_t const, int> >, std::__detail::_Select1st, vr::HmdVector2TolerancedEqual, vr::HmdVector2TolerancedHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, vr::HmdVector2_t const&, unsigned long) const
 t std::_Hashtable<vr::HmdVector2_t, std::pair<vr::HmdVector2_t const, int>, std::allocator<std::pair<vr::HmdVector2_t const, int> >, std::__detail::_Select1st, vr::HmdVector2TolerancedEqual, vr::HmdVector2TolerancedHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&)
 t std::_Rb_tree<AssertLookup_t, std::pair<AssertLookup_t const, bool>, std::_Select1st<std::pair<AssertLookup_t const, bool> >, std::less<AssertLookup_t>, std::allocator<std::pair<AssertLookup_t const, bool> > >::_M_erase(std::_Rb_tree_node<std::pair<AssertLookup_t const, bool> >*) [clone .isra.0]
 t std::_Rb_tree<AssertLookup_t, std::pair<AssertLookup_t const, bool>, std::_Select1st<std::pair<AssertLookup_t const, bool> >, std::less<AssertLookup_t>, std::allocator<std::pair<AssertLookup_t const, bool> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<AssertLookup_t const, bool> >, AssertLookup_t const&)
 t std::_Rb_tree<AssertLookup_t, std::pair<AssertLookup_t const, bool>, std::_Select1st<std::pair<AssertLookup_t const, bool> >, std::less<AssertLookup_t>, std::allocator<std::pair<AssertLookup_t const, bool> > >::_M_get_insert_unique_pos(AssertLookup_t const&)
 t std::_Rb_tree<CAnimSkeleton const*, std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > >, std::_Select1st<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > >, std::less<CAnimSkeleton const*>, std::allocator<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > > >::_M_erase(std::_Rb_tree_node<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > >*) [clone .isra.0]
 t std::_Rb_tree<CAnimSkeleton const*, std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > >, std::_Select1st<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > >, std::less<CAnimSkeleton const*>, std::allocator<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > >, CAnimSkeleton const* const&)
 t std::_Rb_tree<CAnimSkeleton const*, std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > >, std::_Select1st<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > >, std::less<CAnimSkeleton const*>, std::allocator<std::pair<CAnimSkeleton const* const, std::unique_ptr<CPoseUpdateResources, std::default_delete<CPoseUpdateResources> > > > >::_M_get_insert_unique_pos(CAnimSkeleton const* const&)
 t std::_Rb_tree<CSxrSession::ActionStateKey_t, std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t>, std::_Select1st<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> >, std::less<CSxrSession::ActionStateKey_t>, std::allocator<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> > >::_M_erase(std::_Rb_tree_node<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> >*) [clone .isra.0]
 t std::_Rb_tree<CSxrSession::ActionStateKey_t, std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t>, std::_Select1st<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> >, std::less<CSxrSession::ActionStateKey_t>, std::allocator<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> > >::find(CSxrSession::ActionStateKey_t const&)
 t std::_Rb_tree<CVRCompositorSharedTextures::CTextureCacheKey, std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ISharedTextureSet*>, std::_Select1st<std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ISharedTextureSet*> >, std::less<CVRCompositorSharedTextures::CTextureCacheKey>, std::allocator<std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ISharedTextureSet*> > >::_M_erase(std::_Rb_tree_node<std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ISharedTextureSet*> >*) [clone .isra.0]
 t std::_Rb_tree<CVRCompositorSharedTextures::CTextureCacheKey, std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ShaderResourceViewEntry_t>, std::_Select1st<std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ShaderResourceViewEntry_t> >, std::less<CVRCompositorSharedTextures::CTextureCacheKey>, std::allocator<std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ShaderResourceViewEntry_t> > >::_M_erase(std::_Rb_tree_node<std::pair<CVRCompositorSharedTextures::CTextureCacheKey const, CVRCompositorSharedTextures::ShaderResourceViewEntry_t> >*) [clone .isra.0]
 t std::_Rb_tree<CVRControllerTypeBindings*, std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > >, std::_Select1st<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::less<CVRControllerTypeBindings*>, std::allocator<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > > >::_M_erase(std::_Rb_tree_node<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > >*)
 t std::_Rb_tree<CVRControllerTypeBindings*, std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > >, std::_Select1st<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::less<CVRControllerTypeBindings*>, std::allocator<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > >, CVRControllerTypeBindings* const&)
 t std::_Rb_tree<CVRControllerTypeBindings*, std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > >, std::_Select1st<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > >, std::less<CVRControllerTypeBindings*>, std::allocator<std::pair<CVRControllerTypeBindings* const, std::set<std::string, std::less<std::string>, std::allocator<std::string> > > > >::_M_get_insert_unique_pos(CVRControllerTypeBindings* const&)
 t std::_Rb_tree<CVkResourceBase*, CVkResourceBase*, std::_Identity<CVkResourceBase*>, CVkResourceComparator, std::allocator<CVkResourceBase*> >::_M_erase(std::_Rb_tree_node<CVkResourceBase*>*) [clone .isra.0]
 t std::_Rb_tree<CVkTimeline*, std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t>, std::_Select1st<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> >, std::less<CVkTimeline*>, std::allocator<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> > >::_M_erase(std::_Rb_tree_node<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> >*) [clone .isra.0]
 t std::_Rb_tree<CVkTimeline*, std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t>, std::_Select1st<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> >, std::less<CVkTimeline*>, std::allocator<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> >, CVkTimeline* const&)
 t std::_Rb_tree<CVkTimeline*, std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t>, std::_Select1st<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> >, std::less<CVkTimeline*>, std::allocator<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> > >::_M_get_insert_unique_pos(CVkTimeline* const&)
 t std::_Rb_tree<CVulkanVRRenderer::FramebufferState_t, std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*>, std::_Select1st<std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*> >, std::less<CVulkanVRRenderer::FramebufferState_t>, std::allocator<std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*> > >::_M_erase(std::_Rb_tree_node<std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*> >*) [clone .isra.0]
 t std::_Rb_tree<CVulkanVRRenderer::RenderPassState_t, std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*>, std::_Select1st<std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*> >, std::less<CVulkanVRRenderer::RenderPassState_t>, std::allocator<std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*> > >::_M_erase(std::_Rb_tree_node<std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*> >*) [clone .isra.0]
 t std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_M_erase(std::_Rb_tree_node<std::pair<Json::Value::CZString const, Json::Value> >*) [clone .isra.0]
 t std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<Json::Value::CZString const, Json::Value> >, Json::Value::CZString const&)
 t std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_M_get_insert_unique_pos(Json::Value::CZString const&)
 t std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::equal_range(Json::Value::CZString const&)
 t std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::find(Json::Value::CZString const&)
 t std::_Rb_tree<VRRenderer::VulkanNativeTexture_t, std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*>, std::_Select1st<std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*> >, CVulkanVRRenderer::VulkanNativeTextureCompare_t, std::allocator<std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*> > >::_M_erase(std::_Rb_tree_node<std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*> >*) [clone .isra.0]
 t std::_Rb_tree<VkDevice_T*, std::pair<VkDevice_T* const, VulkanFunctionPointers_t>, std::_Select1st<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> >, std::less<VkDevice_T*>, std::allocator<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> > >::_M_erase(std::_Rb_tree_node<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> >*) [clone .isra.0]
 t std::_Rb_tree<VkDevice_T*, std::pair<VkDevice_T* const, VulkanFunctionPointers_t>, std::_Select1st<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> >, std::less<VkDevice_T*>, std::allocator<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> >, VkDevice_T* const&)
 t std::_Rb_tree<VkDevice_T*, std::pair<VkDevice_T* const, VulkanFunctionPointers_t>, std::_Select1st<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> >, std::less<VkDevice_T*>, std::allocator<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> > >::_M_get_insert_unique_pos(VkDevice_T* const&)
 t std::_Rb_tree<XrActionSet_T*, XrActionSet_T*, std::_Identity<XrActionSet_T*>, std::less<XrActionSet_T*>, std::allocator<XrActionSet_T*> >::_M_erase(std::_Rb_tree_node<XrActionSet_T*>*) [clone .isra.0]
 t std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_M_erase(std::_Rb_tree_node<XrActionType>*) [clone .isra.0]
 t std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::find(XrActionType const&) const
 t std::_Rb_tree<XrSwapchain_T*, XrSwapchain_T*, std::_Identity<XrSwapchain_T*>, std::less<XrSwapchain_T*>, std::allocator<XrSwapchain_T*> >::_M_erase(std::_Rb_tree_node<XrSwapchain_T*>*) [clone .isra.0]
 t std::_Rb_tree<facet::CCompositionClient::SwapchainImage_t, facet::CCompositionClient::SwapchainImage_t, std::_Identity<facet::CCompositionClient::SwapchainImage_t>, std::less<facet::CCompositionClient::SwapchainImage_t>, std::allocator<facet::CCompositionClient::SwapchainImage_t> >::_M_erase(std::_Rb_tree_node<facet::CCompositionClient::SwapchainImage_t>*) [clone .isra.0]
 t std::_Rb_tree<facet::CCompositionClient::SwapchainImage_t, facet::CCompositionClient::SwapchainImage_t, std::_Identity<facet::CCompositionClient::SwapchainImage_t>, std::less<facet::CCompositionClient::SwapchainImage_t>, std::allocator<facet::CCompositionClient::SwapchainImage_t> >::equal_range(facet::CCompositionClient::SwapchainImage_t const&)
 t std::_Rb_tree<facet::CCompositionClient::SwapchainImage_t, facet::CCompositionClient::SwapchainImage_t, std::_Identity<facet::CCompositionClient::SwapchainImage_t>, std::less<facet::CCompositionClient::SwapchainImage_t>, std::allocator<facet::CCompositionClient::SwapchainImage_t> >::erase(facet::CCompositionClient::SwapchainImage_t const&) [clone .isra.0]
 t std::_Rb_tree<facet::CCompositionClient::SwapchainImage_t, facet::CCompositionClient::SwapchainImage_t, std::_Identity<facet::CCompositionClient::SwapchainImage_t>, std::less<facet::CCompositionClient::SwapchainImage_t>, std::allocator<facet::CCompositionClient::SwapchainImage_t> >::find(facet::CCompositionClient::SwapchainImage_t const&)
 t std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
 t std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<int>, int const&)
 t std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_insert_unique_pos(int const&)
 t std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Rb_tree_impl<std::less<int>, true>::_Rb_tree_impl()
 t std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::find(int const&) const
 t std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::~_Rb_tree()
 t std::_Rb_tree<int, std::pair<int const, std::string>, std::_Select1st<std::pair<int const, std::string> >, std::less<int>, std::allocator<std::pair<int const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, std::string> >*)
 t std::_Rb_tree<int, std::pair<int const, std::string>, std::_Select1st<std::pair<int const, std::string> >, std::less<int>, std::allocator<std::pair<int const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, std::string> >, int const&)
 t std::_Rb_tree<int, std::pair<int const, std::string>, std::_Select1st<std::pair<int const, std::string> >, std::less<int>, std::allocator<std::pair<int const, std::string> > >::_M_get_insert_unique_pos(int const&)
 t std::_Rb_tree<long, std::pair<long const, long>, std::_Select1st<std::pair<long const, long> >, std::less<long>, std::allocator<std::pair<long const, long> > >::_M_erase(std::_Rb_tree_node<std::pair<long const, long> >*) [clone .isra.0]
 t std::_Rb_tree<long, std::pair<long const, long>, std::_Select1st<std::pair<long const, long> >, std::less<long>, std::allocator<std::pair<long const, long> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<long const, long> >, long const&)
 t std::_Rb_tree<long, std::pair<long const, long>, std::_Select1st<std::pair<long const, long> >, std::less<long>, std::allocator<std::pair<long const, long> > >::_M_get_insert_unique_pos(long const&)
 t std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >*)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CSettingsSetting*>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> >*) [clone .isra.0]
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CSettingsSetting*>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> >, std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CSettingsSetting*>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CSettingsSetting*> > >::_M_get_insert_unique_pos(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> >*) [clone .isra.0]
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> >, std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> > >::_M_get_insert_unique_pos(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetBool_Response> > >::find(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> >*) [clone .isra.0]
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> >, std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> > >::_M_get_insert_unique_pos(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetNumeric_Response> > >::find(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> >*) [clone .isra.0]
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> >, std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> > >::_M_get_insert_unique_pos(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetString_Response> > >::find(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> > >::_M_erase(std::_Rb_tree_node<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> >*) [clone .isra.0]
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> >, std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::pair<std::string, std::string>, std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response>, std::_Select1st<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> >, std::less<std::pair<std::string, std::string> >, std::allocator<std::pair<std::pair<std::string, std::string> const, CVRMsg_Settings_GetValueType_Response> > >::_M_get_insert_unique_pos(std::pair<std::string, std::string> const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, CActionBindingAliasInfo> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, CActionBindingAliasInfo> >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t>, std::_Select1st<std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t>, std::_Select1st<std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, CVRMsg_ApplicationInfo>, std::_Select1st<std::pair<std::string const, CVRMsg_ApplicationInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CVRMsg_ApplicationInfo> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, CVRMsg_ApplicationInfo> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, CVRMsg_ApplicationInfo>, std::_Select1st<std::pair<std::string const, CVRMsg_ApplicationInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CVRMsg_ApplicationInfo> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, CVRMsg_ApplicationInfo> >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, CVRMsg_ApplicationInfo>, std::_Select1st<std::pair<std::string const, CVRMsg_ApplicationInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CVRMsg_ApplicationInfo> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, Json::Value> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, Json::Value> >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::find(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::find(std::string const&) const
 t std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, double> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::operator=(std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > > const&) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::operator=(std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > > const&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, int> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, int> >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::find(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::function<void (Json::Value const&)> >, std::_Select1st<std::pair<std::string const, std::function<void (Json::Value const&)> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::function<void (Json::Value const&)> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::function<void (Json::Value const&)> > >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::function<void (Json::Value const&)> >, std::_Select1st<std::pair<std::string const, std::function<void (Json::Value const&)> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::function<void (Json::Value const&)> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::function<void (Json::Value const&)> > >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::function<void (Json::Value const&)> >, std::_Select1st<std::pair<std::string const, std::function<void (Json::Value const&)> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::function<void (Json::Value const&)> > > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::pair<void const*, int> > >*)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::pair<void const*, int> > >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_Rb_tree_impl<std::less<std::string>, true>::_Rb_tree_impl()
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CInputActionSet> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CInputActionSet> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::shared_ptr<CInputActionSet> > >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CInputActionSet> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CInputActionSet> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CInputActionSet> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CInputActionSet> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CInputActionSet> > > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> > > >::find(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::string> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::find(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::find(std::string const&) const
 t std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::operator=(std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::operator=(std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > > const&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > >, std::_Select1st<std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > > >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > >, std::_Select1st<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > >, std::_Select1st<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > >, std::_Select1st<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, tinygltf::Parameter> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, tinygltf::Parameter> >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::string const, tinygltf::Value> >, std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Rb_tree(std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > > const&)
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::operator=(std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > > const&) [clone .isra.0]
 t std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::operator=(std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > > const&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<std::string const, unsigned long> >*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*)
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) [clone .isra.0]
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::string>, std::string const&)
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_get_insert_unique_pos(std::string const&)
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Rb_tree_impl<std::less<std::string>, true>::_Rb_tree_impl()
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&)
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::find(std::string const&) const
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::operator=(std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> > const&) [clone .isra.0]
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::operator=(std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> > const&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::~_Rb_tree()
 t std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<tinyobj::vertex_index const, unsigned int> >*) [clone .isra.0]
 t std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<tinyobj::vertex_index const, unsigned int> >, tinyobj::vertex_index const&)
 t std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_M_get_insert_unique_pos(tinyobj::vertex_index const&)
 t std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::find(tinyobj::vertex_index const&)
 t std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned long>, std::_Select1st<std::pair<unsigned int const, unsigned long> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, unsigned long> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned long>, std::_Select1st<std::pair<unsigned int const, unsigned long> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned long> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, unsigned long> >, unsigned int const&)
 t std::_Rb_tree<unsigned int, std::pair<unsigned int const, unsigned long>, std::_Select1st<std::pair<unsigned int const, unsigned long> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, unsigned long> > >::_M_get_insert_unique_pos(unsigned int const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CAnimSkeleton const*>, std::_Select1st<std::pair<unsigned long const, CAnimSkeleton const*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CAnimSkeleton const*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, CAnimSkeleton const*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CAnimSkeleton const*>, std::_Select1st<std::pair<unsigned long const, CAnimSkeleton const*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CAnimSkeleton const*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, CAnimSkeleton const*> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CAnimSkeleton const*>, std::_Select1st<std::pair<unsigned long const, CAnimSkeleton const*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CAnimSkeleton const*> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CIOBufferCursor*>, std::_Select1st<std::pair<unsigned long const, CIOBufferCursor*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CIOBufferCursor*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, CIOBufferCursor*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, COverlayViewResourceInfo*>, std::_Select1st<std::pair<unsigned long const, COverlayViewResourceInfo*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, COverlayViewResourceInfo*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, COverlayViewResourceInfo*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, COverlayViewResourceInfo*>, std::_Select1st<std::pair<unsigned long const, COverlayViewResourceInfo*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, COverlayViewResourceInfo*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, COverlayViewResourceInfo*> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, COverlayViewResourceInfo*>, std::_Select1st<std::pair<unsigned long const, COverlayViewResourceInfo*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, COverlayViewResourceInfo*> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CPropertyContainer*>, std::_Select1st<std::pair<unsigned long const, CPropertyContainer*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CPropertyContainer*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, CPropertyContainer*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CPropertyContainer*>, std::_Select1st<std::pair<unsigned long const, CPropertyContainer*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CPropertyContainer*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, CPropertyContainer*> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CPropertyContainer*>, std::_Select1st<std::pair<unsigned long const, CPropertyContainer*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CPropertyContainer*> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CachedActionValue_t>, std::_Select1st<std::pair<unsigned long const, CachedActionValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CachedActionValue_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, CachedActionValue_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CachedActionValue_t>, std::_Select1st<std::pair<unsigned long const, CachedActionValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CachedActionValue_t> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, CachedActionValue_t> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, CachedActionValue_t>, std::_Select1st<std::pair<unsigned long const, CachedActionValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CachedActionValue_t> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, ConfigCachedActionValue_t>, std::_Select1st<std::pair<unsigned long const, ConfigCachedActionValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, ConfigCachedActionValue_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, ConfigCachedActionValue_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, ConfigCachedProgressIndicator_t>, std::_Select1st<std::pair<unsigned long const, ConfigCachedProgressIndicator_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, ConfigCachedProgressIndicator_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, ConfigCachedProgressIndicator_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, HandleAndString_t>, std::_Select1st<std::pair<unsigned long const, HandleAndString_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, HandleAndString_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, HandleAndString_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, IPC::IEvent*>, std::_Select1st<std::pair<unsigned long const, IPC::IEvent*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, IPC::IEvent*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, IPC::IEvent*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, InputSourceInfo_t>, std::_Select1st<std::pair<unsigned long const, InputSourceInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, InputSourceInfo_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, InputSourceInfo_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, InputSourceInfo_t>, std::_Select1st<std::pair<unsigned long const, InputSourceInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, InputSourceInfo_t> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, InputSourceInfo_t> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, InputSourceInfo_t>, std::_Select1st<std::pair<unsigned long const, InputSourceInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, InputSourceInfo_t> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, MailboxInfo_t>, std::_Select1st<std::pair<unsigned long const, MailboxInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, MailboxInfo_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, MailboxInfo_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, MailboxInfo_t>, std::_Select1st<std::pair<unsigned long const, MailboxInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, MailboxInfo_t> > >::erase(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, SharedInputComponentInfo_t>, std::_Select1st<std::pair<unsigned long const, SharedInputComponentInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SharedInputComponentInfo_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, SharedInputComponentInfo_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, SharedInputComponentInfo_t>, std::_Select1st<std::pair<unsigned long const, SharedInputComponentInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SharedInputComponentInfo_t> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, SharedInputComponentInfo_t> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, SharedInputComponentInfo_t>, std::_Select1st<std::pair<unsigned long const, SharedInputComponentInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SharedInputComponentInfo_t> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, SuggestedBinding>, std::_Select1st<std::pair<unsigned long const, SuggestedBinding> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SuggestedBinding> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, SuggestedBinding> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, VRInputValue_t>, std::_Select1st<std::pair<unsigned long const, VRInputValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VRInputValue_t> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, VRInputValue_t> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, VRInputValue_t>, std::_Select1st<std::pair<unsigned long const, VRInputValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VRInputValue_t> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, VRInputValue_t> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, VRInputValue_t>, std::_Select1st<std::pair<unsigned long const, VRInputValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VRInputValue_t> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, VulkanVRRenderer::Texture*>, std::_Select1st<std::pair<unsigned long const, VulkanVRRenderer::Texture*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VulkanVRRenderer::Texture*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, VulkanVRRenderer::Texture*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, VulkanVRRenderer::Texture*>, std::_Select1st<std::pair<unsigned long const, VulkanVRRenderer::Texture*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VulkanVRRenderer::Texture*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, VulkanVRRenderer::Texture*> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, VulkanVRRenderer::Texture*>, std::_Select1st<std::pair<unsigned long const, VulkanVRRenderer::Texture*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VulkanVRRenderer::Texture*> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, VulkanVRRenderer::Texture*>, std::_Select1st<std::pair<unsigned long const, VulkanVRRenderer::Texture*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VulkanVRRenderer::Texture*> > >::erase(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, bool>, std::_Select1st<std::pair<unsigned long const, bool> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, bool> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, bool> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, bool>, std::_Select1st<std::pair<unsigned long const, bool> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, bool> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, bool> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, bool>, std::_Select1st<std::pair<unsigned long const, bool> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, bool> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, int>, std::_Select1st<std::pair<unsigned long const, int> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, int> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > >, std::_Select1st<std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> >, std::_Select1st<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> >, std::_Select1st<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> >, std::_Select1st<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > >, std::_Select1st<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > >, std::_Select1st<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > >, std::_Select1st<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::shared_ptr<CBlockQueue> >, std::_Select1st<std::pair<unsigned long const, std::shared_ptr<CBlockQueue> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::shared_ptr<CBlockQueue> > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::shared_ptr<CBlockQueue> > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::string> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > >, std::_Select1st<std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > >, std::_Select1st<std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > >, std::_Select1st<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > >, std::_Select1st<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > >, std::_Select1st<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > >, std::_Select1st<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > > > >::find(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > >*)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > >, std::_Select1st<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> >, std::_Select1st<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> >, std::_Select1st<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> >, std::_Select1st<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned int>, std::_Select1st<std::pair<unsigned long const, unsigned int> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, unsigned int> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, unsigned long> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, unsigned long> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, void*>, std::_Select1st<std::pair<unsigned long const, void*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, void*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, void*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, void*>, std::_Select1st<std::pair<unsigned long const, void*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, void*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, void*> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, void*>, std::_Select1st<std::pair<unsigned long const, void*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, void*> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, vr::VROverlayView_t*>, std::_Select1st<std::pair<unsigned long const, vr::VROverlayView_t*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, vr::VROverlayView_t*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned long const, vr::VROverlayView_t*> >*) [clone .isra.0]
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, vr::VROverlayView_t*>, std::_Select1st<std::pair<unsigned long const, vr::VROverlayView_t*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, vr::VROverlayView_t*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, vr::VROverlayView_t*> >, unsigned long const&)
 t std::_Rb_tree<unsigned long, std::pair<unsigned long const, vr::VROverlayView_t*>, std::_Select1st<std::pair<unsigned long const, vr::VROverlayView_t*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, vr::VROverlayView_t*> > >::_M_get_insert_unique_pos(unsigned long const&)
 t std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_erase(std::_Rb_tree_node<unsigned long>*) [clone .isra.0]
 t std::_Rb_tree<vr::ETrackedDeviceProperty, std::pair<vr::ETrackedDeviceProperty const, std::string>, std::_Select1st<std::pair<vr::ETrackedDeviceProperty const, std::string> >, std::less<vr::ETrackedDeviceProperty>, std::allocator<std::pair<vr::ETrackedDeviceProperty const, std::string> > >::_M_erase(std::_Rb_tree_node<std::pair<vr::ETrackedDeviceProperty const, std::string> >*) [clone .isra.0]
 t std::_Rb_tree<vr::ETrackedDeviceProperty, std::pair<vr::ETrackedDeviceProperty const, std::string>, std::_Select1st<std::pair<vr::ETrackedDeviceProperty const, std::string> >, std::less<vr::ETrackedDeviceProperty>, std::allocator<std::pair<vr::ETrackedDeviceProperty const, std::string> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<vr::ETrackedDeviceProperty const, std::string> >, vr::ETrackedDeviceProperty const&)
 t std::_Rb_tree<vr::ETrackedDeviceProperty, std::pair<vr::ETrackedDeviceProperty const, std::string>, std::_Select1st<std::pair<vr::ETrackedDeviceProperty const, std::string> >, std::less<vr::ETrackedDeviceProperty>, std::allocator<std::pair<vr::ETrackedDeviceProperty const, std::string> > >::_M_get_insert_unique_pos(vr::ETrackedDeviceProperty const&)
 t std::_Rb_tree<vr::IHmdWindow::EWindowType, std::pair<vr::IHmdWindow::EWindowType const, bool>, std::_Select1st<std::pair<vr::IHmdWindow::EWindowType const, bool> >, std::less<vr::IHmdWindow::EWindowType>, std::allocator<std::pair<vr::IHmdWindow::EWindowType const, bool> > >::_M_erase(std::_Rb_tree_node<std::pair<vr::IHmdWindow::EWindowType const, bool> >*) [clone .isra.0]
 t std::_Rb_tree<vr::IHmdWindow::EWindowType, std::pair<vr::IHmdWindow::EWindowType const, bool>, std::_Select1st<std::pair<vr::IHmdWindow::EWindowType const, bool> >, std::less<vr::IHmdWindow::EWindowType>, std::allocator<std::pair<vr::IHmdWindow::EWindowType const, bool> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<vr::IHmdWindow::EWindowType const, bool> >, vr::IHmdWindow::EWindowType const&)
 t std::_Rb_tree<vr::IHmdWindow::EWindowType, std::pair<vr::IHmdWindow::EWindowType const, bool>, std::_Select1st<std::pair<vr::IHmdWindow::EWindowType const, bool> >, std::less<vr::IHmdWindow::EWindowType>, std::allocator<std::pair<vr::IHmdWindow::EWindowType const, bool> > >::_M_get_insert_unique_pos(vr::IHmdWindow::EWindowType const&)
 t std::_Rb_tree_iterator<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> > std::_Rb_tree<CVkTimeline*, std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t>, std::_Select1st<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> >, std::less<CVkTimeline*>, std::allocator<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<CVkTimeline* const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<CVkTimeline* const, CVkGarbageCollector::Bucket_t> >, std::piecewise_construct_t const&, std::tuple<CVkTimeline* const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<Json::Value::CZString const, Json::Value> > std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_M_emplace_hint_unique<std::pair<Json::Value::CZString const, Json::Value>&>(std::_Rb_tree_const_iterator<std::pair<Json::Value::CZString const, Json::Value> >, std::pair<Json::Value::CZString const, Json::Value>&)
 t std::_Rb_tree_iterator<std::pair<long const, long> > std::_Rb_tree<long, std::pair<long const, long>, std::_Select1st<std::pair<long const, long> >, std::less<long>, std::allocator<std::pair<long const, long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<long const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<long const, long> >, std::piecewise_construct_t const&, std::tuple<long const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > std::_Rb_tree<std::pair<std::string, int>, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > >, std::less<std::pair<std::string, int> >, std::allocator<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > > >::_M_insert_<std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > const&>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<std::pair<std::string, int> const, std::pair<void const*, int> > const&)
 t std::_Rb_tree_iterator<std::pair<std::string const, Json::Value> > std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, Json::Value> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, Json::Value> > std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, Json::Value> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<std::string const, int> > std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, int> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, int> > std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, int> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<std::string const, std::pair<void const*, int> > > std::_Rb_tree<std::string, std::pair<std::string const, std::pair<void const*, int> >, std::_Select1st<std::pair<std::string const, std::pair<void const*, int> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::pair<void const*, int> > > >::_M_insert_<std::pair<std::string const, std::pair<void const*, int> > >(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<std::string const, std::pair<void const*, int> >&&)
 t std::_Rb_tree_iterator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > std::_Rb_tree<std::string, std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> >, std::_Select1st<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, std::string> > std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::string> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > > std::_Rb_tree<std::string, std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > >, std::_Select1st<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > > std::_Rb_tree<std::string, std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > >, std::_Select1st<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, std::unique_ptr<CAnimResource const, std::default_delete<CAnimResource const> > > >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<std::string const, tinygltf::Parameter> > std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, tinygltf::Parameter> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, tinygltf::Parameter> > std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, tinygltf::Parameter> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<std::string const, tinygltf::Value> > std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, tinygltf::Value> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<std::string const, tinygltf::Value> > std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<std::string const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<std::string const, tinygltf::Value> >, std::piecewise_construct_t const&, std::tuple<std::string const&>&&, std::tuple<>&&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::pair<unsigned long const, COverlayViewResourceInfo*> > std::_Rb_tree<unsigned long, std::pair<unsigned long const, COverlayViewResourceInfo*>, std::_Select1st<std::pair<unsigned long const, COverlayViewResourceInfo*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, COverlayViewResourceInfo*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned long const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned long const, COverlayViewResourceInfo*> >, std::piecewise_construct_t const&, std::tuple<unsigned long const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<unsigned long const, ConfigCachedActionValue_t> > std::_Rb_tree<unsigned long, std::pair<unsigned long const, ConfigCachedActionValue_t>, std::_Select1st<std::pair<unsigned long const, ConfigCachedActionValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, ConfigCachedActionValue_t> > >::_M_emplace_equal<std::pair<unsigned long, ConfigCachedActionValue_t> >(std::pair<unsigned long, ConfigCachedActionValue_t>&&)
 t std::_Rb_tree_iterator<std::pair<unsigned long const, HandleAndString_t> > std::_Rb_tree<unsigned long, std::pair<unsigned long const, HandleAndString_t>, std::_Select1st<std::pair<unsigned long const, HandleAndString_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, HandleAndString_t> > >::_M_emplace_equal<std::pair<unsigned long, HandleAndString_t> >(std::pair<unsigned long, HandleAndString_t>&&)
 t std::_Rb_tree_iterator<std::pair<unsigned long const, SuggestedBinding> > std::_Rb_tree<unsigned long, std::pair<unsigned long const, SuggestedBinding>, std::_Select1st<std::pair<unsigned long const, SuggestedBinding> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, SuggestedBinding> > >::_M_emplace_equal<std::pair<unsigned long, SuggestedBinding> >(std::pair<unsigned long, SuggestedBinding>&&)
 t std::_Rb_tree_iterator<std::pair<unsigned long const, VRInputValue_t> > std::_Rb_tree<unsigned long, std::pair<unsigned long const, VRInputValue_t>, std::_Select1st<std::pair<unsigned long const, VRInputValue_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, VRInputValue_t> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned long const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned long const, VRInputValue_t> >, std::piecewise_construct_t const&, std::tuple<unsigned long const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > >, std::_Select1st<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned long&&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > >, std::piecewise_construct_t const&, std::tuple<unsigned long&&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > > std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> >, std::_Select1st<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned long const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > >, std::piecewise_construct_t const&, std::tuple<unsigned long const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<unsigned long const, unsigned long> > std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned long>, std::_Select1st<std::pair<unsigned long const, unsigned long> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned long const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned long const, unsigned long> >, std::piecewise_construct_t const&, std::tuple<unsigned long const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<unsigned long const, void*> > std::_Rb_tree<unsigned long, std::pair<unsigned long const, void*>, std::_Select1st<std::pair<unsigned long const, void*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, void*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned long const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned long const, void*> >, std::piecewise_construct_t const&, std::tuple<unsigned long const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::pair<vr::IHmdWindow::EWindowType const, bool> > std::_Rb_tree<vr::IHmdWindow::EWindowType, std::pair<vr::IHmdWindow::EWindowType const, bool>, std::_Select1st<std::pair<vr::IHmdWindow::EWindowType const, bool> >, std::less<vr::IHmdWindow::EWindowType>, std::allocator<std::pair<vr::IHmdWindow::EWindowType const, bool> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<vr::IHmdWindow::EWindowType const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<vr::IHmdWindow::EWindowType const, bool> >, std::piecewise_construct_t const&, std::tuple<vr::IHmdWindow::EWindowType const&>&&, std::tuple<>&&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::string> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_<std::string const&, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::string const&, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_iterator<std::string> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_<std::string const&, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::string const&, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_iterator<std::string> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_<std::string, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::string&&, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<XrActionType>* std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_M_copy<std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_Alloc_node>(std::_Rb_tree_node<XrActionType> const*, std::_Rb_tree_node_base*, std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<XrActionType>* std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_M_copy<std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_Alloc_node>(std::_Rb_tree_node<XrActionType> const*, std::_Rb_tree_node_base*, std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<Json::Value::CZString const, Json::Value> >* std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_M_copy<std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<Json::Value::CZString const, Json::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<Json::Value::CZString const, Json::Value> >* std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_M_copy<std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<Json::Value::CZString const, Json::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<Json::Value::CZString, std::pair<Json::Value::CZString const, Json::Value>, std::_Select1st<std::pair<Json::Value::CZString const, Json::Value> >, std::less<Json::Value::CZString>, std::allocator<std::pair<Json::Value::CZString const, Json::Value> > >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, CActionBindingAliasInfo> >* std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, CActionBindingAliasInfo> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_Reuse_or_alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, CActionBindingAliasInfo> >* std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, CActionBindingAliasInfo> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_Reuse_or_alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, CActionBindingAliasInfo> >* std::_Rb_tree<std::string, std::pair<std::string const, CActionBindingAliasInfo>, std::_Select1st<std::pair<std::string const, CActionBindingAliasInfo> >, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingAliasInfo> > >::_Reuse_or_alloc_node::operator()<std::pair<std::string const, CActionBindingAliasInfo> const&>(std::pair<std::string const, CActionBindingAliasInfo> const&)
 t std::_Rb_tree_node<std::pair<std::string const, Json::Value> >* std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, Json::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_Reuse_or_alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, Json::Value> >* std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, Json::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_Reuse_or_alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, Json::Value> >* std::_Rb_tree<std::string, std::pair<std::string const, Json::Value>, std::_Select1st<std::pair<std::string const, Json::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::_Reuse_or_alloc_node::operator()<std::pair<std::string const, Json::Value> const&>(std::pair<std::string const, Json::Value> const&)
 t std::_Rb_tree_node<std::pair<std::string const, double> >* std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, double> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, double> >* std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, double> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_Reuse_or_alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, double> >* std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, double> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_Reuse_or_alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, double> >* std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_Reuse_or_alloc_node::operator()<std::pair<std::string const, double> const&>(std::pair<std::string const, double> const&)
 t std::_Rb_tree_node<std::pair<std::string const, int> >* std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, int> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, int> >* std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, int> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >* std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >, std::_Select1st<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, std::pair<void const*, int> > >::_Rb_tree_node<std::pair<std::string const, std::pair<void const*, int> > >(std::pair<std::string const, std::pair<void const*, int> >&&)
 t std::_Rb_tree_node<std::pair<std::string const, std::pair<void const*, int> > >::_Rb_tree_node<std::pair<std::string const, std::pair<void const*, int> > const&>(std::pair<std::string const, std::pair<void const*, int> > const&)
 t std::_Rb_tree_node<std::pair<std::string const, std::string> >* std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, std::string> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, std::string> >* std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, std::string> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, std::string> >* std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, std::string> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Reuse_or_alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, std::string> >* std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, std::string> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Reuse_or_alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, std::string> >* std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_Reuse_or_alloc_node::operator()<std::pair<std::string const, std::string> const&>(std::pair<std::string const, std::string> const&)
 t std::_Rb_tree_node<std::pair<std::string const, tinygltf::Parameter> >* std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, tinygltf::Parameter> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> >* std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> >* std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> >* std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Reuse_or_alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> >* std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_M_copy<std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<std::string const, tinygltf::Value> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::_Reuse_or_alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::pair<tinyobj::vertex_index const, unsigned int> >* std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_M_copy<std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<tinyobj::vertex_index const, unsigned int> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::pair<tinyobj::vertex_index const, unsigned int> >* std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_M_copy<std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_Alloc_node>(std::_Rb_tree_node<std::pair<tinyobj::vertex_index const, unsigned int> > const*, std::_Rb_tree_node_base*, std::_Rb_tree<tinyobj::vertex_index, std::pair<tinyobj::vertex_index const, unsigned int>, std::_Select1st<std::pair<tinyobj::vertex_index const, unsigned int> >, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy<std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node>(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy<std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node>(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy<std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Reuse_or_alloc_node&)
 t std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy<std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Reuse_or_alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_copy<std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::string> const*, std::_Rb_tree_node_base*, std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Reuse_or_alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Rb_tree_node<std::string>* std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_Reuse_or_alloc_node::operator()<std::string const&>(std::string const&)
 t std::_Rb_tree_node<unsigned long>* std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_copy<std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_Alloc_node>(std::_Rb_tree_node<unsigned long> const*, std::_Rb_tree_node_base*, std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_Alloc_node&) [clone .isra.0]
 t std::_Rb_tree_node<unsigned long>* std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_copy<std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_Alloc_node>(std::_Rb_tree_node<unsigned long> const*, std::_Rb_tree_node_base*, std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_Alloc_node&) [clone .isra.0] [clone .cold]
 t std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy()
 t std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
 t std::_Sp_counted_ptr<decltype(nullptr), (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CBlockQueue, std::allocator<CBlockQueue>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CBlockQueue, std::allocator<CBlockQueue>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CBlockQueue, std::allocator<CBlockQueue>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CBlockQueue, std::allocator<CBlockQueue>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<CInputActionSet, std::allocator<CInputActionSet>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CInputActionSet, std::allocator<CInputActionSet>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CInputActionSet, std::allocator<CInputActionSet>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CInputActionSet, std::allocator<CInputActionSet>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<CRenderModelManager::ModelInfo_t, std::allocator<CRenderModelManager::ModelInfo_t>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CRenderModelManager::ModelInfo_t, std::allocator<CRenderModelManager::ModelInfo_t>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CRenderModelManager::ModelInfo_t, std::allocator<CRenderModelManager::ModelInfo_t>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CRenderModelManager::ModelInfo_t, std::allocator<CRenderModelManager::ModelInfo_t>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<CSharedResourceBaseLinux::CSharedResourceData, std::allocator<CSharedResourceBaseLinux::CSharedResourceData>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CSharedResourceBaseLinux::CSharedResourceData, std::allocator<CSharedResourceBaseLinux::CSharedResourceData>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CSharedResourceBaseLinux::CSharedResourceData, std::allocator<CSharedResourceBaseLinux::CSharedResourceData>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CSharedResourceBaseLinux::CSharedResourceData, std::allocator<CSharedResourceBaseLinux::CSharedResourceData>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<CSimulatedTrackpadClick, std::allocator<CSimulatedTrackpadClick>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CSimulatedTrackpadClick, std::allocator<CSimulatedTrackpadClick>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CSimulatedTrackpadClick, std::allocator<CSimulatedTrackpadClick>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CSimulatedTrackpadClick, std::allocator<CSimulatedTrackpadClick>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<CSimulatedTriggerPull, std::allocator<CSimulatedTriggerPull>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CSimulatedTriggerPull, std::allocator<CSimulatedTriggerPull>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CSimulatedTriggerPull, std::allocator<CSimulatedTriggerPull>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CSimulatedTriggerPull, std::allocator<CSimulatedTriggerPull>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<CVRCompositorSharedTextures::CVulkanFence, std::allocator<CVRCompositorSharedTextures::CVulkanFence>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CVRCompositorSharedTextures::CVulkanFence, std::allocator<CVRCompositorSharedTextures::CVulkanFence>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CVRCompositorSharedTextures::CVulkanFence, std::allocator<CVRCompositorSharedTextures::CVulkanFence>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CVRCompositorSharedTextures::CVulkanFence, std::allocator<CVRCompositorSharedTextures::CVulkanFence>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<CVRInputLatest::InputFrame_t, std::allocator<CVRInputLatest::InputFrame_t>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<CVRInputLatest::InputFrame_t, std::allocator<CVRInputLatest::InputFrame_t>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<CVRInputLatest::InputFrame_t, std::allocator<CVRInputLatest::InputFrame_t>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<CVRInputLatest::InputFrame_t, std::allocator<CVRInputLatest::InputFrame_t>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<InputConfig_t, std::allocator<InputConfig_t>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<InputConfig_t, std::allocator<InputConfig_t>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<InputConfig_t, std::allocator<InputConfig_t>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<InputConfig_t, std::allocator<InputConfig_t>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<VcetJob, std::allocator<VcetJob>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<VcetJob, std::allocator<VcetJob>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<VcetJob, std::allocator<VcetJob>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<VcetJob, std::allocator<VcetJob>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<gli::storage_linear, std::allocator<gli::storage_linear>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<gli::storage_linear, std::allocator<gli::storage_linear>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<gli::storage_linear, std::allocator<gli::storage_linear>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<gli::storage_linear, std::allocator<gli::storage_linear>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::input_buffer_adapter, std::allocator<nlohmann::detail::input_buffer_adapter>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::input_buffer_adapter, std::allocator<nlohmann::detail::input_buffer_adapter>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::input_buffer_adapter, std::allocator<nlohmann::detail::input_buffer_adapter>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::input_buffer_adapter, std::allocator<nlohmann::detail::input_buffer_adapter>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::output_string_adapter<char, std::string>, std::allocator<nlohmann::detail::output_string_adapter<char, std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::output_string_adapter<char, std::string>, std::allocator<nlohmann::detail::output_string_adapter<char, std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::output_string_adapter<char, std::string>, std::allocator<nlohmann::detail::output_string_adapter<char, std::string> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<nlohmann::detail::output_string_adapter<char, std::string>, std::allocator<nlohmann::detail::output_string_adapter<char, std::string> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()
 t std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()
 t std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
 t std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
 t std::_Vector_base<CRenderModelManager::DeviceTexturePair_t, std::allocator<CRenderModelManager::DeviceTexturePair_t> >::~_Vector_base()
 t std::_Vector_base<CVkAllocator::MemoryTypeInfo_t*, std::allocator<CVkAllocator::MemoryTypeInfo_t*> >::~_Vector_base()
 t std::_Vector_base<CVkTimeline*, short_alloc<CVkTimeline*, 80ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<CVulkanVRRenderer::MemoryTypeInfo, std::allocator<CVulkanVRRenderer::MemoryTypeInfo> >::~_Vector_base()
 t std::_Vector_base<DriverPresenceEntry_t, std::allocator<DriverPresenceEntry_t> >::~_Vector_base()
 t std::_Vector_base<InteractionProfileInput_t, std::allocator<InteractionProfileInput_t> >::~_Vector_base()
 t std::_Vector_base<PathHandleInfo_t, std::allocator<PathHandleInfo_t> >::~_Vector_base()
 t std::_Vector_base<Reflection::TypeInfo::BaseClassInfo_t, std::allocator<Reflection::TypeInfo::BaseClassInfo_t> >::~_Vector_base()
 t std::_Vector_base<VRAction_Entry_t, std::allocator<VRAction_Entry_t> >::~_Vector_base()
 t std::_Vector_base<VRInputValue_t, std::allocator<VRInputValue_t> >::~_Vector_base()
 t std::_Vector_base<VkDescriptorPoolSize, std::allocator<VkDescriptorPoolSize> >::~_Vector_base()
 t std::_Vector_base<VkDescriptorSetLayoutBinding, std::allocator<VkDescriptorSetLayoutBinding> >::~_Vector_base()
 t std::_Vector_base<VkDeviceMemory_T*, short_alloc<VkDeviceMemory_T*, 80ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<VkDeviceQueueCreateInfo, short_alloc<VkDeviceQueueCreateInfo, 400ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<VkExtensionProperties, std::allocator<VkExtensionProperties> >::~_Vector_base()
 t std::_Vector_base<VkFence_T*, std::allocator<VkFence_T*> >::~_Vector_base()
 t std::_Vector_base<VkFormat, std::allocator<VkFormat> >::~_Vector_base()
 t std::_Vector_base<VkImageView_T*, std::allocator<VkImageView_T*> >::~_Vector_base()
 t std::_Vector_base<VkQueueFamilyGlobalPriorityPropertiesEXT, std::allocator<VkQueueFamilyGlobalPriorityPropertiesEXT> >::~_Vector_base()
 t std::_Vector_base<VkQueueFamilyProperties2, std::allocator<VkQueueFamilyProperties2> >::~_Vector_base()
 t std::_Vector_base<VkSemaphore_T*, short_alloc<VkSemaphore_T*, 128ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<VkSemaphore_T*, short_alloc<VkSemaphore_T*, 80ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<VkSemaphore_T*, std::allocator<VkSemaphore_T*> >::~_Vector_base()
 t std::_Vector_base<VkWriteDescriptorSet, std::allocator<VkWriteDescriptorSet> >::~_Vector_base()
 t std::_Vector_base<VulkanVRRenderer::Texture*, std::allocator<VulkanVRRenderer::Texture*> >::~_Vector_base()
 t std::_Vector_base<XrView, std::allocator<XrView> >::~_Vector_base()
 t std::_Vector_base<char const*, std::allocator<char const*> >::~_Vector_base()
 t std::_Vector_base<char, std::allocator<char> >::~_Vector_base()
 t std::_Vector_base<double, std::allocator<double> >::~_Vector_base()
 t std::_Vector_base<facet::CVkTimelinePoint, short_alloc<facet::CVkTimelinePoint, 160ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<float, std::allocator<float> >::~_Vector_base()
 t std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) [clone .isra.81]
 t std::_Vector_base<int, std::allocator<int> >::~_Vector_base()
 t std::_Vector_base<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> >::~_Vector_base()
 t std::_Vector_base<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::~_Vector_base()
 t std::_Vector_base<std::pair<__gnu_cxx::__normal_iterator<char const*, std::string>, int>, std::allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::string>, int> > >::~_Vector_base()
 t std::_Vector_base<std::pair<char, char>, std::allocator<std::pair<char, char> > >::~_Vector_base()
 t std::_Vector_base<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > >::~_Vector_base()
 t std::_Vector_base<std::string, std::allocator<std::string> >::_M_deallocate(std::string*, unsigned long) [clone .isra.405]
 t std::_Vector_base<std::string, std::allocator<std::string> >::~_Vector_base()
 t std::_Vector_base<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > >::~_Vector_base()
 t std::_Vector_base<tinygltf::Value, std::allocator<tinygltf::Value> >::~_Vector_base()
 t std::_Vector_base<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> >::~_Vector_base()
 t std::_Vector_base<unsigned char, std::allocator<unsigned char> >::~_Vector_base()
 t std::_Vector_base<unsigned int, short_alloc<unsigned int, 40ul, 4ul> >::~_Vector_base()
 t std::_Vector_base<unsigned long, short_alloc<unsigned long, 128ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<unsigned long, short_alloc<unsigned long, 80ul, 8ul> >::~_Vector_base()
 t std::_Vector_base<unsigned long, std::allocator<unsigned long> >::~_Vector_base()
 t std::_Vector_base<void*, std::allocator<void*> >::~_Vector_base()
 t std::_Vector_base<vr::ETrackedDeviceProperty, std::allocator<vr::ETrackedDeviceProperty> >::~_Vector_base()
 t std::_Vector_base<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> >::~_Vector_base()
 t std::_Vector_base<vr::HmdVector2_t, std::allocator<vr::HmdVector2_t> >::~_Vector_base()
 t std::_Vector_base<vr::InputBindingInfo_t, std::allocator<vr::InputBindingInfo_t> >::~_Vector_base()
 t std::_Vector_base<vr::PathRead_t, std::allocator<vr::PathRead_t> >::~_Vector_base()
 t std::_Vector_base<vr::PathWrite_t, std::allocator<vr::PathWrite_t> >::~_Vector_base()
 t std::_Vector_base<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> >::~_Vector_base()
 t std::_Vector_base<vr::PropertyWrite_t, std::allocator<vr::PropertyWrite_t> >::~_Vector_base()
 t std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<VcetBo, std::allocator<VcetBo>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr()
 t std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<VcetContext, std::allocator<VcetContext>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr()
 t std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
 t std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
 t std::__detail::_BracketMatcher<std::regex_traits<char>, false, false>::_M_ready()
 t std::__detail::_BracketMatcher<std::regex_traits<char>, false, false>::~_BracketMatcher()
 t std::__detail::_BracketMatcher<std::regex_traits<char>, false, true>::_M_apply(char, std::integral_constant<bool, false>) const::{lambda()#1}::operator()() const
 t std::__detail::_BracketMatcher<std::regex_traits<char>, false, true>::_M_make_range(char, char)
 t std::__detail::_BracketMatcher<std::regex_traits<char>, false, true>::~_BracketMatcher()
 t std::__detail::_BracketMatcher<std::regex_traits<char>, true, false>::_M_apply(char, std::integral_constant<bool, false>) const::{lambda()#1}::operator()() const
 t std::__detail::_BracketMatcher<std::regex_traits<char>, true, false>::~_BracketMatcher()
 t std::__detail::_BracketMatcher<std::regex_traits<char>, true, true>::_M_apply(char, std::integral_constant<bool, false>) const::{lambda()#1}::operator()() const
 t std::__detail::_BracketMatcher<std::regex_traits<char>, true, true>::_M_make_range(char, char)
 t std::__detail::_BracketMatcher<std::regex_traits<char>, true, true>::~_BracketMatcher()
 t std::__detail::_Compiler<std::regex_traits<char> >::_Compiler(char const*, char const*, std::locale const&, std::regex_constants::syntax_option_type)
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_alternative()
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_assertion()
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_atom()
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_bracket_expression()
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_cur_int_value(int)
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_disjunction()
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<false, false>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, false, false>&)::{lambda(char)#1}::operator()(char) const
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<false, true>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, false, true>&)::{lambda(char)#1}::operator()(char) const
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<true, false>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, true, false>&)::{lambda(char)#1}::operator()(char) const
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_expression_term<true, true>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::regex_traits<char>, true, true>&)::{lambda(char)#1}::operator()(char) const
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_match_token(std::__detail::_ScannerBase::_TokenT) [clone .part.0]
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_pop()
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_quantifier()
 t std::__detail::_Compiler<std::regex_traits<char> >::_M_try_char()
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_dfs(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_Match_mode, long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_handle_backref(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_Match_mode, long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_lookahead(long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_main_dispatch(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_Match_mode, std::integral_constant<bool, false>) [clone .isra.0]
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_main_dispatch(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_Match_mode, std::integral_constant<bool, false>) [clone .isra.0] [clone .cold]
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_rep_once_more(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_Match_mode, long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::_M_word_boundary() const
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, false>::~_Executor()
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_M_dfs(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_Match_mode, long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_M_handle_backref(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_Match_mode, long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_M_lookahead(long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_M_rep_once_more(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_Match_mode, long)
 t std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, std::regex_traits<char>, true>::_M_word_boundary() const
 t std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > >, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > >, true>*) [clone .isra.0]
 t std::__detail::_Map_base<XrViewConfigurationType, std::pair<XrViewConfigurationType const, std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> > >, std::allocator<std::pair<XrViewConfigurationType const, std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> > > >, std::__detail::_Select1st, std::equal_to<XrViewConfigurationType>, vr::CEnumHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](XrViewConfigurationType const&)
 t std::__detail::_Map_base<XrViewConfigurationType, std::pair<XrViewConfigurationType const, std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> > >, std::allocator<std::pair<XrViewConfigurationType const, std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> > > >, std::__detail::_Select1st, std::equal_to<XrViewConfigurationType>, vr::CEnumHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](XrViewConfigurationType const&)
 t std::__detail::_Map_base<std::pair<int, int>, std::pair<std::pair<int, int> const, unsigned int>, std::allocator<std::pair<std::pair<int, int> const, unsigned int> >, std::__detail::_Select1st, vr::UndirectedEdgeEqual, vr::UndirectedEdgeHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::pair<int, int> const&)
 t std::__detail::_Map_base<std::string, std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > >, std::allocator<std::pair<std::string const, std::unique_ptr<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >, std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > > > > >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)
 t std::__detail::_Map_base<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string const&)
 t std::__detail::_Map_base<std::string, std::pair<std::string const, unsigned long>, std::allocator<std::pair<std::string const, unsigned long> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::string&&)
 t std::__detail::_Map_base<std::type_index, std::pair<std::type_index const, ChildData>, std::allocator<std::pair<std::type_index const, ChildData> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](std::type_index const&)
 t std::__detail::_Map_base<vr::HmdVector2_t, std::pair<vr::HmdVector2_t const, int>, std::allocator<std::pair<vr::HmdVector2_t const, int> >, std::__detail::_Select1st, vr::HmdVector2TolerancedEqual, vr::HmdVector2TolerancedHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](vr::HmdVector2_t const&)
 t std::__detail::_NFA<std::regex_traits<char> >::_M_insert_backref(unsigned long)
 t std::__detail::_NFA<std::regex_traits<char> >::_M_insert_dummy()
 t std::__detail::_NFA<std::regex_traits<char> >::_M_insert_matcher(std::function<bool (char)>)
 t std::__detail::_NFA<std::regex_traits<char> >::_M_insert_repeat(long, long, bool)
 t std::__detail::_NFA<std::regex_traits<char> >::_M_insert_state(std::__detail::_State<char>)
 t std::__detail::_NFA<std::regex_traits<char> >::_M_insert_subexpr_begin()
 t std::__detail::_NFA<std::regex_traits<char> >::_M_insert_subexpr_end()
 t std::__detail::_RegexTranslatorBase<std::regex_traits<char>, false, true>::_M_transform(char) const
 t std::__detail::_RegexTranslatorBase<std::regex_traits<char>, true, true>::_M_transform(char) const
 t std::__detail::_Scanner<char>::_M_eat_class(char)
 t std::__detail::_Scanner<char>::_M_eat_escape_awk()
 t std::__detail::_Scanner<char>::_M_eat_escape_ecma()
 t std::__detail::_Scanner<char>::_M_eat_escape_posix()
 t std::__detail::_Scanner<char>::_M_scan_in_brace()
 t std::__detail::_Scanner<char>::_M_scan_in_bracket()
 t std::__detail::_Scanner<char>::_M_scan_normal()
 t std::__detail::_Scanner<char>::_Scanner(char const*, char const*, std::regex_constants::syntax_option_type, std::locale)
 t std::__detail::_StateSeq<std::regex_traits<char> >& std::deque<std::__detail::_StateSeq<std::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::regex_traits<char> > > >::emplace_back<std::__detail::_StateSeq<std::regex_traits<char> > >(std::__detail::_StateSeq<std::regex_traits<char> >&&) [clone .isra.0]
 t std::__detail::_StateSeq<std::regex_traits<char> >::_M_clone()
 t std::__shared_count<(__gnu_cxx::_Lock_policy)2>::operator=(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&)
 t std::__throw_regex_error(std::regex_constants::error_type, char const*)
 t std::array<std::string, 5ul>::~array()
 t std::back_insert_iterator<std::string> std::match_results<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > >::format<std::back_insert_iterator<std::string> >(std::back_insert_iterator<std::string>, char const*, char const*, std::regex_constants::match_flag_type) const
 t std::back_insert_iterator<std::string> std::regex_replace<std::back_insert_iterator<std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, std::regex_traits<char>, char>(std::back_insert_iterator<std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, __gnu_cxx::__normal_iterator<char const*, std::string>, std::basic_regex<char, std::regex_traits<char> > const&, char const*, std::regex_constants::match_flag_type)
 t std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [clone .isra.0]
 t std::basic_regex<char, std::regex_traits<char> >::~basic_regex()
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char const*)
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
 t std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&)
 t std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()
 t std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8()
 t std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8()
 t std::ctype<char>::do_narrow(char, char) const
 t std::ctype<char>::do_widen(char) const
 t std::default_delete<CPoseUpdateResources>::operator()(CPoseUpdateResources*) const [clone .part.0]
 t std::default_delete<CVkExtensionInfo>::operator()(CVkExtensionInfo*) const [clone .part.0]
 t std::default_delete<std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > > >::operator()(std::unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::string> > >*) const [clone .part.0]
 t std::deque<CAnimPose*, std::allocator<CAnimPose*> >::_M_reallocate_map(unsigned long, bool)
 t std::deque<CSxrInstance::XrEvent_t, std::allocator<CSxrInstance::XrEvent_t> >::_M_destroy_data(std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*>, std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*>, std::allocator<CSxrInstance::XrEvent_t> const&) [clone .isra.0]
 t std::deque<CSxrInstance::XrEvent_t, std::allocator<CSxrInstance::XrEvent_t> >::_M_erase(std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*>, std::_Deque_iterator<CSxrInstance::XrEvent_t, CSxrInstance::XrEvent_t&, CSxrInstance::XrEvent_t*>)
 t std::deque<CVkCommandBuffer*, std::allocator<CVkCommandBuffer*> >::_M_reallocate_map(unsigned long, bool)
 t std::deque<Json::OurReader::ErrorInfo, std::allocator<Json::OurReader::ErrorInfo> >::_M_default_append(unsigned long)
 t std::deque<Json::OurReader::ErrorInfo, std::allocator<Json::OurReader::ErrorInfo> >::_M_destroy_data_aux(std::_Deque_iterator<Json::OurReader::ErrorInfo, Json::OurReader::ErrorInfo&, Json::OurReader::ErrorInfo*>, std::_Deque_iterator<Json::OurReader::ErrorInfo, Json::OurReader::ErrorInfo&, Json::OurReader::ErrorInfo*>) [clone .isra.0]
 t std::deque<Json::OurReader::ErrorInfo, std::allocator<Json::OurReader::ErrorInfo> >::_M_new_elements_at_back(unsigned long)
 t std::deque<Json::OurReader::ErrorInfo, std::allocator<Json::OurReader::ErrorInfo> >::_M_reallocate_map(unsigned long, bool)
 t std::deque<Json::Reader::ErrorInfo, std::allocator<Json::Reader::ErrorInfo> >::_M_default_append(unsigned long)
 t std::deque<Json::Reader::ErrorInfo, std::allocator<Json::Reader::ErrorInfo> >::_M_erase_at_end(std::_Deque_iterator<Json::Reader::ErrorInfo, Json::Reader::ErrorInfo&, Json::Reader::ErrorInfo*>)
 t std::deque<Json::Reader::ErrorInfo, std::allocator<Json::Reader::ErrorInfo> >::_M_new_elements_at_back(unsigned long)
 t std::deque<Json::Reader::ErrorInfo, std::allocator<Json::Reader::ErrorInfo> >::_M_reallocate_map(unsigned long, bool)
 t std::deque<std::__detail::_StateSeq<std::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::regex_traits<char> > > >::_M_reallocate_map(unsigned long, bool)
 t std::deque<std::__detail::_StateSeq<std::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::regex_traits<char> > > >::push_back(std::__detail::_StateSeq<std::regex_traits<char> > const&)
 t std::deque<std::string, std::allocator<std::string> >::~deque()
 t std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<CDriverManager::HmdDriver_t> >, std::is_move_constructible<CDriverManager::HmdDriver_t>, std::is_move_assignable<CDriverManager::HmdDriver_t> >::value, void>::type std::swap<CDriverManager::HmdDriver_t>(CDriverManager::HmdDriver_t&, CDriverManager::HmdDriver_t&)
 t std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<PhysicalDeviceInfo_t> >, std::is_move_constructible<PhysicalDeviceInfo_t>, std::is_move_assignable<PhysicalDeviceInfo_t> >::value, void>::type std::swap<PhysicalDeviceInfo_t>(PhysicalDeviceInfo_t&, PhysicalDeviceInfo_t&)
 t std::function<void (bool)>::~function()
 t std::insert_iterator<std::vector<int, std::allocator<int> > > std::copy<std::_Rb_tree_const_iterator<int>, std::insert_iterator<std::vector<int, std::allocator<int> > > >(std::_Rb_tree_const_iterator<int>, std::_Rb_tree_const_iterator<int>, std::insert_iterator<std::vector<int, std::allocator<int> > >)
 t std::map<AssertLookup_t, bool, std::less<AssertLookup_t>, std::allocator<std::pair<AssertLookup_t const, bool> > >::operator[](AssertLookup_t const&)
 t std::map<AssertLookup_t, bool, std::less<AssertLookup_t>, std::allocator<std::pair<AssertLookup_t const, bool> > >::~map()
 t std::map<VkDevice_T*, VulkanFunctionPointers_t, std::less<VkDevice_T*>, std::allocator<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> > >::~map()
 t std::map<int, std::string, std::less<int>, std::allocator<std::pair<int const, std::string> > >::operator[](int&&)
 t std::map<std::string, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t> > >::operator[](std::string const&)
 t std::map<std::string, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t, std::less<std::string>, std::allocator<std::pair<std::string const, CActionBindingConfigGenerator::ParseActionSetBindings(std::string const&, std::string*)::ChordInputAndAction_t> > >::operator[](std::string const&) [clone .cold]
 t std::map<std::string, Json::Value, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::at(std::string const&) const
 t std::map<std::string, Json::Value, std::less<std::string>, std::allocator<std::pair<std::string const, Json::Value> > >::operator[](std::string&&)
 t std::map<std::string, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::less<void>, std::allocator<std::pair<std::string const, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >::operator[](std::string const&)
 t std::map<std::string, std::shared_ptr<CRenderModelManager::ModelInfo_t>, std::less<std::string>, std::allocator<std::pair<std::string const, std::shared_ptr<CRenderModelManager::ModelInfo_t> > > >::operator[](std::string const&)
 t std::map<std::string, std::string, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::operator[](std::string&&)
 t std::map<std::string, tinygltf::Parameter, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > >::operator[](std::string const&)
 t std::map<std::string, tinygltf::Value, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >::operator[](std::string const&)
 t std::map<unsigned long, CIOBufferCursor*, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CIOBufferCursor*> > >::~map()
 t std::map<unsigned long, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > > >::~map()
 t std::map<unsigned long, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*>, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::pair<vr::RenderModel_t*, vr::RenderModel_TextureMap_t*> > > >::operator[](unsigned long const&)
 t std::map<unsigned long, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData>, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::weak_ptr<CSharedResourceBaseLinux::CSharedResourceData> > > >::~map()
 t std::map<unsigned long, unsigned long, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned long> > >::~map()
 t std::map<unsigned long, vr::VROverlayView_t*, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, vr::VROverlayView_t*> > >::operator[](unsigned long const&)
 t std::operator==(std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > > const&, std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Parameter>, std::_Select1st<std::pair<std::string const, tinygltf::Parameter> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Parameter> > > const&) [clone .part.0] [clone .isra.0]
 t std::operator==(std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > > const&, std::_Rb_tree<std::string, std::pair<std::string const, tinygltf::Value>, std::_Select1st<std::pair<std::string const, tinygltf::Value> >, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > > const&) [clone .part.0] [clone .isra.0]
 t std::pair<bool, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(bool&, bool)
 t std::pair<bool, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<double&>(double&, bool)
 t std::pair<bool, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<long&>(long&, bool)
 t std::pair<bool, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(nlohmann::detail::value_t&&, bool)
 t std::pair<bool, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<std::string&>(std::string&, bool)
 t std::pair<bool, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<unsigned long&>(unsigned long&, bool)
 t std::pair<std::_Rb_tree_iterator<CVkResourceBase*>, bool> std::_Rb_tree<CVkResourceBase*, CVkResourceBase*, std::_Identity<CVkResourceBase*>, CVkResourceComparator, std::allocator<CVkResourceBase*> >::_M_insert_unique<CVkResourceBase* const&>(CVkResourceBase* const&)
 t std::pair<std::_Rb_tree_iterator<XrActionType>, bool> std::_Rb_tree<XrActionType, XrActionType, std::_Identity<XrActionType>, std::less<XrActionType>, std::allocator<XrActionType> >::_M_insert_unique<XrActionType const&>(XrActionType const&)
 t std::pair<std::_Rb_tree_iterator<facet::CCompositionClient::SwapchainImage_t>, bool> std::_Rb_tree<facet::CCompositionClient::SwapchainImage_t, facet::CCompositionClient::SwapchainImage_t, std::_Identity<facet::CCompositionClient::SwapchainImage_t>, std::less<facet::CCompositionClient::SwapchainImage_t>, std::allocator<facet::CCompositionClient::SwapchainImage_t> >::_M_insert_unique<facet::CCompositionClient::SwapchainImage_t const&>(facet::CCompositionClient::SwapchainImage_t const&)
 t std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)
 t std::pair<std::_Rb_tree_iterator<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> >, bool> std::_Rb_tree<CSxrSession::ActionStateKey_t, std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t>, std::_Select1st<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> >, std::less<CSxrSession::ActionStateKey_t>, std::allocator<std::pair<CSxrSession::ActionStateKey_t const, CSxrSession::ActionStateValue_t> > >::_M_emplace_unique<std::pair<CSxrSession::ActionStateKey_t, CSxrSession::ActionStateValue_t> >(std::pair<CSxrSession::ActionStateKey_t, CSxrSession::ActionStateValue_t>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*> >, bool> std::_Rb_tree<CVulkanVRRenderer::FramebufferState_t, std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*>, std::_Select1st<std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*> >, std::less<CVulkanVRRenderer::FramebufferState_t>, std::allocator<std::pair<CVulkanVRRenderer::FramebufferState_t const, VkFramebuffer_T*> > >::_M_emplace_unique<std::pair<CVulkanVRRenderer::FramebufferState_t, VkFramebuffer_T*> >(std::pair<CVulkanVRRenderer::FramebufferState_t, VkFramebuffer_T*>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*> >, bool> std::_Rb_tree<CVulkanVRRenderer::RenderPassState_t, std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*>, std::_Select1st<std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*> >, std::less<CVulkanVRRenderer::RenderPassState_t>, std::allocator<std::pair<CVulkanVRRenderer::RenderPassState_t const, VkRenderPass_T*> > >::_M_emplace_unique<std::pair<CVulkanVRRenderer::RenderPassState_t, VkRenderPass_T*> >(std::pair<CVulkanVRRenderer::RenderPassState_t, VkRenderPass_T*>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*> >, bool> std::_Rb_tree<VRRenderer::VulkanNativeTexture_t, std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*>, std::_Select1st<std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*> >, CVulkanVRRenderer::VulkanNativeTextureCompare_t, std::allocator<std::pair<VRRenderer::VulkanNativeTexture_t const, VulkanVRRenderer::Texture*> > >::_M_emplace_unique<std::pair<VRRenderer::VulkanNativeTexture_t, VulkanVRRenderer::Texture*> >(std::pair<VRRenderer::VulkanNativeTexture_t, VulkanVRRenderer::Texture*>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> >, bool> std::_Rb_tree<VkDevice_T*, std::pair<VkDevice_T* const, VulkanFunctionPointers_t>, std::_Select1st<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> >, std::less<VkDevice_T*>, std::allocator<std::pair<VkDevice_T* const, VulkanFunctionPointers_t> > >::_M_emplace_unique<std::pair<VkDevice_T*, VulkanFunctionPointers_t> >(std::pair<VkDevice_T*, VulkanFunctionPointers_t>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<std::string const, double> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, double>, std::_Select1st<std::pair<std::string const, double> >, std::less<std::string>, std::allocator<std::pair<std::string const, double> > >::_M_emplace_unique<std::pair<std::string, double> >(std::pair<std::string, double>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<std::string const, int> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, int>, std::_Select1st<std::pair<std::string const, int> >, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >::_M_emplace_unique<std::pair<std::string, int> >(std::pair<std::string, int>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<std::string const, std::string> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, std::string>, std::_Select1st<std::pair<std::string const, std::string> >, std::less<std::string>, std::allocator<std::pair<std::string const, std::string> > >::_M_emplace_unique<std::pair<std::string, std::string> >(std::pair<std::string, std::string>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > > >, bool> std::_Rb_tree<std::string, std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > >, std::_Select1st<std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > > >, std::less<std::string>, std::allocator<std::pair<std::string const, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > > > >::_M_emplace_unique<char const*, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> > >(char const*&&, std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> >&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<std::string const, unsigned long> >, bool> std::_Rb_tree<std::string, std::pair<std::string const, unsigned long>, std::_Select1st<std::pair<std::string const, unsigned long> >, std::less<std::string>, std::allocator<std::pair<std::string const, unsigned long> > >::_M_emplace_unique<std::pair<std::string, unsigned long> >(std::pair<std::string, unsigned long>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, CIOBufferCursor*> >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, CIOBufferCursor*>, std::_Select1st<std::pair<unsigned long const, CIOBufferCursor*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, CIOBufferCursor*> > >::_M_emplace_unique<std::pair<unsigned long, CIOBufferCursor*> >(std::pair<unsigned long, CIOBufferCursor*>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, MailboxInfo_t> >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, MailboxInfo_t>, std::_Select1st<std::pair<unsigned long const, MailboxInfo_t> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, MailboxInfo_t> > >::_M_emplace_unique<std::pair<unsigned long, MailboxInfo_t> >(std::pair<unsigned long, MailboxInfo_t>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, int> >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, int>, std::_Select1st<std::pair<unsigned long const, int> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, int> > >::_M_emplace_unique<std::pair<unsigned long, int> >(std::pair<unsigned long, int>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > >, std::_Select1st<std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > > >::_M_emplace_unique<std::pair<unsigned long, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > > >(std::pair<unsigned long, std::map<unsigned long, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> > > > > >&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, std::shared_ptr<CBlockQueue> > >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::shared_ptr<CBlockQueue> >, std::_Select1st<std::pair<unsigned long const, std::shared_ptr<CBlockQueue> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::shared_ptr<CBlockQueue> > > >::_M_emplace_unique<std::pair<unsigned long, std::shared_ptr<CBlockQueue> > >(std::pair<unsigned long, std::shared_ptr<CBlockQueue> >&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, std::string> >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::string>, std::_Select1st<std::pair<unsigned long const, std::string> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::string> > >::_M_emplace_unique<std::pair<unsigned long, std::string> >(std::pair<unsigned long, std::string>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > > >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > >, std::_Select1st<std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > > > >::_M_emplace_unique<std::pair<unsigned long, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > > >(std::pair<unsigned long, std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> > >&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > > >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > >, std::_Select1st<std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > > > >::_M_emplace_unique<std::pair<unsigned long, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > > >(std::pair<unsigned long, std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> > >&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<unsigned long const, unsigned int> >, bool> std::_Rb_tree<unsigned long, std::pair<unsigned long const, unsigned int>, std::_Select1st<std::pair<unsigned long const, unsigned int> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, unsigned int> > >::_M_emplace_unique<std::pair<unsigned long, unsigned int> >(std::pair<unsigned long, unsigned int>&&)
 t std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string const&>(std::string const&)
 t std::pair<std::_Rb_tree_iterator<std::string>, bool> std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_insert_unique<std::string>(std::string&&)
 t std::pair<std::_Rb_tree_iterator<unsigned long>, bool> std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_insert_unique<unsigned long const&>(unsigned long const&)
 t std::pair<std::__detail::_Node_iterator<std::pair<std::string const, CVkExtensionEntry>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, CVkExtensionEntry>, std::allocator<std::pair<std::string const, CVkExtensionEntry> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, char const*&>(std::integral_constant<bool, true>, char const*&, char const*&) [clone .isra.0]
 t std::pair<std::__detail::_Node_iterator<std::pair<std::string const, CVkExtensionEntry>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, CVkExtensionEntry>, std::allocator<std::pair<std::string const, CVkExtensionEntry> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<char const*&, char const*&>(std::integral_constant<bool, true>, char const*&, char const*&) [clone .isra.0] [clone .cold]
 t std::pair<std::__detail::_Node_iterator<std::pair<std::string const, std::string>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<std::pair<std::string, std::string> >(std::integral_constant<bool, true>, std::pair<std::string, std::string>&&) [clone .isra.0]
 t std::pair<std::__detail::_Node_iterator<std::pair<std::string const, std::string>, false, true>, bool> std::_Hashtable<std::string, std::pair<std::string const, std::string>, std::allocator<std::pair<std::string const, std::string> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<std::pair<std::string, std::string> >(std::integral_constant<bool, true>, std::pair<std::string, std::string>&&) [clone .isra.0] [clone .cold]
 t std::pair<std::string const, std::shared_ptr<CSimulatedActionBase> >::~pair()
 t std::pair<std::string, std::shared_ptr<CInputActionSet> >::~pair()
 t std::regex_iterator<__gnu_cxx::__normal_iterator<char const*, std::string>, char, std::regex_traits<char> >::operator==(std::regex_iterator<__gnu_cxx::__normal_iterator<char const*, std::string>, char, std::regex_traits<char> > const&) const [clone .part.0]
 t std::regex_traits<char>::_RegexMask std::regex_traits<char>::lookup_classname<char const*>(char const*, char const*, bool) const
 t std::regex_traits<char>::isctype(char, std::regex_traits<char>::_RegexMask) const [clone .isra.0]
 t std::regex_traits<char>::translate_nocase(char) const
 t std::regex_traits<char>::value(char, int) const [clone .isra.0]
 t std::regex_traits<char>::value(char, int) const [clone .isra.0] [clone .cold]
 t std::set<XrActionType, std::less<XrActionType>, std::allocator<XrActionType> >::~set()
 t std::set<std::string, std::less<std::string>, std::allocator<std::string> >::insert(std::string&&)
 t std::string __gnu_cxx::__to_xstring<std::string, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
 t std::string const& CSettingsManager::GetDefaultValue<std::string>(char const*, char const*, vr::EVRSettingsError*)
 t std::string const& CSettingsManager::GetValue<std::string>(char const*, char const*, vr::EVRSettingsError*)
 t std::string const& CSettingsValue::Get<std::string>() const
 t std::string nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::get<std::string, std::string, 0>() const
 t std::string std::regex_traits<char>::lookup_collatename<char const*>(char const*, char const*) const
 t std::string std::regex_traits<char>::transform_primary<char const*>(char const*, char const*) const
 t std::string std::regex_traits<char>::transform_primary<char*>(char*, char*) const
 t std::string& std::vector<std::string, std::allocator<std::string> >::emplace_back<std::string>(std::string&&)
 t std::string& std::vector<std::string, std::allocator<std::string> >::emplace_back<std::string>(std::string&&) [clone .isra.0]
 t std::string* nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::create<std::string, std::string const&>(std::string const&)
 t std::string** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<std::string*>(std::string* const*, std::string* const*, std::string**)
 t std::string::_Rep::_M_dispose(std::allocator<char> const&) [clone .part.0]
 t std::string::assign(char const*) [clone .isra.0]
 t std::string::compare(std::string const&) const [clone .isra.0]
 t std::thread::_State_impl<std::thread::_Invoker<std::tuple<CThreadWatchdogManager::InitWatchdogs()::{lambda()#1}> > >::_M_run()
 t std::thread::_State_impl<std::thread::_Invoker<std::tuple<CThreadWatchdogManager::InitWatchdogs()::{lambda()#1}> > >::_M_run() [clone .cold]
 t std::thread::_State_impl<std::thread::_Invoker<std::tuple<CThreadWatchdogManager::InitWatchdogs()::{lambda()#1}> > >::~_State_impl()
 t std::to_string(int)
 t std::to_string(unsigned int)
 t std::to_string(unsigned long)
 t std::unique_lock<std::mutex>::unlock()
 t std::unique_lock<std::recursive_mutex>::unlock()
 t std::unique_lock<std::timed_mutex>::unlock()
 t std::unique_ptr<CAnimFactoryBase::CFactoryMaker, std::default_delete<CAnimFactoryBase::CFactoryMaker> >::~unique_ptr()
 t std::unique_ptr<CAssertCallback, std::default_delete<CAssertCallback> >::~unique_ptr()
 t std::unique_ptr<CFixedSizePropertyContainer, std::default_delete<CFixedSizePropertyContainer> >::~unique_ptr()
 t std::unique_ptr<CLogBuffer, std::default_delete<CLogBuffer> >::~unique_ptr()
 t std::unique_ptr<CLogCallback, std::default_delete<CLogCallback> >::~unique_ptr()
 t std::unique_ptr<CSxrHandTrackerEXT, std::default_delete<CSxrHandTrackerEXT> >::~unique_ptr()
 t std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> >::~unique_ptr()
 t std::unique_ptr<CVkCommandBuffer, CVkResourceRecycler<CVkCommandBuffer> >::~unique_ptr()
 t std::unique_ptr<CVkTimeline, CVkResourceDeleter<CVkTimeline> >::~unique_ptr()
 t std::unique_ptr<IPC::ISharedMem, std::default_delete<IPC::ISharedMem> >::~unique_ptr()
 t std::unique_ptr<Json::StreamWriter, std::default_delete<Json::StreamWriter> >::~unique_ptr()
 t std::unique_ptr<XrEventDataBuffer, std::default_delete<XrEventDataBuffer> >::~unique_ptr()
 t std::unique_ptr<facet::IVkInteropImage, std::default_delete<facet::IVkInteropImage> >::~unique_ptr()
 t std::unique_ptr<std::string, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::create<std::string, std::string const&>(std::string const&)::{lambda(std::string*)#1}>::~unique_ptr()
 t std::unordered_map<char const*, TimingData_t, std::hash<char const*>, std::equal_to<char const*>, std::allocator<std::pair<char const* const, TimingData_t> > >::~unordered_map()
 t std::vector<CActionBinding, std::allocator<CActionBinding> >::push_back(CActionBinding const&)
 t std::vector<CActionBinding, std::allocator<CActionBinding> >::~vector()
 t std::vector<CActionBindingConfigGenerator::PendingChordEntry_t, std::allocator<CActionBindingConfigGenerator::PendingChordEntry_t> >::~vector()
 t std::vector<CActionBindingProgressIndicator, std::allocator<CActionBindingProgressIndicator> >::~vector()
 t std::vector<CActionFilter, std::allocator<CActionFilter> >::operator=(std::vector<CActionFilter, std::allocator<CActionFilter> > const&) [clone .isra.0]
 t std::vector<CActionFilter, std::allocator<CActionFilter> >::operator=(std::vector<CActionFilter, std::allocator<CActionFilter> > const&) [clone .isra.0] [clone .cold]
 t std::vector<CActionFilter, std::allocator<CActionFilter> >::~vector()
 t std::vector<CAnimSkeleton::BoneInfo, std::allocator<CAnimSkeleton::BoneInfo> >::_M_default_append(unsigned long)
 t std::vector<CAnimSkeleton::BoneInfo, std::allocator<CAnimSkeleton::BoneInfo> >::~vector()
 t std::vector<CChaperoneUniverse, std::allocator<CChaperoneUniverse> >::~vector()
 t std::vector<CDriverManager::DriverDevice_t, std::allocator<CDriverManager::DriverDevice_t> >::_M_fill_insert(__gnu_cxx::__normal_iterator<CDriverManager::DriverDevice_t*, std::vector<CDriverManager::DriverDevice_t, std::allocator<CDriverManager::DriverDevice_t> > >, unsigned long, CDriverManager::DriverDevice_t const&)
 t std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> >::~vector()
 t std::vector<CGpuTiming::GpuTimestamps_t::Query_t, std::allocator<CGpuTiming::GpuTimestamps_t::Query_t> >::_M_default_append(unsigned long)
 t std::vector<CInputAction, std::allocator<CInputAction> >::~vector()
 t std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> >::operator=(std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> > const&) [clone .isra.0]
 t std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> >::operator=(std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> > const&) [clone .isra.0] [clone .cold]
 t std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> >::~vector()
 t std::vector<CInputOption, std::allocator<CInputOption> >::~vector()
 t std::vector<CPathManager_Server::AliasInfo_t, std::allocator<CPathManager_Server::AliasInfo_t> >::~vector()
 t std::vector<CPathManager_Server::WildcardInfo_t, std::allocator<CPathManager_Server::WildcardInfo_t> >::~vector()
 t std::vector<CRenderModelManager::Component_t, std::allocator<CRenderModelManager::Component_t> >::push_back(CRenderModelManager::Component_t const&)
 t std::vector<CRenderModelManager::RenderModelTextureContainer_t, std::allocator<CRenderModelManager::RenderModelTextureContainer_t> >::~vector()
 t std::vector<CVRInputLatest::FrameActionData_t, std::allocator<CVRInputLatest::FrameActionData_t> >::_M_default_append(unsigned long)
 t std::vector<ModeSlot_t, std::allocator<ModeSlot_t> >::~vector()
 t std::vector<OpResult, std::allocator<OpResult> >::reserve(unsigned long)
 t std::vector<OxrApiLayer_t, std::allocator<OxrApiLayer_t> >::~vector()
 t std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> >::reserve(unsigned long)
 t std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >::vector(std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > const&)
 t std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >::~vector()
 t std::vector<VRAction_Entry_t, std::allocator<VRAction_Entry_t> >::~vector()
 t std::vector<VRInputValue_t, std::allocator<VRInputValue_t> >::_M_default_append(unsigned long)
 t std::vector<ViveTracker, std::allocator<ViveTracker> >::~vector()
 t std::vector<VkExtensionProperties, std::allocator<VkExtensionProperties> >::_M_default_append(unsigned long)
 t std::vector<VkExtensionProperties, std::allocator<VkExtensionProperties> >::~vector()
 t std::vector<VkLayerProperties, std::allocator<VkLayerProperties> >::_M_default_append(unsigned long)
 t std::vector<VkQueueFamilyGlobalPriorityPropertiesEXT, std::allocator<VkQueueFamilyGlobalPriorityPropertiesEXT> >::_M_default_append(unsigned long)
 t std::vector<VkQueueFamilyProperties2, std::allocator<VkQueueFamilyProperties2> >::_M_default_append(unsigned long)
 t std::vector<XrExtensionProperties, std::allocator<XrExtensionProperties> >::~vector()
 t std::vector<bool, std::allocator<bool> >::_M_fill_insert(std::_Bit_iterator, unsigned long, bool)
 t std::vector<bool, std::allocator<bool> >::_M_insert_aux(std::_Bit_iterator, bool) [clone .isra.0]
 t std::vector<bool, std::allocator<bool> >::back() [clone .isra.0]
 t std::vector<bool, std::allocator<bool> >::push_back(bool)
 t std::vector<char const*, std::allocator<char const*> >::_M_check_len(unsigned long, char const*) const
 t std::vector<char const*, std::allocator<char const*> >::_M_default_append(unsigned long)
 t std::vector<char const*, std::allocator<char const*> >::resize(unsigned long)
 t std::vector<char, std::allocator<char> >::_M_default_append(unsigned long)
 t std::vector<char, std::allocator<char> >::_M_erase(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >)
 t std::vector<char, std::allocator<char> >::_M_fill_insert(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, unsigned long, char const&)
 t std::vector<double, std::allocator<double> >::_M_default_append(unsigned long)
 t std::vector<double, std::allocator<double> >::operator=(std::vector<double, std::allocator<double> > const&) [clone .isra.0]
 t std::vector<float, std::allocator<float> >::_M_default_append(unsigned long)
 t std::vector<float, std::allocator<float> >::_M_fill_insert(__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >, unsigned long, float const&)
 t std::vector<int, std::allocator<int> >::_M_check_len(unsigned long, char const*) const
 t std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)
 t std::vector<int, std::allocator<int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, unsigned long, int const&)
 t std::vector<int, std::allocator<int> >::push_back(int const&)
 t std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >* nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::create<std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >, nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > const*, nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > const*>(nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > const*&&, nlohmann::detail::json_ref<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > const*&&)
 t std::vector<std::pair<long, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > >, std::allocator<std::pair<long, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > > > >::~vector()
 t std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > >::~vector()
 t std::vector<std::shared_ptr<CInputActionSet>, std::allocator<std::shared_ptr<CInputActionSet> > >::~vector()
 t std::vector<std::string*, std::allocator<std::string*> >::_M_check_len(unsigned long, char const*) const
 t std::vector<std::string*, std::allocator<std::string*> >::_M_default_append(unsigned long)
 t std::vector<std::string, std::allocator<std::string> >::_M_check_len(unsigned long, char const*) const
 t std::vector<std::string, std::allocator<std::string> >::_M_insert_rval(__gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, std::string&&)
 t std::vector<std::string, std::allocator<std::string> >::operator=(std::vector<std::string, std::allocator<std::string> > const&)
 t std::vector<std::string, std::allocator<std::string> >::operator=(std::vector<std::string, std::allocator<std::string> > const&) [clone .isra.0]
 t std::vector<std::string, std::allocator<std::string> >::operator=(std::vector<std::string, std::allocator<std::string> > const&) [clone .isra.0] [clone .cold]
 t std::vector<std::string, std::allocator<std::string> >::push_back(std::string const&)
 t std::vector<std::string, std::allocator<std::string> >::reserve(unsigned long)
 t std::vector<std::string, std::allocator<std::string> >::vector(std::initializer_list<std::string>, std::allocator<std::string> const&)
 t std::vector<std::string, std::allocator<std::string> >::vector(std::vector<std::string, std::allocator<std::string> > const&)
 t std::vector<std::string, std::allocator<std::string> >::~vector()
 t std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > >::_M_fill_assign(unsigned long, std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > const&)
 t std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > >::operator=(std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > const&) [clone .isra.0]
 t std::vector<std::unique_ptr<CAnimPosePool::Block, std::default_delete<CAnimPosePool::Block> >, std::allocator<std::unique_ptr<CAnimPosePool::Block, std::default_delete<CAnimPosePool::Block> > > >::~vector()
 t std::vector<std::unique_ptr<CVRControllerTypeBindings, std::default_delete<CVRControllerTypeBindings> >, std::allocator<std::unique_ptr<CVRControllerTypeBindings, std::default_delete<CVRControllerTypeBindings> > > >::~vector()
 t std::vector<tinygltf::Accessor, std::allocator<tinygltf::Accessor> >::push_back(tinygltf::Accessor const&)
 t std::vector<tinygltf::AnimationChannel, std::allocator<tinygltf::AnimationChannel> >::~vector()
 t std::vector<tinygltf::AnimationSampler, std::allocator<tinygltf::AnimationSampler> >::~vector()
 t std::vector<tinygltf::Camera, std::allocator<tinygltf::Camera> >::push_back(tinygltf::Camera const&)
 t std::vector<tinygltf::Image, std::allocator<tinygltf::Image> >::push_back(tinygltf::Image const&)
 t std::vector<tinygltf::Light, std::allocator<tinygltf::Light> >::push_back(tinygltf::Light const&)
 t std::vector<tinygltf::Mesh, std::allocator<tinygltf::Mesh> >::_M_erase_at_end(tinygltf::Mesh*)
 t std::vector<tinygltf::Primitive, std::allocator<tinygltf::Primitive> >::~vector()
 t std::vector<tinygltf::Scene, std::allocator<tinygltf::Scene> >::push_back(tinygltf::Scene const&)
 t std::vector<tinygltf::Skin, std::allocator<tinygltf::Skin> >::push_back(tinygltf::Skin const&)
 t std::vector<tinygltf::Texture, std::allocator<tinygltf::Texture> >::push_back(tinygltf::Texture const&)
 t std::vector<tinygltf::Value, std::allocator<tinygltf::Value> >::operator=(std::vector<tinygltf::Value, std::allocator<tinygltf::Value> > const&) [clone .isra.0]
 t std::vector<tinygltf::Value, std::allocator<tinygltf::Value> >::operator=(std::vector<tinygltf::Value, std::allocator<tinygltf::Value> > const&) [clone .isra.0] [clone .cold]
 t std::vector<tinygltf::Value, std::allocator<tinygltf::Value> >::~vector()
 t std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >::~vector()
 t std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >::~vector()
 t std::vector<unsigned char*, std::allocator<unsigned char*> >::_M_default_append(unsigned long)
 t std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)
 t std::vector<unsigned char, std::allocator<unsigned char> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned long, unsigned char const&)
 t std::vector<unsigned char, std::allocator<unsigned char> >::operator=(std::vector<unsigned char, std::allocator<unsigned char> > const&) [clone .isra.0]
 t std::vector<unsigned int, std::allocator<unsigned int> >::_M_fill_insert(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned long, unsigned int const&)
 t std::vector<unsigned long, std::allocator<unsigned long> >::reserve(unsigned long)
 t std::vector<void*, std::allocator<void*> >::_M_check_len(unsigned long, char const*) const
 t std::vector<void*, std::allocator<void*> >::_M_default_append(unsigned long)
 t std::vector<vr::ETrackedDeviceProperty, std::allocator<vr::ETrackedDeviceProperty> >::~vector()
 t std::vector<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> >::_M_default_append(unsigned long)
 t std::vector<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> >::operator=(std::vector<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> > const&)
 t std::vector<vr::VREvent_t, std::allocator<vr::VREvent_t> >::_M_erase(__gnu_cxx::__normal_iterator<vr::VREvent_t*, std::vector<vr::VREvent_t, std::allocator<vr::VREvent_t> > >)
 t std::wstring_convert<std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>, wchar_t, std::allocator<wchar_t>, std::allocator<char> >::~wstring_convert()
 t strcpy_safe(char*, unsigned long, char const*)
 t stricmp(char const*, char const*)
 t strnicmp(char const*, char const*, unsigned long)
 t sxr_wrap_xrAcquireSwapchainImage(XrSwapchain_T*, XrSwapchainImageAcquireInfo const*, unsigned int*)
 t sxr_wrap_xrAcquireSwapchainImage(XrSwapchain_T*, XrSwapchainImageAcquireInfo const*, unsigned int*) [clone .cold]
 t sxr_wrap_xrApplyHapticFeedback(XrSession_T*, XrHapticActionInfo const*, XrHapticBaseHeader const*)
 t sxr_wrap_xrApplyHapticFeedback(XrSession_T*, XrHapticActionInfo const*, XrHapticBaseHeader const*) [clone .cold]
 t sxr_wrap_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)
 t sxr_wrap_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*) [clone .cold]
 t sxr_wrap_xrBeginFrame(XrSession_T*, XrFrameBeginInfo const*)
 t sxr_wrap_xrBeginFrame(XrSession_T*, XrFrameBeginInfo const*) [clone .cold]
 t sxr_wrap_xrBeginSession(XrSession_T*, XrSessionBeginInfo const*)
 t sxr_wrap_xrBeginSession(XrSession_T*, XrSessionBeginInfo const*) [clone .cold]
 t sxr_wrap_xrCreateAction(XrActionSet_T*, XrActionCreateInfo const*, XrAction_T**)
 t sxr_wrap_xrCreateAction(XrActionSet_T*, XrActionCreateInfo const*, XrAction_T**) [clone .cold]
 t sxr_wrap_xrCreateActionSet(XrInstance_T*, XrActionSetCreateInfo const*, XrActionSet_T**)
 t sxr_wrap_xrCreateActionSet(XrInstance_T*, XrActionSetCreateInfo const*, XrActionSet_T**) [clone .cold]
 t sxr_wrap_xrCreateActionSpace(XrSession_T*, XrActionSpaceCreateInfo const*, XrSpace_T**)
 t sxr_wrap_xrCreateActionSpace(XrSession_T*, XrActionSpaceCreateInfo const*, XrSpace_T**) [clone .cold]
 t sxr_wrap_xrCreateHandTrackerEXT(XrSession_T*, XrHandTrackerCreateInfoEXT const*, XrHandTrackerEXT_T**)
 t sxr_wrap_xrCreateHandTrackerEXT(XrSession_T*, XrHandTrackerCreateInfoEXT const*, XrHandTrackerEXT_T**) [clone .cold]
 t sxr_wrap_xrCreateInstance(XrInstanceCreateInfo const*, XrInstance_T**)
 t sxr_wrap_xrCreateInstance(XrInstanceCreateInfo const*, XrInstance_T**) [clone .cold]
 t sxr_wrap_xrCreateReferenceSpace(XrSession_T*, XrReferenceSpaceCreateInfo const*, XrSpace_T**)
 t sxr_wrap_xrCreateReferenceSpace(XrSession_T*, XrReferenceSpaceCreateInfo const*, XrSpace_T**) [clone .cold]
 t sxr_wrap_xrCreateSession(XrInstance_T*, XrSessionCreateInfo const*, XrSession_T**)
 t sxr_wrap_xrCreateSession(XrInstance_T*, XrSessionCreateInfo const*, XrSession_T**) [clone .cold]
 t sxr_wrap_xrCreateSwapchain(XrSession_T*, XrSwapchainCreateInfo const*, XrSwapchain_T**)
 t sxr_wrap_xrCreateSwapchain(XrSession_T*, XrSwapchainCreateInfo const*, XrSwapchain_T**) [clone .cold]
 t sxr_wrap_xrCreateVulkanDeviceKHR(XrInstance_T*, XrVulkanDeviceCreateInfoKHR const*, VkDevice_T**, VkResult*)
 t sxr_wrap_xrCreateVulkanDeviceKHR(XrInstance_T*, XrVulkanDeviceCreateInfoKHR const*, VkDevice_T**, VkResult*) [clone .cold]
 t sxr_wrap_xrCreateVulkanInstanceKHR(XrInstance_T*, XrVulkanInstanceCreateInfoKHR const*, VkInstance_T**, VkResult*)
 t sxr_wrap_xrCreateVulkanInstanceKHR(XrInstance_T*, XrVulkanInstanceCreateInfoKHR const*, VkInstance_T**, VkResult*) [clone .cold]
 t sxr_wrap_xrDestroyAction(XrAction_T*)
 t sxr_wrap_xrDestroyAction(XrAction_T*) [clone .cold]
 t sxr_wrap_xrDestroyActionSet(XrActionSet_T*)
 t sxr_wrap_xrDestroyActionSet(XrActionSet_T*) [clone .cold]
 t sxr_wrap_xrDestroyHandTrackerEXT(XrHandTrackerEXT_T*)
 t sxr_wrap_xrDestroyHandTrackerEXT(XrHandTrackerEXT_T*) [clone .cold]
 t sxr_wrap_xrDestroyInstance(XrInstance_T*)
 t sxr_wrap_xrDestroyInstance(XrInstance_T*) [clone .cold]
 t sxr_wrap_xrDestroySession(XrSession_T*)
 t sxr_wrap_xrDestroySession(XrSession_T*) [clone .cold]
 t sxr_wrap_xrDestroySpace(XrSpace_T*)
 t sxr_wrap_xrDestroySpace(XrSpace_T*) [clone .cold]
 t sxr_wrap_xrDestroySwapchain(XrSwapchain_T*)
 t sxr_wrap_xrDestroySwapchain(XrSwapchain_T*) [clone .cold]
 t sxr_wrap_xrEndFrame(XrSession_T*, XrFrameEndInfo const*)
 t sxr_wrap_xrEndFrame(XrSession_T*, XrFrameEndInfo const*) [clone .cold]
 t sxr_wrap_xrEndSession(XrSession_T*)
 t sxr_wrap_xrEndSession(XrSession_T*) [clone .cold]
 t sxr_wrap_xrEnumerateBoundSourcesForAction(XrSession_T*, XrBoundSourcesForActionEnumerateInfo const*, unsigned int, unsigned int*, unsigned long*)
 t sxr_wrap_xrEnumerateBoundSourcesForAction(XrSession_T*, XrBoundSourcesForActionEnumerateInfo const*, unsigned int, unsigned int*, unsigned long*) [clone .cold]
 t sxr_wrap_xrEnumerateDisplayRefreshRatesFB(XrSession_T*, unsigned int, unsigned int*, float*)
 t sxr_wrap_xrEnumerateDisplayRefreshRatesFB(XrSession_T*, unsigned int, unsigned int*, float*) [clone .cold]
 t sxr_wrap_xrEnumerateEnvironmentBlendModes(XrInstance_T*, unsigned long, XrViewConfigurationType, unsigned int, unsigned int*, XrEnvironmentBlendMode*)
 t sxr_wrap_xrEnumerateEnvironmentBlendModes(XrInstance_T*, unsigned long, XrViewConfigurationType, unsigned int, unsigned int*, XrEnvironmentBlendMode*) [clone .cold]
 t sxr_wrap_xrEnumerateInstanceExtensionProperties(char const*, unsigned int, unsigned int*, XrExtensionProperties*)
 t sxr_wrap_xrEnumerateInstanceExtensionProperties(char const*, unsigned int, unsigned int*, XrExtensionProperties*) [clone .cold]
 t sxr_wrap_xrEnumerateReferenceSpaces(XrSession_T*, unsigned int, unsigned int*, XrReferenceSpaceType*)
 t sxr_wrap_xrEnumerateReferenceSpaces(XrSession_T*, unsigned int, unsigned int*, XrReferenceSpaceType*) [clone .cold]
 t sxr_wrap_xrEnumerateSwapchainFormats(XrSession_T*, unsigned int, unsigned int*, long*)
 t sxr_wrap_xrEnumerateSwapchainFormats(XrSession_T*, unsigned int, unsigned int*, long*) [clone .cold]
 t sxr_wrap_xrEnumerateSwapchainImages(XrSwapchain_T*, unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t sxr_wrap_xrEnumerateSwapchainImages(XrSwapchain_T*, unsigned int, unsigned int*, XrSwapchainImageBaseHeader*) [clone .cold]
 t sxr_wrap_xrEnumerateViewConfigurationViews(XrInstance_T*, unsigned long, XrViewConfigurationType, unsigned int, unsigned int*, XrViewConfigurationView*)
 t sxr_wrap_xrEnumerateViewConfigurationViews(XrInstance_T*, unsigned long, XrViewConfigurationType, unsigned int, unsigned int*, XrViewConfigurationView*) [clone .cold]
 t sxr_wrap_xrEnumerateViewConfigurations(XrInstance_T*, unsigned long, unsigned int, unsigned int*, XrViewConfigurationType*)
 t sxr_wrap_xrEnumerateViewConfigurations(XrInstance_T*, unsigned long, unsigned int, unsigned int*, XrViewConfigurationType*) [clone .cold]
 t sxr_wrap_xrEnumerateViveTrackerPathsHTCX(XrInstance_T*, unsigned int, unsigned int*, XrViveTrackerPathsHTCX*)
 t sxr_wrap_xrEnumerateViveTrackerPathsHTCX(XrInstance_T*, unsigned int, unsigned int*, XrViveTrackerPathsHTCX*) [clone .cold]
 t sxr_wrap_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)
 t sxr_wrap_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*) [clone .cold]
 t sxr_wrap_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)
 t sxr_wrap_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*) [clone .cold]
 t sxr_wrap_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)
 t sxr_wrap_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*) [clone .cold]
 t sxr_wrap_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)
 t sxr_wrap_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*) [clone .cold]
 t sxr_wrap_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)
 t sxr_wrap_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*) [clone .cold]
 t sxr_wrap_xrGetDisplayRefreshRateFB(XrSession_T*, float*)
 t sxr_wrap_xrGetDisplayRefreshRateFB(XrSession_T*, float*) [clone .cold]
 t sxr_wrap_xrGetFrameCompositionReportEXT(XrSession_T*, unsigned int, XrFrameCompositionReportEXT*)
 t sxr_wrap_xrGetFrameCompositionReportEXT(XrSession_T*, unsigned int, XrFrameCompositionReportEXT*) [clone .cold]
 t sxr_wrap_xrGetInputSourceLocalizedName(XrSession_T*, XrInputSourceLocalizedNameGetInfo const*, unsigned int, unsigned int*, char*)
 t sxr_wrap_xrGetInputSourceLocalizedName(XrSession_T*, XrInputSourceLocalizedNameGetInfo const*, unsigned int, unsigned int*, char*) [clone .cold]
 t sxr_wrap_xrGetInstanceProcAddr(XrInstance_T*, char const*, void (**)())
 t sxr_wrap_xrGetInstanceProcAddr(XrInstance_T*, char const*, void (**)()) [clone .cold]
 t sxr_wrap_xrGetInstanceProperties(XrInstance_T*, XrInstanceProperties*)
 t sxr_wrap_xrGetInstanceProperties(XrInstance_T*, XrInstanceProperties*) [clone .cold]
 t sxr_wrap_xrGetOpenGLGraphicsRequirementsKHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsOpenGLKHR*)
 t sxr_wrap_xrGetOpenGLGraphicsRequirementsKHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsOpenGLKHR*) [clone .cold]
 t sxr_wrap_xrGetReferenceSpaceBoundsRect(XrSession_T*, XrReferenceSpaceType, XrExtent2Df*)
 t sxr_wrap_xrGetReferenceSpaceBoundsRect(XrSession_T*, XrReferenceSpaceType, XrExtent2Df*) [clone .cold]
 t sxr_wrap_xrGetSystem(XrInstance_T*, XrSystemGetInfo const*, unsigned long*)
 t sxr_wrap_xrGetSystem(XrInstance_T*, XrSystemGetInfo const*, unsigned long*) [clone .cold]
 t sxr_wrap_xrGetSystemProperties(XrInstance_T*, unsigned long, XrSystemProperties*)
 t sxr_wrap_xrGetSystemProperties(XrInstance_T*, unsigned long, XrSystemProperties*) [clone .cold]
 t sxr_wrap_xrGetViewConfigurationProperties(XrInstance_T*, unsigned long, XrViewConfigurationType, XrViewConfigurationProperties*)
 t sxr_wrap_xrGetViewConfigurationProperties(XrInstance_T*, unsigned long, XrViewConfigurationType, XrViewConfigurationProperties*) [clone .cold]
 t sxr_wrap_xrGetVisibilityMaskKHR(XrSession_T*, XrViewConfigurationType, unsigned int, XrVisibilityMaskTypeKHR, XrVisibilityMaskKHR*)
 t sxr_wrap_xrGetVisibilityMaskKHR(XrSession_T*, XrViewConfigurationType, unsigned int, XrVisibilityMaskTypeKHR, XrVisibilityMaskKHR*) [clone .cold]
 t sxr_wrap_xrGetVulkanDeviceExtensionsKHR(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*)
 t sxr_wrap_xrGetVulkanDeviceExtensionsKHR(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*) [clone .cold]
 t sxr_wrap_xrGetVulkanGraphicsDevice2KHR(XrInstance_T*, XrVulkanGraphicsDeviceGetInfoKHR const*, VkPhysicalDevice_T**)
 t sxr_wrap_xrGetVulkanGraphicsDevice2KHR(XrInstance_T*, XrVulkanGraphicsDeviceGetInfoKHR const*, VkPhysicalDevice_T**) [clone .cold]
 t sxr_wrap_xrGetVulkanGraphicsDeviceKHR(XrInstance_T*, unsigned long, VkInstance_T*, VkPhysicalDevice_T**)
 t sxr_wrap_xrGetVulkanGraphicsDeviceKHR(XrInstance_T*, unsigned long, VkInstance_T*, VkPhysicalDevice_T**) [clone .cold]
 t sxr_wrap_xrGetVulkanGraphicsRequirements2KHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsVulkanKHR*)
 t sxr_wrap_xrGetVulkanGraphicsRequirements2KHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsVulkanKHR*) [clone .cold]
 t sxr_wrap_xrGetVulkanGraphicsRequirementsKHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsVulkanKHR*)
 t sxr_wrap_xrGetVulkanGraphicsRequirementsKHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsVulkanKHR*) [clone .cold]
 t sxr_wrap_xrGetVulkanInstanceExtensionsKHR(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*)
 t sxr_wrap_xrGetVulkanInstanceExtensionsKHR(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*) [clone .cold]
 t sxr_wrap_xrLocateHandJointsEXT(XrHandTrackerEXT_T*, XrHandJointsLocateInfoEXT const*, XrHandJointLocationsEXT*)
 t sxr_wrap_xrLocateHandJointsEXT(XrHandTrackerEXT_T*, XrHandJointsLocateInfoEXT const*, XrHandJointLocationsEXT*) [clone .cold]
 t sxr_wrap_xrLocateSpace(XrSpace_T*, XrSpace_T*, long, XrSpaceLocation*)
 t sxr_wrap_xrLocateSpace(XrSpace_T*, XrSpace_T*, long, XrSpaceLocation*) [clone .cold]
 t sxr_wrap_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*)
 t sxr_wrap_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*) [clone .cold]
 t sxr_wrap_xrPathToString(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*)
 t sxr_wrap_xrPathToString(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*) [clone .cold]
 t sxr_wrap_xrPollEvent(XrInstance_T*, XrEventDataBuffer*)
 t sxr_wrap_xrPollEvent(XrInstance_T*, XrEventDataBuffer*) [clone .cold]
 t sxr_wrap_xrReleaseSwapchainImage(XrSwapchain_T*, XrSwapchainImageReleaseInfo const*)
 t sxr_wrap_xrReleaseSwapchainImage(XrSwapchain_T*, XrSwapchainImageReleaseInfo const*) [clone .cold]
 t sxr_wrap_xrRequestDisplayRefreshRateFB(XrSession_T*, float)
 t sxr_wrap_xrRequestDisplayRefreshRateFB(XrSession_T*, float) [clone .cold]
 t sxr_wrap_xrRequestExitSession(XrSession_T*)
 t sxr_wrap_xrRequestExitSession(XrSession_T*) [clone .cold]
 t sxr_wrap_xrResultToString(XrInstance_T*, XrResult, char*)
 t sxr_wrap_xrResultToString(XrInstance_T*, XrResult, char*) [clone .cold]
 t sxr_wrap_xrSetInputDeviceActiveEXT(XrSession_T*, unsigned long, unsigned long, unsigned int)
 t sxr_wrap_xrSetInputDeviceActiveEXT(XrSession_T*, unsigned long, unsigned long, unsigned int) [clone .cold]
 t sxr_wrap_xrSetInputDeviceLocationEXT(XrSession_T*, unsigned long, unsigned long, XrSpace_T*, XrPosef)
 t sxr_wrap_xrSetInputDeviceLocationEXT(XrSession_T*, unsigned long, unsigned long, XrSpace_T*, XrPosef) [clone .cold]
 t sxr_wrap_xrSetInputDeviceStateBoolEXT(XrSession_T*, unsigned long, unsigned long, unsigned int)
 t sxr_wrap_xrSetInputDeviceStateBoolEXT(XrSession_T*, unsigned long, unsigned long, unsigned int) [clone .cold]
 t sxr_wrap_xrSetInputDeviceStateFloatEXT(XrSession_T*, unsigned long, unsigned long, float)
 t sxr_wrap_xrSetInputDeviceStateFloatEXT(XrSession_T*, unsigned long, unsigned long, float) [clone .cold]
 t sxr_wrap_xrSetInputDeviceStateVector2fEXT(XrSession_T*, unsigned long, unsigned long, XrVector2f)
 t sxr_wrap_xrSetInputDeviceStateVector2fEXT(XrSession_T*, unsigned long, unsigned long, XrVector2f) [clone .cold]
 t sxr_wrap_xrStopHapticFeedback(XrSession_T*, XrHapticActionInfo const*)
 t sxr_wrap_xrStopHapticFeedback(XrSession_T*, XrHapticActionInfo const*) [clone .cold]
 t sxr_wrap_xrStringToPath(XrInstance_T*, char const*, unsigned long*)
 t sxr_wrap_xrStringToPath(XrInstance_T*, char const*, unsigned long*) [clone .cold]
 t sxr_wrap_xrStructureTypeToString(XrInstance_T*, XrStructureType, char*)
 t sxr_wrap_xrStructureTypeToString(XrInstance_T*, XrStructureType, char*) [clone .cold]
 t sxr_wrap_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*)
 t sxr_wrap_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*) [clone .cold]
 t sxr_wrap_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)
 t sxr_wrap_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*) [clone .cold]
 t sxr_wrap_xrWaitFrame(XrSession_T*, XrFrameWaitInfo const*, XrFrameState*)
 t sxr_wrap_xrWaitFrame(XrSession_T*, XrFrameWaitInfo const*, XrFrameState*) [clone .cold]
 t sxr_wrap_xrWaitSwapchainImage(XrSwapchain_T*, XrSwapchainImageWaitInfo const*)
 t sxr_wrap_xrWaitSwapchainImage(XrSwapchain_T*, XrSwapchainImageWaitInfo const*) [clone .cold]
 t sxr_xrAcquireSwapchainImage(XrSwapchain_T*, XrSwapchainImageAcquireInfo const*, unsigned int*)
 t sxr_xrApplyHapticFeedback(XrSession_T*, XrHapticActionInfo const*, XrHapticBaseHeader const*)
 t sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)
 t sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*) [clone .cold]
 t sxr_xrBeginFrame(XrSession_T*, XrFrameBeginInfo const*)
 t sxr_xrBeginSession(XrSession_T*, XrSessionBeginInfo const*)
 t sxr_xrCreateAction(XrActionSet_T*, XrActionCreateInfo const*, XrAction_T**)
 t sxr_xrCreateAction(XrActionSet_T*, XrActionCreateInfo const*, XrAction_T**) [clone .cold]
 t sxr_xrCreateActionSet(XrInstance_T*, XrActionSetCreateInfo const*, XrActionSet_T**)
 t sxr_xrCreateActionSet(XrInstance_T*, XrActionSetCreateInfo const*, XrActionSet_T**) [clone .cold]
 t sxr_xrCreateActionSpace(XrSession_T*, XrActionSpaceCreateInfo const*, XrSpace_T**)
 t sxr_xrCreateActionSpace(XrSession_T*, XrActionSpaceCreateInfo const*, XrSpace_T**) [clone .cold]
 t sxr_xrCreateHandTrackerEXT(XrSession_T*, XrHandTrackerCreateInfoEXT const*, XrHandTrackerEXT_T**)
 t sxr_xrCreateHandTrackerEXT(XrSession_T*, XrHandTrackerCreateInfoEXT const*, XrHandTrackerEXT_T**) [clone .cold]
 t sxr_xrCreateInstance(XrInstanceCreateInfo const*, XrInstance_T**)
 t sxr_xrCreateInstance(XrInstanceCreateInfo const*, XrInstance_T**) [clone .cold]
 t sxr_xrCreateReferenceSpace(XrSession_T*, XrReferenceSpaceCreateInfo const*, XrSpace_T**)
 t sxr_xrCreateReferenceSpace(XrSession_T*, XrReferenceSpaceCreateInfo const*, XrSpace_T**) [clone .cold]
 t sxr_xrCreateSession(XrInstance_T*, XrSessionCreateInfo const*, XrSession_T**)
 t sxr_xrCreateSession(XrInstance_T*, XrSessionCreateInfo const*, XrSession_T**) [clone .cold]
 t sxr_xrCreateSwapchain(XrSession_T*, XrSwapchainCreateInfo const*, XrSwapchain_T**)
 t sxr_xrCreateVulkanDeviceKHR(XrInstance_T*, XrVulkanDeviceCreateInfoKHR const*, VkDevice_T**, VkResult*)
 t sxr_xrCreateVulkanInstanceKHR(XrInstance_T*, XrVulkanInstanceCreateInfoKHR const*, VkInstance_T**, VkResult*)
 t sxr_xrDestroyAction(XrAction_T*)
 t sxr_xrDestroyActionSet(XrActionSet_T*)
 t sxr_xrDestroyHandTrackerEXT(XrHandTrackerEXT_T*)
 t sxr_xrDestroyInstance(XrInstance_T*)
 t sxr_xrDestroyInstance(XrInstance_T*) [clone .cold]
 t sxr_xrDestroySession(XrSession_T*)
 t sxr_xrDestroySpace(XrSpace_T*)
 t sxr_xrDestroySwapchain(XrSwapchain_T*)
 t sxr_xrEndFrame(XrSession_T*, XrFrameEndInfo const*)
 t sxr_xrEndSession(XrSession_T*)
 t sxr_xrEnumerateBoundSourcesForAction(XrSession_T*, XrBoundSourcesForActionEnumerateInfo const*, unsigned int, unsigned int*, unsigned long*)
 t sxr_xrEnumerateDisplayRefreshRatesFB(XrSession_T*, unsigned int, unsigned int*, float*)
 t sxr_xrEnumerateEnvironmentBlendModes(XrInstance_T*, unsigned long, XrViewConfigurationType, unsigned int, unsigned int*, XrEnvironmentBlendMode*)
 t sxr_xrEnumerateInstanceExtensionProperties(char const*, unsigned int, unsigned int*, XrExtensionProperties*)
 t sxr_xrEnumerateReferenceSpaces(XrSession_T*, unsigned int, unsigned int*, XrReferenceSpaceType*)
 t sxr_xrEnumerateSwapchainFormats(XrSession_T*, unsigned int, unsigned int*, long*)
 t sxr_xrEnumerateSwapchainImages(XrSwapchain_T*, unsigned int, unsigned int*, XrSwapchainImageBaseHeader*)
 t sxr_xrEnumerateViewConfigurationViews(XrInstance_T*, unsigned long, XrViewConfigurationType, unsigned int, unsigned int*, XrViewConfigurationView*)
 t sxr_xrEnumerateViewConfigurations(XrInstance_T*, unsigned long, unsigned int, unsigned int*, XrViewConfigurationType*)
 t sxr_xrEnumerateViveTrackerPathsHTCX(XrInstance_T*, unsigned int, unsigned int*, XrViveTrackerPathsHTCX*)
 t sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*)
 t sxr_xrGetActionStateBoolean(XrSession_T*, XrActionStateGetInfo const*, XrActionStateBoolean*) [clone .cold]
 t sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*)
 t sxr_xrGetActionStateFloat(XrSession_T*, XrActionStateGetInfo const*, XrActionStateFloat*) [clone .cold]
 t sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*)
 t sxr_xrGetActionStatePose(XrSession_T*, XrActionStateGetInfo const*, XrActionStatePose*) [clone .cold]
 t sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*)
 t sxr_xrGetActionStateVector2f(XrSession_T*, XrActionStateGetInfo const*, XrActionStateVector2f*) [clone .cold]
 t sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*)
 t sxr_xrGetCurrentInteractionProfile(XrSession_T*, unsigned long, XrInteractionProfileState*) [clone .cold]
 t sxr_xrGetDisplayRefreshRateFB(XrSession_T*, float*)
 t sxr_xrGetFrameCompositionReportEXT(XrSession_T*, unsigned int, XrFrameCompositionReportEXT*)
 t sxr_xrGetInputSourceLocalizedName(XrSession_T*, XrInputSourceLocalizedNameGetInfo const*, unsigned int, unsigned int*, char*)
 t sxr_xrGetInstanceProcAddr(XrInstance_T*, char const*, void (**)())
 t sxr_xrGetInstanceProcAddr(XrInstance_T*, char const*, void (**)()) [clone .cold]
 t sxr_xrGetInstanceProperties(XrInstance_T*, XrInstanceProperties*)
 t sxr_xrGetOpenGLGraphicsRequirementsKHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsOpenGLKHR*)
 t sxr_xrGetReferenceSpaceBoundsRect(XrSession_T*, XrReferenceSpaceType, XrExtent2Df*)
 t sxr_xrGetSystem(XrInstance_T*, XrSystemGetInfo const*, unsigned long*)
 t sxr_xrGetSystemProperties(XrInstance_T*, unsigned long, XrSystemProperties*)
 t sxr_xrGetSystemProperties(XrInstance_T*, unsigned long, XrSystemProperties*) [clone .cold]
 t sxr_xrGetViewConfigurationProperties(XrInstance_T*, unsigned long, XrViewConfigurationType, XrViewConfigurationProperties*)
 t sxr_xrGetVisibilityMaskKHR(XrSession_T*, XrViewConfigurationType, unsigned int, XrVisibilityMaskTypeKHR, XrVisibilityMaskKHR*)
 t sxr_xrGetVulkanDeviceExtensionsKHR(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*)
 t sxr_xrGetVulkanGraphicsDevice2KHR(XrInstance_T*, XrVulkanGraphicsDeviceGetInfoKHR const*, VkPhysicalDevice_T**)
 t sxr_xrGetVulkanGraphicsDeviceKHR(XrInstance_T*, unsigned long, VkInstance_T*, VkPhysicalDevice_T**)
 t sxr_xrGetVulkanGraphicsRequirements2KHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsVulkanKHR*)
 t sxr_xrGetVulkanGraphicsRequirementsKHR(XrInstance_T*, unsigned long, XrGraphicsRequirementsVulkanKHR*)
 t sxr_xrGetVulkanInstanceExtensionsKHR(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*)
 t sxr_xrLocateHandJointsEXT(XrHandTrackerEXT_T*, XrHandJointsLocateInfoEXT const*, XrHandJointLocationsEXT*)
 t sxr_xrLocateSpace(XrSpace_T*, XrSpace_T*, long, XrSpaceLocation*)
 t sxr_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*)
 t sxr_xrLocateViews(XrSession_T*, XrViewLocateInfo const*, XrViewState*, unsigned int, unsigned int*, XrView*) [clone .cold]
 t sxr_xrPathToString(XrInstance_T*, unsigned long, unsigned int, unsigned int*, char*)
 t sxr_xrPollEvent(XrInstance_T*, XrEventDataBuffer*)
 t sxr_xrPollEvent(XrInstance_T*, XrEventDataBuffer*) [clone .cold]
 t sxr_xrReleaseSwapchainImage(XrSwapchain_T*, XrSwapchainImageReleaseInfo const*)
 t sxr_xrRequestDisplayRefreshRateFB(XrSession_T*, float)
 t sxr_xrRequestExitSession(XrSession_T*)
 t sxr_xrResultToString(XrInstance_T*, XrResult, char*)
 t sxr_xrSetInputDeviceActiveEXT(XrSession_T*, unsigned long, unsigned long, unsigned int)
 t sxr_xrSetInputDeviceActiveEXT(XrSession_T*, unsigned long, unsigned long, unsigned int) [clone .cold]
 t sxr_xrSetInputDeviceLocationEXT(XrSession_T*, unsigned long, unsigned long, XrSpace_T*, XrPosef)
 t sxr_xrSetInputDeviceLocationEXT(XrSession_T*, unsigned long, unsigned long, XrSpace_T*, XrPosef) [clone .cold]
 t sxr_xrSetInputDeviceStateBoolEXT(XrSession_T*, unsigned long, unsigned long, unsigned int)
 t sxr_xrSetInputDeviceStateBoolEXT(XrSession_T*, unsigned long, unsigned long, unsigned int) [clone .cold]
 t sxr_xrSetInputDeviceStateFloatEXT(XrSession_T*, unsigned long, unsigned long, float)
 t sxr_xrSetInputDeviceStateFloatEXT(XrSession_T*, unsigned long, unsigned long, float) [clone .cold]
 t sxr_xrSetInputDeviceStateVector2fEXT(XrSession_T*, unsigned long, unsigned long, XrVector2f)
 t sxr_xrSetInputDeviceStateVector2fEXT(XrSession_T*, unsigned long, unsigned long, XrVector2f) [clone .cold]
 t sxr_xrStopHapticFeedback(XrSession_T*, XrHapticActionInfo const*)
 t sxr_xrStringToPath(XrInstance_T*, char const*, unsigned long*)
 t sxr_xrStringToPath(XrInstance_T*, char const*, unsigned long*) [clone .cold]
 t sxr_xrStructureTypeToString(XrInstance_T*, XrStructureType, char*)
 t sxr_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*)
 t sxr_xrSuggestInteractionProfileBindings(XrInstance_T*, XrInteractionProfileSuggestedBinding const*) [clone .cold]
 t sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)
 t sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*) [clone .cold]
 t sxr_xrWaitFrame(XrSession_T*, XrFrameWaitInfo const*, XrFrameState*)
 t sxr_xrWaitSwapchainImage(XrSwapchain_T*, XrSwapchainImageWaitInfo const*)
 t sxu::ApplyTransformToPose(XrPosef&, XrVector3f&, XrVector3f&, XrPosef const&, XrVector3f const&, XrVector3f const&, XrPosef const&)
 t sxu::BIsQuaternionValid(XrQuaternionf const&)
 t sxu::BIsXrRect2DiValid(XrRect2Di const&, XrExtent2Di const&)
 t sxu::GLMFromPose(XrPosef const&)
 t sxu::GetBoneIndexForJoint(XrHandJointEXT)
 t sxu::GetHiddenAreaMeshData(vr::HiddenAreaMesh_t const&, XrVisibilityMaskTypeKHR, std::vector<XrVector2f, std::allocator<XrVector2f> >&, std::vector<unsigned int, std::allocator<unsigned int> >&, vr::HmdMatrix44_t const&)
 t sxu::HmdMatrixFromPose(XrPosef const&)
 t sxu::HmdQuatFromXrQuat(XrQuaternionf const&)
 t sxu::IdentityPose()
 t sxu::InvertPose(XrPosef const&)
 t sxu::IsValidInPathComponent(char)
 t sxu::MultiplyPoses(XrPosef const&, XrPosef const&)
 t sxu::PoseFromHmdMatrix(vr::HmdMatrix34_t const&)
 t sxu::PoseFromTransform(vr::VRBoneTransform_t const&)
 t sxu::ProjectionFromXrFov(XrFovf const&, float*, float*, float*, float*)
 t sxu::ProjectionFromXrFov(XrFovf const&, float, float)
 t sxu::ResultToString(XrResult, char*)
 t sxu::ScalePose(XrPosef&, float)
 t sxu::StringToValidPath(std::string&)
 t sxu::StringToValidPath(std::string&) [clone .cold]
 t sxu::StructureTypeToString(XrStructureType, char*)
 t sxu::TextureBoundsFromXrRect(XrRect2Di const&, XrExtent2Di const&)
 t sxu::ToXrVector3f(vr::HmdVector3_t const&)
 t sxu::XrQuatFromHmdQuat(vr::HmdQuaternion_t const&)
 t sxu::XrVector_IsZero(XrVector3f const&)
 t sxu::XrVector_Length(XrVector3f const&)
 t sxu::flattenStringArray(char const* const*, unsigned int)
 t sxu::flattenStringArray(char const* const*, unsigned int) [clone .cold]
 t tinygltf::Accessor::operator==(tinygltf::Accessor const&) const
 t tinygltf::Accessor::~Accessor()
 t tinygltf::Animation::Animation(tinygltf::Animation const&)
 t tinygltf::Animation::operator==(tinygltf::Animation const&) const
 t tinygltf::Animation::~Animation()
 t tinygltf::AnimationChannel::operator==(tinygltf::AnimationChannel const&) const
 t tinygltf::AnimationChannel::~AnimationChannel()
 t tinygltf::AnimationSampler::operator==(tinygltf::AnimationSampler const&) const
 t tinygltf::Asset::operator==(tinygltf::Asset const&) const
 t tinygltf::Buffer::operator==(tinygltf::Buffer const&) const
 t tinygltf::Buffer::~Buffer()
 t tinygltf::BufferView::operator==(tinygltf::BufferView const&) const
 t tinygltf::Camera::Camera()
 t tinygltf::Camera::operator==(tinygltf::Camera const&) const
 t tinygltf::Camera::~Camera()
 t tinygltf::DecodeDataURI(std::vector<unsigned char, std::allocator<unsigned char> >*, std::string&, std::string const&, unsigned long, bool)
 t tinygltf::DecodeDataURI(std::vector<unsigned char, std::allocator<unsigned char> >*, std::string&, std::string const&, unsigned long, bool) [clone .cold]
 t tinygltf::Equals(std::vector<double, std::allocator<double> > const&, std::vector<double, std::allocator<double> > const&) [clone .isra.0]
 t tinygltf::Equals(tinygltf::Value const&, tinygltf::Value const&)
 t tinygltf::Equals(tinygltf::Value const&, tinygltf::Value const&) [clone .cold]
 t tinygltf::ExpandFilePath(std::string const&, void*)
 t tinygltf::ExpandFilePath(std::string const&, void*) [clone .cold]
 t tinygltf::FileExists(std::string const&, void*)
 t tinygltf::GetBaseDir(std::string const&)
 t tinygltf::GetFilePathExtension(std::string const&)
 t tinygltf::Image::operator==(tinygltf::Image const&) const
 t tinygltf::Image::~Image()
 t tinygltf::IsDataURI(std::string const&)
 t tinygltf::IsDataURI(std::string const&) [clone .cold]
 t tinygltf::JoinPath(std::string const&, std::string const&)
 t tinygltf::JoinPath(std::string const&, std::string const&) [clone .cold]
 t tinygltf::Light::Light(tinygltf::Light const&)
 t tinygltf::Light::operator==(tinygltf::Light const&) const
 t tinygltf::Light::~Light()
 t tinygltf::LoadExternalFile(std::vector<unsigned char, std::allocator<unsigned char> >*, std::string*, std::string*, std::string const&, std::string const&, bool, unsigned long, bool, tinygltf::FsCallbacks*)
 t tinygltf::LoadExternalFile(std::vector<unsigned char, std::allocator<unsigned char> >*, std::string*, std::string*, std::string const&, std::string const&, bool, unsigned long, bool, tinygltf::FsCallbacks*) [clone .cold]
 t tinygltf::LoadImageData(tinygltf::Image*, int, std::string*, std::string*, int, int, unsigned char const*, int, void*)
 t tinygltf::LoadImageData(tinygltf::Image*, int, std::string*, std::string*, int, int, unsigned char const*, int, void*) [clone .cold]
 t tinygltf::Material* std::__relocate_a_1<tinygltf::Material*, tinygltf::Material*, std::allocator<tinygltf::Material> >(tinygltf::Material*, tinygltf::Material*, tinygltf::Material*, std::allocator<tinygltf::Material>&) [clone .isra.0]
 t tinygltf::Material::Material()
 t tinygltf::Material::Material(tinygltf::Material const&)
 t tinygltf::Material::operator==(tinygltf::Material const&) const
 t tinygltf::Material::operator==(tinygltf::Material const&) const [clone .part.0]
 t tinygltf::Material::~Material()
 t tinygltf::Mesh::Mesh(tinygltf::Mesh const&)
 t tinygltf::Mesh::operator==(tinygltf::Mesh const&) const
 t tinygltf::Mesh::~Mesh()
 t tinygltf::MimeToExt(std::string const&)
 t tinygltf::Model::operator==(tinygltf::Model const&) const
 t tinygltf::Model::~Model()
 t tinygltf::Node::Node(tinygltf::Node const&)
 t tinygltf::Node::operator==(tinygltf::Node const&) const
 t tinygltf::Node::operator==(tinygltf::Node const&) const [clone .part.0]
 t tinygltf::Node::~Node()
 t tinygltf::NormalTextureInfo::operator==(tinygltf::NormalTextureInfo const&) const
 t tinygltf::OcclusionTextureInfo::operator==(tinygltf::OcclusionTextureInfo const&) const
 t tinygltf::OrthographicCamera::operator==(tinygltf::OrthographicCamera const&) const
 t tinygltf::OrthographicCamera::~OrthographicCamera()
 t tinygltf::Parameter::operator==(tinygltf::Parameter const&) const
 t tinygltf::Parameter::operator==(tinygltf::Parameter const&) const [clone .part.0]
 t tinygltf::Parameter::~Parameter()
 t tinygltf::ParseAnimation(tinygltf::Animation*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseAnimation(tinygltf::Animation*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseBooleanProperty(bool*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&) [clone .constprop.0]
 t tinygltf::ParseCamera(tinygltf::Camera*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseCamera(tinygltf::Camera*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseExtensionsProperty(std::map<std::string, tinygltf::Value, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .constprop.0] [clone .isra.0]
 t tinygltf::ParseExtensionsProperty(std::map<std::string, tinygltf::Value, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .constprop.0] [clone .isra.0] [clone .cold]
 t tinygltf::ParseExtrasProperty(tinygltf::Value*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .isra.0]
 t tinygltf::ParseExtrasProperty(tinygltf::Value*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .isra.0] [clone .cold]
 t tinygltf::ParseImage(tinygltf::Image*, int, std::string*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, tinygltf::FsCallbacks*, bool (**)(tinygltf::Image*, int, std::string*, std::string*, int, int, unsigned char const*, int, void*), void*)
 t tinygltf::ParseImage(tinygltf::Image*, int, std::string*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, tinygltf::FsCallbacks*, bool (**)(tinygltf::Image*, int, std::string*, std::string*, int, int, unsigned char const*, int, void*), void*) [clone .cold]
 t tinygltf::ParseIntegerArrayProperty(std::vector<int, std::allocator<int> >*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&) [clone .constprop.0]
 t tinygltf::ParseIntegerProperty(int*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&)
 t tinygltf::ParseIntegerProperty(int*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&) [clone .cold]
 t tinygltf::ParseJsonAsValue(tinygltf::Value*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseJsonAsValue(tinygltf::Value*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseLight(tinygltf::Light*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseLight(tinygltf::Light*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseMaterial(tinygltf::Material*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseMaterial(tinygltf::Material*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseNode(tinygltf::Node*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseNode(tinygltf::Node*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseNumberArrayProperty(std::vector<double, std::allocator<double> >*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&) [clone .constprop.0]
 t tinygltf::ParseNumberProperty(double*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&)
 t tinygltf::ParseNumberProperty(double*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&) [clone .cold]
 t tinygltf::ParseParameterProperty(tinygltf::Parameter*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool) [clone .constprop.0]
 t tinygltf::ParseParameterProperty(tinygltf::Parameter*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool) [clone .constprop.0] [clone .cold]
 t tinygltf::ParsePrimitive(tinygltf::Primitive*, tinygltf::Model*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .constprop.0]
 t tinygltf::ParsePrimitive(tinygltf::Primitive*, tinygltf::Model*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .constprop.0] [clone .cold]
 t tinygltf::ParseSampler(tinygltf::Sampler*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseSampler(tinygltf::Sampler*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseSkin(tinygltf::Skin*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseSkin(tinygltf::Skin*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseSparseAccessor(tinygltf::Accessor*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t tinygltf::ParseSparseAccessor(tinygltf::Accessor*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .cold]
 t tinygltf::ParseStringProperty(std::string*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&)
 t tinygltf::ParseStringProperty(std::string*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&) [clone .cold]
 t tinygltf::ParseTextureInfo(tinygltf::TextureInfo*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .isra.0]
 t tinygltf::ParseTextureInfo(tinygltf::TextureInfo*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&) [clone .isra.0] [clone .cold]
 t tinygltf::ParseUnsignedProperty(unsigned long*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&)
 t tinygltf::ParseUnsignedProperty(unsigned long*, std::string*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, std::string const&, bool, std::string const&) [clone .cold]
 t tinygltf::PbrMetallicRoughness::operator==(tinygltf::PbrMetallicRoughness const&) const
 t tinygltf::PerspectiveCamera::operator==(tinygltf::PerspectiveCamera const&) const
 t tinygltf::PerspectiveCamera::~PerspectiveCamera()
 t tinygltf::Primitive::Primitive(tinygltf::Primitive const&)
 t tinygltf::Primitive::operator==(tinygltf::Primitive const&) const
 t tinygltf::Primitive::~Primitive()
 t tinygltf::ReadWholeFile(std::vector<unsigned char, std::allocator<unsigned char> >*, std::string*, std::string const&, void*)
 t tinygltf::ReadWholeFile(std::vector<unsigned char, std::allocator<unsigned char> >*, std::string*, std::string const&, void*) [clone .cold]
 t tinygltf::Sampler::operator==(tinygltf::Sampler const&) const
 t tinygltf::Scene::operator==(tinygltf::Scene const&) const
 t tinygltf::Scene::~Scene()
 t tinygltf::SerializeExtensionMap(std::map<std::string, tinygltf::Value, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeExtensionMap(std::map<std::string, tinygltf::Value, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > >&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfAccessor(tinygltf::Accessor&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfAccessor(tinygltf::Accessor&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfAnimation(tinygltf::Animation&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfAnimation(tinygltf::Animation&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfAsset(tinygltf::Asset&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfAsset(tinygltf::Asset&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfBuffer(tinygltf::Buffer&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfBuffer(tinygltf::Buffer&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfBufferView(tinygltf::BufferView&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfBufferView(tinygltf::BufferView&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfImage(tinygltf::Image&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfImage(tinygltf::Image&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfMaterial(tinygltf::Material&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfMaterial(tinygltf::Material&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfMesh(tinygltf::Mesh&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfMesh(tinygltf::Mesh&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfModel(tinygltf::Model*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfModel(tinygltf::Model*, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeGltfTextureInfo(tinygltf::TextureInfo&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeGltfTextureInfo(tinygltf::TextureInfo&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeStringArrayProperty(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeStringArrayProperty(std::string const&, std::vector<std::string, std::allocator<std::string> > const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeStringProperty(std::string const&, std::string const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeStringProperty(std::string const&, std::string const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::SerializeValue(std::string const&, tinygltf::Value const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t tinygltf::SerializeValue(std::string const&, tinygltf::Value const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t tinygltf::Skin::operator==(tinygltf::Skin const&) const
 t tinygltf::SpotLight::operator==(tinygltf::SpotLight const&) const
 t tinygltf::SpotLight::~SpotLight()
 t tinygltf::Texture::operator==(tinygltf::Texture const&) const
 t tinygltf::Texture::~Texture()
 t tinygltf::TextureInfo::operator==(tinygltf::TextureInfo const&) const
 t tinygltf::TextureInfo::~TextureInfo()
 t tinygltf::TinyGLTF::LoadASCIIFromFile(tinygltf::Model*, std::string*, std::string*, std::string const&, unsigned int)
 t tinygltf::TinyGLTF::LoadASCIIFromFile(tinygltf::Model*, std::string*, std::string*, std::string const&, unsigned int) [clone .cold]
 t tinygltf::TinyGLTF::LoadASCIIFromString(tinygltf::Model*, std::string*, std::string*, char const*, unsigned int, std::string const&, unsigned int)
 t tinygltf::TinyGLTF::LoadBinaryFromFile(tinygltf::Model*, std::string*, std::string*, std::string const&, unsigned int)
 t tinygltf::TinyGLTF::LoadBinaryFromFile(tinygltf::Model*, std::string*, std::string*, std::string const&, unsigned int) [clone .cold]
 t tinygltf::TinyGLTF::LoadBinaryFromMemory(tinygltf::Model*, std::string*, std::string*, unsigned char const*, unsigned int, std::string const&, unsigned int)
 t tinygltf::TinyGLTF::LoadBinaryFromMemory(tinygltf::Model*, std::string*, std::string*, unsigned char const*, unsigned int, std::string const&, unsigned int) [clone .cold]
 t tinygltf::TinyGLTF::LoadFromString(tinygltf::Model*, std::string*, std::string*, char const*, unsigned int, std::string const&, unsigned int)
 t tinygltf::TinyGLTF::LoadFromString(tinygltf::Model*, std::string*, std::string*, char const*, unsigned int, std::string const&, unsigned int) [clone .cold]
 t tinygltf::TinyGLTF::SetFsCallbacks(tinygltf::FsCallbacks)
 t tinygltf::TinyGLTF::SetImageLoader(bool (*)(tinygltf::Image*, int, std::string*, std::string*, int, int, unsigned char const*, int, void*), void*)
 t tinygltf::TinyGLTF::SetImageWriter(bool (*)(std::string const*, std::string const*, tinygltf::Image*, bool, void*), void*)
 t tinygltf::TinyGLTF::WriteGltfSceneToFile(tinygltf::Model*, std::string const&, bool, bool, bool, bool)
 t tinygltf::TinyGLTF::WriteGltfSceneToFile(tinygltf::Model*, std::string const&, bool, bool, bool, bool) [clone .cold]
 t tinygltf::TinyGLTF::WriteGltfSceneToStream(tinygltf::Model*, std::ostream&, bool, bool)
 t tinygltf::TinyGLTF::WriteGltfSceneToStream(tinygltf::Model*, std::ostream&, bool, bool) [clone .cold]
 t tinygltf::UpdateImageObject(tinygltf::Image&, std::string&, int, bool, bool (**)(std::string const*, std::string const*, tinygltf::Image*, bool, void*), void*)
 t tinygltf::UpdateImageObject(tinygltf::Image&, std::string&, int, bool, bool (**)(std::string const*, std::string const*, tinygltf::Image*, bool, void*), void*) [clone .cold]
 t tinygltf::Value::Get(int) const
 t tinygltf::Value::Value(std::map<std::string, tinygltf::Value, std::less<std::string>, std::allocator<std::pair<std::string const, tinygltf::Value> > > const&)
 t tinygltf::Value::Value(tinygltf::Value const&)
 t tinygltf::Value::operator=(tinygltf::Value&&) [clone .isra.0]
 t tinygltf::Value::operator==(tinygltf::Value const&) const
 t tinygltf::Value::~Value()
 t tinygltf::ValueToJson(tinygltf::Value const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*)
 t tinygltf::ValueToJson(tinygltf::Value const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*) [clone .cold]
 t tinygltf::WriteBinaryGltfStream(std::ostream&, std::string const&)
 t tinygltf::WriteBinaryGltfStream(std::ostream&, std::string const&) [clone .cold]
 t tinygltf::WriteImageData(std::string const*, std::string const*, tinygltf::Image*, bool, void*)
 t tinygltf::WriteImageData(std::string const*, std::string const*, tinygltf::Image*, bool, void*) [clone .cold]
 t tinygltf::WriteToMemory_stbi(void*, void*, int)
 t tinygltf::WriteWholeFile(std::string*, std::string const&, std::vector<unsigned char, std::allocator<unsigned char> > const&, void*)
 t tinygltf::WriteWholeFile(std::string*, std::string const&, std::vector<unsigned char, std::allocator<unsigned char> > const&, void*) [clone .cold]
 t tinygltf::base64_decode(std::string const&)
 t tinygltf::base64_decode(std::string const&) [clone .cold]
 t tinygltf::base64_encode(unsigned char const*, unsigned int)
 t tinygltf::base64_encode(unsigned char const*, unsigned int) [clone .cold]
 t tinyobj::InitMaterial(tinyobj::material_t&)
 t tinyobj::LoadMtl(std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, std::istream&)
 t tinyobj::LoadMtl(std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, std::istream&) [clone .cold]
 t tinyobj::LoadObj(std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, char const*, char const*)
 t tinyobj::LoadObj(std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, char const*, char const*) [clone .cold]
 t tinyobj::LoadObj(std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, std::istream&, tinyobj::MaterialReader&)
 t tinyobj::LoadObj(std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, std::istream&, tinyobj::MaterialReader&) [clone .cold]
 t tinyobj::MaterialFileReader::operator()(std::string const&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >&)
 t tinyobj::MaterialFileReader::operator()(std::string const&, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >&, std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >&) [clone .cold]
 t tinyobj::MaterialFileReader::~MaterialFileReader()
 t tinyobj::exportFaceGroupToShape(tinyobj::shape_t&, std::map<tinyobj::vertex_index, unsigned int, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, std::vector<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> >, std::allocator<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> > > > const&, int, std::string const&, bool) [clone .constprop.0]
 t tinyobj::material_t::~material_t()
 t tinyobj::mesh_t::mesh_t(tinyobj::mesh_t const&)
 t tinyobj::mesh_t::~mesh_t()
 t tinyobj::updateVertex(std::map<tinyobj::vertex_index, unsigned int, std::less<tinyobj::vertex_index>, std::allocator<std::pair<tinyobj::vertex_index const, unsigned int> > >&, std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> >&, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, std::vector<float, std::allocator<float> > const&, tinyobj::vertex_index const&) [clone .part.0]
 t unsigned int std::uniform_int_distribution<unsigned int>::operator()<std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul> >(std::linear_congruential_engine<unsigned long, 16807ul, 0ul, 2147483647ul>&, std::uniform_int_distribution<unsigned int>::param_type const&) [clone .isra.0]
 t uw_frame_state_for
 t uw_frame_state_for.cold
 t uw_init_context_1
 t uw_init_context_1.cold
 t uw_install_context_1
 t uw_install_context_1.cold
 t uw_update_context_1
 t uw_update_context_1.cold
 t virtual thunk to CSharedBufferLinux::GetDeviceSize() const
 t virtual thunk to CSharedBufferLinux::GetDeviceSize() const [clone .cold]
 t virtual thunk to CSharedBufferLinux::GetSize() const
 t virtual thunk to CSharedBufferLinux::GetSize() const [clone .cold]
 t virtual thunk to CSharedBufferLinux::GetType() const
 t virtual thunk to CSharedBufferLinux::GetUsage() const
 t virtual thunk to CSharedBufferLinux::GetUsage() const [clone .cold]
 t virtual thunk to CSharedBufferLinux::GetVulkanBuffer() const
 t virtual thunk to CSharedBufferLinux::GetVulkanBufferMemory() const
 t virtual thunk to CSharedBufferLinux::GetVulkanMemoryHandleType() const
 t virtual thunk to CSharedBufferLinux::ImportVulkanBuffer(VkDevice_T*, unsigned long)
 t virtual thunk to CSharedBufferLinux::PrepareVulkanBufferForExport(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned int, unsigned int, unsigned int, unsigned int)
 t virtual thunk to CSharedBufferLinux::~CSharedBufferLinux()
 t virtual thunk to CSharedCountingSemaphoreLinux::CreateVulkanCountingSemaphore(VkDevice_T*)
 t virtual thunk to CSharedCountingSemaphoreLinux::GetType() const
 t virtual thunk to CSharedCountingSemaphoreLinux::ImportVulkanCountingSemaphore(VkDevice_T*, unsigned long)
 t virtual thunk to CSharedCountingSemaphoreLinux::Signal(unsigned long, vr::VRNativeDevice_t const*)
 t virtual thunk to CSharedCountingSemaphoreLinux::Wait(unsigned long, vr::VRNativeDevice_t const*)
 t virtual thunk to CSharedCountingSemaphoreLinux::~CSharedCountingSemaphoreLinux()
 t virtual thunk to CSharedImageLinux::GetDeviceSize() const
 t virtual thunk to CSharedImageLinux::GetDeviceSize() const [clone .cold]
 t virtual thunk to CSharedImageLinux::GetFormat() const
 t virtual thunk to CSharedImageLinux::GetFormat() const [clone .cold]
 t virtual thunk to CSharedImageLinux::GetHeight() const
 t virtual thunk to CSharedImageLinux::GetHeight() const [clone .cold]
 t virtual thunk to CSharedImageLinux::GetOGLTexture()
 t virtual thunk to CSharedImageLinux::GetType() const
 t virtual thunk to CSharedImageLinux::GetUsage() const
 t virtual thunk to CSharedImageLinux::GetUsage() const [clone .cold]
 t virtual thunk to CSharedImageLinux::GetVulkanImage() const
 t virtual thunk to CSharedImageLinux::GetVulkanImageMemory() const
 t virtual thunk to CSharedImageLinux::GetVulkanLayout() const
 t virtual thunk to CSharedImageLinux::GetVulkanLayout() const [clone .cold]
 t virtual thunk to CSharedImageLinux::GetVulkanMemoryHandleType() const
 t virtual thunk to CSharedImageLinux::GetVulkanQueueIndex() const
 t virtual thunk to CSharedImageLinux::GetVulkanQueueIndex() const [clone .cold]
 t virtual thunk to CSharedImageLinux::GetVulkanSharingMode() const
 t virtual thunk to CSharedImageLinux::GetVulkanSharingMode() const [clone .cold]
 t virtual thunk to CSharedImageLinux::GetWidth() const
 t virtual thunk to CSharedImageLinux::GetWidth() const [clone .cold]
 t virtual thunk to CSharedImageLinux::HasDepthStencil() const
 t virtual thunk to CSharedImageLinux::ImportOGLImage(unsigned long)
 t virtual thunk to CSharedImageLinux::ImportVulkanImage(VkDevice_T*, unsigned long)
 t virtual thunk to CSharedImageLinux::IsDedicated() const
 t virtual thunk to CSharedImageLinux::IsDedicated() const [clone .cold]
 t virtual thunk to CSharedImageLinux::IsMappable() const
 t virtual thunk to CSharedImageLinux::IsRenderable() const
 t virtual thunk to CSharedImageLinux::IsRenderable() const [clone .cold]
 t virtual thunk to CSharedImageLinux::PrepareForInterop()
 t virtual thunk to CSharedImageLinux::PrepareVulkanImageForExport(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, VkFormat, VkSharingMode, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool, bool, unsigned int, unsigned int const*)
 t virtual thunk to CSharedImageLinux::SetVulkanLayout(VkImageLayout)
 t virtual thunk to CSharedImageLinux::SetVulkanLayout(VkImageLayout) [clone .cold]
 t virtual thunk to CSharedImageLinux::SetVulkanQueueIndex(unsigned int)
 t virtual thunk to CSharedImageLinux::SetVulkanQueueIndex(unsigned int) [clone .cold]
 t virtual thunk to CSharedImageLinux::~CSharedImageLinux()
 t virtual thunk to CSharedResourceBaseLinux::AcquireSemaphoreToWait(vr::IVRSharedSemaphore**)
 t virtual thunk to CSharedResourceBaseLinux::AcquireSignalSemaphores()
 t virtual thunk to CSharedResourceBaseLinux::CreateFD()
 t virtual thunk to CSharedResourceBaseLinux::GetHandle() const
 t virtual thunk to CSharedResourceBaseLinux::GetUpdateCount() const
 t virtual thunk to CSharedResourceBaseLinux::GetUpdateCount() const [clone .cold]
 t virtual thunk to CSharedResourceBaseLinux::IncrementUpdateCount()
 t virtual thunk to CSharedResourceBaseLinux::IncrementUpdateCount() [clone .cold]
 t virtual thunk to CSharedResourceBaseLinux::SignalSubmissionCompleted()
 t virtual thunk to CSharedResourceBaseLinux::WaitSubmissionCompleted(vr::IVRSharedSemaphore*)
 t virtual thunk to CSharedResourceBaseLinux::~CSharedResourceBaseLinux()
 t virtual thunk to CSharedSemaphoreLinux::GetOGLSemaphore()
 t virtual thunk to CSharedSemaphoreLinux::GetType() const
 t virtual thunk to CSharedSemaphoreLinux::GetVulkanSemaphore() const
 t virtual thunk to CSharedSemaphoreLinux::ImportVulkanSemaphore(VkDevice_T*, unsigned long)
 t virtual thunk to CSharedSemaphoreLinux::IsResetRequired()
 t virtual thunk to CSharedSemaphoreLinux::IsResetRequired() [clone .cold]
 t virtual thunk to CSharedSemaphoreLinux::Lock(unsigned int)
 t virtual thunk to CSharedSemaphoreLinux::PrepareVulkanSemaphoreForExport(VkDevice_T*, VkSemaphore_T*)
 t virtual thunk to CSharedSemaphoreLinux::Unlock()
 t virtual thunk to CSharedSemaphoreLinux::~CSharedSemaphoreLinux()
 t virtual thunk to InMemoryInputStream::~InMemoryInputStream()
 t vkGetDeviceProcAddrStub
 t vkGetInstanceProcAddrStub
 t vkTools::checkDeviceExtensionPresent(VkPhysicalDevice_T*, char const*)
 t vkTools::checkDeviceExtensionPresent(VkPhysicalDevice_T*, char const*) [clone .cold]
 t vkTools::checkGlobalExtensionPresent(char const*)
 t vkTools::checkGlobalExtensionPresent(char const*) [clone .cold]
 t vkTools::destroyUniformData(VkDevice_T*, vkTools::UniformData*)
 t vkTools::errorString(VkResult)
 t vkTools::exitFatal(std::string, std::string)
 t vkTools::getSupportedDepthFormat(VkPhysicalDevice_T*, VkFormat*)
 t vkTools::getSupportedDepthFormat(VkPhysicalDevice_T*, VkFormat*) [clone .cold]
 t vkTools::initializers::bufferCreateInfo()
 t vkTools::initializers::bufferCreateInfo(unsigned int, unsigned long)
 t vkTools::initializers::bufferMemoryBarrier()
 t vkTools::initializers::commandBufferAllocateInfo(VkCommandPool_T*, VkCommandBufferLevel, unsigned int)
 t vkTools::initializers::commandBufferBeginInfo()
 t vkTools::initializers::commandBufferInheritanceInfo()
 t vkTools::initializers::commandPoolCreateInfo()
 t vkTools::initializers::computePipelineCreateInfo(VkPipelineLayout_T*, unsigned int)
 t vkTools::initializers::descriptorImageInfo(VkSampler_T*, VkImageView_T*, VkImageLayout)
 t vkTools::initializers::descriptorPoolCreateInfo(unsigned int, VkDescriptorPoolSize*, unsigned int)
 t vkTools::initializers::descriptorPoolSize(VkDescriptorType, unsigned int)
 t vkTools::initializers::descriptorSetAllocateInfo(VkDescriptorPool_T*, VkDescriptorSetLayout_T* const*, unsigned int)
 t vkTools::initializers::descriptorSetLayoutBinding(VkDescriptorType, unsigned int, unsigned int, unsigned int)
 t vkTools::initializers::descriptorSetLayoutCreateInfo(VkDescriptorSetLayoutBinding const*, unsigned int)
 t vkTools::initializers::eventCreateInfo()
 t vkTools::initializers::fenceCreateInfo(unsigned int)
 t vkTools::initializers::framebufferCreateInfo()
 t vkTools::initializers::imageCreateInfo()
 t vkTools::initializers::imageMemoryBarrier()
 t vkTools::initializers::imageViewCreateInfo()
 t vkTools::initializers::memoryAllocateInfo()
 t vkTools::initializers::memoryBarrier()
 t vkTools::initializers::pipelineColorBlendAttachmentState(unsigned int, unsigned int)
 t vkTools::initializers::pipelineColorBlendStateCreateInfo(unsigned int, VkPipelineColorBlendAttachmentState const*)
 t vkTools::initializers::pipelineCreateInfo(VkPipelineLayout_T*, VkRenderPass_T*, unsigned int)
 t vkTools::initializers::pipelineDepthStencilStateCreateInfo(unsigned int, unsigned int, VkCompareOp)
 t vkTools::initializers::pipelineDynamicStateCreateInfo(VkDynamicState const*, unsigned int, unsigned int)
 t vkTools::initializers::pipelineInputAssemblyStateCreateInfo(VkPrimitiveTopology, unsigned int, unsigned int)
 t vkTools::initializers::pipelineLayoutCreateInfo(VkDescriptorSetLayout_T* const*, unsigned int)
 t vkTools::initializers::pipelineMultisampleStateCreateInfo(VkSampleCountFlagBits, unsigned int)
 t vkTools::initializers::pipelineRasterizationStateCreateInfo(VkPolygonMode, unsigned int, VkFrontFace, unsigned int)
 t vkTools::initializers::pipelineTessellationStateCreateInfo(unsigned int)
 t vkTools::initializers::pipelineVertexInputStateCreateInfo()
 t vkTools::initializers::pipelineViewportStateCreateInfo(unsigned int, unsigned int, unsigned int)
 t vkTools::initializers::pushConstantRange(unsigned int, unsigned int, unsigned int)
 t vkTools::initializers::rect2D(int, int, int, int)
 t vkTools::initializers::renderPassBeginInfo()
 t vkTools::initializers::renderPassCreateInfo()
 t vkTools::initializers::samplerCreateInfo()
 t vkTools::initializers::semaphoreCreateInfo()
 t vkTools::initializers::submitInfo()
 t vkTools::initializers::vertexInputAttributeDescription(unsigned int, unsigned int, VkFormat, unsigned int)
 t vkTools::initializers::vertexInputBindingDescription(unsigned int, unsigned int, VkVertexInputRate)
 t vkTools::initializers::viewport(float, float, float, float)
 t vkTools::initializers::writeDescriptorSet(VkDescriptorSet_T*, VkDescriptorType, unsigned int, VkDescriptorBufferInfo*)
 t vkTools::initializers::writeDescriptorSet(VkDescriptorSet_T*, VkDescriptorType, unsigned int, VkDescriptorImageInfo*)
 t vkTools::loadShader(char const*, VkDevice_T*, VkShaderStageFlagBits)
 t vkTools::loadShader(char const*, VkDevice_T*, VkShaderStageFlagBits) [clone .cold]
 t vkTools::loadShaderGLSL(char const*, VkDevice_T*, VkShaderStageFlagBits)
 t vkTools::loadShaderGLSL(char const*, VkDevice_T*, VkShaderStageFlagBits) [clone .cold]
 t vkTools::postPresentBarrier(VkImage_T*)
 t vkTools::prePresentBarrier(VkImage_T*)
 t vkTools::readTextFile(char const*)
 t vkTools::readTextFile(char const*) [clone .cold]
 t vkTools::setImageLayout(VkCommandBuffer_T*, VkImage_T*, unsigned int, VkImageLayout, VkImageLayout)
 t vkTools::setImageLayout(VkCommandBuffer_T*, VkImage_T*, unsigned int, VkImageLayout, VkImageLayout, VkImageSubresourceRange)
 t vkh::BGetRequiredDeviceExtensions(VkPhysicalDevice_T*, std::vector<std::string, std::allocator<std::string> >&)
 t vkh::BGetRequiredDeviceExtensions(VkPhysicalDevice_T*, std::vector<std::string, std::allocator<std::string> >&) [clone .cold]
 t vkh::BGetRequiredInstanceExtensions(std::vector<std::string, std::allocator<std::string> >&)
 t vkh::BGetRequiredInstanceExtensions(std::vector<std::string, std::allocator<std::string> >&) [clone .cold]
 t vkh::BInitVulkan()
 t vkh::BIsDeviceExtensionSupported(VkPhysicalDevice_T*, std::string)
 t vkh::BIsDeviceExtensionSupported(VkPhysicalDevice_T*, std::string) [clone .part.0]
 t vkh::BIsInstanceExtensionSupported(std::string)
 t vkh::BIsInstanceExtensionSupported(std::string) [clone .cold]
 t vkh::CVulkanTempInstance::CVulkanTempInstance()
 t vkh::CVulkanTempInstance::CVulkanTempInstance() [clone .cold]
 t vkh::CVulkanTempInstance::~CVulkanTempInstance()
 t vkh::GetDeviceExtensionProperties(VkPhysicalDevice_T*)
 t vkh::GetDeviceExtensionProperties(VkPhysicalDevice_T*) [clone .cold]
 t vkh::GetInstanceExtensionProperties()
 t vkh::GetInstanceExtensionProperties() [clone .cold]
 t vkh::InitVulkanEntrypoints(VkInstance_T*)
 t void CSettingsManager::SetValue<bool, (ESettingValueType)0>(char const*, char const*, bool const&, vr::EVRSettingsError*)
 t void CSettingsManager::SetValue<double, (ESettingValueType)1>(char const*, char const*, double const&, vr::EVRSettingsError*)
 t void CSettingsManager::SetValue<std::string, (ESettingValueType)2>(char const*, char const*, std::string const&, vr::EVRSettingsError*)
 t void nlohmann::detail::dtoa_impl::grisu2<double>(char*, int&, int&, double)
 t void nlohmann::detail::from_json<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::boolean_t&)
 t void nlohmann::detail::from_json<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::string_t&)
 t void nlohmann::detail::from_json<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, int, 0>(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, int&)
 t void nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, double, 0>(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, double&)
 t void nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, long, 0>(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, long&)
 t void nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, unsigned long, 0>(nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&, unsigned long&)
 t void std::_Destroy_aux<false>::__destroy<CInputActionDefaultBindingFile*>(CInputActionDefaultBindingFile*, CInputActionDefaultBindingFile*)
 t void std::_Destroy_aux<false>::__destroy<OpResult*>(OpResult*, OpResult*)
 t void std::_Destroy_aux<false>::__destroy<ViveTracker*>(ViveTracker*, ViveTracker*)
 t void std::_Destroy_aux<false>::__destroy<std::__detail::_State<char>*>(std::__detail::_State<char>*, std::__detail::_State<char>*)
 t void std::_Destroy_aux<false>::__destroy<std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >*>(std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >*, std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >*)
 t void std::_Destroy_aux<false>::__destroy<std::pair<std::string, std::string>*>(std::pair<std::string, std::string>*, std::pair<std::string, std::string>*)
 t void std::_Destroy_aux<false>::__destroy<std::string*>(std::string*, std::string*)
 t void std::_Destroy_aux<false>::__destroy<tinygltf::AnimationSampler*>(tinygltf::AnimationSampler*, tinygltf::AnimationSampler*)
 t void std::_Destroy_aux<false>::__destroy<tinyobj::shape_t*>(tinyobj::shape_t*, tinyobj::shape_t*)
 t void std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int*>(int*, int*)
 t void std::__adjust_heap<__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, long, CDriverManager::HmdDriver_t, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)> >(__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, long, long, CDriverManager::HmdDriver_t, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)>)
 t void std::__adjust_heap<__gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, long, CSxrActionSet*, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}> >(__gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, long, __gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, CSxrActionSet*, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}>) [clone .constprop.0]
 t void std::__adjust_heap<__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, long, PhysicalDeviceInfo_t, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}> >(__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, long, __gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, PhysicalDeviceInfo_t, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>)
 t void std::__adjust_heap<__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, long, char, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, long, long, char, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
 t void std::__adjust_heap<__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, long, vr::VRActiveActionSet_t, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}> >(__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, long, __gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, vr::VRActiveActionSet_t, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}>) [clone .constprop.0]
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_bracket_matcher<false, false>(bool)
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_bracket_matcher<false, true>(bool)
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_bracket_matcher<true, false>(bool)
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_bracket_matcher<true, true>(bool)
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_character_class_matcher<false, false>()
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_character_class_matcher<false, true>()
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_character_class_matcher<true, false>()
 t void std::__detail::_Compiler<std::regex_traits<char> >::_M_insert_character_class_matcher<true, true>()
 t void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)
 t void std::__final_insertion_sort<__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
 t void std::__insertion_sort<__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)> >(__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)>)
 t void std::__insertion_sort<__gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}> >(__gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}>, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}>) [clone .constprop.0]
 t void std::__insertion_sort<__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}> >(__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>)
 t void std::__insertion_sort<__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
 t void std::__insertion_sort<__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}> >(__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}>, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}>) [clone .constprop.0]
 t void std::__introsort_loop<__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)> >(__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)>)
 t void std::__introsort_loop<__gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}> >(__gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}>, long, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrAttachSessionActionSets(XrSession_T*, XrSessionActionSetsAttachInfo const*)::{lambda(CSxrActionSet const*, CSxrActionSet const*)#1}>)
 t void std::__introsort_loop<__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}> >(__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>, long, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>)
 t void std::__introsort_loop<__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, long, __gnu_cxx::__ops::_Iter_less_iter>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, long, __gnu_cxx::__ops::_Iter_less_iter) [clone .isra.0]
 t void std::__introsort_loop<__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, long, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}> >(__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}>, long, __gnu_cxx::__ops::_Iter_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}>)
 t void std::__make_heap<__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)> >(__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)>&)
 t void std::__make_heap<__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}> >(__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>&)
 t void std::__pop_heap<__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)> >(__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)>&)
 t void std::__pop_heap<__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}> >(__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>, __gnu_cxx::__ops::_Iter_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>&)
 t void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)> >(__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, __gnu_cxx::__ops::_Val_comp_iter<bool (*)(CDriverManager::HmdDriver_t const&, CDriverManager::HmdDriver_t const&)>)
 t void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Val_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}> >(__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, __gnu_cxx::__ops::_Val_comp_iter<CVkDevice::ChoosePhysicalDevice()::{lambda(PhysicalDeviceInfo_t const&, PhysicalDeviceInfo_t const&)#1}>)
 t void std::__unguarded_linear_insert<__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, __gnu_cxx::__ops::_Val_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}> >(__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, __gnu_cxx::__ops::_Val_comp_iter<sxr_xrSyncActions(XrSession_T*, XrActionsSyncInfo const*)::{lambda(vr::VRActiveActionSet_t const&, vr::VRActiveActionSet_t const&)#2}>) [clone .constprop.0]
 t void std::deque<CVRCompositorSharedTextures::CommandBuffer_t*, std::allocator<CVRCompositorSharedTextures::CommandBuffer_t*> >::_M_push_front_aux<CVRCompositorSharedTextures::CommandBuffer_t* const&>(CVRCompositorSharedTextures::CommandBuffer_t* const&)
 t void std::deque<CVRSharedGLTexture::VulkanInteropSemaphore_t*, std::allocator<CVRSharedGLTexture::VulkanInteropSemaphore_t*> >::_M_push_front_aux<CVRSharedGLTexture::VulkanInteropSemaphore_t* const&>(CVRSharedGLTexture::VulkanInteropSemaphore_t* const&)
 t void std::deque<Json::OurReader::ErrorInfo, std::allocator<Json::OurReader::ErrorInfo> >::_M_push_back_aux<Json::OurReader::ErrorInfo const&>(Json::OurReader::ErrorInfo const&)
 t void std::deque<Json::Reader::ErrorInfo, std::allocator<Json::Reader::ErrorInfo> >::_M_push_back_aux<Json::Reader::ErrorInfo const&>(Json::Reader::ErrorInfo const&)
 t void std::deque<long, std::allocator<long> >::_M_push_back_aux<long const&>(long const&)
 t void std::deque<std::__detail::_StateSeq<std::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::regex_traits<char> > > >::_M_push_back_aux<std::__detail::_StateSeq<std::regex_traits<char> > const&>(std::__detail::_StateSeq<std::regex_traits<char> > const&)
 t void std::deque<std::string, std::allocator<std::string> >::_M_push_back_aux<std::string const&>(std::string const&)
 t void std::vector<BufferedLogMessage_t, std::allocator<BufferedLogMessage_t> >::_M_realloc_insert<BufferedLogMessage_t const&>(__gnu_cxx::__normal_iterator<BufferedLogMessage_t*, std::vector<BufferedLogMessage_t, std::allocator<BufferedLogMessage_t> > >, BufferedLogMessage_t const&)
 t void std::vector<CActionBinding, std::allocator<CActionBinding> >::_M_realloc_insert<CActionBinding const&>(__gnu_cxx::__normal_iterator<CActionBinding*, std::vector<CActionBinding, std::allocator<CActionBinding> > >, CActionBinding const&)
 t void std::vector<CActionBindingConfigGenerator::PendingChordEntry_t, std::allocator<CActionBindingConfigGenerator::PendingChordEntry_t> >::_M_realloc_insert<CActionBindingConfigGenerator::PendingChordEntry_t const&>(__gnu_cxx::__normal_iterator<CActionBindingConfigGenerator::PendingChordEntry_t*, std::vector<CActionBindingConfigGenerator::PendingChordEntry_t, std::allocator<CActionBindingConfigGenerator::PendingChordEntry_t> > >, CActionBindingConfigGenerator::PendingChordEntry_t const&)
 t void std::vector<CActionBindingProgressIndicator, std::allocator<CActionBindingProgressIndicator> >::_M_realloc_insert<CActionBindingProgressIndicator const&>(__gnu_cxx::__normal_iterator<CActionBindingProgressIndicator*, std::vector<CActionBindingProgressIndicator, std::allocator<CActionBindingProgressIndicator> > >, CActionBindingProgressIndicator const&)
 t void std::vector<CActionFilter, std::allocator<CActionFilter> >::_M_realloc_insert<CActionFilter const&>(__gnu_cxx::__normal_iterator<CActionFilter*, std::vector<CActionFilter, std::allocator<CActionFilter> > >, CActionFilter const&)
 t void std::vector<CAssertCallback*, std::allocator<CAssertCallback*> >::_M_realloc_insert<CAssertCallback* const&>(__gnu_cxx::__normal_iterator<CAssertCallback**, std::vector<CAssertCallback*, std::allocator<CAssertCallback*> > >, CAssertCallback* const&)
 t void std::vector<CBlockQueue::WriteEventInfo_t, std::allocator<CBlockQueue::WriteEventInfo_t> >::_M_realloc_insert<CBlockQueue::WriteEventInfo_t>(__gnu_cxx::__normal_iterator<CBlockQueue::WriteEventInfo_t*, std::vector<CBlockQueue::WriteEventInfo_t, std::allocator<CBlockQueue::WriteEventInfo_t> > >, CBlockQueue::WriteEventInfo_t&&)
 t void std::vector<CChaperoneUniverse, std::allocator<CChaperoneUniverse> >::_M_realloc_insert<CChaperoneUniverse const&>(__gnu_cxx::__normal_iterator<CChaperoneUniverse*, std::vector<CChaperoneUniverse, std::allocator<CChaperoneUniverse> > >, CChaperoneUniverse const&)
 t void std::vector<CDriverManager::DriverDevice_t, std::allocator<CDriverManager::DriverDevice_t> >::_M_realloc_insert<CDriverManager::DriverDevice_t>(__gnu_cxx::__normal_iterator<CDriverManager::DriverDevice_t*, std::vector<CDriverManager::DriverDevice_t, std::allocator<CDriverManager::DriverDevice_t> > >, CDriverManager::DriverDevice_t&&)
 t void std::vector<CDriverManager::DriverDevice_t, std::allocator<CDriverManager::DriverDevice_t> >::_M_realloc_insert<unsigned int&, vr::ITrackedDeviceServerDriver*&, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&>(__gnu_cxx::__normal_iterator<CDriverManager::DriverDevice_t*, std::vector<CDriverManager::DriverDevice_t, std::allocator<CDriverManager::DriverDevice_t> > >, unsigned int&, vr::ITrackedDeviceServerDriver*&, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&)
 t void std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> >::_M_realloc_insert<CDriverManager::HmdDriver_t const&>(__gnu_cxx::__normal_iterator<CDriverManager::HmdDriver_t*, std::vector<CDriverManager::HmdDriver_t, std::allocator<CDriverManager::HmdDriver_t> > >, CDriverManager::HmdDriver_t const&)
 t void std::vector<CInputAction, std::allocator<CInputAction> >::_M_realloc_insert<CInputAction const&>(__gnu_cxx::__normal_iterator<CInputAction*, std::vector<CInputAction, std::allocator<CInputAction> > >, CInputAction const&)
 t void std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> >::_M_realloc_insert<CInputActionDefaultBindingFile const&>(__gnu_cxx::__normal_iterator<CInputActionDefaultBindingFile*, std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> > >, CInputActionDefaultBindingFile const&)
 t void std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> >::_M_realloc_insert<CInputActionDefaultBindingFile>(__gnu_cxx::__normal_iterator<CInputActionDefaultBindingFile*, std::vector<CInputActionDefaultBindingFile, std::allocator<CInputActionDefaultBindingFile> > >, CInputActionDefaultBindingFile&&)
 t void std::vector<CInputActionSet, std::allocator<CInputActionSet> >::_M_realloc_insert<CInputActionSet const&>(__gnu_cxx::__normal_iterator<CInputActionSet*, std::vector<CInputActionSet, std::allocator<CInputActionSet> > >, CInputActionSet const&)
 t void std::vector<CInputActionSet, std::allocator<CInputActionSet> >::_M_realloc_insert<CInputActionSet>(__gnu_cxx::__normal_iterator<CInputActionSet*, std::vector<CInputActionSet, std::allocator<CInputActionSet> > >, CInputActionSet&&)
 t void std::vector<CInputFilter_Scalar_Constant::ScalarConstant_s, std::allocator<CInputFilter_Scalar_Constant::ScalarConstant_s> >::_M_realloc_insert<CInputFilter_Scalar_Constant::ScalarConstant_s const&>(__gnu_cxx::__normal_iterator<CInputFilter_Scalar_Constant::ScalarConstant_s*, std::vector<CInputFilter_Scalar_Constant::ScalarConstant_s, std::allocator<CInputFilter_Scalar_Constant::ScalarConstant_s> > >, CInputFilter_Scalar_Constant::ScalarConstant_s const&)
 t void std::vector<CInputOption, std::allocator<CInputOption> >::_M_realloc_insert<CInputOption const&>(__gnu_cxx::__normal_iterator<CInputOption*, std::vector<CInputOption, std::allocator<CInputOption> > >, CInputOption const&)
 t void std::vector<CLogCallback*, std::allocator<CLogCallback*> >::_M_realloc_insert<CLogCallback* const&>(__gnu_cxx::__normal_iterator<CLogCallback**, std::vector<CLogCallback*, std::allocator<CLogCallback*> > >, CLogCallback* const&)
 t void std::vector<COverlayViewResourceInfo*, std::allocator<COverlayViewResourceInfo*> >::_M_realloc_insert<COverlayViewResourceInfo* const&>(__gnu_cxx::__normal_iterator<COverlayViewResourceInfo**, std::vector<COverlayViewResourceInfo*, std::allocator<COverlayViewResourceInfo*> > >, COverlayViewResourceInfo* const&)
 t void std::vector<CPathManager_Server::AliasInfo_t, std::allocator<CPathManager_Server::AliasInfo_t> >::_M_realloc_insert<CPathManager_Server::AliasInfo_t const&>(__gnu_cxx::__normal_iterator<CPathManager_Server::AliasInfo_t*, std::vector<CPathManager_Server::AliasInfo_t, std::allocator<CPathManager_Server::AliasInfo_t> > >, CPathManager_Server::AliasInfo_t const&)
 t void std::vector<CPathManager_Server::UnresolvedAliasHandle_t, std::allocator<CPathManager_Server::UnresolvedAliasHandle_t> >::_M_realloc_insert<CPathManager_Server::UnresolvedAliasHandle_t const&>(__gnu_cxx::__normal_iterator<CPathManager_Server::UnresolvedAliasHandle_t*, std::vector<CPathManager_Server::UnresolvedAliasHandle_t, std::allocator<CPathManager_Server::UnresolvedAliasHandle_t> > >, CPathManager_Server::UnresolvedAliasHandle_t const&)
 t void std::vector<CPathManager_Server::WildcardInfo_t, std::allocator<CPathManager_Server::WildcardInfo_t> >::_M_realloc_insert<CPathManager_Server::WildcardInfo_t const&>(__gnu_cxx::__normal_iterator<CPathManager_Server::WildcardInfo_t*, std::vector<CPathManager_Server::WildcardInfo_t, std::allocator<CPathManager_Server::WildcardInfo_t> > >, CPathManager_Server::WildcardInfo_t const&)
 t void std::vector<CPoseRecipe::PoseOpDesc, std::allocator<CPoseRecipe::PoseOpDesc> >::_M_realloc_insert<CPoseRecipe::PoseOpDesc const&>(__gnu_cxx::__normal_iterator<CPoseRecipe::PoseOpDesc*, std::vector<CPoseRecipe::PoseOpDesc, std::allocator<CPoseRecipe::PoseOpDesc> > >, CPoseRecipe::PoseOpDesc const&)
 t void std::vector<CPropertyContainer::PropertyIndexCacheEntry_t, std::allocator<CPropertyContainer::PropertyIndexCacheEntry_t> >::_M_realloc_insert<CPropertyContainer::PropertyIndexCacheEntry_t>(__gnu_cxx::__normal_iterator<CPropertyContainer::PropertyIndexCacheEntry_t*, std::vector<CPropertyContainer::PropertyIndexCacheEntry_t, std::allocator<CPropertyContainer::PropertyIndexCacheEntry_t> > >, CPropertyContainer::PropertyIndexCacheEntry_t&&)
 t void std::vector<CRadialMenu::CRadialMenuSlice, std::allocator<CRadialMenu::CRadialMenuSlice> >::_M_realloc_insert<CRadialMenu::CRadialMenuSlice>(__gnu_cxx::__normal_iterator<CRadialMenu::CRadialMenuSlice*, std::vector<CRadialMenu::CRadialMenuSlice, std::allocator<CRadialMenu::CRadialMenuSlice> > >, CRadialMenu::CRadialMenuSlice&&)
 t void std::vector<CRenderModelManager::Component_t, std::allocator<CRenderModelManager::Component_t> >::_M_realloc_insert<CRenderModelManager::Component_t const&>(__gnu_cxx::__normal_iterator<CRenderModelManager::Component_t*, std::vector<CRenderModelManager::Component_t, std::allocator<CRenderModelManager::Component_t> > >, CRenderModelManager::Component_t const&)
 t void std::vector<CRenderModelManager::RenderModelContainer_t, std::allocator<CRenderModelManager::RenderModelContainer_t> >::_M_realloc_insert<CRenderModelManager::RenderModelContainer_t const&>(__gnu_cxx::__normal_iterator<CRenderModelManager::RenderModelContainer_t*, std::vector<CRenderModelManager::RenderModelContainer_t, std::allocator<CRenderModelManager::RenderModelContainer_t> > >, CRenderModelManager::RenderModelContainer_t const&)
 t void std::vector<CRenderModelManager::RenderModelTextureContainer_t, std::allocator<CRenderModelManager::RenderModelTextureContainer_t> >::_M_realloc_insert<CRenderModelManager::RenderModelTextureContainer_t const&>(__gnu_cxx::__normal_iterator<CRenderModelManager::RenderModelTextureContainer_t*, std::vector<CRenderModelManager::RenderModelTextureContainer_t, std::allocator<CRenderModelManager::RenderModelTextureContainer_t> > >, CRenderModelManager::RenderModelTextureContainer_t const&)
 t void std::vector<CSimulatedActionBase::SimActionBinding_t, std::allocator<CSimulatedActionBase::SimActionBinding_t> >::_M_realloc_insert<CSimulatedActionBase::SimActionBinding_t>(__gnu_cxx::__normal_iterator<CSimulatedActionBase::SimActionBinding_t*, std::vector<CSimulatedActionBase::SimActionBinding_t, std::allocator<CSimulatedActionBase::SimActionBinding_t> > >, CSimulatedActionBase::SimActionBinding_t&&)
 t void std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> >::_M_realloc_insert<CSxrActionSet* const&>(__gnu_cxx::__normal_iterator<CSxrActionSet**, std::vector<CSxrActionSet*, std::allocator<CSxrActionSet*> > >, CSxrActionSet* const&)
 t void std::vector<CSxrDeletableBase*, std::allocator<CSxrDeletableBase*> >::_M_realloc_insert<CSxrDeletableBase* const&>(__gnu_cxx::__normal_iterator<CSxrDeletableBase**, std::vector<CSxrDeletableBase*, std::allocator<CSxrDeletableBase*> > >, CSxrDeletableBase* const&)
 t void std::vector<CSxrSwapchainImageGLOpenVR, std::allocator<CSxrSwapchainImageGLOpenVR> >::_M_realloc_insert<>(__gnu_cxx::__normal_iterator<CSxrSwapchainImageGLOpenVR*, std::vector<CSxrSwapchainImageGLOpenVR, std::allocator<CSxrSwapchainImageGLOpenVR> > >)
 t void std::vector<CSxrSwapchainImageVulkanOpenVR, std::allocator<CSxrSwapchainImageVulkanOpenVR> >::_M_realloc_insert<>(__gnu_cxx::__normal_iterator<CSxrSwapchainImageVulkanOpenVR*, std::vector<CSxrSwapchainImageVulkanOpenVR, std::allocator<CSxrSwapchainImageVulkanOpenVR> > >)
 t void std::vector<CThreadWatchdog::Status_s*, std::allocator<CThreadWatchdog::Status_s*> >::_M_realloc_insert<CThreadWatchdog::Status_s* const&>(__gnu_cxx::__normal_iterator<CThreadWatchdog::Status_s**, std::vector<CThreadWatchdog::Status_s*, std::allocator<CThreadWatchdog::Status_s*> > >, CThreadWatchdog::Status_s* const&)
 t void std::vector<CTrackedDeviceServerDriverAdapter*, std::allocator<CTrackedDeviceServerDriverAdapter*> >::_M_realloc_insert<CTrackedDeviceServerDriverAdapter* const&>(__gnu_cxx::__normal_iterator<CTrackedDeviceServerDriverAdapter**, std::vector<CTrackedDeviceServerDriverAdapter*, std::allocator<CTrackedDeviceServerDriverAdapter*> > >, CTrackedDeviceServerDriverAdapter* const&)
 t void std::vector<CVRCompositorSharedTextures::VulkanDeviceData_t, std::allocator<CVRCompositorSharedTextures::VulkanDeviceData_t> >::_M_realloc_insert<CVRCompositorSharedTextures::VulkanDeviceData_t const&>(__gnu_cxx::__normal_iterator<CVRCompositorSharedTextures::VulkanDeviceData_t*, std::vector<CVRCompositorSharedTextures::VulkanDeviceData_t, std::allocator<CVRCompositorSharedTextures::VulkanDeviceData_t> > >, CVRCompositorSharedTextures::VulkanDeviceData_t const&)
 t void std::vector<CVRInputLatest::FrameActionData_t, std::allocator<CVRInputLatest::FrameActionData_t> >::_M_realloc_insert<CVRInputLatest::FrameActionData_t const&>(__gnu_cxx::__normal_iterator<CVRInputLatest::FrameActionData_t*, std::vector<CVRInputLatest::FrameActionData_t, std::allocator<CVRInputLatest::FrameActionData_t> > >, CVRInputLatest::FrameActionData_t const&)
 t void std::vector<CVkAllocator::MemoryTypeInfo_t*, std::allocator<CVkAllocator::MemoryTypeInfo_t*> >::_M_realloc_insert<CVkAllocator::MemoryTypeInfo_t* const&>(__gnu_cxx::__normal_iterator<CVkAllocator::MemoryTypeInfo_t**, std::vector<CVkAllocator::MemoryTypeInfo_t*, std::allocator<CVkAllocator::MemoryTypeInfo_t*> > >, CVkAllocator::MemoryTypeInfo_t* const&)
 t void std::vector<CVkAllocator::MemoryTypeInfo_t, std::allocator<CVkAllocator::MemoryTypeInfo_t> >::_M_realloc_insert<CVkAllocator::MemoryTypeInfo_t const&>(__gnu_cxx::__normal_iterator<CVkAllocator::MemoryTypeInfo_t*, std::vector<CVkAllocator::MemoryTypeInfo_t, std::allocator<CVkAllocator::MemoryTypeInfo_t> > >, CVkAllocator::MemoryTypeInfo_t const&)
 t void std::vector<CVkResourceBase*, std::allocator<CVkResourceBase*> >::_M_realloc_insert<CVkResourceBase* const&>(__gnu_cxx::__normal_iterator<CVkResourceBase**, std::vector<CVkResourceBase*, std::allocator<CVkResourceBase*> > >, CVkResourceBase* const&)
 t void std::vector<CVkTimeline*, short_alloc<CVkTimeline*, 80ul, 8ul> >::_M_realloc_insert<CVkTimeline* const&>(__gnu_cxx::__normal_iterator<CVkTimeline**, std::vector<CVkTimeline*, short_alloc<CVkTimeline*, 80ul, 8ul> > >, CVkTimeline* const&)
 t void std::vector<CVkTimeline*, std::allocator<CVkTimeline*> >::_M_realloc_insert<CVkTimeline* const&>(__gnu_cxx::__normal_iterator<CVkTimeline**, std::vector<CVkTimeline*, std::allocator<CVkTimeline*> > >, CVkTimeline* const&)
 t void std::vector<CVulkanVRRenderer::ComputePipelineCacheEntry_t, std::allocator<CVulkanVRRenderer::ComputePipelineCacheEntry_t> >::_M_realloc_insert<CVulkanVRRenderer::ComputePipelineCacheEntry_t const&>(__gnu_cxx::__normal_iterator<CVulkanVRRenderer::ComputePipelineCacheEntry_t*, std::vector<CVulkanVRRenderer::ComputePipelineCacheEntry_t, std::allocator<CVulkanVRRenderer::ComputePipelineCacheEntry_t> > >, CVulkanVRRenderer::ComputePipelineCacheEntry_t const&)
 t void std::vector<CVulkanVRRenderer::DescriptorCacheEntry_t, std::allocator<CVulkanVRRenderer::DescriptorCacheEntry_t> >::_M_realloc_insert<CVulkanVRRenderer::DescriptorCacheEntry_t const&>(__gnu_cxx::__normal_iterator<CVulkanVRRenderer::DescriptorCacheEntry_t*, std::vector<CVulkanVRRenderer::DescriptorCacheEntry_t, std::allocator<CVulkanVRRenderer::DescriptorCacheEntry_t> > >, CVulkanVRRenderer::DescriptorCacheEntry_t const&)
 t void std::vector<CVulkanVRRenderer::GpuTiming_t, std::allocator<CVulkanVRRenderer::GpuTiming_t> >::_M_realloc_insert<CVulkanVRRenderer::GpuTiming_t const&>(__gnu_cxx::__normal_iterator<CVulkanVRRenderer::GpuTiming_t*, std::vector<CVulkanVRRenderer::GpuTiming_t, std::allocator<CVulkanVRRenderer::GpuTiming_t> > >, CVulkanVRRenderer::GpuTiming_t const&)
 t void std::vector<CVulkanVRRenderer::MemoryTypeInfo, std::allocator<CVulkanVRRenderer::MemoryTypeInfo> >::_M_realloc_insert<CVulkanVRRenderer::MemoryTypeInfo const&>(__gnu_cxx::__normal_iterator<CVulkanVRRenderer::MemoryTypeInfo*, std::vector<CVulkanVRRenderer::MemoryTypeInfo, std::allocator<CVulkanVRRenderer::MemoryTypeInfo> > >, CVulkanVRRenderer::MemoryTypeInfo const&)
 t void std::vector<CVulkanVRRenderer::MemoryTypeInfo::Heap, std::allocator<CVulkanVRRenderer::MemoryTypeInfo::Heap> >::_M_realloc_insert<CVulkanVRRenderer::MemoryTypeInfo::Heap const&>(__gnu_cxx::__normal_iterator<CVulkanVRRenderer::MemoryTypeInfo::Heap*, std::vector<CVulkanVRRenderer::MemoryTypeInfo::Heap, std::allocator<CVulkanVRRenderer::MemoryTypeInfo::Heap> > >, CVulkanVRRenderer::MemoryTypeInfo::Heap const&)
 t void std::vector<CWatchdogDriverContext*, std::allocator<CWatchdogDriverContext*> >::_M_realloc_insert<CWatchdogDriverContext* const&>(__gnu_cxx::__normal_iterator<CWatchdogDriverContext**, std::vector<CWatchdogDriverContext*, std::allocator<CWatchdogDriverContext*> > >, CWatchdogDriverContext* const&)
 t void std::vector<DriverPresenceEntry_t, std::allocator<DriverPresenceEntry_t> >::_M_realloc_insert<DriverPresenceEntry_t const&>(__gnu_cxx::__normal_iterator<DriverPresenceEntry_t*, std::vector<DriverPresenceEntry_t, std::allocator<DriverPresenceEntry_t> > >, DriverPresenceEntry_t const&)
 t void std::vector<FilterSortInfo_t, std::allocator<FilterSortInfo_t> >::_M_realloc_insert<FilterSortInfo_t const&>(__gnu_cxx::__normal_iterator<FilterSortInfo_t*, std::vector<FilterSortInfo_t, std::allocator<FilterSortInfo_t> > >, FilterSortInfo_t const&)
 t void std::vector<ILogListener*, std::allocator<ILogListener*> >::_M_realloc_insert<ILogListener* const&>(__gnu_cxx::__normal_iterator<ILogListener**, std::vector<ILogListener*, std::allocator<ILogListener*> > >, ILogListener* const&)
 t void std::vector<IPC::ISharedMem*, std::allocator<IPC::ISharedMem*> >::_M_realloc_insert<IPC::ISharedMem* const&>(__gnu_cxx::__normal_iterator<IPC::ISharedMem**, std::vector<IPC::ISharedMem*, std::allocator<IPC::ISharedMem*> > >, IPC::ISharedMem* const&)
 t void std::vector<InteractionProfileInput_t, std::allocator<InteractionProfileInput_t> >::_M_realloc_insert<InteractionProfileInput_t>(__gnu_cxx::__normal_iterator<InteractionProfileInput_t*, std::vector<InteractionProfileInput_t, std::allocator<InteractionProfileInput_t> > >, InteractionProfileInput_t&&)
 t void std::vector<Json::OurReader::StructuredError, std::allocator<Json::OurReader::StructuredError> >::_M_realloc_insert<Json::OurReader::StructuredError const&>(__gnu_cxx::__normal_iterator<Json::OurReader::StructuredError*, std::vector<Json::OurReader::StructuredError, std::allocator<Json::OurReader::StructuredError> > >, Json::OurReader::StructuredError const&)
 t void std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> >::_M_realloc_insert<Json::PathArgument const*>(__gnu_cxx::__normal_iterator<Json::PathArgument const**, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > >, Json::PathArgument const*&&)
 t void std::vector<Json::PathArgument, std::allocator<Json::PathArgument> >::_M_realloc_insert<Json::PathArgument const&>(__gnu_cxx::__normal_iterator<Json::PathArgument*, std::vector<Json::PathArgument, std::allocator<Json::PathArgument> > >, Json::PathArgument const&)
 t void std::vector<Json::PathArgument, std::allocator<Json::PathArgument> >::_M_realloc_insert<Json::PathArgument>(__gnu_cxx::__normal_iterator<Json::PathArgument*, std::vector<Json::PathArgument, std::allocator<Json::PathArgument> > >, Json::PathArgument&&)
 t void std::vector<Json::Reader::StructuredError, std::allocator<Json::Reader::StructuredError> >::_M_realloc_insert<Json::Reader::StructuredError const&>(__gnu_cxx::__normal_iterator<Json::Reader::StructuredError*, std::vector<Json::Reader::StructuredError, std::allocator<Json::Reader::StructuredError> > >, Json::Reader::StructuredError const&)
 t void std::vector<Json::Value, std::allocator<Json::Value> >::_M_realloc_insert<Json::Value>(__gnu_cxx::__normal_iterator<Json::Value*, std::vector<Json::Value, std::allocator<Json::Value> > >, Json::Value&&)
 t void std::vector<LiquidVR::CVcetMotionEstimator::MotionVectorOutput_t, std::allocator<LiquidVR::CVcetMotionEstimator::MotionVectorOutput_t> >::_M_realloc_insert<LiquidVR::CVcetMotionEstimator::MotionVectorOutput_t const&>(__gnu_cxx::__normal_iterator<LiquidVR::CVcetMotionEstimator::MotionVectorOutput_t*, std::vector<LiquidVR::CVcetMotionEstimator::MotionVectorOutput_t, std::allocator<LiquidVR::CVcetMotionEstimator::MotionVectorOutput_t> > >, LiquidVR::CVcetMotionEstimator::MotionVectorOutput_t const&)
 t void std::vector<ModeSlot_t, std::allocator<ModeSlot_t> >::_M_realloc_insert<ModeSlot_t const&>(__gnu_cxx::__normal_iterator<ModeSlot_t*, std::vector<ModeSlot_t, std::allocator<ModeSlot_t> > >, ModeSlot_t const&)
 t void std::vector<OpResult, std::allocator<OpResult> >::_M_realloc_insert<OpResult const&>(__gnu_cxx::__normal_iterator<OpResult*, std::vector<OpResult, std::allocator<OpResult> > >, OpResult const&)
 t void std::vector<OxrApiLayer_t, std::allocator<OxrApiLayer_t> >::_M_realloc_insert<OxrApiLayer_t>(__gnu_cxx::__normal_iterator<OxrApiLayer_t*, std::vector<OxrApiLayer_t, std::allocator<OxrApiLayer_t> > >, OxrApiLayer_t&&)
 t void std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> >::_M_realloc_insert<PathHandleInfo_t const&>(__gnu_cxx::__normal_iterator<PathHandleInfo_t*, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > >, PathHandleInfo_t const&)
 t void std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> >::_M_realloc_insert<PathHandleInfo_t>(__gnu_cxx::__normal_iterator<PathHandleInfo_t*, std::vector<PathHandleInfo_t, std::allocator<PathHandleInfo_t> > >, PathHandleInfo_t&&)
 t void std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> >::_M_realloc_insert<PhysicalDeviceInfo_t>(__gnu_cxx::__normal_iterator<PhysicalDeviceInfo_t*, std::vector<PhysicalDeviceInfo_t, std::allocator<PhysicalDeviceInfo_t> > >, PhysicalDeviceInfo_t&&)
 t void std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> >::_M_realloc_insert<PropertyDumpEntry_t const&>(__gnu_cxx::__normal_iterator<PropertyDumpEntry_t*, std::vector<PropertyDumpEntry_t, std::allocator<PropertyDumpEntry_t> > >, PropertyDumpEntry_t const&)
 t void std::vector<Reflection::TypeInfo::BaseClassInfo_t, std::allocator<Reflection::TypeInfo::BaseClassInfo_t> >::_M_realloc_insert<Reflection::TypeInfo::BaseClassInfo_t const&>(__gnu_cxx::__normal_iterator<Reflection::TypeInfo::BaseClassInfo_t*, std::vector<Reflection::TypeInfo::BaseClassInfo_t, std::allocator<Reflection::TypeInfo::BaseClassInfo_t> > >, Reflection::TypeInfo::BaseClassInfo_t const&)
 t void std::vector<SuggestedBinding, std::allocator<SuggestedBinding> >::_M_realloc_insert<SuggestedBinding const&>(__gnu_cxx::__normal_iterator<SuggestedBinding*, std::vector<SuggestedBinding, std::allocator<SuggestedBinding> > >, SuggestedBinding const&)
 t void std::vector<SxrSwapchainImagePrism_t, std::allocator<SxrSwapchainImagePrism_t> >::_M_realloc_insert<>(__gnu_cxx::__normal_iterator<SxrSwapchainImagePrism_t*, std::vector<SxrSwapchainImagePrism_t, std::allocator<SxrSwapchainImagePrism_t> > >)
 t void std::vector<TrackerPaths, std::allocator<TrackerPaths> >::_M_realloc_insert<TrackerPaths const&>(__gnu_cxx::__normal_iterator<TrackerPaths*, std::vector<TrackerPaths, std::allocator<TrackerPaths> > >, TrackerPaths const&)
 t void std::vector<VRAction_Entry_t, std::allocator<VRAction_Entry_t> >::_M_realloc_insert<VRAction_Entry_t const&>(__gnu_cxx::__normal_iterator<VRAction_Entry_t*, std::vector<VRAction_Entry_t, std::allocator<VRAction_Entry_t> > >, VRAction_Entry_t const&)
 t void std::vector<VRInputValue_t, std::allocator<VRInputValue_t> >::_M_realloc_insert<VRInputValue_t const&>(__gnu_cxx::__normal_iterator<VRInputValue_t*, std::vector<VRInputValue_t, std::allocator<VRInputValue_t> > >, VRInputValue_t const&)
 t void std::vector<ViveTracker, std::allocator<ViveTracker> >::_M_realloc_insert<ViveTracker const&>(__gnu_cxx::__normal_iterator<ViveTracker*, std::vector<ViveTracker, std::allocator<ViveTracker> > >, ViveTracker const&)
 t void std::vector<VkAttachmentDescription, std::allocator<VkAttachmentDescription> >::_M_realloc_insert<VkAttachmentDescription const&>(__gnu_cxx::__normal_iterator<VkAttachmentDescription*, std::vector<VkAttachmentDescription, std::allocator<VkAttachmentDescription> > >, VkAttachmentDescription const&)
 t void std::vector<VkAttachmentReference, std::allocator<VkAttachmentReference> >::_M_realloc_insert<VkAttachmentReference const&>(__gnu_cxx::__normal_iterator<VkAttachmentReference*, std::vector<VkAttachmentReference, std::allocator<VkAttachmentReference> > >, VkAttachmentReference const&)
 t void std::vector<VkClearAttachment, std::allocator<VkClearAttachment> >::_M_realloc_insert<VkClearAttachment const&>(__gnu_cxx::__normal_iterator<VkClearAttachment*, std::vector<VkClearAttachment, std::allocator<VkClearAttachment> > >, VkClearAttachment const&)
 t void std::vector<VkClearValue, std::allocator<VkClearValue> >::_M_realloc_insert<VkClearValue const&>(__gnu_cxx::__normal_iterator<VkClearValue*, std::vector<VkClearValue, std::allocator<VkClearValue> > >, VkClearValue const&)
 t void std::vector<VkDescriptorSetLayoutBinding, std::allocator<VkDescriptorSetLayoutBinding> >::_M_realloc_insert<VkDescriptorSetLayoutBinding const&>(__gnu_cxx::__normal_iterator<VkDescriptorSetLayoutBinding*, std::vector<VkDescriptorSetLayoutBinding, std::allocator<VkDescriptorSetLayoutBinding> > >, VkDescriptorSetLayoutBinding const&)
 t void std::vector<VkDeviceMemory_T*, short_alloc<VkDeviceMemory_T*, 80ul, 8ul> >::_M_realloc_insert<VkDeviceMemory_T* const&>(__gnu_cxx::__normal_iterator<VkDeviceMemory_T**, std::vector<VkDeviceMemory_T*, short_alloc<VkDeviceMemory_T*, 80ul, 8ul> > >, VkDeviceMemory_T* const&)
 t void std::vector<VkDeviceQueueCreateInfo, short_alloc<VkDeviceQueueCreateInfo, 400ul, 8ul> >::_M_realloc_insert<VkDeviceQueueCreateInfo const&>(__gnu_cxx::__normal_iterator<VkDeviceQueueCreateInfo*, std::vector<VkDeviceQueueCreateInfo, short_alloc<VkDeviceQueueCreateInfo, 400ul, 8ul> > >, VkDeviceQueueCreateInfo const&)
 t void std::vector<VkFence_T*, std::allocator<VkFence_T*> >::_M_realloc_insert<VkFence_T* const&>(__gnu_cxx::__normal_iterator<VkFence_T**, std::vector<VkFence_T*, std::allocator<VkFence_T*> > >, VkFence_T* const&)
 t void std::vector<VkImageSharedData_t, std::allocator<VkImageSharedData_t> >::_M_realloc_insert<>(__gnu_cxx::__normal_iterator<VkImageSharedData_t*, std::vector<VkImageSharedData_t, std::allocator<VkImageSharedData_t> > >)
 t void std::vector<VkImageView_T*, std::allocator<VkImageView_T*> >::_M_realloc_insert<VkImageView_T* const&>(__gnu_cxx::__normal_iterator<VkImageView_T**, std::vector<VkImageView_T*, std::allocator<VkImageView_T*> > >, VkImageView_T* const&)
 t void std::vector<VkPipelineColorBlendAttachmentState, std::allocator<VkPipelineColorBlendAttachmentState> >::_M_realloc_insert<VkPipelineColorBlendAttachmentState const&>(__gnu_cxx::__normal_iterator<VkPipelineColorBlendAttachmentState*, std::vector<VkPipelineColorBlendAttachmentState, std::allocator<VkPipelineColorBlendAttachmentState> > >, VkPipelineColorBlendAttachmentState const&)
 t void std::vector<VkSemaphore_T*, short_alloc<VkSemaphore_T*, 128ul, 8ul> >::_M_realloc_insert<VkSemaphore_T* const&>(__gnu_cxx::__normal_iterator<VkSemaphore_T**, std::vector<VkSemaphore_T*, short_alloc<VkSemaphore_T*, 128ul, 8ul> > >, VkSemaphore_T* const&)
 t void std::vector<VkSemaphore_T*, short_alloc<VkSemaphore_T*, 80ul, 8ul> >::_M_realloc_insert<VkSemaphore_T* const&>(__gnu_cxx::__normal_iterator<VkSemaphore_T**, std::vector<VkSemaphore_T*, short_alloc<VkSemaphore_T*, 80ul, 8ul> > >, VkSemaphore_T* const&)
 t void std::vector<VkSemaphore_T*, std::allocator<VkSemaphore_T*> >::_M_realloc_insert<VkSemaphore_T* const&>(__gnu_cxx::__normal_iterator<VkSemaphore_T**, std::vector<VkSemaphore_T*, std::allocator<VkSemaphore_T*> > >, VkSemaphore_T* const&)
 t void std::vector<VkSemaphore_T*, std::allocator<VkSemaphore_T*> >::_M_realloc_insert<VkSemaphore_T*>(__gnu_cxx::__normal_iterator<VkSemaphore_T**, std::vector<VkSemaphore_T*, std::allocator<VkSemaphore_T*> > >, VkSemaphore_T*&&)
 t void std::vector<VkVertexInputAttributeDescription, std::allocator<VkVertexInputAttributeDescription> >::_M_realloc_insert<VkVertexInputAttributeDescription const&>(__gnu_cxx::__normal_iterator<VkVertexInputAttributeDescription*, std::vector<VkVertexInputAttributeDescription, std::allocator<VkVertexInputAttributeDescription> > >, VkVertexInputAttributeDescription const&)
 t void std::vector<VkWriteDescriptorSet, std::allocator<VkWriteDescriptorSet> >::_M_realloc_insert<VkWriteDescriptorSet const&>(__gnu_cxx::__normal_iterator<VkWriteDescriptorSet*, std::vector<VkWriteDescriptorSet, std::allocator<VkWriteDescriptorSet> > >, VkWriteDescriptorSet const&)
 t void std::vector<VulkanVRRenderer::Texture*, std::allocator<VulkanVRRenderer::Texture*> >::_M_realloc_insert<VulkanVRRenderer::Texture* const&>(__gnu_cxx::__normal_iterator<VulkanVRRenderer::Texture**, std::vector<VulkanVRRenderer::Texture*, std::allocator<VulkanVRRenderer::Texture*> > >, VulkanVRRenderer::Texture* const&)
 t void std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> >::_M_realloc_insert<XrEnvironmentBlendMode>(__gnu_cxx::__normal_iterator<XrEnvironmentBlendMode*, std::vector<XrEnvironmentBlendMode, std::allocator<XrEnvironmentBlendMode> > >, XrEnvironmentBlendMode&&)
 t void std::vector<XrExtensionProperties, std::allocator<XrExtensionProperties> >::_M_realloc_insert<XrExtensionProperties const&>(__gnu_cxx::__normal_iterator<XrExtensionProperties*, std::vector<XrExtensionProperties, std::allocator<XrExtensionProperties> > >, XrExtensionProperties const&)
 t void std::vector<XrReferenceSpaceType, std::allocator<XrReferenceSpaceType> >::_M_realloc_insert<XrReferenceSpaceType>(__gnu_cxx::__normal_iterator<XrReferenceSpaceType*, std::vector<XrReferenceSpaceType, std::allocator<XrReferenceSpaceType> > >, XrReferenceSpaceType&&)
 t void std::vector<XrSwapchainImageOpenGLKHR, std::allocator<XrSwapchainImageOpenGLKHR> >::_M_realloc_insert<XrSwapchainImageOpenGLKHR const&>(__gnu_cxx::__normal_iterator<XrSwapchainImageOpenGLKHR*, std::vector<XrSwapchainImageOpenGLKHR, std::allocator<XrSwapchainImageOpenGLKHR> > >, XrSwapchainImageOpenGLKHR const&)
 t void std::vector<XrSwapchainImageVulkanKHR, std::allocator<XrSwapchainImageVulkanKHR> >::_M_realloc_insert<XrSwapchainImageVulkanKHR const&>(__gnu_cxx::__normal_iterator<XrSwapchainImageVulkanKHR*, std::vector<XrSwapchainImageVulkanKHR, std::allocator<XrSwapchainImageVulkanKHR> > >, XrSwapchainImageVulkanKHR const&)
 t void std::vector<XrVector2f, std::allocator<XrVector2f> >::_M_realloc_insert<XrVector2f>(__gnu_cxx::__normal_iterator<XrVector2f*, std::vector<XrVector2f, std::allocator<XrVector2f> > >, XrVector2f&&)
 t void std::vector<XrView, std::allocator<XrView> >::_M_realloc_insert<XrView>(__gnu_cxx::__normal_iterator<XrView*, std::vector<XrView, std::allocator<XrView> > >, XrView&&)
 t void std::vector<XrViewConfigurationType, std::allocator<XrViewConfigurationType> >::_M_realloc_insert<XrViewConfigurationType>(__gnu_cxx::__normal_iterator<XrViewConfigurationType*, std::vector<XrViewConfigurationType, std::allocator<XrViewConfigurationType> > >, XrViewConfigurationType&&)
 t void std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> >::_M_realloc_insert<XrViewConfigurationView const&>(__gnu_cxx::__normal_iterator<XrViewConfigurationView*, std::vector<XrViewConfigurationView, std::allocator<XrViewConfigurationView> > >, XrViewConfigurationView const&)
 t void std::vector<amdgpu_bo*, std::allocator<amdgpu_bo*> >::_M_realloc_insert<amdgpu_bo*>(__gnu_cxx::__normal_iterator<amdgpu_bo**, std::vector<amdgpu_bo*, std::allocator<amdgpu_bo*> > >, amdgpu_bo*&&)
 t void std::vector<bool*, std::allocator<bool*> >::_M_realloc_insert<bool*>(__gnu_cxx::__normal_iterator<bool**, std::vector<bool*, std::allocator<bool*> > >, bool*&&)
 t void std::vector<char const*, std::allocator<char const*> >::_M_realloc_insert<char const* const&>(__gnu_cxx::__normal_iterator<char const**, std::vector<char const*, std::allocator<char const*> > >, char const* const&)
 t void std::vector<char const*, std::allocator<char const*> >::_M_realloc_insert<char const*>(__gnu_cxx::__normal_iterator<char const**, std::vector<char const*, std::allocator<char const*> > >, char const*&&)
 t void std::vector<char const*, std::allocator<char const*> >::emplace_back<char const*>(char const*&&)
 t void std::vector<char, std::allocator<char> >::_M_realloc_insert<char>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, char&&)
 t void std::vector<double, std::allocator<double> >::_M_assign_aux<double const*>(double const*, double const*, std::forward_iterator_tag) [clone .isra.0]
 t void std::vector<double, std::allocator<double> >::_M_realloc_insert<double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double&&)
 t void std::vector<facet::CCompositionClient::CSwapchain::CImage, std::allocator<facet::CCompositionClient::CSwapchain::CImage> >::_M_realloc_insert<std::unique_ptr<facet::IVkInteropImage, std::default_delete<facet::IVkInteropImage> > >(__gnu_cxx::__normal_iterator<facet::CCompositionClient::CSwapchain::CImage*, std::vector<facet::CCompositionClient::CSwapchain::CImage, std::allocator<facet::CCompositionClient::CSwapchain::CImage> > >, std::unique_ptr<facet::IVkInteropImage, std::default_delete<facet::IVkInteropImage> >&&)
 t void std::vector<facet::CVkTimelinePoint, short_alloc<facet::CVkTimelinePoint, 160ul, 8ul> >::_M_realloc_insert<facet::CVkTimelinePoint const&>(__gnu_cxx::__normal_iterator<facet::CVkTimelinePoint*, std::vector<facet::CVkTimelinePoint, short_alloc<facet::CVkTimelinePoint, 160ul, 8ul> > >, facet::CVkTimelinePoint const&)
 t void std::vector<facet::CVkTimelinePoint, std::allocator<facet::CVkTimelinePoint> >::_M_realloc_insert<facet::CVkTimelinePoint const&>(__gnu_cxx::__normal_iterator<facet::CVkTimelinePoint*, std::vector<facet::CVkTimelinePoint, std::allocator<facet::CVkTimelinePoint> > >, facet::CVkTimelinePoint const&)
 t void std::vector<facet::IVkInteropImage*, std::allocator<facet::IVkInteropImage*> >::_M_realloc_insert<facet::IVkInteropImage*>(__gnu_cxx::__normal_iterator<facet::IVkInteropImage**, std::vector<facet::IVkInteropImage*, std::allocator<facet::IVkInteropImage*> > >, facet::IVkInteropImage*&&)
 t void std::vector<float, std::allocator<float> >::_M_realloc_insert<float const&>(__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >, float const&)
 t void std::vector<float, std::allocator<float> >::_M_realloc_insert<float>(__gnu_cxx::__normal_iterator<float*, std::vector<float, std::allocator<float> > >, float&&)
 t void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)
 t void std::vector<int, std::allocator<int> >::_M_realloc_insert<int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&&)
 t void std::vector<int, std::allocator<int> >::emplace_back<int>(int&&)
 t void std::vector<long, std::allocator<long> >::_M_realloc_insert<long const&>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long const&)
 t void std::vector<long, std::allocator<long> >::_M_realloc_insert<long>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long&&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> >::_M_realloc_insert<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>* const&>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>**, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> > >, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>* const&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> >::_M_realloc_insert<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>**, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*> > >, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*&&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<bool&>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, bool&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<double&>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, double&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<long&>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, long&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> const&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<nlohmann::detail::value_t>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, nlohmann::detail::value_t&&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<std::string&>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, std::string&)
 t void std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::_M_realloc_insert<unsigned long&>(__gnu_cxx::__normal_iterator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>*, std::vector<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, std::allocator<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > > >, unsigned long&)
 t void std::vector<std::__detail::_State<char>, std::allocator<std::__detail::_State<char> > >::_M_realloc_insert<std::__detail::_State<char> >(__gnu_cxx::__normal_iterator<std::__detail::_State<char>*, std::vector<std::__detail::_State<char>, std::allocator<std::__detail::_State<char> > > >, std::__detail::_State<char>&&)
 t void std::vector<std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >, std::allocator<std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > > > >::_M_realloc_insert<std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > > const&>(__gnu_cxx::__normal_iterator<std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >*, std::vector<std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > >, std::allocator<std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > > > > >, std::map<std::string, int, std::less<std::string>, std::allocator<std::pair<std::string const, int> > > const&)
 t void std::vector<std::pair<ETrackerRole, char const*>, std::allocator<std::pair<ETrackerRole, char const*> > >::_M_realloc_insert<std::pair<ETrackerRole, char const*> >(__gnu_cxx::__normal_iterator<std::pair<ETrackerRole, char const*>*, std::vector<std::pair<ETrackerRole, char const*>, std::allocator<std::pair<ETrackerRole, char const*> > > >, std::pair<ETrackerRole, char const*>&&)
 t void std::vector<std::pair<char, char>, std::allocator<std::pair<char, char> > >::_M_realloc_insert<std::pair<char, char> >(__gnu_cxx::__normal_iterator<std::pair<char, char>*, std::vector<std::pair<char, char>, std::allocator<std::pair<char, char> > > >, std::pair<char, char>&&)
 t void std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_realloc_insert<std::pair<int, int> const&>(__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::pair<int, int> const&)
 t void std::vector<std::pair<long, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > >, std::allocator<std::pair<long, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > > > >::_M_realloc_insert<long&, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > const&>(__gnu_cxx::__normal_iterator<std::pair<long, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > >*, std::vector<std::pair<long, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > >, std::allocator<std::pair<long, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > > > > >, long&, std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> >, std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > > > const&)
 t void std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > >::_M_realloc_insert<std::pair<std::string, std::string> >(__gnu_cxx::__normal_iterator<std::pair<std::string, std::string>*, std::vector<std::pair<std::string, std::string>, std::allocator<std::pair<std::string, std::string> > > >, std::pair<std::string, std::string>&&)
 t void std::vector<std::regex_traits<char>::_RegexMask, std::allocator<std::regex_traits<char>::_RegexMask> >::_M_realloc_insert<std::regex_traits<char>::_RegexMask const&>(__gnu_cxx::__normal_iterator<std::regex_traits<char>::_RegexMask*, std::vector<std::regex_traits<char>::_RegexMask, std::allocator<std::regex_traits<char>::_RegexMask> > >, std::regex_traits<char>::_RegexMask const&)
 t void std::vector<std::shared_ptr<CInputActionSet>, std::allocator<std::shared_ptr<CInputActionSet> > >::_M_realloc_insert<std::shared_ptr<CInputActionSet> const&>(__gnu_cxx::__normal_iterator<std::shared_ptr<CInputActionSet>*, std::vector<std::shared_ptr<CInputActionSet>, std::allocator<std::shared_ptr<CInputActionSet> > > >, std::shared_ptr<CInputActionSet> const&)
 t void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string const&>(std::string const&)
 t void std::vector<std::string, std::allocator<std::string> >::_M_emplace_back_aux<std::string>(std::string&&)
 t void std::vector<std::string, std::allocator<std::string> >::_M_range_insert<__gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > > >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, std::forward_iterator_tag) [clone .isra.0]
 t void std::vector<std::string, std::allocator<std::string> >::_M_range_insert<__gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > > >(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, __gnu_cxx::__normal_iterator<std::string const*, std::vector<std::string, std::allocator<std::string> > >, std::forward_iterator_tag) [clone .isra.0] [clone .cold]
 t void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string const&>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&)
 t void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string&&)
 t void std::vector<std::string, std::allocator<std::string> >::emplace_back<std::string>(std::string&&)
 t void std::vector<std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> >, std::allocator<std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> > > >::_M_realloc_insert<std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> >*, std::vector<std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> >, std::allocator<std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> > > > >, std::unique_ptr<CVkCommandBuffer, CVkResourceDeleter<CVkCommandBuffer> >&&)
 t void std::vector<std::unique_ptr<IInputFilter, std::default_delete<IInputFilter> >, std::allocator<std::unique_ptr<IInputFilter, std::default_delete<IInputFilter> > > >::_M_realloc_insert<std::unique_ptr<IInputFilter, std::default_delete<IInputFilter> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<IInputFilter, std::default_delete<IInputFilter> >*, std::vector<std::unique_ptr<IInputFilter, std::default_delete<IInputFilter> >, std::allocator<std::unique_ptr<IInputFilter, std::default_delete<IInputFilter> > > > >, std::unique_ptr<IInputFilter, std::default_delete<IInputFilter> >&&)
 t void std::vector<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> >, std::allocator<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> > > >::_M_realloc_insert<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> > const&>(__gnu_cxx::__normal_iterator<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> >*, std::vector<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> >, std::allocator<std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> > > > >, std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> > const&)
 t void std::vector<tinygltf::Accessor, std::allocator<tinygltf::Accessor> >::_M_realloc_insert<tinygltf::Accessor const&>(__gnu_cxx::__normal_iterator<tinygltf::Accessor*, std::vector<tinygltf::Accessor, std::allocator<tinygltf::Accessor> > >, tinygltf::Accessor const&)
 t void std::vector<tinygltf::Animation, std::allocator<tinygltf::Animation> >::_M_realloc_insert<tinygltf::Animation const&>(__gnu_cxx::__normal_iterator<tinygltf::Animation*, std::vector<tinygltf::Animation, std::allocator<tinygltf::Animation> > >, tinygltf::Animation const&)
 t void std::vector<tinygltf::AnimationChannel, std::allocator<tinygltf::AnimationChannel> >::_M_realloc_insert<tinygltf::AnimationChannel const&>(__gnu_cxx::__normal_iterator<tinygltf::AnimationChannel*, std::vector<tinygltf::AnimationChannel, std::allocator<tinygltf::AnimationChannel> > >, tinygltf::AnimationChannel const&)
 t void std::vector<tinygltf::AnimationSampler, std::allocator<tinygltf::AnimationSampler> >::_M_realloc_insert<tinygltf::AnimationSampler const&>(__gnu_cxx::__normal_iterator<tinygltf::AnimationSampler*, std::vector<tinygltf::AnimationSampler, std::allocator<tinygltf::AnimationSampler> > >, tinygltf::AnimationSampler const&)
 t void std::vector<tinygltf::Buffer, std::allocator<tinygltf::Buffer> >::_M_realloc_insert<tinygltf::Buffer const&>(__gnu_cxx::__normal_iterator<tinygltf::Buffer*, std::vector<tinygltf::Buffer, std::allocator<tinygltf::Buffer> > >, tinygltf::Buffer const&)
 t void std::vector<tinygltf::BufferView, std::allocator<tinygltf::BufferView> >::_M_realloc_insert<tinygltf::BufferView const&>(__gnu_cxx::__normal_iterator<tinygltf::BufferView*, std::vector<tinygltf::BufferView, std::allocator<tinygltf::BufferView> > >, tinygltf::BufferView const&)
 t void std::vector<tinygltf::Camera, std::allocator<tinygltf::Camera> >::_M_realloc_insert<tinygltf::Camera const&>(__gnu_cxx::__normal_iterator<tinygltf::Camera*, std::vector<tinygltf::Camera, std::allocator<tinygltf::Camera> > >, tinygltf::Camera const&)
 t void std::vector<tinygltf::Image, std::allocator<tinygltf::Image> >::_M_realloc_insert<tinygltf::Image const&>(__gnu_cxx::__normal_iterator<tinygltf::Image*, std::vector<tinygltf::Image, std::allocator<tinygltf::Image> > >, tinygltf::Image const&)
 t void std::vector<tinygltf::Light, std::allocator<tinygltf::Light> >::_M_realloc_insert<tinygltf::Light const&>(__gnu_cxx::__normal_iterator<tinygltf::Light*, std::vector<tinygltf::Light, std::allocator<tinygltf::Light> > >, tinygltf::Light const&)
 t void std::vector<tinygltf::Material, std::allocator<tinygltf::Material> >::_M_realloc_insert<tinygltf::Material const&>(__gnu_cxx::__normal_iterator<tinygltf::Material*, std::vector<tinygltf::Material, std::allocator<tinygltf::Material> > >, tinygltf::Material const&)
 t void std::vector<tinygltf::Mesh, std::allocator<tinygltf::Mesh> >::_M_realloc_insert<tinygltf::Mesh const&>(__gnu_cxx::__normal_iterator<tinygltf::Mesh*, std::vector<tinygltf::Mesh, std::allocator<tinygltf::Mesh> > >, tinygltf::Mesh const&)
 t void std::vector<tinygltf::Node, std::allocator<tinygltf::Node> >::_M_realloc_insert<tinygltf::Node const&>(__gnu_cxx::__normal_iterator<tinygltf::Node*, std::vector<tinygltf::Node, std::allocator<tinygltf::Node> > >, tinygltf::Node const&)
 t void std::vector<tinygltf::Primitive, std::allocator<tinygltf::Primitive> >::_M_realloc_insert<tinygltf::Primitive const&>(__gnu_cxx::__normal_iterator<tinygltf::Primitive*, std::vector<tinygltf::Primitive, std::allocator<tinygltf::Primitive> > >, tinygltf::Primitive const&)
 t void std::vector<tinygltf::Sampler, std::allocator<tinygltf::Sampler> >::_M_realloc_insert<tinygltf::Sampler const&>(__gnu_cxx::__normal_iterator<tinygltf::Sampler*, std::vector<tinygltf::Sampler, std::allocator<tinygltf::Sampler> > >, tinygltf::Sampler const&)
 t void std::vector<tinygltf::Scene, std::allocator<tinygltf::Scene> >::_M_realloc_insert<tinygltf::Scene const&>(__gnu_cxx::__normal_iterator<tinygltf::Scene*, std::vector<tinygltf::Scene, std::allocator<tinygltf::Scene> > >, tinygltf::Scene const&)
 t void std::vector<tinygltf::Skin, std::allocator<tinygltf::Skin> >::_M_realloc_insert<tinygltf::Skin const&>(__gnu_cxx::__normal_iterator<tinygltf::Skin*, std::vector<tinygltf::Skin, std::allocator<tinygltf::Skin> > >, tinygltf::Skin const&)
 t void std::vector<tinygltf::Texture, std::allocator<tinygltf::Texture> >::_M_realloc_insert<tinygltf::Texture const&>(__gnu_cxx::__normal_iterator<tinygltf::Texture*, std::vector<tinygltf::Texture, std::allocator<tinygltf::Texture> > >, tinygltf::Texture const&)
 t void std::vector<tinygltf::Value, std::allocator<tinygltf::Value> >::_M_realloc_insert<tinygltf::Value const&>(__gnu_cxx::__normal_iterator<tinygltf::Value*, std::vector<tinygltf::Value, std::allocator<tinygltf::Value> > >, tinygltf::Value const&)
 t void std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> >::_M_realloc_insert<tinyobj::material_t const&>(__gnu_cxx::__normal_iterator<tinyobj::material_t*, std::vector<tinyobj::material_t, std::allocator<tinyobj::material_t> > >, tinyobj::material_t const&)
 t void std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> >::_M_realloc_insert<tinyobj::shape_t const&>(__gnu_cxx::__normal_iterator<tinyobj::shape_t*, std::vector<tinyobj::shape_t, std::allocator<tinyobj::shape_t> > >, tinyobj::shape_t const&)
 t void std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> >::_M_realloc_insert<tinyobj::vertex_index const&>(__gnu_cxx::__normal_iterator<tinyobj::vertex_index*, std::vector<tinyobj::vertex_index, std::allocator<tinyobj::vertex_index> > >, tinyobj::vertex_index const&)
 t void std::vector<unsigned int, short_alloc<unsigned int, 40ul, 4ul> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, short_alloc<unsigned int, 40ul, 4ul> > >, unsigned int const&)
 t void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)
 t void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)
 t void std::vector<unsigned long, short_alloc<unsigned long, 128ul, 8ul> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, short_alloc<unsigned long, 128ul, 8ul> > >, unsigned long const&)
 t void std::vector<unsigned long, short_alloc<unsigned long, 80ul, 8ul> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, short_alloc<unsigned long, 80ul, 8ul> > >, unsigned long const&)
 t void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)
 t void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)
 t void std::vector<unsigned short, std::allocator<unsigned short> >::_M_realloc_insert<unsigned short const&>(__gnu_cxx::__normal_iterator<unsigned short*, std::vector<unsigned short, std::allocator<unsigned short> > >, unsigned short const&)
 t void std::vector<void (*)(), std::allocator<void (*)()> >::_M_emplace_back_aux<void (* const&)()>(void (* const&)())
 t void std::vector<void*, std::allocator<void*> >::_M_emplace_back_aux<void* const&>(void* const&)
 t void std::vector<vr::ETrackedDeviceProperty, std::allocator<vr::ETrackedDeviceProperty> >::_M_realloc_insert<vr::ETrackedDeviceProperty const&>(__gnu_cxx::__normal_iterator<vr::ETrackedDeviceProperty*, std::vector<vr::ETrackedDeviceProperty, std::allocator<vr::ETrackedDeviceProperty> > >, vr::ETrackedDeviceProperty const&)
 t void std::vector<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> >::_M_realloc_insert<vr::HmdQuad_t const&>(__gnu_cxx::__normal_iterator<vr::HmdQuad_t*, std::vector<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> > >, vr::HmdQuad_t const&)
 t void std::vector<vr::HmdVector2_t, std::allocator<vr::HmdVector2_t> >::_M_realloc_insert<vr::HmdVector2_t const&>(__gnu_cxx::__normal_iterator<vr::HmdVector2_t*, std::vector<vr::HmdVector2_t, std::allocator<vr::HmdVector2_t> > >, vr::HmdVector2_t const&)
 t void std::vector<vr::HmdVector2_t, std::allocator<vr::HmdVector2_t> >::_M_realloc_insert<vr::HmdVector2_t>(__gnu_cxx::__normal_iterator<vr::HmdVector2_t*, std::vector<vr::HmdVector2_t, std::allocator<vr::HmdVector2_t> > >, vr::HmdVector2_t&&)
 t void std::vector<vr::IAliasPathListener*, std::allocator<vr::IAliasPathListener*> >::_M_realloc_insert<vr::IAliasPathListener* const&>(__gnu_cxx::__normal_iterator<vr::IAliasPathListener**, std::vector<vr::IAliasPathListener*, std::allocator<vr::IAliasPathListener*> > >, vr::IAliasPathListener* const&)
 t void std::vector<vr::IVRSharedSemaphore*, std::allocator<vr::IVRSharedSemaphore*> >::_M_realloc_insert<CSharedSemaphoreLinux*&>(__gnu_cxx::__normal_iterator<vr::IVRSharedSemaphore**, std::vector<vr::IVRSharedSemaphore*, std::allocator<vr::IVRSharedSemaphore*> > >, CSharedSemaphoreLinux*&)
 t void std::vector<vr::InputBindingInfo_t, std::allocator<vr::InputBindingInfo_t> >::_M_realloc_insert<vr::InputBindingInfo_t const&>(__gnu_cxx::__normal_iterator<vr::InputBindingInfo_t*, std::vector<vr::InputBindingInfo_t, std::allocator<vr::InputBindingInfo_t> > >, vr::InputBindingInfo_t const&)
 t void std::vector<vr::PathHandleDebugInfo_t, std::allocator<vr::PathHandleDebugInfo_t> >::_M_realloc_insert<vr::PathHandleDebugInfo_t const&>(__gnu_cxx::__normal_iterator<vr::PathHandleDebugInfo_t*, std::vector<vr::PathHandleDebugInfo_t, std::allocator<vr::PathHandleDebugInfo_t> > >, vr::PathHandleDebugInfo_t const&)
 t void std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> >::_M_realloc_insert<vr::PathRead_t const&>(__gnu_cxx::__normal_iterator<vr::PathRead_t*, std::vector<vr::PathRead_t, std::allocator<vr::PathRead_t> > >, vr::PathRead_t const&)
 t void std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> >::_M_realloc_insert<vr::PathWrite_t const&>(__gnu_cxx::__normal_iterator<vr::PathWrite_t*, std::vector<vr::PathWrite_t, std::allocator<vr::PathWrite_t> > >, vr::PathWrite_t const&)
 t void std::vector<vr::PerInputTutorialActions_t, std::allocator<vr::PerInputTutorialActions_t> >::_M_realloc_insert<vr::PerInputTutorialActions_t const&>(__gnu_cxx::__normal_iterator<vr::PerInputTutorialActions_t*, std::vector<vr::PerInputTutorialActions_t, std::allocator<vr::PerInputTutorialActions_t> > >, vr::PerInputTutorialActions_t const&)
 t void std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> >::_M_realloc_insert<vr::PropertyRead_t const&>(__gnu_cxx::__normal_iterator<vr::PropertyRead_t*, std::vector<vr::PropertyRead_t, std::allocator<vr::PropertyRead_t> > >, vr::PropertyRead_t const&)
 t void std::vector<vr::PropertyWrite_t, std::allocator<vr::PropertyWrite_t> >::_M_realloc_insert<vr::PropertyWrite_t const&>(__gnu_cxx::__normal_iterator<vr::PropertyWrite_t*, std::vector<vr::PropertyWrite_t, std::allocator<vr::PropertyWrite_t> > >, vr::PropertyWrite_t const&)
 t void std::vector<vr::RenderModel_Vertex_t, std::allocator<vr::RenderModel_Vertex_t> >::_M_realloc_insert<vr::RenderModel_Vertex_t const&>(__gnu_cxx::__normal_iterator<vr::RenderModel_Vertex_t*, std::vector<vr::RenderModel_Vertex_t, std::allocator<vr::RenderModel_Vertex_t> > >, vr::RenderModel_Vertex_t const&)
 t void std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> >::_M_realloc_insert<vr::VRActiveActionSet_t const&>(__gnu_cxx::__normal_iterator<vr::VRActiveActionSet_t*, std::vector<vr::VRActiveActionSet_t, std::allocator<vr::VRActiveActionSet_t> > >, vr::VRActiveActionSet_t const&)
 t void std::vector<vr::VREvent_t, std::allocator<vr::VREvent_t> >::_M_realloc_insert<vr::VREvent_t const&>(__gnu_cxx::__normal_iterator<vr::VREvent_t*, std::vector<vr::VREvent_t, std::allocator<vr::VREvent_t> > >, vr::VREvent_t const&)
 t void std::vector<vr::VROverlayView_t*, std::allocator<vr::VROverlayView_t*> >::_M_realloc_insert<vr::VROverlayView_t* const&>(__gnu_cxx::__normal_iterator<vr::VROverlayView_t**, std::vector<vr::VROverlayView_t*, std::allocator<vr::VROverlayView_t*> > >, vr::VROverlayView_t* const&)
 t void tinygltf::SerializeNumberArrayProperty<double>(std::string const&, std::vector<double, std::allocator<double> > const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t void tinygltf::SerializeNumberArrayProperty<double>(std::string const&, std::vector<double, std::allocator<double> > const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t void tinygltf::SerializeNumberArrayProperty<int>(std::string const&, std::vector<int, std::allocator<int> > const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t void tinygltf::SerializeNumberArrayProperty<int>(std::string const&, std::vector<int, std::allocator<int> > const&, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t void tinygltf::SerializeNumberProperty<double>(std::string const&, double, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t void tinygltf::SerializeNumberProperty<double>(std::string const&, double, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t void tinygltf::SerializeNumberProperty<int>(std::string const&, int, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t void tinygltf::SerializeNumberProperty<int>(std::string const&, int, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t void tinygltf::SerializeNumberProperty<unsigned long>(std::string const&, unsigned long, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&)
 t void tinygltf::SerializeNumberProperty<unsigned long>(std::string const&, unsigned long, nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>&) [clone .cold]
 t void** std::__copy_move<true, true, std::random_access_iterator_tag>::__copy_m<void*>(void* const*, void* const*, void**)
 t volkGenLoadDevice
 t volkGenLoadInstance.constprop.0
 t volkGenLoadLoader.constprop.0
 t volkGetInstanceVersion
 t volkGetLoadedDevice
 t volkGetLoadedInstance
 t volkInitialize
 t volkInitializeCustom
 t volkLoadDevice
 t volkLoadDeviceTable
 t volkLoadInstance
 t volkLoadInstanceOnly
 t vr::CVRApplicationsLatest::AddApplicationManifest(char const*, bool)
 t vr::CVRApplicationsLatest::AddApplicationManifest(char const*, bool) [clone .cold]
 t vr::CVRApplicationsLatest::BInit(CVRSystemLatest*, CVRClient*, IVRClientInternal*)
 t vr::CVRApplicationsLatest::BInit(CVRSystemLatest*, CVRClient*, IVRClientInternal*) [clone .cold]
 t vr::CVRApplicationsLatest::CVRApplicationsLatest()
 t vr::CVRApplicationsLatest::CancelApplicationLaunch(char const*)
 t vr::CVRApplicationsLatest::CancelApplicationLaunch(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationAutoLaunch(char const*)
 t vr::CVRApplicationsLatest::GetApplicationCount()
 t vr::CVRApplicationsLatest::GetApplicationCount() [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationInfo(char const*)
 t vr::CVRApplicationsLatest::GetApplicationInfo(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationKeyByIndex(unsigned int, char*, unsigned int)
 t vr::CVRApplicationsLatest::GetApplicationKeyByIndex(unsigned int, char*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int)
 t vr::CVRApplicationsLatest::GetApplicationKeyByProcessId(unsigned int, char*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationLaunchArguments(unsigned int, char*, unsigned int)
 t vr::CVRApplicationsLatest::GetApplicationLaunchArguments(unsigned int, char*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationProcessId(char const*)
 t vr::CVRApplicationsLatest::GetApplicationProcessId(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t vr::CVRApplicationsLatest::GetApplicationPropertyBool(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*)
 t vr::CVRApplicationsLatest::GetApplicationPropertyString(char const*, vr::EVRApplicationProperty, char*, unsigned int, vr::EVRApplicationError*) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationPropertyUint64(char const*, vr::EVRApplicationProperty, vr::EVRApplicationError*)
 t vr::CVRApplicationsLatest::GetApplicationSupportedMimeTypes(char const*, char*, unsigned int)
 t vr::CVRApplicationsLatest::GetApplicationSupportedMimeTypes(char const*, char*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::GetApplicationsErrorNameFromEnum(vr::EVRApplicationError)
 t vr::CVRApplicationsLatest::GetApplicationsThatSupportMimeType(char const*, char*, unsigned int)
 t vr::CVRApplicationsLatest::GetApplicationsThatSupportMimeType(char const*, char*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::GetCurrentSceneProcessId()
 t vr::CVRApplicationsLatest::GetDefaultApplicationForMimeType(char const*, char*, unsigned int)
 t vr::CVRApplicationsLatest::GetDefaultApplicationForMimeType(char const*, char*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::GetSceneApplicationState()
 t vr::CVRApplicationsLatest::GetSceneApplicationState() [clone .cold]
 t vr::CVRApplicationsLatest::GetSceneApplicationStateNameFromEnum(vr::EVRSceneApplicationState)
 t vr::CVRApplicationsLatest::GetStartingApplication(char*, unsigned int)
 t vr::CVRApplicationsLatest::GetStartingApplication(char*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::IdentifyApplication(unsigned int, char const*)
 t vr::CVRApplicationsLatest::IdentifyApplication(unsigned int, char const*) [clone .cold]
 t vr::CVRApplicationsLatest::IsApplicationInstalled(char const*)
 t vr::CVRApplicationsLatest::IsApplicationInstalled(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::IsSceneAppOpenOrTransitioning()
 t vr::CVRApplicationsLatest::IsSceneAppOpenOrTransitioning() [clone .cold]
 t vr::CVRApplicationsLatest::IsSceneAppQuitting(unsigned int)
 t vr::CVRApplicationsLatest::LaunchApplication(char const*)
 t vr::CVRApplicationsLatest::LaunchApplication(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::LaunchApplicationFromMimeType(char const*, char const*)
 t vr::CVRApplicationsLatest::LaunchApplicationFromMimeType(char const*, char const*) [clone .cold]
 t vr::CVRApplicationsLatest::LaunchDashboardOverlay(char const*)
 t vr::CVRApplicationsLatest::LaunchDashboardOverlay(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::LaunchInternalProcess(char const*, char const*, char const*)
 t vr::CVRApplicationsLatest::LaunchInternalProcess(char const*, char const*, char const*) [clone .cold]
 t vr::CVRApplicationsLatest::LaunchTemplateApplication(char const*, char const*, vr::AppOverrideKeys_t const*, unsigned int)
 t vr::CVRApplicationsLatest::LaunchTemplateApplication(char const*, char const*, vr::AppOverrideKeys_t const*, unsigned int) [clone .cold]
 t vr::CVRApplicationsLatest::PerformApplicationPrelaunchCheck(char const*)
 t vr::CVRApplicationsLatest::PerformApplicationPrelaunchCheck(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::RemoveApplicationManifest(char const*)
 t vr::CVRApplicationsLatest::RemoveApplicationManifest(char const*) [clone .cold]
 t vr::CVRApplicationsLatest::SetApplicationAutoLaunch(char const*, bool)
 t vr::CVRApplicationsLatest::SetApplicationAutoLaunch(char const*, bool) [clone .cold]
 t vr::CVRApplicationsLatest::SetDefaultApplicationForMimeType(char const*, char const*)
 t vr::CVRApplicationsLatest::SetDefaultApplicationForMimeType(char const*, char const*) [clone .cold]
 t vr::CVRApplicationsLatest::SetSceneAppDetails(bool, bool, bool, bool, bool)
 t vr::CVRApplicationsLatest::SetSceneAppDetails(bool, bool, bool, bool, bool) [clone .cold]
 t vr::CVRApplicationsLatest::~CVRApplicationsLatest()
 t vr::CVRNotificationsLatest::BInit(CVRCompositorClient*)
 t vr::CVRNotificationsLatest::BInit(CVRCompositorClient*) [clone .cold]
 t vr::CVRNotificationsLatest::CVRNotificationsLatest()
 t vr::CVRNotificationsLatest::CreateNotification(unsigned long, unsigned long, vr::EVRNotificationType, char const*, vr::EVRNotificationStyle, vr::NotificationBitmap_t const*, unsigned int*)
 t vr::CVRNotificationsLatest::CreateNotification(unsigned long, unsigned long, vr::EVRNotificationType, char const*, vr::EVRNotificationStyle, vr::NotificationBitmap_t const*, unsigned int*) [clone .cold]
 t vr::CVRNotificationsLatest::RemoveNotification(unsigned int)
 t vr::CVRNotificationsLatest::RemoveNotification(unsigned int) [clone .cold]
 t vr::CVRNotificationsLatest::~CVRNotificationsLatest()
 t vr::CVROverlayInternalLatest::BInit(CVRSystemLatest*, CVRClient*, CVRCompositorClient*, CVROverlayLatest*, IVRClientInternal*)
 t vr::CVROverlayInternalLatest::BInit(CVRSystemLatest*, CVRClient*, CVRCompositorClient*, CVROverlayLatest*, IVRClientInternal*) [clone .cold]
 t vr::CVROverlayInternalLatest::CVROverlayInternalLatest()
 t vr::CVROverlayInternalLatest::Cleanup()
 t vr::CVROverlayInternalLatest::CloseKeyboard()
 t vr::CVROverlayInternalLatest::FreeToastImageMemory(vr::DashboardNotificationInfo_t*)
 t vr::CVROverlayInternalLatest::GetAllOverlays(vr::DashboardOverlayState_t*, unsigned int)
 t vr::CVROverlayInternalLatest::GetAllOverlays(vr::DashboardOverlayState_t*, unsigned int) [clone .cold]
 t vr::CVROverlayInternalLatest::GetDashboardOverlays(vr::DashboardOverlayState_t*, unsigned int)
 t vr::CVROverlayInternalLatest::GetDashboardOverlays(vr::DashboardOverlayState_t*, unsigned int) [clone .cold]
 t vr::CVROverlayInternalLatest::GetKeyboardInputType(vr::EGamepadTextInputMode*, vr::EGamepadTextInputLineMode*, unsigned int*, unsigned int*, char*, int)
 t vr::CVROverlayInternalLatest::GetKeyboardInputType(vr::EGamepadTextInputMode*, vr::EGamepadTextInputLineMode*, unsigned int*, unsigned int*, char*, int) [clone .cold]
 t vr::CVROverlayInternalLatest::GetKeyboardOwnerOverlay(unsigned long*)
 t vr::CVROverlayInternalLatest::GetKeyboardOwnerOverlay(unsigned long*) [clone .cold]
 t vr::CVROverlayInternalLatest::GetMessageOverlayDetails(vr::VRMessageOverlayMessageDetails*)
 t vr::CVROverlayInternalLatest::GetMessageOverlayDetails(vr::VRMessageOverlayMessageDetails*) [clone .cold]
 t vr::CVROverlayInternalLatest::GetNightModeEnabled(bool*)
 t vr::CVROverlayInternalLatest::GetNightModeEnabled(bool*) [clone .cold]
 t vr::CVROverlayInternalLatest::GetNotificationPriority(char const*, unsigned int*)
 t vr::CVROverlayInternalLatest::GetRecommendedOverlayRenderQuality()
 t vr::CVROverlayInternalLatest::GetThumbHandleForOverlayHandle(unsigned long)
 t vr::CVROverlayInternalLatest::GetThumbHandleForOverlayHandle(unsigned long) [clone .cold]
 t vr::CVROverlayInternalLatest::GetToastInfo(unsigned int, vr::DashboardNotificationInfo_t*)
 t vr::CVROverlayInternalLatest::GetToastInfo(unsigned int, vr::DashboardNotificationInfo_t*) [clone .cold]
 t vr::CVROverlayInternalLatest::GetToastOverlayHandle(unsigned long*)
 t vr::CVROverlayInternalLatest::GetToastOverlayHandle(unsigned long*) [clone .cold]
 t vr::CVROverlayInternalLatest::HasCameraRoomViewCapability()
 t vr::CVROverlayInternalLatest::HasCameraRoomViewCapability() [clone .cold]
 t vr::CVROverlayInternalLatest::HasMessageOverlay()
 t vr::CVROverlayInternalLatest::HasMessageOverlay() [clone .cold]
 t vr::CVROverlayInternalLatest::HideDashboard(char const*)
 t vr::CVROverlayInternalLatest::HideDashboard(char const*) [clone .cold]
 t vr::CVROverlayInternalLatest::IsCameraRoomViewVisible()
 t vr::CVROverlayInternalLatest::IsCameraRoomViewVisible() [clone .cold]
 t vr::CVROverlayInternalLatest::OnMessageOverlayResponse(vr::VRMessageOverlayResponse)
 t vr::CVROverlayInternalLatest::OnMessageOverlayResponse(vr::VRMessageOverlayResponse) [clone .cold]
 t vr::CVROverlayInternalLatest::SendKeyboardDone()
 t vr::CVROverlayInternalLatest::SendKeyboardDone() [clone .cold]
 t vr::CVROverlayInternalLatest::SendOverlayClosed(unsigned long)
 t vr::CVROverlayInternalLatest::SetDashboardOverlayTextureRotation(unsigned long, float)
 t vr::CVROverlayInternalLatest::SetDashboardOverlayTextureRotation(unsigned long, float) [clone .cold]
 t vr::CVROverlayInternalLatest::SetKeyboardOverlayHandle(unsigned long)
 t vr::CVROverlayInternalLatest::SetKeyboardOverlayHandle(unsigned long) [clone .cold]
 t vr::CVROverlayInternalLatest::SetKeyboardResultText(char const*)
 t vr::CVROverlayInternalLatest::SetKeyboardResultText(char const*) [clone .cold]
 t vr::CVROverlayInternalLatest::SetNightModeEnabled(bool)
 t vr::CVROverlayInternalLatest::SetNightModeEnabled(bool) [clone .cold]
 t vr::CVROverlayInternalLatest::SetNotificationPriority(char const*, unsigned int)
 t vr::CVROverlayInternalLatest::SetOverlayStereoscopy(unsigned long, EOverlayStereoscopy)
 t vr::CVROverlayInternalLatest::SetOverlayStereoscopy(unsigned long, EOverlayStereoscopy) [clone .cold]
 t vr::CVROverlayInternalLatest::SetToastOverlayRendererToThis()
 t vr::CVROverlayInternalLatest::SetToastOverlayRendererToThis() [clone .cold]
 t vr::CVROverlayInternalLatest::ToggleCameraRoomView()
 t vr::CVROverlayInternalLatest::ToggleCameraRoomView() [clone .cold]
 t vr::CVROverlayInternalLatest::~CVROverlayInternalLatest()
 t vr::CVRPathHelpers::GetPath(unsigned long, unsigned long, void*, unsigned int, unsigned int*, vr::ETrackedPropertyError*)
 t vr::CVRPathHelpers::GetStringPath(unsigned long, unsigned long, vr::ETrackedPropertyError*)
 t vr::CVRPathHelpers::HandleToString(unsigned long, std::string*)
 t vr::CVRPropertyHelpers::GetStringProperty(unsigned long, vr::ETrackedDeviceProperty, vr::ETrackedPropertyError*)
 t vr::CVRSettingsLatest::BInit(CVRSystemLatest*, CVRClient*)
 t vr::CVRSettingsLatest::BInit(CVRSystemLatest*, CVRClient*) [clone .cold]
 t vr::CVRSettingsLatest::CVRSettingsLatest()
 t vr::CVRSettingsLatest::CVRSettingsLatest() [clone .cold]
 t vr::CVRSettingsLatest::Cleanup()
 t vr::CVRSettingsLatest::GetBool(char const*, char const*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::GetBool(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::GetCurrentDirtyCount(char const*)
 t vr::CVRSettingsLatest::GetFloat(char const*, char const*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::GetInt32(char const*, char const*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::GetKeysInSection(char const*, std::vector<std::string, std::allocator<std::string> >*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::GetNumeric(char const*, char const*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::GetNumeric(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::GetSettingsErrorNameFromEnum(vr::EVRSettingsError)
 t vr::CVRSettingsLatest::GetString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::GetString(char const*, char const*, char*, unsigned int, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::GetValueType(ESettingValueType*, char const*, char const*)
 t vr::CVRSettingsLatest::GetValueType(ESettingValueType*, char const*, char const*) [clone .cold]
 t vr::CVRSettingsLatest::RemoveKeyFromAllCaches(char const*, char const*)
 t vr::CVRSettingsLatest::RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::RemoveKeyInSection(char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::RemoveSection(char const*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::RemoveSection(char const*, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::SetBool(char const*, char const*, bool, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::SetBool(char const*, char const*, bool, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::SetFloat(char const*, char const*, float, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::SetInt32(char const*, char const*, int, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::SetNumeric(char const*, char const*, double, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::SetNumeric(char const*, char const*, double, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::SetString(char const*, char const*, char const*, vr::EVRSettingsError*)
 t vr::CVRSettingsLatest::SetString(char const*, char const*, char const*, vr::EVRSettingsError*) [clone .cold]
 t vr::CVRSettingsLatest::~CVRSettingsLatest()
 t vr::CVRSteamPrivateLatest::BInit(CVRClient*)
 t vr::CVRSteamPrivateLatest::CVRSteamPrivateLatest()
 t vr::CVRSteamPrivateLatest::GameActionTaskChange(unsigned int, char const*, char const*, char const*)
 t vr::CVRSteamPrivateLatest::GameActionTaskChange(unsigned int, char const*, char const*, char const*) [clone .cold]
 t vr::CVRSteamPrivateLatest::GetWebSharedSecret()
 t vr::CVRSteamPrivateLatest::MicrotxnFinished()
 t vr::CVRSteamPrivateLatest::OculusSDKAppStarted()
 t vr::CVRSteamPrivateLatest::QuitProcess(unsigned int)
 t vr::CVRSteamPrivateLatest::QuitSteamVR()
 t vr::CVRSteamPrivateLatest::ShouldKillTheaterPancakeProcess(unsigned int)
 t vr::CVRSteamPrivateLatest::ShouldKillTheaterPancakeProcess(unsigned int) [clone .cold]
 t vr::CVRSteamPrivateLatest::ShouldSetAsOpenXrRuntime()
 t vr::CVRSteamPrivateLatest::~CVRSteamPrivateLatest()
 t vr::CVRTrackedCamera::AcquireVideoStreamingService(unsigned int, unsigned long*)
 t vr::CVRTrackedCamera::AcquireVideoStreamingService(unsigned int, unsigned long*) [clone .cold]
 t vr::CVRTrackedCamera::CVRTrackedCamera()
 t vr::CVRTrackedCamera::CVRTrackedCamera() [clone .cold]
 t vr::CVRTrackedCamera::Cleanup()
 t vr::CVRTrackedCamera::EnableCameraForStreaming(unsigned int, bool)
 t vr::CVRTrackedCamera::EnableCameraForStreaming(unsigned int, bool) [clone .cold]
 t vr::CVRTrackedCamera::GetCameraDistortion(unsigned int, unsigned int, float*, float*, float*, float*, int)
 t vr::CVRTrackedCamera::GetCameraDistortion(unsigned int, unsigned int, float*, float*, float*, float*, int) [clone .cold]
 t vr::CVRTrackedCamera::GetCameraDistortionFunction(unsigned int, unsigned int, vr::EVRDistortionFunctionType*, double*)
 t vr::CVRTrackedCamera::GetCameraDistortionFunction(unsigned int, unsigned int, vr::EVRDistortionFunctionType*, double*) [clone .cold]
 t vr::CVRTrackedCamera::GetCameraErrorNameFromEnum(vr::EVRTrackedCameraError)
 t vr::CVRTrackedCamera::GetCameraFormatDimensions(unsigned int, vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*)
 t vr::CVRTrackedCamera::GetCameraFormatDimensions(unsigned int, vr::ECameraVideoStreamFormat, unsigned int*, unsigned int*) [clone .cold]
 t vr::CVRTrackedCamera::GetCameraFrameBounds(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
 t vr::CVRTrackedCamera::GetCameraFrameBounds(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*) [clone .cold]
 t vr::CVRTrackedCamera::GetCameraFrameSize(unsigned int, vr::EVRTrackedCameraFrameType, unsigned int*, unsigned int*, unsigned int*)
 t vr::CVRTrackedCamera::GetCameraIntrinsics(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*)
 t vr::CVRTrackedCamera::GetCameraIntrinsics(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, vr::HmdVector2_t*, vr::HmdVector2_t*) [clone .cold]
 t vr::CVRTrackedCamera::GetCameraProjection(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*)
 t vr::CVRTrackedCamera::GetCameraProjection(unsigned int, unsigned int, vr::EVRTrackedCameraFrameType, float, float, vr::HmdMatrix44_t*) [clone .cold]
 t vr::CVRTrackedCamera::GetCameraTrackingSpace()
 t vr::CVRTrackedCamera::GetCameraVideoStreamFormat(unsigned int, vr::ECameraVideoStreamFormat*)
 t vr::CVRTrackedCamera::GetCameraVideoStreamFormat(unsigned int, vr::ECameraVideoStreamFormat*) [clone .cold]
 t vr::CVRTrackedCamera::GetVideoStreamFrame(unsigned int, vr::CameraVideoStreamFrame_t const**)
 t vr::CVRTrackedCamera::GetVideoStreamFrame(unsigned int, vr::CameraVideoStreamFrame_t const**) [clone .cold]
 t vr::CVRTrackedCamera::GetVideoStreamFrameBuffer(unsigned long, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t vr::CVRTrackedCamera::GetVideoStreamFrameBuffer(unsigned long, vr::EVRTrackedCameraFrameType, void*, unsigned int, vr::CameraVideoStreamFrameHeader_t*, unsigned int) [clone .cold]
 t vr::CVRTrackedCamera::GetVideoStreamTextureD3D11(unsigned long, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t vr::CVRTrackedCamera::GetVideoStreamTextureD3D11(unsigned long, vr::EVRTrackedCameraFrameType, void*, void**, vr::CameraVideoStreamFrameHeader_t*, unsigned int) [clone .cold]
 t vr::CVRTrackedCamera::GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int)
 t vr::CVRTrackedCamera::GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrameHeader_t*, unsigned int) [clone .cold]
 t vr::CVRTrackedCamera::GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrame_t*)
 t vr::CVRTrackedCamera::GetVideoStreamTextureGL(unsigned long, vr::EVRTrackedCameraFrameType, unsigned int*, vr::CameraVideoStreamFrame_t*) [clone .cold]
 t vr::CVRTrackedCamera::GetVideoStreamTextureSize(unsigned int, vr::EVRTrackedCameraFrameType, vr::VRTextureBounds_t*, unsigned int*, unsigned int*)
 t vr::CVRTrackedCamera::HasCamera(unsigned int, bool*)
 t vr::CVRTrackedCamera::Init(CVRSystemLatest*, CVRClient*, CVRCompositorClient*)
 t vr::CVRTrackedCamera::IsTrackedCameraHandleValid(unsigned long)
 t vr::CVRTrackedCamera::IsTrackedCameraHandleValid(unsigned long) [clone .cold]
 t vr::CVRTrackedCamera::IsVideoStreamActive(unsigned int, bool*, bool*, float*)
 t vr::CVRTrackedCamera::IsVideoStreamActive(unsigned int, bool*, bool*, float*) [clone .cold]
 t vr::CVRTrackedCamera::PauseVideoStream(unsigned int)
 t vr::CVRTrackedCamera::PauseVideoStream(unsigned int) [clone .cold]
 t vr::CVRTrackedCamera::ReleaseVideoStreamFrame(unsigned int, vr::CameraVideoStreamFrame_t const*)
 t vr::CVRTrackedCamera::ReleaseVideoStreamFrame(unsigned int, vr::CameraVideoStreamFrame_t const*) [clone .cold]
 t vr::CVRTrackedCamera::ReleaseVideoStreamTextureGL(unsigned long, unsigned int)
 t vr::CVRTrackedCamera::ReleaseVideoStreamingService(unsigned long)
 t vr::CVRTrackedCamera::ReleaseVideoStreamingService(unsigned long) [clone .cold]
 t vr::CVRTrackedCamera::ResumeVideoStream(unsigned int)
 t vr::CVRTrackedCamera::ResumeVideoStream(unsigned int) [clone .cold]
 t vr::CVRTrackedCamera::SetAutoExposure(unsigned int, bool)
 t vr::CVRTrackedCamera::SetAutoExposure(unsigned int, bool) [clone .cold]
 t vr::CVRTrackedCamera::SetCameraCompatibilityMode(unsigned int, vr::ECameraCompatibilityMode)
 t vr::CVRTrackedCamera::SetCameraCompatibilityMode(unsigned int, vr::ECameraCompatibilityMode) [clone .cold]
 t vr::CVRTrackedCamera::SetCameraTrackingSpace(vr::ETrackingUniverseOrigin)
 t vr::CVRTrackedCamera::SetCameraVideoStreamFormat(unsigned int, vr::ECameraVideoStreamFormat)
 t vr::CVRTrackedCamera::SetCameraVideoStreamFormat(unsigned int, vr::ECameraVideoStreamFormat) [clone .cold]
 t vr::CVRTrackedCamera::StartVideoStream(unsigned int)
 t vr::CVRTrackedCamera::StartVideoStream(unsigned int) [clone .cold]
 t vr::CVRTrackedCamera::StopVideoStream(unsigned int)
 t vr::CVRTrackedCamera::StopVideoStream(unsigned int) [clone .cold]
 t vr::CVRTrackedCamera::~CVRTrackedCamera()
 t vr::ETrackedPropertyError vr::CVRPathHelpers::GetPathAsVector<VRInputValue_t>(unsigned long, unsigned long, unsigned int, std::vector<VRInputValue_t, std::allocator<VRInputValue_t> >*)
 t vr::ETrackedPropertyError vr::CVRPathHelpers::GetPathAsVector<vr::HmdQuad_t>(unsigned long, unsigned long, unsigned int, std::vector<vr::HmdQuad_t, std::allocator<vr::HmdQuad_t> >*)
 t vr::IVRDriverDirectModeComponent::CreateSwapTextureSet(unsigned int, vr::IVRDriverDirectModeComponent::SwapTextureSetDesc_t const*, vr::IVRDriverDirectModeComponent::SwapTextureSet_t*)
 t vr::IVRDriverDirectModeComponent::DestroySwapTextureSet(unsigned long)
 t vr::IVRDriverDirectModeComponent::GetFrameTiming(vr::DriverDirectMode_FrameTiming*)
 t vr::IVRDriverDirectModeComponent::GetNextSwapTextureSetIndex(unsigned long*, unsigned int (*) [2])
 t vr::IVRDriverDirectModeComponent::PostPresent(vr::IVRDriverDirectModeComponent::Throttling_t const*)
 t vr::IVRDriverDirectModeComponent::Present(unsigned long)
 t vr::IVRDriverDirectModeComponent::SubmitLayer(vr::IVRDriverDirectModeComponent::SubmitLayerPerEye_t const (&) [2])
 t vr::IVRSharedBuffer::GetVulkanBuffer() const
 t vr::IVRSharedBuffer::GetVulkanBufferMemory() const
 t vr::IVRSharedBuffer::GetVulkanMemoryHandleType() const
 t vr::IVRSharedBuffer::ImportVulkanBuffer(VkDevice_T*, unsigned long)
 t vr::IVRSharedBuffer::PrepareVulkanBufferForExport(VkDevice_T*, VkBuffer_T*, VkDeviceMemory_T*, unsigned int, unsigned int, unsigned int, unsigned int)
 t vr::IVRSharedCountingSemaphore::CreateVulkanCountingSemaphore(VkDevice_T*)
 t vr::IVRSharedCountingSemaphore::ImportVulkanCountingSemaphore(VkDevice_T*, unsigned long)
 t vr::IVRSharedImage::GetOGLTexture()
 t vr::IVRSharedImage::GetVulkanImage() const
 t vr::IVRSharedImage::GetVulkanImageMemory() const
 t vr::IVRSharedImage::GetVulkanMemoryHandleType() const
 t vr::IVRSharedImage::ImportOGLImage(unsigned long)
 t vr::IVRSharedImage::ImportVulkanImage(VkDevice_T*, unsigned long)
 t vr::IVRSharedImage::PrepareVulkanImageForExport(VkDevice_T*, VkImage_T*, VkDeviceMemory_T*, VkFormat, VkSharingMode, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool, bool, unsigned int, unsigned int const*)
 t vr::IVRSharedResource::CreateFD()
 t vr::IVRSharedSemaphore::GetOGLSemaphore()
 t vr::IVRSharedSemaphore::GetVulkanSemaphore() const
 t vr::IVRSharedSemaphore::ImportVulkanSemaphore(VkDevice_T*, unsigned long)
 t vr::IVRSharedSemaphore::PrepareVulkanSemaphoreForExport(VkDevice_T*, VkSemaphore_T*)
 t vr::RoundTo(float, unsigned int)
 t vr::VRMessageOverlayMessageDetails::Clear()
 t vr::VRMessageOverlayMessageDetails::CopyTo(vr::VRMessageOverlayMessageDetails&) const
 t vr::VRMessageOverlayMessageDetails::Set(unsigned int, char const*, char const*, char const**)
 t vr_internal::CVRPathHandle::CVRPathHandle(char const*)
 t vr_internal::CVRPathHandle::operator unsigned long() const
 t vr_internal::CVRPathHandle::~CVRPathHandle()
 t vr_internal::GetResourceFullPath(std::string const&)
 t vr_internal::Localize(std::string const&, std::string const&, std::string const&, std::string const&, std::string const&)
 t vr_internal::VRApplications()
 t vr_internal::VRApplicationsInternal()
 t vr_internal::VRBlockQueue()
 t vr_internal::VRCameraPassThruInternal()
 t vr_internal::VRChaperone()
 t vr_internal::VRChaperoneInternal()
 t vr_internal::VRChaperoneSetup()
 t vr_internal::VRClientInternal()
 t vr_internal::VRCompositorSystemInternal()
 t vr_internal::VRControlPanel()
 t vr_internal::VRDebug()
 t vr_internal::VRDriverDirectInternal()
 t vr_internal::VRDriverManager()
 t vr_internal::VRExtendedDisplay()
 t vr_internal::VRInput()
 t vr_internal::VRInputInternal()
 t vr_internal::VRMailbox()
 t vr_internal::VROverlay()
 t vr_internal::VROverlayInternal()
 t vr_internal::VRPaths()
 t vr_internal::VRPathsInternal()
 t vr_internal::VRPathsRaw()
 t vr_internal::VRProperties()
 t vr_internal::VRPropertiesInternal()
 t vr_internal::VRPropertiesRaw()
 t vr_internal::VRRenderModels()
 t vr_internal::VRRenderModelsInternal()
 t vr_internal::VRResources()
 t vr_internal::VRServer()
 t vr_internal::VRSettings()
 t vr_internal::VRSettingsInternal()
 t vr_internal::VRSettingsRaw()
 t vr_internal::VRSystem()
 t vr_internal::VRSystemLayerInternal()
 t vr_internal::VRTrackedCameraInternal()
 t xrNegotiateLoaderRuntimeInterface.cold
 tanf
 time
 tolower
 toupper
 typeinfo for int
 typeinfo for std::__codecvt_utf8_base<char32_t>
 typeinfo for std::__codecvt_utf8_base<wchar_t>
 typeinfo for std::basic_streambuf<char, std::char_traits<char> >
 typeinfo for std::ctype<char>
 typeinfo for std::exception
 typeinfo for std::istream
 typeinfo for std::locale::facet
 typeinfo for std::regex_error
 typeinfo for std::thread::_State
 umask
 unlink
 unsetenv
 usleep
 vsnprintf
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__function_type_info
 vtable for __cxxabiv1::__pointer_type_info
 vtable for __cxxabiv1::__si_class_type_info
 vtable for __cxxabiv1::__vmi_class_type_info
 vtable for std::basic_filebuf<char, std::char_traits<char> >
 vtable for std::basic_ifstream<char, std::char_traits<char> >
 vtable for std::basic_ios<char, std::char_traits<char> >
 vtable for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >
 vtable for std::basic_ofstream<char, std::char_traits<char> >
 vtable for std::basic_ostringstream<char, std::char_traits<char>, std::allocator<char> >
 vtable for std::basic_streambuf<char, std::char_traits<char> >
 vtable for std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >
 vtable for std::basic_stringstream<char, std::char_traits<char>, std::allocator<char> >
 vtable for std::regex_error
 vtable for std::runtime_error
 waitpid
 wcslen
 wcsstr
 wordexp
 wordfree
 write
