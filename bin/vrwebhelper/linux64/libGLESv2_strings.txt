
!
!#,V
!*>
!+5
!5>
!7
!8
!<E
!=
!>
!@>
!IsAndroid()
!IsApple()
!IsIntel(mPhysicalDeviceProperties.vendorID) && (mPhysicalDeviceProperties.apiVersion >= ((((uint32_t)(1)) << 22) | (((uint32_t)(1)) << 12) | ((uint32_t)(0)))) || ExtensionFound("VK_KHR_maintenance1", deviceExtensionNames)
!K+
!M-
!O-
!XT
!bT
!g5
!iG
!pK
!s/
"
" is not unique, which is not allow in WebGPU env.
" versus
"$>
"%s" (%s)
"(" expected after 'debug' keyword
"(" expected after 'optimize' keyword
")" expected to end 'debug' pragma
")" expected to end 'optimize' pragma
"/.
"2
"7
"8
"=0
">
"C>
"EF
"G
"W5
"[E
"defined" can't be (un)defined:
"fO
"l&
"offset" on block member
"on" or "off" expected after '(' for 'debug' pragma
"on" or "off" expected after '(' for 'optimize' pragma
"p7
"t:
"|G
"L
#
#">
##
#->
#7
#8
#8>
#;E
#A>
#D>
#S5
#define
#define GL_ES 1#define GL_FRAGMENT_PRECISION_HIGH 1#define GL_OES_texture_3D 1#define GL_OES_standard_derivatives 1#define GL_EXT_frag_depth 1#define GL_OES_EGL_image_external 1#define GL_OES_EGL_image_external_essl3 1#define GL_EXT_YUV_target 1#define GL_EXT_shader_texture_lod 1#define GL_EXT_shadow_samplers 1#define GL_ANDROID_extension_pack_es31a 1#define GL_OES_sample_variables 1#define GL_OES_shader_image_atomic 1#define GL_OES_shader_multisample_interpolation 1#define GL_OES_texture_storage_multisample_2d_array 1#define GL_EXT_geometry_shader 1#define GL_EXT_geometry_point_size 1#define GL_EXT_gpu_shader5 1#define GL_EXT_primitive_bounding_box 1#define GL_EXT_shader_io_blocks 1#define GL_EXT_tessellation_shader 1#define GL_EXT_tessellation_point_size 1#define GL_EXT_texture_buffer 1#define GL_EXT_texture_cube_map_array 1#define GL_EXT_shader_implicit_conversions 1#define GL_EXT_shader_integer_mix 1#define GL_EXT_blend_func_extended 1#define GL_OES_geometry_shader 1#define GL_OES_geometry_point_size 1#define GL_OES_gpu_shader5 1#define GL_OES_primitive_bounding_box 1#define GL_OES_shader_io_blocks 1#define GL_OES_tessellation_shader 1#define GL_OES_tessellation_point_size 1#define GL_OES_texture_buffer 1#define GL_OES_texture_cube_map_array 1#define GL_EXT_shader_non_constant_global_initializers 1
#define GL_EXT_device_group 1#define GL_EXT_multiview 1#define GL_NV_shader_sm_builtins 1
#define GL_FRAGMENT_PRECISION_HIGH 1#define GL_ARB_texture_rectangle 1#define GL_ARB_shading_language_420pack 1#define GL_ARB_texture_gather 1#define GL_ARB_gpu_shader5 1#define GL_ARB_separate_shader_objects 1#define GL_ARB_compute_shader 1#define GL_ARB_tessellation_shader 1#define GL_ARB_enhanced_layouts 1#define GL_ARB_texture_cube_map_array 1#define GL_ARB_texture_multisample 1#define GL_ARB_shader_texture_lod 1#define GL_ARB_explicit_attrib_location 1#define GL_ARB_explicit_uniform_location 1#define GL_ARB_shader_image_load_store 1#define GL_ARB_shader_atomic_counters 1#define GL_ARB_shader_draw_parameters 1#define GL_ARB_shader_group_vote 1#define GL_ARB_derivative_control 1#define GL_ARB_shader_texture_image_samples 1#define GL_ARB_viewport_array 1#define GL_ARB_gpu_shader_int64 1#define GL_ARB_gpu_shader_fp64 1#define GL_ARB_shader_ballot 1#define GL_ARB_sparse_texture2 1#define GL_ARB_sparse_texture_clamp 1#define GL_ARB_shader_stencil_export 1#define GL_ARB_sample_shading 1#define GL_ARB_shader_image_size 1#define GL_ARB_shading_language_packing 1#define GL_ARB_post_depth_coverage 1#define GL_ARB_fragment_shader_interlock 1#define GL_ARB_uniform_buffer_object 1#define GL_ARB_shader_bit_encoding 1#define GL_ARB_shader_storage_buffer_object 1#define GL_ARB_texture_query_lod 1#define GL_ARB_vertex_attrib_64bit 1#define GL_EXT_shader_non_constant_global_initializers 1#define GL_EXT_shader_image_load_formatted 1#define GL_EXT_post_depth_coverage 1#define GL_EXT_control_flow_attributes 1#define GL_EXT_nonuniform_qualifier 1#define GL_EXT_shader_16bit_storage 1#define GL_EXT_shader_8bit_storage 1#define GL_EXT_samplerless_texture_functions 1#define GL_EXT_scalar_block_layout 1#define GL_EXT_fragment_invocation_density 1#define GL_EXT_buffer_reference 1#define GL_EXT_buffer_reference2 1#define GL_EXT_buffer_reference_uvec2 1#define GL_EXT_demote_to_helper_invocation 1#define GL_EXT_debug_printf 1#define GL_KHR_shader_subgroup_basic 1#define GL_KHR_shader_subgroup_vote 1#define GL_KHR_shader_subgroup_arithmetic 1#define GL_KHR_shader_subgroup_ballot 1#define GL_KHR_shader_subgroup_shuffle 1#define GL_KHR_shader_subgroup_shuffle_relative 1#define GL_KHR_shader_subgroup_clustered 1#define GL_KHR_shader_subgroup_quad 1#define E_GL_EXT_shader_atomic_int64 1#define E_GL_EXT_shader_realtime_clock 1#define E_GL_EXT_ray_tracing 1#define E_GL_EXT_ray_query 1#define E_GL_EXT_ray_flags_primitive_culling 1#define GL_AMD_shader_ballot 1#define GL_AMD_shader_trinary_minmax 1#define GL_AMD_shader_explicit_vertex_parameter 1#define GL_AMD_gcn_shader 1#define GL_AMD_gpu_shader_half_float 1#define GL_AMD_texture_gather_bias_lod 1#define GL_AMD_gpu_shader_int16 1#define GL_AMD_shader_image_load_store_lod 1#define GL_AMD_shader_fragment_mask 1#define GL_AMD_gpu_shader_half_float_fetch 1#define GL_INTEL_shader_integer_functions2 1#define GL_NV_sample_mask_override_coverage 1#define GL_NV_geometry_shader_passthrough 1#define GL_NV_viewport_array2 1#define GL_NV_shader_atomic_int64 1#define GL_NV_conservative_raster_underestimation 1#define GL_NV_shader_subgroup_partitioned 1#define GL_NV_shading_rate_image 1#define GL_NV_ray_tracing 1#define GL_NV_fragment_shader_barycentric 1#define GL_NV_compute_shader_derivatives 1#define GL_NV_shader_texture_footprint 1#define GL_NV_mesh_shader 1#define GL_NV_cooperative_matrix 1#define GL_NV_integer_cooperative_matrix 1#define GL_EXT_shader_explicit_arithmetic_types 1#define GL_EXT_shader_explicit_arithmetic_types_int8 1#define GL_EXT_shader_explicit_arithmetic_types_int16 1#define GL_EXT_shader_explicit_arithmetic_types_int32 1#define GL_EXT_shader_explicit_arithmetic_types_int64 1#define GL_EXT_shader_explicit_arithmetic_types_float16 1#define GL_EXT_shader_explicit_arithmetic_types_float32 1#define GL_EXT_shader_explicit_arithmetic_types_float64 1#define GL_EXT_shader_subgroup_extended_types_int8 1#define GL_EXT_shader_subgroup_extended_types_int16 1#define GL_EXT_shader_subgroup_extended_types_int64 1#define GL_EXT_shader_subgroup_extended_types_float16 1
#define GL_GOOGLE_cpp_style_line_directive 1#define GL_GOOGLE_include_directive 1#define GL_KHR_blend_equation_advanced 1
#define GL_NV_shader_noperspective_interpolation 1
#define GL_OVR_multiview 1#define GL_OVR_multiview2 1
#define GL_SPIRV
#define GL_compatibility_profile 1
#define GL_core_profile 1
#define VULKAN
#define emu_precision
#define emu_precision highp
#define emu_precision mediump
#elif
#elif after #else
#elif defined GL_OES_geometry_shader
#elif defined(GL_NV_viewport_array2)
#else
#else after #else
#endif
#error
#error "No geometry shader extensions available." // Only generate this if the extension is "required"
#extension
#extension GL_ARB_draw_buffers :
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_geometry_shader4 :
#extension GL_ARB_gpu_shader5 : enable
#extension GL_ARB_shader_texture_lod :
#extension GL_ARB_shader_viewport_layer_array : require
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_multisample :
#extension GL_ARB_texture_rectangle : require
#extension GL_EXT_geometry_shader :
#extension GL_EXT_gpu_shader5 : enable
#extension GL_EXT_texture_cube_map_array : enable
#extension GL_NV_draw_buffers :
#extension GL_NV_mesh_shader
#extension GL_NV_shader_framebuffer_fetch :
#extension GL_NV_viewport_array2 : require
#extension GL_OES_EGL_image_external : require
#extension GL_OES_geometry_shader :
#extension GL_OES_texture_cube_map_array : enable
#extension GL_OVR_multiview
#h7
#if !defined(GL_ARB_shading_language_packing)    float f16tof32(uint val)    {        uint sign = (val & 0x8000u) << 16;        int exponent = int((val & 0x7C00u) >> 10);        uint mantissa = val & 0x03FFu;        float f32 = 0.0;        if(exponent == 0)        {            if (mantissa != 0u)            {                const float scale = 1.0 / (1 << 24);                f32 = scale * mantissa;            }        }        else if (exponent == 31)        {            return uintBitsToFloat(sign | 0x7F800000u | mantissa);        }        else        {            exponent -= 15;            float scale;            if(exponent < 0)            {                // The negative unary operator is buggy on OSX.                // Work around this by using abs instead.                scale = 1.0 / (1 << abs(exponent));            }            else            {                scale = 1 << exponent;            }            float decimal = 1.0 + float(mantissa) / float(1 << 10);            f32 = scale * decimal;        }        if (sign != 0u)        {            f32 = -f32;        }        return f32;    }#endifvec2 unpackHalf2x16_emu(uint u){    #if defined(GL_ARB_shading_language_packing)        return unpackHalf2x16(u);    #else        uint y = (u >> 16);        uint x = u & 0xFFFFu;        return vec2(f16tof32(x), f16tof32(y));    #endif}
#if !defined(GL_ARB_shading_language_packing)    float fromSnorm(uint x)    {        int xi = (int(x) & 0x7FFF) - (int(x) & 0x8000);        return clamp(float(xi) / 32767.0, -1.0, 1.0);    }#endifvec2 unpackSnorm2x16_emu(uint u){    #if defined(GL_ARB_shading_language_packing)        return unpackSnorm2x16(u);    #else        uint y = (u >> 16);        uint x = u;        return vec2(fromSnorm(x), fromSnorm(y));    #endif}
#if !defined(GL_ARB_shading_language_packing)    uint f32tof16(float val)    {        uint f32 = floatBitsToUint(val);        uint f16 = 0u;        uint sign = (f32 >> 16) & 0x8000u;        int exponent = int((f32 >> 23) & 0xFFu) - 127;        uint mantissa = f32 & 0x007FFFFFu;        if (exponent == 128)        {            // Infinity or NaN            // NaN bits that are masked out by 0x3FF get discarded.            // This can turn some NaNs to infinity, but this is allowed by the spec.            f16 = sign | (0x1Fu << 10);            f16 |= (mantissa & 0x3FFu);        }        else if (exponent > 15)        {            // Overflow - flush to Infinity            f16 = sign | (0x1Fu << 10);        }        else if (exponent > -15)        {            // Representable value            exponent += 15;            mantissa >>= 13;            f16 = sign | uint(exponent << 10) | mantissa;        }        else        {            f16 = sign;        }        return f16;    }#endifuint packHalf2x16_emu(vec2 v){    #if defined(GL_ARB_shading_language_packing)        return packHalf2x16(v);    #else        uint x = f32tof16(v.x);        uint y = f32tof16(v.y);        return (y << 16) | x;    #endif}
#if defined(GL_ARB_shader_viewport_layer_array)
#if defined(GL_FRAGMENT_PRECISION_HIGH)
#if/#ifdef/#ifndef
#ifdef
#ifdef GL_EXT_geometry_shader
#include
#l[
#line
#line 1
#pragma
#pragma STDGL invariant(all)
#pragma STDGL invariant(all) can not be used in fragment shader
#pragma once
#pragma use_variable_pointers
#r/
#s7
#undef
#version
#version 300 esprecision highp float;#define kMaxTexUnits 4in vec4 pos;in vec3 normal;in vec4 color;in float pointsize;in vec4 texcoord0;in vec4 texcoord1;in vec4 texcoord2;in vec4 texcoord3;uniform mat4 projection;uniform mat4 modelview;uniform mat4 modelview_invtr;uniform mat4 texture_matrix[kMaxTexUnits];uniform bool enable_rescale_normal;uniform bool enable_normalize;// Point rasterization//////////////////////////////////////////////////////////uniform bool point_rasterization;uniform float point_size_min;uniform float point_size_max;uniform vec3 point_distance_attenuation;// GL_OES_draw_texture uniforms/////////////////////////////////////////////////uniform bool enable_draw_texture;uniform vec4 draw_texture_coords;uniform vec2 draw_texture_dims;uniform vec4 draw_texture_normalized_crop_rect[kMaxTexUnits];// Varyings/////////////////////////////////////////////////////////////////////out vec4 pos_varying;out vec3 normal_varying;out vec4 color_varying;flat out vec4 color_varying_flat;out vec4 texcoord0_varying;out vec4 texcoord1_varying;out vec4 texcoord2_varying;out vec4 texcoord3_varying;const vec4 drawTextureVertices[6] = vec4[](    vec4(0.0, 0.0, 0.0, 1.0),    vec4(1.0, 0.0, 0.0, 1.0),    vec4(1.0, 1.0, 0.0, 1.0),    vec4(0.0, 0.0, 0.0, 1.0),    vec4(1.0, 1.0, 0.0, 1.0),    vec4(0.0, 1.0, 0.0, 1.0));vec4 drawTexturePosition(int vertexId){    float drawTexX = draw_texture_coords[0];    float drawTexY = draw_texture_coords[1];    float drawTexZ = draw_texture_coords[2];    float drawTexW = draw_texture_dims[0];    float drawTexH = draw_texture_dims[1];    return vec4(drawTexX, drawTexY, drawTexZ, 0.0) +           drawTextureVertices[vertexId] *           vec4(drawTexW, drawTexH, 1.0, 1.0);}vec4 drawTextureTexCoord(int vertexId, int textureUnit){    float texCropU = draw_texture_normalized_crop_rect[textureUnit].x;    float texCropV = draw_texture_normalized_crop_rect[textureUnit].y;    float texCropW = draw_texture_normalized_crop_rect[textureUnit].z;    float texCropH = draw_texture_normalized_crop_rect[textureUnit].w;    return vec4(texCropU, texCropV, 0.0, 0.0) +           drawTextureVertices[vertexId] *           vec4(texCropW, texCropH, 0.0, 0.0);}vec4 calcWorldPosition(vec4 posInput){    return modelview * posInput;}vec4 calcNdcFromWorldPosition(vec4 worldPos){    return projection * worldPos;}float calcPointSize(vec4 ndcPos){    float dist         = length(ndcPos.z);    float attConst     = point_distance_attenuation[0];    float attLinear    = point_distance_attenuation[1];    float attQuad      = point_distance_attenuation[2];    float attPart      = attConst + attLinear * dist + attQuad * dist * dist;    float attPointSize = pointsize / pow(attPart, 0.5);    return clamp(attPointSize, point_size_min, point_size_max);}vec3 calcNormal(vec3 normalInput){    mat3 mvInvTr3 = mat3(modelview_invtr);    vec3 result   = mvInvTr3 * normalInput;    if (enable_rescale_normal)    {        float rescale   = 1.0;        vec3 rescaleVec = vec3(mvInvTr3[2]);        float len       = length(rescaleVec);        if (len > 0.0)        {            rescale = 1.0 / len;        }        result *= rescale;    }    if (enable_normalize)    {        result = normalize(result);    }    return result;}void main(){    color_varying      = color;    color_varying_flat = color;    if (enable_draw_texture)    {        int vertexId        = gl_VertexID;        vec4 posDrawTexture = drawTexturePosition(vertexId);        gl_Position = posDrawTexture;        pos_varying = posDrawTexture;        normal_varying = normal;        gl_PointSize = pointsize;        texcoord0_varying = drawTextureTexCoord(vertexId, 0);        texcoord1_varying = drawTextureTexCoord(vertexId, 1);        texcoord2_varying = drawTextureTexCoord(vertexId, 2);        texcoord3_varying = drawTextureTexCoord(vertexId, 3);    }    else    {        vec4 worldPos = calcWorldPosition(pos);        vec4 ndcPos   = calcNdcFromWorldPosition(worldPos);        gl_Position = ndcPos;        pos_varying = worldPos;        normal_varying = calcNormal(normal);        // Avoid calculating point size stuff        // if we are not rendering points.        if (point_rasterization)        {            gl_PointSize = calcPointSize(ndcPos);        }        else        {            gl_PointSize = pointsize;        }        texcoord0_varying = texture_matrix[0] * texcoord0;        texcoord1_varying = texture_matrix[1] * texcoord1;        texcoord2_varying = texture_matrix[2] * texcoord2;        texcoord3_varying = texture_matrix[3] * texcoord3;    }}
#version 300 esprecision highp float;// Defines for GL constants#define kMaxLights                           8#define kMaxTexUnits                         4#define kMaxClipPlanes                       6#define kModulate                       0x2100#define kDecal                          0x2101#define kCombine                        0x8570#define kReplace                        0x1E01#define kBlend                          0x0BE2#define kAdd                            0x0104#define kAddSigned                      0x8574#define kInterpolate                    0x8575#define kSubtract                       0x84E7#define kDot3Rgb                        0x86AE#define kDot3Rgba                       0x86AF#define kAlpha                          0x1906#define kRGB                            0x1907#define kRGBA                           0x1908#define kLuminance                      0x1909#define kLuminanceAlpha                 0x190A#define kTexture                        0x1702#define kConstant                       0x8576#define kPrimaryColor                   0x8577#define kPrevious                       0x8578#define kSrcColor                       0x0300#define kOneMinusSrcColor               0x0301#define kSrcAlpha                       0x0302#define kOneMinusSrcAlpha               0x0303#define kLinear                         0x2601#define kExp                            0x0800#define kExp2                           0x0801#define kNever                          0x0200#define kLess                           0x0201#define kEqual                          0x0202#define kLequal                         0x0203#define kGreater                        0x0204#define kNotequal                       0x0205#define kGequal                         0x0206#define kAlways                         0x0207#define kZero                              0x0#define kOne                               0x1#define kClear                          0x1500#define kAnd                            0x1501#define kAnd_reverse                    0x1502#define kCopy                           0x1503#define kAnd_inverted                   0x1504#define kNoop                           0x1505#define kXor                            0x1506#define kOr                             0x1507#define kNor                            0x1508#define kEquiv                          0x1509#define kInvert                         0x150A#define kOr_reverse                     0x150B#define kCopy_inverted                  0x150C#define kOr_inverted                    0x150D#define kNand                           0x150E#define kSet                            0x150F
#version 450 core
#version directive must occur before anything else, except for comments and white space
#version directive must occur on the first line of the shader
#version: Desktop shaders for OpenGL SPIR-V require version 330 or higher
#version: Desktop shaders for Vulkan SPIR-V require version 140 or higher
#version: ES shaders for SPIR-V require version 310 or higher
#version: compilation for SPIR-V does not support the compatibility profile
#version: compute shaders require es profile with version 310 or above, or non-es profile with version 420 or above
#version: geometry shaders require es profile with version 310 or non-es profile with version 150 or above
#version: mesh/task shaders require es profile with version 320 or above, or non-es profile with version 450 or above
#version: only version 300, 310, and 320 support the es profile
#version: ray tracing shaders require non-es profile with version 460 or above
#version: statement must appear first in es-profile shader; before comments or newlines
#version: tessellation shaders require es profile with version 310 or non-es profile with version 150 or above
#version: versions 300, 310, and 320 require specifying the 'es' profile
#version: versions 300, 310, and 320 support only the es profile
#version: versions before 150 do not allow a profile token
#yG
#9
$
$%d =
$&,V,S
$&,V,S,V
$&2,S
$'>
$*V
$++
$-5
$2,>S,,
$6
$7
$8
$9
$@
$@1
$@10
$@11
$@12
$@13
$@2
$@3
$@4
$@5
$@6
$@7
$@8
$@9
$CD
$Global
$MW
$Q%
$S8
$T5
$X2
$]5
$accept
$end
$g>
$undefined
$yG
$|O
$G
%
%!2,>S,
%!3,>S,,
%!~1,>S
%%>
%*>
%-.13e
%.0Lf
%0>
%1,S,>S,
%2,S,>S,,
%3,S,>S,,,
%4,>S,
%4,S,>S,,
%7
%8
%;>
%=
%>
%@,S,V
%@,S,V,
%@,S,V,,
%@,S,V,,,
%@,S,V,,,,
%@,S,V,,,,,S
%@,S,V,,>S
%@,S,V,S
%@,S,V,S,V
%@,S,V,S,V,,,
%@,S,V,S,V,,,,S
%@,S,V,S,V,,V,S
%@,S,V,S,V,>S
%@,S,V,V
%@,V
%@,V,V
%BV
%E
%GZ
%H:%M:%S%m/%d/%y%Y-%m-%d%I:%M:%S %p%H:%M%H:%M:%S
%I0
%Lf
%WG
%Z5
%a %b %d %H:%M:%S %Y
%c
%d (%s)
%f
%jG
%lld (%s)
%llu (%s)
%q5
%rG
%s
%s     subgroupAdd(%s);
%s     subgroupAnd(%s);
%s     subgroupBroadcast(%s, uint);
%s     subgroupBroadcastFirst(%s);
%s     subgroupClusteredAdd(%s, uint);
%s     subgroupClusteredAnd(%s, uint);
%s     subgroupClusteredMax(%s, uint);
%s     subgroupClusteredMin(%s, uint);
%s     subgroupClusteredMul(%s, uint);
%s     subgroupClusteredOr(%s, uint);
%s     subgroupClusteredXor(%s, uint);
%s     subgroupExclusiveAdd(%s);
%s     subgroupExclusiveAnd(%s);
%s     subgroupExclusiveMax(%s);
%s     subgroupExclusiveMin(%s);
%s     subgroupExclusiveMul(%s);
%s     subgroupExclusiveOr(%s);
%s     subgroupExclusiveXor(%s);
%s     subgroupInclusiveAdd(%s);
%s     subgroupInclusiveAnd(%s);
%s     subgroupInclusiveMax(%s);
%s     subgroupInclusiveMin(%s);
%s     subgroupInclusiveMul(%s);
%s     subgroupInclusiveOr(%s);
%s     subgroupInclusiveXor(%s);
%s     subgroupMax(%s);
%s     subgroupMin(%s);
%s     subgroupMul(%s);
%s     subgroupOr(%s);
%s     subgroupPartitionedAddNV(%s, uvec4 ballot);
%s     subgroupPartitionedAndNV(%s, uvec4 ballot);
%s     subgroupPartitionedExclusiveAddNV(%s, uvec4 ballot);
%s     subgroupPartitionedExclusiveAndNV(%s, uvec4 ballot);
%s     subgroupPartitionedExclusiveMaxNV(%s, uvec4 ballot);
%s     subgroupPartitionedExclusiveMinNV(%s, uvec4 ballot);
%s     subgroupPartitionedExclusiveMulNV(%s, uvec4 ballot);
%s     subgroupPartitionedExclusiveOrNV(%s, uvec4 ballot);
%s     subgroupPartitionedExclusiveXorNV(%s, uvec4 ballot);
%s     subgroupPartitionedInclusiveAddNV(%s, uvec4 ballot);
%s     subgroupPartitionedInclusiveAndNV(%s, uvec4 ballot);
%s     subgroupPartitionedInclusiveMaxNV(%s, uvec4 ballot);
%s     subgroupPartitionedInclusiveMinNV(%s, uvec4 ballot);
%s     subgroupPartitionedInclusiveMulNV(%s, uvec4 ballot);
%s     subgroupPartitionedInclusiveOrNV(%s, uvec4 ballot);
%s     subgroupPartitionedInclusiveXorNV(%s, uvec4 ballot);
%s     subgroupPartitionedMaxNV(%s, uvec4 ballot);
%s     subgroupPartitionedMinNV(%s, uvec4 ballot);
%s     subgroupPartitionedMulNV(%s, uvec4 ballot);
%s     subgroupPartitionedOrNV(%s, uvec4 ballot);
%s     subgroupPartitionedXorNV(%s, uvec4 ballot);
%s     subgroupQuadBroadcast(%s, uint);
%s     subgroupQuadSwapDiagonal(%s);
%s     subgroupQuadSwapHorizontal(%s);
%s     subgroupQuadSwapVertical(%s);
%s     subgroupShuffle(%s, uint);
%s     subgroupShuffleDown(%s, uint delta);
%s     subgroupShuffleUp(%s, uint delta);
%s     subgroupShuffleXor(%s, uint);
%s     subgroupXor(%s);
%s %s (
%s %u
%s (%d)
%s profile; removed in version %d
%s%d
%u (%s)
%u-
&
&&
&*>
&/.
&2,>S,,,
&3V
&7
&8
&=
&JS
&V
&j-
&n7
&s:
&u/
&xG
&{E
'
' (
' :
' aliases attribute '
' and a right operand of type '
' as an operand of <id> '
' at location
' cannot be OpTypeVoid.
' cannot be a constant zero.
' cannot be a void pointer.
' cannot have a null value.
' cannot have the sign bit set to 1.
' component type does not match Result Type <id> '
' conflicting location with previously defined '
' could not be inlined because the return instruction is not at the end of the function. This could be fixed by running merge-return before inlining.
' count does not match Result Type <id> '
' count must be one.
' decorated with
' decorated with both
' default value must be at least 1.
' default value must be at least 1: found
' differ between
' does not match Pointer <id> '
' does not match the Function Type's return type <id> '
' does not match the OpTypeFunction parameter type of the same index.
' does not represent a value.
' exists that takes a left-hand operand of type '
' exists that takes an operand of type
' has
' has a consumer in a different basic block. The consumer instruction <id> is '
' has illegal type.
' id <
' in
' index is larger than Type <id> '
' is a pointer, which is invalid in the Logical addressing model.
' is a void type.
' is missing Binding decoration.
' is missing Block decoration.
' is missing Block or BufferBlock decoration.
' is missing DescriptorSet decoration.
' is missing or void.
' is not Workgroup or StorageBuffer.
' is not a boolean type.
' is not a composite type.
' is not a constant instruction with scalar integer type.
' is not a constant integer type.
' is not a constant or module-scope variable.
' is not a constant or undef.
' is not a cooperative matrix type.
' is not a decoration group.
' is not a function type.
' is not a function.
' is not a logical pointer.
' is not a pointer type.
' is not a pointer.
' is not a sampler type.
' is not a scalar constant type.
' is not a scalar numerical type.
' is not a scalar specialization constant.
' is not a scalar type.
' is not a struct type.
' is not a type.
' is not an OpString.
' is not an array to be captured by element.
' is not an object.
' is not defined.
' is not pointer type
' is not the Entry Point operand of an OpEntryPoint.
' is not valid for the WebGPU execution environment.
' is not valid in
' member '
' must be OpTypeCooperativeMatrixNV.
' must be OpTypeInt with width 32 and signedness 0.
' must be OpTypePointer. Found Op
' must be a boolean constant instruction.
' must be a pointer to an OpTypeStruct.
' must be a scalar integer type.
' must be an OpTypeRuntimeArray.
' must be an the last member of the struct.
' must be less than the ID bound '
' size exceeds max value
' storage class is read-only
' to '
' type does not match Result Type <id> '
' type does not match the Result Type <id> '
' uses more than one PushConstant interface.
' vector component count does not match Result Type <id> '
''
'(>
')
', has a disallowed initializer & storage class
', is attempting to create memory for an illegal type,
', member '
', must have an initializer.
'.
'. This structure has
'3>
'3V
'7
'8
':' missing after extension name
':E
'<0
'>>
'BD
'I0
'L5
'PW
'R5
'Target Label' operands for OpBranch must be the ID of an OpLabel instruction
'Target Label' operands for OpSwitch must be IDs of an OpLabel instruction
'dpy' not a valid EGLDisplay handle
'dpy' not initialized
'imageLoad' cannot be used with images qualified as 'writeonly'
'imageStore' cannot be used with images qualified as 'readonly'
'in' can be only used to specify the local group size
'lG
'layout'
'max_vertices' is not specified in the geometry shader.
'n5
's Type must be a scalar or vector type.
's array element type.
's array length.
's callgraph contains function <id>
's component type.
's function parameter count is not zero.
's function return type is not void.
's layout does not match Object <id> '
's layout.
's matrix column component type.
's matrix column count.
's matrix column type.
's member count.
's member type.
's parameter type.
's struct member count.
's type does not match Function <id> '
's type does not match Object <id> '
's type does not match OpFunction's return type.
's type does not match Result Type <id> '
's type does not match Source <id> '
's type is void.
's type.
's vector component count.
's vector element type.
'w7
(
(!
(!mFeatures.supportsTransformFeedbackExtension.enabled && mPhysicalDeviceFeatures.vertexPipelineStoresAndAtomics == 1)
(">
(#@
((
()' used in the following call chain:
(+
(++
(+5
(+>
(,+
(-
(--
(-25.0));    v = v * exp2(-exponent);    v = sign(v) * floor(abs(v));    return v * exp2(exponent) * vec
(...)
(3<
(6
(7
(8
(;,
(>
(Did you mean gl_InstanceIndex?)
(Did you mean gl_VertexIndex?)
(I0
(IsAndroid() && isQualcomm) || (isIntel && IsApple())
(IsApple() && functions->standard == STANDARD_GL_DESKTOP) || (IsLinux() && isAMD)
(IsWindows() && (isIntel || isAMD)) || (IsLinux() && isNvidia)
([]())
(anonymous namespace)::AddContextSpecificSymbols(TBuiltInResource const*, TInfoSink&, glslang::TSymbolTable&, int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::EShSource)
(anonymous namespace)::AppendTypeName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, char const*, char const*, int, int)
(anonymous namespace)::CommonSymbolTable
(anonymous namespace)::CompileDeferred(TCompiler*, char const* const*, int, int const*, char const* const*, char const*, EShOptimizationLevel, TBuiltInResource const*, int, EProfile, bool, bool, EShMessages, glslang::TIntermediate&, glslang::TShader::Includer&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TEnvironment*)
(anonymous namespace)::CreateParseContext(glslang::TSymbolTable&, glslang::TIntermediate&, int, EProfile, glslang::EShSource, EShLanguage, TInfoSink&, glslang::SpvVersion, bool, EShMessages, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
(anonymous namespace)::DeduceVersionProfile(TInfoSink&, EShLanguage, bool, int, glslang::EShSource, int&, EProfile&, glslang::SpvVersion const&)
(anonymous namespace)::DisassembleHeader(void*, spv_endianness_t, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
(anonymous namespace)::DisassembleInstruction(void*, spv_parsed_instruction_t const*)
(anonymous namespace)::DisassembleTargetHeader(void*, spv_endianness_t, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
(anonymous namespace)::DisassembleTargetInstruction(void*, spv_parsed_instruction_t const*)
(anonymous namespace)::Disassembler::Disassembler(spvtools::AssemblyGrammar const&, unsigned int, std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)>)
(anonymous namespace)::Disassembler::HandleHeader(spv_endianness_t, unsigned int, unsigned int, unsigned int, unsigned int)
(anonymous namespace)::Disassembler::HandleInstruction(spv_parsed_instruction_t const&)
(anonymous namespace)::Disassembler::SaveTextResult(spv_text_t**) const
(anonymous namespace)::InheritQualifiers(glslang::TQualifier&, glslang::TQualifier const&)
(anonymous namespace)::InitializeSymbolTable(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::EShSource, TInfoSink&, glslang::TSymbolTable&)
(anonymous namespace)::IsSubset(std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > > const&, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > > const&)
(anonymous namespace)::KeywordMap
(anonymous namespace)::NumberOfClients
(anonymous namespace)::Parser::State::operator=((anonymous namespace)::Parser::State&&)
(anonymous namespace)::Parser::State::~State()
(anonymous namespace)::Parser::diagnostic(spv_result_t)
(anonymous namespace)::Parser::exhaustedInputDiagnostic(unsigned long, SpvOp_, spv_operand_type_t)
(anonymous namespace)::Parser::setNumericTypeInfoForType(spv_parsed_operand_t*, unsigned int)
(anonymous namespace)::PerProcessGPA
(anonymous namespace)::PlatformMethods()::platformMethods
(anonymous namespace)::ReadableOrderTraverser::visit(spv::Block*, spv::ReachReason, spv::Block*)
(anonymous namespace)::RecordProcesses(glslang::TIntermediate&, EShMessages, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
(anonymous namespace)::ReservedSet
(anonymous namespace)::SemanticMap
(anonymous namespace)::SetupBuiltinSymbolTable(int, EProfile, glslang::SpvVersion const&, glslang::EShSource)
(anonymous namespace)::SharedSymbolTables
(anonymous namespace)::TGlslangToSpvTraverser::CreateInvocationsVectorOperation(spv::Op, spv::GroupOperation, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&)
(anonymous namespace)::TGlslangToSpvTraverser::TranslateBuiltInDecoration(glslang::TBuiltInVariable, bool)
(anonymous namespace)::TGlslangToSpvTraverser::TranslateCoherent(glslang::TType const&)
(anonymous namespace)::TGlslangToSpvTraverser::TranslateImageOperands(spv::Builder::AccessChain::CoherentFlags const&)
(anonymous namespace)::TGlslangToSpvTraverser::TranslateMemoryAccess(spv::Builder::AccessChain::CoherentFlags const&)
(anonymous namespace)::TGlslangToSpvTraverser::TranslateStorageClass(glslang::TType const&)
(anonymous namespace)::TGlslangToSpvTraverser::accessChainLoad(glslang::TType const&)
(anonymous namespace)::TGlslangToSpvTraverser::accessChainStore(glslang::TType const&, unsigned int)
(anonymous namespace)::TGlslangToSpvTraverser::addMeshNVDecoration(unsigned int, int, glslang::TQualifier const&)
(anonymous namespace)::TGlslangToSpvTraverser::convertGlslangToSpvType(glslang::TType const&, bool)
(anonymous namespace)::TGlslangToSpvTraverser::convertGlslangToSpvType(glslang::TType const&, glslang::TLayoutPacking, glslang::TQualifier const&, bool, bool)
(anonymous namespace)::TGlslangToSpvTraverser::convertSwizzle(glslang::TIntermAggregate const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&)
(anonymous namespace)::TGlslangToSpvTraverser::createAtomicOperation(glslang::TOperator, spv::Decoration, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, glslang::TBasicType, spv::Builder::AccessChain::CoherentFlags const&)
(anonymous namespace)::TGlslangToSpvTraverser::createBinaryOperation(glslang::TOperator, (anonymous namespace)::(anonymous namespace)::OpDecorations&, unsigned int, unsigned int, unsigned int, glslang::TBasicType, bool)
(anonymous namespace)::TGlslangToSpvTraverser::createCompositeConstruct(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >)
(anonymous namespace)::TGlslangToSpvTraverser::createImageTextureFunctionCall(glslang::TIntermOperator*)
(anonymous namespace)::TGlslangToSpvTraverser::createInvertedSwizzle(spv::Decoration, glslang::TIntermTyped const&, unsigned int)
(anonymous namespace)::TGlslangToSpvTraverser::createInvocationsOperation(glslang::TOperator, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, glslang::TBasicType)
(anonymous namespace)::TGlslangToSpvTraverser::createSpvConstantFromConstUnionArray(glslang::TType const&, glslang::TConstUnionArray const&, int&, bool)
(anonymous namespace)::TGlslangToSpvTraverser::createSubgroupOperation(glslang::TOperator, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, glslang::TBasicType)
(anonymous namespace)::TGlslangToSpvTraverser::createUnaryMatrixOperation(spv::Op, (anonymous namespace)::(anonymous namespace)::OpDecorations&, unsigned int, unsigned int, glslang::TBasicType)
(anonymous namespace)::TGlslangToSpvTraverser::createUnaryOperation(glslang::TOperator, (anonymous namespace)::(anonymous namespace)::OpDecorations&, unsigned int, unsigned int, glslang::TBasicType, spv::Builder::AccessChain::CoherentFlags const&)
(anonymous namespace)::TGlslangToSpvTraverser::filterMember(glslang::TType const&)
(anonymous namespace)::TGlslangToSpvTraverser::getExtBuiltins(char const*)
(anonymous namespace)::TGlslangToSpvTraverser::getSymbolId(glslang::TIntermSymbol const*)
(anonymous namespace)::TGlslangToSpvTraverser::makeSmearedConstant(unsigned int, int)
(anonymous namespace)::TGlslangToSpvTraverser::multiTypeStore(glslang::TType const&, unsigned int)
(anonymous namespace)::TGlslangToSpvTraverser::translateArguments(glslang::TIntermAggregate const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, spv::Builder::AccessChain::CoherentFlags&)
(anonymous namespace)::TGlslangToSpvTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
(anonymous namespace)::TGlslangToSpvTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
(anonymous namespace)::TGlslangToSpvTraverser::visitBranch(glslang::TVisit, glslang::TIntermBranch*)
(anonymous namespace)::TGlslangToSpvTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
(anonymous namespace)::TGlslangToSpvTraverser::visitLoop(glslang::TVisit, glslang::TIntermLoop*)
(anonymous namespace)::TGlslangToSpvTraverser::visitSelection(glslang::TVisit, glslang::TIntermSelection*)
(anonymous namespace)::TGlslangToSpvTraverser::visitSwitch(glslang::TVisit, glslang::TIntermSwitch*)
(anonymous namespace)::TGlslangToSpvTraverser::visitSymbol(glslang::TIntermSymbol*)
(anonymous namespace)::TGlslangToSpvTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
(anonymous namespace)::TGlslangToSpvTraverser::~TGlslangToSpvTraverser()
(anonymous namespace)::TNoContractionAssigneeCheckingTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
(anonymous namespace)::TNoContractionAssigneeCheckingTraverser::visitSymbol(glslang::TIntermSymbol*)
(anonymous namespace)::TNoContractionAssigneeCheckingTraverser::~TNoContractionAssigneeCheckingTraverser()
(anonymous namespace)::TNoContractionPropagator::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
(anonymous namespace)::TNoContractionPropagator::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
(anonymous namespace)::TNoContractionPropagator::visitSymbol(glslang::TIntermSymbol*)
(anonymous namespace)::TNoContractionPropagator::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
(anonymous namespace)::TNoContractionPropagator::~TNoContractionPropagator()
(anonymous namespace)::TSymbolDefinitionCollectingTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
(anonymous namespace)::TSymbolDefinitionCollectingTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
(anonymous namespace)::TSymbolDefinitionCollectingTraverser::visitBranch(glslang::TVisit, glslang::TIntermBranch*)
(anonymous namespace)::TSymbolDefinitionCollectingTraverser::visitSymbol(glslang::TIntermSymbol*)
(anonymous namespace)::TSymbolDefinitionCollectingTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
(anonymous namespace)::TSymbolDefinitionCollectingTraverser::~TSymbolDefinitionCollectingTraverser()
(anonymous namespace)::TranslateLayoutDecoration(glslang::TType const&, glslang::TLayoutMatrix)
(anonymous namespace)::TranslateMemoryDecoration(glslang::TQualifier const&, std::__1::vector<spv::Decoration, std::__1::allocator<spv::Decoration> >&, bool)
(anonymous namespace)::WorkerContextEGL::makeCurrent()
(anonymous namespace)::WorkerContextEGL::unmakeCurrent()
(anonymous namespace)::WorkerContextEGL::~WorkerContextEGL()
(anonymous namespace)::freelist
(anonymous namespace)::heap
(anonymous namespace)::heap_mutex
(anonymous namespace)::isArithmeticOperation(glslang::TOperator)
(anonymous namespace)::isAssignOperation(glslang::TOperator)
(anonymous namespace)::kGLES1DrawFShaderFunctions
(anonymous namespace)::kGLES1DrawFShaderHeader
(anonymous namespace)::kGLES1DrawFShaderMain
(anonymous namespace)::kGLES1DrawFShaderMultitexturing
(anonymous namespace)::kGLES1DrawFShaderUniformDefs
(anonymous namespace)::kGLES1DrawVShader
(anonymous namespace)::kOpcodeTable
(anonymous namespace)::kOpcodeTableEntries
(anonymous namespace)::mangledkG
(anonymous namespace)::mangledkT1
(anonymous namespace)::mangledkT2
(anonymous namespace)::pygen_variable_caps_Addresses
(anonymous namespace)::pygen_variable_caps_AddressesPhysicalStorageBufferAddresses
(anonymous namespace)::pygen_variable_caps_AddressesVariablePointersVariablePointersStorageBuffer
(anonymous namespace)::pygen_variable_caps_AddressesVariablePointersVariablePointersStorageBufferPhysicalStorageBufferAddresses
(anonymous namespace)::pygen_variable_caps_CooperativeMatrixNV
(anonymous namespace)::pygen_variable_caps_DemoteToHelperInvocationEXT
(anonymous namespace)::pygen_variable_caps_DerivativeControl
(anonymous namespace)::pygen_variable_caps_DeviceEnqueue
(anonymous namespace)::pygen_variable_caps_FragmentMaskAMD
(anonymous namespace)::pygen_variable_caps_FragmentShaderSampleInterlockEXTFragmentShaderPixelInterlockEXTFragmentShaderShadingRateInterlockEXT
(anonymous namespace)::pygen_variable_caps_Geometry
(anonymous namespace)::pygen_variable_caps_GeometryStreams
(anonymous namespace)::pygen_variable_caps_GroupNonUniform
(anonymous namespace)::pygen_variable_caps_GroupNonUniformArithmeticGroupNonUniformClusteredGroupNonUniformPartitionedNV
(anonymous namespace)::pygen_variable_caps_GroupNonUniformBallot
(anonymous namespace)::pygen_variable_caps_GroupNonUniformPartitionedNV
(anonymous namespace)::pygen_variable_caps_GroupNonUniformQuad
(anonymous namespace)::pygen_variable_caps_GroupNonUniformShuffle
(anonymous namespace)::pygen_variable_caps_GroupNonUniformShuffleRelative
(anonymous namespace)::pygen_variable_caps_GroupNonUniformVote
(anonymous namespace)::pygen_variable_caps_Groups
(anonymous namespace)::pygen_variable_caps_ImageFootprintNV
(anonymous namespace)::pygen_variable_caps_ImageQuery
(anonymous namespace)::pygen_variable_caps_IntegerFunctions2INTEL
(anonymous namespace)::pygen_variable_caps_Kernel
(anonymous namespace)::pygen_variable_caps_KernelImageQuery
(anonymous namespace)::pygen_variable_caps_LiteralSampler
(anonymous namespace)::pygen_variable_caps_Matrix
(anonymous namespace)::pygen_variable_caps_MeshShadingNV
(anonymous namespace)::pygen_variable_caps_NamedBarrier
(anonymous namespace)::pygen_variable_caps_PipeStorage
(anonymous namespace)::pygen_variable_caps_Pipes
(anonymous namespace)::pygen_variable_caps_RayQueryProvisionalKHR
(anonymous namespace)::pygen_variable_caps_RayTracingNVRayTracingProvisionalKHR
(anonymous namespace)::pygen_variable_caps_RayTracingNVRayTracingProvisionalKHRRayQueryProvisionalKHR
(anonymous namespace)::pygen_variable_caps_Shader
(anonymous namespace)::pygen_variable_caps_ShaderClockKHR
(anonymous namespace)::pygen_variable_caps_SparseResidency
(anonymous namespace)::pygen_variable_caps_SubgroupAvcMotionEstimationINTEL
(anonymous namespace)::pygen_variable_caps_SubgroupAvcMotionEstimationINTELSubgroupAvcMotionEstimationChromaINTEL
(anonymous namespace)::pygen_variable_caps_SubgroupAvcMotionEstimationINTELSubgroupAvcMotionEstimationIntraINTEL
(anonymous namespace)::pygen_variable_caps_SubgroupBallotKHR
(anonymous namespace)::pygen_variable_caps_SubgroupBufferBlockIOINTEL
(anonymous namespace)::pygen_variable_caps_SubgroupDispatch
(anonymous namespace)::pygen_variable_caps_SubgroupImageBlockIOINTEL
(anonymous namespace)::pygen_variable_caps_SubgroupImageMediaBlockIOINTEL
(anonymous namespace)::pygen_variable_caps_SubgroupShuffleINTEL
(anonymous namespace)::pygen_variable_caps_SubgroupVoteKHR
(anonymous namespace)::pygen_variable_exts_SPV_AMD_shader_ballot
(anonymous namespace)::pygen_variable_exts_SPV_AMD_shader_fragment_mask
(anonymous namespace)::pygen_variable_exts_SPV_EXT_demote_to_helper_invocation
(anonymous namespace)::pygen_variable_exts_SPV_EXT_fragment_shader_interlock
(anonymous namespace)::pygen_variable_exts_SPV_GOOGLE_decorate_stringSPV_GOOGLE_hlsl_functionality1
(anonymous namespace)::pygen_variable_exts_SPV_GOOGLE_hlsl_functionality1
(anonymous namespace)::pygen_variable_exts_SPV_KHR_ray_query
(anonymous namespace)::pygen_variable_exts_SPV_KHR_shader_ballot
(anonymous namespace)::pygen_variable_exts_SPV_KHR_shader_clock
(anonymous namespace)::pygen_variable_exts_SPV_KHR_subgroup_vote
(anonymous namespace)::pygen_variable_exts_SPV_NV_cooperative_matrix
(anonymous namespace)::pygen_variable_exts_SPV_NV_mesh_shader
(anonymous namespace)::pygen_variable_exts_SPV_NV_ray_tracingSPV_KHR_ray_tracing
(anonymous namespace)::pygen_variable_exts_SPV_NV_ray_tracingSPV_KHR_ray_tracingSPV_KHR_ray_query
(anonymous namespace)::pygen_variable_exts_SPV_NV_shader_image_footprint
(anonymous namespace)::pygen_variable_exts_SPV_NV_shader_subgroup_partitioned
(anonymous namespace)::tokens
(anonymous namespace)::unmangledkG
(anonymous namespace)::unmangledkT1
(anonymous namespace)::unmangledkT2
(anonymous namespace)::vendor_tools
(color);
(const float)
(const int)
(const uint)
(const yuvCscStandardEXT)
(except for OpLine, which can be mixed with OpPhi).
(field '
(internal function)
(m[
(member index
(must be 0 or 1)
(must be 0, 1 or 2)
(n,
(not another case construct, corresponding merge, outer loop merge or outer loop continue)
(null)
(or requires extension or capability)
(or requires extension)
(q7
(structure contains a sampler)
(symbol id
(type =
(u)int16 types can only be in uniform block or buffer storage
(u)int8 types can only be in uniform block or buffer storage
(u_source_texture, v_texcoord);
(using array)
(~
)
) != v_texcoord)
) ->
) : (
) ? (
) at location
) buffer
) can only be formed between a block and a loop header.
) cannot be applied to function id
) cannot have any Location or Component decorations
) const bool
) does not match block's predecessor count (
) does not match the type that results from indexing into the Composite (Op
) does not match the type that results from indexing into the base <id> (Op
) does not match the type that results from indexing into the composite (Op
) exceed the maximum interleaved components (
) exceed the maximum separate components (
) exceeds the limit (
) for
) has exceeded the limit (
) may not be decorated with Import Linkage type.
) may not be targeted by both an OpEntryPoint instruction and an OpFunctionCall instruction.
) must have a LinkageAttributes decoration with the Import Linkage type.
) not handled
) out
) out;
) requires SPIR-V version
) requires one of these extensions:
) used for OpTypeFloat.
) used for OpTypeInt.
) with the following call chain:
)!E
)(isNonZero);}
)))]
)+>
), 0.0, float(
), while in source code it is (
), words(
).length())
)6>
)7
)8
):
): error at column
)E?
)FB
)L=
)R.
)`@
)d@
)l,
)r7
)u7
)xG
*
*%>
*)=
*/.
*49
*7
*8
*=
*D<
*FE
*K+
*N+
*f0
*h4
*i7
*w/
+
+"G
+#>
++)
+.>
+1.#INF
+7
+7E
+7F
+8
+9>
+=
+G?
+X5
+a<
+b,
+zT
+{7
+}7
,
, 0,
, HLSL parsing failed.
, ID
, New:
, OpTypeRuntimeArray must only be used for the last member of an OpTypeStruct
, OpTypeStruct must not contain an opaque type.
, OpenGL
, alignment=
, binding =
, but does not immediately precede it in the OpSwitch's target list
, but its merge block
, but not via a structured exit
, but with an element size of
, components (1/4 stride) needed are
, expected
, f16vec
, float
, float16_t
, gl_MaxTransformFeedbackInterleavedComponents is
, id(
, int, int, int, int, int
, ivec
, local_size_y=
, local_size_z=
, minimum stride needed:
, operation at
, or }
, out
, since it is not specificed as taking an
, std140) uniform
, which cannot be used with the current execution model:
, which cannot be used with the current execution modes:
, xfb_stride
, zero found
,(>
,3
,6
,7
,8
,<,
,<V
,>
,EF
,K
,M-
,O-
,\5
,f16vec
,f16vec4
,float,float
,float16_t,float16_t
,int
,int);
,ivec
,ivec2
,out
,t:
,vec
,vec4
,|O
,~5
-
-&>
-',
--)
--------
-1.#INF
-1>
-7
-8
-<>
-=
->
-> $$ =
-?F
-IZ
-N0
-bit integer for the addressing model used in the module)
-component vector of
-element array of
-tx-struct
-~/
-G
.
. >
. Found
. This may be a bug in the validator.
.-
.-5
...
........
../../third_party/SPIRV-Tools/src/source/opt/type_manager.cpp
../../third_party/angle/src/libANGLE/Buffer.cpp
../../third_party/angle/src/libANGLE/GLES1Renderer.cpp
../../third_party/angle/src/libANGLE/Program.cpp
../../third_party/angle/src/libANGLE/ProgramPipeline.cpp
../../third_party/angle/src/libANGLE/Texture.cpp
../../third_party/angle/src/libANGLE/Thread.cpp
../../third_party/angle/src/libANGLE/renderer/gl/BlitGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/BufferGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/FenceNVGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/FramebufferGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/QueryGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/RenderbufferGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/SyncGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/TextureGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/VertexArrayGL.cpp
../../third_party/angle/src/libANGLE/renderer/gl/renderergl_utils.cpp
../../third_party/angle/src/libANGLE/renderer/null/BufferNULL.cpp
../../third_party/angle/src/libANGLE/renderer/null/FramebufferNULL.cpp
../../third_party/angle/src/libANGLE/renderer/renderer_utils.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/ContextVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/FramebufferVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/GlslangWrapperVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/ImageVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/PersistentCommandPool.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/ProgramVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/RendererVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/SemaphoreVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/SurfaceVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/SyncVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/TextureVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/UtilsVk.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/vk_cache_utils.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/vk_helpers.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/vk_utils.cpp
../../third_party/angle/src/libANGLE/renderer/vulkan/xcb/WindowSurfaceVkXcb.cpp
./.
./vk_swiftshader_icd.json
.0 (ANGLE
.7
.8
.9
.<<
.GE
.H=
.I0
.[E
.`@
.length
.length() - 1
.length() on vectors and matrices
.pK
.s7
.tG
.xfbActiveUnpaused != 0){
.xfbBufferOffsets[
.xfbVerticesPerDraw) *
.{G
.|7
.|9
/
/)>
/+5
/,5
/.
// BEGIN: Generated code for array bounds clamping
// BEGIN: Generated code for built-in function emulation
// END: Generated code for array bounds clamping
// END: Generated code for built-in function emulation
// OpModuleProcessed
// Texture units ///////////////////////////////////////////////////////////////uniform bool enable_texture_2d[kMaxTexUnits];uniform bool enable_texture_cube_map[kMaxTexUnits];// These are not arrays because hw support for arrays// of samplers is rather lacking.uniform sampler2D tex_sampler0;uniform samplerCube tex_cube_sampler0;uniform sampler2D tex_sampler1;uniform samplerCube tex_cube_sampler1;uniform sampler2D tex_sampler2;uniform samplerCube tex_cube_sampler2;uniform sampler2D tex_sampler3;uniform samplerCube tex_cube_sampler3;uniform int texture_format[kMaxTexUnits];uniform int texture_env_mode[kMaxTexUnits];uniform int combine_rgb[kMaxTexUnits];uniform int combine_alpha[kMaxTexUnits];uniform int src0_rgb[kMaxTexUnits];uniform int src0_alpha[kMaxTexUnits];uniform int src1_rgb[kMaxTexUnits];uniform int src1_alpha[kMaxTexUnits];uniform int src2_rgb[kMaxTexUnits];uniform int src2_alpha[kMaxTexUnits];uniform int op0_rgb[kMaxTexUnits];uniform int op0_alpha[kMaxTexUnits];uniform int op1_rgb[kMaxTexUnits];uniform int op1_alpha[kMaxTexUnits];uniform int op2_rgb[kMaxTexUnits];uniform int op2_alpha[kMaxTexUnits];uniform vec4 texture_env_color[kMaxTexUnits];uniform float texture_env_rgb_scale[kMaxTexUnits];uniform float texture_env_alpha_scale[kMaxTexUnits];uniform bool point_sprite_coord_replace[kMaxTexUnits];// Vertex attributes////////////////////////////////////////////////////////////in vec4 pos_varying;in vec3 normal_varying;in vec4 color_varying;flat in vec4 color_varying_flat;in vec4 texcoord0_varying;in vec4 texcoord1_varying;in vec4 texcoord2_varying;in vec4 texcoord3_varying;// Alpha test///////////////////////////////////////////////////////////////////uniform bool enable_alpha_test;uniform int alpha_func;uniform float alpha_test_ref;// Shading: flat shading, lighting, and materials///////////////////////////////uniform bool shade_model_flat;uniform bool enable_lighting;uniform bool enable_color_material;uniform vec4 material_ambient;uniform vec4 material_diffuse;uniform vec4 material_specular;uniform vec4 material_emissive;uniform float material_specular_exponent;uniform vec4 light_model_scene_ambient;uniform bool light_model_two_sided;uniform bool light_enables[kMaxLights];uniform vec4 light_ambients[kMaxLights];uniform vec4 light_diffuses[kMaxLights];uniform vec4 light_speculars[kMaxLights];uniform vec4 light_positions[kMaxLights];uniform vec3 light_directions[kMaxLights];uniform float light_spotlight_exponents[kMaxLights];uniform float light_spotlight_cutoff_angles[kMaxLights];uniform float light_attenuation_consts[kMaxLights];uniform float light_attenuation_linears[kMaxLights];uniform float light_attenuation_quadratics[kMaxLights];// Fog /////////////////////////////////////////////////////////////////////////uniform bool enable_fog;uniform int fog_mode;uniform float fog_density;uniform float fog_start;uniform float fog_end;uniform vec4 fog_color;// User clip plane /////////////////////////////////////////////////////////////uniform bool enable_clip_planes;uniform bool clip_plane_enables[kMaxClipPlanes];uniform vec4 clip_planes[kMaxClipPlanes];// Point rasterization//////////////////////////////////////////////////////////uniform bool point_rasterization;uniform bool point_sprite_enabled;// GL_OES_draw_texture//////////////////////////////////////////////////////////uniform bool enable_draw_texture;// Outgoing fragment////////////////////////////////////////////////////////////out vec4 frag_color;
/4>
/7
/8
/;E
/=
/=U
/?>
/NZ
/Z5
/a@
/e5
/nG
/proc/self/exe
/x<
/|7
0
0#>
0/B
00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899<!A
00A
00B
00C
00D
00E
00F
00G
00H
00I
00J
00K
00L
00M
00N
00O
00P
00Q
00R
00S
00T
00U
00V
00W
00X
00Y
00Z
00a
00b
00c
00d
00e
00f
00g
00h
00i
00j
00k
00l
00m
00n
00o
00p
00q
00r
00s
00t
00u
00v
00w
00x
00y
00z
0123456789
0123456789abcdefABCDEFxX+-pPiInN
01A
01B
01C
01D
01E
01F
01G
01H
01I
01J
01K
01L
01M
01N
01O
01P
01Q
01R
01S
01T
01U
01V
01W
01X
01Y
01Z
01a
01b
01c
01d
01e
01f
01g
01h
01i
01j
01k
01l
01m
01n
01o
05
06
07
08
0?
0B
0C
0E
0J<
0U[
0uG
1
1,>
1.#IND
1.2.11
1.5 (ANGLE 2.1.0.ea8043b73f93)
1.T
1/4 stride is too large:
10B
10C
10D
10Dx4
10E
10F
16-bit  literal
16-bit arrays not supported
16-bit hexadecimal literal
16-bit integer literal
16-bit literal
16-bit octal literal
16-bit or 32-bit
16-bit signed integer
16-bit signed integer vector
16-bit unsigned integer
16-bit unsigned integer literal
16-bit unsigned integer vector
16-bit vectors only take vector types
17
17>
18
1B
1C[
1R.
1S5
1\>
1`G
1d,
1f,
1i5
1p,
1pG
1u:
1|N
2
2 Entry points cannot share the same name and ExecutionMode.
2&>
2.1.0.ea8043b73f93
2/.
209
20B
20C
20D
20E
20F
255.0
27
28
2<E
2@U
2BD
2KS
2c,
2fG
2iG
2s9
2t5
2v/
2x\
2~Y
3
3$>
3/>
30
300 es
30B
30C
30D
30E
30F
32-bit signed integer
32-bit signed integer vector
32-bit signed literal
32-bit unsigned integer
32-bit unsigned integer vector
330
33333333
37
38
3:>
3:E
3;[
3D=
3E?
3K+
3S[
3W5
3`@
3d5
3fU
3j,
3yG
3{G
3G
4
4)>
46
47
48
4;,
4<
4@<
4C
4E
4Y[
4[5
4^5
4b@
4cG
4o5
4p5
4r7
4s5
4u7
4}N
5
5'>
50B
52>
57
58
5=>
5DB
5GZ
5LW
5T8
5W
5j5
5k&
5w7
5y7
6
6!>
6+5
60B
64-bit hexadecimal literal
64-bit integer
64-bit integer literal
64-bit integer vector
64-bit literal
64-bit octal literal
64-bit unsigned integer
64-bit unsigned integer literal
64-bit unsigned integer vector
67
68
6>
6A>
6EF
6VG
6h4
6j5
6j<
6p7
6pG
6s:
6t:
7
7*>
7-6
7..
70B
75>
77
78
7@>
7AD
7SG
7X5
7[E
7_T
7lG
8
8$>
8,,
8- or 16-bit loads must be a scalar, vector or matrix type
8- or 16-bit stores must be a scalar, vector or matrix type
8- or 16-bit types can only be used with width-only conversions
8-5
8-bit arrays not supported
8-bit signed integer
8-bit signed integer vector
8-bit unsigned integer
8-bit unsigned integer vector
8-bit vectors only take vector types
80
82T
86
87
88
8>
8h4
8l,
8v/
8xG
89
9
9">
9,5
9->
90B
93
97
98
98>
9lG
9m5
9o5
9s7
9t5
9u[
:
: "
: 64-bit atomics require the Int64Atomics capability
: Component Count must be positive
: Dependency
: DontFlatten
: DontUnroll
: Execution scope is limited to Subgroup or Workgroup
: Flatten
: Function storage class forbidden when the Shader capability is declared.
: MakeAvailableKHR Memory Semantics also requires either Release or AcquireRelease Memory Semantics
: MakeVisibleKHR Memory Semantics also requires either Acquire or AcquireRelease Memory Semantics
: Memory Scope QueueFamilyKHR requires capability
: Memory Semantics MakeAvailableKHR requires capability
: Memory Semantics MakeVisibleKHR requires capability
: Memory Semantics OutputMemoryKHR requires capability
: Memory Semantics Release and AcquireRelease cannot be used for operand Unequal
: Memory Semantics UniformMemory requires capability Shader
: Memory Semantics Volatile requires capability VulkanMemoryModelKHR
: Memory Semantics can have at most one of the following bits set: Acquire, Release, AcquireRelease or SequentiallyConsistent
: Unroll
: Vulkan specification requires Memory Semantics to have one of the following bits set: Acquire, Release, AcquireRelease or SequentiallyConsistent
: according to the Vulkan spec atomic Result Type needs to be a 32-bit int scalar type
: can't specify both Aliased and Restrict for PhysicalStorageBufferEXT pointer.
: can't specify both AliasedPointerEXT and
: can't specify both AliasedPointerEXT and RestrictPointerEXT for PhysicalStorageBufferEXT pointer.
: direct index for structure
: expected
: expected Aliased or Restrict for PhysicalStorageBufferEXT pointer.
: expected AliasedPointerEXT or RestrictPointerEXT for
: expected AliasedPointerEXT or RestrictPointerEXT for PhysicalStorageBufferEXT pointer.
: expected Comparator to be of type Result Type
: expected Memory Semantics to be a 32-bit int
: expected Memory Semantics to include a Vulkan-supported storage class
: expected Memory Semantics to include a storage class
: expected Named Barrier to be of type OpTypeNamedBarrier
: expected Pointer to be a pointer to int or float
: expected Pointer to be of type OpTypePointer
: expected Pointer to point to a value of 32-bit int type
: expected Pointer to point to a value of type Result Type
: expected Result Type to be OpTypeNamedBarrier
: expected Result Type to be bool scalar type
: expected Result Type to be int or float scalar type
: expected Result Type to be int scalar type
: expected Result Type to be void
: expected Stream to be constant instruction
: expected Stream to be int scalar
: expected Subgroup Count to be a 32-bit int
: expected Value to be of type Result Type
: expected Value type and the type pointed to by Pointer to be the same
: expected more operands after
: expected no more operands after
: expected operand Size is a
: expected scope to be a 32-bit int
: in Vulkan 1.0 environment Memory Scope is limited to
: in Vulkan 1.1 and 1.2 environment Memory Scope is limited
: in Vulkan environment Execution Scope is limited to
: in Vulkan environment Execution scope is limited to
: in Vulkan environment, Memory Scope cannot be CrossDevice
: in WebGPU environment Execution Scope is limited to
: in WebGPU environment Memory Scope is limited to
: in WebGPU environment, Workgroup Execution Scope is limited to GLCompute execution model
: in WebGPU environment, Workgroup Memory Scope is limited to GLCompute execution model
: missing
: no shortcircuit
: operand
: storage class forbidden by universal validation rules.
: storage class must be Function, Workgroup, CrossWorkGroup or Generic in the OpenCL environment.
: truncated
:"2
:%d
:'>
:/.
:3
:49
:7
:8
:>
:?
:ANGLE_base_vertex_base_instance:
:ANGLE_multi_draw:
:APPLE_clip_distance:
:ARB_texture_rectangle:
:ARM_shader_framebuffer_fetch:
:EXT_YUV_target:
:EXT_blend_func_extended:
:EXT_draw_buffers:
:EXT_frag_depth:
:EXT_geometry_shader:
:EXT_gpu_shader5:
:EXT_shader_framebuffer_fetch:
:EXT_shader_texture_lod:
:EXT_texture_cube_map_array:
:FragmentPrecisionHigh:
:MaxAtomicCounterBindings:
:MaxAtomicCounterBufferSize:
:MaxCallStackDepth:
:MaxClipDistances
:MaxCombinedAtomicCounterBuffers:
:MaxCombinedAtomicCounters:
:MaxCombinedImageUniforms:
:MaxCombinedShaderOutputResources:
:MaxCombinedTextureImageUnits:
:MaxComputeAtomicCounterBuffers:
:MaxComputeAtomicCounters:
:MaxComputeImageUniforms:
:MaxComputeTextureImageUnits:
:MaxComputeUniformComponents:
:MaxComputeWorkGroupCountX:
:MaxComputeWorkGroupCountY:
:MaxComputeWorkGroupCountZ:
:MaxComputeWorkGroupSizeX:
:MaxComputeWorkGroupSizeY:
:MaxComputeWorkGroupSizeZ:
:MaxDrawBuffers:
:MaxDualSourceDrawBuffers:
:MaxExpressionComplexity:
:MaxFragmentAtomicCounterBuffers:
:MaxFragmentAtomicCounters:
:MaxFragmentImageUniforms:
:MaxFragmentInputVectors:
:MaxFragmentUniformVectors:
:MaxFunctionParameters:
:MaxGeometryAtomicCounterBuffers:
:MaxGeometryAtomicCounters:
:MaxGeometryImageUniforms:
:MaxGeometryInputComponents:
:MaxGeometryOutputComponents:
:MaxGeometryOutputVertices:
:MaxGeometryShaderInvocations:
:MaxGeometryShaderStorageBlocks:
:MaxGeometryTextureImageUnits:
:MaxGeometryTotalOutputComponents:
:MaxGeometryUniformBlocks:
:MaxGeometryUniformComponents:
:MaxImageUnits:
:MaxProgramTexelOffset:
:MaxProgramTextureGatherOffset:
:MaxTextureImageUnits:
:MaxVaryingVectors:
:MaxVertexAtomicCounterBuffers:
:MaxVertexAtomicCounters:
:MaxVertexAttribs:
:MaxVertexImageUniforms:
:MaxVertexOutputVectors:
:MaxVertexTextureImageUnits:
:MaxVertexUniformVectors:
:MaxViewsOVR:
:MinProgramTexelOffset:
:MinProgramTextureGatherOffset:
:NV_EGL_stream_consumer_external:
:NV_draw_buffers:
:NV_shader_framebuffer_fetch:
:OES_EGL_image_external:
:OES_EGL_image_external_essl3:
:OES_standard_derivatives:
:OES_texture_3D:
:OES_texture_cube_map_array:
:OVR_multiview2:
:OVR_multiview:
:T5
:WEBGL_debug_shader_precision:
:Z,
:c@
:o7
:p&
:t<
:z7
;
; 0x
; Bound:
; Generator:
; IR after last pass
; IR before pass
; SPIR-V
; Schema:
; Version:
; may be removed in future release
;%>
;+>
;0>
;7
;8
;;>
;;E
;>
;e[
;g0
;g5
;oG
;pK
;u:
;u=
;|/
;7
<
<!A
<*>
<0.
<6
<7
<8
<<
<<=
<=
<C&
<Command Buffer Label Hierarchy:>
<K+
<Queue Label Hierarchy:>
<Unrecognized>
<]5
<aW
<bad token>
<buffer> must be non null
<buftype> EGL_IOSURFACE_ANGLE requires the EGL_ANGLE_iosurface_client_buffer extension.
<buftype> doesn't support iosurface plane
<buftype> doesn't support rectangle texture targets
<buftype> doesn't support setting GL colorspace
<buftype> doesn't support setting texture offset
<buftype> doesn't support texture internal format
<buftype> doesn't support texture type
<e7
<float
<int
<o,
<uint
<unknown op>
<validateNullNodes>
<validateSingleParent>
<|O
=
= false;
=(>
=+5
=.9
=3>
=7
=8
==
=>>
=V
=f@
=j7
=jW
=n&
={7
=~/
>
> is later referenced by
> is used by entry point '
> which is called with execution model
>">
>, but is not listed as an interface
>7
>8
>=
>>
>>=
>@9
>BD
>W
>b@
>cQ
>h4
>q7
>wG
>zG
>{7
?
?+>
?0
?6>
?7
?79
?8
?:
?:E
?GE
?Q2
?S5
?c@
?f5
?m,
?r7
?u7
?{7
?}9
@
@ 8
@!8
@!E
@"8
@#1,>S,
@#2,>S,,
@#8
@$8
@%8
@%>
@&8
@'8
@(8
@)8
@*8
@+8
@,8
@-8
@-B
@.8
@/8
@08
@1,S,>S,,
@18
@2,S,>S,,,
@28
@38
@4
@4,>S,,
@4,S,>S,,,
@48
@5
@58
@6
@68
@7
@78
@8
@88
@98
@:8
@;,
@;8
@<8
@=8
@>
@>+
@>8
@?
@?8
@@
@@ XFB-DECL @@
@@ XFB-OUT @@
@@8
@@ewNV
@A8
@B8
@B>
@C8
@D&
@D8
@E8
@EF
@F8
@G8
@H8
@I8
@J8
@K
@K8
@L8
@M8
@N8
@O8
@P8
@Q8
@QW
@R8
@S8
@T8
@U8
@V8
@W8
@X8
@Y8
@YG
@Z8
@[8
@[E
@\8
@]8
@^8
@_8
@`8
@a8
@b8
@c8
@count
@d8
@e8
@entryPointOutput
@f8
@finitetmp
@g8
@gl_SubgroupInvocationID
@gl_SubgroupSize
@h8
@i8
@j8
@k8
@l8
@m8
@n8
@o8
@p8
@pG
@patchConstantOutput
@patchConstantResult
@position
@q8
@q=
@r8
@s8
@s:
@sampleCount
@sampleResultShadow
@sampleStructTemp
@t8
@t:
@this
@u8
@v8
@w8
@x8
@y8
@z8
@{8
@|8
@}8
@~8
@7
@8
A
A BuiltIn variable (id
A FunctionCall must happen within a function body.
A block must end with a branch instruction.
A buffer must be bound.
A device memory allocation has failed
A fence or query has not yet completed
A function (
A function must begin with a label
A host memory allocation has failed
A module-scope OpVariable with initialization value cannot be marked with the Import Linkage Type.
A pool allocation has failed due to fragmentation of the pool's memory
A pool memory allocation has failed
A program must be bound.
A program object is active for at least one, but not all of the shader stages that were present when the program was linked.
A renderbuffer must be bound.
A requested extension is not supported
A requested feature is not supported
A requested format is not supported on this device
A requested layer is not present or could not be loaded
A return array was too small for the result
A surface has changed in such a way that it is no longer compatible with the swapchain
A surface is no longer available
A swapchain no longer matches the surface properties exactly, but can still be used to present to the surface successfully
A texture must be bound.
A transform feedback buffer that would be written to is also bound to a non-transform-feedback target, which would cause undefined behavior.
A wait operation has not completed in the specified time
A#>
A.>
A0B
A4
A7
A8
A9>
AB&
ABGR
ACCSTRUCTEXT
ACCSTRUCTNV
ADD_ASSIGN
AF?
AM
AMPERSAND
AND_ASSIGN
AND_OP
ANGLE (
ANGLE Display::initialize error
ANGLE Pipeline Cache:
ANGLEAtomicCounters
ANGLEClipDistance
ANGLECubeMapCoordTransform
ANGLECubeMapCoordTransformImplicit
ANGLEDepthRangeParams
ANGLEGetDisplayPlatform
ANGLELineRasterEmulation
ANGLEPlatformCurrent()
ANGLEPosition
ANGLEResetDisplayPlatform
ANGLEUniformBlock
ANGLEUniforms
ANGLE_DEFAULT_PLATFORM
ANGLE_FEATURE_OVERRIDES_DISABLED
ANGLE_FEATURE_OVERRIDES_ENABLED
ANGLE_PREFERRED_DEVICE
ANGLE_atomic_uint
ANGLE_multiview is not available.
ARB_blend_func_extended does not pass the tests
ARGB
ATOMIC_UINT
ATTRIBUTE
AbsISubINTEL
AbsUSubINTEL
Absolute value
AcQ
Acceleration Structure
According to the
According to the Vulkan spec BuiltIn
According to the Vulkan spec BuiltIn HelperInvocation variable needs to be a bool scalar.
According to the Vulkan spec BuiltIn InvocationId variable needs to be a 32-bit int scalar.
According to the Vulkan spec BuiltIn PatchVertices variable needs to be a 32-bit int scalar.
According to the Vulkan spec BuiltIn PointCoord variable needs to be a 2-component 32-bit float vector.
According to the Vulkan spec BuiltIn PointSize variable needs to be a 32-bit float scalar.
According to the Vulkan spec BuiltIn Position variable needs to be a 4-component 32-bit float vector.
According to the Vulkan spec BuiltIn PrimitiveId variable needs to be a 32-bit int scalar.
According to the Vulkan spec BuiltIn SampleId variable needs to be a 32-bit int scalar.
According to the Vulkan spec BuiltIn SampleMask variable needs to be a 32-bit int array.
According to the Vulkan spec BuiltIn SamplePosition variable needs to be a 2-component 32-bit float vector.
According to the Vulkan spec BuiltIn TessCoord variable needs to be a 3-component 32-bit float vector.
According to the Vulkan spec BuiltIn TessLevelOuter variable needs to be a 2-component 32-bit float array.
According to the Vulkan spec BuiltIn TessLevelOuter variable needs to be a 4-component 32-bit float array.
According to the WebGPU spec BuiltIn LocalInvocationIndex variable needs to be a 32-bit int.
According to the WebGPU spec BuiltIn Position variable needs to be a 4-component 32-bit float vector.
Acos
Acosh
Active atomic counter resources are not assigned name strings.
Active draw buffers with missing fragment shader outputs.
AdG
AddAndTrueToLoopCondition.cpp
Additional GL error
Addressing model must be Logical for WebGPU environment.
Addressing model must be Physical32 or Physical64
Adreno (TM) 418
Adreno (TM) 530
Adreno (TM) 540
Advanced Micro Devices
Aliased
AliasedPointer
AliasedPointerEXT
Aligned
AlignedAlloc
Alignment
AlignmentId
All Mac drivers do not handle struct scopes correctly. This workaround overwrites a structname with a unique prefix.
All OpSampledImage instructions must be in the same block in which their Result <id> are consumed. OpSampledImage Result Type <id> '
All OpVariable instructions in a function must be the first instructions in the first block.
All contexts within a share group must be created with the same value of EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE.
All variables in the following storage classes must have an
AllMemoryBarrier
AllMemoryBarrierWithGroupSync
AllocateAndBindBufferOrImageMemory
AllocateCurrentThread
Allocating a variable containing a 16-bit element in
Allocating a variable containing a 8-bit element in
Allocations
AllowRecip
Always call useProgram after a successful link to avoid a driver bug
Always rewrite vec/mat constructors to be consistent
An active buffer is mapped
An enabled vertex array has no buffer and no pointer.
An enabled vertex array has no buffer.
An event is signaled
An event is unsignaled
An external handle is not a valid handle of the specified type
AnyHitKHR
AnyHitNV
AppendStructuredBuffer
Application
Apr
April
Array access is out of bounds, array size is
Array constructor argument has an incorrect type
Array length
Array size
Array size or input primitive declaration doesn't match the size of earlier sized array inputs.
ArrayBoundsClamper.cpp
ArrayLength
ArrayStride
ArrayString(unsigned int)
Arrays not supported in texture template types
Asin
Asinh
AsyncWaitableEvent::wait
AsyncWorkerPool::RunTask
At least one enabled attribute must have a divisor of zero.
At least one shader must specify a layout(max_primitives = value)
At least one shader must specify a layout(max_vertices = value)
At least one shader must specify an input layout primitive
At least one shader must specify an output layout primitive
At least one shader must specify an output layout(vertices=...)
At5
Atan
Atan2
Atanh
AtomicCompareExchange
AtomicCompareExchangeWeak
AtomicCounterAdd
AtomicCounterAnd
AtomicCounterCompSwap
AtomicCounterDecrement
AtomicCounterExchange
AtomicCounterIncrement
AtomicCounterMax
AtomicCounterMemory
AtomicCounterMin
AtomicCounterOr
AtomicCounterSubtract
AtomicCounterXor
AtomicFlagClear
AtomicFlagTestAndSet
AtomicIAdd
AtomicIDecrement
AtomicIIncrement
AtomicISub
AtomicSMax
AtomicSMin
AtomicStorage
AtomicStorageOps
AtomicType
AtomicUMax
AtomicUMin
Attached compute shader is not compiled.
Attachment type must be compatible with attachment object.
Attempt to blit from a multisampled framebuffer and the bounds don't match with the draw framebuffer.
Attempt to blit from a multisampled framebuffer and the bounds or format of the color buffer don't match with the draw framebuffer.
Attempt to delete an active transform feedback.
Attempt to initialize readonly parameter
Attempt to read from a missing color attachment of a complete framebuffer.
Attempt to read from a missing depth/stencil attachment of a complete framebuffer.
Attempt to read from a multi-view framebuffer.
Attempt to write to a multi-view framebuffer.
Attempted to flush a buffer not mapped for explicit flushing.
Attempted to flush buffer object zero.
Attempted to get underlying data type via member index for non-struct type.
Attempted to map buffer object zero.
Attempting to blit and the read and draw buffer formats don't match.
Attempting to draw without a program
Attribute '
Attribute (
Attribute EGL_CONTEXT_BIND_GENERATES_RESOURCE_CHROMIUM requires EGL_CHROMIUM_create_context_bind_generates_resource.
Attribute EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE requires EGL_ANGLE_create_context_client_arrays.
Attribute EGL_CONTEXT_OPENGL_BACKWARDS_COMPATIBLE_ANGLE requires EGL_ANGLE_create_context_backwards_compatible.
Attribute EGL_CONTEXT_PRIORITY_LEVEL_IMG must be one of: EGL_CONTEXT_PRIORITY_LOW_IMG, EGL_CONTEXT_PRIORITY_MEDIUM_IMG, or EGL_CONTEXT_PRIORITY_HIGH_IMG.
Attribute EGL_CONTEXT_PRIORITY_LEVEL_IMG requires extension EGL_IMG_context_priority.
Attribute EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE requires EGL_ANGLE_program_cache_control.
Attribute EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE requires EGL_ANGLE_create_context_webgl_compatibility.
Attribute EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE requires EGL_ANGLE_display_texture_share_group.
Attribute EGL_EXTENSIONS_ENABLED_ANGLE requires EGL_ANGLE_create_context_extensions_enabled.
Attribute EGL_POWER_PREFERENCE_ANGLE requires EGL_ANGLE_power_preference.
Attribute EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE requires EGL_ANGLE_robust_resource_initialization.
Attribute must be EGL_TRUE or EGL_FALSE.
AttributeMap.cpp
Attributes that begin with 'gl_' are not allowed.
Attributes that begin with 'webgl_', or '_webgl_' are not allowed.
Aug
August
Auxiliary qualifiers (centroid, patch, and sample) must appear before storage and precision qualifiers
AxY
Ay9
A{/
B
B(>
B-5
B0B
B4
B7
B8
BANG
BD
BFIU
BK<
BOOL
BOOLCONSTANT
BQ5
BREAK
BVEC2
BVEC3
BVEC4
B\G
Back-edges (
Bad access.
Bad aggregation op
Bad allocation.
Bad attribute.
Bad config.
Bad context.
Bad current surface.
Bad device.
Bad display.
Bad match.
Bad native pixmap.
Bad native window.
Bad parameter.
Bad platform type.
Bad state.
Bad stream state
Bad stream.
Bad surface.
Bad unary op
BaryCoordNoPersp
BaryCoordNoPerspCentroid
BaryCoordNoPerspSample
BaryCoordPullModel
BaryCoordSmooth
BaryCoordSmoothCentroid
BaryCoordSmoothSample
Base level must be 0.
Base level must be at least 0.
Bd
BeginInvocationInterlockEXT
Binary blob no longer available in cache (removed by a thread?)
Binding layout qualifier
BitFieldInsert
BitFieldSExtract
BitFieldUExtract
BitPiece
BitReverse
Bitcast
Bitwise not
Blit extension not available.
Blit feedback loop: the read and draw framebuffers are the same.
BlitFramebuffer dimensions out of 32-bit integer range.
BlitGL.cpp
Blits are only supported from 2D texture, renderbuffer or default framebuffer attachments in this extension.
Blits are only supported to 2D texture, renderbuffer or default framebuffer attachments in this extension.
Blob cache callbacks cannot be null.
Blob cache functions can only be set once in the lifetime of a Display
BlobCache.cpp
Block(s)
Border must be 0.
Both compute and graphics shaders are attached to the same program.
Both width and height argument of drawn texture must be positive.
Bq7
Branch: Break
Branch: Continue
Branch: Kill
Branch: Return
Branch: Unknown Branch
BranchConditional
BreakVariableAliasingInInnerLoops.cpp
Broadcom
Bs
Bu/
Buffer View
Buffer is already mapped.
Buffer is bound for transform feedback.
Buffer is not mapped.
Buffer offset overflow.
Buffer.cpp
BufferBlock
BufferGL.cpp
BufferNULL.cpp
BufferVk.cpp
BufferVk::getIndexRange
BufferVk::mapRange
BuildNDRange
BuiltIn
BuiltIn (No allowed mixing of built-in variables and
BuiltInFunctionEmulator.cpp
BuiltInFunctionEmulatorGLSL.cpp
BuiltIns can only target variables, structs or constants
BuiltinSymbolTable {
BuiltinsWorkaroundGLSL.cpp
ByG
ByVal
B{T
B}7
C
C&>
C(9
C1>
C4
C7
C8
C<>
C<E
CALLDATAEXT
CALLDATAINEXT
CALLDATAINNV
CALLDATANV
CARET
CASE
CENTROID
COLOR
COMMA
COMPUTE
CONST
CONSTANT_COLOR (or ONE_MINUS_CONSTANT_COLOR) and CONSTANT_ALPHA (or ONE_MINUS_CONSTANT_ALPHA) cannot be used together as source and destination color factors in the blend function.
CONTINUE
CPacked
CRITICAL
CalculateBufferInfo
Calculation of loop conditions in for and while loop has bug
Call a built-in function
Call a user-defined function
Call an internal function with raw implementation
Call stack too deep (larger than
CallDAG.cpp
Calling glTexImage2D with zero size generates errors.
Can not get pointer for reserved buffer name zero.
Can only be highp
Can only use one of gl_ClipDistance or gl_ClipDistancePerViewNV
Can only use one of gl_ClipDistance or gl_ClipVertex (gl_ClipDistance is preferred)
Can only use one of gl_CullDistance or gl_ClipVertex (gl_ClipDistance is preferred)
Can only use one of gl_CullDistance or gl_CullDistancePerViewNV
Can only use one of gl_Layer or gl_LayerPerViewNV
Can only use one of gl_Position or gl_PositionPerViewNV
Can only use one of gl_ViewportMask or gl_ViewportMaskPerViewNV
Cannot allocate a variable containing a 16-bit type in
Cannot allocate a variable containing a 8-bit type in
Cannot attach multiple ES shaders of the same type to a single program
Cannot be qualified as invariant.
Cannot capture outbound array element '
Cannot change active program while transform feedback is unpaused.
Cannot change program binary while program is associated with an active transform feedback object.
Cannot copy composites of 8- or 16-bit types
Cannot copy memory of objects containing 8- or 16-bit types
Cannot create a 2D texture from a multisampled EGL image.
Cannot create a composite containing 8- or 16-bit types
Cannot create an OpenGL ES platform on GLX without the GLX_ARB_create_context extension.
Cannot create an OpenGL ES platform on GLX without the GLX_EXT_create_context_es_profile extension.
Cannot create undefined values with 8- or 16-bit types
Cannot cross link ES and desktop profiles
Cannot declare a function in a function body
Cannot extract from a composite of 8- or 16-bit types
Cannot extract from a vector of 8- or 16-bit types
Cannot form constants of 8- or 16-bit types
Cannot generate mipmaps for a zero-size texture in a WebGL context.
Cannot have multiple different invocations specifiers
Cannot have multiple different max_vertices specifiers
Cannot have multiple different primitive specifiers
Cannot have multiple different work group size specifiers
Cannot have multiple index specifiers
Cannot have negative height, width, or depth.
Cannot have negative start.
Cannot have negative stride.
Cannot insert into a composite of 8- or 16-bit types
Cannot insert into a vector of 8- or 16-bit types
Cannot link program while program is associated with an active transform feedback object.
Cannot load program binaries across different ES context versions.
Cannot mix ES profile with non-ES profile shaders
Cannot pop the default debug group.
Cannot push more than GL_MAX_DEBUG_GROUP_STACK_DEPTH debug groups.
Cannot reuse block name within the same interface:
Cannot shuffle a vector of 8- or 16-bit types
Cannot transpose matrices of 16-bit floats
Cannot use GL_LINEAR filter when blitting a integer framebuffer.
Cannot use a pointer in the PhysicalStorageBuffer storage class
Cannot use both gl_FragColor and gl_FragData
Cannot use gl_FragColor or gl_FragData when using user-defined outputs
Capability
Capability Image1D is required to access storage image
Capability ImageBuffer is required to access storage image
Capability ImageCubeArray is required to access
Capability ImageRect is required to access storage image
Capability StorageImageReadWithoutFormat is required to
Capability StorageImageWriteWithoutFormat is required to write
Caps.cpp
Capture of array elements is undefined and not supported.
Capture of arrays is undefined and not supported.
CaptureEventProfilingInfo
Case
Case construct that targets
Cb<
Ce0
Ceil
Ceiling
Certain types of GLSL arithmetic ops mixing vectors and scalars may be executed incorrectly
CheckAccessFullyMapped
CheckCompileStatus
CheckError
CheckLinkStatus
ChoosePhysicalDevice
Ck5
Cl[
Clamp uniform array access to avoid reading invalid memory.
ClampFragDepth.cpp
ClampPointSize.cpp
ClampToEdge
Classes: Workgroup, CrossWorkgroup, Private, and Function
Clay
Clay Clay Shader Compiler
Cleanup: discarding lookahead
Cleanup: popping
ClearErrors
ClearMultiviewGL.cpp
Clears when the clear color is all zeros or ones do not work.
Client data cannot be used with a non-default vertex array object.
ClosestHitKHR
ClosestHitNV
ClusteredReduce
CmdExecTime
Code block
CodeGen.cpp
Codeplay
Coherent
ColMajor
CollectVariables.cpp
Color buffer component types are not compatible.
Color buffer sizes are not compatible.
Color buffer types are not compatible.
Color number for primary color greater than or equal to MAX_DRAW_BUFFERS
Color number for secondary color greater than or equal to MAX_DUAL_SOURCE_DRAW_BUFFERS
Column Major operand <id> '
Column type is not defined.
Columns in a matrix must be of type vector.
Comma
Command Buffer
Command Pool
Command successfully completed
CommandBuffer::end
CommandBufferHelper::flushToPrimary
CommandProcessor.cpp
CommandProcessor::waitForWorkerThreadIdle
CommandQueue::checkCompletedCommands
CommandQueue::finishToSerial
CommandQueue::submitFrame
Compare Equal
Compare Greater Than
Compare Greater Than or Equal
Compare Less Than
Compare Less Than or Equal
Compare Not Equal
Compiler.cpp
CompilerGL.cpp
CompilerNULL.cpp
CompilerVk.cpp
Component
Component decoration specified for type
Component index
Component literal at operand
Component must be in the range [0;3]
Component type is not defined.
CompositeConstruct
CompositeExtract
CompositeInsert
Compressed data is valid if-and-only-if the texture is compressed.
Compressed texture dimensions must exactly match the dimensions of the data passed in.
Compressed textures cannot be attached to a framebuffer.
Compute shader is not supported in this shader version.
Compute shader precision not yet implemented.
ComputeDerivativeGroupLinearNV
ComputeDerivativeGroupQuadsNV
ComputeStartVertex
Condition operand for OpBranchConditional must be of boolean type
Config.cpp
Congfig does not suport pixmaps.
Const
ConstOffset
ConstOffset image operand not allowed
ConstOffsets
ConstType
Constant folded addition overflowed to infinity
Constant folded division overflowed to infinity
Constant folded multiplication overflowed to infinity
Constant folded subtraction overflowed to infinity
Constant folded undefined addition generated NaN
Constant folded undefined multiplication generated NaN
Constant folded undefined subtraction generated NaN
Constant value cannot be passed for 'out' or 'inout' parameters.
Constant.cpp
Constant:
ConstantNull
ConstantPipeStorage
ConstantSampler
ConstantUnion.cpp
Constituent <id> '
Constituent <id> count does not match Result Type <id> '
Constituent count does not match Result Type <id> '
Construct
Construct bmat2
Construct bmat2x3
Construct bmat2x4
Construct bmat3
Construct bmat3x2
Construct bmat3x4
Construct bmat4
Construct bmat4x2
Construct bmat4x3
Construct bool
Construct bvec2
Construct bvec3
Construct bvec4
Construct combined texture-sampler
Construct cooperative matrix
Construct dmat2
Construct dmat2x3
Construct dmat2x4
Construct dmat3
Construct dmat3x2
Construct dmat3x4
Construct dmat4
Construct dmat4x2
Construct dmat4x3
Construct double
Construct dvec2
Construct dvec3
Construct dvec4
Construct f16mat2
Construct f16mat2x3
Construct f16mat2x4
Construct f16mat3
Construct f16mat3x2
Construct f16mat3x4
Construct f16mat4
Construct f16mat4x2
Construct f16mat4x3
Construct f16vec2
Construct f16vec3
Construct f16vec4
Construct float
Construct float16_t
Construct i16vec2
Construct i16vec3
Construct i16vec4
Construct i64vec2
Construct i64vec3
Construct i64vec4
Construct i8vec2
Construct i8vec3
Construct i8vec4
Construct imat2
Construct imat2x3
Construct imat2x4
Construct imat3
Construct imat3x2
Construct imat3x4
Construct imat4
Construct imat4x2
Construct imat4x3
Construct int
Construct int16_t
Construct int64
Construct int8_t
Construct ivec2
Construct ivec3
Construct ivec4
Construct mat2
Construct mat2x3
Construct mat2x4
Construct mat3
Construct mat3x2
Construct mat3x4
Construct mat4
Construct mat4x2
Construct mat4x3
Construct reference
Construct reference type
Construct structure
Construct u16vec2
Construct u16vec3
Construct u16vec4
Construct u64vec2
Construct u64vec3
Construct u64vec4
Construct u8vec2
Construct u8vec3
Construct u8vec4
Construct uint
Construct uint16_t
Construct uint64
Construct uint8_t
Construct umat2
Construct umat2x3
Construct umat2x4
Construct umat3
Construct umat3x2
Construct umat3x4
Construct umat4
Construct umat4x2
Construct umat4x3
Construct uvec2
Construct uvec3
Construct uvec4
Construct vec2
Construct vec3
Construct vec4
Constu
ConsumeStructuredBuffer
Consumer GL extension not enabled
Consumer GLTexture extension not active
Context does not support GL_ANGLE_texture_rectangle
Context has been lost.
Context lost.
Context with no config is not supported.
Context.cpp
ContextEGL.cpp
ContextGL.cpp
ContextImpl.cpp
ContextNULL.cpp
ContextVk.cpp
ContextVk::ContextVk
ContextVk::clearAllGarbage
ContextVk::finish
ContextVk::flush
ContextVk::getNextAvailableCommandBuffer
ContextVk::initialize
Context_gl.cpp
Context_gles_1_0.cpp
Continue Target
ContractionOff
Contradictory depth layouts
Contradictory input layout primitives
Contradictory input vertex spacing
Contradictory layout max_primitives values
Contradictory layout max_vertices values
Contradictory layout vertices values
Contradictory local size
Contradictory local size specialization ids
Contradictory output layout primitives
Contradictory triangle ordering
Contradictory xfb_stride
Convert bool to double
Convert bool to float
Convert bool to float16_t
Convert bool to in16t_t
Convert bool to int
Convert bool to int64
Convert bool to int8_t
Convert bool to uint
Convert bool to uint16_t
Convert bool to uint64
Convert bool to uint8_t
Convert double to bool
Convert double to float
Convert double to float16_t
Convert double to int
Convert double to int16_t
Convert double to int64
Convert double to int8_t
Convert double to uint
Convert double to uint16_t
Convert double to uint64
Convert double to uint8_t
Convert float to bool
Convert float to double
Convert float to float16_t
Convert float to int
Convert float to int16_t
Convert float to int64
Convert float to int8_t
Convert float to uint
Convert float to uint16_t
Convert float to uint64
Convert float to uint8_t
Convert float16_t to bool
Convert float16_t to double
Convert float16_t to float
Convert float16_t to int
Convert float16_t to int16_t
Convert float16_t to int64
Convert float16_t to int8_t
Convert float16_t to uint
Convert float16_t to uint16_t
Convert float16_t to uint64
Convert float16_t to uint8_t
Convert int to bool
Convert int to double
Convert int to float
Convert int to float16_t
Convert int to int16_t
Convert int to int64
Convert int to int8_t
Convert int to uint
Convert int to uint16_t
Convert int to uint64
Convert int to uint8_t
Convert int16_t to bool
Convert int16_t to double
Convert int16_t to float
Convert int16_t to float16_t
Convert int16_t to int
Convert int16_t to int64
Convert int16_t to int8_t
Convert int16_t to uint
Convert int16_t to uint16_t
Convert int16_t to uint64
Convert int16_t to uint8_t
Convert int64 to bool
Convert int64 to double
Convert int64 to float
Convert int64 to float16_t
Convert int64 to int
Convert int64 to int16_t
Convert int64 to int8_t
Convert int64 to uint
Convert int64 to uint16_t
Convert int64 to uint64
Convert int64 to uint8_t
Convert int8_t to bool
Convert int8_t to double
Convert int8_t to float
Convert int8_t to float16_t
Convert int8_t to int
Convert int8_t to int16_t
Convert int8_t to int64
Convert int8_t to uint
Convert int8_t to uint16_t
Convert int8_t to uint64
Convert int8_t to uint8_t
Convert pointer to uint64_t
Convert uint to bool
Convert uint to double
Convert uint to float
Convert uint to float16_t
Convert uint to int
Convert uint to int16_t
Convert uint to int64
Convert uint to int8_t
Convert uint to uint16_t
Convert uint to uint64
Convert uint to uint8_t
Convert uint16_t to bool
Convert uint16_t to double
Convert uint16_t to float
Convert uint16_t to float16_t
Convert uint16_t to int
Convert uint16_t to int16_t
Convert uint16_t to int64
Convert uint16_t to int8_t
Convert uint16_t to uint
Convert uint16_t to uint64
Convert uint16_t to uint8_t
Convert uint64 to bool
Convert uint64 to double
Convert uint64 to float
Convert uint64 to float16_t
Convert uint64 to int
Convert uint64 to int16_t
Convert uint64 to int64
Convert uint64 to int8_t
Convert uint64 to uint
Convert uint64 to uint16
Convert uint64 to uint8_t
Convert uint64_t to pointer
Convert uint8_t to bool
Convert uint8_t to double
Convert uint8_t to float
Convert uint8_t to float16_t
Convert uint8_t to int
Convert uint8_t to int16_t
Convert uint8_t to int64
Convert uint8_t to int8_t
Convert uint8_t to uint
Convert uint8_t to uint16_t
Convert uint8_t to uint64
ConvertFToS
ConvertFToU
ConvertPtrToU
ConvertSToF
ConvertUToF
ConvertUToPtr
Cooperative matrix 'K' mismatch:
Cooperative matrix 'M' mismatch:
Cooperative matrix 'N' mismatch:
Cooperative matrix constructor argument must be scalar or cooperative matrix
Cooperative matrix scopes must match:
Cooperative matrix types (or types containing them) can only be allocated
Cooperative matrix types must not be used in shared memory
CooperativeMatrixLengthNV
CooperativeMatrixMulAddNV
CopyLogical
CopyMemory
CopyMemorySized
CopyObject
CopyTexImage2D spuriously returns errors on iOS when copying from renderbuffers.
Corrupt image type definition
Cos
Cosh
Could not create GL context.
Could not create a backing OpenGL context.
Could not create the dummy pbuffer.
Could not create the worker pbuffers.
Could not dlopen libGL.so.1:
Could not dlopen native EGL:
Could not find a decent GLX FBConfig to create the context.
Could not find eglGetProcAddress
Could not fit output variable into available locations:
Could not get the visual info from the fb config
Could not load EGL entry point eglBindAPI
Could not load EGL entry point eglBindTexImage
Could not load EGL entry point eglChooseConfig
Could not load EGL entry point eglClientWaitSyncKHR
Could not load EGL entry point eglCreateContext
Could not load EGL entry point eglCreateImageKHR
Could not load EGL entry point eglCreatePbufferSurface
Could not load EGL entry point eglCreateSyncKHR
Could not load EGL entry point eglCreateWindowSurface
Could not load EGL entry point eglDestroyContext
Could not load EGL entry point eglDestroyImageKHR
Could not load EGL entry point eglDestroySurface
Could not load EGL entry point eglDestroySyncKHR
Could not load EGL entry point eglGetCompositorTimingANDROID
Could not load EGL entry point eglGetCompositorTimingSupportedANDROID
Could not load EGL entry point eglGetConfigAttrib
Could not load EGL entry point eglGetDisplay
Could not load EGL entry point eglGetError
Could not load EGL entry point eglGetFrameTimestampSupportedANDROID
Could not load EGL entry point eglGetFrameTimestampsANDROID
Could not load EGL entry point eglGetNextFrameIdANDROID
Could not load EGL entry point eglGetSyncAttribKHR
Could not load EGL entry point eglInitialize
Could not load EGL entry point eglMakeCurrent
Could not load EGL entry point eglPresentationTimeANDROID
Could not load EGL entry point eglQueryString
Could not load EGL entry point eglQuerySurface
Could not load EGL entry point eglReleaseTexImage
Could not load EGL entry point eglSetBlobCacheFuncsANDROID
Could not load EGL entry point eglSurfaceAttrib
Could not load EGL entry point eglSwapBuffers
Could not load EGL entry point eglSwapBuffersWithDamageKHR
Could not load EGL entry point eglSwapInterval
Could not load EGL entry point eglTerminate
Could not load EGL entry point eglWaitSyncKHR
Could not load GLX entry point glXBindTexImageEXT
Could not load GLX entry point glXChooseFBConfig
Could not load GLX entry point glXCreateContext
Could not load GLX entry point glXCreateContextAttribsARB
Could not load GLX entry point glXCreatePbuffer
Could not load GLX entry point glXCreatePixmap
Could not load GLX entry point glXCreateWindow
Could not load GLX entry point glXDestroyContext
Could not load GLX entry point glXDestroyPbuffer
Could not load GLX entry point glXDestroyPixmap
Could not load GLX entry point glXDestroyWindow
Could not load GLX entry point glXGetClientString
Could not load GLX entry point glXGetCurrentContext
Could not load GLX entry point glXGetCurrentDrawable
Could not load GLX entry point glXGetFBConfigAttrib
Could not load GLX entry point glXGetFBConfigs
Could not load GLX entry point glXGetMscRateOML
Could not load GLX entry point glXGetSyncValuesOML
Could not load GLX entry point glXGetVisualFromFBConfig
Could not load GLX entry point glXMakeCurrent
Could not load GLX entry point glXQueryDrawable
Could not load GLX entry point glXQueryExtension
Could not load GLX entry point glXQueryExtensionsString
Could not load GLX entry point glXQueryVersion
Could not load GLX entry point glXReleaseTexImageEXT
Could not load GLX entry point glXSwapBuffers
Could not load GLX entry point glXSwapIntervalEXT
Could not load GLX entry point glXSwapIntervalMESA
Could not load GLX entry point glXSwapIntervalSGI
Could not load GLX entry point glXWaitGL
Could not load GLX entry point glXWaitX
Could not make context current.
Could not make the dummy pbuffer current.
Could not open the default X display.
Could not pack varying
Could not perform requested binary operation
Could not process include directive
Could not query the GLX version.
Could not retrieve glXGetProcAddress
Could not set thread local storage.
Count exceeds MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS.
CounterBuffer
Cr&
Cr_z__dist_code
Cr_z__length_code
Cr_z__tr_align
Cr_z__tr_flush_bits
Cr_z__tr_flush_block
Cr_z__tr_init
Cr_z__tr_stored_block
Cr_z_adler32
Cr_z_adler32_simd_
Cr_z_adler32_z
Cr_z_compressBound
Cr_z_copy_with_crc
Cr_z_cpu_check_features
Cr_z_crc32
Cr_z_crc32_sse42_simd_
Cr_z_crc32_z
Cr_z_crc_finalize
Cr_z_crc_fold_512to32
Cr_z_crc_fold_copy
Cr_z_crc_fold_init
Cr_z_crc_reset
Cr_z_deflate
Cr_z_deflateEnd
Cr_z_deflateInit2_
Cr_z_deflateResetKeep
Cr_z_deflateSetHeader
Cr_z_deflate_read_buf
Cr_z_fill_window_sse
Cr_z_inflate
Cr_z_inflate.order
Cr_z_inflateEnd
Cr_z_inflateInit2_
Cr_z_inflate_fast_chunk_
Cr_z_inflate_table
Cr_z_inflate_table.dbase
Cr_z_inflate_table.dext
Cr_z_inflate_table.lbase
Cr_z_inflate_table.lext
Cr_z_x86_cpu_enable_simd
Cr_z_x86_cpu_enable_sse2
Cr_z_x86_cpu_enable_ssse3
Cr_z_z_errmsg
Cr_z_zcalloc
Cr_z_zcfree
CreatePipeFromPipeStorage
CreateSync can only be called on the current display
CreateTLSIndex()
CreateUserEvent
CreationFrameIndex
Cross
CrossWorkgroup or Function:
CrossWorkgroupMemory
Ct5
CubeFaceCoordAMD
CubeFaceIndexAMD
Cull mode not recognized.
CullBackFacingTrianglesKHR
CullFrontFacingTrianglesKHR
CullNoOpaqueKHR
CullOpaqueKHR
Current GL context not associated with stream consumer
Current driver does not support transform feedback in binary programs.
Current matrix stack has only a single matrix.
Current matrix stack is full.
Current renderer doesn't support alpha-to-coverage.
C{G
C~9
D
D >
D&
D+5
D,,
D0B
D3D compiler workarounds
D3D workarounds
D3D11 device creation extension not active
D3DCOLORtoUBYTE4
D4
D6
D7
D8
DASH
DE&
DEC_OP
DEFAULT
DEMOTE
DEVICECOHERENT
DFUI
DFUI,,
DFUI,U
DG5
DISCARD
DIV_ASSIGN
DMAT2
DMAT2X2
DMAT2X3
DMAT2X4
DMAT3
DMAT3X2
DMAT3X3
DMAT3X4
DMAT4
DMAT4X2
DMAT4X3
DMAT4X4
DO
DOT
DOUBLE
DOUBLECONSTANT
DPdx
DPdxCoarse
DPdxFine
DPdy
DPdyCoarse
DPdyFine
DQG
DS8
DVEC2
DVEC3
DVEC4
DW.ref.__gxx_personality_v0
DW5
D\5
DaC
Data is not evenly divisible into the number of bytes needed to store in memory a datum indicated by type.
Dc@
Debug Report Callback
Debug Utils Messenger
Debug info extension instruction other than DebugScope, DebugNoScope, DebugDeclare, and DebugValue found inside function
Debug info extension instructions other than
Debug printf
Debug.cpp
DebugCompilationUnit
DebugDeclare
DebugExpression
DebugFunction
DebugFunctionDeclaration
DebugGlobalVariable
DebugImportedEntity
DebugInfo
DebugInfoNone
DebugInlinedAt
DebugInlinedVariable
DebugLexicalBlock
DebugLexicalBlockDiscriminator
DebugLocalVariable
DebugMacroDef
DebugMacroUndef
DebugNoScope
DebugOperation
DebugReportCallback
DebugScope
DebugScope, DebugNoScope, DebugDeclare, DebugValue
DebugSource
DebugTypeArray
DebugTypeBasic
DebugTypeComposite
DebugTypeEnum
DebugTypeFunction
DebugTypeMember
DebugTypePointer
DebugTypePtrToMember
DebugTypeQualifier
DebugTypeTemplate
DebugTypeTemplateParameter
DebugTypeTemplateParameterPack
DebugTypeTemplateTemplateParameter
DebugTypeVector
DebugTypedef
DebugUtilsMessenger
DebugValue
Dec
December
Declaration
Declarator.cpp
DeclareAndInitBuiltinsForInstancedMultiview.cpp
Decode and encode before generateMipmap for srgb format textures.
DecorationGroup
Decorations taking ID parameters may not be used with OpDecorateId
Decorations that don't take ID parameters may not be used with OpDecorateId
Default
Default framebuffer is bound.
Default vertex array object is bound.
DeferGlobalInitializers.cpp
Degrees
Demote
DemoteToHelperInvocationEXT
DenormFlushToZero
DenormPreserve
DependencyInfinite
DependencyLength
Deprecated behavior
Depth-stencil buffer types are not compatible.
Depth/stencil buffer format combination not allowed for blit.
DepthGreater
DepthLess
DepthReplacing
DepthStencil
DepthUnchanged
Deref
Derivative instructions require DerivativeGroupQuadsNV or DerivativeGroupLinearNV execution mode for GLCompute execution model:
Derivative instructions require Fragment or GLCompute execution model:
DerivativeControl
Descriptor Pool
Descriptor Set
Descriptor Set Layout
Descriptor Update Template
DescriptorSet
Desired resource size is greater than max renderbuffer size.
Desired resource size is greater than max texture size.
Destination texture cannot be immutable.
Destination texture is not a valid texture object.
Destination texture too small.
DestroyTLSIndex(unsigned int)
Determinant
Device Memory
Device creation extension not active
Device must have been created using eglCreateDevice
Device wasn't created using eglCreateDeviceANGLE, and the egl::Display that created it doesn't support device querying
Device, Workgroup and Invocation
Device.cpp
DeviceEnqueue
DeviceGroup
DeviceImpl.cpp
DeviceMemory::map
DeviceMemoryBarrier
DeviceMemoryBarrierWithGroupSync
DeviceNULL.cpp
DeviceVk.cpp
Dg[
DhG
Diagnostics.cpp
DiagnosticsBase.cpp
Dim SubpassData requires Fragment execution model:
Dim SubpassData requires Sampled to be 2
Dim SubpassData requires format Unknown
Direct3D platform is unsupported.
DirectiveHandler.cpp
DirectiveHandlerBase.cpp
DirectiveParser.cpp
Disable GL_EXT_disjoint_timer_query extension
Disable GL_EXT_semaphore_fd extension
Disable GPU switching support (use only the low-power GPU) on older MacBook Pros.
Disable OES_draw_buffers_indexed extension.
Dispatch indirect buffer must be bound.
DispatchTableGL_autogen.cpp
Display Mode
Display type EGL_PLATFORM_ANGLE_TYPE_NULL_ANGLE requires EGL_ANGLE_platform_angle_null.
Display.cpp
DisplayEGL.cpp
DisplayGL.cpp
DisplayGLX.cpp
DisplayImpl.cpp
DisplayImpl::valdiatePixmap unimplemented.
DisplayImpl::validateClientBuffer unimplemented.
DisplayImpl::validateImageClientBuffer unimplemented.
DisplayNULL.cpp
DisplayVk.cpp
DisplayVk::waitClient
DisplayVk::waitNative
DisplayVkXcb.cpp
Divide by zero during constant folding
Divide by zero error during constant folding
DmaBufImageSiblingEGL.cpp
Do not use native KHR_parallel_shader_compile even when available.
DontInline
Dot
Draw buffer greater than MAX_DRAW_BUFFERS.
Draw buffer must be zero when using depth or stencil.
Draw framebuffer is incomplete
Draw indirect buffer must be bound.
Draw mode must match current transform feedback object's draw mode.
DrawId
DrawIndex
DrawParameters
Drivers generate errors when querying the number of bits in timer queries
Drivers returning raw sRGB values instead of linearized values when calling glReadPixels on unsized sRGB texture formats
Ds7
Duplicate non-aggregate type declarations are not allowed. Opcode:
During initialization, assign the current vertex attributes to the spec-mandated defaults
DvG
Dynamic indexing of swizzled l-values doesn't work correctly on various platforms.
D|O
E
E!>
E)>
E0B
E4
E4>
E7
E8
E>[
E?>
EEF
EGL
EGL >= 1.4 is required
EGL image internal format is not supported as a renderbuffer.
EGL image internal format is not supported as a texture.
EGL image is not valid.
EGL stream consumer external GL extension not enabled
EGLSync.cpp
EGL_ANDROID_blob_cache
EGL_ANDROID_framebuffer_target
EGL_ANDROID_framebuffer_target is not enabled.
EGL_ANDROID_get_frame_timestamps
EGL_ANDROID_get_frame_timestamps extension is not available.
EGL_ANDROID_get_native_client_buffer
EGL_ANDROID_image_native_buffer
EGL_ANDROID_image_native_buffer not supported.
EGL_ANDROID_native_fence_sync
EGL_ANDROID_native_fence_sync extension is not available.
EGL_ANDROID_presentation_time
EGL_ANDROID_presentation_time is not available.
EGL_ANDROID_recordable
EGL_ANDROID_recordable is not enabled.
EGL_ANGLE_create_context_backwards_compatible
EGL_ANGLE_create_context_client_arrays
EGL_ANGLE_create_context_extensions_enabled
EGL_ANGLE_create_context_webgl_compatibility
EGL_ANGLE_d3d_share_handle_client_buffer
EGL_ANGLE_d3d_texture_client_buffer
EGL_ANGLE_device_cgl
EGL_ANGLE_device_creation
EGL_ANGLE_device_creation_d3d11
EGL_ANGLE_device_d3d
EGL_ANGLE_direct_composition
EGL_ANGLE_display_texture_share_group
EGL_ANGLE_experimental_present_path
EGL_ANGLE_experimental_present_path extension not active
EGL_ANGLE_explicit_context
EGL_ANGLE_feature_control
EGL_ANGLE_feature_control extension is not available.
EGL_ANGLE_feature_control is not supported
EGL_ANGLE_flexible_surface_compatibility
EGL_ANGLE_image_d3d11_texture
EGL_ANGLE_image_d3d11_texture not supported.
EGL_ANGLE_iosurface_client_buffer
EGL_ANGLE_iosurface_client_buffer is not enabled.
EGL_ANGLE_keyed_mutex
EGL_ANGLE_platform_angle
EGL_ANGLE_platform_angle extension not active
EGL_ANGLE_platform_angle_context_virtualization
EGL_ANGLE_platform_angle_context_virtualization extension not active
EGL_ANGLE_platform_angle_d3d
EGL_ANGLE_platform_angle_d3d is not supported
EGL_ANGLE_platform_angle_d3d11on12
EGL_ANGLE_platform_angle_device_type_egl_angle
EGL_ANGLE_platform_angle_device_type_egl_angle is not supported
EGL_ANGLE_platform_angle_device_type_swiftshader
EGL_ANGLE_platform_angle_device_type_swiftshader is not supported
EGL_ANGLE_platform_angle_metal
EGL_ANGLE_platform_angle_null
EGL_ANGLE_platform_angle_opengl
EGL_ANGLE_platform_angle_vulkan
EGL_ANGLE_power_preference
EGL_ANGLE_program_cache_control
EGL_ANGLE_query_surface_pointer
EGL_ANGLE_robust_resource_initialization
EGL_ANGLE_stream_producer_d3d_texture
EGL_ANGLE_surface_d3d_texture_2d_share_handle
EGL_ANGLE_surface_orientation
EGL_ANGLE_surface_orientation is not enabled.
EGL_ANGLE_swap_buffers_with_frame_token is not available.
EGL_ANGLE_sync_control_rate
EGL_ANGLE_window_fixed_size
EGL_ANGLE_windows_ui_composition
EGL_ANGLE_x11_visual
EGL_BindAPI
EGL_BindTexImage
EGL_CHROMIUM_create_context_bind_generates_resource
EGL_CHROMIUM_sync_control
EGL_COLOR_COMPONENT_TYPE_EXT invalid attribute:
EGL_CONTEXT_BIND_GENERATES_RESOURCE_CHROMIUM must be EGL_TRUE or EGL_FALSE.
EGL_CONTEXT_CLIENT_ARRAYS_ENABLED_ANGLE must be EGL_TRUE or EGL_FALSE.
EGL_CONTEXT_OPENGL_BACKWARDS_COMPATIBLE_ANGLE must be either EGL_TRUE or EGL_FALSE.
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR is not
EGL_CONTEXT_PROGRAM_BINARY_CACHE_ENABLED_ANGLE must be EGL_TRUE or EGL_FALSE.
EGL_CONTEXT_WEBGL_COMPATIBILITY_ANGLE must be EGL_TRUE or EGL_FALSE.
EGL_ChooseConfig
EGL_ClientWaitSync
EGL_ClientWaitSyncKHR
EGL_CopyBuffers
EGL_CreateContext
EGL_CreateDeviceANGLE
EGL_CreateImage
EGL_CreateImageKHR
EGL_CreatePbufferFromClientBuffer
EGL_CreatePbufferSurface
EGL_CreatePixmapSurface
EGL_CreatePlatformPixmapSurface
EGL_CreatePlatformPixmapSurfaceEXT
EGL_CreatePlatformWindowSurface
EGL_CreatePlatformWindowSurfaceEXT
EGL_CreateStreamKHR
EGL_CreateStreamProducerD3DTextureANGLE
EGL_CreateSync
EGL_CreateSyncKHR
EGL_CreateWindowSurface
EGL_DIRECT_COMPOSITION_ANGLE cannot be used without EGL_ANGLE_direct_composition support.
EGL_DISPLAY_TEXTURE_SHARE_GROUP_ANGLE must be EGL_TRUE or EGL_FALSE.
EGL_DebugMessageControlKHR
EGL_DestroyContext
EGL_DestroyImage
EGL_DestroyImageKHR
EGL_DestroyStreamKHR
EGL_DestroySurface
EGL_DestroySync
EGL_DestroySyncKHR
EGL_DupNativeFenceFDANDROID
EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_EXTENSIONS_ENABLED_ANGLE must be either EGL_TRUE or EGL_FALSE.
EGL_EXT_client_extensions
EGL_EXT_create_context_robustness
EGL_EXT_device_query
EGL_EXT_device_query extension is not available.
EGL_EXT_gl_colorspace_display_p3
EGL_EXT_gl_colorspace_display_p3_linear
EGL_EXT_gl_colorspace_display_p3_passthrough
EGL_EXT_gl_colorspace_display_p3_passthrough is not available.
EGL_EXT_gl_colorspace_scrgb
EGL_EXT_gl_colorspace_scrgb_linear
EGL_EXT_image_dma_buf_import
EGL_EXT_image_dma_buf_import not supported.
EGL_EXT_image_dma_buf_import_modifiers
EGL_EXT_image_gl_colorspace
EGL_EXT_pixel_format_float
EGL_EXT_pixel_format_float is not enabled.
EGL_EXT_platform_base
EGL_EXT_platform_base not supported
EGL_EXT_platform_device
EGL_FEATURE_OVERRIDES_DISABLED_ANGLE must be a valid pointer
EGL_FEATURE_OVERRIDES_ENABLED_ANGLE must be a valid pointer
EGL_FIXED_SIZE_ANGLE cannot be used without EGL_ANGLE_window_fixed_size support.
EGL_FLEXIBLE_SURFACE_COMPATIBILITY_SUPPORTED_ANGLE cannot be used without EGL_ANGLE_flexible_surface_compatibility support.
EGL_GGP_STREAM_DESCRIPTOR_ANGLE requires EGL_ANGLE_ggp_stream_descriptor.
EGL_GL_COLORSPACE cannot be used without EGL_KHR_gl_colorspace support.
EGL_GL_TEXTURE_LEVEL cannot be negative.
EGL_GL_TEXTURE_LEVEL cannot be used in conjunction with a renderbuffer target.
EGL_GL_TEXTURE_LEVEL cannot be used without KHR_gl_texture_*_image support.
EGL_GL_TEXTURE_ZOFFSET cannot be used without KHR_gl_texture_3D_image support.
EGL_GL_TEXTURE_ZOFFSET must be used with a 3D texture target.
EGL_GetCompositorTimingANDROID
EGL_GetCompositorTimingSupportedANDROID
EGL_GetConfigAttrib
EGL_GetConfigs
EGL_GetCurrentContext
EGL_GetCurrentDisplay
EGL_GetCurrentSurface
EGL_GetDisplay
EGL_GetError
EGL_GetFrameTimestampSupportedANDROID
EGL_GetFrameTimestampsANDROID
EGL_GetMscRateANGLE
EGL_GetNativeClientBufferANDROID
EGL_GetNextFrameIdANDROID
EGL_GetPlatformDisplay
EGL_GetPlatformDisplayEXT
EGL_GetProcAddress
EGL_GetSyncAttrib
EGL_GetSyncAttribKHR
EGL_GetSyncValuesCHROMIUM
EGL_HandleGPUSwitchANGLE
EGL_IMAGE_PRESERVED must be EGL_TRUE or EGL_FALSE.
EGL_IMG_context_priority
EGL_IOSURFACE requires the EGL_TEXTURE_RGBA format
EGL_IOSURFACE requires the texture target to match the config
EGL_Initialize
EGL_KHR_client_get_all_proc_addresses
EGL_KHR_create_context
EGL_KHR_create_context_no_error
EGL_KHR_debug extension is not available.
EGL_KHR_fence_sync
EGL_KHR_fence_sync extension is not available
EGL_KHR_get_all_proc_addresses
EGL_KHR_gl_colorspace
EGL_KHR_gl_renderbuffer_image
EGL_KHR_gl_texture_2D_image
EGL_KHR_gl_texture_3D_image
EGL_KHR_gl_texture_cubemap_image
EGL_KHR_image
EGL_KHR_image not supported.
EGL_KHR_image_base
EGL_KHR_image_pixmap
EGL_KHR_no_config_context
EGL_KHR_stream_consumer_gltexture
EGL_KHR_surfaceless_context
EGL_KHR_swap_buffers_with_damage
EGL_KHR_swap_buffers_with_damage is not available.
EGL_KHR_wait_sync
EGL_KHR_wait_sync extension is not available
EGL_LabelObjectKHR
EGL_MakeCurrent
EGL_NOK_texture_from_pixmap
EGL_NOK_texture_from_pixmap is not enabled.
EGL_NV_post_sub_buffer
EGL_NV_stream_consumer_gltexture_yuv
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE extension not active.
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE requires a device type of EGL_PLATFORM_ANGLE_DEVICE_TYPE_HARDWARE_ANGLE or EGL_PLATFORM_ANGLE_DEVICE_TYPE_D3D_WARP_ANGLE
EGL_PLATFORM_ANGLE_D3D11ON12_ANGLE requires a platform type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_D3D_LUID_HIGH_ANGLE and EGL_PLATFORM_ANGLE_D3D_LUID_LOW_ANGLE require a platform type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_DEBUG_LAYERS_ENABLED_ANGLE must be EGL_TRUE, EGL_FALSE, or EGL_DONT_CARE.
EGL_PLATFORM_ANGLE_DEVICE_TYPE_WARP_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_EGL_HANDLE_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE.
EGL_PLATFORM_ANGLE_ENABLE_AUTOMATIC_TRIM_ANGLE requires a device type of EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE.
EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE currently only supports Vulkan 1.0.
EGL_POST_SUB_BUFFER_SUPPORTED_NV cannot be used without EGL_ANGLE_surface_orientation support.
EGL_POWER_PREFERENCE_ANGLE must be either EGL_LOW_POWER_ANGLE or EGL_HIGH_POWER_ANGLE.
EGL_PostSubBufferNV
EGL_PresentationTimeANDROID
EGL_ProgramCacheGetAttribANGLE
EGL_ProgramCachePopulateANGLE
EGL_ProgramCacheQueryANGLE
EGL_ProgramCacheResizeANGLE
EGL_QueryAPI
EGL_QueryContext
EGL_QueryDebugKHR
EGL_QueryDeviceAttribEXT
EGL_QueryDeviceStringEXT
EGL_QueryDisplayAttribANGLE
EGL_QueryDisplayAttribEXT
EGL_QueryStreamKHR
EGL_QueryStreamu64KHR
EGL_QueryString
EGL_QueryStringiANGLE
EGL_QuerySurface
EGL_QuerySurfacePointerANGLE
EGL_RECORDABLE_ANDROID invalid attribute:
EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE cannot be used without EGL_ANGLE_robust_resource_initialization support.
EGL_ROBUST_RESOURCE_INITIALIZATION_ANGLE must be either EGL_TRUE or EGL_FALSE.
EGL_ReacquireHighPowerGPUANGLE
EGL_ReleaseDeviceANGLE
EGL_ReleaseHighPowerGPUANGLE
EGL_ReleaseTexImage
EGL_ReleaseThread
EGL_SURFACE_ORIENTATION_ANGLE cannot be queried without EGL_ANGLE_surface_orientation support.
EGL_SYNC_CONDITION_KHR is not valid for this sync type.
EGL_SYNC_FENCE_KHR cannot be used without GL_OES_EGL_sync support.
EGL_SetBlobCacheFuncsANDROID
EGL_StreamAttribKHR
EGL_StreamConsumerAcquireKHR
EGL_StreamConsumerGLTextureExternalAttribsNV
EGL_StreamConsumerGLTextureExternalKHR
EGL_StreamConsumerReleaseKHR
EGL_StreamPostD3DTextureANGLE
EGL_SurfaceAttrib
EGL_SwapBuffers
EGL_SwapBuffersWithDamageKHR
EGL_SwapBuffersWithFrameTokenANGLE
EGL_SwapInterval
EGL_TEXTURE_INTERNAL_FORMAT_ANGLE and EGL_TEXTURE_TYPE_ANGLE cannot be used without EGL_ANGLE_image_d3d11_texture support.
EGL_TIMESTAMPS_ANDROID cannot be used without EGL_ANDROID_get_frame_timestamps support.
EGL_Terminate
EGL_WIDTH or EGL_HEIGHT cannot be set without EGL_ANGLE_window_fixed_size support.
EGL_WIDTH or EGL_HEIGHT cannot be set without EGL_FIXED_SIZE_ANGLE being enabled on the surface.
EGL_WaitClient
EGL_WaitGL
EGL_WaitNative
EGL_WaitSync
EGL_WaitSyncKHR
EGL_bind_to_texture invalid attribute:
EGL_color_buffer_type invalid attribute:
EGL_native_renderable invalid attribute:
EGL_transparent_type invalid attribute:
EK+
ELSE
EOF while in a comment
EQ_OP
ERROR
ERROR_not_op_extension
ES
ES3_1_reserved_ES3_1_extension_ES3_2_keyword_2(sh::TParseContext*, sh::TExtension, sh::TExtension, int, int)
ES3_reserved_ES3_1_extension_ES3_2_keyword(sh::TParseContext*, sh::TExtension, int)
ES3_reserved_ES3_extension_ES3_1_keyword(sh::TParseContext*, sh::TExtension, int)
ESSL
EXG
EXPLICITINTERPAMD
EXT/OES_draw_buffers_indexed is not available.
EXT/OES_draw_buffers_indexed or ES 3.1 are required but not available.
EXT_create_context_robustness.
EXT_gl_colorspace_display_p3 is not available.
EXT_gl_colorspace_display_p3_linear is not available.
EXT_gl_colorspace_scrgb is not available.
EXT_gl_colorspace_scrgb_linear is not available.
Each cubemap face must have equal width and height.
EarlyFragmentTests
EarlyFragmentTestsOptimization.cpp
Ed
Eh5
Element type is not defined.
Element value exceeds element range.
Element value exceeds maximum element index.
Em=
Embedded
Embedded struct definitions are not allowed
EmitStreamVertex
EmitStreamVertex(00D
EmitVertex
EmitVertex(
Emulate transform feedback as the VK_EXT_transform_feedback is not present.
EmulateGLFragColorBroadcast.cpp
EmulateMultiDrawShaderBuiltins.cpp
EmulatePrecision.cpp
Enable Android pre-rotation for landscape applications
Enable Bresenham line rasterization via VK_EXT_line_rasterization extension
Enable FramebufferVk objects to be cached
Enable parallel processing and submission of Vulkan commands in worker thread
Enable precision qualifiers in shaders
Enable provoking vertex mode via VK_EXT_provoking_vertex extension
Enable the use of pixel shader patching to implement OpenGL basic line rasterization rules
Encountered extended instruction GLSLstd450Bad
End of input in comment
End of input in macro
End of input reached while decoding Op
End of line in macro substitution:
End of line in string
EndInvocationInterlockEXT
EndPrimitive
EndPrimitive(
EndStreamPrimitive
EndStreamPrimitive(00D
EnqueueKernel
EnqueueMarker
EnqueuedWorkgroupSize
Entering state %d
Entry point id '
Entry point name "
Entry point not found
Entry points may not have a call graph with cycles.
EntryPoint
Enum is not currently supported.
Enum requires GLES 3.0
Enum requires GLES 3.1
Er:
Error compressing binary data:
Error during layout qualifier parsing.
Error getting CWD for Vulkan layers init.
Error releasing tex image from texture
Error setting CWD for Vulkan layers init.
Error setting custom list for custom extensions for Vulkan layers init.
Error setting environment for Mock/Null Driver.
Error setting environment for SwiftShader.
Error setting environment for Vulkan layers init.
Error.cpp
Error:
Error: Result Id is 0
Error: Type Id is 0
Error: discarding
Error: popping
ErrorHandler
Es
Et>
Eu:
EvaluateAttributeAtCentroid
EvaluateAttributeAtSample
EvaluateAttributeSnapped
Exceeded maximum shared memory size
Exceeded maximum uniform location size
Except for images with the r32f, r32i and r32ui format qualifiers, image variables must be qualified readonly and/or writeonly
ExecuteCallableKHR
ExecuteCallableNV
Execution mode can only be used with a Geometry or tessellation execution model.
Execution mode can only be used with a Geometry, tessellation or MeshNV execution model.
Execution mode can only be used with a Kernel or GLCompute execution model.
Execution mode can only be used with a Kernel, GLCompute, MeshNV, or TaskNV execution model.
Execution mode can only be used with a tessellation execution model.
Execution mode can only be used with the Fragment execution model.
Execution mode can only be used with the Geometry execution model.
Execution mode can only be used with the Geometry or MeshNV execution model.
Execution mode can only be used with the Kernel execution model.
Execution mode must be one of OriginUpperLeft, DepthReplacing, DepthGreater, DepthLess, DepthUnchanged, LocalSize, or LocalSizeHint for WebGPU environment.
ExecutionMode
ExecutionModeId
Exp
Exp2
ExpandIntegerPowExpressions.cpp
Expected
Expected 32-bit float scalar or vector type as Result Type:
Expected Base Type to be equal to Result Type:
Expected Base Type to be int scalar or vector:
Expected Base dimension to be equal to Result Type dimension:
Expected Base to be int scalar or vector:
Expected Base to have the same bit width
Expected Base to have the same dimension
Expected Component to be 32-bit int scalar
Expected Component type to be equal to Result Type
Expected Composite to be an object of composite type
Expected Constituent type to be equal to the
Expected Constituent type to be equal to the column
Expected Constituent type to be equal to the component type
Expected Constituents to be scalars or vectors of
Expected Coordinate to be float scalar or vector
Expected Coordinate to be int or float scalar or vector
Expected Coordinate to be int scalar or vector
Expected Coordinate to be integer scalar or vector
Expected Coordinate to have
Expected Coordinate to have at least
Expected Count Type to be int scalar:
Expected Dref to be of 32-bit float type
Expected Image 'Dim' cannot be Cube
Expected Image 'Dim' must be one of 1D, 2D, or Cube when Arrayed is 1
Expected Image 'Dim' parameter to be 1D, 2D, 3D or Rect
Expected Image 'Dim' parameter to be not SubpassData.
Expected Image 'Sampled Type' to be the same as
Expected Image 'Sampled Type' to be the same as Texel
Expected Image 'Sampled Type' to be the same as the Type pointed to by Result Type
Expected Image 'Sampled' parameter to be 0 or 1
Expected Image 'Sampled' parameter to be 0 or 2
Expected Image 'Sampled' parameter to be 1
Expected Image Operand Bias to be float scalar
Expected Image Operand ConstOffset to be a const object
Expected Image Operand ConstOffset to be int scalar or
Expected Image Operand ConstOffset to have
Expected Image Operand ConstOffsets array componenets to be int vectors of size 2
Expected Image Operand ConstOffsets to be a const object
Expected Image Operand ConstOffsets to be an array of size 4
Expected Image Operand Grad dx to have
Expected Image Operand Grad dy to have
Expected Image Operand Lod to be float scalar when used
Expected Image Operand Lod to be int scalar when used with
Expected Image Operand MinLod to be float scalar
Expected Image Operand Offset to be int scalar or
Expected Image Operand Offset to have
Expected Image Operand Sample to be int scalar
Expected Image operand to be of type OpTypeSampledImage
Expected Image to be OpTypePointer
Expected Image to be OpTypePointer with Type OpTypeImage
Expected Image to be of type OpTypeImage
Expected Image to be of type OpTypeImage.
Expected Index to be int scalar
Expected Insert Type to be equal to Result Type:
Expected Level of Detail to be int scalar
Expected Matrix to be of type OpTypeMatrix
Expected Offset Type to be int scalar:
Expected P type and Result Type to be the same:
Expected Resident Code to be int scalar
Expected Result Type and Operand type to be the same
Expected Result Type struct member types to be identical:
Expected Result Type struct member types to be integer scalar
Expected Result Type struct member types to be unsigned
Expected Result Type struct to have two members:
Expected Result Type to be OpTypeImage
Expected Result Type to be OpTypePointer
Expected Result Type to be OpTypePointer whose Storage Class operand is Image
Expected Result Type to be OpTypePointer whose Type operand must be a scalar numerical type or OpTypeVoid
Expected Result Type to be OpTypeSampledImage.
Expected Result Type to be OpTypeStruct
Expected Result Type to be OpTypeVector
Expected Result Type to be a composite type
Expected Result Type to be a matrix type
Expected Result Type to be a pointer or int or float vector
Expected Result Type to be a pointer:
Expected Result Type to be a scalar type
Expected Result Type to be a struct containing an int scalar and a texel
Expected Result Type to be an unsigned integer type scalar.
Expected Result Type to be bool scalar type
Expected Result Type to be float scalar or vector type:
Expected Result Type to be float vector type
Expected Result Type to be int scalar or vector type
Expected Result Type to be int scalar type
Expected Result Type to be of target storage class:
Expected Result Type to have 2 components
Expected Result Type to have storage class Generic:
Expected Result Type to have storage class Workgroup,
Expected Sample Image image type to be equal to Result Type
Expected Sample Image to be of type OpTypeSampleImage
Expected Sample for Image with MS 0 to be a valid <id> for the value 0
Expected Sample to be integer scalar
Expected Sampled Image to be of type OpTypeSampledImage
Expected Sampled Type to be a 32-bit int or float scalar type for Vulkan environment
Expected Sampled Type to be either void or
Expected Sampler to be of type OpTypeSampler
Expected Shift to be int scalar or vector:
Expected Shift to have the same dimension
Expected Texel to be int or float vector or scalar
Expected Value to be a vector of four components of integer type scalar
Expected Value to be a vector of two components of unsigned integer or 64bit unsigned integer
Expected Vector component type to be equal to Result Type
Expected Vector type to be OpTypeVector
Expected Vector type to be equal to Result Type
Expected a program name, but found a shader name.
Expected a shader name, but found a program name.
Expected a struct as Result Type:
Expected arithmetic operands to be of Result Type:
Expected arithmetic operands to have the same bit width
Expected arithmetic operands to have the same dimension
Expected at least one index to Op
Expected bool scalar or vector type as Result Type:
Expected bool scalar or vector type as condition:
Expected bool scalar type as Result Type:
Expected both Image Operand Grad ids to be float scalars or
Expected both objects to be of Result Type:
Expected both operands to be of Result Type member type:
Expected both operands to be of Result Type:
Expected both operands to have the same component bit width:
Expected column type of Result Type to be equal to the type
Expected column type of the matrix to be equal to Result Type:
Expected column types of Result Type and left matrix to be
Expected columns of Matrix type and Result Type to be
Expected component type to be equal to Result Type:
Expected component types of Matrix and Result Type to be
Expected component types of Result Type and matrix to be
Expected component types of Result Type and right matrix to be
Expected component types of Result Type and vector to be
Expected component types of the operands to be equal:
Expected cooperative matrix type as A Type:
Expected cooperative matrix type as B Type:
Expected cooperative matrix type as C Type:
Expected cooperative matrix type as Result Type:
Expected cooperative matrix types
Expected float matrix type as Result Type:
Expected float matrix type as left operand:
Expected float matrix type as right operand:
Expected float scalar or vector type as Result Type:
Expected float scalar type as Result Type:
Expected float vector as operand:
Expected float vector type as Result Type:
Expected float vector type as left operand:
Expected float vector type as right operand:
Expected floating scalar or vector type as Result Type:
Expected hex value in escape sequence
Expected input and Result Type to point to the same type:
Expected input to be a pointer or int or float vector
Expected input to be a pointer or int scalar if Result Type is pointer:
Expected input to be a pointer, int scalar or 32-bit int vector if Result Type is pointer:
Expected input to be a pointer:
Expected input to be float scalar or vector:
Expected input to be int scalar or vector:
Expected input to have a type:
Expected input to have different bit width from Result Type:
Expected input to have storage class Generic:
Expected input to have storage class Workgroup,
Expected input to have the same dimension as Result Type:
Expected input to have the same total bit width as
Expected input type to be equal to Result Type:
Expected int scalar as input:
Expected int scalar or vector as input:
Expected int scalar or vector as operand:
Expected int scalar or vector type as Result Type:
Expected int scalar or vector type as operand:
Expected invariant or precise
Expected left and right operands to have the same type:
Expected loop index
Expected matrix operand type to be equal to Result Type:
Expected number of columns and the column size of Matrix
Expected number of columns of Result Type and right matrix to
Expected number of columns of left matrix and number of rows
Expected number of columns of the matrix to be equal to
Expected number of columns of the matrix to be equal to the
Expected number of constituents to be at least 2
Expected number of rows of the matrix to be equal to the
Expected operand to be of Result Type:
Expected operand to be of type OpTypeImage
Expected operand to be scalar or vector float:
Expected operand to be vector bool:
Expected operands to be scalar or vector float:
Expected operands to be scalar or vector int:
Expected operands to have the same bit width
Expected operands to have the same dimension
Expected operands to have the same number of componenets:
Expected rows of Matrix type and Result Type to be
Expected scalar operand type to be equal to the component
Expected scalar or
Expected scopes of Matrix and Result Type to be
Expected single constituent
Expected target storage class to be Workgroup,
Expected total number of Constituents to be equal
Expected total number of given components to be equal
Expected unsigned int scalar or vector type as Result Type:
Expected unsigned int scalar type as Result Type:
Expected vector operand type to be equal to Result Type:
Expected vector sizes of Result Type and the condition to be equal:
Expected vector sizes of Result Type and the operand to be equal:
Expected vector sizes of Result Type and the operands to be
Expected vector sizes of Result Type and the operands to be equal:
ExplicitInterpAMD
Export
Expression too complex.
ExtInst
ExtInstImport
Extended instruction GLSLstd450IMix is not supported
Extension is not disablable.
Extension is not enabled.
Extension is not requestable.
Extension not supported
Extension not supported:
ExtensionBehavior.cpp
ExtensionFound("VK_EXT_external_memory_host", deviceExtensionNames)
ExtensionFound("VK_EXT_shader_stencil_export", deviceExtensionNames)
ExtensionFound("VK_FUCHSIA_external_memory", deviceExtensionNames)
ExtensionFound("VK_FUCHSIA_external_semaphore", deviceExtensionNames)
ExtensionFound("VK_GOOGLE_sampler_filtering_precision", deviceExtensionNames)
ExtensionFound("VK_KHR_external_fence_capabilities", deviceExtensionNames)
ExtensionFound("VK_KHR_external_fence_fd", deviceExtensionNames)
ExtensionFound("VK_KHR_external_memory_fd", deviceExtensionNames)
ExtensionFound("VK_KHR_external_semaphore_capabilities", deviceExtensionNames)
ExtensionFound("VK_KHR_external_semaphore_fd", deviceExtensionNames)
ExtensionFound("VK_KHR_incremental_present", deviceExtensionNames)
ExtensionGLSL.cpp
External texture extension not enabled
E|7
E}9
F
F#>
F,,,,
F,U
F0B
F16IMAGE1D
F16IMAGE1DARRAY
F16IMAGE2D
F16IMAGE2DARRAY
F16IMAGE2DMS
F16IMAGE2DMSARRAY
F16IMAGE2DRECT
F16IMAGE3D
F16IMAGEBUFFER
F16IMAGECUBE
F16IMAGECUBEARRAY
F16MAT2
F16MAT2X2
F16MAT2X3
F16MAT2X4
F16MAT3
F16MAT3X2
F16MAT3X3
F16MAT3X4
F16MAT4
F16MAT4X2
F16MAT4X3
F16MAT4X4
F16SAMPLER1D
F16SAMPLER1DARRAY
F16SAMPLER1DARRAYSHADOW
F16SAMPLER1DSHADOW
F16SAMPLER2D
F16SAMPLER2DARRAY
F16SAMPLER2DARRAYSHADOW
F16SAMPLER2DMS
F16SAMPLER2DMSARRAY
F16SAMPLER2DRECT
F16SAMPLER2DRECTSHADOW
F16SAMPLER2DSHADOW
F16SAMPLER3D
F16SAMPLERBUFFER
F16SAMPLERCUBE
F16SAMPLERCUBEARRAY
F16SAMPLERCUBEARRAYSHADOW
F16SAMPLERCUBESHADOW
F16SUBPASSINPUT
F16SUBPASSINPUTMS
F16TEXTURE1D
F16TEXTURE1DARRAY
F16TEXTURE2D
F16TEXTURE2DARRAY
F16TEXTURE2DMS
F16TEXTURE2DMSARRAY
F16TEXTURE2DRECT
F16TEXTURE3D
F16TEXTUREBUFFER
F16TEXTURECUBE
F16TEXTURECUBEARRAY
F16VEC2
F16VEC3
F16VEC4
F32MAT2
F32MAT2X2
F32MAT2X3
F32MAT2X4
F32MAT3
F32MAT3X2
F32MAT3X3
F32MAT3X4
F32MAT4
F32MAT4X2
F32MAT4X3
F32MAT4X4
F32VEC2
F32VEC3
F32VEC4
F4
F64MAT2
F64MAT2X2
F64MAT2X3
F64MAT2X4
F64MAT3
F64MAT3X2
F64MAT3X3
F64MAT3X4
F64MAT4
F64MAT4X2
F64MAT4X3
F64MAT4X4
F64VEC2
F64VEC3
F64VEC4
F7
F8
FAbs
FBD
FCOOPMATNV
FClamp
FConvert
FD
FD[
FDiv
FI
FI,
FIU,
FIU,I
FIU,I,I
FIU,I,I,I
FIU,S,F
FIU,S,F,
FIU,S,F,,
FIU,S,F,,,I
FIU,S,F,,I
FIU,S,F,I
FIU,S,F,I,,,
FIU,S,F,I,,,,U
FIU,S,F,I,U
FIU,s,F,
FIU,s,F,,I
FIU,s,F,,I,,,
FIU,s,F,,I,,,,U
FIU,s,F,,I,U
FIU,s,F,F
FIU,s,F,F,I
FLAT
FLOAT
FLOAT16CONSTANT
FLOAT16_T
FLOAT32_T
FLOAT64_T
FLOATCONSTANT
FMax3AMD
FMid3AMD
FMin3AMD
FMix
FMod
FNegate
FOR
FOrdEqual
FOrdGreaterThan
FOrdGreaterThanEqual
FOrdLessThan
FOrdLessThanEqual
FOrdNotEqual
FPFastMathMode
FPRoundingMode
FPRoundingMode decoration can be applied only to a width-only conversion instruction for floating-point object.
FPRoundingMode decoration can be applied only to the Object operand of an OpStore in the StorageBuffer, PhysicalStorageBufferEXT, Uniform, PushConstant, Input, or Output Storage Classes.
FPRoundingMode decoration can be applied only to the Object operand of an OpStore storing through a pointer to a 16-bit floating-point scalar or vector object.
FPRoundingMode decoration can be applied only to the Object operand of an OpStore.
FRAGMENT
FREE
FRem
FSign
FSub
FUI,F
FUI,F,
FUI,F,,
FUI,F,F,F
FUI,I
FUI,S,F
FUI,U,
FUI,U,,
FUI,U,,,
FUI,U,,,,
FUI,U,F,
FUI,U,F,,
FUI,U,F,,,
FUIB
FUnordEqual
FUnordGreaterThan
FUnordGreaterThanEqual
FUnordLessThan
FUnordLessThanEqual
FUnordNotEqual
FW2
FaceForward
Faild to query extensions in system egl
Failed to allocate enough memory to hold compressed program. (
Failed to allocate enough memory to serialize a program. (
Failed to allocate host memory
Failed to allocate memory for binary blob
Failed to bind API in system egl
Failed to compile internal blit shader.
Failed to copy program binary into the cache.
Failed to create a native GLX pbuffer.
Failed to create a native GLX pixmap.
Failed to create a shared renderer:
Failed to create the Colormap for the child window.
Failed to get system egl display
Failed to get the XVisualInfo for the child window.
Failed to get the parent window's dimensions.
Failed to initialize display because device creation failed:
Failed to initialize system egl
Failed to link internal blit program.
Failed to load binary from cache.
Failed to make the GLX context current
Failed to resize to actual compressed program size. (
Failed to retrieve the size of the parent window.
Failed to save linked program to memory program cache.
Failed to unmap the client data streaming buffer.
Failure to decompressed binary data:
Fast
Feb
February
Feedback loop formed between Framebuffer and active Texture.
Fence must be set.
Fence.cpp
FenceNVGL.cpp
FenceNVNULL.cpp
FenceNVVk.cpp
Fg,
FgO
Fi<
Field name
Field number
Fill new allocations with non-zero values to flush out errors.
Finalizer
FindAndAllocateCompatibleMemory
FindFunction.cpp
FindILsb
FindMain.cpp
FindSMsb
FindSymbolNode.cpp
FindUMsb
First block
Fix spec difference between GLSL 4.1 or lower and ESSL3
Fl<
FlagArtificial
FlagExplicit
FlagFwdDecl
FlagIndirectVariable
FlagIsDefinition
FlagIsEnumClass
FlagIsLocal
FlagIsOptimized
FlagIsPrivate
FlagIsProtected
FlagIsPublic
FlagLValueReference
FlagObjectPointer
FlagPrototyped
FlagRValueReference
FlagStaticMember
FlagStd140Structs.cpp
FlagTypePassByReference
FlagTypePassByValue
Flat
Flips the viewport to render upside-down
Float overflow
Float16Buffer
Float16ImageAMD
Float16ToFloat32.cpp
Float64
Floating-point suffix unsupported prior to GLSL ES 3.00
Floor
Flushed range does not fit into buffer mapping dimensions.
Fma
FoldExpressions.cpp
For OpExecutionModeId all Extra Operand ids must be constant instructions.
For Vulkan with RuntimeDescriptorArrayEXT, a variable
For Vulkan, OpTypeStruct variables containing
For Vulkan, an OpTypeStruct variable containing an
For WebGPU Memory no bits may be set for Memory Semantics of OpAtomic* instructions.
For WebGPU only ImageMemory may be set for Memory Semantics of OpMemoryBarrier.
For WebGPU only WorkgroupMemory and AcquireRelease may be set for Memory Semantics of OpControlBarrier.
For WebGPU, AcquireRelease must be set for Memory Semantics of OpControlBarrier.
For WebGPU, ImageMemory must be set for Memory Semantics of OpMemoryBarrier.
For WebGPU, OpTypeStruct variables containing
For WebGPU, WorkgroupMemory must be set for Memory Semantics of OpControlBarrier.
For WebGPU, all blocks must be reachable, unless they are
For WebGPU, an OpTypeStruct variable containing an
For WebGPU, functions need to be defined before being called.
For WebGPU, the only valid parameter to OpExtInstImport is "GLSL.std.450".
For WebGPU, the only valid parameter to OpExtension is
For WebGPU, unreachable continue-target cannot be the target of a branch.
For WebGPU, unreachable continue-target must be referenced by a loop instruction.
For WebGPU, unreachable continue-target must be referenced by a reachable loop instruction.
For WebGPU, unreachable continue-target must only contain an OpLabel and an OpBranch instruction.
For WebGPU, unreachable continue-target must only have a back edge to a single reachable loop instruction.
For WebGPU, unreachable continue-target must terminate with OpBranch.
For WebGPU, unreachable merge-blocks cannot be the target of a branch.
For WebGPU, unreachable merge-blocks must be referenced by a reachable merge instruction.
For WebGPU, unreachable merge-blocks must only contain an OpLabel and OpUnreachable instruction.
For WebGPU, unreachable merge-blocks must terminate with OpUnreachable.
For loops used to initialize variables hit native GLSL compiler bugs
Force a fallback format for angle_end2end_tests
Format cannot be GL_DEPTH_COMPONENT or GL_DEPTH_STENCIL if target is GL_TEXTURE_3D
Format must match internal format.
Format qualifier
Format_table_autogen.cpp
Forward pointers must point to a structure
Found child with two parents
Found nullptr child
Found result <id> '
Found unrecognized extension
Fract
Fraction
FragStencilRef
FragStencilRefEXT
Fragment
Fragment execution model entry points can only specify one of OriginUpperLeft or OriginLowerLeft execution modes.
Fragment execution model entry points can specify at most one fragment shader interlock execution mode.
Fragment execution model entry points can specify at most one of DepthGreater, DepthLess or DepthUnchanged execution modes.
Fragment execution model entry points require either an OriginUpperLeft or OriginLowerLeft execution mode.
Fragment output color index must be zero or one.
Fragment shader is not compiled.
Fragment shader output type does not match the bound framebuffer attachment type.
Fragment shader version does not match vertex shader version.
FragmentBarycentricNV
FragmentDensityEXT
FragmentFetchAMD
FragmentFullyCoveredEXT
FragmentMaskAMD
FragmentMaskFetchAMD
FragmentShaderPixelInterlockEXT
FragmentShaderSampleInterlockEXT
FragmentShaderShadingRateInterlockEXT
FrameCapture_mock.cpp
Framebuffer is incomplete.
Framebuffer layer cannot be less than 0 or greater than GL_MAX_FRAMEBUFFER_LAYERS_EXT.
Framebuffer.cpp
FramebufferAttachment.cpp
FramebufferGL.cpp
FramebufferNULL.cpp
FramebufferVk.cpp
FramebufferVk::clear
FramebufferVk::readPixelsImpl
FreePoolIndex()
Frexp
FrexpStruct
Fri
Friday
From
From ARB_gl_spirv extension:
From SPIR-V spec, section 3.32.8 on OpVariable:
From Vulkan spec, section 14.5.1:
From Vulkan spec, section 14.5.2:
From WebGPU execution environment spec:
Frontend workarounds
Full
FuncParamAttr
Function Call:
Function Definition:
Function Parameters:
Function Prototype
Function call discards the 'coherent' qualifier from image
Function call discards the 'readonly' qualifier from image
Function call discards the 'volatile' qualifier from image
Function call discards the 'writeonly' qualifier from image
Function declaration (id
Function declarations must appear before function definitions.
Function definition (id
Function end cannot be called in blocks
Function end instructions must be in a function body
Function has too many parameters.
Function parameter cannot be the first instruction.
Function parameter instructions must be in a function body
Function parameter must be preceded by a function.
Function parameter type cannot be a structure definition
Function parameters must only appear immediately after the function definition
FunctionCall
FunctionEnd
FunctionLookup.cpp
FunctionsEGL.cpp
FunctionsEGLDL.cpp
FunctionsGL.cpp
FunctionsGLX.cpp
Fw5
Fwidth
FwidthCoarse
FwidthFine
G
G'=
G,>
G/B
G0.
G39
G4
G49
G7
G7>
G8
G8E
G;E
G>
GCC: (Debian 7.5.0-3) 7.5.0
GCC_3.0
GCC_except_table0
GCC_except_table1
GCC_except_table10
GCC_except_table100
GCC_except_table101
GCC_except_table102
GCC_except_table103
GCC_except_table104
GCC_except_table105
GCC_except_table106
GCC_except_table107
GCC_except_table108
GCC_except_table109
GCC_except_table11
GCC_except_table110
GCC_except_table111
GCC_except_table112
GCC_except_table113
GCC_except_table114
GCC_except_table115
GCC_except_table116
GCC_except_table118
GCC_except_table12
GCC_except_table120
GCC_except_table122
GCC_except_table124
GCC_except_table125
GCC_except_table126
GCC_except_table127
GCC_except_table128
GCC_except_table129
GCC_except_table13
GCC_except_table130
GCC_except_table131
GCC_except_table132
GCC_except_table133
GCC_except_table134
GCC_except_table135
GCC_except_table136
GCC_except_table137
GCC_except_table138
GCC_except_table139
GCC_except_table14
GCC_except_table140
GCC_except_table141
GCC_except_table142
GCC_except_table145
GCC_except_table15
GCC_except_table151
GCC_except_table152
GCC_except_table156
GCC_except_table158
GCC_except_table16
GCC_except_table160
GCC_except_table162
GCC_except_table164
GCC_except_table166
GCC_except_table168
GCC_except_table17
GCC_except_table170
GCC_except_table172
GCC_except_table174
GCC_except_table176
GCC_except_table178
GCC_except_table18
GCC_except_table180
GCC_except_table182
GCC_except_table183
GCC_except_table185
GCC_except_table186
GCC_except_table187
GCC_except_table188
GCC_except_table189
GCC_except_table19
GCC_except_table190
GCC_except_table191
GCC_except_table192
GCC_except_table193
GCC_except_table194
GCC_except_table195
GCC_except_table196
GCC_except_table197
GCC_except_table198
GCC_except_table199
GCC_except_table2
GCC_except_table20
GCC_except_table200
GCC_except_table202
GCC_except_table203
GCC_except_table21
GCC_except_table210
GCC_except_table214
GCC_except_table216
GCC_except_table217
GCC_except_table218
GCC_except_table219
GCC_except_table22
GCC_except_table220
GCC_except_table221
GCC_except_table222
GCC_except_table223
GCC_except_table224
GCC_except_table225
GCC_except_table226
GCC_except_table227
GCC_except_table228
GCC_except_table229
GCC_except_table23
GCC_except_table230
GCC_except_table231
GCC_except_table233
GCC_except_table234
GCC_except_table235
GCC_except_table238
GCC_except_table24
GCC_except_table240
GCC_except_table243
GCC_except_table244
GCC_except_table248
GCC_except_table249
GCC_except_table25
GCC_except_table250
GCC_except_table251
GCC_except_table252
GCC_except_table253
GCC_except_table254
GCC_except_table255
GCC_except_table256
GCC_except_table257
GCC_except_table258
GCC_except_table259
GCC_except_table26
GCC_except_table260
GCC_except_table261
GCC_except_table262
GCC_except_table263
GCC_except_table264
GCC_except_table265
GCC_except_table266
GCC_except_table267
GCC_except_table268
GCC_except_table269
GCC_except_table27
GCC_except_table270
GCC_except_table271
GCC_except_table272
GCC_except_table273
GCC_except_table274
GCC_except_table275
GCC_except_table276
GCC_except_table277
GCC_except_table278
GCC_except_table279
GCC_except_table28
GCC_except_table280
GCC_except_table281
GCC_except_table282
GCC_except_table284
GCC_except_table285
GCC_except_table286
GCC_except_table287
GCC_except_table288
GCC_except_table289
GCC_except_table29
GCC_except_table290
GCC_except_table291
GCC_except_table292
GCC_except_table293
GCC_except_table294
GCC_except_table295
GCC_except_table296
GCC_except_table297
GCC_except_table298
GCC_except_table299
GCC_except_table3
GCC_except_table30
GCC_except_table300
GCC_except_table301
GCC_except_table302
GCC_except_table303
GCC_except_table304
GCC_except_table305
GCC_except_table306
GCC_except_table307
GCC_except_table308
GCC_except_table309
GCC_except_table31
GCC_except_table310
GCC_except_table311
GCC_except_table312
GCC_except_table313
GCC_except_table314
GCC_except_table315
GCC_except_table316
GCC_except_table32
GCC_except_table322
GCC_except_table323
GCC_except_table324
GCC_except_table328
GCC_except_table329
GCC_except_table33
GCC_except_table330
GCC_except_table331
GCC_except_table332
GCC_except_table334
GCC_except_table335
GCC_except_table339
GCC_except_table34
GCC_except_table343
GCC_except_table344
GCC_except_table345
GCC_except_table348
GCC_except_table349
GCC_except_table35
GCC_except_table350
GCC_except_table351
GCC_except_table354
GCC_except_table355
GCC_except_table36
GCC_except_table37
GCC_except_table383
GCC_except_table384
GCC_except_table39
GCC_except_table390
GCC_except_table391
GCC_except_table4
GCC_except_table41
GCC_except_table414
GCC_except_table43
GCC_except_table45
GCC_except_table46
GCC_except_table47
GCC_except_table49
GCC_except_table5
GCC_except_table51
GCC_except_table53
GCC_except_table54
GCC_except_table552
GCC_except_table553
GCC_except_table554
GCC_except_table556
GCC_except_table557
GCC_except_table558
GCC_except_table56
GCC_except_table561
GCC_except_table562
GCC_except_table563
GCC_except_table564
GCC_except_table565
GCC_except_table566
GCC_except_table568
GCC_except_table570
GCC_except_table572
GCC_except_table574
GCC_except_table575
GCC_except_table576
GCC_except_table578
GCC_except_table579
GCC_except_table58
GCC_except_table580
GCC_except_table581
GCC_except_table584
GCC_except_table586
GCC_except_table587
GCC_except_table589
GCC_except_table592
GCC_except_table593
GCC_except_table595
GCC_except_table597
GCC_except_table598
GCC_except_table6
GCC_except_table600
GCC_except_table61
GCC_except_table62
GCC_except_table63
GCC_except_table65
GCC_except_table67
GCC_except_table68
GCC_except_table689
GCC_except_table7
GCC_except_table705
GCC_except_table706
GCC_except_table72
GCC_except_table73
GCC_except_table74
GCC_except_table75
GCC_except_table76
GCC_except_table77
GCC_except_table8
GCC_except_table80
GCC_except_table81
GCC_except_table82
GCC_except_table83
GCC_except_table84
GCC_except_table85
GCC_except_table86
GCC_except_table87
GCC_except_table88
GCC_except_table89
GCC_except_table9
GCC_except_table90
GCC_except_table91
GCC_except_table92
GCC_except_table93
GCC_except_table94
GCC_except_table97
GCC_except_table98
GCC_except_table99
GEOMETRY
GE_OP
GF[
GL call
GL framebuffer returned incomplete.
GLCompute
GLES1-only function.
GLES1Renderer program link failed.
GLES1Renderer shader compile failed.
GLES1Renderer.cpp
GLES1State.cpp
GLIBC_2.14
GLIBC_2.16
GLIBC_2.2.5
GLIBC_2.3
GLIBC_2.3.2
GLIBC_2.3.3
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.7
GLSL.std.450
GLSL450
GLSLPacked
GLSLShared
GLX is not present.
GLX_ARB_create_context
GLX_ARB_create_context_profile
GLX_ARB_create_context_robustness
GLX_ARB_multisample
GLX_EXT_create_context_es2_profile
GLX_EXT_swap_control
GLX_EXT_texture_from_pixmap
GLX_MESA_swap_control
GLX_OML_sync_control
GLX_SGI_swap_control
GL_
GL_3DL_array_objects
GL_AMD_gcn_shader
GL_AMD_gpu_shader_half_float
GL_AMD_gpu_shader_half_float_fetch
GL_AMD_gpu_shader_int16
GL_AMD_shader_ballot
GL_AMD_shader_explicit_vertex_parameter
GL_AMD_shader_fragment_mask
GL_AMD_shader_image_load_store_lod
GL_AMD_shader_trinary_minmax
GL_AMD_texture_gather_bias_lod
GL_ANDROID_extension_pack_es31a
GL_ANGLE_base_vertex_base_instance
GL_ANGLE_client_arrays
GL_ANGLE_compressed_texture_etc
GL_ANGLE_copy_texture_3d
GL_ANGLE_copy_texture_3d extension not available.
GL_ANGLE_depth_texture
GL_ANGLE_explicit_context_gles1
GL_ANGLE_framebuffer_blit
GL_ANGLE_framebuffer_multisample
GL_ANGLE_get_image
GL_ANGLE_get_image extension not enabled.
GL_ANGLE_instanced_arrays
GL_ANGLE_lossy_etc_decode
GL_ANGLE_memory_object_fuchsia
GL_ANGLE_memory_size
GL_ANGLE_multi_draw
GL_ANGLE_multiview_multisample
GL_ANGLE_pack_reverse_row_order
GL_ANGLE_provoking_vertex
GL_ANGLE_request_extension
GL_ANGLE_robust_client_memory
GL_ANGLE_semaphore_fuchsia
GL_ANGLE_texture_compression_dxt3
GL_ANGLE_texture_compression_dxt5
GL_ANGLE_texture_external_update
GL_ANGLE_texture_multisample
GL_ANGLE_texture_multisample or GLES 3.1 required.
GL_ANGLE_texture_multisample_array not enabled.
GL_ANGLE_texture_usage
GL_ANGLE_translated_shader_source
GL_ANGLE_webgl_compatibility
GL_APPLE_clip_distance
GL_ARB_ES2_compatibility
GL_ARB_ES3_1_compatibility
GL_ARB_ES3_2_compatibility
GL_ARB_ES3_compatibility
GL_ARB_base_instance
GL_ARB_blend_func_extended
GL_ARB_buffer_storage
GL_ARB_clear_buffer_object
GL_ARB_clear_texture
GL_ARB_clip_control
GL_ARB_compute_shader
GL_ARB_copy_buffer
GL_ARB_copy_image
GL_ARB_debug_output
GL_ARB_depth_buffer_float
GL_ARB_depth_texture
GL_ARB_derivative_control
GL_ARB_direct_state_access
GL_ARB_draw_buffers
GL_ARB_draw_buffers_blend
GL_ARB_draw_elements_base_vertex
GL_ARB_draw_indirect
GL_ARB_draw_instanced
GL_ARB_enhanced_layouts
GL_ARB_explicit_attrib_location
GL_ARB_explicit_uniform_location
GL_ARB_fragment_program
GL_ARB_fragment_shader
GL_ARB_fragment_shader_interlock
GL_ARB_framebuffer_no_attachments
GL_ARB_framebuffer_object
GL_ARB_framebuffer_sRGB
GL_ARB_geometry_shader4
GL_ARB_get_program_binary
GL_ARB_get_texture_sub_image
GL_ARB_gpu_shader5
GL_ARB_gpu_shader_fp64
GL_ARB_gpu_shader_int64
GL_ARB_instanced_arrays
GL_ARB_internalformat_query
GL_ARB_internalformat_query2
GL_ARB_invalidate_subdata
GL_ARB_map_buffer_range
GL_ARB_multi_bind
GL_ARB_multi_draw_indirect
GL_ARB_multisample
GL_ARB_multitexture
GL_ARB_occlusion_query
GL_ARB_occlusion_query2
GL_ARB_parallel_shader_compile
GL_ARB_pixel_buffer_object
GL_ARB_point_parameters
GL_ARB_post_depth_coverage
GL_ARB_program_interface_query
GL_ARB_provoking_vertex
GL_ARB_robust_buffer_access_behavior
GL_ARB_robustness
GL_ARB_sample_shading
GL_ARB_sampler_objects
GL_ARB_separate_shader_objects
GL_ARB_shader_atomic_counters
GL_ARB_shader_ballot
GL_ARB_shader_bit_encoding
GL_ARB_shader_clock
GL_ARB_shader_draw_parameters
GL_ARB_shader_group_vote
GL_ARB_shader_image_load_store
GL_ARB_shader_image_size
GL_ARB_shader_objects
GL_ARB_shader_stencil_export
GL_ARB_shader_storage_buffer_object
GL_ARB_shader_subroutine
GL_ARB_shader_texture_image_samples
GL_ARB_shader_texture_lod
GL_ARB_shader_viewport_layer_array
GL_ARB_shading_language_420pack
GL_ARB_shading_language_packing
GL_ARB_sparse_texture2
GL_ARB_sparse_texture_clamp
GL_ARB_tessellation_shader
GL_ARB_texture_barrier
GL_ARB_texture_buffer_object
GL_ARB_texture_buffer_range
GL_ARB_texture_compression
GL_ARB_texture_compression_bptc
GL_ARB_texture_compression_rgtc
GL_ARB_texture_cube_map_array
GL_ARB_texture_gather
GL_ARB_texture_multisample
GL_ARB_texture_query_lod
GL_ARB_texture_rectangle
GL_ARB_texture_rg
GL_ARB_texture_rg ARB_texture_float
GL_ARB_texture_rg GL_ARB_texture_float
GL_ARB_texture_rg GL_ARB_texture_float GL_ARB_color_buffer_float
GL_ARB_texture_rgb10_a2ui
GL_ARB_texture_storage
GL_ARB_texture_storage_multisample
GL_ARB_texture_swizzle
GL_ARB_texture_view
GL_ARB_timer_query
GL_ARB_transform_feedback2
GL_ARB_transform_feedback3
GL_ARB_transform_feedback_instanced
GL_ARB_uniform_buffer_object
GL_ARB_vertex_array_object
GL_ARB_vertex_attrib_64bit
GL_ARB_vertex_attrib_binding
GL_ARB_vertex_buffer_object
GL_ARB_vertex_program
GL_ARB_vertex_shader
GL_ARB_vertex_type_2_10_10_10_rev
GL_ARB_viewport_array
GL_ARM_shader_framebuffer_fetch
GL_BLEND with floating-point color attachments requires the EXT_float_blend extension.
GL_BUFFER_MAP_POINTER can only be queried with GetBufferPointerv.
GL_CHROMIUM_bind_generates_resource
GL_CHROMIUM_bind_uniform_location
GL_CHROMIUM_color_buffer_float_rgb
GL_CHROMIUM_color_buffer_float_rgba
GL_CHROMIUM_copy_compressed_texture
GL_CHROMIUM_copy_texture
GL_CHROMIUM_framebuffer_mixed_samples
GL_CHROMIUM_lose_context
GL_CHROMIUM_sync_query
GL_CHROMIUM_texture_filtering_hint
GL_COMPUTE_SHADER
GL_EXT_EGL_image_array
GL_EXT_EGL_image_external_wrap_modes
GL_EXT_YUV_target
GL_EXT_base_instance
GL_EXT_blend_color
GL_EXT_blend_equation_separate
GL_EXT_blend_func_extended
GL_EXT_blend_func_separate
GL_EXT_blend_minmax
GL_EXT_buffer_reference
GL_EXT_buffer_reference2
GL_EXT_buffer_reference_uvec2
GL_EXT_buffer_storage
GL_EXT_clear_texture
GL_EXT_clip_control
GL_EXT_color_buffer_float
GL_EXT_compressed_ETC1_RGB8_sub_texture
GL_EXT_control_flow_attributes
GL_EXT_copy_image
GL_EXT_copy_texture
GL_EXT_debug_label
GL_EXT_debug_marker
GL_EXT_debug_printf
GL_EXT_demote_to_helper_invocation
GL_EXT_device_group
GL_EXT_direct_state_access
GL_EXT_discard_framebuffer
GL_EXT_disjoint_timer_query
GL_EXT_draw_buffers
GL_EXT_draw_buffers2
GL_EXT_draw_buffers_indexed
GL_EXT_draw_elements_base_vertex
GL_EXT_draw_instanced
GL_EXT_draw_range_elements
GL_EXT_draw_transform_feedback
GL_EXT_float_blend
GL_EXT_frag_depth
GL_EXT_fragment_invocation_density
GL_EXT_framebuffer_blit
GL_EXT_framebuffer_multisample
GL_EXT_framebuffer_object
GL_EXT_framebuffer_sRGB
GL_EXT_geometry_point_size
GL_EXT_geometry_shader
GL_EXT_geometry_shader extension not enabled.
GL_EXT_gpu_shader4
GL_EXT_gpu_shader5
GL_EXT_instanced_arrays
GL_EXT_map_buffer_range
GL_EXT_memory_object
GL_EXT_memory_object_fd
GL_EXT_memory_object_win32
GL_EXT_multi_draw_arrays
GL_EXT_multi_draw_indirect
GL_EXT_multisample_compatibility
GL_EXT_multisampled_render_to_texture
GL_EXT_multiview
GL_EXT_multiview_draw_buffers
GL_EXT_nonuniform_qualifier
GL_EXT_occlusion_query_boolean
GL_EXT_packed_depth_stencil
GL_EXT_packed_float
GL_EXT_packed_float GL_ARB_color_buffer_float
GL_EXT_pixel_buffer_object
GL_EXT_point_parameters
GL_EXT_polygon_offset
GL_EXT_post_depth_coverage
GL_EXT_primitive_bounding_box
GL_EXT_provoking_vertex
GL_EXT_pvrtc_sRGB
GL_EXT_ray_flags_primitive_culling
GL_EXT_ray_query
GL_EXT_ray_tracing
GL_EXT_read_format_bgra
GL_EXT_robustness
GL_EXT_sRGB_write_control
GL_EXT_samplerless_texture_functions
GL_EXT_scalar_block_layout
GL_EXT_semaphore
GL_EXT_semaphore_fd
GL_EXT_semaphore_win32
GL_EXT_separate_shader_objects
GL_EXT_shader_16bit_storage
GL_EXT_shader_8bit_storage
GL_EXT_shader_atomic_int64
GL_EXT_shader_explicit_arithmetic_types
GL_EXT_shader_explicit_arithmetic_types_float16
GL_EXT_shader_explicit_arithmetic_types_float32
GL_EXT_shader_explicit_arithmetic_types_float64
GL_EXT_shader_explicit_arithmetic_types_int16
GL_EXT_shader_explicit_arithmetic_types_int32
GL_EXT_shader_explicit_arithmetic_types_int64
GL_EXT_shader_explicit_arithmetic_types_int8
GL_EXT_shader_framebuffer_fetch
GL_EXT_shader_image_load_formatted
GL_EXT_shader_image_load_store
GL_EXT_shader_implicit_conversions
GL_EXT_shader_integer_mix
GL_EXT_shader_io_blocks
GL_EXT_shader_non_constant_global_initializers
GL_EXT_shader_realtime_clock
GL_EXT_shader_subgroup_extended_types_float16
GL_EXT_shader_subgroup_extended_types_int16
GL_EXT_shader_subgroup_extended_types_int64
GL_EXT_shader_subgroup_extended_types_int8
GL_EXT_shader_texture_lod
GL_EXT_shadow_samplers
GL_EXT_subtexture
GL_EXT_tessellation_point_size
GL_EXT_tessellation_shader
GL_EXT_texture3D
GL_EXT_texture_array
GL_EXT_texture_border_clamp
GL_EXT_texture_buffer
GL_EXT_texture_buffer_object
GL_EXT_texture_compression_bptc
GL_EXT_texture_compression_dxt1
GL_EXT_texture_compression_rgtc
GL_EXT_texture_compression_s3tc
GL_EXT_texture_compression_s3tc GL_EXT_texture_sRGB
GL_EXT_texture_compression_s3tc GL_NV_sRGB_formats
GL_EXT_texture_compression_s3tc_srgb
GL_EXT_texture_cube_map_array
GL_EXT_texture_filter_anisotropic
GL_EXT_texture_format_BGRA8888
GL_EXT_texture_integer
GL_EXT_texture_lod_bias
GL_EXT_texture_norm16
GL_EXT_texture_object
GL_EXT_texture_rg GL_OES_texture_half_float GL_EXT_color_buffer_half_float
GL_EXT_texture_sRGB_R8
GL_EXT_texture_sRGB_decode
GL_EXT_texture_sRGB_override
GL_EXT_texture_shared_exponent
GL_EXT_texture_storage
GL_EXT_texture_storage GL_OES_texture_half_float GL_EXT_color_buffer_half_float
GL_EXT_texture_storage GL_OES_texture_half_float GL_EXT_texture_rg GL_EXT_color_buffer_half_float
GL_EXT_texture_swizzle
GL_EXT_texture_type_2_10_10_10_REV
GL_EXT_texture_view
GL_EXT_timer_query
GL_EXT_transform_feedback
GL_EXT_unpack_subimage
GL_EXT_vertex_array
GL_EXT_vertex_attrib_64bit
GL_FIXED is not supported in WebGL.
GL_FRAGMENT_PRECISION_HIGH
GL_FRAGMENT_SHADER
GL_GEOMETRY_SHADER_EXT
GL_GOOGLE_cpp_style_line_directive
GL_GOOGLE_include_directive
GL_IMG_texture_compression_pvrtc
GL_INTEL_shader_integer_functions2
GL_INVALID_ENUM
GL_KHR_blend_equation_advanced
GL_KHR_memory_scope_semantics
GL_KHR_parallel_shader_compile
GL_KHR_robust_buffer_access_behavior
GL_KHR_robustness
GL_KHR_shader_subgroup_arithmetic
GL_KHR_shader_subgroup_ballot
GL_KHR_shader_subgroup_basic
GL_KHR_shader_subgroup_clustered
GL_KHR_shader_subgroup_quad
GL_KHR_shader_subgroup_shuffle
GL_KHR_shader_subgroup_shuffle_relative
GL_KHR_shader_subgroup_vote
GL_KHR_texture_compression_astc_hdr
GL_KHR_texture_compression_astc_ldr
GL_KHR_texture_compression_astc_sliced_3d
GL_MAX_
GL_NVX_multiview_per_view_attributes
GL_NV_EGL_stream_consumer_external
GL_NV_compute_shader_derivatives
GL_NV_conservative_raster_underestimation
GL_NV_cooperative_matrix
GL_NV_depth_buffer_float2
GL_NV_fence is not supported
GL_NV_fragment_shader_barycentric
GL_NV_framebuffer_mixed_samples
GL_NV_geometry_program4
GL_NV_geometry_shader_passthrough
GL_NV_integer_cooperative_matrix
GL_NV_internalformat_sample_query
GL_NV_pack_subimage
GL_NV_pixel_buffer_object
GL_NV_ray_tracing
GL_NV_read_depth
GL_NV_read_stencil
GL_NV_sample_mask_override_coverage
GL_NV_shader_atomic_int64
GL_NV_shader_framebuffer_fetch
GL_NV_shader_noperspective_interpolation
GL_NV_shader_sm_builtins
GL_NV_shader_subgroup_partitioned
GL_NV_shader_texture_footprint
GL_NV_shading_rate_image
GL_NV_stereo_view_rendering
GL_NV_texture_border_clamp
GL_NV_vertex_program4
GL_NV_viewport_array2
GL_OES_EGL_image
GL_OES_EGL_image_external
GL_OES_EGL_image_external_essl3
GL_OES_compressed_EAC_R11_signed_texture
GL_OES_compressed_EAC_R11_unsigned_texture
GL_OES_compressed_EAC_RG11_signed_texture
GL_OES_compressed_EAC_RG11_unsigned_texture
GL_OES_compressed_ETC1_RGB8_texture
GL_OES_compressed_ETC2_RGB8_texture
GL_OES_compressed_ETC2_RGBA8_texture
GL_OES_compressed_ETC2_punchthroughA_RGBA8_texture
GL_OES_compressed_ETC2_punchthroughA_sRGB8_alpha_texture
GL_OES_compressed_ETC2_sRGB8_alpha8_texture
GL_OES_compressed_ETC2_sRGB8_texture
GL_OES_copy_image
GL_OES_depth_texture
GL_OES_depth_texture GL_OES_packed_depth_stencil
GL_OES_depth_texture_cube_map
GL_OES_draw_buffers_indexed
GL_OES_draw_elements_base_vertex
GL_OES_draw_texture
GL_OES_element_index_uint
GL_OES_fbo_render_mipmap
GL_OES_geometry_point_size
GL_OES_geometry_shader
GL_OES_get_program_binary
GL_OES_gpu_shader5
GL_OES_mapbuffer
GL_OES_point_size_array
GL_OES_point_size_array not enabled.
GL_OES_point_sprite
GL_OES_primitive_bounding_box
GL_OES_rgb8_rgba8
GL_OES_sample_shading
GL_OES_sample_variables
GL_OES_shader_image_atomic
GL_OES_shader_io_blocks
GL_OES_shader_multisample_interpolation
GL_OES_single_precision
GL_OES_standard_derivatives
GL_OES_surfaceless_context
GL_OES_tessellation_point_size
GL_OES_tessellation_shader
GL_OES_texture_3D
GL_OES_texture_border_clamp
GL_OES_texture_buffer
GL_OES_texture_compression_astc
GL_OES_texture_cube_map
GL_OES_texture_cube_map_array
GL_OES_texture_float
GL_OES_texture_float GL_EXT_texture_rg
GL_OES_texture_float_linear
GL_OES_texture_half_float
GL_OES_texture_half_float GL_EXT_texture_rg
GL_OES_texture_half_float_linear
GL_OES_texture_npot
GL_OES_texture_storage_multisample_2d_array
GL_OES_texture_view
GL_OES_vertex_array_object
GL_OES_vertex_half_float
GL_OES_vertex_type_10_10_10_2
GL_OES_viewport_array
GL_OVR_multiview2
GL_RGBA4 is not color renderable
GL_VERTEX_SHADER
GL_WEBGL_video_texture
GNG
GNU
GO-
GPU.ANGLE.DisplayInitializeMS
GPU.ANGLE.ProgramCache.CacheResult
GPU.ANGLE.ProgramCache.LoadBinarySuccess
GPU.ANGLE.ProgramCache.ProgramBinarySizeBytes
GPU.ANGLE.ProgramCache.ProgramCacheHitTimeUS
Gaps in bound descriptor set indices causes the post-gap sets to misbehave
GarbageObject::destroy
GbG
Generating SPIR-V array-of-arrays, but Vulkan only supports single array level for this resource
Generating variable pointers requires capability
GenericCastToPtr
GenericCastToPtrExplicit
GenericPointer
GenericPtrMemSemantics
Geometry
Geometry execution model entry points must specify exactly one of InputPoints, InputLines, InputLinesAdjacency, Triangles or InputTrianglesAdjacency execution modes.
Geometry execution model entry points must specify exactly one of OutputPoints, OutputLineStrip or OutputTriangleStrip execution modes.
Geometry shader input variable must be declared as an array
Geometry shader is not supported in this shader version.
Geometry shader version does not match vertex shader version.
GeometryPointSize
GeometryShaderPassthroughNV
GeometryStreams
GetAvailableValidationLayers
GetDefaultQueue
GetGlobalPoolAllocator()
GetKernelLocalSizeForSubgroupCount
GetKernelMaxNumSubgroups
GetKernelNDrangeMaxSubGroupSize
GetKernelNDrangeSubGroupCount
GetKernelPreferredWorkGroupSizeMultiple
GetKernelWorkGroupSize
GetMaxPipePackets
GetNumPipePackets
GetOperatorString(TOperator)
GetReadPixelsParams
GetRenderTargetSampleCount
GetRenderTargetSamplePosition
GetShaderSpirvCode
GetTLSValue(unsigned int)
Gf-
GlobalInvocationId
GlobalLinearId
GlobalOffset
GlobalSize
GlslangToSpv.cpp
GlslangWrapperVk.cpp
Google
Google Clspv
Google Inc.
Google MLIR SPIR-V Serializer
Google Shaderc over Glslang
Google rspirv
Google spiregg
GroupAll
GroupAny
GroupAsyncCopy
GroupBroadcast
GroupCommitReadPipe
GroupCommitWritePipe
GroupDecorate
GroupFAdd
GroupFAddNonUniformAMD
GroupFMax
GroupFMaxNonUniformAMD
GroupFMin
GroupFMinNonUniformAMD
GroupIAdd
GroupIAddNonUniformAMD
GroupMemoryBarrier
GroupMemoryBarrierWithGroupSync
GroupNonUniform
GroupNonUniformAll
GroupNonUniformAllEqual
GroupNonUniformAny
GroupNonUniformArithmetic
GroupNonUniformBallot
GroupNonUniformBallotBitCount
GroupNonUniformBallotBitExtract
GroupNonUniformBallotFindLSB
GroupNonUniformBallotFindMSB
GroupNonUniformBitwiseAnd
GroupNonUniformBitwiseOr
GroupNonUniformBitwiseXor
GroupNonUniformBroadcast
GroupNonUniformBroadcastFirst
GroupNonUniformClustered
GroupNonUniformElect
GroupNonUniformFAdd
GroupNonUniformFMax
GroupNonUniformFMin
GroupNonUniformFMul
GroupNonUniformIAdd
GroupNonUniformIMul
GroupNonUniformInverseBallot
GroupNonUniformLogicalAnd
GroupNonUniformLogicalOr
GroupNonUniformLogicalXor
GroupNonUniformPartitionNV
GroupNonUniformPartitionedNV
GroupNonUniformQuad
GroupNonUniformQuadBroadcast
GroupNonUniformQuadSwap
GroupNonUniformSMax
GroupNonUniformSMin
GroupNonUniformShuffle
GroupNonUniformShuffleDown
GroupNonUniformShuffleRelative
GroupNonUniformShuffleUp
GroupNonUniformShuffleXor
GroupNonUniformUMax
GroupNonUniformUMin
GroupNonUniformVote
GroupReserveReadPipePackets
GroupReserveWritePipePackets
GroupSMax
GroupSMaxNonUniformAMD
GroupSMin
GroupSMinNonUniformAMD
GroupUMax
GroupUMaxNonUniformAMD
GroupUMin
GroupUMinNonUniformAMD
GroupWaitEvents
Gs/
Gt5
GxG
H
H&>
H4
H6
H7
H7L
H8
H8<
H=V
H>
H>+
HD2
HE?
HIGH_PRECISION
HITATTREXT
HITATTRNV
HLSL
HRG
HalfFloat
HandleAllocator.cpp
HandleAllocator::allocate allocating
HandleAllocator::allocate reusing
HandleAllocator::release releasing
HandleAllocator::reserve reserving
HashNames.cpp
Having
Header block
High
HitAttributeKHR
HitAttributeNV
HitKindKHR
HitTKHR
HlslCounterBufferGOOGLE
HlslSemanticGOOGLE
HvG
H{/
I
I$>
I/>
I0B
I16VEC2
I16VEC3
I16VEC4
I32VEC2
I32VEC3
I32VEC4
I4
I64VEC2
I64VEC3
I64VEC4
I7
I8
I8VEC2
I8VEC3
I8VEC4
I:>
IA>
IAddCarry
IAddSatINTEL
IAverageINTEL
IAverageRoundedINTEL
ICOOPMATNV
ID '
ID overflow. Try running compact-ids.
IDENTIFIER
IEqual
IF
IIMAGE1D
IIMAGE1DARRAY
IIMAGE2D
IIMAGE2DARRAY
IIMAGE2DMS
IIMAGE2DMSARRAY
IIMAGE2DRECT
IIMAGE3D
IIMAGEBUFFER
IIMAGECUBE
IIMAGECUBEARRAY
IMAGE_LINEAR
IMAGE_OPTIMAL
IMAGE_UNIFORMS
IMAGE_UNKNOWN
IMG
IMix
IMul32x16INTEL
IN
IN-
INC_OP
INFO
INOUT
INTERNAL ERROR:
INVARIANT
INotEqual
IOSurface usage hint must only contain READ or WRITE
IPG
ISAMPLER1D
ISAMPLER1DARRAY
ISAMPLER2D
ISAMPLER2DARRAY
ISAMPLER2DMS
ISAMPLER2DMSARRAY
ISAMPLER2DRECT
ISAMPLER3D
ISAMPLERBUFFER
ISAMPLERCUBE
ISAMPLERCUBEARRAY
ISUBPASSINPUT
ISUBPASSINPUTMS
ISubBorrow
ISubSatINTEL
ITEXTURE1D
ITEXTURE1DARRAY
ITEXTURE2D
ITEXTURE2DARRAY
ITEXTURE2DMS
ITEXTURE2DMSARRAY
ITEXTURE2DRECT
ITEXTURE3D
ITEXTUREBUFFER
ITEXTURECUBE
ITEXTURECUBEARRAY
IVEC2
IVEC3
IVEC4
IW<
IZE
I[
I[E
Id <
Ie5
If OpTypeBool is stored in conjunction with OpVariable, it
If count is greater than zero, source and type cannot be GL_DONT_CARE.
If ctx is EGL_NO_CONTEXT, surfaces must be EGL_NO_SURFACE
If ctx is not EGL_NOT_CONTEXT, draw or read must both be EGL_NO_SURFACE, or both not
If ctx is not EGL_NO_CONTEXT, surfaces must not be EGL_NO_SURFACE
If either EGL_PLATFORM_ANGLE_D3D_LUID_HIGH_ANGLE and/or EGL_PLATFORM_ANGLE_D3D_LUID_LOW_ANGLE are specified, at least one must non-zero.
If index layout qualifier is specified for a fragment output, location must also be specified.
If test
If the read buffer contains fixed-point or floating-point values, the draw buffer must as well.
If the read buffer contains fixed-point values, the draw buffer must as well.
If the read buffer contains signed integer values the draw buffer must as well.
If the read buffer contains unsigned integer values the draw buffer must as well.
If you crashed here, your aligned allocation is incorrect:
IgnoreIntersectionKHR
IgnoreIntersectionNV
Illegal character at fieldname start
Illegal number of components (
Illegal to have non-comment, non-whitespace tokens before #version
Illegal use of reserved word
Image 'Dim' cannot be SubpassData
Image 'Dim' must be 1D, 2D, 3D or Cube
Image 'Dim' must be 1D, Buffer, 2D, Cube, 3D or Rect
Image 'Dim' must be 2D
Image 'MS' must be 0
Image 'MS' must be 1
Image Dim SubpassData cannot be used with ImageSparseRead
Image Dim SubpassData cannot be used with OpImageTexelPointer
Image Image 'MS' parameter to be 0
Image Image 'arrayed' parameter to be 0
Image Operand Bias can only be used with ImplicitLod opcodes
Image Operand Bias requires 'Dim' parameter to be 1D, 2D, 3D or Cube
Image Operand Bias requires 'MS' parameter to be 0
Image Operand ConstOffset cannot be used with Cube Image 'Dim'
Image Operand ConstOffsets can only be used with OpImageGather and OpImageDrefGather
Image Operand ConstOffsets cannot be used with Cube Image 'Dim'
Image Operand Grad can only be used with ExplicitLod opcodes
Image Operand Grad requires 'MS' parameter to be 0
Image Operand Lod can only be used with ExplicitLod opcodes
Image Operand Lod requires 'Dim' parameter to be 1D, 2D, 3D or Cube
Image Operand Lod requires 'MS' parameter to be 0
Image Operand MakeTexelAvailableKHR can only be used with Op
Image Operand MakeTexelAvailableKHR requires NonPrivateTexelKHR is also specified: Op
Image Operand MakeTexelVisibleKHR can only be used with Op
Image Operand MakeTexelVisibleKHR requires NonPrivateTexelKHR is also specified: Op
Image Operand MinLod can only be used with ImplicitLod
Image Operand MinLod requires 'Dim' parameter to be 1D, 2D, 3D or Cube
Image Operand MinLod requires 'MS' parameter to be 0
Image Operand Offset cannot be used with Cube Image 'Dim'
Image Operand Sample can only be used with OpImageFetch,
Image Operand Sample requires non-zero 'MS' parameter
Image Operand bits Lod and Grad cannot be set at the same time
Image Operands Offset, ConstOffset, ConstOffsets cannot be used
Image View
Image has more than 1 layer, target must be TEXTURE_2D_ARRAY
Image must have either 'MS'=1 or 'Sampled'=0 or 'Sampled'=2
Image.cpp
ImageBasic
ImageBuffer
ImageCubeArray
ImageEGL.cpp
ImageFootprintNV
ImageGL.cpp
ImageGather
ImageGatherBiasLodAMD
ImageGatherExtended
ImageHelper::copyImageDataToBuffer
ImageHelper::readPixels
ImageIndex.cpp
ImageMSArray
ImageMipmap
ImageNULL.cpp
ImageQuery
ImageQueryFormat
ImageQueryLevels
ImageQueryLod
ImageQueryOrder
ImageQuerySamples
ImageQuerySize
ImageQuerySizeLod
ImageRead
ImageReadWrite
ImageReadWriteLodAMD
ImageRect
ImageSampleDrefExplicitLod
ImageSampleDrefImplicitLod
ImageSampleExplicitLod
ImageSampleFootprintNV
ImageSampleImplicitLod
ImageSampleProjDrefExplicitLod
ImageSampleProjDrefImplicitLod
ImageSampleProjExplicitLod
ImageSampleProjImplicitLod
ImageSparseDrefGather
ImageSparseFetch
ImageSparseGather
ImageSparseSampleDrefExplicitLod
ImageSparseSampleDrefImplicitLod
ImageSparseSampleExplicitLod
ImageSparseSampleImplicitLod
ImageSparseSampleProjDrefExplicitLod
ImageSparseSampleProjDrefImplicitLod
ImageSparseSampleProjExplicitLod
ImageSparseSampleProjImplicitLod
ImageSparseTexelsResident
ImageVk.cpp
ImageWrite
Imagination
ImmutableStringBuilder.cpp
ImmutableString_autogen.cpp
ImplicitLod instructions require DerivativeGroupQuadsNV or DerivativeGroupLinearNV execution mode for GLCompute execution model:
ImplicitLod instructions require Fragment or GLCompute execution model:
ImportedDeclaration
ImportedModule
In Logical addressing with variable pointers, variables
In Logical addressing, variables may not allocate a pointer
In OpPhi instruction
In Vulkan, BufferBlock is disallowed on variables in the StorageBuffer storage class
In the OpenCL environment, Arrayed may only be set to 1
In the OpenCL environment, the optional Access Qualifier
In the Vulkan environment, GLCompute execution model entry points require either the LocalSize execution mode or an object decorated with WorkgroupSize must be specified.
In the Vulkan environment, cannot store to Uniform Blocks
In the Vulkan environment, the OriginLowerLeft execution mode must not be used.
In the Vulkan environment, the PixelCenterInteger execution mode must not be used.
In the case of packing to a pixel pack buffer, pack overlapping rows row by row
In the case of unpacking from a pixel unpack buffer, unpack overlapping rows row by row
InBoundsAccessChain
InBoundsPtrAccessChain
InReadableOrder.cpp
IncomingCallableDataKHR
IncomingCallableDataNV
IncomingRayFlagsKHR
IncomingRayPayloadKHR
IncomingRayPayloadNV
Incompatible stream consumer type
Incompatible stream producer
Index
Index exceeds active uniform block count.
Index expression must be constant
Index is greater than or equal to the number of TRANSFORM_FEEDBACK_BUFFER indexed binding points.
Index is greater than the maximum supported color attachments
Index is out of bounds, can not find index
Index is out of bounds:
Index must be less than MAX_ATOMIC_COUNTER_BUFFER_BINDINGS.
Index must be less than MAX_DRAW_BUFFERS.
Index must be less than MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS.
Index must be less than MAX_UNIFORM_BUFFER_BINDINGS.
Index must be less than MAX_VERTEX_ATTRIBS.
Index must be less than program active uniform block count.
Index must be less than program active uniform count.
Index must be less than the number of workgroup dimensions (3).
Index must be less than the transform feedback varying count in the program.
Index must be less than the value of SAMPLES.
Index must be within [0, MAX_IMAGE_UNITS).
Index must be within [0, MAX_SHADER_STORAGE_BUFFER_BINDINGS).
Index must be within [0, MAX_VERTEX_ATTRIB_BINDINGS).
Index must be within [0, NUM_EXTENSIONS).
Index must be within [0, NUM_REQUESTABLE_EXTENSIONS_ANGLE).
IndexRangeCache.cpp
Indexes passed to
Indirect Commands Layout
Infinity divided by infinity during constant folding generated NaN
InfoSink.cpp
InitMappableAllocation
InitMappableDeviceMemory
InitShaderAndSerial
Initialization of an object could not be completed for implementation-specific reasons
Initialize.cpp
InitializeDll.cpp
InitializePoolIndex()
InitializeRenderPassFromDesc
InitializeVariables.cpp
Initializer
Initializer type must match the type pointed to by the Result Type
Initializers must match:
Initializing uninitialized locals caused odd behavior in a few WebGL 2 tests
Input buffer overflow
Input primitive type is not specified in the geometry shader.
Input.cpp
InputAttachment
InputAttachmentArrayDynamicIndexing
InputAttachmentArrayDynamicIndexingEXT
InputAttachmentArrayNonUniformIndexing
InputAttachmentArrayNonUniformIndexingEXT
InputAttachmentIndex
InputLines
InputLinesAdjacency
InputPatch
InputPoints
InputTrianglesAdjacency
Instance name qualifier
Instruction cannot be used without a variable pointers capability
Instruction reserved for future use, use of this instruction
Insufficient buffer size
Insufficient buffer size.
Int64Atomics
Integer overflow
Integer overflow on line number
Integer overflow when computing the product of local_size_x,
Integer overflow.
IntegerFunctions2INTEL
Intel Mac drivers mistakenly consider the parameter position of nagative vaule as invalid even if the sum of position and offset is in range, so we need to add workarounds by rewriting texelFetchOffset(sampler, position, lod, offset) into texelFetch(sampler, position + offset, lod).
Intel or NVIDIA OpenGL ES drivers are not supported.
Intensity
Interface variable id <
Interfaces passed to OpEntryPoint must be of type OpTypeVariable. Found Op
IntermNode.cpp
IntermNodePatternMatcher.cpp
IntermNode_util.cpp
IntermTraverse.cpp
Intermediate.cpp
Internal Error
Internal GLES 1 shader compile failed. Info log:
Internal GLES 1 shader link failed. Info log:
Internal NULL back-end error:
Internal Vulkan error (
Internal error linking Vulkan shaders:
Internal error parsing Vulkan shader corresponding to
Internal error:
Internal error: Unhandled operand type:
Internal error: empty execution models for function id
Internal error: missing function id
Internal error: unhandled header parse failure
Internal format is not renderable.
Internalformat is one of the unsupported unsized base internalformats.
InterpolateAtCentroid
InterpolateAtOffset
InterpolateAtSample
InterpolateAtVertexAMD
Interpolation and auxiliary storage qualifiers must match:
Interpolation type
Invalid
Invalid Arrayed
Invalid Attachment Type.
Invalid Context attribute.
Invalid D3D11on12 attribute
Invalid Depth
Invalid MS
Invalid OpSwitch: selector id
Invalid Opcode name 'Op
Invalid SPIR-V binary version
Invalid SPIR-V header.
Invalid SPIR-V magic number '
Invalid SPIR-V magic number.
Invalid SPIR-V.  The id bound is larger than the max id bound
Invalid Sampled
Invalid Vulkan shader was generated
Invalid YUV plane count
Invalid access bits when mapping buffer for reading
Invalid access bits.
Invalid attachment when the default framebuffer is bound.
Invalid attrib_list parameter
Invalid attribute
Invalid automatic trim attribute
Invalid blend equation.
Invalid blend function.
Invalid blit filter.
Invalid blit mask.
Invalid boolean value. Must be GL_FALSE or GL_TRUE.
Invalid bufSize.
Invalid buffer binding size.
Invalid buffer target.
Invalid buffer usage enum.
Invalid cache resize mode.
Invalid client vertex array type.
Invalid clip plane.
Invalid color buffer type
Invalid combination of format, type and internalFormat.
Invalid compressed image size.
Invalid condition
Invalid context attribute.
Invalid copy texture format combination.
Invalid debug severity.
Invalid debug source.
Invalid debug type.
Invalid destination texture type.
Invalid device parameter
Invalid device_type parameter
Invalid draw buffer.
Invalid draw mode.
Invalid element range.
Invalid escape sequence
Invalid expression
Invalid extended instruction import '
Invalid extended instruction number:
Invalid fence object.
Invalid fog density (must be nonnegative).
Invalid fog mode.
Invalid fog parameter.
Invalid format and type combination.
Invalid format.
Invalid framebuffer target.
Invalid handle type.
Invalid identifier.
Invalid image layout.
Invalid init declaration
Invalid instruction Op
Invalid instruction word count:
Invalid internal format.
Invalid level count.
Invalid light model parameter.
Invalid light parameter.
Invalid light.
Invalid logical operation.
Invalid mask bits.
Invalid material face.
Invalid material parameter.
Invalid matrix mode.
Invalid member count in texture template structure
Invalid memory barrier bit.
Invalid memory object parameter.
Invalid memory object.
Invalid multisample resolve type.
Invalid name.
Invalid native pixmap, XGetGeometry failed:
Invalid number of bits (
Invalid opcode:
Invalid operation for arrays
Invalid operation for interface blocks
Invalid operation for structs
Invalid operation for variables with an opaque type
Invalid operation for variables with writeonly
Invalid operation on multisampled framebuffer
Invalid operator
Invalid or unsupported precision type.
Invalid or unsupported texture target.
Invalid parameter name for framebuffer attachment.
Invalid parameter qualifier
Invalid plane count
Invalid plane offset
Invalid plane specified
Invalid platform method count:
Invalid platform method name:
Invalid pname.
Invalid point parameter value (must be non-negative).
Invalid point parameter.
Invalid point size (must be positive).
Invalid pointer query.
Invalid pointer storage class
Invalid primitive mode.
Invalid program binary format.
Invalid program binary version.
Invalid program cache attribute.
Invalid program interface.
Invalid program key size.
Invalid program resource index.
Invalid program resource property.
Invalid projection matrix. Left/right, top/bottom, near/far intervals cannot be zero, and near/far cannot be less than zero.
Invalid propCount.
Invalid provoking vertex.
Invalid query Id.
Invalid query target.
Invalid query type.
Invalid read buffer
Invalid relational operator
Invalid renderbuffer internalformat.
Invalid renderbuffer target.
Invalid scope value:
Invalid semantics value
Invalid shader binary format.
Invalid shader type.
Invalid shading model.
Invalid source texture height or width.
Invalid source texture level.
Invalid stencil.
Invalid storage class for pointer operand
Invalid storage class for target environment
Invalid storage class semantics value
Invalid stream
Invalid stream attribute
Invalid stream consumer type
Invalid stream state
Invalid stride for built-in vertex attribute.
Invalid subresource index
Invalid surface attribute.
Invalid swap behaviour.
Invalid target.
Invalid texture combine mode.
Invalid texture combine operand.
Invalid texture combine source.
Invalid texture environment mode.
Invalid texture environment parameter.
Invalid texture environment scale.
Invalid texture environment target.
Invalid texture target and format combination.
Invalid texture template struct member type
Invalid texture template type
Invalid texture unit
Invalid type for built-in vertex attribute.
Invalid type for loop index
Invalid type parameter
Invalid type.
Invalid uniform location
Invalid use of 8- or 16-bit result
Invalid use of function result id
Invalid use of function type result id
Invalid value for EGL_EXPERIMENTAL_PRESENT_PATH_ANGLE
Invalid value for EGL_PLATFORM_ANGLE_CONTEXT_VIRTUALIZATION_ANGLE attrib
Invalid value for EGL_PLATFORM_ANGLE_DEVICE_TYPE_ANGLE attrib
Invalid value for EGL_SAMPLE_RANGE_HINT_EXT.
Invalid value for EGL_TEXTURE_FORMAT
Invalid value for EGL_TEXTURE_TARGET
Invalid value for EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT or EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT.
Invalid value for EGL_YUV_COLOR_SPACE_HINT_EXT.
Invalid value for condition.
Invalid value for flags.
Invalid value for timeout.
Invalid value parameter
Invalid value.
Invalid variable index to flattened array
Invalid visual ID requested.
Invalid width.
Invalid word count: Op
Invalid wrap mode for texture type.
Invariance
Invariant
Invariant Declaration:
InverseSqrt
Iq7
IsASTDepthBelowLimit.cpp
IsAndroid() && !isSwS
IsAndroid() && IsNexus5X(mPhysicalDeviceProperties.vendorID, mPhysicalDeviceProperties.deviceID)
IsAndroid() && isQualcomm
IsAndroid() || (IsApple() && (isIntel || isAMD || isNvidia))
IsAndroid() || (IsWindows() && isIntel)
IsAndroid() || isAMD || !functions->hasExtension("GL_KHR_robust_buffer_access_behavior")
IsAndroid() || isNvidia
IsAndroid() || limitMaxTextureSize
IsApple() && functions->standard == STANDARD_GL_DESKTOP
IsApple() && functions->standard == STANDARD_GL_DESKTOP && GetMacOSVersion() < OSVersion(10, 11, 0)
IsApple() && functions->standard == STANDARD_GL_ES && !(isAMD && IsWindows())
IsApple() && isAMD
IsApple() && isIntel && GetMacOSVersion() < OSVersion(10, 12, 0)
IsApple() && isIntel && GetMacOSVersion() < OSVersion(10, 12, 6)
IsApple() && isIntel && GetMacOSVersion() >= OSVersion(10, 12, 4)
IsApple() || (IsLinux() && isAMD)
IsApple() || (IsWindows() && isAMD)
IsApple() || IsAndroid() || IsWindows()
IsApple() || isNvidia
IsAssignment(TOperator)
IsFinite
IsHelperInvocation
IsHelperInvocationEXT
IsInf
IsLinux() && functions->standard == STANDARD_GL_DESKTOP && isAMD
IsLinux() && isAMD && isMesa && mesaVersion < (std::array<int, 3>{19, 3, 5})
IsLinux() && isIntel
IsLinux() && isNvidia
IsLinux() && isVMWare
IsLinux() || (IsAndroid() && isNvidia) || (IsWindows() && isNvidia)
IsNan
IsNexus5X(vendor, device)
IsNormal
IsValidEvent
IsValidReserveId
IsWindows() && isAMD
IsWindows() && isIntel
Isolines
Issue clearing framebuffers with linear attachments when GL_FRAMEBUFFER_SRGB is enabled
Issue with 1-bit alpha framebuffer formats
Issues with blitFramebuffer when the parameters don't match the framebuffer size.
It is an error to use gl_WorkGroupSize before declaring the local group size
It is invalid to change default FBO's attachments
It is undefined behavior to use a pixel pack buffer that is bound for transform feedback.
It is undefined behavior to use a pixel unpack buffer that is bound for transform feedback.
It is undefined behavior to use a vertex buffer that is bound for transform feedback.
It is undefined behavior to use an element array buffer that is bound for transform feedback.
It is undefined behavior to use an uniform buffer that is bound for transform feedback.
It is undefined behaviour to have a used but unbound uniform buffer.
It is undefined behaviour to use a uniform buffer that is too small.
IterationMultiple
IterationMultiple loop control operand must be greater than zero
Ith value does not match COLOR_ATTACHMENTi or NONE.
Its Storage Class operand must be the same as the Storage Class
J
J)>
J.9
J4
J7
J8
J9<
JBD
JEF
JX5
J[5
Jan
January
Jk&
JrG
Jt:
Ju7
Jul
July
Jun
June
Jv<
Jy7
JzG
J~G
K
K'>
K+5
K2>
K7
K8
K:E
K=>
K@[
KHR_gl_renderbuffer_image not supported.
KHR_gl_texture_2D_image not supported.
KHR_gl_texture_3D_image not supported.
KHR_gl_texture_cubemap_image not supported.
KS5
Kf@
Khronos
Khronos Glslang Reference Front End
Khronos LLVM/SPIR-V Translator
Khronos SPIR-V Tools Assembler
Khronos SPIR-V Tools Linker
Kr5
Kw7
K|\
L
L!>
L-5
L1B
L3V
L6
L7
L8
L;,
LAYOUT
LBV
LEFT_ANGLE
LEFT_ASSIGN
LEFT_BRACE
LEFT_BRACKET
LEFT_OP
LEFT_PAREN
LEVEL
LE_OP
LOW
LOW_PRECISION
LX<
L^5
LaT
Label instructions must be in a function body
Label length is larger than GL_MAX_LABEL_LENGTH.
LastUseFrameIndex
Latency must be positive
LaunchIdKHR
LaunchIdNV
LaunchSizeKHR
Layer invalid for framebuffer texture attachment.
Layout qualification must match:
Layout qualifier
Ldexp
Length is not defined.
Length must not be zero.
LessOrGreater
Level is negative.
Level of detail outside of range.
Lexer.cpp
LifetimeStart
LifetimeStop
Light parameter out of range.
Limit max 3d texture size and max array texture layers to 1024 to avoid system hang
Limit max texture size to 4096 to avoid frequent out-of-memory errors
Limiting binary format support count to zero while FrameCapture enabled
LineLoopHelper::getIndexBufferForElementArrayBuffer
LineStream
Linear
Linear blit not supported in this extension.
Link.cpp
Linkage
LinkageAttributes
Linked
Linker Objects
Linker: LLD 11.0.0 (https://github.com/llvm/llvm-project/ 4e813bbdf335626a741398314709a535ef52fe8e)
Linking
Literal string is longer than
LiteralSampler
Load cooperative matrix
Local variables can only use the const storage qualifier.
LocalSize
LocalSizeHint
LocalSizeHintId
LocalSizeId
Location cannot be less than 0.
Location layout qualifier
Location lengths must not be greater than 1024 characters.
Location must be less than (MAX_VERTEX_UNIFORM_VECTORS + MAX_FRAGMENT_UNIFORM_VECTORS) * 4
Location name lengths must not be greater than 256 characters.
Location of variable
Log2
LogGLDebugMessage
LogGLDebugMessage(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*)
Logger.cpp
LoggingAnnotator.cpp
Logical addressing not supported:
LogicalEqual
LogicalNot
LogicalNotEqual
Loop Body
Loop Condition
Loop Terminal Expression
Loop header
Loop index cannot be compared with non-constant expression
Loop index cannot be initialized with non-constant expression
Loop index cannot be modified by non-constant expression
Loop index cannot be statically assigned to within the body of the loop
Loop with condition
LoopMerge
Low
Luminance
LunarG
LzE
L|O
M
M*>
M,5
M5>
M7
M8
M@>
MAX_COMPUTE_WORK_GROUP_INVOCATIONS.
MAX_NUM_ACTIVE_VARIABLES requires a buffer or block interface.
MAX_TEXTURE_IMAGE_UNITS
MEDIUM
MEDIUM_PRECISION
MG
MOD_ASSIGN
MS must be 0 in the OpenCL environement.
MUL_ASSIGN
M\5
Mac incorrectly executes both sides of && and || expressions when they should short-circuit.
Macro redefined; different argument names:
Macro redefined; different number of arguments:
Macro redefined; different substitutions:
Macro redefined; function-like versus object-like:
Macro.cpp
MacroExpander.cpp
MakeAvailableKHR
MakePointerAvailable
MakePointerAvailableKHR cannot be used with OpLoad.
MakePointerVisible
MakePointerVisibleKHR cannot be used with OpStore.
MakePointerVisibleKHR is specified.
MakeStaticString(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::strings
MakeTexelAvailable
MakeTexelAvailableKHR
MakeTexelVisible
MakeTexelVisibleKHR
MakeVisibleKHR
Many platforms have issues with blitFramebuffer when the parameters are large.
Mapped range does not fit into buffer dimensions.
Mapping of a memory object has failed
Mar
March
MaskNumber cannot be greater than or equal to the value of MAX_SAMPLE_MASK_WORDS.
Matched Uniform or Storage blocks must all be anonymous, or all be named:
Matched shader interfaces are using different instance names.
Material parameter out of range.
Matrix Packing
Matrix access is out of bounds, matrix has
Matrix types can only be parameterized as having only 2, 3, or 4 columns.
Matrix types can only be parameterized with floating-point types.
MatrixInverse
MatrixStride
MatrixTimesMatrix
MatrixTimesScalar
MatrixTimesVector
MaxByteOffset
MaxByteOffsetId
MaxIterations
Maximum Control Flow nesting depth exceeded.
May
MbT
MbcntAMD
Medium
Member #
MemberDecorateString
MemberDecorateStringGOOGLE
MemberName
Memory Semantics Acquire and AcquireRelease cannot be used with
Memory Semantics Volatile can only be used with atomic instructions
Memory Semantics ids must be OpConstant when Shader capability is present
Memory Semantics must be a constant instruction when CooperativeMatrixNV capability is present
Memory accesses with PhysicalStorageBufferEXT must use Aligned.
Memory model must be OpenCL in the OpenCL environment.
Memory model must be VulkanKHR for WebGPU environment.
Memory qualifiers must match:
MemoryBarrierAtomicCounter
MemoryBuffer.cpp
MemoryNamedBarrier
MemoryObject.cpp
MemoryObjectGL.cpp
MemoryObjectVk.cpp
MemoryProgramCache.cpp
Merge Block
Merge Block and Continue Target must be different ids
Merge Block may not be the block containing the OpLoopMerge
Mesa %d.%d.%d
MeshNV
MeshPrimitivesNV
MeshShadingNV
Message length is larger than GL_MAX_DEBUG_MESSAGE_LENGTH.
Metal features
Metal platform is unsupported.
MinIterations
MinLod
Minus
Mip level invalid for framebuffer texture attachment.
Mipmap level must be 0 when attaching a texture.
Mismatch between texture format and sampler type (signed/unsigned/float/shadow).
MissKHR
MissNV
Missing OpFunctionEnd at end of module.
Missing a valid input primitive declaration before declaring an unsized array input
Missing argument
Missing condition
Missing entry point: Each stage requires one entry point
Missing expression
Missing function type definition.
Missing init declaration
Missing main()
Missing module.
Missing program object
Missing read attachment.
Missing required OpMemoryModel instruction.
Missing required attribute for EGL_IOSURFACE
Missing required parameter
Missing shader object
MnW
Modf
ModfStruct
Module contains unreachable blocks during merge return.  Run dead branch elimination before merge return.
Module has incomplete header: only
ModuleProcessed
Mon
Monday
More parameters are required than were provided.
Mp5
Mq7
MulAdd cooperative matrices
MultiView
MultiViewport
Multiple case constructs have branches to the case construct that targets
Multiple function bodies in multiple compilation units for the same signature in the same stage:
Multiple planes bound to same texture object
Multiple uniforms bound to location
Multisampled depth/stencil blit is not supported by this extension.
Must have element array buffer bound.
Must specify major version if you specify a minor version.
Mz/
M}7
N
N#@
N$>
N+>
N10__cxxabiv116__shim_type_infoE
N10__cxxabiv117__class_type_infoE
N10__cxxabiv120__si_class_type_infoE
N10__cxxabiv121__vmi_class_type_infoE
N7
N8
NClamp
NEF
NE_OP
NK+
NMax
NMin
NONE
NONPRIVATE
NONUNIFORM
NOPERSPECTIVE
NOTE:
NOTIFICATION
NSZ
NSt3__110__stdinbufIcEE
NSt3__110__stdinbufIwEE
NSt3__110__time_putE
NSt3__110ctype_baseE
NSt3__110money_baseE
NSt3__110moneypunctIcLb0EEE
NSt3__110moneypunctIcLb1EEE
NSt3__110moneypunctIwLb0EEE
NSt3__110moneypunctIwLb1EEE
NSt3__111__money_getIcEE
NSt3__111__money_getIwEE
NSt3__111__money_putIcEE
NSt3__111__money_putIwEE
NSt3__111__stdoutbufIcEE
NSt3__111__stdoutbufIwEE
NSt3__112__do_messageE
NSt3__112codecvt_baseE
NSt3__112future_errorE
NSt3__113basic_istreamIcNS_11char_traitsIcEEEE
NSt3__113basic_istreamIwNS_11char_traitsIwEEEE
NSt3__113basic_ostreamIcNS_11char_traitsIcEEEE
NSt3__113basic_ostreamIwNS_11char_traitsIwEEEE
NSt3__113messages_baseE
NSt3__114__num_get_baseE
NSt3__114__num_put_baseE
NSt3__114__shared_countE
NSt3__114error_categoryE
NSt3__115basic_streambufIcNS_11char_traitsIcEEEE
NSt3__115basic_streambufIwNS_11char_traitsIwEEEE
NSt3__116__narrow_to_utf8ILm32EEE
NSt3__117__assoc_sub_stateE
NSt3__117__widen_from_utf8ILm32EEE
NSt3__119__iostream_categoryE
NSt3__120__time_get_c_storageIcEE
NSt3__120__time_get_c_storageIwEE
NSt3__123__future_error_categoryE
NSt3__123__system_error_categoryE
NSt3__124__generic_error_categoryE
NSt3__15ctypeIcEE
NSt3__15ctypeIwEE
NSt3__16locale5__impE
NSt3__16locale5facetE
NSt3__17codecvtIDic11__mbstate_tEE
NSt3__17codecvtIDsc11__mbstate_tEE
NSt3__17codecvtIcc11__mbstate_tEE
NSt3__17codecvtIwc11__mbstate_tEE
NSt3__17collateIcEE
NSt3__17collateIwEE
NSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE
NSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE
NSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE
NSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE
NSt3__18ios_base7failureE
NSt3__18ios_baseE
NSt3__18messagesIcEE
NSt3__18messagesIwEE
NSt3__18numpunctIcEE
NSt3__18numpunctIwEE
NSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE
NSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE
NSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE
NSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE
NSt3__19__num_getIcEE
NSt3__19__num_getIwEE
NSt3__19__num_putIcEE
NSt3__19__num_putIwEE
NSt3__19basic_iosIcNS_11char_traitsIcEEEE
NSt3__19basic_iosIwNS_11char_traitsIwEEEE
NSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE
NSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE
NSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE
NSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE
NSt3__19time_baseE
NULL buffer.
NV
NVCtrl.c
Name conflicts between a uniform and a uniform block field:
Name conflicts between a uniform and an attribute:
Name conflicts between uniform block field names:
Name contains invalid characters.
Name of a built-in function cannot be redeclared as function
NameEmbeddedUniformStructs.cpp
NamedBarrierInitialize
Nc5
Nd
Near value cannot be greater than far.
Nearest
Need to map buffer for either reading or writing.
Negate conditional
Negate value
Negative baseViewIndex.
Negative buffer size.
Negative count.
Negative layer.
Negative length.
Negative maxcount.
Negative modulus operator operand encountered during constant folding. Results are undefined.
Negative number of attachments.
Negative offset.
Negative size.
Neither a front-end constant nor a spec constant.
Next token is
Nf,
NgW
NhG
Nm5
NnG
No GL context current to calling thread.
No OpEntryPoint instruction was found. This is only allowed if the Linkage capability is being used.
No Texture is bound to the specified target.
No Transform Feedback object is active.
No active compute shader stage in this program.
No active geometry shader stage in this program.
No active program for the compute shader stage.
No active read framebuffer.
No compiled fragment shader when at least one graphics shader is attached.
No compiled shaders.
No compiled vertex shader when at least one graphics shader is attached.
No context is current.
No defined conversion between clear value and attachment format.
No element array buffer and no pointer.
No errors.  No code generation or linking was requested.
No external texture bound
No external texture bound at one or more specified texture units
No function definition (body) found:
No image internal format specified
No local work group size specified
No loop body
No loop condition
No matching ES Bit
No num_views specified
No precision specified
No precision specified (int)
No precision specified for (float)
No program binary formats supported.
No shared context.
No worker pbuffers.
NoAlias
NoCapture
NoContraction
NoLine
NoPerspective
NoReadWrite
NoSignedWrap
NoUnsignedWrap
NoWait
NoWrite
Non-L-value cannot be passed for 'out' or 'inout' parameters.
Non-OpFunctionParameter (opcode: %d) found inside function but outside basic block
Non-constant-index-expression
Non-semantic OpExtInst must not appear before types
Non-semantic OpExtInst within function definition must appear in a block
Non-unique OpEntryPoint interface
NonPrivatePointer
NonPrivatePointerKHR
NonPrivatePointerKHR must be specified if
NonPrivatePointerKHR must be specified if MakePointerAvailableKHR is specified.
NonPrivatePointerKHR requires a pointer in Uniform,
NonPrivateTexel
NonPrivateTexelKHR
NonReadable
NonSemantic extended instruction sets cannot be declared without SPV_KHR_non_semantic_info.
NonSemantic.
NonSemantic.DebugPrintf
NonWritable
Nontemporal
Nop
Normalize
Not a valid compressed texture format.
Not a valid sync pointer.
Not a valid texture object name.
Not all planes specified
Not an allowed program resource property for this program interface
Not enough arguments for macro
Not enough pipeline cache data read.
Not enough space in bound transform feedback buffers.
Not initialized.
NotInf
NotNaN
Note: Additional non-conformant packing restrictions are enforced on D3D9.
Notification
Nov
November
Now at end of input.
Ns
Nt5
NumEnqueuedSubgroups
NumWorkgroups
Number of (literal, label) pairs in OpSwitch (
Number of Global Variables (Storage Class other than 'Function') exceeded the valid limit (
Number of OpTypeStruct members (
Number of constructor parameters does not match the number of structure fields
Number of image operand ids doesn't correspond to the bit mask
Number of local variables ('Function' Storage Class) exceeded the valid limit (
Number of views does not match the previous declaration
O
O">
O"Y
O*5
O-
O->
O7
O8
O8>
O;>
OCB
OD@
OaG
Object cannot be used because it has not been generated.
Object:
ObjectRayTmaxNV
ObjectRayTminNV
Observer.cpp
Oct
October
Offset and size must be multiple of 4.
Offset layout qualifier
Offset must be a multiple of sizeof(uint) in basic machine units.
Offset must be a multiple of the passed in datatype.
Offset must be multiple of 4
Offset must be multiple of value of SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT.
Offset must be multiple of value of UNIFORM_BUFFER_OFFSET_ALIGNMENT.
Offset overflows texture dimensions.
Offset overlapping
Ok>
On some GPUs, program binaries don't contain transform feedback varyings
On some drivers TexImage sometimes seems to interact with the Framebuffer
Only NONE or BACK are valid draw buffers for the default framebuffer
Only UNSIGNED_SHORT and UNSIGNED_BYTE types are supported.
Only allowed with shader storage blocks, variables declared within shader storage blocks and variables declared as image types.
Only array uniforms may have count > 1.
Only nearest filtering can be used when blitting buffers other than the color buffer.
Only one push_constant block is allowed per stage
Only one shaderRecordNV buffer block is allowed per stage
Only one taskNV interface block is allowed per shader
Only std140 layout is allowed in WebGL
Only whole-buffer blit is supported from a multisampled read buffer in this extension.
Only whole-buffer depth and stencil blits are supported by this extension.
OpBeginInvocationInterlockEXT/OpEndInvocationInterlockEXT require Fragment execution model
OpBeginInvocationInterlockEXT/OpEndInvocationInterlockEXT require a fragment shader interlock execution mode.
OpBranch or OpBranchConditional instruction.
OpBranchConditional or OpSwitch instruction.
OpBranchConditional requires either 3 or 5 parameters
OpConstantNull Result Type <id> '
OpConstantSampler Result Type <id> '
OpControlBarrier requires one of the following Execution Models: TessellationControl, GLCompute or Kernel
OpDecorate SpecId decoration target <id> '
OpDecorate decoration '
OpDecorate, OpDecorateId, and OpGroupMemberDecorate
OpDecorationGroup is not allowed in the WebGPU execution
OpDemoteToHelperInvocationEXT requires Fragment execution model
OpEntryPoint Entry Point <id> '
OpEntryPoint interfaces must be OpVariables with Storage Class of Input(1) or Output(3). Found Storage Class
OpEntryPoint interfaces should only list global variables
OpExecutionMode Entry Point <id> '
OpExecutionMode is only valid when the Mode operand is an execution mode that takes no Extra Operands, or takes Extra Operands that are not id operands.
OpExecutionModeId is only valid when the Mode operand is an execution mode that takes Extra Operands that are id operands.
OpExtInst set Id
OpFunction Function Type <id> '
OpFunction Result Type <id> '
OpFunctionCall Argument <id> '
OpFunctionCall Function <id> '
OpFunctionCall Function <id>'s parameter count does not match the argument count.
OpFunctionCall Result Type <id> '
OpFunctionEnd inside basic block
OpFunctionEnd without corresponding OpFunction
OpFunctionParameter
OpFunctionParameter Result Type <id> '
OpG
OpGroupDecorate Decoration group <id> '
OpGroupDecorate is not allowed in the WebGPU execution
OpGroupDecorate may not target OpDecorationGroup <id> '
OpGroupMemberDecorate Decoration group <id> '
OpGroupMemberDecorate Structure type <id> '
OpGroupMemberDecorate is not allowed in the WebGPU execution
OpImageQueryLod requires DerivativeGroupQuadsNV or DerivativeGroupLinearNV execution mode for GLCompute execution model
OpImageQueryLod requires Fragment or GLCompute execution model
OpImageRead, OpImageWrite, OpImageSparseFetch and
OpImageSparseRead
OpIsHelperInvocationEXT requires Fragment execution model
OpKill requires Fragment execution model
OpLabel inside basic block
OpLabel outside function
OpLine Target <id> '
OpLoad Pointer <id> '
OpLoad Result Type <id> '
OpLoad type for pointer <id> '
OpLoopMerge must be the second-to-last instruction in
OpLoopMerge must immediately precede either an
OpMemberDecorate Structure type <id> '
OpMemberDecorate decoration  '
OpMemberName Member <id> '
OpMemberName Type <id> '
OpMemoryModel should only be provided once.
OpPhi does not have an equal number of incoming values and basic blocks.
OpPhi must appear within a non-entry block before all
OpPhi's incoming basic block <id>
OpPhi's number of incoming blocks (
OpPhi's result type <id>
OpReturn can only be called from a function with void
OpReturnValue Value <id> '
OpReturnValue value's type <id> '
OpSelectionMerge must be the second-to-last
OpSelectionMerge must immediately precede either an
OpSpecConstant opcode table out of sync
OpSpecConstantOp opcode
OpStore Object <id> '
OpStore Pointer <id> '
OpStore type for pointer <id> '
OpTypeArray Element Type <id> '
OpTypeArray Length <id> '
OpTypeCooperativeMatrixNV Cols <id> '
OpTypeCooperativeMatrixNV Component Type <id> '
OpTypeCooperativeMatrixNV Rows <id> '
OpTypeCooperativeMatrixNV Scope <id> '
OpTypeFunction Parameter Type <id> '
OpTypeFunction Return Type <id> '
OpTypeFunction may not take more than
OpTypeInt has invalid signedness:
OpTypePointer Type <id> '
OpTypeRuntimeArray Element Type <id> '
OpTypeRuntimeArray must be decorated with Block if it
OpTypeRuntimeArray must be decorated with BufferBlock
OpTypeRuntimeArray.For Vulkan OpTypeRuntimeArray can only
OpTypeRuntimeArray.For WebGPU OpTypeRuntimeArray can only
OpTypeSampledImage, OpTypeAccelerationStructureNV, OpTypeAccelerationStructureKHR, OpTypeRayQueryProvisionalKHR,
OpTypeStruct Member Type <id> '
OpTypeVector Component Type <id> '
OpTypeVector. Found Op
OpUndef is disallowed
OpVariable
OpVariable Initializer <id> '
OpVariable Result Type <id> '
OpVariable storage class cannot be Generic
OpVariable, <id> '
OpVectorShuffle component literals count does not match Result Type <id> '
Opcode
OpenCL
OpenCL.DebugInfo.100
OpenCL.DebugInfo.100 debug base type encoding
OpenCL.DebugInfo.100 debug composite type
OpenCL.DebugInfo.100 debug imported entity
OpenCL.DebugInfo.100 debug info flags
OpenCL.DebugInfo.100 debug operation
OpenCL.DebugInfo.100 debug type qualifier
OpenCL.std
OpenCL_C
OpenCL_CPP
OpenGL ES
OpenGL ES 1.x or 3.2 Required
OpenGL ES 2.0 is not supportable.
OpenGL ES 3.0 Required.
OpenGL ES 3.1 Required
OpenGL ES GLSL ES
OpenGL GLSL
OpenGL platform is unsupported.
OpenGL workarounds
OpenGL_ES
Operand
Operand type must be a pointer
Operation not permitted on an object without an associated state.
Operator.cpp
Optional Image Operands are not allowed in the OpenCL
OqG
Ordered
OriginLowerLeft
OriginUpperLeft
Os7
Other
Other query is active.
Other warnings have been suppressed.
Ou:
OuterProduct
Output layout location specified multiple times.
Output primitive type is not specified in the geometry shader.
OutputESSL.cpp
OutputGLSL.cpp
OutputGLSLBase.cpp
OutputLineStrip
OutputLinesNV
OutputMemory
OutputMemoryKHR
OutputPatch
OutputPoints
OutputTree.cpp
OutputTriangleStrip
OutputTrianglesNV
OutputVulkanGLSL.cpp
Overlay.cpp
OverlayVk.cpp
OverlayWidgets.cpp
Overlay_autogen.cpp
Overlay_font_autogen.cpp
P
P'>
P5
P6
P7
P8
P>+
P?
PACKED
PATCH
PAYLOADEXT
PAYLOADINEXT
PAYLOADINNV
PAYLOADNV
PB=
PBD
PD2
PERCENT
PERPRIMITIVENV
PERTASKNV
PERVERTEXNV
PERVIEWNV
PGE
PLUS
PM
PMurHash.cpp
PRECISE
PackDouble2x32
PackHalf2x16
PackSnorm2x16
PackSnorm4x8
PackUnorm2x16
PackUnorm4x8
PackedEGLEnums_autogen.cpp
PackedEnums.cpp
PackedGLEnums_autogen.cpp
Parameter cannot be used if target is not EGL_LINUX_DMA_BUF_EXT
Parameter cannot be used without EGL_EXT_image_dma_buf_import support.
Parameter cannot be used without EGL_EXT_image_dma_buf_import_modifiers support.
Parameter outside of bounds.
Params less than 0 or greater than GL_MAX_FRAMEBUFFER_HEIGHT.
Params less than 0 or greater than GL_MAX_FRAMEBUFFER_SAMPLES.
Params less than 0 or greater than GL_MAX_FRAMEBUFFER_WIDTH.
ParseContext.cpp
ParseContextBase.cpp
ParseHelper.cpp
PartialCount
PartialCount and DontUnroll loop controls must not both be specified
PartitionedExclusiveScanNV
PartitionedInclusiveScanNV
PartitionedReduceNV
Passed in texture target and format must match the one originally used to define the texture.
Passed in texture type must match the one originally used to define the texture.
PbufferSurfaceEGL.cpp
PbufferSurfaceGLX.cpp
Pe[
PeelCount
PeelCount and DontUnroll loop controls must not both be specified
PerPrimitiveNV
PerTaskNV
PerVertexNV
PerViewAttributesNV
Performance
Performance: dynamic indexing of vectors and matrices is emulated and can be slow.
PersistentCommandPool.cpp
Persistently map buffer memory to reduce map/unmap IOCTL overhead.
Ph4
Phi
Physical Device
Physical32
Physical64
PhysicalStorageBuffer
PhysicalStorageBuffer64
PhysicalStorageBuffer64EXT
PhysicalStorageBufferAddresses
PhysicalStorageBufferAddressesEXT
PhysicalStorageBufferEXT
PhysicalStorageBufferEXT must not be used with OpVariable.
PiG
Pipeline Cache
Pipeline Layout
Pipes
Pixel data cannot be null.
Pixel data must be null.
PixelCenterInteger
PixelInterlockOrderedEXT
PixelInterlockUnorderedEXT
PixmapSurfaceGLX.cpp
Pj5
Plane count must be 0 for RGB buffer
Planes cannot be specified
Platform ANGLE extension is not active
Platform Device extension is not active
Platform.cpp
Plus
PlusUconst
PointMode
PointStream
Pointer can only be converted to another pointer or int scalar:
Pointer can only be converted to another pointer, int scalar or 32-bit int vector:
Pointer operand
Pointer storage class must be PhysicalStorageBufferEXT:
Pointer type in OpTypeForwardPointer is not a pointer type.
PoolAlloc.cpp
PoolIndex
Portability
Positive sign
Possible extensions include:
Post-Decrement
Post-Increment
Pow
Pp.cpp
PpAtom.cpp
PpContext.cpp
PpScanner.cpp
PpTokens.cpp
PqW
Pre-Decrement
Pre-Increment
Precise Declaration:
Precision emulation not supported for this output type.
Precision qualifiers have to be after interpolation qualifiers.
Precision qualifiers have to be after layout qualifiers.
Precision qualifiers have to be after memory qualifiers.
Precision qualifiers have to be after storage qualifiers.
Precision qualifiers must match:
Preexisting GL error
Preferred device ICD not found. Using default physicalDevice instead.
Preprocessor.cpp
Presence of invariant qualifier must match:
Presence of precise qualifier must match:
Primcount must be greater than or equal to zero.
Primitive mode is incompatible with the input primitive type of the geometry shader.
PrimitiveId
Prior to SPIR-V 1.4, specialization constant operation UConvert requires Kernel capability or extension SPV_AMD_gpu_shader_int16
Process2DQuadTessFactorsAvg
Process2DQuadTessFactorsMax
Process2DQuadTessFactorsMin
ProcessIsolineTessFactors
ProcessQuadTessFactorsAvg
ProcessQuadTessFactorsMax
ProcessQuadTessFactorsMin
ProcessTriTessFactorsAvg
ProcessTriTessFactorsMax
ProcessTriTessFactorsMin
Profile specification
Program binary format is not valid.
Program binary not accessible.
Program binary too large or changed during access.
Program doesn't exist.
Program has not been successfully linked.
Program index out of range.
Program link or binary loading failed with no info log.
Program link or binary loading failed:
Program not linked.
Program object expected.
Program object was not linked with its PROGRAM_SEPARABLE status set.
Program pipeline does not exist.
Program pipeline link failed
Program.cpp
ProgramExecutable.cpp
ProgramExecutableVk.cpp
ProgramGL.cpp
ProgramGL::LinkEventGL::wait
ProgramGL::LinkEventNativeParallel::wait
ProgramGL::LinkTask::run
ProgramGL::link
ProgramGL::load
ProgramLinkedResources.cpp
ProgramNULL.cpp
ProgramPipeline.cpp
ProgramPipelineGL.cpp
ProgramPipelineImpl.cpp
ProgramPipelineNULL.cpp
ProgramPipelineVk.cpp
ProgramVk.cpp
PruneEmptyCases.cpp
PruneNoOps.cpp
Ps:
PtrCastToGeneric
PtrDiff
PtrEqual
PtrNotEqual
Pure
Pure virtual function called!
PushConstant
PushConstant OpVariable <id> '
PushConstant id '
PushConstants
Pv/
Py5
P9
Q
Q%>
Q(,
Q,,
Q/.
Q0>
Q39
Q7
Q8
Q;2
Q;>
Q>
QAD
QG
QN+
QUESTION
QUEUEFAMILYCOHERENT
QY5
QYC
Qf0
QmO
QuadReadAcrossDiagonal
QuadReadAcrossX
QuadReadAcrossY
QuadReadLaneAt
Quads
QualifierTypes.cpp
QuantizeToF16
Query Pool
Query extension not enabled.
Query is active.
Query is not active.
Query type does not match target.
Query.cpp
QueryGL.cpp
QueryImpl.cpp
QueryNULL.cpp
QueryVk.cpp
QueueFamily
QueueFamilyKHR for OpAtomic* operations
Quite some OpenGL ES drivers don't implement readPixels for RGBA/UNSIGNED_SHORT from EXT_texture_norm16 correctly
QyT
Q{/
Q}G
Q/
R
R*>
R,9
R0.
R11fG11fB10f
R16
R16Snorm
R16f
R16i
R16ui
R2
R32f
R32i
R32ui
R7
R8
R8Snorm
R8i
R8ui
RAYQUERYEXT
READONLY
RESOURCE
RESTRICT
RETURN
RG
RGBA(
RGx
RIGHT_ANGLE
RIGHT_ASSIGN
RIGHT_BRACE
RIGHT_BRACKET
RIGHT_OP
RIGHT_PAREN
RO-
RR0
RTN
RTP
RWByteAddressBuffer
RWStructuredBuffer
RWTexture
RWTexture1D
RWTexture1DArray
RWTexture2D
RWTexture2DArray
RWTexture3D
R[E
Radians
RayGenerationKHR
RayGenerationNV
RayGeometryIndexKHR
RayQueryCandidateIntersectionAABBKHR
RayQueryCandidateIntersectionKHR
RayQueryCandidateIntersectionTriangleKHR
RayQueryCommittedIntersectionGeneratedKHR
RayQueryCommittedIntersectionKHR
RayQueryCommittedIntersectionNoneKHR
RayQueryCommittedIntersectionTriangleKHR
RayQueryConfirmIntersectionKHR
RayQueryGenerateIntersectionKHR
RayQueryGetIntersectionBarycentricsKHR
RayQueryGetIntersectionCandidateAABBOpaqueKHR
RayQueryGetIntersectionFrontFaceKHR
RayQueryGetIntersectionGeometryIndexKHR
RayQueryGetIntersectionInstanceCustomIndexKHR
RayQueryGetIntersectionInstanceIdKHR
RayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR
RayQueryGetIntersectionObjectRayDirectionKHR
RayQueryGetIntersectionObjectRayOriginKHR
RayQueryGetIntersectionObjectToWorldKHR
RayQueryGetIntersectionPrimitiveIndexKHR
RayQueryGetIntersectionTKHR
RayQueryGetIntersectionTypeKHR
RayQueryGetIntersectionWorldToObjectKHR
RayQueryGetRayFlagsKHR
RayQueryGetRayTMinKHR
RayQueryGetWorldRayDirectionKHR
RayQueryGetWorldRayOriginKHR
RayQueryInitializeKHR
RayQueryProceedKHR
RayQueryTerminateKHR
RayTmaxKHR
RayTminKHR
RayTracingNV
RayTracingProvisionalKHR
RayTraversalPrimitiveCullingProvisionalKHR
Reached non-composite type while indexes still remain to be traversed.
Reaching warning limit for cache load failures, silencing subsequent warnings.
Read and draw framebuffers must both exist for a blit to succeed.
Read and write color attachments cannot be the same image.
Read and write depth stencil attachments cannot be the same image.
Read buffer has no attachment.
Read buffer is GL_NONE.
Read buffer must be GL_NONE or GL_BACK when reading from the default framebuffer.
ReadClockKHR
ReadOnly
Reading a token:
RearrangeEXTTextureNorm16Pixels
Received VK_INCOMPLETE: Old:
RecordConstantPrecision.cpp
Rectangle texture cannot have a compressed format.
RecurrentAddExpr
Recursion detected:
Recursive function call in the following call chain:
Reducing stack by rule %d (line %lu):
Reference of struct type
Reflect
Refract
RegenerateStructNames.cpp
RelaxedPrecision
ReleaseEvent
Relinking a program in parallel is buggy
RemoveArrayLengthMethod.cpp
RemoveAtomicCounterBuiltins.cpp
RemoveDynamicIndexing.cpp
RemoveInactiveInterfaceVariables.cpp
RemoveInvariantDeclaration.cpp
RemovePow.cpp
RemoveTree.cpp
RemoveUnreferencedVariables.cpp
Render Pass
RenderTargetVk.cpp
Renderbuffer width and height cannot be negative and cannot exceed maximum texture size.
Renderbuffer.cpp
RenderbufferGL.cpp
RenderbufferNULL.cpp
RenderbufferVk.cpp
RendererEGL.cpp
RendererGL.cpp
RendererGLX.cpp
RendererVk.cpp
RendererVk::queueCommands
RendererVk::queuePresent
RendererVk::synchronizeCpuGpuTime
RendererVk::waitForWorkerThreadIdle
Repeat
RepeatMirrored
Repeated assignment to swizzled values inside a GLSL user-defined function have incorrect results
ReplaceClipDistanceVariable.cpp
ReplaceShadowingVariables.cpp
ReplaceVariable.cpp
Replaces DXT1 sRGB with DXT1 sRGB Alpha as a driver bug workaround.
ReportIntersectionKHR
ReportIntersectionNV
Requested
Requested GLES version is not supported.
Requires both binding and offset
ResType
Reserved word.
ReservedReadPipe
ReservedWritePipe
Reset status is not valid
Reset texture base level before calling glTexImage2D to work around pixel comparison failure.
ResourceLimits.cpp
ResourceManager.cpp
ResourceVk.cpp
Restrict
RestrictPointer
RestrictPointerEXT
RestrictType
Result <id> '
Result <id> from OpSampledImage instruction must not appear as operand for Op
Result <id> from OpSampledImage instruction must not appear as operands of Op
Result Type does not logically match the Operand type
Result Type has
Result Type must be OpTypeBool
Result Type must be an integer scalar
Result Type must not equal the Operand type
Result Type vector size:
Result Type's second member
Result id of OpDecorationGroup can only
Result type (Op
Result type cannot be Op
Result type component width must be 32 bits
Result type is not defined.
RetainEvent
ReturnValue
Rewrite row major matrices in shaders as column major as a driver bug workaround
RewriteAtomicCounters.cpp
RewriteAtomicFunctionExpressions.cpp
RewriteCubeMapSamplersAs2DArray.cpp
RewriteDfdy.cpp
RewriteDoWhile.cpp
RewriteExpressionsWithShaderStorageBlock.cpp
RewriteRepeatedAssignToSwizzled.cpp
RewriteRowMajorMatrices.cpp
RewriteStructSamplers.cpp
RewriteStructSamplersOld.cpp
RewriteTexelFetchOffset.cpp
RewriteUnaryMinusOperatorFloat.cpp
RewriteUnaryMinusOperatorInt.cpp
Rg16
Rg16Snorm
Rg16f
Rg16i
Rg16ui
Rg32f
Rg32i
Rg32ui
Rg8
Rg8Snorm
Rg8i
Rg8ui
RgQ
Rgb10A2
Rgb10a2ui
Rgba16
Rgba16Snorm
Rgba16f
Rgba16i
Rgba16ui
Rgba32f
Rgba32i
Rgba32ui
Rgba8
Rgba8Snorm
Rgba8i
Rgba8ui
RoG
Round
RoundEven
RoundingModeRTE
RoundingModeRTZ
RowMajor
Rp7
Ru/
RunAtTheEndOfShader.cpp
RuntimeDescriptorArray
RuntimeDescriptorArrayEXT
Rx
R|7
R7
S
S(>
S,,>,>
S,M
S,S
S,S,V1,
S,V2,V4
S,V4
S.B
S3<
S3>
S7
S8
S;E
S>>
SAMPLE
SAMPLEREXTERNAL2DY2YEXT
SAMPLEREXTERNALOES
SAMPLERSHADOW
SAbs
SClamp
SConvert
SDiv
SEB
SEMICOLON
SGreaterThan
SGreaterThanEqual
SHADERCALLCOHERENT
SHADER_STORAGE_BLOCKS
SHARED
SLASH
SLessThan
SLessThanEqual
SMOOTH
SMax3AMD
SMid3AMD
SMin3AMD
SMod
SMulExtended
SN0
SNegate
SPIR-V 1.0
SPIR-V 1.0 (under OpenCL 1.2 Embedded Profile semantics)
SPIR-V 1.0 (under OpenCL 1.2 Full Profile semantics)
SPIR-V 1.0 (under OpenCL 2.0 Embedded Profile semantics)
SPIR-V 1.0 (under OpenCL 2.0 Full Profile semantics)
SPIR-V 1.0 (under OpenCL 2.1 Embedded Profile semantics)
SPIR-V 1.0 (under OpenCL 2.1 Full Profile semantics)
SPIR-V 1.0 (under OpenGL 4.0 semantics)
SPIR-V 1.0 (under OpenGL 4.1 semantics)
SPIR-V 1.0 (under OpenGL 4.2 semantics)
SPIR-V 1.0 (under OpenGL 4.3 semantics)
SPIR-V 1.0 (under OpenGL 4.5 semantics)
SPIR-V 1.0 (under Vulkan 1.0 semantics)
SPIR-V 1.1
SPIR-V 1.2
SPIR-V 1.2 (under OpenCL 2.2 Embedded Profile semantics)
SPIR-V 1.2 (under OpenCL 2.2 Full Profile semantics)
SPIR-V 1.3 (under Vulkan 1.1 semantics)
SPIR-V 1.3 (under WIP WebGPU semantics)
SPIR-V 1.4
SPIR-V 1.4 (under Vulkan 1.1 semantics)
SPIR-V 1.5
SPIR-V 1.5 (under Vulkan 1.2 semantics)
SPIR-V requires location for user input/output
SPIRV-Tools Validation Errors
SPVRemapper.cpp
SPV_AMD_gcn_shader
SPV_AMD_gpu_shader_half_float
SPV_AMD_gpu_shader_half_float_fetch
SPV_AMD_shader_ballot
SPV_AMD_shader_explicit_vertex_parameter
SPV_AMD_shader_fragment_mask
SPV_AMD_shader_image_load_store_lod
SPV_AMD_shader_trinary_minmax
SPV_AMD_texture_gather_bias_lod
SPV_EXT_demote_to_helper_invocation
SPV_EXT_descriptor_indexing
SPV_EXT_fragment_fully_covered
SPV_EXT_fragment_invocation_density
SPV_EXT_fragment_shader_interlock
SPV_EXT_physical_storage_buffer
SPV_EXT_shader_stencil_export
SPV_EXT_shader_viewport_index_layer
SPV_GOOGLE_decorate_string
SPV_GOOGLE_hlsl_functionality1
SPV_GOOGLE_user_type
SPV_INTEL_device_side_avc_motion_estimation
SPV_INTEL_media_block_io
SPV_INTEL_shader_integer_functions2
SPV_INTEL_subgroups
SPV_KHR_16bit_storage
SPV_KHR_8bit_storage
SPV_KHR_device_group
SPV_KHR_float_controls
SPV_KHR_multiview
SPV_KHR_no_integer_wrap_decoration
SPV_KHR_non_semantic_info
SPV_KHR_physical_storage_buffer
SPV_KHR_post_depth_coverage
SPV_KHR_ray_query
SPV_KHR_ray_tracing
SPV_KHR_shader_atomic_counter_ops
SPV_KHR_shader_ballot
SPV_KHR_shader_clock
SPV_KHR_shader_draw_parameters
SPV_KHR_storage_buffer_storage_class
SPV_KHR_subgroup_vote
SPV_KHR_variable_pointers
SPV_KHR_vulkan_memory_model
SPV_NVX_multiview_per_view_attributes
SPV_NV_compute_shader_derivatives
SPV_NV_cooperative_matrix
SPV_NV_fragment_shader_barycentric
SPV_NV_geometry_shader_passthrough
SPV_NV_mesh_shader
SPV_NV_ray_tracing
SPV_NV_sample_mask_override_coverage
SPV_NV_shader_image_footprint
SPV_NV_shader_sm_builtins
SPV_NV_shader_subgroup_partitioned
SPV_NV_shading_rate
SPV_NV_stereo_view_rendering
SPV_NV_viewport_array2
SPV_VALIDATOR_ignore_type_decl_unique
SRem
SSign
STAR
STDGL
STRING_LITERAL
STRUCT
SUBGROUPCOHERENT
SUBROUTINE
SUB_ASSIGN
SUPERP
SV
SV,
SV,S
SVM
SVM,
SVM,,
SVM,,,>
SVM,,>
SVM,,S
SVM,>
SVM,>,>
SVM,S
SVM,V2
SV_CLIPDISTANCE
SV_COVERAGE
SV_CULLDISTANCE
SV_DEPTH
SV_DEPTHGREATEREQUAL
SV_DEPTHLESSEQUAL
SV_DISPATCHTHREADID
SV_DOMAINLOCATION
SV_GROUPID
SV_GROUPINDEX
SV_GROUPTHREADID
SV_GSINSTANCEID
SV_INSIDETESSFACTOR
SV_INSTANCEID
SV_ISFRONTFACE
SV_OUTPUTCONTROLPOINTID
SV_POSITION
SV_PRIMITIVEID
SV_RENDERTARGETARRAYINDEX
SV_SAMPLEINDEX
SV_STENCILREF
SV_TARGET
SV_TESSFACTOR
SV_VERTEXID
SV_VIEWPORTARRAYINDEX
SWITCH
SY0
SYC
S[
SampleId
SampleInterlockOrderedEXT
SampleInterlockUnorderedEXT
SampleMaskOverrideCoverageNV
SampleMaskPostDepthCoverage
SampleRateShading
Sampled Type must be OpTypeVoid in the OpenCL environment.
Sampled must be 0 in the OpenCL environment.
Sampled1D
SampledBuffer
SampledCubeArray
SampledImageArrayDynamicIndexing
SampledImageArrayNonUniformIndexing
SampledImageArrayNonUniformIndexingEXT
SampledRect
Sampler YCbCr Conversion
Sampler is not valid
Sampler uniform value out of range.
Sampler.cpp
SamplerGL.cpp
SamplerNULL.cpp
SamplerState
SamplerVk.cpp
Samplers of conflicting types refer to the same texture image unit (
Samples may not be zero.
Samples must not be greater than maximum supported value for the format.
Sampling BLACK texels from RGB DXT1 textures returns transparent black on Mac.
Sat
SatConvertSToU
SatConvertUToS
SaturatedConversion
Saturday
Saving program binary with transform feedback, which is not supported on this driver.
ScalarizeVecAndMatConstructorArgs.cpp
Scaling and flipping in BlitFramebufferANGLE not supported by this implementation.
Scan.cpp
Scope ids must be OpConstant when Shader capability is
Scope ids must be constant or specialization constant when
Scope must be Subgroup or Device
ScopedVkLoaderEnvironment
Sd
Seamful cube map emulation misbehaves on some drivers, so it's disallowed
SecondaryCommandBuffer.cpp
SecondaryCommandBuffer::executeCommands
SecondaryViewportRelativeNV
Select
Selection header
Selection must be structured
SelectionMerge
Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease
Semantics must not include multiple of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease
Semaphore.cpp
SemaphoreGL.cpp
SemaphoreVk.cpp
Sep
SeparateDeclarations.cpp
September
Sequence
Sequence of components starting with
SequentiallyConsistent memory semantics cannot be used with the VulkanKHR memory model.
Server-side waits cannot be performed without GL_OES_EGL_sync support.
SetGlobalPoolAllocator(angle::PoolAllocator*)
SetTLSValue(unsigned int, void*)
SetUseAndroidOpenGLTlsSlot(bool)
SetUserEventStatus
Sext
ShFinalize
ShInitialize
Shader Module
Shader attachment already has a shader.
Shader compilation failed with no info log.
Shader object expected.
Shader source contains invalid characters.
Shader to be detached must be currently attached to the program.
Shader version:
Shader.cpp
ShaderCallKHR
ShaderCallKHR Memory Scope requires a ray tracing execution model
ShaderClockKHR
ShaderGL.cpp
ShaderImpl.cpp
ShaderLang.cpp
ShaderLayer
ShaderNULL.cpp
ShaderNonUniform
ShaderNonUniformEXT
ShaderRecordBufferKHR
ShaderRecordBufferNV
ShaderSMBuiltinsNV
ShaderStereoViewNV
ShaderVars.cpp
ShaderViewportIndex
ShaderViewportIndexLayerEXT
ShaderViewportIndexLayerNV
ShaderViewportMaskNV
ShaderVk.cpp
ShadingRateInterlockOrderedEXT
ShadingRateInterlockUnorderedEXT
ShadingRateNV
Shared memory declarations cannot have layout specified
ShiftLeftLogical
ShiftRightArithmetic
ShiftRightLogical
Shifting
ShouldApplyLastRowPaddingWorkaround
Si5
SignBitSet
SignExtend
Signed
SignedChar
SignedInt16
SignedInt32
SignedInt8
SignedZeroInfNanPreserve
Simple
SimplifyLoopConditions.cpp
Simultaneous use of GL_CONSTANT_ALPHA/GL_ONE_MINUS_CONSTANT_ALPHA and GL_CONSTANT_COLOR/GL_ONE_MINUS_CONSTANT_COLOR as color factors is not supported by this implementation.
Sin
Single barrier call is preferred over multiple calls with fine grained pipeline stage dependency information
Sinh
Size for built-in vertex attribute is outside allowed range.
Size operand <id> '
SizeOf
SizedInternalformat must be color-renderable, depth-renderable, or stencil-renderable.
SkipAABBsKHR
SkipClosestHitShaderKHR
SkipTrianglesKHR
SmoothStep
SnormInt16
SnormInt8
Some GLSL constructs involving do-while loops cause GPU hangs
Some drivers discard vertex data in DrawArrays calls when the fixed primitive restart index is within the number of primitives being drawn.
Some drivers forget about UBO bindings when using program binaries
Some drivers have an issue with creating single-layer views on cube map textures
Some drivers return 0 when MAX_VERTEX_ATTRIB_STRIED queried
Some drivers seem to have a bug where the last copy region in vkCmdCopyBuffer is ignored
Some drivers track CopyTex{Sub}Image texture dependencies incorrectly. Flush before glDeleteTextures in this case
Some shader compilers don't support sampler arrays as parameters, so revert to old RewriteStructSamplers behavior, which produces fewer.
Some tests have been seen to fail using worker contexts
Some users rely on a lost context notification if a GL_OUT_OF_MEMORY error occurs
Source entry point must be "main"
Source memory access must not include MakePointerAvailableKHR
Source operand <id> '
Source texture internal format is invalid.
Source texture is not a valid texture object.
Source texture must be a valid texture type.
Source texture must have a compressed internal format.
Source texture must level 0 defined.
SourceContinued
SourceExtension
SpacingEqual
SpacingFractionalEven
SpacingFractionalOdd
SparseResidency
SpecConstant
SpecConstantComposite
SpecConstantFalse
SpecConstantOp
SpecConstantTrue
SpecId
Specialization constant must be an integer or floating-point number.
Specialization constant operation
Specified unit must be in [GL_TEXTURE0, GL_TEXTURE0 + GL_MAX_COMBINED_IMAGE_UNITS)
Specified unit must be in [GL_TEXTURE0, GL_TEXTURE0 + GL_MAX_TEXTURE_UNITS)
SplitSequenceOperator.cpp
SpvBuilder.cpp
SpvOpCooperativeMatrixLoadNV
SpvOpCooperativeMatrixLoadNV Result Type <id> '
SpvOpCooperativeMatrixStoreNV
SpvOpCooperativeMatrixStoreNV Object type <id> '
SpvPostProcess.cpp
SpvTools.cpp
Sret
Ss
St11logic_error
St12length_error
St12out_of_range
St13bad_exception
St13runtime_error
St14overflow_error
St9bad_alloc
St9exception
St9type_info
Stack now
Stack size increased to %lu
StackValue
StageName
Starting parse
State.cpp
StateManagerGL.cpp
Stencil reference and mask values must be the same for front facing and back facing triangles.
StencilExportEXT
StencilRefReplacingEXT
Storage Buffer
Storage buffer id '
Storage class cannot be Generic in OpenCL 1.2 environment
Storage class in OpTypeForwardPointer does not match the
Storage class semantics must not be zero
Storage qualifiers have to be after interpolation qualifiers.
Storage qualifiers have to be after layout qualifiers.
Storage qualifiers must match:
StorageBuffer OpVariable <id> '
StorageBuffer id '
StorageBuffer or Uniform.
StorageBuffer pointer operand
StorageBuffer, Uniform, or UniformConstant.
StorageBufferArrayDynamicIndexing
StorageBufferArrayNonUniformIndexing
StorageBufferArrayNonUniformIndexingEXT
StorageImageArrayDynamicIndexing
StorageImageArrayNonUniformIndexing
StorageImageArrayNonUniformIndexingEXT
StorageImageExtendedFormats
StorageImageMultisample
StorageImageReadWithoutFormat
StorageImageWriteWithoutFormat
StorageInputOutput16
StoragePushConstant16
StoragePushConstant8
StorageTexelBufferArrayDynamicIndexing
StorageTexelBufferArrayDynamicIndexingEXT
StorageTexelBufferArrayNonUniformIndexing
StorageTexelBufferArrayNonUniformIndexingEXT
StorageUniform16
StorageUniformBufferBlock16
Store cooperative matrix
Str(int)
Stream consumer extension not active
Stream extension not active
Stream not fully configured
Stream not in connecting state
Stream producer extension not active
Stream.cpp
Stride is over the maximum stride allowed by WebGL.
Stride must be a multiple of the passed in datatype.
Stride must be within [0, MAX_VERTEX_ATTRIB_STRIDE).
Stride operand <id> '
Struct cannot be captured directly (
Struct nesting
Structure Nesting Depth may not be larger than
Structure constructor arguments do not match structure fields
Structure members may not be self references
Structure name
Structures cannot contain a void type.
SubGroupEqMask
SubGroupGeMask
SubGroupGtMask
SubGroupInvocation
SubGroupLeMask
SubGroupLtMask
Suballocations
SubgroupAllEqualKHR
SubgroupAllKHR
SubgroupAnyKHR
SubgroupAvcBmeInitializeINTEL
SubgroupAvcFmeInitializeINTEL
SubgroupAvcImeAdjustRefOffsetINTEL
SubgroupAvcImeConvertToMcePayloadINTEL
SubgroupAvcImeConvertToMceResultINTEL
SubgroupAvcImeEvaluateWithDualReferenceINTEL
SubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL
SubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL
SubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL
SubgroupAvcImeEvaluateWithSingleReferenceINTEL
SubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL
SubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL
SubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL
SubgroupAvcImeGetBorderReachedINTEL
SubgroupAvcImeGetDualReferenceStreaminINTEL
SubgroupAvcImeGetSingleReferenceStreaminINTEL
SubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL
SubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL
SubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL
SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL
SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL
SubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL
SubgroupAvcImeGetTruncatedSearchIndicationINTEL
SubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL
SubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL
SubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL
SubgroupAvcImeInitializeINTEL
SubgroupAvcImeRefWindowSizeINTEL
SubgroupAvcImeSetDualReferenceINTEL
SubgroupAvcImeSetEarlySearchTerminationThresholdINTEL
SubgroupAvcImeSetMaxMotionVectorCountINTEL
SubgroupAvcImeSetSingleReferenceINTEL
SubgroupAvcImeSetUnidirectionalMixDisableINTEL
SubgroupAvcImeSetWeightedSadINTEL
SubgroupAvcImeStripDualReferenceStreamoutINTEL
SubgroupAvcImeStripSingleReferenceStreamoutINTEL
SubgroupAvcMceConvertToImePayloadINTEL
SubgroupAvcMceConvertToImeResultINTEL
SubgroupAvcMceConvertToRefPayloadINTEL
SubgroupAvcMceConvertToRefResultINTEL
SubgroupAvcMceConvertToSicPayloadINTEL
SubgroupAvcMceConvertToSicResultINTEL
SubgroupAvcMceGetBestInterDistortionsINTEL
SubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL
SubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL
SubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL
SubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL
SubgroupAvcMceGetDefaultInterShapePenaltyINTEL
SubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL
SubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL
SubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL
SubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL
SubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL
SubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL
SubgroupAvcMceGetInterDirectionsINTEL
SubgroupAvcMceGetInterDistortionsINTEL
SubgroupAvcMceGetInterMajorShapeINTEL
SubgroupAvcMceGetInterMinorShapeINTEL
SubgroupAvcMceGetInterMotionVectorCountINTEL
SubgroupAvcMceGetInterReferenceIdsINTEL
SubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL
SubgroupAvcMceGetMotionVectorsINTEL
SubgroupAvcMceSetAcOnlyHaarINTEL
SubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL
SubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL
SubgroupAvcMceSetInterDirectionPenaltyINTEL
SubgroupAvcMceSetInterShapePenaltyINTEL
SubgroupAvcMceSetMotionVectorCostFunctionINTEL
SubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL
SubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL
SubgroupAvcMotionEstimationChromaINTEL
SubgroupAvcMotionEstimationINTEL
SubgroupAvcMotionEstimationIntraINTEL
SubgroupAvcRefConvertToMcePayloadINTEL
SubgroupAvcRefConvertToMceResultINTEL
SubgroupAvcRefEvaluateWithDualReferenceINTEL
SubgroupAvcRefEvaluateWithMultiReferenceINTEL
SubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL
SubgroupAvcRefEvaluateWithSingleReferenceINTEL
SubgroupAvcRefSetBidirectionalMixDisableINTEL
SubgroupAvcRefSetBilinearFilterEnableINTEL
SubgroupAvcSicConfigureIpeLumaChromaINTEL
SubgroupAvcSicConfigureIpeLumaINTEL
SubgroupAvcSicConfigureSkcINTEL
SubgroupAvcSicConvertToMcePayloadINTEL
SubgroupAvcSicConvertToMceResultINTEL
SubgroupAvcSicEvaluateIpeINTEL
SubgroupAvcSicEvaluateWithDualReferenceINTEL
SubgroupAvcSicEvaluateWithMultiReferenceINTEL
SubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL
SubgroupAvcSicEvaluateWithSingleReferenceINTEL
SubgroupAvcSicGetBestIpeChromaDistortionINTEL
SubgroupAvcSicGetBestIpeLumaDistortionINTEL
SubgroupAvcSicGetInterRawSadsINTEL
SubgroupAvcSicGetIpeChromaModeINTEL
SubgroupAvcSicGetIpeLumaShapeINTEL
SubgroupAvcSicGetMotionVectorMaskINTEL
SubgroupAvcSicGetPackedIpeLumaModesINTEL
SubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL
SubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL
SubgroupAvcSicInitializeINTEL
SubgroupAvcSicSetBilinearFilterEnableINTEL
SubgroupAvcSicSetBlockBasedRawSkipSadINTEL
SubgroupAvcSicSetIntraChromaModeCostFunctionINTEL
SubgroupAvcSicSetIntraLumaModeCostFunctionINTEL
SubgroupAvcSicSetIntraLumaShapePenaltyINTEL
SubgroupAvcSicSetSkcForwardTransformEnableINTEL
SubgroupBallotKHR
SubgroupBlockReadINTEL
SubgroupBlockWriteINTEL
SubgroupBufferBlockIOINTEL
SubgroupDispatch
SubgroupEqMaskKHR
SubgroupFirstInvocationKHR
SubgroupGeMaskKHR
SubgroupGtMaskKHR
SubgroupId
SubgroupImageBlockIOINTEL
SubgroupImageBlockReadINTEL
SubgroupImageBlockWriteINTEL
SubgroupImageMediaBlockIOINTEL
SubgroupImageMediaBlockReadINTEL
SubgroupImageMediaBlockWriteINTEL
SubgroupLeMaskKHR
SubgroupLocalInvocationId
SubgroupLtMaskKHR
SubgroupMaxSize
SubgroupMemory
SubgroupReadInvocationKHR
SubgroupShuffleDownINTEL
SubgroupShuffleINTEL
SubgroupShuffleUpINTEL
SubgroupShuffleXorINTEL
SubgroupVoteKHR
SubgroupsPerWorkgroup
SubgroupsPerWorkgroupId
SubpassInput
SubpassInputMS
Such variables must be identified with a Block decoration
Such variables must be identified with a Block or BufferBlock decoration
Such variables must be typed as OpTypeStruct,
Sun
Sunday
Suport depth/stencil rendering feedback loops
Surface cannot be EGL_NO_SURFACE.
Surface does not support EGL_MULTISAMPLE_RESOLVE_BOX.
Surface does not support EGL_SWAP_BEHAVIOR_PRESERVED.
Surface not compatible with Context API.
Surface not compatible with OpenGL ES 1.x.
Surface not compatible with OpenGL ES 2.x.
Surface not compatible with OpenGL ES 3.x.
Surface type is not compatible.
Surface.cpp
SurfaceEGL.cpp
SurfaceGL.cpp
SurfaceImpl.cpp
SurfaceNULL.cpp
SurfaceVk.cpp
SvG
Swap surface cannot be EGL_NO_SURFACE.
Switch
SwizzleInvocationsAMD
SwizzleInvocationsMaskedAMD
Symbol.cpp
SymbolTable.cpp
SymbolTable_autogen.cpp
SymbolUniqueId.cpp
Sync object does not exist.
SyncEGL.cpp
SyncGL.cpp
SyncNULL.cpp
SyncVk.cpp
SystemInfo.cpp
SystemInfo_libpci.cpp
SystemInfo_linux.cpp
SystemInfo_x11.cpp
T
T">
T2>
T6
T7
T8
T<E
TBD
TCompiler::getAsCompiler()
TCompiler::getInfoSink()
TCompiler::linkable()
TILDE
TIntermNode::getAsAggregate()
TIntermNode::getAsAggregate() const
TIntermNode::getAsBinaryNode()
TIntermNode::getAsBinaryNode() const
TIntermNode::getAsBranchNode()
TIntermNode::getAsBranchNode() const
TIntermNode::getAsConstantUnion()
TIntermNode::getAsConstantUnion() const
TIntermNode::getAsLoopNode()
TIntermNode::getAsLoopNode() const
TIntermNode::getAsMethodNode()
TIntermNode::getAsMethodNode() const
TIntermNode::getAsOperator()
TIntermNode::getAsOperator() const
TIntermNode::getAsSelectionNode()
TIntermNode::getAsSelectionNode() const
TIntermNode::getAsSwitchNode()
TIntermNode::getAsSwitchNode() const
TIntermNode::getAsSymbolNode()
TIntermNode::getAsSymbolNode() const
TIntermNode::getAsTyped()
TIntermNode::getAsTyped() const
TIntermNode::getAsUnaryNode()
TIntermNode::getAsUnaryNode() const
TIntermNode::getLoc() const
TIntermNode::setLoc(glslang::TSourceLoc const&)
TIntermNode::~TIntermNode()
TK
TN+
TN5
TShHandleBase::getAsCompiler()
TShHandleBase::getAsLinker()
TShHandleBase::getAsUniformMap()
TShHandleBase::getPool() const
TShHandleBase::~TShHandleBase()
TYPE_NAME
T]5
T]G
T^G
Tan
Tanh
Target is TRANSFORM_FEEDBACK_BUFFER and transform feedback is currently active.
Target memory access must not include MakePointerVisibleKHR
Target must be TEXTURE_2D_MULTISAMPLE_ARRAY_OES.
Target of Component decoration is invalid: must point to a Storage Class of Input(1) or Output(3). Found Storage Class
Target of Component decoration must be a memory object declaration (a variable or a function parameter)
Target of NonWritable decoration is invalid: must point to a storage image, uniform block,
Target of NonWritable decoration must be a memory object declaration (a variable or a function parameter)
Target operand <id> '
Target version for SPIRV-Tools validator
Temporary
TerminateOnFirstHitKHR
TerminateRayKHR
TerminateRayNV
Ternary selection
Tessellation
Tessellation execution model entry points can specify at most one of SpacingEqual, SpacingFractionalOdd or SpacingFractionalEven execution modes.
Tessellation execution model entry points can specify at most one of Triangles, Quads or Isolines execution modes.
Tessellation execution model entry points can specify at most one of VertexOrderCw or VertexOrderCcw execution modes.
TessellationControl
TessellationEvaluation
TessellationPointSize
Test condition and select
Textarget must match the texture target type.
Texture base level out of range
Texture component must be a constant expression
Texture dimensions must all be greater than zero.
Texture dimensions must be power-of-two.
Texture filter not recognized.
Texture format does not support mipmap generation.
Texture has incompatible target.
Texture is immutable.
Texture is not a three-dimensional or two-dimensionsal array texture.
Texture is not cubemap complete. All cubemaps faces must be defined and be the same size.
Texture is not immutable.
Texture is null
Texture level does not exist.
Texture level must be zero.
Texture offset cannot be negative
Texture offset must be a constant expression
Texture offset value out of valid range
Texture offsets must be a constant expression
Texture offsets must be an array of 4 elements
Texture only supports NEAREST and LINEAR filtering.
Texture template struct return slots exceeded
Texture template structure members must same basic type
Texture wrap mode not recognized.
Texture.cpp
Texture2DMS
Texture2DMSArray
TextureBuffer
TextureCube
TextureCubeArray
TextureGL.cpp
TextureImpl.cpp
TextureNULL.cpp
TextureVk.cpp
TextureVk::copyBufferDataToImage
TextureVk::copyImageDataToBufferAndGetData
TgQ
The
The 'False Label' operand for OpBranchConditional must be the ID of an OpLabel instruction
The 'True Label' operand for OpBranchConditional must be the ID of an OpLabel instruction
The <id> passed to
The Base <id> '
The Component Type of Vector 1 must be the same as ResultType.
The Component Type of Vector 2 must be the same as ResultType.
The LinkageAttributes Decoration (Linkage name:
The Object type (Op
The Result Type must be the same as Composite type in Op
The Result Type of
The Result Type of OpVectorShuffle must be
The Signedness in OpTypeInt must always be 0 when Kernel capability is used.
The Struture's last member in
The Struture's type in
The active Transform Feedback object is not paused.
The active Transform Feedback object is paused.
The active program has specified no output variables to record.
The active read framebuffer object has multiview attachments.
The array member in
The associated promise has been destructed prior to the associated state becoming ready.
The attached geometry shader isn't compiled.
The cubemap depth must be a multiple of 6.
The current context doesn't support setting a non-zero divisor on the attribute with index zero. Please reorder the attributes in your vertex shader so that attribute zero can have a zero divisor.
The default framebuffer must have exactly one draw buffer.
The destination level of the destination texture must be defined.
The display used by a swapchain does not use the same presentable image layout, or is incompatible in a way that prevents sharing an image
The draw command is unsupported when transform feedback is active and not paused.
The explicit flushing bit may only be set if the buffer is mapped for writing.
The following extension must be enabled to use this feature:
The following forward referenced IDs have not been defined:
The function '
The future has already been retrieved from the promise or packaged_task.
The high-order bits of a literal number in instruction <id>
The interpolation qualifier specified multiple times.
The invariant qualifier has to be first in the expression.
The invariant qualifier specified multiple times.
The layout qualifier and invariant qualifier cannot coexist in the same declaration according to the grammar.
The layout qualifier specified multiple times.
The logical or physical device has been lost
The memory barrier between the compute shader that converts vertex attributes and the vertex shader that reads from it is ineffective
The memory object is immutable.
The number of indexes in
The number of indexes in Op
The number of views in the active program and draw framebuffer does not match.
The point size range reported from the API is inconsistent with the actual behavior
The precise qualifier specified multiple times.
The precision qualifier specified multiple times.
The provided parameters overflow with the provided buffer.
The read and write copy regions alias memory.
The requested version of Vulkan is not supported by the driver or is otherwise incompatible for implementation-specific reasons
The requested window is already connected to a VkSurfaceKHR, or to some other non-Vulkan API
The result pointer storage class and base pointer storage class in
The specified dimensions are outside of the bounds of the texture.
The state of the promise has already been set.
The std430 layout is supported only for shader storage blocks.
The sum of the number of active image uniforms, active shader storage blocks and active fragment shader outputs exceeds MAX_COMBINED_SHADER_OUTPUT_RESOURCES (
The sum of the number of active shader storage blocks exceeds MAX_COMBINED_SHADER_STORAGE_BLOCKS (
The sum of the number of active uniform blocks exceeds MAX_COMBINED_UNIFORM_BLOCKS (
The texture is a non-power-of-two texture.
The total number of invocations within a work group exceeds
The type in
The type of Vector 1 must be OpTypeVector.
The type of Vector 2 must be OpTypeVector.
The types of Operand 1 and Operand 2 must match
The validation layers detected invalid API usage
The value of TEXTURE_IMMUTABLE_FORMAT for the texture currently bound to target on the active texture unit is true.
The value passed to the mem argument of an atomic memory function does not correspond to a buffer or shared variable.
The visual of native_window doesn't match the visual given with ANGLE_X11_VISUAL_ID
There is an active query for target GL_TIME_ELAPSED_EXT when the number of views in the active draw framebuffer is greater than 1.
There is an active transform feedback object when the number of views in the active draw framebuffer is greater than 1.
There must be at most one object per Storage Class that can contain a structure type containing members decorated with BuiltIn, consumed per entry-point. Entry Point id
There must be no more than one push constant block
These variables must have DescriptorSet and Binding decorations specified
Third Party
This ANGLE implementation does not support separate front/back stencil writemasks, reference values, or stencil mask values.
This device type requires a platform type of EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE or EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE.
This device type requires a platform type of EGL_PLATFORM_ANGLE_TYPE_VULKAN_ANGLE.
This type of loop is not allowed
Thread.cpp
Thu
Thursday
TimeAMD
Timeout must be positive
To/
Token.cpp
Too few args in Macro
Too many OpFunctionParameters for
Too many args in macro
Too many arguments for macro
Too many attributes (
Too many components in texture template structure type
Too many objects of the type have already been created
TotalBytes
Tp/
Tq/
Tq7
TraceNV
TraceRayKHR
Transform feedback has a buffer bound to multiple outputs.
Transform feedback is already active.
Transform feedback object that does not exist.
Transform feedback uses the VK_EXT_transform_feedback extension.
Transform feedback varying
Transform feedback varying total components (
TransformFeedback.cpp
TransformFeedbackGL.cpp
TransformFeedbackNULL.cpp
TransformFeedbackVk.cpp
TranslateTask::run
TranslateTaskGL::run
TranslatorESSL.cpp
TranslatorGLSL.cpp
TranslatorVulkan.cpp
Transpose
TriangleStream
Triangles
Trunc
TsG
Tt7
Tt:
Tue
Tuesday
Tv5
Two textures of different types use the same sampler location.
Two transform feedback varyings include the same array element (
Two transform feedback varyings specify the same output variable (
Type Id
Type is INT_10_10_10_2_OES or UNSIGNED_INT_10_10_10_2_OES and size is not 3 or 4.
Type is INT_2_10_10_10_REV or UNSIGNED_INT_2_10_10_10_REV and size is not 4.
TypeAccelerationStructureKHR
TypeAccelerationStructureNV
TypeAvcImeDualReferenceStreaminINTEL
TypeAvcImePayloadINTEL
TypeAvcImeResultDualReferenceStreamoutINTEL
TypeAvcImeResultINTEL
TypeAvcImeResultSingleReferenceStreamoutINTEL
TypeAvcImeSingleReferenceStreaminINTEL
TypeAvcMcePayloadINTEL
TypeAvcMceResultINTEL
TypeAvcRefPayloadINTEL
TypeAvcRefResultINTEL
TypeAvcSicPayloadINTEL
TypeAvcSicResultINTEL
TypeCooperativeMatrixNV
TypeDeviceEvent
TypeEvent
TypeFloat
TypeForwardPointer
TypeInt
TypeOpaque
TypePipe
TypePipeStorage
TypeQueue
TypeRayQueryProvisionalKHR
TypeReserveId
TypeRuntimeArray
TypeVmeImageINTEL
Types must match:
Types.cpp
T|O
U
U!>
U%E
U+>
U,9
U.-
U16VEC2
U16VEC3
U16VEC4
U29
U32VEC2
U32VEC3
U32VEC4
U64VEC2
U64VEC3
U64VEC4
U6>
U7
U8
U8VEC2
U8VEC3
U8VEC4
U9F
U>U
UAddSatINTEL
UAverageINTEL
UAverageRoundedINTEL
UCOOPMATNV
UClamp
UConvert
UCountLeadingZerosINTEL
UCountTrailingZerosINTEL
UDiv
UGreaterThan
UGreaterThanEqual
UI,
UI,,,
UIMAGE1D
UIMAGE1DARRAY
UIMAGE2D
UIMAGE2DARRAY
UIMAGE2DMS
UIMAGE2DMSARRAY
UIMAGE2DRECT
UIMAGE3D
UIMAGEBUFFER
UIMAGECUBE
UIMAGECUBEARRAY
UINT16CONSTANT
UINT16_T
UINT32CONSTANT
UINT32_T
UINT64CONSTANT
UINT64_T
UINT8_T
UINTCONSTANT
ULessThan
ULessThanEqual
UMax3AMD
UMid3AMD
UMin3AMD
UMod
UMul32x16INTEL
UMulExtended
UNASSIGNED-CoreValidation-Shader-InterfaceTypeMismatch
UNASSIGNED-CoreValidation-Shader-OutputNotConsumed
UNASSIGNED-CoreValidation-Shader-PointSizeMissing
UNIFORM_BUFFERS
UNIFORM_COMPONENTS
UNIFORM_VECTORS
UNIMPLEMENTED:
UNKNOWN ERROR:
UNKNOWN_DIMENSION
UNKNOWN_SAMPLER
UNKNOWN_TYPE
UNKOWN ERROR:
USAMPLER1D
USAMPLER1DARRAY
USAMPLER2D
USAMPLER2DARRAY
USAMPLER2DMS
USAMPLER2DMSARRAY
USAMPLER2DRECT
USAMPLER3D
USAMPLERBUFFER
USAMPLERCUBE
USAMPLERCUBEARRAY
USUBPASSINPUT
USUBPASSINPUTMS
USubSatINTEL
UTEXTURE1D
UTEXTURE1DARRAY
UTEXTURE2D
UTEXTURE2DARRAY
UTEXTURE2DMS
UTEXTURE2DMSARRAY
UTEXTURE2DRECT
UTEXTURE3D
UTEXTUREBUFFER
UTEXTURECUBE
UTEXTURECUBEARRAY
UUUUUUUUUUUUUUUU
UVEC2
UVEC3
UVEC4
UZE
Ug,
Ug5
UgO
Uh
Ui7
Unable to create the EGL context.
Unable to create the glx context.
Unable to determine source language
Unable to make the EGL context current.
Unable to make the GLX context current.
Unable to parse built-ins
Unable to parse built-ins%s
Unable to pull combined depth/stencil for GetTexImage
Undefined behavior
Undefined function '
Undefined shift (operand out of range)
Underlying Types
Unexpected driver error.
UnfoldShortCircuitAST.cpp
Unhandled inst type (opcode: %d) found outside function definition.
Unhandled internal error:
Uniform OpVariable <id> '
Uniform and shader storage block variables must
Uniform id '
Uniform location out of range
Uniform size does not match uniform method.
Uniform type does not match uniform method.
Uniform.cpp
UniformAndStorageBuffer16BitAccess
UniformAndStorageBuffer8BitAccess
UniformBufferArrayDynamicIndexing
UniformBufferArrayNonUniformIndexing
UniformBufferArrayNonUniformIndexingEXT
UniformConstant OpVariable <id> '
UniformConstant id '
UniformId
UniformMemory
UniformTexelBufferArrayDynamicIndexing
UniformTexelBufferArrayDynamicIndexingEXT
UniformTexelBufferArrayNonUniformIndexing
UniformTexelBufferArrayNonUniformIndexingEXT
Unimplemented
Unimplemented: structure template type in subpass input
Union
Unknown
Unknown Severity
Unknown Source
Unknown Stage.
Unknown Type
Unknown attribute
Unknown attribute.
Unknown constant
Unknown error %d
Unknown error.
Unknown glslang keyword
Unknown parameter value.
Unknown platform type.
Unknown vulkan error code
Unordered
UnormInt101010
UnormInt101010_2
UnormInt16
UnormInt24
UnormInt8
UnormShort555
UnormShort565
Unpack alignment must be 1, 2, 4 or 8.
UnpackDouble2x32
UnpackHalf2x16
UnpackSnorm2x16
UnpackSnorm4x8
UnpackUnorm2x16
UnpackUnorm4x8
Unreachable
Unreachable Code.
Unrecognized shader stage bit.
Unroll and DontUnroll loop controls must not both be specified
Unsigned
Unsigned integers are unsupported prior to GLSL ES 3.00
UnsignedChar
UnsignedInt16
UnsignedInt32
UnsignedInt8
Unspecified
Unsupported EGL version (require at least 1.4).
Unsupported GLX version (requires at least 1.3).
Unsupported requested context version
Unused std140 or shared uniform blocks will be treated as inactive
UnusedBytes
UnusedRanges
Usage
Use of device scope with VulkanKHR memory model requires the
UseInterfaceBlockFields.cpp
UserData
UserSemantic
UserTypeGOOGLE
Using '-<float>' will get wrong answer
Using BuiltIn
Using a 16-bit floating point
Using a 16-bit integer type requires the Int16 capability, or an extension that explicitly enables 16-bit integers.
Using a 64-bit floating point
Using a 64-bit integer type requires the Int64 capability.
Using an 8-bit integer type requires the Int8 capability, or an extension that explicitly enables 8-bit integers.
Using glClear for robust resource initialization is buggy on some drivers and leads to texture corruption. Default to data uploads except on MacOS where it is very slow.
Using isnan() on highp float will get wrong answer
Using pointers with OpPhi requires capability
Using pointers with OpSelect requires capability
UtilsVk.cpp
Uu7
UyE
U~/
V
V%>
V,V,S
V0
V1
V2,,,
V3,
V3,,,
V3,S,>V3,>S,
V3,V4
V4,
V4,S,>V4,>V2,
V4,V2,>V4,>V2,
V4,V3
V4,V3,,
V7
V8
V=[
V>
V@:
VAD
VARYING
VERTEX
VERTICAL_BAR
VKG
VK_EXT_debug_report
VK_EXT_debug_utils
VK_EXT_external_memory_host
VK_EXT_index_type_uint8
VK_EXT_line_rasterization
VK_EXT_provoking_vertex
VK_EXT_shader_stencil_export
VK_EXT_swapchain_colorspace
VK_EXT_transform_feedback
VK_EXT_vertex_attribute_divisor
VK_FORMAT_D16_UNORM does not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT, which prevents OES_depth_texture from being supported.
VK_FUCHSIA_external_memory
VK_FUCHSIA_external_semaphore
VK_GOOGLE_sampler_filtering_precision
VK_ICD_FILENAMES
VK_KHR_external_fence_capabilities
VK_KHR_external_fence_fd
VK_KHR_external_memory
VK_KHR_external_memory_fd
VK_KHR_external_semaphore
VK_KHR_external_semaphore_capabilities
VK_KHR_external_semaphore_fd
VK_KHR_get_physical_device_properties2
VK_KHR_incremental_present
VK_KHR_maintenance1
VK_KHR_surface
VK_KHR_swapchain
VK_KHR_xcb_surface
VK_LAYER_CUSTOM_STYPE_LIST
VK_LAYER_GOOGLE_threading
VK_LAYER_GOOGLE_unique_objects
VK_LAYER_KHRONOS_validation
VK_LAYER_LUNARG_core_validation
VK_LAYER_LUNARG_object_tracker
VK_LAYER_LUNARG_parameter_validation
VK_LAYER_LUNARG_standard_validation
VK_LAYER_PATH
VK_NULL_HANDLE
VK_PRESENT_MODE_FIFO_KHR causes random timeouts
VMA_SUBALLOCATION_TYPE_NAMES
VOID
VOLATILE
VTT for std::__1::basic_istringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
VTT for std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
VTT for std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
VUID-VkDeviceCreateInfo-pNext-pNext
VUID-VkGraphicsPipelineCreateInfo-blendEnable-02023
VUID-VkPipelineInputAssemblyStateCreateInfo-topology-00428
VUID-VkPipelineRasterizationStateCreateInfo-pNext-pNext
VUID-vkCmdDraw-None-02690
VUID-vkCmdDrawIndexed-None-02690
VUID_Undefined
ValidateAST.cpp
ValidateBlendFuncSeparate
ValidateCreatePlatformPixmapSurfaceEXT unimplemented.
ValidateCreatePlatformWindowSurfaceEXT unimplemented.
ValidateDrawStates
ValidateEnable
ValidateGlobalInitializer.cpp
ValidateLimitations.cpp
ValidateMaxParameters.cpp
ValidateOutputs.cpp
ValidateSwitch.cpp
ValidateVaryingLocations.cpp
ValidateVertexAttribDivisorANGLE
Validation Cache
Validation failed after pass
Valve
Variable declarations that include initializers must have
VariablePacker.cpp
VariablePointers
VariablePointers or VariablePointersStorageBuffer
Variables can not have a function[7] storage class outside of a function
Variables identified with the StorageBuffer storage class are used to access transparent buffer backed resources. Such variables must be typed as OpTypeStruct, or an array of this type
Variables identified with the Uniform storage class are
Variables identified with the UniformConstant storage class
Variables must have a function[7] storage class inside of a function
Various rendering bugs have been observed when using higher MSAA counts
Varying '
VaryingPacking.cpp
Ve,
Ve7
VecTypeHint
Vector access is out of bounds, vector size is
Vector16
VectorExtractDynamic
VectorInsertDynamic
VectorShuffle
VectorTimesMatrix
VectorTimesScalar
VectorizeVectorScalarArithmetic.cpp
VerifyExtensionsPresent
VersionGLSL.cpp
Versions.cpp
Vertex array does not exist.
Vertex attribute size must be 1, 2, 3, or 4.
Vertex buffer is not big enough for the draw call
Vertex shader input type does not match the type of the bound vertex attribute.
Vertex shader is not compiled.
VertexArray.cpp
VertexArrayGL.cpp
VertexArrayNULL.cpp
VertexArrayVk.cpp
VertexArrayVk::convertVertexBufferCpu
VertexAttribute.cpp
VertexOrderCcw
VertexOrderCw
Vh4
ViewIDOVR
Viewport size cannot be negative.
VkDescriptorBufferInfo& rx::ContextVk::allocInfos<VkDescriptorBufferInfo, &VkWriteDescriptorSet::pBufferInfo>(std::__1::vector<VkDescriptorBufferInfo, std::__1::allocator<VkDescriptorBufferInfo> >*, unsigned long)
VkDescriptorImageInfo& rx::ContextVk::allocInfos<VkDescriptorImageInfo, &VkWriteDescriptorSet::pImageInfo>(std::__1::vector<VkDescriptorImageInfo, std::__1::allocator<VkDescriptorImageInfo> >*, unsigned long)
VkDevice supports the EGL_ANDROID_native_fence_sync extension
VkDevice supports the VK_ANDROID_external_memory_android_hardware_buffer extension
VkDevice supports the VK_EXT_external_memory_host extension
VkDevice supports the VK_EXT_index_type_uint8 extension
VkDevice supports the VK_EXT_shader_stencil_export extension
VkDevice supports the VK_EXT_swapchain_colorspace extension
VkDevice supports the VK_FUCHSIA_external_memory extension
VkDevice supports the VK_FUCHSIA_external_semaphore extension
VkDevice supports the VK_GGP_frame_token extension
VkDevice supports the VK_GOOGLE_sampler_filtering_precision extension
VkDevice supports the VK_KHR_external_fence_capabilities extension
VkDevice supports the VK_KHR_external_fence_fd extension
VkDevice supports the VK_KHR_external_memory_fd extension
VkDevice supports the VK_KHR_external_semaphore_capabilities extension
VkDevice supports the VK_KHR_external_semaphore_fd extension
VkDevice supports the VK_KHR_incremental_present extension
VmG
VmaAllocation_T* VmaPoolAllocator<VmaAllocation_T>::Alloc<unsigned int, bool>(unsigned int, bool)
VmaAllocation_T::PrintParameters(VmaJsonWriter&) const
VmaAllocation_T::SetUserData(VmaAllocator_T*, void*)
VmaAllocator_T::AllocateDedicatedMemory(unsigned long, VmaSuballocationType, unsigned int, bool, bool, bool, void*, VkBuffer_T*, unsigned int, VkImage_T*, unsigned long, VmaAllocation_T**)
VmaAllocator_T::AllocateDedicatedMemoryPage(unsigned long, VmaSuballocationType, unsigned int, VkMemoryAllocateInfo const&, bool, bool, void*, VmaAllocation_T**)
VmaAllocator_T::AllocateMemory(VkMemoryRequirements const&, bool, bool, VkBuffer_T*, unsigned int, VkImage_T*, VmaAllocationCreateInfo const&, VmaSuballocationType, unsigned long, VmaAllocation_T**)
VmaAllocator_T::AllocateMemoryOfType(unsigned long, unsigned long, bool, VkBuffer_T*, unsigned int, VkImage_T*, VmaAllocationCreateInfo const&, unsigned int, VmaSuballocationType, unsigned long, VmaAllocation_T**)
VmaAllocator_T::FreeDedicatedMemory(VmaAllocation_T*)
VmaAllocator_T::FreeMemory(unsigned long, VmaAllocation_T* const*)
VmaAllocator_T::GetAllocationInfo(VmaAllocation_T*, VmaAllocationInfo*)
VmaAllocator_T::GetBudget(VmaBudget*, unsigned int, unsigned int)
VmaAllocator_T::GetFlushOrInvalidateRange(VmaAllocation_T*, unsigned long, unsigned long, VkMappedMemoryRange&) const
VmaAllocator_T::ImportVulkanFunctions_Custom(VmaVulkanFunctions const*)
VmaAllocator_T::ImportVulkanFunctions_Dynamic()
VmaAllocator_T::Map(VmaAllocation_T*, void**)
VmaAllocator_T::Unmap(VmaAllocation_T*)
VmaAllocator_T::UpdateVulkanBudget()
VmaAllocator_T::VmaAllocator_T(VmaAllocatorCreateInfo const*)
VmaAllocator_T::~VmaAllocator_T()
VmaBlockMetadata::Init(unsigned long)
VmaBlockMetadata::PrintDetailedMap_Allocation(VmaJsonWriter&, unsigned long, VmaAllocation_T*) const
VmaBlockMetadata::PrintDetailedMap_Begin(VmaJsonWriter&, unsigned long, unsigned long, unsigned long) const
VmaBlockMetadata::PrintDetailedMap_UnusedRange(VmaJsonWriter&, unsigned long, unsigned long) const
VmaBlockMetadata::~VmaBlockMetadata()
VmaBlockMetadata_Buddy::AddPoolStats(VmaPoolStats&) const
VmaBlockMetadata_Buddy::Alloc(VmaAllocationRequest const&, VmaSuballocationType, unsigned long, VmaAllocation_T*)
VmaBlockMetadata_Buddy::CalcAllocationStatInfo(VmaStatInfo&) const
VmaBlockMetadata_Buddy::CalcAllocationStatInfoNode(VmaStatInfo&, VmaBlockMetadata_Buddy::Node const*, unsigned long) const
VmaBlockMetadata_Buddy::CheckCorruption(void const*)
VmaBlockMetadata_Buddy::CreateAllocationRequest(unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, bool, VmaSuballocationType, bool, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Buddy::DeleteNode(VmaBlockMetadata_Buddy::Node*)
VmaBlockMetadata_Buddy::Free(VmaAllocation_T*)
VmaBlockMetadata_Buddy::FreeAtOffset(VmaAllocation_T*, unsigned long)
VmaBlockMetadata_Buddy::FreeAtOffset(unsigned long)
VmaBlockMetadata_Buddy::GetAllocationCount() const
VmaBlockMetadata_Buddy::GetSumFreeSize() const
VmaBlockMetadata_Buddy::GetUnusedRangeSizeMax() const
VmaBlockMetadata_Buddy::Init(unsigned long)
VmaBlockMetadata_Buddy::IsEmpty() const
VmaBlockMetadata_Buddy::MakeAllocationsLost(unsigned int, unsigned int)
VmaBlockMetadata_Buddy::MakeRequestedAllocationsLost(unsigned int, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Buddy::PrintDetailedMap(VmaJsonWriter&) const
VmaBlockMetadata_Buddy::PrintDetailedMapNode(VmaJsonWriter&, VmaBlockMetadata_Buddy::Node const*, unsigned long) const
VmaBlockMetadata_Buddy::Validate() const
VmaBlockMetadata_Buddy::ValidateNode(VmaBlockMetadata_Buddy::ValidationContext&, VmaBlockMetadata_Buddy::Node const*, VmaBlockMetadata_Buddy::Node const*, unsigned int, unsigned long) const
VmaBlockMetadata_Buddy::~VmaBlockMetadata_Buddy()
VmaBlockMetadata_Generic::AddPoolStats(VmaPoolStats&) const
VmaBlockMetadata_Generic::Alloc(VmaAllocationRequest const&, VmaSuballocationType, unsigned long, VmaAllocation_T*)
VmaBlockMetadata_Generic::CalcAllocationStatInfo(VmaStatInfo&) const
VmaBlockMetadata_Generic::CheckAllocation(unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, VmaSuballocationType, VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator, bool, unsigned long*, unsigned long*, unsigned long*, unsigned long*) const
VmaBlockMetadata_Generic::CheckCorruption(void const*)
VmaBlockMetadata_Generic::CreateAllocationRequest(unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, bool, VmaSuballocationType, bool, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Generic::Free(VmaAllocation_T*)
VmaBlockMetadata_Generic::FreeAtOffset(unsigned long)
VmaBlockMetadata_Generic::FreeSuballocation(VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator)
VmaBlockMetadata_Generic::GetAllocationCount() const
VmaBlockMetadata_Generic::GetSumFreeSize() const
VmaBlockMetadata_Generic::GetUnusedRangeSizeMax() const
VmaBlockMetadata_Generic::Init(unsigned long)
VmaBlockMetadata_Generic::IsEmpty() const
VmaBlockMetadata_Generic::MakeAllocationsLost(unsigned int, unsigned int)
VmaBlockMetadata_Generic::MakeRequestedAllocationsLost(unsigned int, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Generic::PrintDetailedMap(VmaJsonWriter&) const
VmaBlockMetadata_Generic::UnregisterFreeSuballocation(VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator)
VmaBlockMetadata_Generic::Validate() const
VmaBlockMetadata_Generic::~VmaBlockMetadata_Generic()
VmaBlockMetadata_Linear::AddPoolStats(VmaPoolStats&) const
VmaBlockMetadata_Linear::Alloc(VmaAllocationRequest const&, VmaSuballocationType, unsigned long, VmaAllocation_T*)
VmaBlockMetadata_Linear::CalcAllocationStatInfo(VmaStatInfo&) const
VmaBlockMetadata_Linear::CheckCorruption(void const*)
VmaBlockMetadata_Linear::CleanupAfterFree()
VmaBlockMetadata_Linear::CreateAllocationRequest(unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, bool, VmaSuballocationType, bool, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Linear::CreateAllocationRequest_LowerAddress(unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, VmaSuballocationType, bool, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Linear::CreateAllocationRequest_UpperAddress(unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, VmaSuballocationType, bool, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Linear::Free(VmaAllocation_T*)
VmaBlockMetadata_Linear::FreeAtOffset(unsigned long)
VmaBlockMetadata_Linear::GetAllocationCount() const
VmaBlockMetadata_Linear::GetSumFreeSize() const
VmaBlockMetadata_Linear::GetUnusedRangeSizeMax() const
VmaBlockMetadata_Linear::Init(unsigned long)
VmaBlockMetadata_Linear::IsEmpty() const
VmaBlockMetadata_Linear::MakeAllocationsLost(unsigned int, unsigned int)
VmaBlockMetadata_Linear::MakeRequestedAllocationsLost(unsigned int, unsigned int, VmaAllocationRequest*)
VmaBlockMetadata_Linear::PrintDetailedMap(VmaJsonWriter&) const
VmaBlockMetadata_Linear::Validate() const
VmaBlockMetadata_Linear::~VmaBlockMetadata_Linear()
VmaBlockVector::Allocate(unsigned int, unsigned long, unsigned long, VmaAllocationCreateInfo const&, VmaSuballocationType, unsigned long, VmaAllocation_T**)
VmaBlockVector::AllocateFromBlock(VmaDeviceMemoryBlock*, unsigned int, unsigned long, unsigned long, unsigned int, void*, VmaSuballocationType, unsigned int, VmaAllocation_T**)
VmaBlockVector::AllocatePage(unsigned int, unsigned long, unsigned long, VmaAllocationCreateInfo const&, VmaSuballocationType, VmaAllocation_T**)
VmaBlockVector::CreateBlock(unsigned long, unsigned long*)
VmaBlockVector::Free(VmaAllocation_T*)
VmaBlockVector::~VmaBlockVector()
VmaDeviceMemoryBlock::Init(VmaAllocator_T*, VmaPool_T*, unsigned int, VkDeviceMemory_T*, unsigned long, unsigned int, unsigned int)
VmaEmptyAllocationCallbacks
VmaJsonWriter::BeginValue(bool)
VmaJsonWriter::ContinueString(char const*)
VmaJsonWriter::WriteIndent(bool)
VmaPoolAllocator<VmaAllocation_T>::CreateNewBlock()
VmaPoolAllocator<VmaAllocation_T>::~VmaPoolAllocator()
VmaPoolAllocator<VmaListItem<VmaSuballocation> >::CreateNewBlock()
VmaPoolAllocator<VmaListItem<VmaSuballocation> >::~VmaPoolAllocator()
VmaRawList<VmaSuballocation>::InsertBefore(VmaListItem<VmaSuballocation>*)
VmaVector<VmaAllocation_T*, VmaStlAllocator<VmaAllocation_T*> >::resize(unsigned long, bool)
VmaVector<VmaDeviceMemoryBlock*, VmaStlAllocator<VmaDeviceMemoryBlock*> >::resize(unsigned long, bool)
VmaVector<VmaJsonWriter::StackItem, VmaStlAllocator<VmaJsonWriter::StackItem> >::resize(unsigned long, bool)
VmaVector<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator, VmaStlAllocator<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator> >::resize(unsigned long, bool)
VmaVector<VmaPoolAllocator<VmaAllocation_T>::ItemBlock, VmaStlAllocator<VmaPoolAllocator<VmaAllocation_T>::ItemBlock> >::resize(unsigned long, bool)
VmaVector<VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock, VmaStlAllocator<VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock> >::resize(unsigned long, bool)
VmaVector<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::resize(unsigned long, bool)
VmaVector<char, VmaStlAllocator<char> >::resize(unsigned long, bool)
Volatile mask setting must match for Equal and Unequal memory semantics
VolatileTexel
VolatileTexelKHR
VolatileType
Vt5
Vulkan
Vulkan considers vertex attribute accesses to count up to the last multiple of the stride. This additional access supports AMD's robust buffer access implementation. AMDVLK in particular will return incorrect values when the vertex access extends into the range that would be the stride padding and the buffer is too small. This workaround limits GL_MAX_VERTEX_ATTRIB_STRIDE to a maximum value and pads up every buffer allocation size to be a multiple of the maximum stride.
Vulkan features
Vulkan platform is unsupported.
Vulkan spec allows BuiltIn
Vulkan spec allows BuiltIn HelperInvocation to be only used for variables with Input storage class.
Vulkan spec allows BuiltIn HelperInvocation to be used only with Fragment execution model.
Vulkan spec allows BuiltIn InstanceId to be used only with IntersectionNV, ClosestHitNV and AnyHitNV execution models.
Vulkan spec allows BuiltIn InvocationId to be only used for variables with Input storage class.
Vulkan spec allows BuiltIn InvocationId to be used only with TessellationControl or Geometry execution models.
Vulkan spec allows BuiltIn PatchVertices to be only used for variables with Input storage class.
Vulkan spec allows BuiltIn PatchVertices to be used only with TessellationControl or TessellationEvaluation execution models.
Vulkan spec allows BuiltIn PointCoord to be only used for variables with Input storage class.
Vulkan spec allows BuiltIn PointCoord to be used only with Fragment execution model.
Vulkan spec allows BuiltIn PointSize to be only used for variables with Input or Output storage class.
Vulkan spec allows BuiltIn PointSize to be used only with Vertex, TessellationControl, TessellationEvaluation or Geometry execution models.
Vulkan spec allows BuiltIn Position to be only used for variables with Input or Output storage class.
Vulkan spec allows BuiltIn Position to be used only with Vertex, TessellationControl, TessellationEvaluation or Geometry execution models.
Vulkan spec allows BuiltIn PrimitiveId to be only used for variables with Input or Output storage class.
Vulkan spec allows BuiltIn PrimitiveId to be used only with Fragment, TessellationControl, TessellationEvaluation or Geometry execution models.
Vulkan spec allows BuiltIn SampleId to be only used for variables with Input storage class.
Vulkan spec allows BuiltIn SampleId to be used only with Fragment execution model.
Vulkan spec allows BuiltIn SampleMask to be only used for variables with Input or Output storage class.
Vulkan spec allows BuiltIn SampleMask to be used only with Fragment execution model.
Vulkan spec allows BuiltIn SamplePosition to be only used for variables with Input storage class.
Vulkan spec allows BuiltIn SamplePosition to be used only with Fragment execution model.
Vulkan spec allows BuiltIn TessCoord to be only used for variables with Input storage class.
Vulkan spec allows BuiltIn TessCoord to be used only with TessellationEvaluation execution model.
Vulkan spec disallows OpAtomicLoad with Memory Semantics Release, AcquireRelease and SequentiallyConsistent
Vulkan spec disallows OpAtomicStore with Memory Semantics Acquire, AcquireRelease and SequentiallyConsistent
Vulkan spec doesn't allow BuiltIn ClipDistance/CullDistance to be used for variables with Input storage class if execution model is Vertex.
Vulkan spec doesn't allow BuiltIn ClipDistance/CullDistance to be used for variables with Output storage class if execution model is Fragment.
Vulkan spec doesn't allow BuiltIn Layer and ViewportIndex to be used for variables with Input storage class if execution model is Vertex, TessellationEvaluation, or Geometry.
Vulkan spec doesn't allow BuiltIn Layer and ViewportIndex to be used for variables with Output storage class if execution model is Fragment.
Vulkan spec doesn't allow BuiltIn PointSize to be used for variables with Input storage class if execution model is Vertex.
Vulkan spec doesn't allow BuiltIn Position to be used for variables with Input storage class if execution model is Vertex.
Vulkan spec doesn't allow BuiltIn PrimitiveId to be used for variables with Output storage class if execution model is Fragment.
Vulkan spec doesn't allow BuiltIn PrimitiveId to be used for variables with Output storage class if execution model is TessellationControl.
Vulkan spec doesn't allow BuiltIn PrimitiveId to be used for variables with Output storage class if execution model is TessellationEvaluation.
Vulkan spec doesn't allow BuiltIn VertexId/InstanceId to be used.
Vulkan spec doesn't allow TessLevelOuter/TessLevelInner to be used for variables with Input storage class if execution model is TessellationControl.
Vulkan spec doesn't allow TessLevelOuter/TessLevelInner to be used for variables with Output storage class if execution model is TessellationEvaluation.
Vulkan spec requires BuiltIn WorkgroupSize to be a constant.
Vulkan swapchain is not returning VK_ERROR_OUT_OF_DATE when window resizing
Vulkan validation layers are missing.
Vulkan workarounds
VulkanKHR
VulkanMemoryModel
VulkanMemoryModelDeviceScope
VulkanMemoryModelDeviceScopeKHR
VulkanMemoryModelDeviceScopeKHR capability
VulkanMemoryModelKHR capability must only be specified if the VulkanKHR memory model is used.
VxG
W
W"G
W#>
W++
W,5
W.>
W0
W3C WebGPU Group
W3C WebGPU Group WHLSL Shader Translator
W7
W8
W9>
W:E
WARNING
WARNING:
WARNING: AST will form illegal SPIR-V; need to transform to legalize
WC@
WD5
WHILE
WK+
WORKGROUPCOHERENT
WRITEONLY
WS5
WT-
WV
WW5
W_G
WaitKernel
WaitWorkGroup
Warning, (version, profile) forced to be (
WaveActiveAllEqual
WaveActiveAllEqualBool
WaveActiveAllTrue
WaveActiveAnyTrue
WaveActiveBallot
WaveActiveBitAnd
WaveActiveBitOr
WaveActiveBitXor
WaveActiveCountBits
WaveActiveMax
WaveActiveMin
WaveActiveProduct
WaveActiveSum
WaveGetLaneCount
WaveGetLaneIndex
WaveIsFirstLane
WavePrefixCountBits
WavePrefixProduct
WavePrefixSum
WaveReadLaneAt
WaveReadLaneFirst
We7
WebGPU does not allow BuiltIn
WebGPU requires SPIR-V to be little endian.
WebGPU spec allows BuiltIn LocalInvocationIndex to be only used for variables with Input storage class.
WebGPU spec allows BuiltIn Position to be only used for variables with Output storage class.
WebGPU spec allows BuiltIn Position to be used only with the Vertex execution model.
WebGPU spec allows BuiltIn VertexIndex to be used only with GLCompute execution model.
Wed
Wednesday
WgG
When BuiltIn decoration is applied to a structure-type member,
When GL_PRIMITIVE_RESTART_FIXED_INDEX is not available, emulate it with GL_PRIMITIVE_RESTART and glPrimitiveRestartIndex.
When uploading textures from an pack buffer, some drivers count an extra row padding
When uploading textures from an unpack buffer, some drivers count an extra row padding
Width and Height are not supported for thie <buftype>
Width and Height must be positive
Width and height must be less than or equal to GL_MAX_TEXTURE_SIZE.
Window System
WindowSurfaceEGL.cpp
WindowSurfaceGLX.cpp
WindowSurfaceVk::createSwapchain
WindowSurfaceVk::present
WindowSurfaceVk::present: Throttle CPU
WindowSurfaceVk::swapImpl
WindowSurfaceVkXcb.cpp
Wine
Wine VKD3D Shader Compiler
Work group size does not match the previous declaration
Work group size is not specified.
WorkDim
WorkerThread.cpp
Workgroup and Subgroup
Workgroup for OpControlBarrier
Workgroup for OpMemoryBarrier
Workgroup storage class pointer requires VariablePointers capability to be specified
Workgroup, CrossWorkgroup, Generic, Image or StorageBuffer
Workgroup, Invocation, and QueueFamilyKHR
WorkgroupMemoryBarrier
WorkgroupMemoryBarrierWithGroupSync
WriteInvocationAMD
WriteOnly
WritePackedPrimitiveIndices4x8NV
Writeonly value cannot be passed for 'in' or 'inout' parameters.
Wu9
X
X(>
X-LEGEND
X-LEGEND Mesa-IR/SPIR-V Translator
X0
X6
X7
X8
X;,
X>
X>+
XCloseDisplay
XCreateColormap
XCreateWindow
XDestroyWindow
XFlush
XFree
XFreeColormap
XGetErrorText
XGetGeometry
XGetGeometry query failed on pixmap surface:
XGetVisualInfo
XGetWindowAttributes
XMapWindow
XOR_ASSIGN
XOR_OP
XOpenDisplay
XResizeWindow
XSelectInput
XSetErrorHandler
XSync
XXH64
XXH64_finalize
XZ5
XZG
Xderef
Xf,
Xfb
XfbBuffer
XfbStride
Xh&
Xh5
Xj&
Xs=
Xw/
Y
Y&>
Y1>
Y7
Y8
Y<>
YB<
YD2
YFE
YJS
YN+
YiG
Yj,
Yl&
Ym5
Yo,
YqG
Yu:
Z
Z >
Z7
Z8
ZG?
Z[G
Zero divided by zero during constant folding generated NaN
Zero is bound to target.
ZeroExtend
Zext
Zs7
ZsG
Zt&
[
["A
[%
[%d]
[)>
[/0
[0]
[4>
[4]
[5
[7
[8
[?>
[E
[I0
[M5
[VH
[[E
[\W
[]; };
[][]
[gl_MinProgramTexelOffset, gl_MaxProgramTexelOffset]
[int(clamp(float(
[s/
[webgl_int_clamp(
\
\!2
\#>
\0
\6
\7
\8
\9F
\;,
\A>
\T5
\TG
\UG
\g[
\n,
\n/
\vY
\{/
\|O
]
] + (gl_VertexIndex + gl_InstanceIndex *
] =
] of
])
]);
], x[
],>
],S
]0.
]7
]7>
]7E
]8
];2
]@>
]C
]O-
]X5
]XH
]]
]_C
]f5
]i5
]o7
]o=
]|7
^
^&>
^-
^7
^8
^=
^M
^V8
^^
^b[
^f0
^h0
^hT
^o5
^pG
^u/
^|7
_
_$>
_/>
_7
_8
_:>
_;E
_=U
_D2
_DYNAMIC
_GLOBAL_OFFSET_TABLE_
_GLOBAL__sub_I_SPVRemapper.cpp
_GLOBAL__sub_I_doc.cpp
_GLOBAL__sub_I_iostream.cpp
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
_Unwind_DeleteException
_Unwind_GetIP
_Unwind_GetLanguageSpecificData
_Unwind_GetRegionStart
_Unwind_RaiseException
_Unwind_Resume
_Unwind_SetGR
_Unwind_SetIP
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__10_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__11_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__12_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__13_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__14_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__15_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__16_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__17_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__18_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__19_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__20_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__21_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__22_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__23_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__24_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__25_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__26_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__27_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__28_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__29_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__30_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__31_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__32_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__33_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__34_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__35_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__36_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__37_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__38_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__39_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__40_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__41_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__42_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__43_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__44_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__45_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__46_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__47_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__48_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__49_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__50_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__51_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__52_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__53_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__54_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__55_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__56_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__57_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__58_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__59_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__60_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__61_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__62_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__63_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__64_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__65_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__66_
_ZZN2rx2vk6Format10initializeEPNS_10RendererVkERKN5angle6FormatEE5kInfo__67_
__BI_
__BI_Append
__BI_CalculateLevelOfDetail
__BI_CalculateLevelOfDetailUnclamped
__BI_Consume
__BI_DecrementCounter
__BI_Gather
__BI_GatherAlpha
__BI_GatherBlue
__BI_GatherCmp
__BI_GatherCmpAlpha
__BI_GatherCmpBlue
__BI_GatherCmpGreen
__BI_GatherCmpRed
__BI_GatherGreen
__BI_GatherRed
__BI_GetDimensions
__BI_GetSamplePosition
__BI_IncrementCounter
__BI_InterlockedAdd
__BI_InterlockedAnd
__BI_InterlockedCompareExchange
__BI_InterlockedCompareStore
__BI_InterlockedExchange
__BI_InterlockedMax
__BI_InterlockedMin
__BI_InterlockedOr
__BI_InterlockedXor
__BI_Load
__BI_Load2
__BI_Load3
__BI_Load4
__BI_RestartStrip
__BI_Sample
__BI_SampleBias
__BI_SampleCmp
__BI_SampleCmpLevelZero
__BI_SampleGrad
__BI_SampleLevel
__BI_Store
__BI_Store2
__BI_Store3
__BI_Store4
__BI_SubpassLoad
__BI_SubpassLoadMS
__FILE__
__FRAME_END__
__LINE__
__TMC_END__
__TMC_LIST__
__VERSION__
__bss_start
__clang_call_terminate
__ctype_b_loc
__ctype_get_mb_cur_max
__ctype_tolower_loc
__ctype_toupper_loc
__cxa_allocate_exception
__cxa_atexit
__cxa_begin_catch
__cxa_call_unexpected
__cxa_decrement_exception_refcount
__cxa_end_catch
__cxa_finalize
__cxa_free_exception
__cxa_get_globals
__cxa_get_globals_fast
__cxa_guard_abort
__cxa_guard_abort failed to acquire mutex
__cxa_guard_abort failed to broadcast condition variable
__cxa_guard_abort failed to release mutex
__cxa_guard_acquire
__cxa_guard_acquire condition variable wait failed
__cxa_guard_acquire failed to acquire mutex
__cxa_guard_acquire failed to release mutex
__cxa_guard_release
__cxa_guard_release failed to acquire mutex
__cxa_guard_release failed to broadcast condition variable
__cxa_guard_release failed to release mutex
__cxa_new_handler
__cxa_pure_virtual
__cxa_rethrow
__cxa_terminate_handler
__cxa_throw
__cxa_uncaught_exceptions
__cxa_unexpected_handler
__cxx_global_array_dtor
__cxx_global_array_dtor.113
__cxx_global_array_dtor.137
__cxx_global_array_dtor.140
__cxx_global_array_dtor.74
__cxx_global_array_dtor.89
__cxx_global_array_dtor.926
__cxx_global_array_dtor.928
__cxxabiv1::(anonymous namespace)::construct_()
__cxxabiv1::(anonymous namespace)::destruct_(void*)
__cxxabiv1::(anonymous namespace)::flag_
__cxxabiv1::(anonymous namespace)::guard_cv
__cxxabiv1::(anonymous namespace)::guard_mut
__cxxabiv1::(anonymous namespace)::key_
__cxxabiv1::__aligned_free_with_fallback(void*)
__cxxabiv1::__aligned_malloc_with_fallback(unsigned long)
__cxxabiv1::__array_type_info::~__array_type_info()
__cxxabiv1::__calloc_with_fallback(unsigned long, unsigned long)
__cxxabiv1::__class_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const
__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const
__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const
__cxxabiv1::__class_type_info::~__class_type_info()
__cxxabiv1::__enum_type_info::~__enum_type_info()
__cxxabiv1::__free_with_fallback(void*)
__cxxabiv1::__function_type_info::~__function_type_info()
__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()
__cxxabiv1::__getExceptionClass(_Unwind_Exception const*)
__cxxabiv1::__isOurExceptionClass(_Unwind_Exception const*)
__cxxabiv1::__pbase_type_info::~__pbase_type_info()
__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()
__cxxabiv1::__pointer_type_info::~__pointer_type_info()
__cxxabiv1::__shim_type_info::noop1() const
__cxxabiv1::__shim_type_info::noop2() const
__cxxabiv1::__shim_type_info::~__shim_type_info()
__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const
__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const
__cxxabiv1::__si_class_type_info::~__si_class_type_info()
__cxxabiv1::__vmi_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const
__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const
__cxxabiv1::__vmi_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const
__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()
__cxxabiv1::call_terminate(bool, _Unwind_Exception*)
__cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*)
__cxxabiv1::failed_throw(__cxxabiv1::__cxa_exception*)
__cxxabiv1::readEncodedPointer(unsigned char const**, unsigned char)
__cxxabiv1::scan_eh_tab(__cxxabiv1::(anonymous namespace)::scan_results&, _Unwind_Action, bool, _Unwind_Exception*, _Unwind_Context*)
__do_global_dtors_aux
__do_global_dtors_aux_fini_array_entry
__dso_handle
__dynamic_cast
__errno_location
__explicitInterpAMD
__fpclassify
__fpclassifyf
__frame_dummy_init_array_entry
__gmon_start__
__gxx_personality_v0
__iimageCubeArray
__imageCubeArray
__isamplerCubeArray
__isinf
__isnan
__isnanf
__isoc99_sscanf
__isoc99_vsscanf
__memcpy_chk
__next_prime overflow
__samplerCubeArray
__samplerCubeArrayShadow
__samplerExternal2DY2YEXT
__stack_chk_fail
__thread_specific_ptr construction failed
__uimageCubeArray
__usamplerCubeArray
_cpu_check_features
_eG
_edata
_emu
_end
_fini
_frl(inout
_frm(inout
_init
_k&
_kG
_p7
_padding
_q7
_quadsnv
_r:
_t7
_u
_webgl_
_webgl_struct_
_|7
_}Y
_~,
`
` 8
`!8
`"8
`#8
`$8
`%8
`&8
`'8
`(8
`)8
`)>
`*8
`+8
`,8
`-8
`.8
`/8
`08
`0B
`18
`28
`38
`48
`5
`58
`6
`68
`7
`78
`8
`88
`98
`:8
`;8
`<8
`=8
`>+
`>8
`?
`?8
`@8
`A8
`B8
`C8
`C@
`D8
`E8
`F8
`G8
`H8
`I8
`J8
`K+
`K8
`L8
`M8
`N8
`O8
`OG
`P8
`Q8
`R8
`S8
`T8
`U8
`V
`V8
`W8
`X8
`Y8
`Z8
`[8
`\8
`]8
`^8
`_8
``8
`a8
`b8
`bC
`c8
`d8
`e8
`f8
`g8
`h8
`i8
`j8
`k8
`l8
`m8
`n8
`o8
`p8
`q8
`r8
`s8
`s[
`t8
`u8
`v8
`w8
`x8
`y8
`z8
`{8
`|8
`}8
`~8
`8
a
a struct cannot be used as a constructor argument for this type
a'>
a+>
a,
a,5
a/.
a2>
a7
a8
a=>
aGE
aI0
aZE
a[
a\5
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789
abort
abort_message
abort_message.cpp
abs(00B
abs(00C
abs(00D
abs(10B
abs(10C
abs(10D
abs(20B
abs(20C
abs(20D
abs(30B
abs(30C
abs(30D
abs(i) where i is an integer returns unexpected result
absoluteDifference
acbBufferOffsets
accelerationStructureEXT
accelerationStructureNV can only be used in uniform variables or function parameters:
access is not one of the supported tokens.
access qualifier
acos
acos(00B
acos(10B
acos(20B
acos(30B
acosf
acosh
acosh(00B
acosh(10B
acosh(20B
acosh(30B
acoshf
acospi
add second child into first child
addInvocations
addInvocationsAMD
addInvocationsExclusiveScan
addInvocationsExclusiveScanAMD
addInvocationsExclusiveScanNonUniform
addInvocationsExclusiveScanNonUniformAMD
addInvocationsInclusiveScan
addInvocationsInclusiveScanAMD
addInvocationsInclusiveScanNonUniform
addInvocationsInclusiveScanNonUniformAMD
addInvocationsNonUniform
addInvocationsNonUniformAMD
addSaturate
addTraceEvent
add_and_true_to_loop_condition
additive_expression
addressing model
adjust_src_dst_region_for_blitframebuffer
adler32.c
adler32_simd.c
ae7
agT
aggShadow
aggressive_dead_code_elim_pass.cpp
ahG
akG
algorithm.cpp
align=
aligned_alloc
aligned_memory.cpp
all
all default precisions are highp; use precision statements to quiet warning, e.g.:         "precision mediump int; precision highp float;"
all members of that structure type must also be decorated with
all redeclarations must use the same depth layout on
all stride settings must match for xfb buffer
all(10F
all(20F
all(30F
allInvocations
allInvocations(00F
allInvocationsARB
allInvocationsEqual
allInvocationsEqual(00F
allInvocationsEqualARB
allocate
allocateCommandBuffer
allocateNewPool
allocateSets
allocate_non_zero_memory
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
allow_clear_for_robust_resource_init
allow_uav_conditerlockedExchangeeger
also be decorated with a *Binding*.
always_call_use_program_after_link
amG
ambiguous best function under implicit type conversion
ambiguous function signature match: multiple signatures match under implicit type conversion
ambiguous patch constant function
amd_ext_to_khr.cpp
and '
and OpImageFetch
and ending with
android_util.cpp
angle::(anonymous namespace)::A1RGB5_ANGLEX_to_A1R5G5B5_UNORM(unsigned int)
angle::(anonymous namespace)::ALPHA16F_EXT_to_R16_FLOAT(unsigned int)
angle::(anonymous namespace)::ALPHA16F_EXT_to_default(unsigned int)
angle::(anonymous namespace)::ALPHA32F_EXT_to_R32_FLOAT(unsigned int)
angle::(anonymous namespace)::ALPHA32F_EXT_to_default(unsigned int)
angle::(anonymous namespace)::ALPHA8_EXT_to_A8_UNORM(unsigned int)
angle::(anonymous namespace)::ALPHA8_EXT_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::ALPHA8_EXT_to_R8_UNORM(unsigned int)
angle::(anonymous namespace)::ALPHA_to_R16G16B16A16_FLOAT(unsigned int)
angle::(anonymous namespace)::ALPHA_to_R32G32B32A32_FLOAT(unsigned int)
angle::(anonymous namespace)::ALPHA_to_default(unsigned int)
angle::(anonymous namespace)::BGR565_ANGLEX_to_B5G6R5_UNORM(unsigned int)
angle::(anonymous namespace)::BGR5_A1_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::BGRA4_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::BGRA8_EXT_to_default(unsigned int)
angle::(anonymous namespace)::BGRA8_SRGB_ANGLEX_to_B8G8R8A8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::BGRA_EXT_to_default(unsigned int)
angle::(anonymous namespace)::BGRX8_ANGLEX_to_B8G8R8A8_UNORM(unsigned int)
angle::(anonymous namespace)::BGRX8_ANGLEX_to_B8G8R8X8_UNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_R11_EAC_to_EAC_R11_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_R11_EAC_to_R16_FLOAT(unsigned int)
angle::(anonymous namespace)::COMPRESSED_R11_EAC_to_R16_UNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RED_GREEN_RGTC2_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RED_RGTC1_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RG11_EAC_to_EAC_R11G11_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RG11_EAC_to_R16G16_FLOAT(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RG11_EAC_to_R16G16_UNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB8_ETC2_to_ETC2_R8G8B8_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB8_ETC2_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB8_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGB_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_ETC2_R8G8B8A1_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGBA_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA8_ETC2_EAC_to_ETC2_R8G8B8A8_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA8_ETC2_EAC_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_10x10_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_10x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_10x6_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_10x8_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_12x10_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_12x12_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_3x3x3_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_4x3x3_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_4x4_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_4x4x3_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_4x4x4_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_5x4_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_5x4x4_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_5x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_5x5x4_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_5x5x5_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_6x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_6x5x5_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_6x6_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_6x6x5_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_6x6x6_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_8x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_8x6_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_ASTC_8x8_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_BPTC_UNORM_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_S3TC_DXT1_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_S3TC_DXT3_ANGLE_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGBA_S3TC_DXT5_ANGLE_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_RGB_S3TC_DXT1_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_R11_EAC_to_EAC_R11_SNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_R11_EAC_to_R16_FLOAT(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_R11_EAC_to_R16_SNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_RED_RGTC1_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_RG11_EAC_to_EAC_R11G11_SNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_RG11_EAC_to_R16G16_FLOAT(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SIGNED_RG11_EAC_to_R16G16_SNORM(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_to_ETC2_R8G8B8A8_SRGB_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_to_R8G8B8A8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ETC2_to_ETC2_R8G8B8_SRGB_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_ETC2_to_R8G8B8A8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGB_UNORM_SRGB_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_ETC2_R8G8B8A1_SRGB_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_to_R8G8B8A8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_LOSSY_DECODE_ETC2_ANGLE_to_BC1_RGBA_UNORM_SRGB_BLOCK(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT_to_default(unsigned int)
angle::(anonymous namespace)::COMPRESSED_SRGB_S3TC_DXT1_EXT_to_default(unsigned int)
angle::(anonymous namespace)::DEPTH24_STENCIL8_to_D24_UNORM_S8_UINT(unsigned int)
angle::(anonymous namespace)::DEPTH24_STENCIL8_to_D32_FLOAT_S8X24_UINT(unsigned int)
angle::(anonymous namespace)::DEPTH32F_STENCIL8_to_D24_UNORM_S8_UINT(unsigned int)
angle::(anonymous namespace)::DEPTH32F_STENCIL8_to_D32_FLOAT_S8X24_UINT(unsigned int)
angle::(anonymous namespace)::DEPTH_COMPONENT16_to_D16_UNORM(unsigned int)
angle::(anonymous namespace)::DEPTH_COMPONENT24_to_D24_UNORM_S8_UINT(unsigned int)
angle::(anonymous namespace)::DEPTH_COMPONENT24_to_D24_UNORM_X8_UINT(unsigned int)
angle::(anonymous namespace)::DEPTH_COMPONENT24_to_D32_FLOAT_S8X24_UINT(unsigned int)
angle::(anonymous namespace)::DEPTH_COMPONENT32F_to_D32_FLOAT(unsigned int)
angle::(anonymous namespace)::DEPTH_COMPONENT32_OES_to_D32_FLOAT(unsigned int)
angle::(anonymous namespace)::DEPTH_COMPONENT32_OES_to_default(unsigned int)
angle::(anonymous namespace)::DefaultETCAlphaValues
angle::(anonymous namespace)::ETC1_RGB8_LOSSY_DECODE_ANGLE_to_BC1_RGB_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::ETC1_RGB8_OES_to_ETC1_R8G8B8_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::ETC1_RGB8_OES_to_ETC2_R8G8B8_UNORM_BLOCK(unsigned int)
angle::(anonymous namespace)::ETC1_RGB8_OES_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::ETC2Block::decodeAsRGB(unsigned char*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char const (*) [4], bool) const
angle::(anonymous namespace)::ETC2Block::decodeAsSingleEACChannel(unsigned short*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, bool, bool) const
angle::(anonymous namespace)::ETC2Block::decodeIndividualOrDifferentialBlock(unsigned char*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int, int, int, int, int, int, unsigned char const (*) [4], bool) const
angle::(anonymous namespace)::ETC2Block::decodePlanarBlock(unsigned char*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char const (*) [4]) const
angle::(anonymous namespace)::ETC2Block::getSingleChannelModifier(unsigned long, unsigned long) const
angle::(anonymous namespace)::ETC2Block::getSingleChannelModifier(unsigned long, unsigned long) const::modifierTable
angle::(anonymous namespace)::ETC2Block::packBC1(void*, int const*, int const*, angle::R8G8B8A8 const*, unsigned long, int, int, bool) const
angle::(anonymous namespace)::ETC2Block::selectEndPointPCA(int const*, angle::R8G8B8A8 const*, unsigned long, int*, int*) const
angle::(anonymous namespace)::ETC2Block::transcodeHBlockToBC1(unsigned char*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char const (*) [4], bool) const::distance
angle::(anonymous namespace)::ETC2Block::transcodeIndividualOrDifferentialBlockToBC1(unsigned char*, unsigned long, unsigned long, unsigned long, unsigned long, int, int, int, int, int, int, unsigned char const (*) [4], bool) const
angle::(anonymous namespace)::LUMINANCE16F_EXT_to_R16_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE16F_EXT_to_default(unsigned int)
angle::(anonymous namespace)::LUMINANCE32F_EXT_to_R32_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE32F_EXT_to_default(unsigned int)
angle::(anonymous namespace)::LUMINANCE8_ALPHA8_EXT_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::LUMINANCE8_ALPHA8_EXT_to_R8G8_UNORM(unsigned int)
angle::(anonymous namespace)::LUMINANCE8_EXT_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::LUMINANCE8_EXT_to_R8_UNORM(unsigned int)
angle::(anonymous namespace)::LUMINANCE_ALPHA16F_EXT_to_R16G16_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE_ALPHA16F_EXT_to_default(unsigned int)
angle::(anonymous namespace)::LUMINANCE_ALPHA32F_EXT_to_R32G32_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE_ALPHA32F_EXT_to_default(unsigned int)
angle::(anonymous namespace)::LUMINANCE_ALPHA_to_R16G16B16A16_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE_ALPHA_to_R32G32B32A32_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE_ALPHA_to_default(unsigned int)
angle::(anonymous namespace)::LUMINANCE_to_R16G16B16A16_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE_to_R32G32B32A32_FLOAT(unsigned int)
angle::(anonymous namespace)::LUMINANCE_to_default(unsigned int)
angle::(anonymous namespace)::LoadETC2RGB8ToBC1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long, bool)
angle::(anonymous namespace)::LoadETC2RGBA8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long, bool)
angle::(anonymous namespace)::R11F_G11F_B10F_to_R11G11B10_FLOAT(unsigned int)
angle::(anonymous namespace)::R16F_to_R16_FLOAT(unsigned int)
angle::(anonymous namespace)::R16I_to_R16_SINT(unsigned int)
angle::(anonymous namespace)::R16UI_to_R16_UINT(unsigned int)
angle::(anonymous namespace)::R16_EXT_to_R16_UNORM(unsigned int)
angle::(anonymous namespace)::R16_SNORM_EXT_to_R16_SNORM(unsigned int)
angle::(anonymous namespace)::R16_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::R16_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::R32F_to_R32_FLOAT(unsigned int)
angle::(anonymous namespace)::R32I_to_R32_SINT(unsigned int)
angle::(anonymous namespace)::R32UI_to_R32_UINT(unsigned int)
angle::(anonymous namespace)::R8I_to_R8_SINT(unsigned int)
angle::(anonymous namespace)::R8UI_to_R8_UINT(unsigned int)
angle::(anonymous namespace)::R8_SNORM_to_R8_SNORM(unsigned int)
angle::(anonymous namespace)::R8_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::R8_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::R8_to_R8_UNORM(unsigned int)
angle::(anonymous namespace)::RG16F_to_R16G16_FLOAT(unsigned int)
angle::(anonymous namespace)::RG16I_to_R16G16_SINT(unsigned int)
angle::(anonymous namespace)::RG16UI_to_R16G16_UINT(unsigned int)
angle::(anonymous namespace)::RG16_EXT_to_R16G16_UNORM(unsigned int)
angle::(anonymous namespace)::RG16_SNORM_EXT_to_R16G16_SNORM(unsigned int)
angle::(anonymous namespace)::RG16_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RG16_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RG32F_to_R32G32_FLOAT(unsigned int)
angle::(anonymous namespace)::RG32I_to_R32G32_SINT(unsigned int)
angle::(anonymous namespace)::RG32UI_to_R32G32_UINT(unsigned int)
angle::(anonymous namespace)::RG8I_to_R8G8_SINT(unsigned int)
angle::(anonymous namespace)::RG8UI_to_R8G8_UINT(unsigned int)
angle::(anonymous namespace)::RG8_SNORM_to_R8G8_SNORM(unsigned int)
angle::(anonymous namespace)::RG8_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RG8_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RG8_to_R8G8_UNORM(unsigned int)
angle::(anonymous namespace)::RGB10_A2UI_to_R10G10B10A2_UINT(unsigned int)
angle::(anonymous namespace)::RGB10_A2_SINT_ANGLEX_to_R10G10B10A2_SINT(unsigned int)
angle::(anonymous namespace)::RGB10_A2_SNORM_ANGLEX_to_R10G10B10A2_SNORM(unsigned int)
angle::(anonymous namespace)::RGB10_A2_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGB10_A2_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGB10_A2_to_R10G10B10A2_UNORM(unsigned int)
angle::(anonymous namespace)::RGB10_UNORM_ANGLEX_to_R10G10B10A2_UNORM(unsigned int)
angle::(anonymous namespace)::RGB16F_to_R16G16B16A16_FLOAT(unsigned int)
angle::(anonymous namespace)::RGB16F_to_R16G16B16_FLOAT(unsigned int)
angle::(anonymous namespace)::RGB16I_to_R16G16B16A16_SINT(unsigned int)
angle::(anonymous namespace)::RGB16I_to_R16G16B16_SINT(unsigned int)
angle::(anonymous namespace)::RGB16UI_to_R16G16B16A16_UINT(unsigned int)
angle::(anonymous namespace)::RGB16UI_to_R16G16B16_UINT(unsigned int)
angle::(anonymous namespace)::RGB16_EXT_to_R16G16B16A16_UNORM(unsigned int)
angle::(anonymous namespace)::RGB16_EXT_to_R16G16B16_UNORM(unsigned int)
angle::(anonymous namespace)::RGB16_SNORM_EXT_to_R16G16B16A16_SNORM(unsigned int)
angle::(anonymous namespace)::RGB16_SNORM_EXT_to_R16G16B16_SNORM(unsigned int)
angle::(anonymous namespace)::RGB16_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGB16_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGB32F_to_R32G32B32A32_FLOAT(unsigned int)
angle::(anonymous namespace)::RGB32F_to_R32G32B32_FLOAT(unsigned int)
angle::(anonymous namespace)::RGB32I_to_R32G32B32A32_SINT(unsigned int)
angle::(anonymous namespace)::RGB32I_to_R32G32B32_SINT(unsigned int)
angle::(anonymous namespace)::RGB32UI_to_R32G32B32A32_UINT(unsigned int)
angle::(anonymous namespace)::RGB32UI_to_R32G32B32_UINT(unsigned int)
angle::(anonymous namespace)::RGB565_to_B5G6R5_UNORM(unsigned int)
angle::(anonymous namespace)::RGB565_to_R5G6B5_UNORM(unsigned int)
angle::(anonymous namespace)::RGB565_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::RGB5_A1_to_A1R5G5B5_UNORM(unsigned int)
angle::(anonymous namespace)::RGB5_A1_to_B5G5R5A1_UNORM(unsigned int)
angle::(anonymous namespace)::RGB5_A1_to_R5G5B5A1_UNORM(unsigned int)
angle::(anonymous namespace)::RGB5_A1_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::RGB8I_to_R8G8B8A8_SINT(unsigned int)
angle::(anonymous namespace)::RGB8I_to_R8G8B8_SINT(unsigned int)
angle::(anonymous namespace)::RGB8UI_to_R8G8B8A8_UINT(unsigned int)
angle::(anonymous namespace)::RGB8UI_to_R8G8B8_UINT(unsigned int)
angle::(anonymous namespace)::RGB8_SNORM_to_R8G8B8A8_SNORM(unsigned int)
angle::(anonymous namespace)::RGB8_SNORM_to_R8G8B8_SNORM(unsigned int)
angle::(anonymous namespace)::RGB8_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGB8_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGB8_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::RGB8_to_R8G8B8_UNORM(unsigned int)
angle::(anonymous namespace)::RGB9_E5_to_R9G9B9E5_SHAREDEXP(unsigned int)
angle::(anonymous namespace)::RGBA16F_to_R16G16B16A16_FLOAT(unsigned int)
angle::(anonymous namespace)::RGBA16I_to_R16G16B16A16_SINT(unsigned int)
angle::(anonymous namespace)::RGBA16UI_to_R16G16B16A16_UINT(unsigned int)
angle::(anonymous namespace)::RGBA16_EXT_to_R16G16B16A16_UNORM(unsigned int)
angle::(anonymous namespace)::RGBA16_SNORM_EXT_to_R16G16B16A16_SNORM(unsigned int)
angle::(anonymous namespace)::RGBA16_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGBA16_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGBA32F_to_R32G32B32A32_FLOAT(unsigned int)
angle::(anonymous namespace)::RGBA32I_to_R32G32B32A32_SINT(unsigned int)
angle::(anonymous namespace)::RGBA32UI_to_R32G32B32A32_UINT(unsigned int)
angle::(anonymous namespace)::RGBA4_to_B4G4R4A4_UNORM(unsigned int)
angle::(anonymous namespace)::RGBA4_to_R4G4B4A4_UNORM(unsigned int)
angle::(anonymous namespace)::RGBA4_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::RGBA8I_to_R8G8B8A8_SINT(unsigned int)
angle::(anonymous namespace)::RGBA8UI_to_R8G8B8A8_UINT(unsigned int)
angle::(anonymous namespace)::RGBA8_SNORM_to_R8G8B8A8_SNORM(unsigned int)
angle::(anonymous namespace)::RGBA8_SSCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGBA8_USCALED_ANGLEX_to_default(unsigned int)
angle::(anonymous namespace)::RGBA8_to_R8G8B8A8_UNORM(unsigned int)
angle::(anonymous namespace)::RGBA_to_default(unsigned int)
angle::(anonymous namespace)::RGB_to_default(unsigned int)
angle::(anonymous namespace)::SR8_EXT_to_R8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::SRGB8_ALPHA8_to_R8G8B8A8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::SRGB8_to_R8G8B8A8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::SRGB8_to_R8G8B8_UNORM_SRGB(unsigned int)
angle::(anonymous namespace)::STENCIL_INDEX8_to_default(unsigned int)
angle::(anonymous namespace)::UnimplementedLoadFunction(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::(anonymous namespace)::UnreachableLoadFunction(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveDefine
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveElif
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveElse
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveEndif
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveError
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveExtension
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveIf
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveIfdef
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveIfndef
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveLine
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectivePragma
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveUndef
angle::(anonymous namespace)::getDirective(angle::pp::Token const*)::kDirectiveVersion
angle::(anonymous namespace)::intensityModifierDefault
angle::(anonymous namespace)::intensityModifierNonOpaque
angle::A16F::average(angle::A16F*, angle::A16F const*, angle::A16F const*)
angle::A16F::readColor(angle::Color<float>*, angle::A16F const*)
angle::A16F::writeColor(angle::A16F*, angle::Color<float> const*)
angle::A1R5G5B5::average(angle::A1R5G5B5*, angle::A1R5G5B5 const*, angle::A1R5G5B5 const*)
angle::A1R5G5B5::readColor(angle::Color<float>*, angle::A1R5G5B5 const*)
angle::A1R5G5B5::writeColor(angle::A1R5G5B5*, angle::Color<float> const*)
angle::A32F::average(angle::A32F*, angle::A32F const*, angle::A32F const*)
angle::A32F::readColor(angle::Color<float>*, angle::A32F const*)
angle::A32F::writeColor(angle::A32F*, angle::Color<float> const*)
angle::A4R4G4B4::average(angle::A4R4G4B4*, angle::A4R4G4B4 const*, angle::A4R4G4B4 const*)
angle::A4R4G4B4::readColor(angle::Color<float>*, angle::A4R4G4B4 const*)
angle::A4R4G4B4::writeColor(angle::A4R4G4B4*, angle::Color<float> const*)
angle::A8::average(angle::A8*, angle::A8 const*, angle::A8 const*)
angle::A8::readColor(angle::Color<float>*, angle::A8 const*)
angle::A8::writeColor(angle::A8*, angle::Color<float> const*)
angle::AddTraceEvent(angle::PlatformMethods*, char, unsigned char const*, char const*, unsigned long long, int, char const**, unsigned char const*, unsigned long long const*, unsigned char)
angle::AlignedAlloc(unsigned long, unsigned long)
angle::AlignedFree(void*)
angle::AsyncWaitableEvent::isReady()
angle::AsyncWaitableEvent::wait()
angle::AsyncWaitableEvent::wait()::trace_event_unique_catstatic110
angle::AsyncWaitableEvent::~AsyncWaitableEvent()
angle::AsyncWorkerPool::checkToRunPendingTasks()
angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1::operator()() const::trace_event_unique_catstatic193
angle::AsyncWorkerPool::isAsync()
angle::AsyncWorkerPool::postWorkerTask(std::__1::shared_ptr<angle::Closure>)
angle::AsyncWorkerPool::setMaxThreads(unsigned long)
angle::AsyncWorkerPool::~AsyncWorkerPool()
angle::B5G6R5::average(angle::B5G6R5*, angle::B5G6R5 const*, angle::B5G6R5 const*)
angle::B5G6R5::readColor(angle::Color<float>*, angle::B5G6R5 const*)
angle::B5G6R5::writeColor(angle::B5G6R5*, angle::Color<float> const*)
angle::B8G8R8A8::average(angle::B8G8R8A8*, angle::B8G8R8A8 const*, angle::B8G8R8A8 const*)
angle::B8G8R8A8::readColor(angle::Color<float>*, angle::B8G8R8A8 const*)
angle::B8G8R8A8::writeColor(angle::B8G8R8A8*, angle::Color<float> const*)
angle::B8G8R8X8::average(angle::B8G8R8X8*, angle::B8G8R8X8 const*, angle::B8G8R8X8 const*)
angle::B8G8R8X8::readColor(angle::Color<float>*, angle::B8G8R8X8 const*)
angle::B8G8R8X8::writeColor(angle::B8G8R8X8*, angle::Color<float> const*)
angle::BGRACopyFunctions
angle::BGRAEntry
angle::BeginsWith(char const*, char const*)
angle::BeginsWith(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const*)
angle::BeginsWith(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
angle::BeginsWith(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)
angle::BindingPointer<egl::Image, egl::Display, egl::Error>::~BindingPointer()
angle::BindingPointer<gl::Buffer, gl::Context, angle::Result>::~BindingPointer()
angle::BindingPointer<gl::Compiler, gl::Context, angle::Result>::~BindingPointer()
angle::BindingPointer<gl::ProgramPipeline, gl::Context, angle::Result>::~BindingPointer()
angle::BindingPointer<gl::Query, gl::Context, angle::Result>::~BindingPointer()
angle::BindingPointer<gl::Renderbuffer, gl::Context, angle::Result>::~BindingPointer()
angle::BindingPointer<gl::Sampler, gl::Context, angle::Result>::~BindingPointer()
angle::BindingPointer<gl::Texture, gl::Context, angle::Result>::~BindingPointer()
angle::BindingPointer<gl::TransformFeedback, gl::Context, angle::Result>::~BindingPointer()
angle::BreakDebugger()
angle::CopyBGRA8ToRGBA8(unsigned char const*, unsigned char*)
angle::D16::ReadDepthStencil(angle::DepthStencil*, angle::D16 const*)
angle::D16::WriteDepthStencil(angle::D16*, angle::DepthStencil const*)
angle::D24S8::ReadDepthStencil(angle::DepthStencil*, angle::D24S8 const*)
angle::D24S8::WriteDepthStencil(angle::D24S8*, angle::DepthStencil const*)
angle::D24X8::ReadDepthStencil(angle::DepthStencil*, angle::D24X8 const*)
angle::D24X8::WriteDepthStencil(angle::D24X8*, angle::DepthStencil const*)
angle::D32::ReadDepthStencil(angle::DepthStencil*, angle::D32 const*)
angle::D32::WriteDepthStencil(angle::D32*, angle::DepthStencil const*)
angle::D32F::ReadDepthStencil(angle::DepthStencil*, angle::D32F const*)
angle::D32F::WriteDepthStencil(angle::D32F*, angle::DepthStencil const*)
angle::D32FS8X24::ReadDepthStencil(angle::DepthStencil*, angle::D32FS8X24 const*)
angle::D32FS8X24::WriteDepthStencil(angle::D32FS8X24*, angle::DepthStencil const*)
angle::DefaultAddTraceEvent(angle::PlatformMethods*, char, unsigned char const*, char const*, unsigned long long, double, int, char const**, unsigned char const*, unsigned long long const*, unsigned char)
angle::DefaultCacheProgram(angle::PlatformMethods*, std::__1::array<unsigned char, 20ul> const&, unsigned long, unsigned char const*)
angle::DefaultCurrentTime(angle::PlatformMethods*)
angle::DefaultGetTraceCategoryEnabledFlag(angle::PlatformMethods*, char const*)
angle::DefaultHistogramBoolean(angle::PlatformMethods*, char const*, bool)
angle::DefaultHistogramCustomCounts(angle::PlatformMethods*, char const*, int, int, int, int)
angle::DefaultHistogramEnumeration(angle::PlatformMethods*, char const*, int, int)
angle::DefaultHistogramSparse(angle::PlatformMethods*, char const*, int)
angle::DefaultLogError(angle::PlatformMethods*, char const*)
angle::DefaultLogInfo(angle::PlatformMethods*, char const*)
angle::DefaultLogWarning(angle::PlatformMethods*, char const*)
angle::DefaultMonotonicallyIncreasingTime(angle::PlatformMethods*)
angle::DefaultOverrideFeaturesMtl(angle::PlatformMethods*, angle::FeaturesMtl*)
angle::DefaultOverrideFeaturesVk(angle::PlatformMethods*, angle::FeaturesVk*)
angle::DefaultOverrideWorkaroundsD3D(angle::PlatformMethods*, angle::FeaturesD3D*)
angle::DefaultUpdateTraceEventDuration(angle::PlatformMethods*, unsigned char const*, char const*, unsigned long)
angle::DelegateWaitableEvent::isReady()
angle::DelegateWaitableEvent::wait()
angle::DelegateWaitableEvent::~DelegateWaitableEvent()
angle::DelegateWorkerPool::isAsync()
angle::DelegateWorkerPool::postWorkerTask(std::__1::shared_ptr<angle::Closure>)
angle::DelegateWorkerPool::setMaxThreads(unsigned long)
angle::DelegateWorkerPool::~DelegateWorkerPool()
angle::DelegateWorkerTask::RunTask(void*)
angle::DirtyPointer
angle::Feature::Feature(char const*, angle::FeatureCategory const&, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, angle::Feature*> > >*, char const*)
angle::FeatureSetBase::overrideFeatures(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, bool)
angle::FeatureSetBase::populateFeatureList(std::__1::vector<angle::Feature const*, std::__1::allocator<angle::Feature const*> >*) const
angle::FeaturesGL::FeaturesGL()
angle::FeaturesVk::FeaturesVk()
angle::FixedVector<angle::Mat4, 16ul, std::__1::array<angle::Mat4, 16ul> >::resize(unsigned long)
angle::Format::InternalFormatToID(unsigned int)
angle::FrameCapture::FrameCapture()
angle::FrameCapture::onEndFrame(gl::Context const*)
angle::FrameCapture::onMakeCurrent(egl::Surface const*)
angle::FrameCapture::~FrameCapture()
angle::GetCWD()
angle::GetEnvironmentVar(char const*)
angle::GetExecutableDirectory()
angle::GetExecutablePath()
angle::GetLoadFunctionsMap(unsigned int, angle::FormatID)
angle::GetPathSeparatorForEnvironmentVar()
angle::GetStringsFromEnvironmentVar(char const*, char const*)
angle::GetTraceCategoryEnabledFlag(angle::PlatformMethods*, char const*)
angle::GetTraceCategoryEnabledFlag(angle::PlatformMethods*, char const*)::disabled
angle::IsDebuggerAttached()
angle::L16A16F::average(angle::L16A16F*, angle::L16A16F const*, angle::L16A16F const*)
angle::L16A16F::readColor(angle::Color<float>*, angle::L16A16F const*)
angle::L16A16F::writeColor(angle::L16A16F*, angle::Color<float> const*)
angle::L16F::average(angle::L16F*, angle::L16F const*, angle::L16F const*)
angle::L16F::readColor(angle::Color<float>*, angle::L16F const*)
angle::L16F::writeColor(angle::L16F*, angle::Color<float> const*)
angle::L32A32F::average(angle::L32A32F*, angle::L32A32F const*, angle::L32A32F const*)
angle::L32A32F::readColor(angle::Color<float>*, angle::L32A32F const*)
angle::L32A32F::writeColor(angle::L32A32F*, angle::Color<float> const*)
angle::L32F::average(angle::L32F*, angle::L32F const*, angle::L32F const*)
angle::L32F::readColor(angle::Color<float>*, angle::L32F const*)
angle::L32F::writeColor(angle::L32F*, angle::Color<float> const*)
angle::L8::average(angle::L8*, angle::L8 const*, angle::L8 const*)
angle::L8::readColor(angle::Color<float>*, angle::L8 const*)
angle::L8::writeColor(angle::L8*, angle::Color<float> const*)
angle::L8A8::average(angle::L8A8*, angle::L8A8 const*, angle::L8A8 const*)
angle::L8A8::readColor(angle::Color<float>*, angle::L8A8 const*)
angle::L8A8::writeColor(angle::L8A8*, angle::Color<float> const*)
angle::LoadA16FToRGBA16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadA32FToRGBA32F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadA8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD24S8ToD32F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD24S8ToD32FS8X24(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD32FS8X24ToD24S8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD32FS8X24ToD32F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD32FS8X24ToD32FS8X24(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD32FToD32F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD32ToD32F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadD32ToD32FX32(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACR11SToR16(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACR11SToR16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACR11ToR16(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACR11ToR16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACRG11SToRG16(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACRG11SToRG16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACRG11ToRG16(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadEACRG11ToRG16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC1RGB8ToBC1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC1RGB8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2RGB8A1ToBC1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2RGB8A1ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2RGB8ToBC1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2RGB8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2RGBA8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2SRGB8A1ToBC1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2SRGB8A1ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2SRGB8ToBC1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2SRGB8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadETC2SRGBA8ToSRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadL16FToRGBA16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadL32FToRGBA32F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadL8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadLA16FToRGBA16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadLA32FToRGBA32F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadLA8ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadR32ToR16(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadR32ToR24G8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadR5G6B5ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB10A2ToBGR5A1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB10A2ToRGB10X2(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB10A2ToRGB5A1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB10A2ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB16FToRG11B10F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB16FToRGB9E5(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB32FToRG11B10F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB32FToRGB16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB32FToRGB9E5(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB32FToRGBA16F(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB565ToBGR565(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB5A1ToA1RGB5(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB5A1ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGB8ToBGR565(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGBA4ToARGB4(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGBA4ToRGBA8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGBA8ToBGR5A1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGBA8ToBGRA4(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGBA8ToRGB5A1(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadRGBA8ToRGBA4(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadX24S8ToS8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoadX32S8ToS8(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
angle::LoggingAnnotator::beginEvent(char const*, char const*)
angle::LoggingAnnotator::beginEvent(char const*, char const*)::trace_event_unique_catstatic23
angle::LoggingAnnotator::endEvent(char const*)
angle::LoggingAnnotator::endEvent(char const*)::trace_event_unique_catstatic28
angle::LoggingAnnotator::getStatus()
angle::LoggingAnnotator::logMessage(gl::LogMessage const&) const
angle::LoggingAnnotator::setMarker(char const*)
angle::LoggingAnnotator::setMarker(char const*)::trace_event_unique_catstatic33
angle::LoggingAnnotator::~LoggingAnnotator()
angle::Mat4::Frustum(float, float, float, float, float, float)
angle::Mat4::Mat4()
angle::Mat4::Mat4(angle::Matrix<float>)
angle::Mat4::Mat4(float const*)
angle::Mat4::Ortho(float, float, float, float, float, float)
angle::Mat4::Rotate(float, angle::Vector<3ul, float> const&)
angle::Mat4::Scale(angle::Vector<3ul, float> const&)
angle::Mat4::Translate(angle::Vector<3ul, float> const&)
angle::Mat4::product(angle::Mat4 const&)
angle::Mat4::product(angle::Vector<4ul, float> const&)
angle::Matrix<float>::Matrix(float const*, unsigned int)
angle::Matrix<float>::compMult(angle::Matrix<float> const&) const
angle::Matrix<float>::determinant() const
angle::Matrix<float>::inverse() const
angle::Matrix<float>::outerProduct(angle::Matrix<float> const&) const
angle::Matrix<float>::transpose() const
angle::MemoryBuffer::MemoryBuffer(angle::MemoryBuffer&&)
angle::MemoryBuffer::fill(unsigned char)
angle::MemoryBuffer::operator=(angle::MemoryBuffer&&)
angle::MemoryBuffer::resize(unsigned long)
angle::MemoryBuffer::~MemoryBuffer()
angle::NoCopyFunctions
angle::ObserverBinding::ObserverBinding(angle::ObserverBinding const&)
angle::ObserverBinding::ObserverBinding(angle::ObserverInterface*, unsigned long)
angle::ObserverBinding::bind(angle::Subject*)
angle::ObserverBinding::onSubjectReset()
angle::ObserverBinding::~ObserverBinding()
angle::ObserverBindingBase::onSubjectReset()
angle::ObserverBindingBase::~ObserverBindingBase()
angle::ObserverInterface::~ObserverInterface()
angle::ParamBuffer::~ParamBuffer()
angle::ParseNvidiaDriverVersion(unsigned int)
angle::PoolAllocator::PoolAllocator(int, int)
angle::PoolAllocator::allocate(unsigned long)
angle::PoolAllocator::allocateNewPage(unsigned long, unsigned long)
angle::PoolAllocator::initialize(int, int)
angle::PoolAllocator::lock()
angle::PoolAllocator::pop()
angle::PoolAllocator::popAll()
angle::PoolAllocator::push()
angle::PoolAllocator::unlock()
angle::PoolAllocator::~PoolAllocator()
angle::PrependPathToEnvironmentVar(char const*, char const*)
angle::R10G10B10A2::average(angle::R10G10B10A2*, angle::R10G10B10A2 const*, angle::R10G10B10A2 const*)
angle::R10G10B10A2::readColor(angle::Color<float>*, angle::R10G10B10A2 const*)
angle::R10G10B10A2::readColor(angle::Color<unsigned int>*, angle::R10G10B10A2 const*)
angle::R10G10B10A2::writeColor(angle::R10G10B10A2*, angle::Color<float> const*)
angle::R10G10B10A2::writeColor(angle::R10G10B10A2*, angle::Color<unsigned int> const*)
angle::R10G10B10A2S::average(angle::R10G10B10A2S*, angle::R10G10B10A2S const*, angle::R10G10B10A2S const*)
angle::R10G10B10A2S::readColor(angle::Color<float>*, angle::R10G10B10A2S const*)
angle::R10G10B10A2S::readColor(angle::Color<int>*, angle::R10G10B10A2S const*)
angle::R10G10B10A2S::writeColor(angle::R10G10B10A2S*, angle::Color<float> const*)
angle::R10G10B10A2S::writeColor(angle::R10G10B10A2S*, angle::Color<int> const*)
angle::R10G10B10X2::average(angle::R10G10B10X2*, angle::R10G10B10X2 const*, angle::R10G10B10X2 const*)
angle::R10G10B10X2::readColor(angle::Color<float>*, angle::R10G10B10X2 const*)
angle::R10G10B10X2::writeColor(angle::R10G10B10X2*, angle::Color<float> const*)
angle::R11G11B10F::average(angle::R11G11B10F*, angle::R11G11B10F const*, angle::R11G11B10F const*)
angle::R11G11B10F::readColor(angle::Color<float>*, angle::R11G11B10F const*)
angle::R11G11B10F::writeColor(angle::R11G11B10F*, angle::Color<float> const*)
angle::R16::average(angle::R16*, angle::R16 const*, angle::R16 const*)
angle::R16::readColor(angle::Color<float>*, angle::R16 const*)
angle::R16::readColor(angle::Color<unsigned int>*, angle::R16 const*)
angle::R16::writeColor(angle::R16*, angle::Color<float> const*)
angle::R16::writeColor(angle::R16*, angle::Color<unsigned int> const*)
angle::R16F::average(angle::R16F*, angle::R16F const*, angle::R16F const*)
angle::R16F::readColor(angle::Color<float>*, angle::R16F const*)
angle::R16F::writeColor(angle::R16F*, angle::Color<float> const*)
angle::R16G16::average(angle::R16G16*, angle::R16G16 const*, angle::R16G16 const*)
angle::R16G16::readColor(angle::Color<float>*, angle::R16G16 const*)
angle::R16G16::readColor(angle::Color<unsigned int>*, angle::R16G16 const*)
angle::R16G16::writeColor(angle::R16G16*, angle::Color<float> const*)
angle::R16G16::writeColor(angle::R16G16*, angle::Color<unsigned int> const*)
angle::R16G16B16::average(angle::R16G16B16*, angle::R16G16B16 const*, angle::R16G16B16 const*)
angle::R16G16B16::readColor(angle::Color<float>*, angle::R16G16B16 const*)
angle::R16G16B16::readColor(angle::Color<unsigned int>*, angle::R16G16B16 const*)
angle::R16G16B16::writeColor(angle::R16G16B16*, angle::Color<float> const*)
angle::R16G16B16::writeColor(angle::R16G16B16*, angle::Color<unsigned int> const*)
angle::R16G16B16A16::average(angle::R16G16B16A16*, angle::R16G16B16A16 const*, angle::R16G16B16A16 const*)
angle::R16G16B16A16::readColor(angle::Color<float>*, angle::R16G16B16A16 const*)
angle::R16G16B16A16::readColor(angle::Color<unsigned int>*, angle::R16G16B16A16 const*)
angle::R16G16B16A16::writeColor(angle::R16G16B16A16*, angle::Color<float> const*)
angle::R16G16B16A16::writeColor(angle::R16G16B16A16*, angle::Color<unsigned int> const*)
angle::R16G16B16A16F::average(angle::R16G16B16A16F*, angle::R16G16B16A16F const*, angle::R16G16B16A16F const*)
angle::R16G16B16A16F::readColor(angle::Color<float>*, angle::R16G16B16A16F const*)
angle::R16G16B16A16F::writeColor(angle::R16G16B16A16F*, angle::Color<float> const*)
angle::R16G16B16A16S::average(angle::R16G16B16A16S*, angle::R16G16B16A16S const*, angle::R16G16B16A16S const*)
angle::R16G16B16A16S::readColor(angle::Color<float>*, angle::R16G16B16A16S const*)
angle::R16G16B16A16S::readColor(angle::Color<int>*, angle::R16G16B16A16S const*)
angle::R16G16B16A16S::writeColor(angle::R16G16B16A16S*, angle::Color<float> const*)
angle::R16G16B16A16S::writeColor(angle::R16G16B16A16S*, angle::Color<int> const*)
angle::R16G16B16F::average(angle::R16G16B16F*, angle::R16G16B16F const*, angle::R16G16B16F const*)
angle::R16G16B16F::readColor(angle::Color<float>*, angle::R16G16B16F const*)
angle::R16G16B16F::writeColor(angle::R16G16B16F*, angle::Color<float> const*)
angle::R16G16B16S::average(angle::R16G16B16S*, angle::R16G16B16S const*, angle::R16G16B16S const*)
angle::R16G16B16S::readColor(angle::Color<float>*, angle::R16G16B16S const*)
angle::R16G16B16S::readColor(angle::Color<int>*, angle::R16G16B16S const*)
angle::R16G16B16S::writeColor(angle::R16G16B16S*, angle::Color<float> const*)
angle::R16G16B16S::writeColor(angle::R16G16B16S*, angle::Color<int> const*)
angle::R16G16F::average(angle::R16G16F*, angle::R16G16F const*, angle::R16G16F const*)
angle::R16G16F::readColor(angle::Color<float>*, angle::R16G16F const*)
angle::R16G16F::writeColor(angle::R16G16F*, angle::Color<float> const*)
angle::R16G16S::average(angle::R16G16S*, angle::R16G16S const*, angle::R16G16S const*)
angle::R16G16S::readColor(angle::Color<float>*, angle::R16G16S const*)
angle::R16G16S::readColor(angle::Color<int>*, angle::R16G16S const*)
angle::R16G16S::writeColor(angle::R16G16S*, angle::Color<float> const*)
angle::R16G16S::writeColor(angle::R16G16S*, angle::Color<int> const*)
angle::R16S::average(angle::R16S*, angle::R16S const*, angle::R16S const*)
angle::R16S::readColor(angle::Color<float>*, angle::R16S const*)
angle::R16S::readColor(angle::Color<int>*, angle::R16S const*)
angle::R16S::writeColor(angle::R16S*, angle::Color<float> const*)
angle::R16S::writeColor(angle::R16S*, angle::Color<int> const*)
angle::R32::average(angle::R32*, angle::R32 const*, angle::R32 const*)
angle::R32::readColor(angle::Color<float>*, angle::R32 const*)
angle::R32::readColor(angle::Color<unsigned int>*, angle::R32 const*)
angle::R32::writeColor(angle::R32*, angle::Color<float> const*)
angle::R32::writeColor(angle::R32*, angle::Color<unsigned int> const*)
angle::R32F::average(angle::R32F*, angle::R32F const*, angle::R32F const*)
angle::R32F::readColor(angle::Color<float>*, angle::R32F const*)
angle::R32F::writeColor(angle::R32F*, angle::Color<float> const*)
angle::R32G32::average(angle::R32G32*, angle::R32G32 const*, angle::R32G32 const*)
angle::R32G32::readColor(angle::Color<float>*, angle::R32G32 const*)
angle::R32G32::readColor(angle::Color<unsigned int>*, angle::R32G32 const*)
angle::R32G32::writeColor(angle::R32G32*, angle::Color<float> const*)
angle::R32G32::writeColor(angle::R32G32*, angle::Color<unsigned int> const*)
angle::R32G32B32::average(angle::R32G32B32*, angle::R32G32B32 const*, angle::R32G32B32 const*)
angle::R32G32B32::readColor(angle::Color<float>*, angle::R32G32B32 const*)
angle::R32G32B32::readColor(angle::Color<unsigned int>*, angle::R32G32B32 const*)
angle::R32G32B32::writeColor(angle::R32G32B32*, angle::Color<float> const*)
angle::R32G32B32::writeColor(angle::R32G32B32*, angle::Color<unsigned int> const*)
angle::R32G32B32A32::average(angle::R32G32B32A32*, angle::R32G32B32A32 const*, angle::R32G32B32A32 const*)
angle::R32G32B32A32::readColor(angle::Color<float>*, angle::R32G32B32A32 const*)
angle::R32G32B32A32::readColor(angle::Color<unsigned int>*, angle::R32G32B32A32 const*)
angle::R32G32B32A32::writeColor(angle::R32G32B32A32*, angle::Color<float> const*)
angle::R32G32B32A32::writeColor(angle::R32G32B32A32*, angle::Color<unsigned int> const*)
angle::R32G32B32A32F::average(angle::R32G32B32A32F*, angle::R32G32B32A32F const*, angle::R32G32B32A32F const*)
angle::R32G32B32A32F::readColor(angle::Color<float>*, angle::R32G32B32A32F const*)
angle::R32G32B32A32F::writeColor(angle::R32G32B32A32F*, angle::Color<float> const*)
angle::R32G32B32A32S::average(angle::R32G32B32A32S*, angle::R32G32B32A32S const*, angle::R32G32B32A32S const*)
angle::R32G32B32A32S::readColor(angle::Color<float>*, angle::R32G32B32A32S const*)
angle::R32G32B32A32S::readColor(angle::Color<int>*, angle::R32G32B32A32S const*)
angle::R32G32B32A32S::writeColor(angle::R32G32B32A32S*, angle::Color<float> const*)
angle::R32G32B32A32S::writeColor(angle::R32G32B32A32S*, angle::Color<int> const*)
angle::R32G32B32F::average(angle::R32G32B32F*, angle::R32G32B32F const*, angle::R32G32B32F const*)
angle::R32G32B32F::readColor(angle::Color<float>*, angle::R32G32B32F const*)
angle::R32G32B32F::writeColor(angle::R32G32B32F*, angle::Color<float> const*)
angle::R32G32B32S::average(angle::R32G32B32S*, angle::R32G32B32S const*, angle::R32G32B32S const*)
angle::R32G32B32S::readColor(angle::Color<float>*, angle::R32G32B32S const*)
angle::R32G32B32S::readColor(angle::Color<int>*, angle::R32G32B32S const*)
angle::R32G32B32S::writeColor(angle::R32G32B32S*, angle::Color<float> const*)
angle::R32G32B32S::writeColor(angle::R32G32B32S*, angle::Color<int> const*)
angle::R32G32F::average(angle::R32G32F*, angle::R32G32F const*, angle::R32G32F const*)
angle::R32G32F::readColor(angle::Color<float>*, angle::R32G32F const*)
angle::R32G32F::writeColor(angle::R32G32F*, angle::Color<float> const*)
angle::R32G32S::average(angle::R32G32S*, angle::R32G32S const*, angle::R32G32S const*)
angle::R32G32S::readColor(angle::Color<float>*, angle::R32G32S const*)
angle::R32G32S::readColor(angle::Color<int>*, angle::R32G32S const*)
angle::R32G32S::writeColor(angle::R32G32S*, angle::Color<float> const*)
angle::R32G32S::writeColor(angle::R32G32S*, angle::Color<int> const*)
angle::R32S::average(angle::R32S*, angle::R32S const*, angle::R32S const*)
angle::R32S::readColor(angle::Color<float>*, angle::R32S const*)
angle::R32S::readColor(angle::Color<int>*, angle::R32S const*)
angle::R32S::writeColor(angle::R32S*, angle::Color<float> const*)
angle::R32S::writeColor(angle::R32S*, angle::Color<int> const*)
angle::R4G4B4A4::average(angle::R4G4B4A4*, angle::R4G4B4A4 const*, angle::R4G4B4A4 const*)
angle::R4G4B4A4::readColor(angle::Color<float>*, angle::R4G4B4A4 const*)
angle::R4G4B4A4::writeColor(angle::R4G4B4A4*, angle::Color<float> const*)
angle::R5G5B5A1::average(angle::R5G5B5A1*, angle::R5G5B5A1 const*, angle::R5G5B5A1 const*)
angle::R5G5B5A1::readColor(angle::Color<float>*, angle::R5G5B5A1 const*)
angle::R5G5B5A1::writeColor(angle::R5G5B5A1*, angle::Color<float> const*)
angle::R5G6B5::average(angle::R5G6B5*, angle::R5G6B5 const*, angle::R5G6B5 const*)
angle::R5G6B5::readColor(angle::Color<float>*, angle::R5G6B5 const*)
angle::R5G6B5::writeColor(angle::R5G6B5*, angle::Color<float> const*)
angle::R8::average(angle::R8*, angle::R8 const*, angle::R8 const*)
angle::R8::readColor(angle::Color<float>*, angle::R8 const*)
angle::R8::readColor(angle::Color<unsigned int>*, angle::R8 const*)
angle::R8::writeColor(angle::R8*, angle::Color<float> const*)
angle::R8::writeColor(angle::R8*, angle::Color<unsigned int> const*)
angle::R8G8::average(angle::R8G8*, angle::R8G8 const*, angle::R8G8 const*)
angle::R8G8::readColor(angle::Color<float>*, angle::R8G8 const*)
angle::R8G8::readColor(angle::Color<unsigned int>*, angle::R8G8 const*)
angle::R8G8::writeColor(angle::R8G8*, angle::Color<float> const*)
angle::R8G8::writeColor(angle::R8G8*, angle::Color<unsigned int> const*)
angle::R8G8B8::average(angle::R8G8B8*, angle::R8G8B8 const*, angle::R8G8B8 const*)
angle::R8G8B8::readColor(angle::Color<float>*, angle::R8G8B8 const*)
angle::R8G8B8::readColor(angle::Color<unsigned int>*, angle::R8G8B8 const*)
angle::R8G8B8::writeColor(angle::R8G8B8*, angle::Color<float> const*)
angle::R8G8B8::writeColor(angle::R8G8B8*, angle::Color<unsigned int> const*)
angle::R8G8B8A8::average(angle::R8G8B8A8*, angle::R8G8B8A8 const*, angle::R8G8B8A8 const*)
angle::R8G8B8A8::readColor(angle::Color<float>*, angle::R8G8B8A8 const*)
angle::R8G8B8A8::readColor(angle::Color<unsigned int>*, angle::R8G8B8A8 const*)
angle::R8G8B8A8::writeColor(angle::R8G8B8A8*, angle::Color<float> const*)
angle::R8G8B8A8::writeColor(angle::R8G8B8A8*, angle::Color<unsigned int> const*)
angle::R8G8B8A8S::average(angle::R8G8B8A8S*, angle::R8G8B8A8S const*, angle::R8G8B8A8S const*)
angle::R8G8B8A8S::readColor(angle::Color<float>*, angle::R8G8B8A8S const*)
angle::R8G8B8A8S::readColor(angle::Color<int>*, angle::R8G8B8A8S const*)
angle::R8G8B8A8S::writeColor(angle::R8G8B8A8S*, angle::Color<float> const*)
angle::R8G8B8A8S::writeColor(angle::R8G8B8A8S*, angle::Color<int> const*)
angle::R8G8B8A8SRGB::average(angle::R8G8B8A8SRGB*, angle::R8G8B8A8SRGB const*, angle::R8G8B8A8SRGB const*)
angle::R8G8B8A8SRGB::readColor(angle::Color<float>*, angle::R8G8B8A8SRGB const*)
angle::R8G8B8A8SRGB::writeColor(angle::R8G8B8A8SRGB*, angle::Color<float> const*)
angle::R8G8B8S::average(angle::R8G8B8S*, angle::R8G8B8S const*, angle::R8G8B8S const*)
angle::R8G8B8S::readColor(angle::Color<float>*, angle::R8G8B8S const*)
angle::R8G8B8S::readColor(angle::Color<int>*, angle::R8G8B8S const*)
angle::R8G8B8S::writeColor(angle::R8G8B8S*, angle::Color<float> const*)
angle::R8G8B8S::writeColor(angle::R8G8B8S*, angle::Color<int> const*)
angle::R8G8S::average(angle::R8G8S*, angle::R8G8S const*, angle::R8G8S const*)
angle::R8G8S::readColor(angle::Color<float>*, angle::R8G8S const*)
angle::R8G8S::readColor(angle::Color<int>*, angle::R8G8S const*)
angle::R8G8S::writeColor(angle::R8G8S*, angle::Color<float> const*)
angle::R8G8S::writeColor(angle::R8G8S*, angle::Color<int> const*)
angle::R8S::average(angle::R8S*, angle::R8S const*, angle::R8S const*)
angle::R8S::readColor(angle::Color<float>*, angle::R8S const*)
angle::R8S::readColor(angle::Color<int>*, angle::R8S const*)
angle::R8S::writeColor(angle::R8S*, angle::Color<float> const*)
angle::R8S::writeColor(angle::R8S*, angle::Color<int> const*)
angle::R9G9B9E5::average(angle::R9G9B9E5*, angle::R9G9B9E5 const*, angle::R9G9B9E5 const*)
angle::R9G9B9E5::readColor(angle::Color<float>*, angle::R9G9B9E5 const*)
angle::R9G9B9E5::writeColor(angle::R9G9B9E5*, angle::Color<float> const*)
angle::RefCountObject<egl::Display, angle::Result>::onDestroy(egl::Display const*)
angle::RefCountObject<egl::Display, angle::Result>::~RefCountObject()
angle::RefCountObject<egl::Display, egl::Error>::onDestroy(egl::Display const*)
angle::RefCountObject<egl::Display, egl::Error>::~RefCountObject()
angle::RefCountObject<gl::Context, angle::Result>::onDestroy(gl::Context const*)
angle::RefCountObject<gl::Context, angle::Result>::~RefCountObject()
angle::ResourceTracker::~ResourceTracker()
angle::Result std::__1::__function::__policy_invoker<angle::Result (bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::$_1, angle::Result (bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
angle::Result std::__1::__function::__policy_invoker<angle::Result (rx::GlslangError)>::__call_impl<std::__1::__function::__default_alloc_func<rx::GlslangWrapperVk::GetShaderCode(rx::vk::Context*, angle::BitSetT<4ul, unsigned char, gl::ShaderType> const&, gl::Caps const&, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, 4ul>*)::$_1, angle::Result (rx::GlslangError)> >(std::__1::__function::__policy_storage const*, rx::GlslangError)
angle::Result std::__1::__function::__policy_invoker<angle::Result (rx::GlslangError)>::__call_impl<std::__1::__function::__default_alloc_func<rx::GlslangWrapperVk::TransformSpirV(rx::vk::Context*, gl::ShaderType, bool, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*)::$_2, angle::Result (rx::GlslangError)> >(std::__1::__function::__policy_storage const*, rx::GlslangError)
angle::ResultToEGL(angle::Result)
angle::S8::ReadDepthStencil(angle::DepthStencil*, angle::S8 const*)
angle::S8::WriteDepthStencil(angle::S8*, angle::DepthStencil const*)
angle::ScratchBuffer::ScratchBuffer()
angle::ScratchBuffer::ScratchBuffer(angle::ScratchBuffer&&)
angle::ScratchBuffer::ScratchBuffer(unsigned int)
angle::ScratchBuffer::get(unsigned long, angle::MemoryBuffer**)
angle::ScratchBuffer::getImpl(unsigned long, angle::MemoryBuffer**, Optional<unsigned char>)
angle::ScratchBuffer::getInitialized(unsigned long, angle::MemoryBuffer**, unsigned char)
angle::ScratchBuffer::operator=(angle::ScratchBuffer&&)
angle::ScratchBuffer::tick()
angle::ScratchBuffer::~ScratchBuffer()
angle::SetCWD(char const*)
angle::SetEnvironmentVar(char const*, char const*)
angle::SingleThreadedWaitableEvent::isReady()
angle::SingleThreadedWaitableEvent::wait()
angle::SingleThreadedWaitableEvent::~SingleThreadedWaitableEvent()
angle::SingleThreadedWorkerPool::isAsync()
angle::SingleThreadedWorkerPool::postWorkerTask(std::__1::shared_ptr<angle::Closure>)
angle::SingleThreadedWorkerPool::setMaxThreads(unsigned long)
angle::SingleThreadedWorkerPool::~SingleThreadedWorkerPool()
angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::eraseByKey(std::__1::array<unsigned char, 20ul> const&)
angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::put(std::__1::array<unsigned char, 20ul> const&, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource>&&, unsigned long)
angle::SplitString(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, angle::WhitespaceHandling, angle::SplitResult)
angle::SplitStringAlongWhitespace(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*)
angle::Subject::Subject()
angle::Subject::onStateChange(angle::SubjectMessage) const
angle::Subject::~Subject()
angle::ToEGL(angle::Result, rx::DisplayVk*, int)
angle::ToLower(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
angle::TrimString(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
angle::UnsetEnvironmentVar(char const*)
angle::WaitableEvent::WaitableEvent()
angle::WaitableEvent::~WaitableEvent()
angle::WaitableEventDone::isReady()
angle::WaitableEventDone::wait()
angle::WaitableEventDone::~WaitableEventDone()
angle::WorkerThreadPool::Create(bool)
angle::WorkerThreadPool::PostWorkerTask(std::__1::shared_ptr<angle::WorkerThreadPool>, std::__1::shared_ptr<angle::Closure>)
angle::WorkerThreadPool::~WorkerThreadPool()
angle::android::AHardwareBufferToClientBuffer(AHardwareBuffer const*)
angle::base::HashingMRUCache<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> > >::~HashingMRUCache()
angle::base::MRUCacheBase<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> >, angle::base::MRUCacheHashMap>::Clear()
angle::base::MRUCacheBase<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> >, angle::base::MRUCacheHashMap>::Erase(std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*>)
angle::base::MRUCacheBase<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> >, angle::base::MRUCacheHashMap>::Get(std::__1::array<unsigned char, 20ul> const&)
angle::base::MRUCacheBase<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> >, angle::base::MRUCacheHashMap>::~MRUCacheBase()
angle::base::SHA1HashBytes(unsigned char const*, unsigned long, unsigned char*)
angle::base::SecureHashAlgorithm::Pad()
angle::base::SecureHashAlgorithm::Process()
angle::gFormatInfoTable
angle::g_PlatformMethodNames
angle::kFeatureCategoryD3DCompilerWorkarounds
angle::kFeatureCategoryD3DWorkarounds
angle::kFeatureCategoryFrontendWorkarounds
angle::kFeatureCategoryMetalFeatures
angle::kFeatureCategoryOpenGLWorkarounds
angle::kFeatureCategoryUnknown
angle::kFeatureCategoryVulkanFeatures
angle::kFeatureCategoryVulkanWorkarounds
angle::kFeatureStatusDisabled
angle::kFeatureStatusEnabled
angle::pp::(anonymous namespace)::TokenLexer::lex(angle::pp::Token*)
angle::pp::(anonymous namespace)::TokenLexer::~TokenLexer()
angle::pp::Diagnostics::isError(angle::pp::Diagnostics::ID)
angle::pp::Diagnostics::message(angle::pp::Diagnostics::ID)
angle::pp::Diagnostics::report(angle::pp::Diagnostics::ID, angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
angle::pp::Diagnostics::~Diagnostics()
angle::pp::DirectiveHandler::~DirectiveHandler()
angle::pp::DirectiveParser::DirectiveParser(angle::pp::Tokenizer*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<angle::pp::Macro> > > >*, angle::pp::Diagnostics*, angle::pp::DirectiveHandler*, angle::pp::PreprocessorSettings const&)
angle::pp::DirectiveParser::lex(angle::pp::Token*)
angle::pp::DirectiveParser::parseConditionalIf(angle::pp::Token*)
angle::pp::DirectiveParser::parseDefine(angle::pp::Token*)
angle::pp::DirectiveParser::parseDirective(angle::pp::Token*)
angle::pp::DirectiveParser::parseElif(angle::pp::Token*)
angle::pp::DirectiveParser::parseElse(angle::pp::Token*)
angle::pp::DirectiveParser::parseEndif(angle::pp::Token*)
angle::pp::DirectiveParser::parseError(angle::pp::Token*)
angle::pp::DirectiveParser::parseExpressionIf(angle::pp::Token*)
angle::pp::DirectiveParser::parseExpressionIfdef(angle::pp::Token*)
angle::pp::DirectiveParser::parseExtension(angle::pp::Token*)
angle::pp::DirectiveParser::parseLine(angle::pp::Token*)
angle::pp::DirectiveParser::parsePragma(angle::pp::Token*)
angle::pp::DirectiveParser::parseUndef(angle::pp::Token*)
angle::pp::DirectiveParser::parseVersion(angle::pp::Token*)
angle::pp::DirectiveParser::~DirectiveParser()
angle::pp::ExpressionParser::ExpressionParser(angle::pp::Lexer*, angle::pp::Diagnostics*)
angle::pp::ExpressionParser::parse(angle::pp::Token*, int*, bool, angle::pp::ExpressionParser::ErrorSettings const&, bool*)
angle::pp::Input::Input()
angle::pp::Input::Input(unsigned long, char const* const*, int const*)
angle::pp::Input::read(char*, unsigned long, int*)
angle::pp::Input::~Input()
angle::pp::Lexer::~Lexer()
angle::pp::Macro::Macro()
angle::pp::Macro::equals(angle::pp::Macro const&) const
angle::pp::Macro::~Macro()
angle::pp::MacroExpander::MacroExpander(angle::pp::Lexer*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<angle::pp::Macro> > > >*, angle::pp::Diagnostics*, angle::pp::PreprocessorSettings const&, bool)
angle::pp::MacroExpander::collectMacroArgs(angle::pp::Macro const&, angle::pp::Token const&, std::__1::vector<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >, std::__1::allocator<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> > > >*, angle::pp::SourceLocation*)
angle::pp::MacroExpander::expandMacro(angle::pp::Macro const&, angle::pp::Token const&, std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >*)
angle::pp::MacroExpander::expandMacro(angle::pp::Macro const&, angle::pp::Token const&, std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >*)::kFile
angle::pp::MacroExpander::expandMacro(angle::pp::Macro const&, angle::pp::Token const&, std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >*)::kLine
angle::pp::MacroExpander::getToken(angle::pp::Token*)
angle::pp::MacroExpander::isNextTokenLeftParen()
angle::pp::MacroExpander::lex(angle::pp::Token*)
angle::pp::MacroExpander::popMacro()
angle::pp::MacroExpander::pushMacro(std::__1::shared_ptr<angle::pp::Macro>, angle::pp::Token const&)
angle::pp::MacroExpander::replaceMacroParams(angle::pp::Macro const&, std::__1::vector<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >, std::__1::allocator<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> > > > const&, std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >*)
angle::pp::MacroExpander::~MacroExpander()
angle::pp::PredefineMacro(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<angle::pp::Macro> > > >*, char const*, int)
angle::pp::Preprocessor::Preprocessor(angle::pp::Diagnostics*, angle::pp::DirectiveHandler*, angle::pp::PreprocessorSettings const&)
angle::pp::Preprocessor::init(unsigned long, char const* const*, int const*)
angle::pp::Preprocessor::lex(angle::pp::Token*)
angle::pp::Preprocessor::predefineMacro(char const*, int)
angle::pp::Preprocessor::setMaxTokenSize(unsigned long)
angle::pp::Preprocessor::~Preprocessor()
angle::pp::Token::equals(angle::pp::Token const&) const
angle::pp::Token::iValue(int*) const
angle::pp::Token::reset()
angle::pp::Token::setAtStartOfLine(bool)
angle::pp::Token::setExpansionDisabled(bool)
angle::pp::Token::setHasLeadingSpace(bool)
angle::pp::Token::uValue(unsigned int*) const
angle::pp::Tokenizer::Tokenizer(angle::pp::Diagnostics*)
angle::pp::Tokenizer::init(unsigned long, char const* const*, int const*)
angle::pp::Tokenizer::lex(angle::pp::Token*)
angle::pp::Tokenizer::setFileNumber(int)
angle::pp::Tokenizer::setLineNumber(int)
angle::pp::Tokenizer::setMaxTokenSize(unsigned long)
angle::pp::Tokenizer::~Tokenizer()
angle::pp::kDefined
angle::pp::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, angle::pp::Token const&)
angle::vk::(anonymous namespace)::kANGLEPreferredDeviceEnv
angle::vk::(anonymous namespace)::kLoaderICDFilenamesEnv
angle::vk::(anonymous namespace)::kLoaderLayersPathEnv
angle::vk::(anonymous namespace)::kValidationLayersCustomSTypeListEnv
angle::vk::ChoosePhysicalDevice(std::__1::vector<VkPhysicalDevice_T*, std::__1::allocator<VkPhysicalDevice_T*> > const&, angle::vk::ICD, VkPhysicalDevice_T**, VkPhysicalDeviceProperties*)
angle::vk::ScopedVkLoaderEnvironment::ScopedVkLoaderEnvironment(bool, angle::vk::ICD)
angle::vk::ScopedVkLoaderEnvironment::setCustomExtensionsEnvironment()
angle::vk::ScopedVkLoaderEnvironment::~ScopedVkLoaderEnvironment()
angle_BaseInstance
angle_BaseVertex
angle_DrawID
angle_SecondaryFragColor
angle_SecondaryFragData
angle_compound_
angle_frl
angle_frl(
angle_frl(in
angle_frm
angle_frm(
angle_frm(in
angledata
angledata/VkICD_mock_icd.json
angletypes.cpp
angleutils.cpp
anon@
anonymous member
any(10F
any(20F
any(30F
any-hit
any.cpp
anyInvocation
anyInvocation(00F
anyInvocationARB
appear as the final member of an OpTypeStruct, thus cannot
appears in the binary before its dominator
ar5
arc cosine
arc hyp. cosine
arc hyp. sine
arc hyp. tangent
arc sine
arc tangent
are referenced but not defined in function
are used only as handles to refer to opaque resources. Such
arg
argument cannot drop memory qualifier when passed to formal parameter
argument must be a power of 2
argument must be at least 1
argument must be compile-time constant
argument must be qualified as __explicitInterpAMD in
arguments. OpTypeFunction <id> '
array / non-array mismatch
array argument must be sized
array assignment
array comparison
array constructor argument not correct type to construct array element
array constructor needs one argument per array element
array constructor supported in GLSL ES 3.00 and above only
array in function return type
array index for gl_FragData must be constant zero
array index for gl_FragData must be zero when GL_EXT_draw_buffers is disabled
array index for samplers must be constant integral expressions
array index out of range
array index out of range '%d'
array indexes for fragment outputs must be constant integral expressions
array indexes for image arrays must be constant integral expressions
array indexes for shader storage block arrays must be constant integral expressions
array indexes for uniform block arrays must be constant integral expressions
array initializer
array initializer must be sized
array length
array members of interface blocks must specify a size
array members of structs must specify a size
array must be declared with a size before using this method
array must be explicitly sized
array must be redeclared with a size before being indexed with a variable
array must be sized by a redeclaration or layout qualifier before being indexed with a variable
array must first be sized by a redeclaration or layout qualifier
array size mismatch
array size must be a constant integer expression
array size must be a positive integer
array size must be greater than zero
array size must be non-negative
array size required
array size too large
array variable name expected
array-of-array of block
arrayIndex
array[
array_specifier
arrayed constructor
arrayed type
arrays of arrays supported in GLSL ES 3.10 only
as of
asdouble
asfloat
asin
asin(00B
asin(10B
asin(20B
asin(30B
asinf
asinh
asinh(00B
asinh(10B
asinh(20B
asinh(30B
asinhf
asinpi
asint
asm
assembly_grammar.cpp
assigning non-constant to '
assignment expression
assignment expression in initializer list
assignment_expression
assignment_operator
assuming binding count of one for compile-time checking of binding numbers for unsized array
asuint
at minimum or one of the following extensions:
at minimum.
atan
atan(00B
atan(00B00B
atan(10B
atan(10B10B
atan(20B
atan(20B20B
atan(30B
atan(30B30B
atan(y, x) may return a wrong answer
atan2
atan2f
atan2pi
atan_emu(emu_precision vec
atan_emu(y[
atanf
atanh
atanh(00B
atanh(10B
atanh(20B
atanh(30B
atanhf
atanpi
atoi_clamp(char const*, unsigned int*)
atomic counter
atomic counter binding greater than gl_MaxAtomicCounterBindings
atomic counter count exceeds MAX_COMBINED_ATOMIC_COUNTERS
atomic counter types
atomic counters can only be highp
atomic counters offset should align based on 4:
atomic counters sharing the same offset:
atomicAdd
atomicAdd(00D00D
atomicAdd(00E00E
atomicAnd
atomicAnd(00D00D
atomicAnd(00E00E
atomicCompSwap
atomicCompSwap(00D00D00D
atomicCompSwap(00E00E00E
atomicCounter
atomicCounter(00G
atomicCounterAdd
atomicCounterAdd(00G00E
atomicCounterAnd
atomicCounterAnd(00G00E
atomicCounterCompSwap
atomicCounterCompSwap(00G00E00E
atomicCounterDecrement
atomicCounterDecrement(00G
atomicCounterExchange
atomicCounterExchange(00G00E
atomicCounterIncrement
atomicCounterIncrement(00G
atomicCounterMax
atomicCounterMax(00G00E
atomicCounterMin
atomicCounterMin(00G00E
atomicCounterOr
atomicCounterOr(00G00E
atomicCounterSubtract
atomicCounterSubtract(00G00E
atomicCounterXor
atomicCounterXor(00G00E
atomicCounters
atomicExchange
atomicExchange(00D00D
atomicExchange(00E00E
atomicLoad
atomicMax
atomicMax(00D00D
atomicMax(00E00E
atomicMin
atomicMin(00D00D
atomicMin(00E00E
atomicOr
atomicOr(00D00D
atomicOr(00E00E
atomicStore
atomicXor
atomicXor(00D00D
atomicXor(00E00E
atomic_uint binding is too large
atomic_uint binding is too large; see gl_MaxAtomicCounterBindings
atomic_uints can only be used in uniform variables or function parameters:
attachment index is too large
attribute does not apply to a loop
attribute does not apply to a selection
attribute does not apply to a switch
attribute does not apply to a type
attribute does not apply to entry point
attribute is not valid.
attribute requires a SPIR-V 1.4 target-env
attribute vec4  gl_Color;attribute vec4  gl_SecondaryColor;attribute vec3  gl_Normal;attribute vec4  gl_Vertex;attribute vec4  gl_MultiTexCoord0;attribute vec4  gl_MultiTexCoord1;attribute vec4  gl_MultiTexCoord2;attribute vec4  gl_MultiTexCoord3;attribute vec4  gl_MultiTexCoord4;attribute vec4  gl_MultiTexCoord5;attribute vec4  gl_MultiTexCoord6;attribute vec4  gl_MultiTexCoord7;attribute float gl_FogCoord;
attribute with arguments not recognized, skipping
attribute.cpp
attribute_list
attributes don't apply to control declaration
au
auto
average
averageRounded
avoid_1_bit_alpha_texture_formats
avoid_dxt1_srgb_texture_format
aw7
az/
a{G
a|9
a}/
a~G
b
b!>
b#E
b/B
b49
b7
b8
b:>
b><
bC&
bQ2
back-edge block
back-edge blocks but the standard requires exactly one
bad argument
bad character in float exponent
bad digit in hexadecimal literal
bad expression
bad profile name; use es, core, or compatibility
bad tokens following profile -- expected newline
ballotARB
barrier(
baseViewIndex+numViews cannot be greater than GL_MAX_ARRAY_TEXTURE_LAYERS.
base_dist
base_length
based on the function's type
basic type in subpass input
basic type in texture
basic_block.cpp
basic_gl_line_rasterization
basic_string
bcmp
bd0
be instantiated via OpVariable
be targeted by OpName, OpGroupDecorate,
because it is targeted by an OpEntryPoint instruction.
beginInvocationInterlockARB
beginInvocationInterlockARB() cannot be placed after a return from main()
beginInvocationInterlockARB() cannot be placed within flow control
beginInvocationInterlockARB() must be called before endInvocationInterlockARB()
beginInvocationInterlockARB() must be in a fragment shader
beginInvocationInterlockARB() must be in main()
beginInvocationInterlockARB() must only be called once
behavior for extension not specified
behavior invalid
behavior not supported:
bi_windup
binary.cpp
binarysize out of valid range.
bind.cpp
bind_empty_for_unused_descriptor_sets
bit shift left
bit shift right
bit-shift left assign
bit-shift right assign
bit-wise and
bit-wise and second child into first child
bit-wise not
bit-wise operator supported in GLSL ES 3.00 and above only
bit-wise or
bit-wise or second child into first child
bit-wise shift first child left by second child
bit-wise shift first child right by second child
bit-wise shift left
bit-wise shift right
bit-wise xor
bit-wise xor second child into first child
bitCount
bitCount(00D
bitCount(00E
bitCount(10D
bitCount(10E
bitCount(20D
bitCount(20E
bitCount(30D
bitCount(30E
bitFieldReverse
bit_vector.cpp
bitfieldExtract
bitfieldExtract(00D00D00D
bitfieldExtract(00E00D00D
bitfieldExtract(10D00D00D
bitfieldExtract(10E00D00D
bitfieldExtract(20D00D00D
bitfieldExtract(20E00D00D
bitfieldExtract(30D00D00D
bitfieldExtract(30E00D00D
bitfieldInsert
bitfieldInsert(00D00D00D00D
bitfieldInsert(00E00E00D00D
bitfieldInsert(10D10D00D00D
bitfieldInsert(10E10E00D00D
bitfieldInsert(20D20D00D00D
bitfieldInsert(20E20E00D00D
bitfieldInsert(30D30D00D00D
bitfieldInsert(30E30E00D00D
bitfieldReverse
bitfieldReverse(00D
bitfieldReverse(00E
bitfieldReverse(10D
bitfieldReverse(10E
bitfieldReverse(20D
bitfieldReverse(20E
bitfieldReverse(30D
bitfieldReverse(30E
bitselect
bitwise and
bitwise exclusive or
bitwise inclusive or
bitwise not
bitwise-and assign
bitwise-or assign
bitwise-xor assign
bk=
bl_order
blend_support
blend_support_all_equations
blend_support_colorburn
blend_support_colordodge
blend_support_darken
blend_support_difference
blend_support_exclusion
blend_support_hardlight
blend_support_hsl_color
blend_support_hsl_hue
blend_support_hsl_luminosity
blend_support_hsl_saturation
blend_support_lighten
blend_support_multiply
blend_support_overlay
blend_support_screen
blend_support_softlight
blitArea
blitColorBufferWithShader
blitSampler
block
block <ID>
block declaration
block initializer
block instance name redefinition
block name cannot be redefined
block name cannot redefine a non-block name
block redeclaration has extra members
block-
block_merge_pass.cpp
block_merge_util.cpp
block_structure
blocklayout.cpp
bool   subgroupAllEqual(%s);
bool angle::pp::numeric_lex_int<int>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int*)
bool angle::pp::numeric_lex_int<unsigned int>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*)
bool anyInvocation(bool);bool allInvocations(bool);bool allInvocationsEqual(bool);
bool anyInvocationARB(bool);bool allInvocationsARB(bool);bool allInvocationsEqualARB(bool);
bool gl::GetFormatSupport<3ul>(gl::TextureCapsMap const&, unsigned int const (&) [3ul], bool, bool, bool, bool, bool)
bool gl::GetFormatSupport<4ul>(gl::TextureCapsMap const&, unsigned int const (&) [4ul], bool, bool, bool, bool, bool)
bool gl::GetFormatSupport<5ul>(gl::TextureCapsMap const&, unsigned int const (&) [5ul], bool, bool, bool, bool, bool)
bool gl::RequireES<1u, 0u>(gl::Version const&, gl::Extensions const&)
bool gl::RequireES<2u, 0u>(gl::Version const&, gl::Extensions const&)
bool gl::RequireES<3u, 0u>(gl::Version const&, gl::Extensions const&)
bool gl::RequireES<3u, 1u>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::depth24OES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::depthBufferFloat2NV>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::depthTextureANGLE>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::packedDepthStencilOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::rgb8rgba8OES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::sRGB>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::textureRG>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExt<3u, 0u, &gl::Extensions::textureStorage>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedEACR11SignedTextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedEACR11UnsignedTextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedEACRG11SignedTextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedEACRG11UnsignedTextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedETC2PunchthroughARGB8TextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedETC2PunchthroughAsRGB8AlphaTextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedETC2RGB8TextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedETC2RGBA8TextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedETC2sRGB8Alpha8TextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::compressedTextureETC, &gl::Extensions::compressedETC2sRGB8TextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::depthTextureANGLE, &gl::Extensions::depthTextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireESOrExtOrExt<3u, 0u, &gl::Extensions::depthTextureANGLE, &gl::Extensions::packedDepthStencilOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::colorBufferFloat>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::colorBufferFloatRGB>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::compressedETC1RGB8TextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::compressedTexturePVRTC>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::compressedTexturePVRTCsRGB>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::lossyETCDecode>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::packedDepthStencilOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::sRGB>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::sRGBR8EXT>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionASTCLDRKHR>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionASTCOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionBPTC>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionDXT1>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionDXT3>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionDXT5>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionRGTC>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureCompressionS3TCsRGB>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureFloatLinearOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureFloatOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureFormat2101010REV>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureFormatBGRA8888>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureHalfFloat>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureHalfFloatLinear>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureNorm16>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureRG>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExt<&gl::Extensions::textureStorage>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExtAndExt<&gl::Extensions::packedDepthStencilOES, &gl::Extensions::depthTextureANGLE>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExtAndExt<&gl::Extensions::textureFloatOES, &gl::Extensions::textureRG>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExtAndExt<&gl::Extensions::textureHalfFloat, &gl::Extensions::textureRG>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExtAndExt<&gl::Extensions::textureStorage, &gl::Extensions::textureFloatOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExtAndExt<&gl::Extensions::textureStorage, &gl::Extensions::textureHalfFloat>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExtOrExt<&gl::Extensions::depthTextureANGLE, &gl::Extensions::depthTextureOES>(gl::Version const&, gl::Extensions const&)
bool gl::RequireExtOrExtOrExt<&gl::Extensions::depthTextureANGLE, &gl::Extensions::depthTextureOES, &gl::Extensions::depth32OES>(gl::Version const&, gl::Extensions const&)
bool gl::ValidateSamplerParameterBase<float>(gl::Context const*, gl::SamplerID, unsigned int, int, bool, float const*)
bool gl::ValidateSamplerParameterBase<int>(gl::Context const*, gl::SamplerID, unsigned int, int, bool, int const*)
bool gl::ValidateSamplerParameterBase<unsigned int>(gl::Context const*, gl::SamplerID, unsigned int, int, bool, unsigned int const*)
bool gl::ValidateTexParameterBase<float>(gl::Context const*, gl::TextureType, unsigned int, int, bool, float const*)
bool gl::ValidateTexParameterBase<int>(gl::Context const*, gl::TextureType, unsigned int, int, bool, int const*)
bool gl::ValidateTexParameterBase<unsigned int>(gl::Context const*, gl::TextureType, unsigned int, int, bool, unsigned int const*)
bool gl_HelperInvocation;flat in highp int gl_PrimitiveID;flat in highp int gl_Layer;
bool glslang::TType::contains<glslang::HlslParseContext::transformEntryPoint(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TList<glslang::TAttributeArgs> const&)::$_10::operator()(glslang::TType const&) const::{lambda(glslang::TType const*)#1}>(glslang::HlslParseContext::transformEntryPoint(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TList<glslang::TAttributeArgs> const&)::$_10::operator()(glslang::TType const&) const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsArray() const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsBasicType(glslang::TBasicType) const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsBuiltIn() const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsCoopMat() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsCoopMat() const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsNonOpaque() const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsOpaque() const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsSpecializationSize() const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsStructure() const::{lambda(glslang::TType const*)#1}) const
bool glslang::TType::contains<glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}>(glslang::TType::containsUnsizedArray() const::{lambda(glslang::TType const*)#1}) const
bool helperInvocationEXT();
bool isTextureUnitEnabled(int unit){    return enable_texture_2d[unit] || enable_texture_cube_map[unit];}vec4 getTextureColor(int unit){    vec4 res;    switch (unit)    {        case 0:            if (enable_texture_2d[0])            {                res = texture(tex_sampler0, texcoord0_varying.xy);            }            else if (enable_texture_cube_map[0])            {                res = texture(tex_cube_sampler0, texcoord0_varying.xyz);            }            break;        case 1:            if (enable_texture_2d[1])            {                res = texture(tex_sampler1, texcoord1_varying.xy);            }            else if (enable_texture_cube_map[1])            {                res = texture(tex_cube_sampler1, texcoord1_varying.xyz);            }            break;        case 2:            if (enable_texture_2d[2])            {                res = texture(tex_sampler2, texcoord2_varying.xy);            }            else if (enable_texture_cube_map[2])            {                res = texture(tex_cube_sampler2, texcoord2_varying.xyz);            }            break;        case 3:            if (enable_texture_2d[3])            {                res = texture(tex_sampler3, texcoord3_varying.xy);            }            else if (enable_texture_cube_map[3])            {                // TODO: Weird stuff happens                // res = texture(tex_cube_sampler3, texcoord3_varying.xyz);            }            break;        default:            break;    }    return res;}vec4 getPointSpriteTextureColor(int unit){    vec4 res;    switch (unit)    {        case 0:            if (enable_texture_2d[0])            {                res = texture(tex_sampler0, gl_PointCoord.xy);            }            break;        case 1:            if (enable_texture_2d[1])            {                res = texture(tex_sampler1, gl_PointCoord.xy);            }            break;        case 2:            if (enable_texture_2d[2])            {                res = texture(tex_sampler2, gl_PointCoord.xy);            }            break;        case 3:            if (enable_texture_2d[3])            {                res = texture(tex_sampler3, gl_PointCoord.xy);            }            break;        default:            break;    }    return res;}vec3 textureCombineSrcnOpnRgb(int srcnRgb,                              int opnRgb,                              vec4 textureEnvColor,                              vec4 vertexColor,                              vec4 texturePrevColor,                              vec4 textureColor){    vec3 res;    vec4 op;    switch (srcnRgb)    {        case kTexture:            op = textureColor;            break;        case kConstant:            op = textureEnvColor;            break;        case kPrimaryColor:            op = vertexColor;            break;        case kPrevious:            op = texturePrevColor;            break;        default:            op = texturePrevColor;            break;    }    switch (opnRgb)    {        case kSrcColor:            res = op.rgb;            break;        case kOneMinusSrcColor:            res = 1.0 - op.rgb;            break;        case kSrcAlpha:            res = vec3(op.a, op.a, op.a);            break;        case kOneMinusSrcAlpha:            res = vec3(1.0 - op.a, 1.0 - op.a, 1.0 - op.a);            break;        default:            break;    }    return res;}float textureCombineSrcnOpnAlpha(int srcn,                                 int opn,                                 vec4 textureEnvColor,                                 vec4 vertexColor,                                 vec4 texturePrevColor,                                 vec4 textureColor){    float res;    vec4 op;    switch (srcn)    {        case kTexture:            op = textureColor;            break;        case kConstant:            op = textureEnvColor;            break;        case kPrimaryColor:            op = vertexColor;            break;        case kPrevious:            op = texturePrevColor;            break;        default:            op = texturePrevColor;            break;    }    switch (opn)    {        case kSrcAlpha:            res = op.a;            break;        case kOneMinusSrcAlpha:            res = 1.0 - op.a;            break;        default:            break;    }    return res;}vec4 textureCombine(int combineRgb,                    int combineAlpha,                    int src0Rgb,                    int src0Alpha,                    int src1Rgb,                    int src1Alpha,                    int src2Rgb,                    int src2Alpha,                    int op0Rgb,                    int op0Alpha,                    int op1Rgb,                    int op1Alpha,                    int op2Rgb,                    int op2Alpha,                    vec4 textureEnvColor,                    float rgbScale,                    float alphaScale,                    vec4 vertexColor,                    vec4 texturePrevColor,                    vec4 textureColor){    vec3 resRgb;    float resAlpha;    vec3 arg0Rgb;    float arg0Alpha;    vec3 arg1Rgb;    float arg1Alpha;    vec3 arg2Rgb;    float arg2Alpha;    float dotVal;    arg0Rgb   = textureCombineSrcnOpnRgb(src0Rgb, op0Rgb, textureEnvColor, vertexColor,                                       texturePrevColor, textureColor);    arg0Alpha = textureCombineSrcnOpnAlpha(src0Alpha, op0Alpha, textureEnvColor, vertexColor,                                           texturePrevColor, textureColor);    if (combineRgb != kReplace)    {        arg1Rgb = textureCombineSrcnOpnRgb(src1Rgb, op1Rgb, textureEnvColor, vertexColor,                                           texturePrevColor, textureColor);    }    if (combineAlpha != kReplace)    {        arg1Alpha = textureCombineSrcnOpnAlpha(src1Alpha, op1Alpha, textureEnvColor, vertexColor,                                               texturePrevColor, textureColor);    }    if (combineRgb == kInterpolate)    {        arg2Rgb = textureCombineSrcnOpnRgb(src2Rgb, op2Rgb, textureEnvColor, vertexColor,                                           texturePrevColor, textureColor);    }    if (combineAlpha == kInterpolate)    {        arg2Alpha = textureCombineSrcnOpnAlpha(src2Alpha, op2Alpha, textureEnvColor, vertexColor,                                               texturePrevColor, textureColor);    }    switch (combineRgb)    {        case kReplace:            resRgb = arg0Rgb;            break;        case kModulate:            resRgb = arg0Rgb * arg1Rgb;            break;        case kAdd:            resRgb = arg0Rgb + arg1Rgb;            break;        case kAddSigned:            resRgb = arg0Rgb + arg1Rgb - 0.5;            break;        case kInterpolate:            resRgb = arg0Rgb * arg2Rgb + arg1Rgb * (1.0 - arg2Rgb);            break;        case kSubtract:            resRgb = arg0Rgb - arg1Rgb;            break;        default:            break;    }    switch (combineAlpha)    {        case kReplace:            resAlpha = arg0Alpha;            break;        case kModulate:            resAlpha = arg0Alpha * arg1Alpha;            break;        case kAdd:            resAlpha = arg0Alpha + arg1Alpha;            break;        case kAddSigned:            resAlpha = arg0Alpha + arg1Alpha - 0.5;            break;        case kInterpolate:            resAlpha = arg0Alpha * arg2Alpha + arg1Alpha * (1.0 - arg2Alpha);            break;        case kSubtract:            resAlpha = arg0Alpha - arg1Alpha;            break;        default:            break;    }    if (combineRgb == kDot3Rgb || combineRgb == kDot3Rgba)    {        dotVal = 4.0 * dot(arg0Rgb - 0.5, arg1Rgb - 0.5);        if (combineRgb == kDot3Rgb)        {            return vec4(dotVal, dotVal, dotVal, resAlpha);        }        else        {            return vec4(dotVal, dotVal, dotVal, dotVal);        }    }    else    {        return vec4(resRgb, resAlpha);    }}vec4 textureFunction(int unit,                     int texFormat,                     int envMode,                     int combineRgb,                     int combineAlpha,                     int src0Rgb,                     int src0Alpha,                     int src1Rgb,                     int src1Alpha,                     int src2Rgb,                     int src2Alpha,                     int op0Rgb,                     int op0Alpha,                     int op1Rgb,                     int op1Alpha,                     int op2Rgb,                     int op2Alpha,                     vec4 textureEnvColor,                     float rgbScale,                     float alphaScale,                     vec4 vertexColor,                     vec4 texturePrevColor,                     vec4 textureColor){    if (!isTextureUnitEnabled(unit))    {        return texturePrevColor;    }    vec4 res;    switch (envMode)    {        case kReplace:            switch (texFormat)            {                case kAlpha:                    res.rgb = texturePrevColor.rgb;                    res.a   = textureColor.a;                    break;                case kRGBA:                case kLuminanceAlpha:                    res.rgba = textureColor.rgba;                    break;                case kRGB:                case kLuminance:                default:                    res.rgb = textureColor.rgb;                    res.a   = texturePrevColor.a;                    break;            }            break;        case kModulate:            switch (texFormat)            {                case kAlpha:                    res.rgb = texturePrevColor.rgb;                    res.a   = texturePrevColor.a * textureColor.a;                    break;                case kRGBA:                case kLuminanceAlpha:                    res.rgba = texturePrevColor.rgba * textureColor.rgba;                    break;                case kRGB:                case kLuminance:                default:                    res.rgb = texturePrevColor.rgb * textureColor.rgb;                    res.a   = texturePrevColor.a;                    break;            }            break;        case kDecal:            switch (texFormat)            {                case kRGB:                    res.rgb = textureColor.rgb;                    res.a   = texturePrevColor.a;                    break;                case kRGBA:                    res.rgb = texturePrevColor.rgb * (1.0 - textureColor.a) +                              textureColor.rgb * textureColor.a;                    res.a = texturePrevColor.a;                    break;                case kAlpha:                case kLuminance:                case kLuminanceAlpha:                default:                    res.rgb = texturePrevColor.rgb * textureColor.rgb;                    res.a   = texturePrevColor.a;                    break;            }            break;        case kBlend:            switch (texFormat)            {                case kAlpha:                    res.rgb = texturePrevColor.rgb;                    res.a   = textureColor.a * texturePrevColor.a;                    break;                case kLuminance:                case kRGB:                    res.rgb = texturePrevColor.rgb * (1.0 - textureColor.rgb) +                              textureEnvColor.rgb * textureColor.rgb;                    res.a = texturePrevColor.a;                    break;                case kLuminanceAlpha:                case kRGBA:                default:                    res.rgb = texturePrevColor.rgb * (1.0 - textureColor.rgb) +                              textureEnvColor.rgb * textureColor.rgb;                    res.a = textureColor.a * texturePrevColor.a;                    break;            }            break;        case kAdd:            switch (texFormat)            {                case kAlpha:                    res.rgb = texturePrevColor.rgb;                    res.a   = textureColor.a * texturePrevColor.a;                    break;                case kLuminance:                case kRGB:                    res.rgb = texturePrevColor.rgb + textureColor.rgb;                    res.a   = texturePrevColor.a;                    break;                case kLuminanceAlpha:                case kRGBA:                default:                    res.rgb = texturePrevColor.rgb + textureColor.rgb;                    res.a   = textureColor.a * texturePrevColor.a;                    break;            }            break;        case kCombine:            res = textureCombine(combineRgb, combineAlpha, src0Rgb, src0Alpha, src1Rgb, src1Alpha,                                 src2Rgb, src2Alpha, op0Rgb, op0Alpha, op1Rgb, op1Alpha, op2Rgb,                                 op2Alpha, textureEnvColor, rgbScale, alphaScale, vertexColor,                                 texturePrevColor, textureColor);            res.rgb *= rgbScale;            res.a *= alphaScale;            break;        default:            break;    }    return clamp(res, 0.0, 1.0);}
bool isnan_emu(float x) { return (x > 0.0 || x < 0.0) ? false : x != 0.0; }
bool reportIntersectionNV(float, uint);bool reportIntersectionEXT(float, uint);
bool sh::TParseContext::checkCanUseOneOfExtensions<1ul>(sh::TSourceLoc const&, std::__1::array<sh::TExtension, 1ul> const&)
bool sh::TParseContext::checkCanUseOneOfExtensions<2ul>(sh::TSourceLoc const&, std::__1::array<sh::TExtension, 2ul> const&)
bool sh::TParseContext::checkCanUseOneOfExtensions<3ul>(sh::TSourceLoc const&, std::__1::array<sh::TExtension, 3ul> const&)
bool sparseTexelsResidentARB(int code);
bool std::__1::__function::__policy_invoker<bool ()>::__call_impl<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_2, bool ()> >(std::__1::__function::__policy_storage const*)
bool std::__1::__function::__policy_invoker<bool (OpenCLDebugInfo100Instructions)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_1, bool (OpenCLDebugInfo100Instructions)> >(std::__1::__function::__policy_storage const*, OpenCLDebugInfo100Instructions)
bool std::__1::__function::__policy_invoker<bool (OpenCLDebugInfo100Instructions)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_3, bool (OpenCLDebugInfo100Instructions)> >(std::__1::__function::__policy_storage const*, OpenCLDebugInfo100Instructions)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ValidateImageQueryLod(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_2, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::BarriersPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::DerivativesPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::Function::RegisterExecutionModelLimitation(SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::$_5, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ImagePass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExecutionScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExecutionScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_1, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidateMemoryScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_2, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidateMemoryScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_3, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (VkPhysicalDeviceProperties const&)>::__call_impl<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_0, bool (VkPhysicalDeviceProperties const&)> >(std::__1::__function::__policy_storage const*, VkPhysicalDeviceProperties const&)
bool std::__1::__function::__policy_invoker<bool (VkPhysicalDeviceProperties const&)>::__call_impl<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_1, bool (VkPhysicalDeviceProperties const&)> >(std::__1::__function::__policy_storage const*, VkPhysicalDeviceProperties const&)
bool std::__1::__function::__policy_invoker<bool (VkPhysicalDeviceProperties const&)>::__call_impl<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_2, bool (VkPhysicalDeviceProperties const&)> >(std::__1::__function::__policy_storage const*, VkPhysicalDeviceProperties const&)
bool std::__1::__function::__policy_invoker<bool (char const*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_3, bool (char const*)> >(std::__1::__function::__policy_storage const*, char const*)
bool std::__1::__function::__policy_invoker<bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction&, bool&, int&, glslang::TIntermTyped*&)::$_31, bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)> >(std::__1::__function::__policy_storage const*, glslang::TType const&, glslang::TType const&, glslang::TOperator, int)
bool std::__1::__function::__policy_invoker<bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunction400(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_0, bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)> >(std::__1::__function::__policy_storage const*, glslang::TType const&, glslang::TType const&, glslang::TOperator, int)
bool std::__1::__function::__policy_invoker<bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunctionExplicitTypes(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_2, bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)> >(std::__1::__function::__policy_storage const*, glslang::TType const&, glslang::TType const&, glslang::TOperator, int)
bool std::__1::__function::__policy_invoker<bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction&, bool&, int&, glslang::TIntermTyped*&)::$_32, bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)> >(std::__1::__function::__policy_storage const*, glslang::TType const&, glslang::TType const&, glslang::TType const&)
bool std::__1::__function::__policy_invoker<bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunction400(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_1, bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)> >(std::__1::__function::__policy_storage const*, glslang::TType const&, glslang::TType const&, glslang::TType const&)
bool std::__1::__function::__policy_invoker<bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunctionExplicitTypes(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_3, bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)> >(std::__1::__function::__policy_storage const*, glslang::TType const&, glslang::TType const&, glslang::TType const&)
bool std::__1::__function::__policy_invoker<bool (glslang::TType&, glslang::TType&)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::shareStructBufferType(glslang::TType&)::$_29, bool (glslang::TType&, glslang::TType&)> >(std::__1::__function::__policy_storage const*, glslang::TType&, glslang::TType&)
bool std::__1::__function::__policy_invoker<bool (sh::TIntermBinary*)>::__call_impl<std::__1::__function::__default_alloc_func<sh::RemoveDynamicIndexingOfSwizzledVector(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable*, sh::PerformanceDiagnostics*)::$_1, bool (sh::TIntermBinary*)> >(std::__1::__function::__policy_storage const*, sh::TIntermBinary*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::BasicBlock*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ForEachBlockInReversePostOrder(spvtools::opt::BasicBlock*, std::__1::function<void (spvtools::opt::BasicBlock*)> const&)::$_6, bool (spvtools::opt::BasicBlock*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::BasicBlock*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::SSARewriter::RewriteFunctionIntoSSA(spvtools::opt::Function*)::$_0, bool (spvtools::opt::BasicBlock*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::EliminateDeadFunctions()::$_10, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::ProcessImpl()::$_8, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::ProcessImpl()::$_9, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BlockMergePass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFGCleanupPass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::FixBlockOrder()::$_2, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::FixBlockOrder()::$_3, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::Process()::$_4, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::Process()::$_2, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::EliminateDeadFunctionsPass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Function::IsRecursive() const::$_3, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlineExhaustivePass::ProcessImpl()::$_0, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleBlockLoadStoreElimPass::ProcessImpl()::$_1, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleStoreElimPass::ProcessImpl()::$_0, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Function*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Function*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<bool (*)(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&), bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::CompositeConstructFeedingExtract()::$_19, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DotProductDoingExtract()::$_31, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FMixFeedingExtract()::$_22, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FactorAddMuls()::$_17, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::InsertFeedingExtract()::$_20, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::IntMultipleBy1()::$_18, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeAddAddArithmetic()::$_12, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeAddNegateArithmetic()::$_10, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeAddSubArithmetic()::$_13, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeDivDivArithmetic()::$_7, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeDivMulArithmetic()::$_8, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeDivNegateArithmetic()::$_9, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeGenericAddSubArithmetic()::$_16, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeMulDivArithmetic()::$_5, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeMulMulArithmetic()::$_4, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeMulNegateArithmetic()::$_6, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeNegateAddSubArithmetic()::$_3, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeNegateArithmetic()::$_1, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeNegateMulDivArithmetic()::$_2, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeSubAddArithmetic()::$_14, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeSubNegateArithmetic()::$_11, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeSubSubArithmetic()::$_15, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::ReciprocalFDiv()::$_0, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFAdd()::$_25, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFDiv()::$_28, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFMix()::$_29, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFMul()::$_27, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFSub()::$_26, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantIAdd()::$_30, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantPhi()::$_23, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantSelect()::$_24, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RemoveRedundantOperands()::$_34, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::StoringUndef()::$_32, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::UpdateImageOperands()::$_35, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::VectorShuffleFeedingExtract()::$_21, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::VectorShuffleFeedingShuffle()::$_33, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsFloatingPointFoldingAllowed() const::$_6, bool (spvtools::opt::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DecorationManager::ForEachDecoration(unsigned int, unsigned int, std::__1::function<void (spvtools::opt::Instruction const&)>)::$_3, bool (spvtools::opt::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DecorationManager::RemoveDecorationsFrom(unsigned int, std::__1::function<bool (spvtools::opt::Instruction const&)>)::{default arg#1}::{lambda(spvtools::opt::Instruction const&)#1}, bool (spvtools::opt::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const&)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Function::ForEachInst(std::__1::function<void (spvtools::opt::Instruction const*)> const&, bool) const::$_2, bool (spvtools::opt::Instruction const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInst(std::__1::function<void (spvtools::opt::Instruction const*)> const&, bool) const::{lambda(spvtools::opt::Instruction const*)#1}, bool (spvtools::opt::Instruction const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachPhiInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::SwitchHasNestedBreak(unsigned int)::$_6, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Function::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::$_1, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::CheckPhiUsers(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*)::$_1, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::ContainsKill(spvtools::opt::Function*) const::$_6, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::GenInlineCode(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)::$_3, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::HasOnlySupportedRefs(unsigned int)::$_2, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleBlockLoadStoreElimPass::HasOnlySupportedRefs(unsigned int)::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleStoreElimPass::FeedsAStore(spvtools::opt::Instruction*) const::$_2, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::HasLoads(unsigned int) const::$_2, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::HasOnlyNamesAndDecorates(unsigned int) const::$_1, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::HasOnlySupportedRefs(unsigned int)::$_5, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::opt::Instruction*)::$_4, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::opt::Instruction*)::$_4::operator()(spvtools::opt::Instruction*) const::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::ReplaceVariable(spvtools::opt::Instruction*, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::StripDebugInfoPass::Process()::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::WrapOpKill::Process()::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::ForEachUser(spvtools::opt::Instruction const*, std::__1::function<void (spvtools::opt::Instruction*)> const&) const::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::ReplaceAllUsesWith(unsigned int, unsigned int)::$_1, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1::operator()(spvtools::opt::BasicBlock*) const::{lambda(spvtools::opt::Instruction*, unsigned int)#1}, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_3, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::ForEachUse(spvtools::opt::Instruction const*, std::__1::function<void (spvtools::opt::Instruction*, unsigned int)> const&) const::$_1, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::blockmergeutil::(anonymous namespace)::IsContinue(spvtools::opt::IRContext*, unsigned int)::$_1, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::blockmergeutil::(anonymous namespace)::IsMerge(spvtools::opt::IRContext*, unsigned int)::$_0, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLinesPass(unsigned int)::$_1, bool (spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)
bool std::__1::__function::__policy_invoker<bool (spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLinesPass(unsigned int)::$_2, bool (spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)
bool std::__1::__function::__policy_invoker<bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ValidateImageQueryLod(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_3, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::DerivativesPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_1, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ImagePass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_1, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::MiscPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)>::__call_impl<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_1, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)>::__call_impl<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_3, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_3, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_5, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)>::__call_impl<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_0, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)>::__call_impl<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_2, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_2, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_4, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::$_0, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_0, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_5, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
bool std::__1::__function::__policy_invoker<bool (unsigned int const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::WhileEachSuccessorLabel(std::__1::function<bool (unsigned int)> const&) const::$_2, bool (unsigned int const*)> >(std::__1::__function::__policy_storage const*, unsigned int const*)
bool std::__1::__function::__policy_invoker<bool (unsigned int const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInId(std::__1::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}, bool (unsigned int const*)> >(std::__1::__function::__policy_storage const*, unsigned int const*)
bool std::__1::__function::__policy_invoker<bool (unsigned int const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsFoldableByFoldScalar() const::$_5, bool (unsigned int const*)> >(std::__1::__function::__policy_storage const*, unsigned int const*)
bool std::__1::__function::__policy_invoker<bool (unsigned int const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::IsConstantIndexAccessChain(spvtools::opt::Instruction const*) const::$_1, bool (unsigned int const*)> >(std::__1::__function::__policy_storage const*, unsigned int const*)
bool std::__1::__function::__policy_invoker<bool (unsigned int const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::IsTargetType(spvtools::opt::Instruction const*) const::$_0, bool (unsigned int const*)> >(std::__1::__function::__policy_storage const*, unsigned int const*)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_11, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_12, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_13, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_14, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_15, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_16, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_1, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_10, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_2, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_3, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_4, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_5, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_6, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_7, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_8, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_9, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int)> const&) const::$_1, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputePostOrderTraversal(spvtools::opt::BasicBlock*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_8, bool (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
bool std::__1::__function::__policy_invoker<bool (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_0, bool (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
bool std::__1::__function::__policy_invoker<bool (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::CanHoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_3, bool (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
bool std::__1::__function::__policy_invoker<bool (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::CloneSameBlockOps(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*, std::__1::unordered_map<unsigned int, spvtools::opt::Instruction*, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::opt::Instruction*> > >*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*)::$_1, bool (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
bool std::__1::__function::__policy_invoker<bool (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInId(std::__1::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}, bool (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
bool std::__1::__function::__policy_invoker<bool (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInOperand(std::__1::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}, bool (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
bool std::__1::__insertion_sort_incomplete<bool (*&)(char const*, char const*), char const**>(char const**, char const**, bool (*&)(char const*, char const*))
bool std::__1::__insertion_sort_incomplete<bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&), gl::PackedVarying*>(gl::PackedVarying*, gl::PackedVarying*, bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&))
bool std::__1::__insertion_sort_incomplete<bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&), sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&))
bool std::__1::__insertion_sort_incomplete<egl::ConfigSorter&, egl::Config const**>(egl::Config const**, egl::Config const**, egl::ConfigSorter&)
bool std::__1::__insertion_sort_incomplete<sh::(anonymous namespace)::TVariableInfoComparer&, sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::(anonymous namespace)::TVariableInfoComparer&)
bool std::__1::__insertion_sort_incomplete<spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*>(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&)
bool std::__1::__insertion_sort_incomplete<spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*>(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&)
bool std::__1::__insertion_sort_incomplete<spvtools::opt::(anonymous namespace)::DecorationLess&, spvtools::opt::Instruction**>(spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::(anonymous namespace)::DecorationLess&)
bool std::__1::__insertion_sort_incomplete<spvtools::opt::StripDebugInfoPass::Process()::$_1&, spvtools::opt::Instruction**>(spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::StripDebugInfoPass::Process()::$_1&)
bool std::__1::__insertion_sort_incomplete<spvtools::opt::analysis::(anonymous namespace)::CompareTwoVectors(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >)::$_0&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**>(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, spvtools::opt::analysis::(anonymous namespace)::CompareTwoVectors(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >)::$_0&)
bool std::__1::__insertion_sort_incomplete<spvtools::val::(anonymous namespace)::check_interface_variable(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0&, spvtools::val::Function const**>(spvtools::val::Function const**, spvtools::val::Function const**, spvtools::val::(anonymous namespace)::check_interface_variable(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0&)
bool std::__1::__insertion_sort_incomplete<std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&, gl::PackedVaryingRegister*>(gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&)
bool std::__1::__insertion_sort_incomplete<std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&)
bool std::__1::__insertion_sort_incomplete<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)
bool std::__1::operator==<unsigned char, 20ul>(std::__1::array<unsigned char, 20ul> const&, std::__1::array<unsigned char, 20ul> const&)
bool1
bool1x1
bool1x2
bool1x3
bool1x4
bool2
bool2x1
bool2x2
bool2x3
bool2x4
bool3
bool3x1
bool3x2
bool3x3
bool3x4
bool4
bool4x1
bool4x2
bool4x3
bool4x4
boolean expression expected
branches to the
break
break statement only allowed in loops and switch statements
break statement only allowed in switch and loops
bresenham_line_rasterization
buffer aliasing not yet supported
buffer cannot reference a 2D texture with the name 0.
buffer cannot reference a 3D texture with the name 0.
buffer cannot reference a cubemap texture with the name 0.
buffer cannot reference a renderbuffer with the name 0.
buffer error
buffer is too large:
buffer must be NULL.
buffer reference indexing
buffer_reference
buffer_reference_align
buffer_reference_align=
buffer_referenceg
buffers can be declared only as blocks
build_module.cpp
build_tree
built in unary operator function.  Type: %s
built-in
built-in block redeclaration
built-in functions cannot be redefined
but
bvec2 isnan_emu(vec2 x){    bvec2 isnan;    for (int i = 0; i < 2; i++)    {        isnan[i] = (x[i] > 0.0 || x[i] < 0.0) ? false : x[i] != 0.0;    }    return isnan;}
bvec3 isnan_emu(vec3 x){    bvec3 isnan;    for (int i = 0; i < 3; i++)    {        isnan[i] = (x[i] > 0.0 || x[i] < 0.0) ? false : x[i] != 0.0;    }    return isnan;}
bvec4 isnan_emu(vec4 x){    bvec4 isnan;    for (int i = 0; i < 4; i++)    {        isnan[i] = (x[i] > 0.0 || x[i] < 0.0) ? false : x[i] != 0.0;    }    return isnan;}
byteAddrTemp
bytes )
bzZ
b7
c
c*>
c+5
c1W
c2W
c5>
c7
c8
c:E
c@>
cI0
c[subcomponent][.component]
cacheProgram
call argument
callable
callable data number
callableDataEXT
callableDataInEXT
callableDataInNV
callableDataInNV block
callableDataNV
callableDataNV block
calling
calling user function from global scope
calloc
can only apply depth layout to gl_FragDepth
can only apply highp to atomic_uint
can only apply origin_upper_left and pixel_center_origin to gl_FragCoord
can only apply to 'in'
can only apply to 'out'
can only apply to a standalone qualifier
can only apply to an output
can only apply to an output, or to an input in a non-vertex stage
can only apply to uniform, buffer, in, or out storage qualifiers
can only be applied as standalone
can only be applied to 'const'-qualified scalar
can only be applied to a scalar
can only be applied to a standalone 'out'
can only be followed by a single macro name
can only be used on an output
can only be used on variable declaration
can only be used with a block
can only be used with a buffer
can only be used with a subpass
can only be used with a uniform
can only be used with an explicit location
can only be used with buffer
can only be used with non-externally visible shader Storage
can only be used with physical addressing models
can only be used with std140, std430, or scalar layout packing
can only change layout qualification of
can only have one auxiliary qualifier (centroid, patch, and sample)
can only have one interpolation qualifier (flat, smooth, noperspective, __explicitInterpAMD)
can only redeclare a built-in block once, and before any use
can only specify on a buffer block
can only specify on a uniform block
can only use in an in/out block
can only use on input blocks in mesh shader
can only use on input in tessellation-evaluation shader
can only use on output in tessellation-control shader
can't construct structure containing 16-bit type
can't construct structure containing 8-bit type
can't convert
can't evaluate expression
can't find function
can't handle multiple entry points per stage
can't have an initializer
can't link compilation units from different source languages
can't modify a const
can't modify a readonly buffer
can't modify a readonly variable
can't modify a sampler
can't modify a shaderrecordnv qualified buffer
can't modify a uniform
can't modify a variable with type
can't modify a varying
can't modify accelerationStructureNV
can't modify an atomic_uint
can't modify an attribute
can't modify an input
can't modify any member in gl_in
can't modify gl_FragCoord
can't modify gl_FragDepth if using early_fragment_tests
can't modify gl_FrontFace
can't modify gl_FrontFacing
can't modify gl_GlobalInvocationID
can't modify gl_HelperInvocation
can't modify gl_InstanceID
can't modify gl_InvocationID
can't modify gl_Layer in a fragment shader
can't modify gl_LocalInvocationID
can't modify gl_LocalInvocationIndex
can't modify gl_NumWorkGroups
can't modify gl_PointCoord
can't modify gl_PrimitiveID in a fragment shader
can't modify gl_PrimitiveIDIn
can't modify gl_VertexID
can't modify gl_ViewID_OVR
can't modify gl_WorkGroupID
can't modify gl_WorkGroupSize
can't modify rayQueryEXT
can't modify shader input
can't modify void
can't modify work group size variable
can't read from explicitly-interpolated object:
can't read from writeonly object:
can't swizzle types containing (u)int16
can't swizzle types containing (u)int8
can't swizzle types containing float16
can't use auxiliary qualifier on a fragment output
can't use function syntax on variable
can't use interpolation qualifier on a fragment output
can't use variable in patch constant function
can't use with arrays containing float16
can't use with arrays containing int16
can't use with arrays containing int8
can't use with arrays containing uint16
can't use with arrays containing uint8
can't use with reference types
can't use with samplers or structs containing samplers
can't use with structs containing float16
can't use with structs containing int16
can't use with structs containing int8
can't use with structs containing uint16
can't use with structs containing uint8
can't use with types containing arrays sized with a specialization constant
cannot access member variables (static member function?)
cannot add memory qualifier to redeclared block member
cannot add non-XFB layout to redeclared block member
cannot add patch to redeclared block member
cannot add perprimitiveNV qualifier to redeclared block member
cannot add perviewNV qualifier to redeclared block member
cannot add storage, auxiliary, memory, interpolation, layout, or precision qualifier to an existing variable
cannot allocate __cxa_eh_globals
cannot appear before the memory model instruction
cannot appear in a function declaration
cannot appear outside switch statement
cannot apply dot operator to an array
cannot apply layout qualifier to
cannot apply layout qualifiers to a shared variable
cannot apply layout qualifiers to hitAttributeNV variable
cannot apply precision statement to this type; use 'float', 'int' or a sampler type
cannot apply to 'in'
cannot apply to 'out'
cannot apply to a block
cannot apply to a cooperative matrix type:
cannot apply to a matrix, structure, or block
cannot apply to an array:
cannot apply to input
cannot apply to taskNV in/out blocks
cannot apply to uniform or buffer block
cannot apply to:
cannot be 0xFFFFFFFF in WebGPU execution environment.
cannot be a matrix
cannot be a parameter type except for '(void)'
cannot be a structure
cannot be a structure containing a bool
cannot be a structure containing a structure
cannot be a structure containing an array
cannot be a structure or array
cannot be a type
cannot be an argument type except for '(void)'
cannot be an array of structures
cannot be applied to this type
cannot be array
cannot be bool
cannot be bool or int
cannot be both specified
cannot be greater than 3 for pervertexNV
cannot be matrix
cannot be nested inside control flow
cannot be used (maybe an instance name is needed)
cannot be used as a member decoration
cannot be used with a structure
cannot be used with a yuvCscStandardEXT
cannot be used with push_constant
cannot be used with shaderRecordNV
cannot change array size of redeclared block
cannot change array size of redeclared block member
cannot change arrayness of redeclared block
cannot change arrayness of redeclared block member
cannot change input storage qualification of
cannot change interpolation qualification of
cannot change output storage qualification of
cannot change previously set domain
cannot change previously set fragment shader interlock ordering
cannot change previously set input primitive
cannot change previously set layout value
cannot change previously set maxvertexcount attribute
cannot change previously set output primitive
cannot change previously set outputcontrolpoints attribute
cannot change previously set outputtopology
cannot change previously set partitioning
cannot change previously set size
cannot change previously set vertex order
cannot change previously set vertex spacing
cannot change qualification after use
cannot change qualification of
cannot change storage, memory, or auxiliary qualification of
cannot change the type of
cannot compose log message
cannot construct this type
cannot construct with these arguments
cannot contain a double, int64, or uint64
cannot convert a sampler
cannot convert a variable with type
cannot convert a variable with writeonly
cannot convert a void
cannot convert an atomic_uint
cannot convert from '
cannot convert from '%s' to '%s'
cannot convert input argument, argument
cannot convert parameter %d from '%s' to '%s'
cannot convert return value to function return type
cannot create thread specific key for __cxa_get_globals()
cannot declare a default, can only be used on a block
cannot declare a default, can only be used on a scalar
cannot declare a default, include a type or full declaration
cannot declare a default, use a full declaration
cannot declare arrays of arrays
cannot declare arrays of structs of this qualifier
cannot declare arrays of this qualifier
cannot declare buffer variables at global scope(outside a block)
cannot have statements before first case/default label
cannot implicitly initialize opaque members
cannot index buffer reference
cannot index reference to buffer containing an unsized array
cannot initialize this type of qualifier
cannot lie in previous members
cannot modify hitAttributeNV in this stage
cannot nest a block definition inside a structure or block
cannot nest a structure definition inside a structure or block
cannot re-qualify a function name
cannot redeclare a built-in block with a user name
cannot redeclare a non block as a block
cannot redeclare a user-block member array
cannot redeclare after use
cannot redeclare block member with a different type
cannot redeclare block:
cannot redeclare with different qualification:
cannot specify matrix layout on a variable declaration
cannot specify on a variable declaration
cannot specify packing on a variable declaration
cannot use 'inout' at global scope
cannot use auxiliary or interpolation qualifiers on a function parameter
cannot use auxiliary, memory, interpolation, or precision qualifier in a default qualifier declaration (declaration with no type)
cannot use both gl_FragData and gl_FragColor
cannot use both output variable sets (gl_FragData, gl_SecondaryFragDataEXT) and (gl_FragColor, gl_SecondaryFragColorEXT)
cannot use centroid qualifier on an interface block
cannot use in a block array where new locations are needed for each block element
cannot use in preprocessor expression when expanded from macros
cannot use interpolation qualifiers on an interface block
cannot use interpolation qualifiers with patch
cannot use invariant qualifier on a function parameter
cannot use invariant qualifier on an interface block
cannot use invariant qualifier on structure members
cannot use layout qualifiers on a function parameter
cannot use layout qualifiers on structure members
cannot use memory qualifiers on structure members
cannot use offset or align qualifiers in a default qualifier declaration (declaration with no type)
cannot use sample qualifier on an interface block
cannot use storage or interpolation qualifiers on structure members
cannot zero out thread value for __cxa_get_globals()
case (
case entry block
case exit block
case expression
case label must be a scalar integer
case label must be constant
case label must have a condition
case label type does not match switch init-expression type
case labels need to be inside switch statements
case:
case_label
casting a negative float to uint is undefined
catch
catclose
catgets
catopen
cbC
cbrt
cbuffer
cc5
ccC
ccp_pass.cpp
ccw
cd
ceil
ceil(00B
ceil(00C
ceil(10B
ceil(10C
ceil(20B
ceil(20C
ceil(30B
ceil(30C
ceilf
centroid
centroid/sample/patch
cfg-cleanup
cfg.cpp
cfg_cleanup_pass.cpp
char
character literals not supported
charconv.cpp
chdir
checkForOutOfDateSwapchain
checkLinkStatus
checkShader
checkStatus
chrono.cpp
clamp(00B00B00B
clamp(00C00C00C
clamp(00D00D00D
clamp(00E00E00E
clamp(10B00B00B
clamp(10B10B10B
clamp(10C00C00C
clamp(10C10C10C
clamp(10D00D00D
clamp(10D10D10D
clamp(10E00E00E
clamp(10E10E10E
clamp(20B00B00B
clamp(20B20B20B
clamp(20C00C00C
clamp(20C20C20C
clamp(20D00D00D
clamp(20D20D20D
clamp(20E00E00E
clamp(20E20E20E
clamp(30B00B00B
clamp(30B30B30B
clamp(30C00C00C
clamp(30C30C30C
clamp(30D00D00D
clamp(30D30D30D
clamp(30E00E00E
clamp(30E30E30E
clamp_array_access
clamp_frag_depth
clamp_point_size
clearColor
clearImpl
clear_to_zero_or_one_broken
client opengl100
client vulkan100
client/version number not supported
clientWait
clip
clipDistancesEnabled
clip_plane_enables
clip_src_region_for_blitframebuffer
clock2x32ARB
clockARB
clockRealtime2x32EXT
clockRealtimeEXT
clock_gettime
clock_gettime(CLOCK_MONOTONIC) failed
clock_gettime(CLOCK_REALTIME) failed
close
closest-hit
cluster size
clz
cm<
cmd
cmdData
cmdOffsetDiv4
code_sink.cpp
coherent
coherent volatile
collect
color
color =
color = color *
color.xyz = color.xyz * color.a;
color.xyz = color.xyz / color.a;
colorOut
colorOut0
colorOut1
colorOut2
colorOut3
colorOut4
colorOut5
colorOut6
colorOut7
column_major
columns, but access index is
combination.
combine_access_chains.cpp
combined (Vector1 + Vector2) size of
combined token is invalid
combined tokens are too long
comma
command buffer recycling
committed
compact_ids_pass.cpp
comparison operator only defined for scalars
compilation errors.  No code generated.
compilation terminated
compileShader
completed.7046
component
component argument
component is too large
component-wise equal
component-wise greater than
component-wise greater than or equal
component-wise less than
component-wise less than or equal
component-wise multiply
component-wise not
component-wise not equal
component=
componentCount
components < 4 in matrix buffer type
components are not float scalar.
components are not int scalar.
components as the first member
components for
components is not one of GL_RGB, GL_RGBA, GL_ALPHA or GL_NONE.
components must be in the range [0, 31]
components must be in the range [0, 3]
components,
components, but given
components, but given only
components.
composite
composite.cpp
compositor timing not supported by surface.
compound_statement
compound_statement_no_new_scope
compress.c
compress_block
compression_utils_portable.cc
compute
compute shader derivatives
condition must be a scalar integer expression
condition_variable timed_wait failed
condition_variable wait failed
condition_variable.cpp
condition_variable::timed wait: mutex not locked
condition_variable::wait: mutex not locked
condition_variable_destructor.cpp
conditional_expression
conditionopt
configuration_table
conflicting output locations with previously defined output '
conflicts with another variable.
const (read only)
const array
const bool
const int
const int  gl_MaxClipPlanes = %d;
const int  gl_MaxCombinedTextureImageUnits = %d;
const int  gl_MaxDrawBuffers = %d;
const int  gl_MaxFragmentUniformComponents = %d;
const int  gl_MaxFragmentUniformVectors = %d;
const int  gl_MaxLights = %d;
const int  gl_MaxTextureCoords = %d;
const int  gl_MaxTextureImageUnits = %d;
const int  gl_MaxTextureUnits = %d;
const int  gl_MaxVaryingFloats = %d;
const int  gl_MaxVertexAttribs = %d;
const int  gl_MaxVertexTextureImageUnits = %d;
const int  gl_MaxVertexUniformComponents = %d;
const int  gl_MaxVertexUniformVectors = %d;
const int gl_MaxAtomicCounterBindings = %d;
const int gl_MaxAtomicCounterBufferSize = %d;
const int gl_MaxClipDistances = %d;
const int gl_MaxCombinedAtomicCounterBuffers = %d;
const int gl_MaxCombinedAtomicCounters = %d;
const int gl_MaxCombinedClipAndCullDistances = %d;
const int gl_MaxCombinedImageUniforms = %d;
const int gl_MaxCombinedImageUnitsAndFragmentOutputs = %d;
const int gl_MaxCombinedShaderOutputResources = %d;
const int gl_MaxComputeAtomicCounterBuffers = %d;
const int gl_MaxComputeAtomicCounters = %d;
const int gl_MaxComputeImageUniforms = %d;
const int gl_MaxComputeTextureImageUnits = %d;
const int gl_MaxComputeUniformComponents = %d;
const int gl_MaxCullDistances = %d;
const int gl_MaxFragmentAtomicCounterBuffers = %d;
const int gl_MaxFragmentAtomicCounters = %d;
const int gl_MaxFragmentImageUniforms = %d;
const int gl_MaxFragmentInputComponents = %d;
const int gl_MaxGeometryAtomicCounterBuffers = %d;
const int gl_MaxGeometryAtomicCounters = %d;
const int gl_MaxGeometryImageUniforms = %d;
const int gl_MaxGeometryInputComponents = %d;
const int gl_MaxGeometryOutputComponents = %d;
const int gl_MaxGeometryOutputVertices = %d;
const int gl_MaxGeometryTextureImageUnits = %d;
const int gl_MaxGeometryTotalOutputComponents = %d;
const int gl_MaxGeometryUniformComponents = %d;
const int gl_MaxGeometryVaryingComponents = %d;
const int gl_MaxImageSamples = %d;
const int gl_MaxImageUnits = %d;
const int gl_MaxMeshOutputPrimitivesNV = %d;
const int gl_MaxMeshOutputVerticesNV = %d;
const int gl_MaxMeshViewCountNV = %d;
const int gl_MaxPatchVertices = %d;
const int gl_MaxSamples = %d;
const int gl_MaxTessControlAtomicCounterBuffers = %d;
const int gl_MaxTessControlAtomicCounters = %d;
const int gl_MaxTessControlImageUniforms = %d;
const int gl_MaxTessControlInputComponents = %d;
const int gl_MaxTessControlOutputComponents = %d;
const int gl_MaxTessControlTextureImageUnits = %d;
const int gl_MaxTessControlTotalOutputComponents = %d;
const int gl_MaxTessControlUniformComponents = %d;
const int gl_MaxTessEvaluationAtomicCounterBuffers = %d;
const int gl_MaxTessEvaluationAtomicCounters = %d;
const int gl_MaxTessEvaluationImageUniforms = %d;
const int gl_MaxTessEvaluationInputComponents = %d;
const int gl_MaxTessEvaluationOutputComponents = %d;
const int gl_MaxTessEvaluationTextureImageUnits = %d;
const int gl_MaxTessEvaluationUniformComponents = %d;
const int gl_MaxTessGenLevel = %d;
const int gl_MaxTessPatchComponents = %d;
const int gl_MaxTransformFeedbackBuffers = %d;
const int gl_MaxTransformFeedbackInterleavedComponents = %d;
const int gl_MaxVaryingComponents = %d;
const int gl_MaxVertexAtomicCounterBuffers = %d;
const int gl_MaxVertexAtomicCounters = %d;
const int gl_MaxVertexImageUniforms = %d;
const int gl_MaxVertexOutputComponents = %d;
const int gl_MaxViewports = %d;
const int gl_ScopeDevice      = 1;
const int gl_ScopeInvocation  = 4;
const int gl_ScopeQueueFamily = 5;
const int gl_ScopeShaderCallEXT = 6;
const int gl_ScopeSubgroup    = 3;
const int gl_ScopeWorkgroup   = 2;
const int gl_SemanticsAcquire         = 0x2;
const int gl_SemanticsAcquireRelease  = 0x8;
const int gl_SemanticsMakeAvailable   = 0x2000;
const int gl_SemanticsMakeVisible     = 0x4000;
const int gl_SemanticsRelaxed         = 0x0;
const int gl_SemanticsRelease         = 0x4;
const int gl_SemanticsVolatile        = 0x8000;
const int gl_StorageSemanticsBuffer   = 0x40;
const int gl_StorageSemanticsImage    = 0x800;
const int gl_StorageSemanticsNone     = 0x0;
const int gl_StorageSemanticsOutput   = 0x1000;
const int gl_StorageSemanticsShared   = 0x100;
const int16_t
const int64_t
const int8_t
const ivec3 gl_MaxComputeWorkGroupCount = ivec3(%d,%d,%d);
const ivec3 gl_MaxComputeWorkGroupSize = ivec3(%d,%d,%d);
const ivec3 gl_MaxMeshWorkGroupSizeNV = ivec3(%d,%d,%d);
const ivec3 gl_MaxTaskWorkGroupSizeNV = ivec3(%d,%d,%d);
const mediump int  gl_MaxCombinedTextureImageUnits = %d;
const mediump int  gl_MaxDrawBuffers = %d;
const mediump int  gl_MaxFragmentInputVectors = %d;
const mediump int  gl_MaxFragmentUniformVectors = %d;
const mediump int  gl_MaxProgramTexelOffset = %d;
const mediump int  gl_MaxTextureImageUnits = %d;
const mediump int  gl_MaxVaryingVectors = %d;
const mediump int  gl_MaxVertexAttribs = %d;
const mediump int  gl_MaxVertexOutputVectors = %d;
const mediump int  gl_MaxVertexTextureImageUnits = %d;
const mediump int  gl_MaxVertexUniformVectors = %d;
const mediump int  gl_MinProgramTexelOffset = %d;
const mediump int gl_MaxDualSourceDrawBuffersEXT = %d;
const uint
const uint gl_RayFlagsNoneNV = 0U;const uint gl_RayFlagsNoneEXT = 0U;const uint gl_RayFlagsOpaqueNV = 1U;const uint gl_RayFlagsOpaqueEXT = 1U;const uint gl_RayFlagsNoOpaqueNV = 2U;const uint gl_RayFlagsNoOpaqueEXT = 2U;const uint gl_RayFlagsTerminateOnFirstHitNV = 4U;const uint gl_RayFlagsTerminateOnFirstHitEXT = 4U;const uint gl_RayFlagsSkipClosestHitShaderNV = 8U;const uint gl_RayFlagsSkipClosestHitShaderEXT = 8U;const uint gl_RayFlagsCullBackFacingTrianglesNV = 16U;const uint gl_RayFlagsCullBackFacingTrianglesEXT = 16U;const uint gl_RayFlagsCullFrontFacingTrianglesNV = 32U;const uint gl_RayFlagsCullFrontFacingTrianglesEXT = 32U;const uint gl_RayFlagsCullOpaqueNV = 64U;const uint gl_RayFlagsCullOpaqueEXT = 64U;const uint gl_RayFlagsCullNoOpaqueNV = 128U;const uint gl_RayFlagsCullNoOpaqueEXT = 128U;const uint gl_RayFlagsSkipTrianglesEXT = 256U;const uint gl_RayFlagsSkipAABBEXT = 512U;const uint gl_HitKindFrontFacingTriangleEXT = 254U;const uint gl_HitKindBackFacingTriangleEXT = 255U;
const uint gl_RayQueryCandidateIntersectionEXT = 0U;const uint gl_RayQueryCommittedIntersectionEXT = 1U;const uint gl_RayQueryCommittedIntersectionNoneEXT = 0U;const uint gl_RayQueryCommittedIntersectionTriangleEXT = 1U;const uint gl_RayQueryCommittedIntersectionGeneratedEXT = 2U;const uint gl_RayQueryCandidateIntersectionTriangleEXT = 0U;const uint gl_RayQueryCandidateIntersectionAABBEXT = 1U;
const uint16_t
const uint64_t
const uint8_t
const_cast
const_folding_rules.cpp
constant expression required
constant_expression
constant_id
constant_id=
constants.cpp
construct headed by
construct with the
construct, but not to the
construct.cpp
constructing from a non-dereferenced array
constructing matrix from matrix
constructing matrix from matrix can only take one argument
constructing non-array constituent from array argument
construction vtable for std::__1::basic_iostream<char, std::__1::char_traits<char> >-in-std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
construction vtable for std::__1::basic_istream<char, std::__1::char_traits<char> >-in-std::__1::basic_istringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
construction vtable for std::__1::basic_istream<char, std::__1::char_traits<char> >-in-std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
construction vtable for std::__1::basic_ostream<char, std::__1::char_traits<char> >-in-std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
construction vtable for std::__1::basic_ostream<char, std::__1::char_traits<char> >-in-std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
constructor argument does not have a type
constructor can't be a structure definition
constructor does not have any arguments
containing OpTypeRuntimeArray must have storage class of
contains an array with stride
contains an array with stride 0
contains members with BuiltIn decoration. Therefore this
contains structure <id>
context-insensitive value
continue
continue statement only allowed in loops
continue target
convert-local-access-chains
convertComponent(f1;
convertComponent(i1;
convertComponent(u1;
convert_to_half_pass.cpp
coopMatLoadNV
coopMatMulAddNV
coopMatStoreNV
coordTemp
copy object
copyImage
copyImageToLUMAWorkaroundTexture
copySubImageToLUMAWorkaroundTexture
copySubTextureCPUReadback
copySubTextureImpl
copy_prop_arrays.cpp
copyimage.cpp
copysign
core
corresponding member type of Result Type struct
cos
cosf
coshf
could not create assignment
countLeadingZeros
countTrailingZeros
countbits
cpu_check_inited_once
cpu_features.c
crc32.c
crc32_simd.c
crc_folding.c
crc_table
createContext
createSurfaceVk
createSwapChain
cross
cross product
cross(20B20B
cross(20C20C
cross-product
crtstuff.c
ctx must be EGL_NO_CONTEXT.
ctz
cubeFaceCoord
cubeFaceCoordAMD
cubeFaceIndex
cubeFaceIndexAMD
currentTime
cv&
cw7
cxa_aux_runtime.cpp
cxa_default_handlers.cpp
cxa_demangle.cpp
cxa_exception.cpp
cxa_exception_storage.cpp
cxa_guard.cpp
cxa_handlers.cpp
cxa_personality.cpp
cxa_thread_atexit.cpp
cxa_unexpected.cpp
cxa_vector.cpp
cxa_virtual.cpp
czG
d
d$>
d%=
d6
d7
d8
d>
dCompareExchangegl_BackSecondaryZ
dFdx
dFdx(00B
dFdx(10B
dFdx(20B
dFdx(30B
dFdxCoarse
dFdxCoarse(00B
dFdxCoarse(10B
dFdxCoarse(20B
dFdxCoarse(30B
dFdxFine
dFdxFine(00B
dFdxFine(10B
dFdxFine(20B
dFdxFine(30B
dFdy
dFdy(00B
dFdy(10B
dFdy(20B
dFdy(30B
dFdyCoarse
dFdyCoarse(00B
dFdyCoarse(10B
dFdyCoarse(20B
dFdyCoarse(30B
dFdyFine
dFdyFine(00B
dFdyFine(10B
dFdyFine(20B
dFdyFine(30B
dGG
dI0
dPdx
dPdxCoarse
dPdxFine
dPdy
dPdyCoarse
dPdyFine
dS5
dUVdx
dUVdy
dWH
dY0
d[
d[E
d^5
da[
dary_view_offsetle
data error
dataSize is too small
ddx
ddx_coarse
ddx_fine
ddy
ddy_coarse
ddy_fine
dead_branch_elim_pass.cpp
dead_insert_elim_pass.cpp
dead_variable_elimination.cpp
debug
debug pragma syntax is incorrect
debug.cpp
debugPrintfEXT
debug_info_manager.cpp
debuginfo_entries
declaration in annotation
declaration list
declaration_statement
declarations)
decode_encode_srgb_for_generatemipmap
decompose_initialized_variables_pass.cpp
decorated as
decoration applied to a non-object
decoration applied to a value with void type
decoration applied to an object with invalid type
decoration may not be applied to
decoration on a non-struct type.
decoration targeting
decoration_manager.cpp
def_use_manager.cpp
default
default labels need to be inside switch statements
default qualifier requires 'uniform', 'buffer', 'in', or 'out' storage qualification
default:
defaultChannelsMask
defaultUniformsCS
defaultUniformsFS
defaultUniformsGS
defaultUniformsVS
define
defined
defined in block
definition does not dominate its parent
deflate.c
deflate_fast
deflate_slow
deflate_stored
degenerate cases of merge-block or continue-target.
degrees
degrees(00B
degrees(10B
degrees(20B
degrees(30B
demote
demote_statement
denominator is null
dependency_infinite
dependency_length
depends on
deprecated behavior
deprecated in version
deprecated, may be removed in future release
depth
depth layout qualifier
depthRange
depth_any
depth_greater
depth_less
depth_unchanged
deregister_tm_clones
derivative_group_
derivative_group_quadsNV
derivative_group_quadsNV and derivative_group_linearNV
desc_sroa.cpp
descriptor set
dest
destData
destDefaultChannelsMask
destHasLuminance
destIsAlpha
destIsSRGB
destOffset
destPitch
destSubImageCoords
destValue
determinant
determinant(50B
determinant(A0B
determinant(F0B
device is EGL_NO_DEVICE.
device is not valid.
deviceWaitIdle
devicecoherent
dg,
diagnostic.cpp
did not find an member index to get underlying data type for struct type.
diff
dimension mismatch
dimension out of bounds
dimensionality
direct index for interface block
directive must end with a newline
disable
disable_blend_func_extended
disable_draw_buffers_indexed
disable_fifo_present_mode
disable_flipping_blit_with_command
disable_gpu_switching_support
disable_native_parallel_compile
disable_program_caching_for_transform_feedback
disable_semaphore_fd
disable_timestamp_queries
disable_worker_contexts
disabled
disallow_seamful_cube_map_emulation
disallowed type in struct
disassemble.cpp
discard
discard supported in fragment shaders only
discard;
display had a context loss
display is EGL_NO_DISPLAY.
display is not a valid display.
display is not initialized.
distance(00B00B
distance(00C00C
distance(10B10B
distance(10C10C
distance(20B20B
distance(20C20C
distance(30B30B
distance(30C30C
divide second child into first child
division by 0
division by zero
divisor
dlerror
dlopen
dlsym
dmat2x2
dmat3x3
dmat4x4
do
do not match.
do sub-statement
do-while loops not available
do_while_glsl_causes_gpu_hang
doc.cpp
does not apply to floating point images
does not apply to signed integer images
does not apply to this type:
does not apply to unsigned integer images
does not consume all varyings generated by
does not dominate
does not dominate its case construct
does not dominate its use in block
does not exist in the vertex shader.
does not generate all varyings consumed by
does not have a
does not match any
does not match incoming value <id>
does not meet this requirement.
does not operate on this type:
does not operate on types containing (u)int16
does not operate on types containing (u)int8
does not operate on types containing float16
does not reference an OpExtInstImport result Id
does not strictly dominate
does_srgb_clears_on_linear_framebuffer_attachments
dominator_analysis.cpp
dominator_tree.cpp
dont_initialize_uninitialized_locals
dont_relink_programs_in_parallel
dont_unroll
dont_use_loops_to_initialize_variables
dot
dot product
dot(00B00B
dot(00C00C
dot(10B10B
dot(10C10C
dot(20B20B
dot(20C20C
dot(30B30B
dot(30C30C
dot-product
double floating-point suffix
double fma(double, double, double);dvec2  fma(dvec2,  dvec2,  dvec2 );dvec3  fma(dvec3,  dvec3,  dvec3 );dvec4  fma(dvec4,  dvec4,  dvec4 );
double frexp(double, out int);dvec2  frexp( dvec2, out ivec2);dvec3  frexp( dvec3, out ivec3);dvec4  frexp( dvec4, out ivec4);double ldexp(double, int);dvec2  ldexp( dvec2, ivec2);dvec3  ldexp( dvec3, ivec3);dvec4  ldexp( dvec4, ivec4);double packDouble2x32(uvec2);uvec2 unpackDouble2x32(double);
double literal
double matrix
double sqrt(double);dvec2  sqrt(dvec2);dvec3  sqrt(dvec3);dvec4  sqrt(dvec4);double inversesqrt(double);dvec2  inversesqrt(dvec2);dvec3  inversesqrt(dvec3);dvec4  inversesqrt(dvec4);double abs(double);dvec2  abs(dvec2);dvec3  abs(dvec3);dvec4  abs(dvec4);double sign(double);dvec2  sign(dvec2);dvec3  sign(dvec3);dvec4  sign(dvec4);double floor(double);dvec2  floor(dvec2);dvec3  floor(dvec3);dvec4  floor(dvec4);double trunc(double);dvec2  trunc(dvec2);dvec3  trunc(dvec3);dvec4  trunc(dvec4);double round(double);dvec2  round(dvec2);dvec3  round(dvec3);dvec4  round(dvec4);double roundEven(double);dvec2  roundEven(dvec2);dvec3  roundEven(dvec3);dvec4  roundEven(dvec4);double ceil(double);dvec2  ceil(dvec2);dvec3  ceil(dvec3);dvec4  ceil(dvec4);double fract(double);dvec2  fract(dvec2);dvec3  fract(dvec3);dvec4  fract(dvec4);double mod(double, double);dvec2  mod(dvec2 , double);dvec3  mod(dvec3 , double);dvec4  mod(dvec4 , double);dvec2  mod(dvec2 , dvec2);dvec3  mod(dvec3 , dvec3);dvec4  mod(dvec4 , dvec4);double modf(double, out double);dvec2  modf(dvec2,  out dvec2);dvec3  modf(dvec3,  out dvec3);dvec4  modf(dvec4,  out dvec4);double min(double, double);dvec2  min(dvec2,  double);dvec3  min(dvec3,  double);dvec4  min(dvec4,  double);dvec2  min(dvec2,  dvec2);dvec3  min(dvec3,  dvec3);dvec4  min(dvec4,  dvec4);double max(double, double);dvec2  max(dvec2 , double);dvec3  max(dvec3 , double);dvec4  max(dvec4 , double);dvec2  max(dvec2 , dvec2);dvec3  max(dvec3 , dvec3);dvec4  max(dvec4 , dvec4);double clamp(double, double, double);dvec2  clamp(dvec2 , double, double);dvec3  clamp(dvec3 , double, double);dvec4  clamp(dvec4 , double, double);dvec2  clamp(dvec2 , dvec2 , dvec2);dvec3  clamp(dvec3 , dvec3 , dvec3);dvec4  clamp(dvec4 , dvec4 , dvec4);double mix(double, double, double);dvec2  mix(dvec2,  dvec2,  double);dvec3  mix(dvec3,  dvec3,  double);dvec4  mix(dvec4,  dvec4,  double);dvec2  mix(dvec2,  dvec2,  dvec2);dvec3  mix(dvec3,  dvec3,  dvec3);dvec4  mix(dvec4,  dvec4,  dvec4);double mix(double, double, bool);dvec2  mix(dvec2,  dvec2,  bvec2);dvec3  mix(dvec3,  dvec3,  bvec3);dvec4  mix(dvec4,  dvec4,  bvec4);double step(double, double);dvec2  step(dvec2 , dvec2);dvec3  step(dvec3 , dvec3);dvec4  step(dvec4 , dvec4);dvec2  step(double, dvec2);dvec3  step(double, dvec3);dvec4  step(double, dvec4);double smoothstep(double, double, double);dvec2  smoothstep(dvec2 , dvec2 , dvec2);dvec3  smoothstep(dvec3 , dvec3 , dvec3);dvec4  smoothstep(dvec4 , dvec4 , dvec4);dvec2  smoothstep(double, double, dvec2);dvec3  smoothstep(double, double, dvec3);dvec4  smoothstep(double, double, dvec4);bool  isnan(double);bvec2 isnan(dvec2);bvec3 isnan(dvec3);bvec4 isnan(dvec4);bool  isinf(double);bvec2 isinf(dvec2);bvec3 isinf(dvec3);bvec4 isinf(dvec4);double length(double);double length(dvec2);double length(dvec3);double length(dvec4);double distance(double, double);double distance(dvec2 , dvec2);double distance(dvec3 , dvec3);double distance(dvec4 , dvec4);double dot(double, double);double dot(dvec2 , dvec2);double dot(dvec3 , dvec3);double dot(dvec4 , dvec4);dvec3 cross(dvec3, dvec3);double normalize(double);dvec2  normalize(dvec2);dvec3  normalize(dvec3);dvec4  normalize(dvec4);double faceforward(double, double, double);dvec2  faceforward(dvec2,  dvec2,  dvec2);dvec3  faceforward(dvec3,  dvec3,  dvec3);dvec4  faceforward(dvec4,  dvec4,  dvec4);double reflect(double, double);dvec2  reflect(dvec2 , dvec2 );dvec3  reflect(dvec3 , dvec3 );dvec4  reflect(dvec4 , dvec4 );double refract(double, double, double);dvec2  refract(dvec2 , dvec2 , double);dvec3  refract(dvec3 , dvec3 , double);dvec4  refract(dvec4 , dvec4 , double);dmat2 matrixCompMult(dmat2, dmat2);dmat3 matrixCompMult(dmat3, dmat3);dmat4 matrixCompMult(dmat4, dmat4);dmat2x3 matrixCompMult(dmat2x3, dmat2x3);dmat2x4 matrixCompMult(dmat2x4, dmat2x4);dmat3x2 matrixCompMult(dmat3x2, dmat3x2);dmat3x4 matrixCompMult(dmat3x4, dmat3x4);dmat4x2 matrixCompMult(dmat4x2, dmat4x2);dmat4x3 matrixCompMult(dmat4x3, dmat4x3);dmat2   outerProduct(dvec2, dvec2);dmat3   outerProduct(dvec3, dvec3);dmat4   outerProduct(dvec4, dvec4);dmat2x3 outerProduct(dvec3, dvec2);dmat3x2 outerProduct(dvec2, dvec3);dmat2x4 outerProduct(dvec4, dvec2);dmat4x2 outerProduct(dvec2, dvec4);dmat3x4 outerProduct(dvec4, dvec3);dmat4x3 outerProduct(dvec3, dvec4);dmat2   transpose(dmat2);dmat3   transpose(dmat3);dmat4   transpose(dmat4);dmat2x3 transpose(dmat3x2);dmat3x2 transpose(dmat2x3);dmat2x4 transpose(dmat4x2);dmat4x2 transpose(dmat2x4);dmat3x4 transpose(dmat4x3);dmat4x3 transpose(dmat3x4);double determinant(dmat2);double determinant(dmat3);double determinant(dmat4);dmat2 inverse(dmat2);dmat3 inverse(dmat3);dmat4 inverse(dmat4);bvec2 lessThan(dvec2, dvec2);bvec3 lessThan(dvec3, dvec3);bvec4 lessThan(dvec4, dvec4);bvec2 lessThanEqual(dvec2, dvec2);bvec3 lessThanEqual(dvec3, dvec3);bvec4 lessThanEqual(dvec4, dvec4);bvec2 greaterThan(dvec2, dvec2);bvec3 greaterThan(dvec3, dvec3);bvec4 greaterThan(dvec4, dvec4);bvec2 greaterThanEqual(dvec2, dvec2);bvec3 greaterThanEqual(dvec3, dvec3);bvec4 greaterThanEqual(dvec4, dvec4);bvec2 equal(dvec2, dvec2);bvec3 equal(dvec3, dvec3);bvec4 equal(dvec4, dvec4);bvec2 notEqual(dvec2, dvec2);bvec3 notEqual(dvec3, dvec3);bvec4 notEqual(dvec4, dvec4);
double std::__1::__num_get_float<double>(char const*, char const*, unsigned int&)
double vector
double1
double1x1
double1x2
double1x3
double1x4
double2
double2 conversion not implemented
double2x1
double2x2
double2x3
double2x4
double3
double3x1
double3x2
double3x3
double3x4
double4
double4x1
double4x2
double4x3
double4x4
doubleBitsToInt64
doubleBitsToUint64
doubles cannot start on an odd-numbered component
draw_texture_coords
draw_texture_dims
draw_texture_normalized_crop_rect
driver_utils.cpp
dst
dstCmd
dstCmdData
dstCmdOffsetDiv4
dstData
dstDataOffsetDiv4
dstIndexBuf
dstIndexBufOffsetDiv4
dstIndirect
dstIndirectBuf
dstIndirectBufOffsetDiv4
dstOffsetDiv4
dt:
dtG
dup
duplicate case label
duplicate default label
duplicate field name in structure
duplicate function prototype declarations are not allowed
duplicate label
duplicate macro parameter
duplicate macro parameter name
duplicate member name:
duplicated value
dword
dyn_index_
dz5
dzB
d|G
d|O
e
e">
e"Y
e->
e7
e8
e8>
e?F
eAD
eG
eS5
e_group_linearnvX
early_fragment_ttriangles_adjaceshPerPrimitiveNV
egl::(anonymous namespace)::Display_logError(angle::PlatformMethods*, char const*)
egl::(anonymous namespace)::Display_logInfo(angle::PlatformMethods*, char const*)
egl::(anonymous namespace)::Display_logWarning(angle::PlatformMethods*, char const*)
egl::(anonymous namespace)::GetANGLEPlatformDisplayMap()::displays
egl::(anonymous namespace)::GetDevicePlatformDisplayMap()::displays
egl::(anonymous namespace)::GetWindowSurfaces()::windowSurfaces
egl::(anonymous namespace)::ValidateColorspaceAttribute(egl::DisplayExtensions const&, long)
egl::(anonymous namespace)::ValidateConfigAttribute(egl::Display const*, long)
egl::(anonymous namespace)::ValidateCreateImageMipLevelCommon(gl::Context*, gl::Texture const*, long)
egl::(anonymous namespace)::ValidateDisplayPointer(egl::Display const*)
egl::(anonymous namespace)::ValidateGetPlatformDisplayCommon(unsigned int, void*, egl::AttributeMap const&)
egl::(anonymous namespace)::ValidateLabeledObject(egl::Thread*, egl::Display const*, egl::ObjectType, void*, egl::LabeledObject**)
egl::(anonymous namespace)::ValidateStream(egl::Display const*, egl::Stream const*)
egl::(anonymous namespace)::ValidateStreamAttribute(long, long, egl::DisplayExtensions const&)
egl::(anonymous namespace)::g_Debug
egl::(anonymous namespace)::g_Mutex
egl::(anonymous namespace)::threadTLS
egl::AttributeMap::AttributeMap()
egl::AttributeMap::AttributeMap(egl::AttributeMap const&)
egl::AttributeMap::CreateFromAttribArray(long const*)
egl::AttributeMap::CreateFromIntArray(int const*)
egl::AttributeMap::begin() const
egl::AttributeMap::contains(long) const
egl::AttributeMap::end() const
egl::AttributeMap::get(long) const
egl::AttributeMap::get(long, long) const
egl::AttributeMap::getAsInt(long) const
egl::AttributeMap::getAsInt(long, int) const
egl::AttributeMap::insert(long, long)
egl::AttributeMap::isEmpty() const
egl::AttributeMap::~AttributeMap()
egl::BlobCache::BlobCache(unsigned long)
egl::BlobCache::areBlobCacheFuncsSet() const
egl::BlobCache::get(angle::ScratchBuffer*, std::__1::array<unsigned char, 20ul> const&, egl::BlobCache::Value*, unsigned long*)
egl::BlobCache::getAt(unsigned long, std::__1::array<unsigned char, 20ul> const**, egl::BlobCache::Value*)
egl::BlobCache::populate(std::__1::array<unsigned char, 20ul> const&, angle::MemoryBuffer&&, egl::BlobCache::CacheSource)
egl::BlobCache::put(std::__1::array<unsigned char, 20ul> const&, angle::MemoryBuffer&&)
egl::BlobCache::putApplication(std::__1::array<unsigned char, 20ul> const&, angle::MemoryBuffer const&)
egl::BlobCache::remove(std::__1::array<unsigned char, 20ul> const&)
egl::BlobCache::setBlobCacheFuncs(void (*)(void const*, long, void const*, long), long (*)(void const*, long, void*, long))
egl::BlobCache::~BlobCache()
egl::Caps::Caps()
egl::ClientExtensions::ClientExtensions()
egl::ClientExtensions::getStrings() const
egl::CompositorTiming egl::FromEGLenum<egl::CompositorTiming>(unsigned int)
egl::Config::Config()
egl::Config::Config(egl::Config const&)
egl::Config::~Config()
egl::ConfigSet::ConfigSet()
egl::ConfigSet::add(egl::Config const&)
egl::ConfigSet::begin()
egl::ConfigSet::clear()
egl::ConfigSet::contains(egl::Config const*) const
egl::ConfigSet::end()
egl::ConfigSet::filter(egl::AttributeMap const&) const
egl::ConfigSet::operator=(egl::ConfigSet const&)
egl::ConfigSet::size() const
egl::ConfigSet::~ConfigSet()
egl::ConfigSorter::operator()(egl::Config const&, egl::Config const&) const
egl::ContextPriority egl::FromEGLenum<egl::ContextPriority>(unsigned int)
egl::CubeMapTextureTargetToLayerIndex(unsigned int)
egl::Debug::Debug()
egl::Debug::getCallback() const
egl::Debug::insertMessage(unsigned int, char const*, egl::MessageType, void*, void*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
egl::Debug::isMessageTypeEnabled(egl::MessageType) const
egl::Debug::setCallback(void (*)(unsigned int, char const*, int, void*, void*, char const*), egl::AttributeMap const&)
egl::Device::CreateDevice(int, void*, egl::Device**)
egl::Device::Device(egl::Display*, rx::DeviceImpl*)
egl::Device::IsValidDevice(egl::Device const*)
egl::Device::getAttribute(int, long*)
egl::Device::getExtensionString() const
egl::Device::getExtensions() const
egl::Device::getLabel() const
egl::Device::getType()
egl::Device::initDeviceExtensions()
egl::Device::setLabel(void*)
egl::Device::~Device()
egl::DeviceExtensions::DeviceExtensions()
egl::DeviceExtensions::getStrings() const
egl::Display::Display(unsigned int, _XDisplay*, egl::Device*)
egl::Display::GetClientExtensionString()
egl::Display::GetClientExtensionString()::clientExtensionsString
egl::Display::GetClientExtensions()
egl::Display::GetClientExtensions()::clientExtensions
egl::Display::GetDisplayFromDevice(egl::Device*, egl::AttributeMap const&)
egl::Display::GetDisplayFromNativeDisplay(_XDisplay*, egl::AttributeMap const&)
egl::Display::GetNativeClientBuffer(AHardwareBuffer const*)
egl::Display::chooseConfig(egl::AttributeMap const&) const
egl::Display::createContext(egl::Config const*, gl::Context*, unsigned int, egl::AttributeMap const&, gl::Context**)
egl::Display::createImage(gl::Context const*, unsigned int, void*, egl::AttributeMap const&, egl::Image**)
egl::Display::createPbufferFromClientBuffer(egl::Config const*, unsigned int, void*, egl::AttributeMap const&, egl::Surface**)
egl::Display::createPbufferSurface(egl::Config const*, egl::AttributeMap const&, egl::Surface**)
egl::Display::createPixmapSurface(egl::Config const*, unsigned long, egl::AttributeMap const&, egl::Surface**)
egl::Display::createStream(egl::AttributeMap const&, egl::Stream**)
egl::Display::createSync(gl::Context const*, unsigned int, egl::AttributeMap const&, egl::Sync**)
egl::Display::createWindowSurface(egl::Config const*, unsigned long, egl::AttributeMap const&, egl::Surface**)
egl::Display::destroyContext(egl::Thread const*, gl::Context*)
egl::Display::destroyImage(egl::Image*)
egl::Display::destroyStream(egl::Stream*)
egl::Display::destroySurface(egl::Surface*)
egl::Display::destroySync(egl::Sync*)
egl::Display::getCaps() const
egl::Display::getConfigs(egl::AttributeMap const&) const
egl::Display::getExtensionString() const
egl::Display::getExtensions() const
egl::Display::getLabel() const
egl::Display::getMaxSupportedESVersion() const
egl::Display::getVendorString() const
egl::Display::handleGPUSwitch()
egl::Display::hasExistingWindowSurface(unsigned long)
egl::Display::initDisplayExtensions()
egl::Display::initialize
egl::Display::initialize()
egl::Display::initialize()::trace_event_unique_catstatic784
egl::Display::isDeviceLost() const
egl::Display::isInitialized() const
egl::Display::isValidConfig(egl::Config const*) const
egl::Display::isValidContext(gl::Context const*) const
egl::Display::isValidDisplay(egl::Display const*)
egl::Display::isValidImage(egl::Image const*) const
egl::Display::isValidNativeWindow(unsigned long) const
egl::Display::isValidStream(egl::Stream const*) const
egl::Display::isValidSurface(egl::Surface const*) const
egl::Display::isValidSync(egl::Sync const*) const
egl::Display::makeCurrent(egl::Thread const*, egl::Surface*, egl::Surface*, gl::Context*)
egl::Display::notifyDeviceLost()
egl::Display::onSubjectStateChange(unsigned long, angle::SubjectMessage)
egl::Display::programCacheGetAttrib(unsigned int) const
egl::Display::programCachePopulate(void const*, int, void const*, int)
egl::Display::programCacheQuery(int, void*, int*, void*, int*)
egl::Display::programCacheResize(int, unsigned int)
egl::Display::queryAttrib(int)
egl::Display::queryStringi(int, int)
egl::Display::requestScratchBuffer()
egl::Display::requestZeroFilledBuffer()
egl::Display::restoreLostDevice()
egl::Display::returnScratchBuffer(angle::ScratchBuffer)
egl::Display::returnZeroFilledBuffer(angle::ScratchBuffer)
egl::Display::setBlobCacheFuncs(void (*)(void const*, long, void const*, long), long (*)(void const*, long, void*, long))
egl::Display::setLabel(void*)
egl::Display::setupDisplayPlatform(rx::DisplayImpl*)
egl::Display::terminate(egl::Thread const*)
egl::Display::testDeviceLost()
egl::Display::updateAttribsFromEnvironment(egl::AttributeMap const&)
egl::Display::valdiatePixmap(egl::Config*, unsigned long, egl::AttributeMap const&) const
egl::Display::validateClientBuffer(egl::Config const*, unsigned int, void*, egl::AttributeMap const&) const
egl::Display::validateImageClientBuffer(gl::Context const*, unsigned int, void*, egl::AttributeMap const&) const
egl::Display::waitClient(gl::Context const*)
egl::Display::waitNative(gl::Context const*, int)
egl::Display::~Display()
egl::DisplayExtensions::DisplayExtensions()
egl::DisplayExtensions::getStrings() const
egl::DisplayState::~DisplayState()
egl::Error::Error(int, int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)
egl::Error::Error(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)
egl::Error::createMessageString() const
egl::Error::getMessage() const
egl::ErrorCodeToMessageType(int)
egl::ExternalImageSibling::ExternalImageSibling(rx::EGLImplFactory*, gl::Context const*, unsigned int, void*, egl::AttributeMap const&)
egl::ExternalImageSibling::getAttachmentFormat(unsigned int, gl::ImageIndex const&) const
egl::ExternalImageSibling::getAttachmentImpl() const
egl::ExternalImageSibling::getAttachmentSamples(gl::ImageIndex const&) const
egl::ExternalImageSibling::getAttachmentSize(gl::ImageIndex const&) const
egl::ExternalImageSibling::getId() const
egl::ExternalImageSibling::getImplementation() const
egl::ExternalImageSibling::initState(gl::ImageIndex const&) const
egl::ExternalImageSibling::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
egl::ExternalImageSibling::onAttach(gl::Context const*)
egl::ExternalImageSibling::onDetach(gl::Context const*)
egl::ExternalImageSibling::onSubjectStateChange(unsigned long, angle::SubjectMessage)
egl::ExternalImageSibling::setInitState(gl::ImageIndex const&, gl::InitState)
egl::ExternalImageSibling::~ExternalImageSibling()
egl::GetContextIfValid(egl::Display const*, gl::Context const*)
egl::GetCurrentThread()
egl::GetDebug()
egl::GetDeviceIfValid(egl::Device const*)
egl::GetDeviceSet()::devices
egl::GetDisplayIfValid(egl::Display const*)
egl::GetGenericErrorMessage(int)
egl::GetGlobalMutex()
egl::GetImageIfValid(egl::Display const*, egl::Image const*)
egl::GetLabeledObjectIfValid(egl::Thread*, egl::Display const*, egl::ObjectType, void*)
egl::GetStreamIfValid(egl::Display const*, egl::Stream const*)
egl::GetSurfaceIfValid(egl::Display const*, egl::Surface const*)
egl::GetSyncAttrib(egl::Display*, egl::Sync*, int, int*)
egl::GetSyncIfValid(egl::Display const*, egl::Sync const*)
egl::GetThreadIfValid(egl::Thread const*)
egl::Image::Image(rx::EGLImplFactory*, gl::Context const*, unsigned int, egl::ImageSibling*, egl::AttributeMap const&)
egl::Image::getFormat() const
egl::Image::getHeight() const
egl::Image::getImplementation() const
egl::Image::getLabel() const
egl::Image::getSamples() const
egl::Image::getWidth() const
egl::Image::initialize(egl::Display const*)
egl::Image::isLayered() const
egl::Image::isRenderable(gl::Context const*) const
egl::Image::isTexturable(gl::Context const*) const
egl::Image::onDestroy(egl::Display const*)
egl::Image::orphanSibling(gl::Context const*, egl::ImageSibling*)
egl::Image::setLabel(void*)
egl::Image::sourceInitState() const
egl::Image::~Image()
egl::ImageSibling::ImageSibling()
egl::ImageSibling::isEGLImageTarget() const
egl::ImageSibling::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
egl::ImageSibling::notifySiblings(angle::SubjectMessage)
egl::ImageSibling::orphanImages(gl::Context const*)
egl::ImageSibling::setSourceEGLImageInitState(gl::InitState) const
egl::ImageSibling::setTargetImage(gl::Context const*, egl::Image*)
egl::ImageSibling::sourceEGLImageInitState() const
egl::ImageSibling::~ImageSibling()
egl::ImageState::ImageState(unsigned int, egl::ImageSibling*, egl::AttributeMap const&)
egl::IsExternalImageTarget(unsigned int)
egl::IsRenderbufferTarget(unsigned int)
egl::IsTextureTarget(unsigned int)
egl::LabeledObject::~LabeledObject()
egl::MessageType egl::FromEGLenum<egl::MessageType>(unsigned int)
egl::ObjectType egl::FromEGLenum<egl::ObjectType>(unsigned int)
egl::PbufferSurface::PbufferSurface(rx::EGLImplFactory*, egl::Config const*, egl::AttributeMap const&)
egl::PbufferSurface::PbufferSurface(rx::EGLImplFactory*, egl::Config const*, unsigned int, void*, egl::AttributeMap const&)
egl::PbufferSurface::~PbufferSurface()
egl::PixmapSurface::PixmapSurface(rx::EGLImplFactory*, egl::Config const*, unsigned long, egl::AttributeMap const&)
egl::PixmapSurface::~PixmapSurface()
egl::QueryConfigAttrib(egl::Config const*, int, int*)
egl::QueryContextAttrib(gl::Context const*, int, int*)
egl::QuerySurfaceAttrib(egl::Display const*, egl::Surface const*, int, int*)
egl::SetContextCurrent(egl::Thread*, gl::Context*)
egl::SetSurfaceAttrib(egl::Surface*, int, int)
egl::ShareGroup::ShareGroup(rx::EGLImplFactory*)
egl::ShareGroup::addRef()
egl::ShareGroup::release(gl::Context const*)
egl::Stream::Stream(egl::Display*, egl::AttributeMap const&)
egl::Stream::consumerAcquire(gl::Context const*)
egl::Stream::consumerRelease(gl::Context const*)
egl::Stream::createConsumerGLTextureExternal(egl::AttributeMap const&, gl::Context*)
egl::Stream::createProducerD3D11Texture(egl::AttributeMap const&)
egl::Stream::getConsumerAcquireTimeout() const
egl::Stream::getConsumerFrame() const
egl::Stream::getConsumerLatency() const
egl::Stream::getConsumerType() const
egl::Stream::getLabel() const
egl::Stream::getPlaneCount() const
egl::Stream::getProducerFrame() const
egl::Stream::getProducerType() const
egl::Stream::getState() const
egl::Stream::isConsumerBoundToContext(gl::Context const*) const
egl::Stream::postD3D11Texture(void*, egl::AttributeMap const&)
egl::Stream::releaseTextures()
egl::Stream::setConsumerAcquireTimeout(int)
egl::Stream::setConsumerLatency(int)
egl::Stream::setLabel(void*)
egl::Stream::validateD3D11Texture(void*, egl::AttributeMap const&) const
egl::Stream::~Stream()
egl::Surface::Surface(int, egl::Config const*, egl::AttributeMap const&, unsigned int)
egl::Surface::bindTexImage(gl::Context*, gl::Texture*, int)
egl::Surface::createDefaultFramebuffer(gl::Context const*, egl::Surface*)
egl::Surface::getAttachmentFormat(unsigned int, gl::ImageIndex const&) const
egl::Surface::getAttachmentImpl() const
egl::Surface::getAttachmentSamples(gl::ImageIndex const&) const
egl::Surface::getAttachmentSize(gl::ImageIndex const&) const
egl::Surface::getCompositorTiming(int, int const*, long*) const
egl::Surface::getConfig() const
egl::Surface::getFrameTimestamps(unsigned long, int, int const*, long*) const
egl::Surface::getGLColorspace() const
egl::Surface::getHeight() const
egl::Surface::getHorizontalResolution() const
egl::Surface::getId() const
egl::Surface::getLabel() const
egl::Surface::getLargestPbuffer() const
egl::Surface::getMipmapLevel() const
egl::Surface::getMipmapTexture() const
egl::Surface::getMscRate(int*, int*)
egl::Surface::getMultisampleResolve() const
egl::Surface::getNextFrameId(unsigned long*) const
egl::Surface::getPixelAspectRatio() const
egl::Surface::getRenderBuffer() const
egl::Surface::getSupportedCompositorTimings() const
egl::Surface::getSupportedTimestamps() const
egl::Surface::getSwapBehavior() const
egl::Surface::getSyncValues(unsigned long*, unsigned long*, unsigned long*)
egl::Surface::getTextureFormat() const
egl::Surface::getTextureTarget() const
egl::Surface::getType() const
egl::Surface::getUserHeight(egl::Display const*, int*) const
egl::Surface::getUserWidth(egl::Display const*, int*) const
egl::Surface::getVGAlphaFormat() const
egl::Surface::getVGColorspace() const
egl::Surface::getVerticalResolution() const
egl::Surface::getWidth() const
egl::Surface::initState(gl::ImageIndex const&) const
egl::Surface::initialize(egl::Display const*)
egl::Surface::isFixedSize() const
egl::Surface::isPostSubBufferSupported() const
egl::Surface::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
egl::Surface::isTimestampsEnabled() const
egl::Surface::makeCurrent(gl::Context const*)
egl::Surface::onAttach(gl::Context const*)
egl::Surface::onDestroy(egl::Display const*)
egl::Surface::onDetach(gl::Context const*)
egl::Surface::onSubjectStateChange(unsigned long, angle::SubjectMessage)
egl::Surface::postSubBuffer(gl::Context const*, int, int, int, int)
egl::Surface::querySurfacePointerANGLE(int, void**)
egl::Surface::releaseTexImage(gl::Context const*, int)
egl::Surface::releaseTexImageFromTexture(gl::Context const*)
egl::Surface::setFixedHeight(int)
egl::Surface::setFixedWidth(int)
egl::Surface::setInitState(gl::ImageIndex const&, gl::InitState)
egl::Surface::setLabel(void*)
egl::Surface::setMipmapLevel(int)
egl::Surface::setMultisampleResolve(unsigned int)
egl::Surface::setPresentationTime(long)
egl::Surface::setSwapBehavior(unsigned int)
egl::Surface::setSwapInterval(int)
egl::Surface::setTimestampsEnabled(bool)
egl::Surface::swap
egl::Surface::swap(gl::Context const*)
egl::Surface::swap(gl::Context const*)::trace_event_unique_catstatic280
egl::Surface::swapWithDamage(gl::Context const*, int*, int)
egl::Surface::swapWithFrameToken(gl::Context const*, unsigned long)
egl::Surface::unMakeCurrent(gl::Context const*)
egl::Surface::~Surface()
egl::SurfaceDeleter::SurfaceDeleter(egl::Display const*)
egl::SurfaceDeleter::operator()(egl::Surface*)
egl::SurfaceDeleter::~SurfaceDeleter()
egl::Sync::Sync(rx::EGLImplFactory*, unsigned int, egl::AttributeMap const&)
egl::Sync::clientWait(egl::Display const*, gl::Context const*, int, unsigned long, int*)
egl::Sync::dupNativeFenceFD(egl::Display const*, int*) const
egl::Sync::getLabel() const
egl::Sync::getStatus(egl::Display const*, int*) const
egl::Sync::initialize(egl::Display const*, gl::Context const*)
egl::Sync::onDestroy(egl::Display const*)
egl::Sync::serverWait(egl::Display const*, gl::Context const*, int)
egl::Sync::setLabel(void*)
egl::Sync::~Sync()
egl::TextureFormat egl::FromEGLenum<egl::TextureFormat>(unsigned int)
egl::Thread::Thread()
egl::Thread::getAPI() const
egl::Thread::getContext() const
egl::Thread::getCurrentDrawSurface() const
egl::Thread::getCurrentReadSurface() const
egl::Thread::getDisplay() const
egl::Thread::getError() const
egl::Thread::getLabel() const
egl::Thread::getValidContext() const
egl::Thread::setAPI(unsigned int)
egl::Thread::setCurrent(gl::Context*)
egl::Thread::setError(egl::Error const&, egl::Debug const*, char const*, egl::LabeledObject const*)
egl::Thread::setLabel(void*)
egl::Thread::setSuccess()
egl::Thread::~Thread()
egl::Timestamp egl::FromEGLenum<egl::Timestamp>(unsigned int)
egl::ToEGLenum(egl::CompositorTiming)
egl::ToEGLenum(egl::ContextPriority)
egl::ToEGLenum(egl::MessageType)
egl::ToEGLenum(egl::TextureFormat)
egl::ToEGLenum(egl::Timestamp)
egl::ValidateBindAPI(unsigned int)
egl::ValidateBindTexImage(egl::Display const*, egl::Surface const*, void*, int, gl::Context const*, gl::Texture**)
egl::ValidateChooseConfig(egl::Display const*, egl::AttributeMap const&, int, int*)
egl::ValidateClientWaitSync(egl::Display const*, egl::Sync const*, int, unsigned long)
egl::ValidateCompatibleSurface(egl::Display const*, gl::Context*, egl::Surface const*)
egl::ValidateConfig(egl::Display const*, egl::Config const*)
egl::ValidateContext(egl::Display const*, gl::Context const*)
egl::ValidateCopyBuffers(egl::Display*, egl::Surface const*)
egl::ValidateCreateContext(egl::Display*, egl::Config*, gl::Context*, egl::AttributeMap const&)
egl::ValidateCreateDeviceANGLE(int, void*, long const*)
egl::ValidateCreateImage(egl::Display const*, gl::Context*, unsigned int, void*, egl::AttributeMap const&)
egl::ValidateCreateImageKHR(egl::Display const*, gl::Context*, unsigned int, void*, egl::AttributeMap const&)
egl::ValidateCreatePbufferFromClientBuffer(egl::Display*, unsigned int, void*, egl::Config*, egl::AttributeMap const&)
egl::ValidateCreatePbufferSurface(egl::Display*, egl::Config*, egl::AttributeMap const&)
egl::ValidateCreatePixmapSurface(egl::Display*, egl::Config*, unsigned long, egl::AttributeMap const&)
egl::ValidateCreatePlatformPixmapSurfaceEXT(egl::Display const*, egl::Config const*, void*, egl::AttributeMap const&)
egl::ValidateCreatePlatformWindowSurfaceEXT(egl::Display const*, egl::Config const*, void*, egl::AttributeMap const&)
egl::ValidateCreateStreamKHR(egl::Display const*, egl::AttributeMap const&)
egl::ValidateCreateStreamProducerD3DTextureANGLE(egl::Display const*, egl::Stream const*, egl::AttributeMap const&)
egl::ValidateCreateSync(egl::Display const*, unsigned int, egl::AttributeMap const&, egl::Display const*, gl::Context const*)
egl::ValidateCreateSyncBase(egl::Display const*, unsigned int, egl::AttributeMap const&, egl::Display const*, gl::Context const*, bool)
egl::ValidateCreateSyncKHR(egl::Display const*, unsigned int, egl::AttributeMap const&, egl::Display const*, gl::Context const*)
egl::ValidateCreateWindowSurface(egl::Display*, egl::Config*, unsigned long, egl::AttributeMap const&)
egl::ValidateDebugMessageControlKHR(void (*)(unsigned int, char const*, int, void*, void*, char const*), egl::AttributeMap const&)
egl::ValidateDestroyContext(egl::Display const*, gl::Context const*, void*)
egl::ValidateDestroyImage(egl::Display const*, egl::Image const*)
egl::ValidateDestroyImageKHR(egl::Display const*, egl::Image const*)
egl::ValidateDestroyStreamKHR(egl::Display const*, egl::Stream const*)
egl::ValidateDestroySurface(egl::Display const*, egl::Surface const*, void*)
egl::ValidateDestroySync(egl::Display const*, egl::Sync const*)
egl::ValidateDevice(egl::Device const*)
egl::ValidateDisplay(egl::Display const*)
egl::ValidateDupNativeFenceFDANDROID(egl::Display const*, egl::Sync const*)
egl::ValidateGetCompositorTimingANDROID(egl::Display const*, egl::Surface const*, int, int const*, long*)
egl::ValidateGetCompositorTimingSupportedANDROID(egl::Display const*, egl::Surface const*, egl::CompositorTiming)
egl::ValidateGetConfigAttrib(egl::Display const*, egl::Config const*, int)
egl::ValidateGetConfigs(egl::Display const*, int, int*)
egl::ValidateGetFrameTimestampSupportedANDROID(egl::Display const*, egl::Surface const*, egl::Timestamp)
egl::ValidateGetFrameTimestampsANDROID(egl::Display const*, egl::Surface const*, unsigned long, int, int const*, long*)
egl::ValidateGetMscRateANGLE(egl::Display const*, egl::Surface const*, int const*, int const*)
egl::ValidateGetNativeClientBufferANDROID(AHardwareBuffer const*)
egl::ValidateGetNextFrameIdANDROID(egl::Display const*, egl::Surface const*, unsigned long*)
egl::ValidateGetPlatformDisplay(unsigned int, void*, long const*)
egl::ValidateGetPlatformDisplayEXT(unsigned int, void*, int const*)
egl::ValidateGetSyncAttrib(egl::Display const*, egl::Sync const*, int, long*)
egl::ValidateGetSyncAttribBase(egl::Display const*, egl::Sync const*, int)
egl::ValidateGetSyncAttribKHR(egl::Display const*, egl::Sync const*, int, int*)
egl::ValidateGetSyncValuesCHROMIUM(egl::Display const*, egl::Surface const*, unsigned long const*, unsigned long const*, unsigned long const*)
egl::ValidateImage(egl::Display const*, egl::Image const*)
egl::ValidateInitialize(egl::Display const*)
egl::ValidateLabelObjectKHR(egl::Thread*, egl::Display const*, egl::ObjectType, void*, void*)
egl::ValidateMakeCurrent(egl::Display*, egl::Surface*, egl::Surface*, gl::Context*)
egl::ValidatePresentationTimeANDROID(egl::Display const*, egl::Surface const*, long)
egl::ValidateProgramCacheGetAttribANGLE(egl::Display const*, unsigned int)
egl::ValidateProgramCachePopulateANGLE(egl::Display const*, void const*, int, void const*, int)
egl::ValidateProgramCacheQueryANGLE(egl::Display const*, int, void*, int*, void*, int*)
egl::ValidateProgramCacheResizeANGLE(egl::Display const*, int, unsigned int)
egl::ValidateQueryContext(egl::Display const*, gl::Context const*, int, int*)
egl::ValidateQueryDebugKHR(int, long*)
egl::ValidateQueryDisplayAttribANGLE(egl::Display const*, int)
egl::ValidateQueryDisplayAttribBase(egl::Display const*, int)
egl::ValidateQueryDisplayAttribEXT(egl::Display const*, int)
egl::ValidateQueryStreamKHR(egl::Display const*, egl::Stream const*, unsigned int, int*)
egl::ValidateQueryStreamu64KHR(egl::Display const*, egl::Stream const*, unsigned int, unsigned long*)
egl::ValidateQueryStringiANGLE(egl::Display const*, int, int)
egl::ValidateQuerySurface(egl::Display const*, egl::Surface const*, int, int*)
egl::ValidateReleaseDeviceANGLE(egl::Device*)
egl::ValidateReleaseTexImage(egl::Display const*, egl::Surface const*, void*, int)
egl::ValidateSetBlobCacheANDROID(egl::Display const*, void (*)(void const*, long, void const*, long), long (*)(void const*, long, void*, long))
egl::ValidateStreamAttribKHR(egl::Display const*, egl::Stream const*, int, int)
egl::ValidateStreamConsumerAcquireKHR(egl::Display const*, gl::Context*, egl::Stream const*)
egl::ValidateStreamConsumerGLTextureExternalAttribsNV(egl::Display const*, gl::Context*, egl::Stream const*, egl::AttributeMap const&)
egl::ValidateStreamConsumerGLTextureExternalKHR(egl::Display const*, gl::Context*, egl::Stream const*)
egl::ValidateStreamConsumerReleaseKHR(egl::Display const*, gl::Context*, egl::Stream const*)
egl::ValidateStreamPostD3DTextureANGLE(egl::Display const*, egl::Stream const*, void*, egl::AttributeMap const&)
egl::ValidateSurface(egl::Display const*, egl::Surface const*)
egl::ValidateSurfaceAttrib(egl::Display const*, egl::Surface const*, int, int)
egl::ValidateSwapBuffers(egl::Thread*, egl::Display const*, egl::Surface const*)
egl::ValidateSwapBuffersWithDamageKHR(egl::Display const*, egl::Surface const*, int*, int)
egl::ValidateSwapBuffersWithFrameTokenANGLE(egl::Display const*, egl::Surface const*, unsigned long)
egl::ValidateSwapInterval(egl::Display const*, egl::Surface const*, gl::Context const*)
egl::ValidateSync(egl::Display const*, egl::Sync const*)
egl::ValidateSyncControlCHROMIUM(egl::Display const*, egl::Surface const*)
egl::ValidateSyncControlRateANGLE(egl::Display const*, egl::Surface const*)
egl::ValidateTerminate(egl::Display const*)
egl::ValidateWaitNative(egl::Display const*, int)
egl::ValidateWaitSync(egl::Display const*, gl::Context const*, egl::Sync const*, int)
egl::WindowSurface::WindowSurface(rx::EGLImplFactory*, egl::Config const*, unsigned long, egl::AttributeMap const&)
egl::WindowSurface::~WindowSurface()
egl::g_numProcs
egl::g_procTable
egl::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, egl::Error const&)
eglBindTexImage failed
eglClientWaitSync
eglClientWaitSync failed
eglCopyBuffers
eglCreateContext failed
eglCreateDeviceANGLE
eglCreateImage
eglCreateImage failed with
eglCreatePbufferFromClientBuffer
eglCreatePbufferSurface failed
eglCreatePixmapSurface
eglCreatePlatformPixmapSurface
eglCreatePlatformPixmapSurfaceEXT
eglCreatePlatformWindowSurface
eglCreatePlatformWindowSurfaceEXT
eglCreateStreamKHR
eglCreateStreamProducerD3DTextureANGLE
eglCreateSync
eglCreateSync failed to create sync object
eglCreateSyncKHR failed to create sync object
eglCreateWindowSurface failed
eglDebugMessageControlKHR
eglDestroyImage
eglDestroyStreamKHR
eglDestroySync
eglDupNativeFenceFDANDROID
eglDupNativeFenceFDANDROID failed
eglGetCompositorTimingANDROID failed
eglGetCompositorTimingANDROIDD
eglGetConfigs
eglGetCurrentContext
eglGetCurrentDisplay
eglGetCurrentSurface
eglGetFrameTimestampsANDROID failed
eglGetMscRateANGLE
eglGetNativeClientBufferANDROID
eglGetNextFrameId failed
eglGetPlatformDisplay
eglGetPlatformDisplayEXT
eglGetSyncAttrib
eglGetSyncAttribKHR with EGL_SYNC_STATUS_KHR failed
eglGetSyncValuesCHROMIUM
eglHandleGPUSwitchANGLE
eglLabelObjectKHR
eglMakeCurrent error
eglMakeCurrent failed
eglMakeCurrent failed with
eglPostSubBufferNV
eglPresentationTimeANDROID failed
eglProgramCacheGetAttribANGLE
eglProgramCachePopulateANGLE
eglProgramCacheQueryANGLE
eglProgramCacheResizeANGLE
eglQueryAPI
eglQueryContext
eglQueryDebugKHR
eglQueryDeviceAttribEXT
eglQueryDeviceStringEXT
eglQueryDisplayAttribANGLE
eglQueryDisplayAttribEXT
eglQueryStreamKHR
eglQueryStreamu64KHR
eglQueryStringiANGLE
eglQuerySurfacePointerANGLE
eglQueryTimestampSupportedANDROID
eglReacquireHighPowerGPUANGLE
eglReleaseDeviceANGLE
eglReleaseHighPowerGPUANGLE
eglReleaseTexImage failed
eglReleaseThread
eglSStreamConsumerReleaseKHR
eglStreamAttribKHR
eglStreamConsumerAcquireKHR
eglStreamConsumerGLTextureExternalAttribsNV
eglStreamConsumerGLTextureExternalKHR
eglStreamConsumerReleaseKHR
eglStreamPostD3DTextureANGLE
eglSurfaceAttribute failed:
eglSwapBuffers failed
eglSwapBuffersWithDamageEXT
eglSwapBuffersWithDamageKHR failed
eglSwapBuffersWithFrameTokenANGLE
eglSwapInterval error
eglTerminate error
eglWaitClient
eglWaitGL
eglWaitNative
eglWaitSync
eglWaitSync failed
egl_gl::EGLClientBufferToGLObjectHandle(void*)
egl_gl::EGLCubeMapTargetToCubeMapTarget(unsigned int)
egl_gl::EGLImageTargetToTextureTarget(unsigned int)
egl_gl::EGLTextureTargetToTextureType(unsigned int)
egl_utils.cpp
either the block needs a location, or all members need a location, or no members have a location
elif
eliminate-dead-branches
eliminate-dead-code-aggressive
eliminate-dead-functions
eliminate-dead-inserts
eliminate-local-single-block
eliminate-local-single-store
eliminate_dead_constant_pass.cpp
eliminate_dead_functions_pass.cpp
eliminate_dead_functions_util.cpp
eliminate_dead_members_pass.cpp
else
else statement
empty array declaration needs to specify a size
emu_precision float atan_emu(emu_precision float y, emu_precision float x){    if (x > 0.0) return atan(y / x);    else if (x < 0.0 && y >= 0.0) return atan(y / x) + 3.14159265;    else if (x < 0.0 && y < 0.0) return atan(y / x) - 3.14159265;    else return 1.57079632 * sign(y);}
emulate_abs_int_function
emulate_atan_2_float
emulate_copyteximage2d_from_renderbuffers
emulate_isnan_float
emulate_max_vertex_attrib_stride
emulate_primitive_restart_fixed_index
emulate_transform_feedback
enable
enable_alpha_test
enable_clip_planes
enable_color_material
enable_command_processing_thread
enable_draw_texture
enable_framebuffer_vk_cache
enable_normalize
enable_pre_rotation_surfaces
enable_precision_qualifiers
enable_rescale_normal
enable_texture_2d
enable_texture_cube_map
enabled
end of group
endInvocationInterlockARB
endInvocationInterlockARB() cannot be placed after a return from main()
endInvocationInterlockARB() cannot be placed within flow control
endInvocationInterlockARB() must be in a fragment shader
endInvocationInterlockARB() must be in main()
endInvocationInterlockARB() must only be called once
endif
ensureSamplersInitialized
entry point cannot return a value
entry point must return a value for use with patch constant function
entry-point
entry_points_egl.cpp
entry_points_egl_ext.cpp
entry_points_enum_autogen.cpp
entry_points_gles_1_0_autogen.cpp
entry_points_gles_2_0_autogen.cpp
entry_points_gles_3_0_autogen.cpp
entry_points_gles_3_1_autogen.cpp
entry_points_gles_3_2_autogen.cpp
entry_points_gles_ext_autogen.cpp
enum
enum_string_mapping.cpp
environments.
ep,
equal(10B10B
equal(10D10D
equal(10E10E
equal(10F10F
equal(20B20B
equal(20D20D
equal(20E20E
equal(20F20F
equal(30B30B
equal(30D30D
equal(30E30E
equal(30F30F
equal_spacing
equality_expression
erViewNV
erfc
error
es
es3_copy_conversion_table_autogen.cpp
es7
es9
event_tracer.cpp
exG
exceeds maximum allowed nesting level of
exception.cpp
exclusive or second child into first child
exclusive-or
exclusive_or_expression
execute once failure in __cxa_get_globals_fast()
executeCallableEXT
executeCallableNV
execution mode
exit
exits the
exp
exp(00B
exp(10B
exp(20B
exp(30B
exp2
exp2(00B
exp2(10B
exp2(20B
exp2(30B
exp2f
expected ')'
expected 'INF'
expected 'c'
expected 16, 32, or 64 bits for first type parameter
expected 8 or 32 bits for first type parameter
expected Data to be a 32 or 64-bit float scalar
expected Data to be a 32 or 64-bit float vector
expected Data to be an int or float vector
expected Data to have 2, 3, 4, 8 or 16 components
expected Format data type to be 8-bit int
expected Format storage class to be UniformConstant
expected Hi and Lo operands to have the same number of components as Result Type
expected Hi and Lo operands to have the same type
expected Interpolant data type to be equal to Result Type
expected Interpolant storage class to be Input
expected Interpolant to be a pointer
expected Nancode to be an int scalar or vector type
expected Nancode to have the same bit width as Result Type
expected Nancode to have the same number of components as Result Type
expected Offset to be a vector of 2 32-bit floats
expected Ptr data type to be int or float scalar or vector
expected Result Type to be 32-bit int scalar type
expected Result Type to be 64-bit float scalar type
expected Result Type to be a 16 or 32-bit scalar or vector float type
expected Result Type to be a 32-bit float scalar
expected Result Type to be a 32-bit float vector of size 2
expected Result Type to be a 32-bit float vector of size 4
expected Result Type to be a 32-bit int scalar or vector type
expected Result Type to be a 32-bit int type
expected Result Type to be a 32-bit int vector of size 2
expected Result Type to be a float scalar or vector type
expected Result Type to be a float scalar type
expected Result Type to be a float vector type
expected Result Type to be a scalar or a vector with 2, 3, 4, 8 or 16 components
expected Result Type to be a scalar or vector float type
expected Result Type to be a square matrix
expected Result Type to be a struct with two identical
expected Result Type to be a struct with two members,
expected Result Type to be an int or float scalar or vector type
expected Result Type to be an int or float vector type
expected Result Type to be an int scalar or vector type
expected Result Type to have 2, 3, 4, 8 or 16 components
expected Result Type to have 2, 4, 8 or 16 components
expected Result Type to have 3 components
expected Result Type to have 3 or 4 components
expected Result Type to have no more than 4 components
expected Sample to be 32-bit integer
expected a single integer argument
expected all operands to be int scalars or vectors
expected all operands to have the same bit width as
expected all operands to have the same dimension as
expected bit width of Result Type components to be 16, 32 or 64
expected bit width of components of Hi and Lo operands to be half of the bit width of components of Result Type
expected data type of the pointer to be a 32-bit int scalar or vector type
expected data type of the pointer to be equal to Result Type
expected data type of the pointer to have the same number of components as Result Type
expected four type parameters
expected literal N to be equal to the number of components of Result Type
expected newline after header name:
expected no arguments
expected number after 'c'
expected operand
expected operand A type to be equal to Result Type
expected operand B type to be equal to Result Type
expected operand C to be an int scalar or vector
expected operand C to have the same bit width as Result Type
expected operand C to have the same number of components as Result Type
expected operand Child must be class or struct debug type
expected operand Eta to be a float scalar
expected operand Exp data type to be a
expected operand Exp data type to have the same component
expected operand Exp to be a 32-bit int scalar
expected operand Exp to be a pointer
expected operand Exp to have the same component
expected operand Format to be a pointer
expected operand I data type to be equal to Result Type
expected operand I to be a pointer
expected operand I to be of type equal to Result Type
expected operand Members
expected operand N to be of type equal to Result Type
expected operand Num Elements to be of type size_t (
expected operand Offset to be of type size_t (
expected operand P component type to be equal to Result Type
expected operand P data type to be 16-bit float scalar
expected operand P data type to be equal to component type of Result Type
expected operand P data type to be equal to the type of operand Data components
expected operand P storage class to be Generic, CrossWorkgroup, Workgroup or Function
expected operand P storage class to be UniformConstant, Generic, CrossWorkgroup, Workgroup or Function
expected operand P to be a 32-bit int scalar
expected operand P to be a float scalar or vector
expected operand P to be a pointer
expected operand P to have no more than 4 components
expected operand P type to be equal to Result Type
expected operand P0 component type to be equal to
expected operand P0 to be of float scalar or vector type
expected operand P0 to have no more than 4 components
expected operand P1 component type to be equal to
expected operand P1 to be of float scalar or vector type
expected operand Parent must be class or struct debug type
expected operand Ptr storage class to be CrossWorkgroup
expected operand Ptr to be a pointer
expected operand Shuffle Mask components to have the same bit width as Result Type components
expected operand Shuffle Mask to be an int vector
expected operand Shuffle Mask to have the same number of components as Result Type
expected operand V to be a 32-bit float vector of size 2
expected operand V to be a 32-bit float vector of size 4
expected operand V to be a 32-bit int vector of size 2
expected operand V to be a 64-bit float scalar
expected operand Variable must be a result id of OpVariable or OpFunctionParameter
expected operand X and Result Type to have equal component types
expected operand X component type to be equal to
expected operand X component type to be equal to Result Type
expected operand X to be a float scalar or vector
expected operand X to be a square matrix
expected operand X to be an int or float vector
expected operand X to be of float scalar or vector type
expected operand X to have 2, 4, 8 or 16 components
expected operand X to have the same number of components as Result Type
expected operand X type to be equal to Result Type
expected operand X type to be equal to members of
expected operand X type to be equal to the first member
expected operand Y type to be equal to Result Type
expected operands P0 and P1 to be of the same type
expected operands P0 and P1 to have the same number of
expected operands X and Y to be of the same type
expected register number after register type
expected register type
expected result type must be a result id of
expected spaceN
expected storage class of the pointer to be Generic, CrossWorkgroup, Workgroup or Function
expected symbol, not user-defined type
expected the exponent to be a 32-bit int scalar or vector
expected the exponent to have the same number of components as Result Type
expected the last operand to be a pointer
expected type name
expected type of operand X to be equal to Result Type
expected type of operand Y to be equal to Result Type
expected types of all operands to be equal to Result Type
expected {x, y, z, w} for component
expected: SamplerComparisonState
expected: mul arguments
expected: sampler type
expected: scalar or vector type in texture structure
expf
explicit
explicit interpolation
expm1
exponent = floor(log2(abs(v) + 1e-30)) - 10.0;    bool
exponent = floor(log2(abs(v) + 1e-30)) - 10.0;    bvec
exponent = floor(log2(abs(x) + 1e-30)) - 10.0;    bool isNonZero = (exponent >= -25.0);    x = x * exp2(-exponent);    x = sign(x) * floor(abs(x));    return x * exp2(exponent) * float(isNonZero);}
expression after :
expression after ?
expression followed by ']'
expression_statement
ext_inst.cpp
extension
extension 'all' cannot have 'require' or 'enable' behavior
extension `GL_ARB_gpu_shader5' unsupported in
extension `GL_EXT_gpu_shader5' unsupported in
extension cannot have 'enable' behavior
extension cannot have 'require' behavior
extension directive must occur before any non-preprocessor tokens in ESSL1
extension directive must occur before any non-preprocessor tokens in ESSL3
extension directive should occur before any non-preprocessor tokens
extension instruction number
extension is being used
extension is disabled
extension is only partially supported:
extension name expected
extension name not specified
extension not supported:
extensions.cpp
extern
external_declaration
extra content after header name:
extra tokens
extra tokens -- expected newline
extra_blbits
extra_copy_buffer_region
extra_dbits
extra_lbits
extraneous layout qualifier: only has an effect on matrix types
extraneous semicolon
f
f'>
f-5
f16image1D
f16image1DArray
f16image2D
f16image2DArray
f16image2DMS
f16image2DMSArray
f16image2DRect
f16image3D
f16imageBuffer
f16imageCube
f16imageCubeArray
f16mat2x2
f16mat3x3
f16mat4x4
f16sampler1D
f16sampler1DArray
f16sampler1DArrayShadow
f16sampler1DShadow
f16sampler2D
f16sampler2DArray
f16sampler2DArrayShadow
f16sampler2DMS
f16sampler2DMSArray
f16sampler2DRect
f16sampler2DRectShadow
f16sampler2DShadow
f16sampler3D
f16samplerBuffer
f16samplerCube
f16samplerCubeArray
f16samplerCubeArrayShadow
f16samplerCubeShadow
f16subpassInput
f16subpassInputMS
f16texture1D
f16texture1DArray
f16texture2D
f16texture2DArray
f16texture2DMS
f16texture2DMSArray
f16texture2DRect
f16texture3D
f16textureBuffer
f16textureCube
f16textureCubeArray
f16tof32
f29
f32mat2
f32mat2x2
f32mat2x3
f32mat2x4
f32mat3
f32mat3x2
f32mat3x3
f32mat3x4
f32mat4
f32mat4x2
f32mat4x3
f32mat4x4
f32tof16
f32vec2
f32vec3
f32vec4
f64mat2
f64mat2x2
f64mat2x3
f64mat2x4
f64mat3
f64mat3x2
f64mat3x3
f64mat3x4
f64mat4
f64mat4x2
f64mat4x3
f64mat4x4
f64vec2
f64vec3
f64vec4
f7
f8
fZB
fabs
face-forward
faceforward
faceforward(00B00B00B
faceforward(00C00C00C
faceforward(10B10B10B
faceforward(10C10C10C
faceforward(20B20B20B
faceforward(20C20C20C
faceforward(30B30B30B
faceforward(30C30C30C
failed to insert the global constant buffer
fallback_malloc.cpp
false
false case
far
fast_distance
fast_length
fast_normalize
fatal error - scanner input buffer overflow
fatal flex scanner internal error--end of buffer missed
fatal flex scanner internal error--no action found
fbC
fclamp
fcoopmatNV
fdim
feature not yet implemented
feature_manager.cpp
features->emulatePrimitiveRestartFixedIndex.enabled && IsApple() && isIntel
fflush
fh
field selection requires structure or vector on left hand side
field selection requires structure, vector, or interface block on left hand side
file error
filename-based #line
filename-based __FILE__
fill_window
fill_window_sse.c
findCompatibleMemoryIndex
findLSB
findLSB(00D
findLSB(00E
findLSB(10D
findLSB(10E
findLSB(20D
findLSB(20E
findLSB(30D
findLSB(30E
findMSB
findMSB(00D
findMSB(00E
findMSB(10D
findMSB(10E
findMSB(20D
findMSB(20E
findMSB(30D
findMSB(30E
finish_does_not_cause_queries_to_be_available
first argument must be an interpolant, or interpolant-array element
first member a float scalar or vector, second member a
first-class array
first-class arrays (array initializer) supported in GLSL ES 3.00 and above only
firstbithigh
firstbitlow
fix_storage_class.cpp
fixed
fixedtables.distfix
fixedtables.lenfix
flags must be zero
flat  in lowp     int gl_SampleID;      in mediump vec2 gl_SamplePosition;flat  in highp    int gl_SampleMaskIn[];     out highp    int gl_SampleMask[];
flat in
flat in  int  gl_SampleID;     in  vec2 gl_SamplePosition;     out int  gl_SampleMask[];
flat in  int  gl_SampleMaskIn[];
flat in highp int gl_DeviceIndex;flat in highp int gl_ViewIndex;
flat in highp uint gl_ViewID_OVR;
flat in int gl_Layer;flat in int gl_ViewportIndex;
flat in int gl_PrimitiveID;
flat in ivec2 gl_FragSizeEXT;flat in int   gl_FragInvocationCountEXT;
flat in ivec2 gl_FragmentSizeNV;flat in int   gl_InvocationsPerPixelNV;
flat in ivec2 gl_FragmentSizeNV;flat in int   gl_InvocationsPerPixelNV;in vec3 gl_BaryCoordNV;in vec3 gl_BaryCoordNoPerspNV;
flat in mediump uint  gl_SubgroupSize;flat in mediump uint  gl_SubgroupInvocationID;flat in highp   uvec4 gl_SubgroupEqMask;flat in highp   uvec4 gl_SubgroupGeMask;flat in highp   uvec4 gl_SubgroupGtMask;flat in highp   uvec4 gl_SubgroupLeMask;flat in highp   uvec4 gl_SubgroupLtMask;flat in highp   uint  gl_WarpsPerSMNV;flat in highp   uint  gl_SMCountNV;flat in highp   uint  gl_WarpIDNV;flat in highp   uint  gl_SMIDNV;
flat out
flat/smooth/noperspective
flattenTemp
flatten_decoration_pass.cpp
flipX
flipXY
flipY
flip_viewport_y
flippedFragCoord
flippedPointCoord
float  fma(float,  float,  float );vec2   fma(vec2,   vec2,   vec2  );vec3   fma(vec3,   vec3,   vec3  );vec4   fma(vec4,   vec4,   vec4  );
float cubeFaceIndexAMD(vec3);vec2  cubeFaceCoordAMD(vec3);uint64_t timeAMD();in int gl_SIMDGroupSizeAMD;
float dFdxFine(float p);vec2  dFdxFine(vec2  p);vec3  dFdxFine(vec3  p);vec4  dFdxFine(vec4  p);float dFdyFine(float p);vec2  dFdyFine(vec2  p);vec3  dFdyFine(vec3  p);vec4  dFdyFine(vec4  p);float fwidthFine(float p);vec2  fwidthFine(vec2  p);vec3  fwidthFine(vec3  p);vec4  fwidthFine(vec4  p);float dFdxCoarse(float p);vec2  dFdxCoarse(vec2  p);vec3  dFdxCoarse(vec3  p);vec4  dFdxCoarse(vec4  p);float dFdyCoarse(float p);vec2  dFdyCoarse(vec2  p);vec3  dFdyCoarse(vec3  p);vec4  dFdyCoarse(vec4  p);float fwidthCoarse(float p);vec2  fwidthCoarse(vec2  p);vec3  fwidthCoarse(vec3  p);vec4  fwidthCoarse(vec4  p);
float determinant(mat2 m);float determinant(mat3 m);float determinant(mat4 m);mat2 inverse(mat2 m);mat3 inverse(mat3 m);mat4 inverse(mat4 m);
float frexp(highp float, out highp int);vec2  frexp(highp vec2,  out highp ivec2);vec3  frexp(highp vec3,  out highp ivec3);vec4  frexp(highp vec4,  out highp ivec4);float ldexp(highp float, highp int);vec2  ldexp(highp vec2,  highp ivec2);vec3  ldexp(highp vec3,  highp ivec3);vec4  ldexp(highp vec4,  highp ivec4);
float gl::CastFromGLintStateValue<float, bool>(unsigned int, bool)
float gl::CastFromGLintStateValue<float, int>(unsigned int, int)
float gl::CastFromGLintStateValue<float, unsigned int>(unsigned int, unsigned int)
float gl::CastFromStateValue<float, float>(unsigned int, float)
float gl::CastFromStateValue<float, int>(unsigned int, int)
float gl::CastFromStateValue<float, unsigned int>(unsigned int, unsigned int)
float gl::CastQueryValueTo<float, float>(unsigned int, float)
float gl::CastQueryValueTo<float, int>(unsigned int, int)
float gl::CastQueryValueTo<float, unsigned int>(unsigned int, unsigned int)
float gl_CullDistance[];
float gl_CullDistance[];int  gl_ViewportMask[];vec4 gl_SecondaryPositionNV;int  gl_SecondaryViewportMaskNV[];vec4 gl_PositionPerViewNV[];int  gl_ViewportMaskPerViewNV[];
float gl_CullDistance[];vec4 gl_SecondaryPositionNV;vec4 gl_PositionPerViewNV[];
float imageAtomicExchange(volatile coherent
float interpolateAtCentroid(float);vec2  interpolateAtCentroid(vec2);vec3  interpolateAtCentroid(vec3);vec4  interpolateAtCentroid(vec4);float interpolateAtSample(float, int);vec2  interpolateAtSample(vec2,  int);vec3  interpolateAtSample(vec3,  int);vec4  interpolateAtSample(vec4,  int);float interpolateAtOffset(float, vec2);vec2  interpolateAtOffset(vec2,  vec2);vec3  interpolateAtOffset(vec3,  vec2);vec4  interpolateAtOffset(vec4,  vec2);
float interpolateAtVertexAMD(float, uint);vec2  interpolateAtVertexAMD(vec2,  uint);vec3  interpolateAtVertexAMD(vec3,  uint);vec4  interpolateAtVertexAMD(vec4,  uint);int   interpolateAtVertexAMD(int,   uint);ivec2 interpolateAtVertexAMD(ivec2, uint);ivec3 interpolateAtVertexAMD(ivec3, uint);ivec4 interpolateAtVertexAMD(ivec4, uint);uint  interpolateAtVertexAMD(uint,  uint);uvec2 interpolateAtVertexAMD(uvec2, uint);uvec3 interpolateAtVertexAMD(uvec3, uint);uvec4 interpolateAtVertexAMD(uvec4, uint);float16_t interpolateAtVertexAMD(float16_t, uint);f16vec2   interpolateAtVertexAMD(f16vec2,   uint);f16vec3   interpolateAtVertexAMD(f16vec3,   uint);f16vec4   interpolateAtVertexAMD(f16vec4,   uint);
float literal needs a decimal point or exponent
float literal too long
float min3(float, float, float);vec2  min3(vec2,  vec2,  vec2);vec3  min3(vec3,  vec3,  vec3);vec4  min3(vec4,  vec4,  vec4);int   min3(int,   int,   int);ivec2 min3(ivec2, ivec2, ivec2);ivec3 min3(ivec3, ivec3, ivec3);ivec4 min3(ivec4, ivec4, ivec4);uint  min3(uint,  uint,  uint);uvec2 min3(uvec2, uvec2, uvec2);uvec3 min3(uvec3, uvec3, uvec3);uvec4 min3(uvec4, uvec4, uvec4);float max3(float, float, float);vec2  max3(vec2,  vec2,  vec2);vec3  max3(vec3,  vec3,  vec3);vec4  max3(vec4,  vec4,  vec4);int   max3(int,   int,   int);ivec2 max3(ivec2, ivec2, ivec2);ivec3 max3(ivec3, ivec3, ivec3);ivec4 max3(ivec4, ivec4, ivec4);uint  max3(uint,  uint,  uint);uvec2 max3(uvec2, uvec2, uvec2);uvec3 max3(uvec3, uvec3, uvec3);uvec4 max3(uvec4, uvec4, uvec4);float mid3(float, float, float);vec2  mid3(vec2,  vec2,  vec2);vec3  mid3(vec3,  vec3,  vec3);vec4  mid3(vec4,  vec4,  vec4);int   mid3(int,   int,   int);ivec2 mid3(ivec2, ivec2, ivec2);ivec3 mid3(ivec3, ivec3, ivec3);ivec4 mid3(ivec4, ivec4, ivec4);uint  mid3(uint,  uint,  uint);uvec2 mid3(uvec2, uvec2, uvec2);uvec3 mid3(uvec3, uvec3, uvec3);uvec4 mid3(uvec4, uvec4, uvec4);float16_t min3(float16_t, float16_t, float16_t);f16vec2   min3(f16vec2,   f16vec2,   f16vec2);f16vec3   min3(f16vec3,   f16vec3,   f16vec3);f16vec4   min3(f16vec4,   f16vec4,   f16vec4);float16_t max3(float16_t, float16_t, float16_t);f16vec2   max3(f16vec2,   f16vec2,   f16vec2);f16vec3   max3(f16vec3,   f16vec3,   f16vec3);f16vec4   max3(f16vec4,   f16vec4,   f16vec4);float16_t mid3(float16_t, float16_t, float16_t);f16vec2   mid3(f16vec2,   f16vec2,   f16vec2);f16vec3   mid3(f16vec3,   f16vec3,   f16vec3);f16vec4   mid3(f16vec4,   f16vec4,   f16vec4);int16_t   min3(int16_t,   int16_t,   int16_t);i16vec2   min3(i16vec2,   i16vec2,   i16vec2);i16vec3   min3(i16vec3,   i16vec3,   i16vec3);i16vec4   min3(i16vec4,   i16vec4,   i16vec4);int16_t   max3(int16_t,   int16_t,   int16_t);i16vec2   max3(i16vec2,   i16vec2,   i16vec2);i16vec3   max3(i16vec3,   i16vec3,   i16vec3);i16vec4   max3(i16vec4,   i16vec4,   i16vec4);int16_t   mid3(int16_t,   int16_t,   int16_t);i16vec2   mid3(i16vec2,   i16vec2,   i16vec2);i16vec3   mid3(i16vec3,   i16vec3,   i16vec3);i16vec4   mid3(i16vec4,   i16vec4,   i16vec4);uint16_t  min3(uint16_t,  uint16_t,  uint16_t);u16vec2   min3(u16vec2,   u16vec2,   u16vec2);u16vec3   min3(u16vec3,   u16vec3,   u16vec3);u16vec4   min3(u16vec4,   u16vec4,   u16vec4);uint16_t  max3(uint16_t,  uint16_t,  uint16_t);u16vec2   max3(u16vec2,   u16vec2,   u16vec2);u16vec3   max3(u16vec3,   u16vec3,   u16vec3);u16vec4   max3(u16vec4,   u16vec4,   u16vec4);uint16_t  mid3(uint16_t,  uint16_t,  uint16_t);u16vec2   mid3(u16vec2,   u16vec2,   u16vec2);u16vec3   mid3(u16vec3,   u16vec3,   u16vec3);u16vec4   mid3(u16vec4,   u16vec4,   u16vec4);
float minInvocationsAMD(float);vec2  minInvocationsAMD(vec2);vec3  minInvocationsAMD(vec3);vec4  minInvocationsAMD(vec4);int   minInvocationsAMD(int);ivec2 minInvocationsAMD(ivec2);ivec3 minInvocationsAMD(ivec3);ivec4 minInvocationsAMD(ivec4);uint  minInvocationsAMD(uint);uvec2 minInvocationsAMD(uvec2);uvec3 minInvocationsAMD(uvec3);uvec4 minInvocationsAMD(uvec4);double minInvocationsAMD(double);dvec2  minInvocationsAMD(dvec2);dvec3  minInvocationsAMD(dvec3);dvec4  minInvocationsAMD(dvec4);int64_t minInvocationsAMD(int64_t);i64vec2 minInvocationsAMD(i64vec2);i64vec3 minInvocationsAMD(i64vec3);i64vec4 minInvocationsAMD(i64vec4);uint64_t minInvocationsAMD(uint64_t);u64vec2  minInvocationsAMD(u64vec2);u64vec3  minInvocationsAMD(u64vec3);u64vec4  minInvocationsAMD(u64vec4);float16_t minInvocationsAMD(float16_t);f16vec2   minInvocationsAMD(f16vec2);f16vec3   minInvocationsAMD(f16vec3);f16vec4   minInvocationsAMD(f16vec4);int16_t minInvocationsAMD(int16_t);i16vec2 minInvocationsAMD(i16vec2);i16vec3 minInvocationsAMD(i16vec3);i16vec4 minInvocationsAMD(i16vec4);uint16_t minInvocationsAMD(uint16_t);u16vec2  minInvocationsAMD(u16vec2);u16vec3  minInvocationsAMD(u16vec3);u16vec4  minInvocationsAMD(u16vec4);float minInvocationsInclusiveScanAMD(float);vec2  minInvocationsInclusiveScanAMD(vec2);vec3  minInvocationsInclusiveScanAMD(vec3);vec4  minInvocationsInclusiveScanAMD(vec4);int   minInvocationsInclusiveScanAMD(int);ivec2 minInvocationsInclusiveScanAMD(ivec2);ivec3 minInvocationsInclusiveScanAMD(ivec3);ivec4 minInvocationsInclusiveScanAMD(ivec4);uint  minInvocationsInclusiveScanAMD(uint);uvec2 minInvocationsInclusiveScanAMD(uvec2);uvec3 minInvocationsInclusiveScanAMD(uvec3);uvec4 minInvocationsInclusiveScanAMD(uvec4);double minInvocationsInclusiveScanAMD(double);dvec2  minInvocationsInclusiveScanAMD(dvec2);dvec3  minInvocationsInclusiveScanAMD(dvec3);dvec4  minInvocationsInclusiveScanAMD(dvec4);int64_t minInvocationsInclusiveScanAMD(int64_t);i64vec2 minInvocationsInclusiveScanAMD(i64vec2);i64vec3 minInvocationsInclusiveScanAMD(i64vec3);i64vec4 minInvocationsInclusiveScanAMD(i64vec4);uint64_t minInvocationsInclusiveScanAMD(uint64_t);u64vec2  minInvocationsInclusiveScanAMD(u64vec2);u64vec3  minInvocationsInclusiveScanAMD(u64vec3);u64vec4  minInvocationsInclusiveScanAMD(u64vec4);float16_t minInvocationsInclusiveScanAMD(float16_t);f16vec2   minInvocationsInclusiveScanAMD(f16vec2);f16vec3   minInvocationsInclusiveScanAMD(f16vec3);f16vec4   minInvocationsInclusiveScanAMD(f16vec4);int16_t minInvocationsInclusiveScanAMD(int16_t);i16vec2 minInvocationsInclusiveScanAMD(i16vec2);i16vec3 minInvocationsInclusiveScanAMD(i16vec3);i16vec4 minInvocationsInclusiveScanAMD(i16vec4);uint16_t minInvocationsInclusiveScanAMD(uint16_t);u16vec2  minInvocationsInclusiveScanAMD(u16vec2);u16vec3  minInvocationsInclusiveScanAMD(u16vec3);u16vec4  minInvocationsInclusiveScanAMD(u16vec4);float minInvocationsExclusiveScanAMD(float);vec2  minInvocationsExclusiveScanAMD(vec2);vec3  minInvocationsExclusiveScanAMD(vec3);vec4  minInvocationsExclusiveScanAMD(vec4);int   minInvocationsExclusiveScanAMD(int);ivec2 minInvocationsExclusiveScanAMD(ivec2);ivec3 minInvocationsExclusiveScanAMD(ivec3);ivec4 minInvocationsExclusiveScanAMD(ivec4);uint  minInvocationsExclusiveScanAMD(uint);uvec2 minInvocationsExclusiveScanAMD(uvec2);uvec3 minInvocationsExclusiveScanAMD(uvec3);uvec4 minInvocationsExclusiveScanAMD(uvec4);double minInvocationsExclusiveScanAMD(double);dvec2  minInvocationsExclusiveScanAMD(dvec2);dvec3  minInvocationsExclusiveScanAMD(dvec3);dvec4  minInvocationsExclusiveScanAMD(dvec4);int64_t minInvocationsExclusiveScanAMD(int64_t);i64vec2 minInvocationsExclusiveScanAMD(i64vec2);i64vec3 minInvocationsExclusiveScanAMD(i64vec3);i64vec4 minInvocationsExclusiveScanAMD(i64vec4);uint64_t minInvocationsExclusiveScanAMD(uint64_t);u64vec2  minInvocationsExclusiveScanAMD(u64vec2);u64vec3  minInvocationsExclusiveScanAMD(u64vec3);u64vec4  minInvocationsExclusiveScanAMD(u64vec4);float16_t minInvocationsExclusiveScanAMD(float16_t);f16vec2   minInvocationsExclusiveScanAMD(f16vec2);f16vec3   minInvocationsExclusiveScanAMD(f16vec3);f16vec4   minInvocationsExclusiveScanAMD(f16vec4);int16_t minInvocationsExclusiveScanAMD(int16_t);i16vec2 minInvocationsExclusiveScanAMD(i16vec2);i16vec3 minInvocationsExclusiveScanAMD(i16vec3);i16vec4 minInvocationsExclusiveScanAMD(i16vec4);uint16_t minInvocationsExclusiveScanAMD(uint16_t);u16vec2  minInvocationsExclusiveScanAMD(u16vec2);u16vec3  minInvocationsExclusiveScanAMD(u16vec3);u16vec4  minInvocationsExclusiveScanAMD(u16vec4);float maxInvocationsAMD(float);vec2  maxInvocationsAMD(vec2);vec3  maxInvocationsAMD(vec3);vec4  maxInvocationsAMD(vec4);int   maxInvocationsAMD(int);ivec2 maxInvocationsAMD(ivec2);ivec3 maxInvocationsAMD(ivec3);ivec4 maxInvocationsAMD(ivec4);uint  maxInvocationsAMD(uint);uvec2 maxInvocationsAMD(uvec2);uvec3 maxInvocationsAMD(uvec3);uvec4 maxInvocationsAMD(uvec4);double maxInvocationsAMD(double);dvec2  maxInvocationsAMD(dvec2);dvec3  maxInvocationsAMD(dvec3);dvec4  maxInvocationsAMD(dvec4);int64_t maxInvocationsAMD(int64_t);i64vec2 maxInvocationsAMD(i64vec2);i64vec3 maxInvocationsAMD(i64vec3);i64vec4 maxInvocationsAMD(i64vec4);uint64_t maxInvocationsAMD(uint64_t);u64vec2  maxInvocationsAMD(u64vec2);u64vec3  maxInvocationsAMD(u64vec3);u64vec4  maxInvocationsAMD(u64vec4);float16_t maxInvocationsAMD(float16_t);f16vec2   maxInvocationsAMD(f16vec2);f16vec3   maxInvocationsAMD(f16vec3);f16vec4   maxInvocationsAMD(f16vec4);int16_t maxInvocationsAMD(int16_t);i16vec2 maxInvocationsAMD(i16vec2);i16vec3 maxInvocationsAMD(i16vec3);i16vec4 maxInvocationsAMD(i16vec4);uint16_t maxInvocationsAMD(uint16_t);u16vec2  maxInvocationsAMD(u16vec2);u16vec3  maxInvocationsAMD(u16vec3);u16vec4  maxInvocationsAMD(u16vec4);float maxInvocationsInclusiveScanAMD(float);vec2  maxInvocationsInclusiveScanAMD(vec2);vec3  maxInvocationsInclusiveScanAMD(vec3);vec4  maxInvocationsInclusiveScanAMD(vec4);int   maxInvocationsInclusiveScanAMD(int);ivec2 maxInvocationsInclusiveScanAMD(ivec2);ivec3 maxInvocationsInclusiveScanAMD(ivec3);ivec4 maxInvocationsInclusiveScanAMD(ivec4);uint  maxInvocationsInclusiveScanAMD(uint);uvec2 maxInvocationsInclusiveScanAMD(uvec2);uvec3 maxInvocationsInclusiveScanAMD(uvec3);uvec4 maxInvocationsInclusiveScanAMD(uvec4);double maxInvocationsInclusiveScanAMD(double);dvec2  maxInvocationsInclusiveScanAMD(dvec2);dvec3  maxInvocationsInclusiveScanAMD(dvec3);dvec4  maxInvocationsInclusiveScanAMD(dvec4);int64_t maxInvocationsInclusiveScanAMD(int64_t);i64vec2 maxInvocationsInclusiveScanAMD(i64vec2);i64vec3 maxInvocationsInclusiveScanAMD(i64vec3);i64vec4 maxInvocationsInclusiveScanAMD(i64vec4);uint64_t maxInvocationsInclusiveScanAMD(uint64_t);u64vec2  maxInvocationsInclusiveScanAMD(u64vec2);u64vec3  maxInvocationsInclusiveScanAMD(u64vec3);u64vec4  maxInvocationsInclusiveScanAMD(u64vec4);float16_t maxInvocationsInclusiveScanAMD(float16_t);f16vec2   maxInvocationsInclusiveScanAMD(f16vec2);f16vec3   maxInvocationsInclusiveScanAMD(f16vec3);f16vec4   maxInvocationsInclusiveScanAMD(f16vec4);int16_t maxInvocationsInclusiveScanAMD(int16_t);i16vec2 maxInvocationsInclusiveScanAMD(i16vec2);i16vec3 maxInvocationsInclusiveScanAMD(i16vec3);i16vec4 maxInvocationsInclusiveScanAMD(i16vec4);uint16_t maxInvocationsInclusiveScanAMD(uint16_t);u16vec2  maxInvocationsInclusiveScanAMD(u16vec2);u16vec3  maxInvocationsInclusiveScanAMD(u16vec3);u16vec4  maxInvocationsInclusiveScanAMD(u16vec4);float maxInvocationsExclusiveScanAMD(float);vec2  maxInvocationsExclusiveScanAMD(vec2);vec3  maxInvocationsExclusiveScanAMD(vec3);vec4  maxInvocationsExclusiveScanAMD(vec4);int   maxInvocationsExclusiveScanAMD(int);ivec2 maxInvocationsExclusiveScanAMD(ivec2);ivec3 maxInvocationsExclusiveScanAMD(ivec3);ivec4 maxInvocationsExclusiveScanAMD(ivec4);uint  maxInvocationsExclusiveScanAMD(uint);uvec2 maxInvocationsExclusiveScanAMD(uvec2);uvec3 maxInvocationsExclusiveScanAMD(uvec3);uvec4 maxInvocationsExclusiveScanAMD(uvec4);double maxInvocationsExclusiveScanAMD(double);dvec2  maxInvocationsExclusiveScanAMD(dvec2);dvec3  maxInvocationsExclusiveScanAMD(dvec3);dvec4  maxInvocationsExclusiveScanAMD(dvec4);int64_t maxInvocationsExclusiveScanAMD(int64_t);i64vec2 maxInvocationsExclusiveScanAMD(i64vec2);i64vec3 maxInvocationsExclusiveScanAMD(i64vec3);i64vec4 maxInvocationsExclusiveScanAMD(i64vec4);uint64_t maxInvocationsExclusiveScanAMD(uint64_t);u64vec2  maxInvocationsExclusiveScanAMD(u64vec2);u64vec3  maxInvocationsExclusiveScanAMD(u64vec3);u64vec4  maxInvocationsExclusiveScanAMD(u64vec4);float16_t maxInvocationsExclusiveScanAMD(float16_t);f16vec2   maxInvocationsExclusiveScanAMD(f16vec2);f16vec3   maxInvocationsExclusiveScanAMD(f16vec3);f16vec4   maxInvocationsExclusiveScanAMD(f16vec4);int16_t maxInvocationsExclusiveScanAMD(int16_t);i16vec2 maxInvocationsExclusiveScanAMD(i16vec2);i16vec3 maxInvocationsExclusiveScanAMD(i16vec3);i16vec4 maxInvocationsExclusiveScanAMD(i16vec4);uint16_t maxInvocationsExclusiveScanAMD(uint16_t);u16vec2  maxInvocationsExclusiveScanAMD(u16vec2);u16vec3  maxInvocationsExclusiveScanAMD(u16vec3);u16vec4  maxInvocationsExclusiveScanAMD(u16vec4);float addInvocationsAMD(float);vec2  addInvocationsAMD(vec2);vec3  addInvocationsAMD(vec3);vec4  addInvocationsAMD(vec4);int   addInvocationsAMD(int);ivec2 addInvocationsAMD(ivec2);ivec3 addInvocationsAMD(ivec3);ivec4 addInvocationsAMD(ivec4);uint  addInvocationsAMD(uint);uvec2 addInvocationsAMD(uvec2);uvec3 addInvocationsAMD(uvec3);uvec4 addInvocationsAMD(uvec4);double  addInvocationsAMD(double);dvec2   addInvocationsAMD(dvec2);dvec3   addInvocationsAMD(dvec3);dvec4   addInvocationsAMD(dvec4);int64_t addInvocationsAMD(int64_t);i64vec2 addInvocationsAMD(i64vec2);i64vec3 addInvocationsAMD(i64vec3);i64vec4 addInvocationsAMD(i64vec4);uint64_t addInvocationsAMD(uint64_t);u64vec2  addInvocationsAMD(u64vec2);u64vec3  addInvocationsAMD(u64vec3);u64vec4  addInvocationsAMD(u64vec4);float16_t addInvocationsAMD(float16_t);f16vec2   addInvocationsAMD(f16vec2);f16vec3   addInvocationsAMD(f16vec3);f16vec4   addInvocationsAMD(f16vec4);int16_t addInvocationsAMD(int16_t);i16vec2 addInvocationsAMD(i16vec2);i16vec3 addInvocationsAMD(i16vec3);i16vec4 addInvocationsAMD(i16vec4);uint16_t addInvocationsAMD(uint16_t);u16vec2  addInvocationsAMD(u16vec2);u16vec3  addInvocationsAMD(u16vec3);u16vec4  addInvocationsAMD(u16vec4);float addInvocationsInclusiveScanAMD(float);vec2  addInvocationsInclusiveScanAMD(vec2);vec3  addInvocationsInclusiveScanAMD(vec3);vec4  addInvocationsInclusiveScanAMD(vec4);int   addInvocationsInclusiveScanAMD(int);ivec2 addInvocationsInclusiveScanAMD(ivec2);ivec3 addInvocationsInclusiveScanAMD(ivec3);ivec4 addInvocationsInclusiveScanAMD(ivec4);uint  addInvocationsInclusiveScanAMD(uint);uvec2 addInvocationsInclusiveScanAMD(uvec2);uvec3 addInvocationsInclusiveScanAMD(uvec3);uvec4 addInvocationsInclusiveScanAMD(uvec4);double  addInvocationsInclusiveScanAMD(double);dvec2   addInvocationsInclusiveScanAMD(dvec2);dvec3   addInvocationsInclusiveScanAMD(dvec3);dvec4   addInvocationsInclusiveScanAMD(dvec4);int64_t addInvocationsInclusiveScanAMD(int64_t);i64vec2 addInvocationsInclusiveScanAMD(i64vec2);i64vec3 addInvocationsInclusiveScanAMD(i64vec3);i64vec4 addInvocationsInclusiveScanAMD(i64vec4);uint64_t addInvocationsInclusiveScanAMD(uint64_t);u64vec2  addInvocationsInclusiveScanAMD(u64vec2);u64vec3  addInvocationsInclusiveScanAMD(u64vec3);u64vec4  addInvocationsInclusiveScanAMD(u64vec4);float16_t addInvocationsInclusiveScanAMD(float16_t);f16vec2   addInvocationsInclusiveScanAMD(f16vec2);f16vec3   addInvocationsInclusiveScanAMD(f16vec3);f16vec4   addInvocationsInclusiveScanAMD(f16vec4);int16_t addInvocationsInclusiveScanAMD(int16_t);i16vec2 addInvocationsInclusiveScanAMD(i16vec2);i16vec3 addInvocationsInclusiveScanAMD(i16vec3);i16vec4 addInvocationsInclusiveScanAMD(i16vec4);uint16_t addInvocationsInclusiveScanAMD(uint16_t);u16vec2  addInvocationsInclusiveScanAMD(u16vec2);u16vec3  addInvocationsInclusiveScanAMD(u16vec3);u16vec4  addInvocationsInclusiveScanAMD(u16vec4);float addInvocationsExclusiveScanAMD(float);vec2  addInvocationsExclusiveScanAMD(vec2);vec3  addInvocationsExclusiveScanAMD(vec3);vec4  addInvocationsExclusiveScanAMD(vec4);int   addInvocationsExclusiveScanAMD(int);ivec2 addInvocationsExclusiveScanAMD(ivec2);ivec3 addInvocationsExclusiveScanAMD(ivec3);ivec4 addInvocationsExclusiveScanAMD(ivec4);uint  addInvocationsExclusiveScanAMD(uint);uvec2 addInvocationsExclusiveScanAMD(uvec2);uvec3 addInvocationsExclusiveScanAMD(uvec3);uvec4 addInvocationsExclusiveScanAMD(uvec4);double  addInvocationsExclusiveScanAMD(double);dvec2   addInvocationsExclusiveScanAMD(dvec2);dvec3   addInvocationsExclusiveScanAMD(dvec3);dvec4   addInvocationsExclusiveScanAMD(dvec4);int64_t addInvocationsExclusiveScanAMD(int64_t);i64vec2 addInvocationsExclusiveScanAMD(i64vec2);i64vec3 addInvocationsExclusiveScanAMD(i64vec3);i64vec4 addInvocationsExclusiveScanAMD(i64vec4);uint64_t addInvocationsExclusiveScanAMD(uint64_t);u64vec2  addInvocationsExclusiveScanAMD(u64vec2);u64vec3  addInvocationsExclusiveScanAMD(u64vec3);u64vec4  addInvocationsExclusiveScanAMD(u64vec4);float16_t addInvocationsExclusiveScanAMD(float16_t);f16vec2   addInvocationsExclusiveScanAMD(f16vec2);f16vec3   addInvocationsExclusiveScanAMD(f16vec3);f16vec4   addInvocationsExclusiveScanAMD(f16vec4);int16_t addInvocationsExclusiveScanAMD(int16_t);i16vec2 addInvocationsExclusiveScanAMD(i16vec2);i16vec3 addInvocationsExclusiveScanAMD(i16vec3);i16vec4 addInvocationsExclusiveScanAMD(i16vec4);uint16_t addInvocationsExclusiveScanAMD(uint16_t);u16vec2  addInvocationsExclusiveScanAMD(u16vec2);u16vec3  addInvocationsExclusiveScanAMD(u16vec3);u16vec4  addInvocationsExclusiveScanAMD(u16vec4);float minInvocationsNonUniformAMD(float);vec2  minInvocationsNonUniformAMD(vec2);vec3  minInvocationsNonUniformAMD(vec3);vec4  minInvocationsNonUniformAMD(vec4);int   minInvocationsNonUniformAMD(int);ivec2 minInvocationsNonUniformAMD(ivec2);ivec3 minInvocationsNonUniformAMD(ivec3);ivec4 minInvocationsNonUniformAMD(ivec4);uint  minInvocationsNonUniformAMD(uint);uvec2 minInvocationsNonUniformAMD(uvec2);uvec3 minInvocationsNonUniformAMD(uvec3);uvec4 minInvocationsNonUniformAMD(uvec4);double minInvocationsNonUniformAMD(double);dvec2  minInvocationsNonUniformAMD(dvec2);dvec3  minInvocationsNonUniformAMD(dvec3);dvec4  minInvocationsNonUniformAMD(dvec4);int64_t minInvocationsNonUniformAMD(int64_t);i64vec2 minInvocationsNonUniformAMD(i64vec2);i64vec3 minInvocationsNonUniformAMD(i64vec3);i64vec4 minInvocationsNonUniformAMD(i64vec4);uint64_t minInvocationsNonUniformAMD(uint64_t);u64vec2  minInvocationsNonUniformAMD(u64vec2);u64vec3  minInvocationsNonUniformAMD(u64vec3);u64vec4  minInvocationsNonUniformAMD(u64vec4);float16_t minInvocationsNonUniformAMD(float16_t);f16vec2   minInvocationsNonUniformAMD(f16vec2);f16vec3   minInvocationsNonUniformAMD(f16vec3);f16vec4   minInvocationsNonUniformAMD(f16vec4);int16_t minInvocationsNonUniformAMD(int16_t);i16vec2 minInvocationsNonUniformAMD(i16vec2);i16vec3 minInvocationsNonUniformAMD(i16vec3);i16vec4 minInvocationsNonUniformAMD(i16vec4);uint16_t minInvocationsNonUniformAMD(uint16_t);u16vec2  minInvocationsNonUniformAMD(u16vec2);u16vec3  minInvocationsNonUniformAMD(u16vec3);u16vec4  minInvocationsNonUniformAMD(u16vec4);float minInvocationsInclusiveScanNonUniformAMD(float);vec2  minInvocationsInclusiveScanNonUniformAMD(vec2);vec3  minInvocationsInclusiveScanNonUniformAMD(vec3);vec4  minInvocationsInclusiveScanNonUniformAMD(vec4);int   minInvocationsInclusiveScanNonUniformAMD(int);ivec2 minInvocationsInclusiveScanNonUniformAMD(ivec2);ivec3 minInvocationsInclusiveScanNonUniformAMD(ivec3);ivec4 minInvocationsInclusiveScanNonUniformAMD(ivec4);uint  minInvocationsInclusiveScanNonUniformAMD(uint);uvec2 minInvocationsInclusiveScanNonUniformAMD(uvec2);uvec3 minInvocationsInclusiveScanNonUniformAMD(uvec3);uvec4 minInvocationsInclusiveScanNonUniformAMD(uvec4);double minInvocationsInclusiveScanNonUniformAMD(double);dvec2  minInvocationsInclusiveScanNonUniformAMD(dvec2);dvec3  minInvocationsInclusiveScanNonUniformAMD(dvec3);dvec4  minInvocationsInclusiveScanNonUniformAMD(dvec4);int64_t minInvocationsInclusiveScanNonUniformAMD(int64_t);i64vec2 minInvocationsInclusiveScanNonUniformAMD(i64vec2);i64vec3 minInvocationsInclusiveScanNonUniformAMD(i64vec3);i64vec4 minInvocationsInclusiveScanNonUniformAMD(i64vec4);uint64_t minInvocationsInclusiveScanNonUniformAMD(uint64_t);u64vec2  minInvocationsInclusiveScanNonUniformAMD(u64vec2);u64vec3  minInvocationsInclusiveScanNonUniformAMD(u64vec3);u64vec4  minInvocationsInclusiveScanNonUniformAMD(u64vec4);float16_t minInvocationsInclusiveScanNonUniformAMD(float16_t);f16vec2   minInvocationsInclusiveScanNonUniformAMD(f16vec2);f16vec3   minInvocationsInclusiveScanNonUniformAMD(f16vec3);f16vec4   minInvocationsInclusiveScanNonUniformAMD(f16vec4);int16_t minInvocationsInclusiveScanNonUniformAMD(int16_t);i16vec2 minInvocationsInclusiveScanNonUniformAMD(i16vec2);i16vec3 minInvocationsInclusiveScanNonUniformAMD(i16vec3);i16vec4 minInvocationsInclusiveScanNonUniformAMD(i16vec4);uint16_t minInvocationsInclusiveScanNonUniformAMD(uint16_t);u16vec2  minInvocationsInclusiveScanNonUniformAMD(u16vec2);u16vec3  minInvocationsInclusiveScanNonUniformAMD(u16vec3);u16vec4  minInvocationsInclusiveScanNonUniformAMD(u16vec4);float minInvocationsExclusiveScanNonUniformAMD(float);vec2  minInvocationsExclusiveScanNonUniformAMD(vec2);vec3  minInvocationsExclusiveScanNonUniformAMD(vec3);vec4  minInvocationsExclusiveScanNonUniformAMD(vec4);int   minInvocationsExclusiveScanNonUniformAMD(int);ivec2 minInvocationsExclusiveScanNonUniformAMD(ivec2);ivec3 minInvocationsExclusiveScanNonUniformAMD(ivec3);ivec4 minInvocationsExclusiveScanNonUniformAMD(ivec4);uint  minInvocationsExclusiveScanNonUniformAMD(uint);uvec2 minInvocationsExclusiveScanNonUniformAMD(uvec2);uvec3 minInvocationsExclusiveScanNonUniformAMD(uvec3);uvec4 minInvocationsExclusiveScanNonUniformAMD(uvec4);double minInvocationsExclusiveScanNonUniformAMD(double);dvec2  minInvocationsExclusiveScanNonUniformAMD(dvec2);dvec3  minInvocationsExclusiveScanNonUniformAMD(dvec3);dvec4  minInvocationsExclusiveScanNonUniformAMD(dvec4);int64_t minInvocationsExclusiveScanNonUniformAMD(int64_t);i64vec2 minInvocationsExclusiveScanNonUniformAMD(i64vec2);i64vec3 minInvocationsExclusiveScanNonUniformAMD(i64vec3);i64vec4 minInvocationsExclusiveScanNonUniformAMD(i64vec4);uint64_t minInvocationsExclusiveScanNonUniformAMD(uint64_t);u64vec2  minInvocationsExclusiveScanNonUniformAMD(u64vec2);u64vec3  minInvocationsExclusiveScanNonUniformAMD(u64vec3);u64vec4  minInvocationsExclusiveScanNonUniformAMD(u64vec4);float16_t minInvocationsExclusiveScanNonUniformAMD(float16_t);f16vec2   minInvocationsExclusiveScanNonUniformAMD(f16vec2);f16vec3   minInvocationsExclusiveScanNonUniformAMD(f16vec3);f16vec4   minInvocationsExclusiveScanNonUniformAMD(f16vec4);int16_t minInvocationsExclusiveScanNonUniformAMD(int16_t);i16vec2 minInvocationsExclusiveScanNonUniformAMD(i16vec2);i16vec3 minInvocationsExclusiveScanNonUniformAMD(i16vec3);i16vec4 minInvocationsExclusiveScanNonUniformAMD(i16vec4);uint16_t minInvocationsExclusiveScanNonUniformAMD(uint16_t);u16vec2  minInvocationsExclusiveScanNonUniformAMD(u16vec2);u16vec3  minInvocationsExclusiveScanNonUniformAMD(u16vec3);u16vec4  minInvocationsExclusiveScanNonUniformAMD(u16vec4);float maxInvocationsNonUniformAMD(float);vec2  maxInvocationsNonUniformAMD(vec2);vec3  maxInvocationsNonUniformAMD(vec3);vec4  maxInvocationsNonUniformAMD(vec4);int   maxInvocationsNonUniformAMD(int);ivec2 maxInvocationsNonUniformAMD(ivec2);ivec3 maxInvocationsNonUniformAMD(ivec3);ivec4 maxInvocationsNonUniformAMD(ivec4);uint  maxInvocationsNonUniformAMD(uint);uvec2 maxInvocationsNonUniformAMD(uvec2);uvec3 maxInvocationsNonUniformAMD(uvec3);uvec4 maxInvocationsNonUniformAMD(uvec4);double maxInvocationsNonUniformAMD(double);dvec2  maxInvocationsNonUniformAMD(dvec2);dvec3  maxInvocationsNonUniformAMD(dvec3);dvec4  maxInvocationsNonUniformAMD(dvec4);int64_t maxInvocationsNonUniformAMD(int64_t);i64vec2 maxInvocationsNonUniformAMD(i64vec2);i64vec3 maxInvocationsNonUniformAMD(i64vec3);i64vec4 maxInvocationsNonUniformAMD(i64vec4);uint64_t maxInvocationsNonUniformAMD(uint64_t);u64vec2  maxInvocationsNonUniformAMD(u64vec2);u64vec3  maxInvocationsNonUniformAMD(u64vec3);u64vec4  maxInvocationsNonUniformAMD(u64vec4);float16_t maxInvocationsNonUniformAMD(float16_t);f16vec2   maxInvocationsNonUniformAMD(f16vec2);f16vec3   maxInvocationsNonUniformAMD(f16vec3);f16vec4   maxInvocationsNonUniformAMD(f16vec4);int16_t maxInvocationsNonUniformAMD(int16_t);i16vec2 maxInvocationsNonUniformAMD(i16vec2);i16vec3 maxInvocationsNonUniformAMD(i16vec3);i16vec4 maxInvocationsNonUniformAMD(i16vec4);uint16_t maxInvocationsNonUniformAMD(uint16_t);u16vec2  maxInvocationsNonUniformAMD(u16vec2);u16vec3  maxInvocationsNonUniformAMD(u16vec3);u16vec4  maxInvocationsNonUniformAMD(u16vec4);float maxInvocationsInclusiveScanNonUniformAMD(float);vec2  maxInvocationsInclusiveScanNonUniformAMD(vec2);vec3  maxInvocationsInclusiveScanNonUniformAMD(vec3);vec4  maxInvocationsInclusiveScanNonUniformAMD(vec4);int   maxInvocationsInclusiveScanNonUniformAMD(int);ivec2 maxInvocationsInclusiveScanNonUniformAMD(ivec2);ivec3 maxInvocationsInclusiveScanNonUniformAMD(ivec3);ivec4 maxInvocationsInclusiveScanNonUniformAMD(ivec4);uint  maxInvocationsInclusiveScanNonUniformAMD(uint);uvec2 maxInvocationsInclusiveScanNonUniformAMD(uvec2);uvec3 maxInvocationsInclusiveScanNonUniformAMD(uvec3);uvec4 maxInvocationsInclusiveScanNonUniformAMD(uvec4);double maxInvocationsInclusiveScanNonUniformAMD(double);dvec2  maxInvocationsInclusiveScanNonUniformAMD(dvec2);dvec3  maxInvocationsInclusiveScanNonUniformAMD(dvec3);dvec4  maxInvocationsInclusiveScanNonUniformAMD(dvec4);int64_t maxInvocationsInclusiveScanNonUniformAMD(int64_t);i64vec2 maxInvocationsInclusiveScanNonUniformAMD(i64vec2);i64vec3 maxInvocationsInclusiveScanNonUniformAMD(i64vec3);i64vec4 maxInvocationsInclusiveScanNonUniformAMD(i64vec4);uint64_t maxInvocationsInclusiveScanNonUniformAMD(uint64_t);u64vec2  maxInvocationsInclusiveScanNonUniformAMD(u64vec2);u64vec3  maxInvocationsInclusiveScanNonUniformAMD(u64vec3);u64vec4  maxInvocationsInclusiveScanNonUniformAMD(u64vec4);float16_t maxInvocationsInclusiveScanNonUniformAMD(float16_t);f16vec2   maxInvocationsInclusiveScanNonUniformAMD(f16vec2);f16vec3   maxInvocationsInclusiveScanNonUniformAMD(f16vec3);f16vec4   maxInvocationsInclusiveScanNonUniformAMD(f16vec4);int16_t maxInvocationsInclusiveScanNonUniformAMD(int16_t);i16vec2 maxInvocationsInclusiveScanNonUniformAMD(i16vec2);i16vec3 maxInvocationsInclusiveScanNonUniformAMD(i16vec3);i16vec4 maxInvocationsInclusiveScanNonUniformAMD(i16vec4);uint16_t maxInvocationsInclusiveScanNonUniformAMD(uint16_t);u16vec2  maxInvocationsInclusiveScanNonUniformAMD(u16vec2);u16vec3  maxInvocationsInclusiveScanNonUniformAMD(u16vec3);u16vec4  maxInvocationsInclusiveScanNonUniformAMD(u16vec4);float maxInvocationsExclusiveScanNonUniformAMD(float);vec2  maxInvocationsExclusiveScanNonUniformAMD(vec2);vec3  maxInvocationsExclusiveScanNonUniformAMD(vec3);vec4  maxInvocationsExclusiveScanNonUniformAMD(vec4);int   maxInvocationsExclusiveScanNonUniformAMD(int);ivec2 maxInvocationsExclusiveScanNonUniformAMD(ivec2);ivec3 maxInvocationsExclusiveScanNonUniformAMD(ivec3);ivec4 maxInvocationsExclusiveScanNonUniformAMD(ivec4);uint  maxInvocationsExclusiveScanNonUniformAMD(uint);uvec2 maxInvocationsExclusiveScanNonUniformAMD(uvec2);uvec3 maxInvocationsExclusiveScanNonUniformAMD(uvec3);uvec4 maxInvocationsExclusiveScanNonUniformAMD(uvec4);double maxInvocationsExclusiveScanNonUniformAMD(double);dvec2  maxInvocationsExclusiveScanNonUniformAMD(dvec2);dvec3  maxInvocationsExclusiveScanNonUniformAMD(dvec3);dvec4  maxInvocationsExclusiveScanNonUniformAMD(dvec4);int64_t maxInvocationsExclusiveScanNonUniformAMD(int64_t);i64vec2 maxInvocationsExclusiveScanNonUniformAMD(i64vec2);i64vec3 maxInvocationsExclusiveScanNonUniformAMD(i64vec3);i64vec4 maxInvocationsExclusiveScanNonUniformAMD(i64vec4);uint64_t maxInvocationsExclusiveScanNonUniformAMD(uint64_t);u64vec2  maxInvocationsExclusiveScanNonUniformAMD(u64vec2);u64vec3  maxInvocationsExclusiveScanNonUniformAMD(u64vec3);u64vec4  maxInvocationsExclusiveScanNonUniformAMD(u64vec4);float16_t maxInvocationsExclusiveScanNonUniformAMD(float16_t);f16vec2   maxInvocationsExclusiveScanNonUniformAMD(f16vec2);f16vec3   maxInvocationsExclusiveScanNonUniformAMD(f16vec3);f16vec4   maxInvocationsExclusiveScanNonUniformAMD(f16vec4);int16_t maxInvocationsExclusiveScanNonUniformAMD(int16_t);i16vec2 maxInvocationsExclusiveScanNonUniformAMD(i16vec2);i16vec3 maxInvocationsExclusiveScanNonUniformAMD(i16vec3);i16vec4 maxInvocationsExclusiveScanNonUniformAMD(i16vec4);uint16_t maxInvocationsExclusiveScanNonUniformAMD(uint16_t);u16vec2  maxInvocationsExclusiveScanNonUniformAMD(u16vec2);u16vec3  maxInvocationsExclusiveScanNonUniformAMD(u16vec3);u16vec4  maxInvocationsExclusiveScanNonUniformAMD(u16vec4);float addInvocationsNonUniformAMD(float);vec2  addInvocationsNonUniformAMD(vec2);vec3  addInvocationsNonUniformAMD(vec3);vec4  addInvocationsNonUniformAMD(vec4);int   addInvocationsNonUniformAMD(int);ivec2 addInvocationsNonUniformAMD(ivec2);ivec3 addInvocationsNonUniformAMD(ivec3);ivec4 addInvocationsNonUniformAMD(ivec4);uint  addInvocationsNonUniformAMD(uint);uvec2 addInvocationsNonUniformAMD(uvec2);uvec3 addInvocationsNonUniformAMD(uvec3);uvec4 addInvocationsNonUniformAMD(uvec4);double addInvocationsNonUniformAMD(double);dvec2  addInvocationsNonUniformAMD(dvec2);dvec3  addInvocationsNonUniformAMD(dvec3);dvec4  addInvocationsNonUniformAMD(dvec4);int64_t addInvocationsNonUniformAMD(int64_t);i64vec2 addInvocationsNonUniformAMD(i64vec2);i64vec3 addInvocationsNonUniformAMD(i64vec3);i64vec4 addInvocationsNonUniformAMD(i64vec4);uint64_t addInvocationsNonUniformAMD(uint64_t);u64vec2  addInvocationsNonUniformAMD(u64vec2);u64vec3  addInvocationsNonUniformAMD(u64vec3);u64vec4  addInvocationsNonUniformAMD(u64vec4);float16_t addInvocationsNonUniformAMD(float16_t);f16vec2   addInvocationsNonUniformAMD(f16vec2);f16vec3   addInvocationsNonUniformAMD(f16vec3);f16vec4   addInvocationsNonUniformAMD(f16vec4);int16_t addInvocationsNonUniformAMD(int16_t);i16vec2 addInvocationsNonUniformAMD(i16vec2);i16vec3 addInvocationsNonUniformAMD(i16vec3);i16vec4 addInvocationsNonUniformAMD(i16vec4);uint16_t addInvocationsNonUniformAMD(uint16_t);u16vec2  addInvocationsNonUniformAMD(u16vec2);u16vec3  addInvocationsNonUniformAMD(u16vec3);u16vec4  addInvocationsNonUniformAMD(u16vec4);float addInvocationsInclusiveScanNonUniformAMD(float);vec2  addInvocationsInclusiveScanNonUniformAMD(vec2);vec3  addInvocationsInclusiveScanNonUniformAMD(vec3);vec4  addInvocationsInclusiveScanNonUniformAMD(vec4);int   addInvocationsInclusiveScanNonUniformAMD(int);ivec2 addInvocationsInclusiveScanNonUniformAMD(ivec2);ivec3 addInvocationsInclusiveScanNonUniformAMD(ivec3);ivec4 addInvocationsInclusiveScanNonUniformAMD(ivec4);uint  addInvocationsInclusiveScanNonUniformAMD(uint);uvec2 addInvocationsInclusiveScanNonUniformAMD(uvec2);uvec3 addInvocationsInclusiveScanNonUniformAMD(uvec3);uvec4 addInvocationsInclusiveScanNonUniformAMD(uvec4);double addInvocationsInclusiveScanNonUniformAMD(double);dvec2  addInvocationsInclusiveScanNonUniformAMD(dvec2);dvec3  addInvocationsInclusiveScanNonUniformAMD(dvec3);dvec4  addInvocationsInclusiveScanNonUniformAMD(dvec4);int64_t addInvocationsInclusiveScanNonUniformAMD(int64_t);i64vec2 addInvocationsInclusiveScanNonUniformAMD(i64vec2);i64vec3 addInvocationsInclusiveScanNonUniformAMD(i64vec3);i64vec4 addInvocationsInclusiveScanNonUniformAMD(i64vec4);uint64_t addInvocationsInclusiveScanNonUniformAMD(uint64_t);u64vec2  addInvocationsInclusiveScanNonUniformAMD(u64vec2);u64vec3  addInvocationsInclusiveScanNonUniformAMD(u64vec3);u64vec4  addInvocationsInclusiveScanNonUniformAMD(u64vec4);float16_t addInvocationsInclusiveScanNonUniformAMD(float16_t);f16vec2   addInvocationsInclusiveScanNonUniformAMD(f16vec2);f16vec3   addInvocationsInclusiveScanNonUniformAMD(f16vec3);f16vec4   addInvocationsInclusiveScanNonUniformAMD(f16vec4);int16_t addInvocationsInclusiveScanNonUniformAMD(int16_t);i16vec2 addInvocationsInclusiveScanNonUniformAMD(i16vec2);i16vec3 addInvocationsInclusiveScanNonUniformAMD(i16vec3);i16vec4 addInvocationsInclusiveScanNonUniformAMD(i16vec4);uint16_t addInvocationsInclusiveScanNonUniformAMD(uint16_t);u16vec2  addInvocationsInclusiveScanNonUniformAMD(u16vec2);u16vec3  addInvocationsInclusiveScanNonUniformAMD(u16vec3);u16vec4  addInvocationsInclusiveScanNonUniformAMD(u16vec4);float addInvocationsExclusiveScanNonUniformAMD(float);vec2  addInvocationsExclusiveScanNonUniformAMD(vec2);vec3  addInvocationsExclusiveScanNonUniformAMD(vec3);vec4  addInvocationsExclusiveScanNonUniformAMD(vec4);int   addInvocationsExclusiveScanNonUniformAMD(int);ivec2 addInvocationsExclusiveScanNonUniformAMD(ivec2);ivec3 addInvocationsExclusiveScanNonUniformAMD(ivec3);ivec4 addInvocationsExclusiveScanNonUniformAMD(ivec4);uint  addInvocationsExclusiveScanNonUniformAMD(uint);uvec2 addInvocationsExclusiveScanNonUniformAMD(uvec2);uvec3 addInvocationsExclusiveScanNonUniformAMD(uvec3);uvec4 addInvocationsExclusiveScanNonUniformAMD(uvec4);double addInvocationsExclusiveScanNonUniformAMD(double);dvec2  addInvocationsExclusiveScanNonUniformAMD(dvec2);dvec3  addInvocationsExclusiveScanNonUniformAMD(dvec3);dvec4  addInvocationsExclusiveScanNonUniformAMD(dvec4);int64_t addInvocationsExclusiveScanNonUniformAMD(int64_t);i64vec2 addInvocationsExclusiveScanNonUniformAMD(i64vec2);i64vec3 addInvocationsExclusiveScanNonUniformAMD(i64vec3);i64vec4 addInvocationsExclusiveScanNonUniformAMD(i64vec4);uint64_t addInvocationsExclusiveScanNonUniformAMD(uint64_t);u64vec2  addInvocationsExclusiveScanNonUniformAMD(u64vec2);u64vec3  addInvocationsExclusiveScanNonUniformAMD(u64vec3);u64vec4  addInvocationsExclusiveScanNonUniformAMD(u64vec4);float16_t addInvocationsExclusiveScanNonUniformAMD(float16_t);f16vec2   addInvocationsExclusiveScanNonUniformAMD(f16vec2);f16vec3   addInvocationsExclusiveScanNonUniformAMD(f16vec3);f16vec4   addInvocationsExclusiveScanNonUniformAMD(f16vec4);int16_t addInvocationsExclusiveScanNonUniformAMD(int16_t);i16vec2 addInvocationsExclusiveScanNonUniformAMD(i16vec2);i16vec3 addInvocationsExclusiveScanNonUniformAMD(i16vec3);i16vec4 addInvocationsExclusiveScanNonUniformAMD(i16vec4);uint16_t addInvocationsExclusiveScanNonUniformAMD(uint16_t);u16vec2  addInvocationsExclusiveScanNonUniformAMD(u16vec2);u16vec3  addInvocationsExclusiveScanNonUniformAMD(u16vec3);u16vec4  addInvocationsExclusiveScanNonUniformAMD(u16vec4);float swizzleInvocationsAMD(float, uvec4);vec2  swizzleInvocationsAMD(vec2,  uvec4);vec3  swizzleInvocationsAMD(vec3,  uvec4);vec4  swizzleInvocationsAMD(vec4,  uvec4);int   swizzleInvocationsAMD(int,   uvec4);ivec2 swizzleInvocationsAMD(ivec2, uvec4);ivec3 swizzleInvocationsAMD(ivec3, uvec4);ivec4 swizzleInvocationsAMD(ivec4, uvec4);uint  swizzleInvocationsAMD(uint,  uvec4);uvec2 swizzleInvocationsAMD(uvec2, uvec4);uvec3 swizzleInvocationsAMD(uvec3, uvec4);uvec4 swizzleInvocationsAMD(uvec4, uvec4);float swizzleInvocationsMaskedAMD(float, uvec3);vec2  swizzleInvocationsMaskedAMD(vec2,  uvec3);vec3  swizzleInvocationsMaskedAMD(vec3,  uvec3);vec4  swizzleInvocationsMaskedAMD(vec4,  uvec3);int   swizzleInvocationsMaskedAMD(int,   uvec3);ivec2 swizzleInvocationsMaskedAMD(ivec2, uvec3);ivec3 swizzleInvocationsMaskedAMD(ivec3, uvec3);ivec4 swizzleInvocationsMaskedAMD(ivec4, uvec3);uint  swizzleInvocationsMaskedAMD(uint,  uvec3);uvec2 swizzleInvocationsMaskedAMD(uvec2, uvec3);uvec3 swizzleInvocationsMaskedAMD(uvec3, uvec3);uvec4 swizzleInvocationsMaskedAMD(uvec4, uvec3);float writeInvocationAMD(float, float, uint);vec2  writeInvocationAMD(vec2,  vec2,  uint);vec3  writeInvocationAMD(vec3,  vec3,  uint);vec4  writeInvocationAMD(vec4,  vec4,  uint);int   writeInvocationAMD(int,   int,   uint);ivec2 writeInvocationAMD(ivec2, ivec2, uint);ivec3 writeInvocationAMD(ivec3, ivec3, uint);ivec4 writeInvocationAMD(ivec4, ivec4, uint);uint  writeInvocationAMD(uint,  uint,  uint);uvec2 writeInvocationAMD(uvec2, uvec2, uint);uvec3 writeInvocationAMD(uvec3, uvec3, uint);uvec4 writeInvocationAMD(uvec4, uvec4, uint);uint mbcntAMD(uint64_t);
float near;float far;float diff;
float noise1(float x);float noise1(vec2  x);float noise1(vec3  x);float noise1(vec4  x);vec2 noise2(float x);vec2 noise2(vec2  x);vec2 noise2(vec3  x);vec2 noise2(vec4  x);vec3 noise3(float x);vec3 noise3(vec2  x);vec3 noise3(vec3  x);vec3 noise3(vec4  x);vec4 noise4(float x);vec4 noise4(vec2  x);vec4 noise4(vec3  x);vec4 noise4(vec4  x);
float overflow
float posDot(vec3 a, vec3 b){    return max(dot(a, b), 0.0);}vec4 doLighting(vec4 currentFragment){    vec4 materialAmbientActual = material_ambient;    vec4 materialDiffuseActual = material_diffuse;    if (enable_color_material || enable_texture_2d[0] || enable_texture_cube_map[0])    {        materialAmbientActual = currentFragment;        materialDiffuseActual = currentFragment;    }    vec4 lightingResult = material_emissive + materialAmbientActual * light_model_scene_ambient;    for (int i = 0; i < kMaxLights; i++)    {        if (!light_enables[i])            continue;        vec4 lightAmbient  = light_ambients[i];        vec4 lightDiffuse  = light_diffuses[i];        vec4 lightSpecular = light_speculars[i];        vec4 lightPos      = light_positions[i];        vec3 lightDir      = light_directions[i];        float attConst     = light_attenuation_consts[i];        float attLinear    = light_attenuation_linears[i];        float attQuadratic = light_attenuation_quadratics[i];        float spotAngle    = light_spotlight_cutoff_angles[i];        float spotExponent = light_spotlight_exponents[i];        vec3 toLight;        if (lightPos.w == 0.0)        {            toLight = lightPos.xyz;        }        else        {            toLight = (lightPos.xyz / lightPos.w - pos_varying.xyz);        }        float lightDist = length(toLight);        vec3 h          = normalize(toLight) + vec3(0.0, 0.0, 1.0);        float ndotL     = posDot(normal_varying, normalize(toLight));        float ndoth     = posDot(normal_varying, normalize(h));        float specAtt;        if (ndotL != 0.0)        {            specAtt = 1.0;        }        else        {            specAtt = 0.0;        }        float att;        if (lightPos.w != 0.0)        {            float attDenom =                (attConst + attLinear * lightDist + attQuadratic * lightDist * lightDist);            att = 1.0 / attDenom;        }        else        {            att = 1.0;        }        float spot;        float spotAngleCos = cos(radians(spotAngle));        vec3 toSurfaceDir  = -normalize(toLight);        float spotDot      = posDot(toSurfaceDir, normalize(lightDir));        if (spotAngle == 180.0 || lightPos.w == 0.0)        {            spot = 1.0;        }        else        {            if (spotDot < spotAngleCos)            {                spot = 0.0;            }            else            {                spot = pow(spotDot, spotExponent);            }        }        vec4 contrib = materialAmbientActual * lightAmbient;        contrib += ndotL * materialDiffuseActual * lightDiffuse;        if (ndoth > 0.0 && material_specular_exponent > 0.0)        {            contrib += specAtt * pow(ndoth, material_specular_exponent) * material_specular *                       lightSpecular;        }        else        {            if (ndoth > 0.0)            {                contrib += specAtt * material_specular * lightSpecular;            }        }        contrib *= att * spot;        lightingResult += contrib;    }    return lightingResult;}bool doAlphaTest(vec4 currentFragment){    bool shouldPassAlpha = false;    float incAlpha       = currentFragment.a;    switch (alpha_func)    {        case kNever:            shouldPassAlpha = false;            break;        case kLess:            shouldPassAlpha = incAlpha < alpha_test_ref;            break;        case kLequal:            shouldPassAlpha = incAlpha <= alpha_test_ref;            break;        case kEqual:            shouldPassAlpha = incAlpha == alpha_test_ref;            break;        case kGequal:            shouldPassAlpha = incAlpha >= alpha_test_ref;            break;        case kGreater:            shouldPassAlpha = incAlpha > alpha_test_ref;            break;        case kNotequal:            shouldPassAlpha = incAlpha != alpha_test_ref;            break;        case kAlways:        default:            shouldPassAlpha = true;            break;    }    return shouldPassAlpha;}bool doClipPlaneTest(){    bool res = true;    for (int i = 0; i < kMaxClipPlanes; i++)    {        if (clip_plane_enables[i])        {            float dist = dot(clip_planes[i].xyz, pos_varying.xyz) + clip_planes[i].w * pos_varying.w;            res        = res && (dist >= 0.0);        }    }    return res;}vec4 doFog(vec4 currentFragment){    float eyeDist = -pos_varying.z / pos_varying.w;    float f       = 1.0;    switch (fog_mode)    {        case kExp:            f = exp(-fog_density * eyeDist);            break;        case kExp2:            f = exp(-(pow(fog_density * eyeDist, 2.0)));            break;        case kLinear:            f = (fog_end - eyeDist) / (fog_end - fog_start);            break;        default:            break;    }    vec4 result = f * currentFragment + (1.0 - f) * fog_color;    return result;}
float std::__1::__num_get_float<float>(char const*, char const*, unsigned int&)
float16 types can only be in uniform block or buffer storage
float16BitsToInt16
float16BitsToUint16
float16_t
float16_t dFdx(float16_t);f16vec2   dFdx(f16vec2);f16vec3   dFdx(f16vec3);f16vec4   dFdx(f16vec4);float16_t dFdy(float16_t);f16vec2   dFdy(f16vec2);f16vec3   dFdy(f16vec3);f16vec4   dFdy(f16vec4);float16_t dFdxFine(float16_t);f16vec2   dFdxFine(f16vec2);f16vec3   dFdxFine(f16vec3);f16vec4   dFdxFine(f16vec4);float16_t dFdyFine(float16_t);f16vec2   dFdyFine(f16vec2);f16vec3   dFdyFine(f16vec3);f16vec4   dFdyFine(f16vec4);float16_t dFdxCoarse(float16_t);f16vec2   dFdxCoarse(f16vec2);f16vec3   dFdxCoarse(f16vec3);f16vec4   dFdxCoarse(f16vec4);float16_t dFdyCoarse(float16_t);f16vec2   dFdyCoarse(f16vec2);f16vec3   dFdyCoarse(f16vec3);f16vec4   dFdyCoarse(f16vec4);float16_t fwidth(float16_t);f16vec2   fwidth(f16vec2);f16vec3   fwidth(f16vec3);f16vec4   fwidth(f16vec4);float16_t fwidthFine(float16_t);f16vec2   fwidthFine(f16vec2);f16vec3   fwidthFine(f16vec3);f16vec4   fwidthFine(f16vec4);float16_t fwidthCoarse(float16_t);f16vec2   fwidthCoarse(f16vec2);f16vec3   fwidthCoarse(f16vec3);f16vec4   fwidthCoarse(f16vec4);
float16_t interpolateAtCentroid(float16_t);f16vec2   interpolateAtCentroid(f16vec2);f16vec3   interpolateAtCentroid(f16vec3);f16vec4   interpolateAtCentroid(f16vec4);float16_t interpolateAtSample(float16_t, int);f16vec2   interpolateAtSample(f16vec2,   int);f16vec3   interpolateAtSample(f16vec3,   int);f16vec4   interpolateAtSample(f16vec4,   int);float16_t interpolateAtOffset(float16_t, f16vec2);f16vec2   interpolateAtOffset(f16vec2,   f16vec2);f16vec3   interpolateAtOffset(f16vec3,   f16vec2);f16vec4   interpolateAtOffset(f16vec4,   f16vec2);
float16_t radians(float16_t);f16vec2   radians(f16vec2);f16vec3   radians(f16vec3);f16vec4   radians(f16vec4);float16_t degrees(float16_t);f16vec2   degrees(f16vec2);f16vec3   degrees(f16vec3);f16vec4   degrees(f16vec4);float16_t sin(float16_t);f16vec2   sin(f16vec2);f16vec3   sin(f16vec3);f16vec4   sin(f16vec4);float16_t cos(float16_t);f16vec2   cos(f16vec2);f16vec3   cos(f16vec3);f16vec4   cos(f16vec4);float16_t tan(float16_t);f16vec2   tan(f16vec2);f16vec3   tan(f16vec3);f16vec4   tan(f16vec4);float16_t asin(float16_t);f16vec2   asin(f16vec2);f16vec3   asin(f16vec3);f16vec4   asin(f16vec4);float16_t acos(float16_t);f16vec2   acos(f16vec2);f16vec3   acos(f16vec3);f16vec4   acos(f16vec4);float16_t atan(float16_t, float16_t);f16vec2   atan(f16vec2,   f16vec2);f16vec3   atan(f16vec3,   f16vec3);f16vec4   atan(f16vec4,   f16vec4);float16_t atan(float16_t);f16vec2   atan(f16vec2);f16vec3   atan(f16vec3);f16vec4   atan(f16vec4);float16_t sinh(float16_t);f16vec2   sinh(f16vec2);f16vec3   sinh(f16vec3);f16vec4   sinh(f16vec4);float16_t cosh(float16_t);f16vec2   cosh(f16vec2);f16vec3   cosh(f16vec3);f16vec4   cosh(f16vec4);float16_t tanh(float16_t);f16vec2   tanh(f16vec2);f16vec3   tanh(f16vec3);f16vec4   tanh(f16vec4);float16_t asinh(float16_t);f16vec2   asinh(f16vec2);f16vec3   asinh(f16vec3);f16vec4   asinh(f16vec4);float16_t acosh(float16_t);f16vec2   acosh(f16vec2);f16vec3   acosh(f16vec3);f16vec4   acosh(f16vec4);float16_t atanh(float16_t);f16vec2   atanh(f16vec2);f16vec3   atanh(f16vec3);f16vec4   atanh(f16vec4);float16_t pow(float16_t, float16_t);f16vec2   pow(f16vec2,   f16vec2);f16vec3   pow(f16vec3,   f16vec3);f16vec4   pow(f16vec4,   f16vec4);float16_t exp(float16_t);f16vec2   exp(f16vec2);f16vec3   exp(f16vec3);f16vec4   exp(f16vec4);float16_t log(float16_t);f16vec2   log(f16vec2);f16vec3   log(f16vec3);f16vec4   log(f16vec4);float16_t exp2(float16_t);f16vec2   exp2(f16vec2);f16vec3   exp2(f16vec3);f16vec4   exp2(f16vec4);float16_t log2(float16_t);f16vec2   log2(f16vec2);f16vec3   log2(f16vec3);f16vec4   log2(f16vec4);float16_t sqrt(float16_t);f16vec2   sqrt(f16vec2);f16vec3   sqrt(f16vec3);f16vec4   sqrt(f16vec4);float16_t inversesqrt(float16_t);f16vec2   inversesqrt(f16vec2);f16vec3   inversesqrt(f16vec3);f16vec4   inversesqrt(f16vec4);float16_t abs(float16_t);f16vec2   abs(f16vec2);f16vec3   abs(f16vec3);f16vec4   abs(f16vec4);float16_t sign(float16_t);f16vec2   sign(f16vec2);f16vec3   sign(f16vec3);f16vec4   sign(f16vec4);float16_t floor(float16_t);f16vec2   floor(f16vec2);f16vec3   floor(f16vec3);f16vec4   floor(f16vec4);float16_t trunc(float16_t);f16vec2   trunc(f16vec2);f16vec3   trunc(f16vec3);f16vec4   trunc(f16vec4);float16_t round(float16_t);f16vec2   round(f16vec2);f16vec3   round(f16vec3);f16vec4   round(f16vec4);float16_t roundEven(float16_t);f16vec2   roundEven(f16vec2);f16vec3   roundEven(f16vec3);f16vec4   roundEven(f16vec4);float16_t ceil(float16_t);f16vec2   ceil(f16vec2);f16vec3   ceil(f16vec3);f16vec4   ceil(f16vec4);float16_t fract(float16_t);f16vec2   fract(f16vec2);f16vec3   fract(f16vec3);f16vec4   fract(f16vec4);float16_t mod(float16_t, float16_t);f16vec2   mod(f16vec2,   float16_t);f16vec3   mod(f16vec3,   float16_t);f16vec4   mod(f16vec4,   float16_t);f16vec2   mod(f16vec2,   f16vec2);f16vec3   mod(f16vec3,   f16vec3);f16vec4   mod(f16vec4,   f16vec4);float16_t modf(float16_t, out float16_t);f16vec2   modf(f16vec2,   out f16vec2);f16vec3   modf(f16vec3,   out f16vec3);f16vec4   modf(f16vec4,   out f16vec4);float16_t min(float16_t, float16_t);f16vec2   min(f16vec2,   float16_t);f16vec3   min(f16vec3,   float16_t);f16vec4   min(f16vec4,   float16_t);f16vec2   min(f16vec2,   f16vec2);f16vec3   min(f16vec3,   f16vec3);f16vec4   min(f16vec4,   f16vec4);float16_t max(float16_t, float16_t);f16vec2   max(f16vec2,   float16_t);f16vec3   max(f16vec3,   float16_t);f16vec4   max(f16vec4,   float16_t);f16vec2   max(f16vec2,   f16vec2);f16vec3   max(f16vec3,   f16vec3);f16vec4   max(f16vec4,   f16vec4);float16_t clamp(float16_t, float16_t, float16_t);f16vec2   clamp(f16vec2,   float16_t, float16_t);f16vec3   clamp(f16vec3,   float16_t, float16_t);f16vec4   clamp(f16vec4,   float16_t, float16_t);f16vec2   clamp(f16vec2,   f16vec2,   f16vec2);f16vec3   clamp(f16vec3,   f16vec3,   f16vec3);f16vec4   clamp(f16vec4,   f16vec4,   f16vec4);float16_t mix(float16_t, float16_t, float16_t);f16vec2   mix(f16vec2,   f16vec2,   float16_t);f16vec3   mix(f16vec3,   f16vec3,   float16_t);f16vec4   mix(f16vec4,   f16vec4,   float16_t);f16vec2   mix(f16vec2,   f16vec2,   f16vec2);f16vec3   mix(f16vec3,   f16vec3,   f16vec3);f16vec4   mix(f16vec4,   f16vec4,   f16vec4);float16_t mix(float16_t, float16_t, bool);f16vec2   mix(f16vec2,   f16vec2,   bvec2);f16vec3   mix(f16vec3,   f16vec3,   bvec3);f16vec4   mix(f16vec4,   f16vec4,   bvec4);float16_t step(float16_t, float16_t);f16vec2   step(f16vec2,   f16vec2);f16vec3   step(f16vec3,   f16vec3);f16vec4   step(f16vec4,   f16vec4);f16vec2   step(float16_t, f16vec2);f16vec3   step(float16_t, f16vec3);f16vec4   step(float16_t, f16vec4);float16_t smoothstep(float16_t, float16_t, float16_t);f16vec2   smoothstep(f16vec2,   f16vec2,   f16vec2);f16vec3   smoothstep(f16vec3,   f16vec3,   f16vec3);f16vec4   smoothstep(f16vec4,   f16vec4,   f16vec4);f16vec2   smoothstep(float16_t, float16_t, f16vec2);f16vec3   smoothstep(float16_t, float16_t, f16vec3);f16vec4   smoothstep(float16_t, float16_t, f16vec4);bool  isnan(float16_t);bvec2 isnan(f16vec2);bvec3 isnan(f16vec3);bvec4 isnan(f16vec4);bool  isinf(float16_t);bvec2 isinf(f16vec2);bvec3 isinf(f16vec3);bvec4 isinf(f16vec4);float16_t fma(float16_t, float16_t, float16_t);f16vec2   fma(f16vec2,   f16vec2,   f16vec2);f16vec3   fma(f16vec3,   f16vec3,   f16vec3);f16vec4   fma(f16vec4,   f16vec4,   f16vec4);float16_t frexp(float16_t, out int);f16vec2   frexp(f16vec2,   out ivec2);f16vec3   frexp(f16vec3,   out ivec3);f16vec4   frexp(f16vec4,   out ivec4);float16_t ldexp(float16_t, in int);f16vec2   ldexp(f16vec2,   in ivec2);f16vec3   ldexp(f16vec3,   in ivec3);f16vec4   ldexp(f16vec4,   in ivec4);uint    packFloat2x16(f16vec2);f16vec2 unpackFloat2x16(uint);float16_t length(float16_t);float16_t length(f16vec2);float16_t length(f16vec3);float16_t length(f16vec4);float16_t distance(float16_t, float16_t);float16_t distance(f16vec2,   f16vec2);float16_t distance(f16vec3,   f16vec3);float16_t distance(f16vec4,   f16vec4);float16_t dot(float16_t, float16_t);float16_t dot(f16vec2,   f16vec2);float16_t dot(f16vec3,   f16vec3);float16_t dot(f16vec4,   f16vec4);f16vec3 cross(f16vec3, f16vec3);float16_t normalize(float16_t);f16vec2   normalize(f16vec2);f16vec3   normalize(f16vec3);f16vec4   normalize(f16vec4);float16_t faceforward(float16_t, float16_t, float16_t);f16vec2   faceforward(f16vec2,   f16vec2,   f16vec2);f16vec3   faceforward(f16vec3,   f16vec3,   f16vec3);f16vec4   faceforward(f16vec4,   f16vec4,   f16vec4);float16_t reflect(float16_t, float16_t);f16vec2   reflect(f16vec2,   f16vec2);f16vec3   reflect(f16vec3,   f16vec3);f16vec4   reflect(f16vec4,   f16vec4);float16_t refract(float16_t, float16_t, float16_t);f16vec2   refract(f16vec2,   f16vec2,   float16_t);f16vec3   refract(f16vec3,   f16vec3,   float16_t);f16vec4   refract(f16vec4,   f16vec4,   float16_t);f16mat2   matrixCompMult(f16mat2,   f16mat2);f16mat3   matrixCompMult(f16mat3,   f16mat3);f16mat4   matrixCompMult(f16mat4,   f16mat4);f16mat2x3 matrixCompMult(f16mat2x3, f16mat2x3);f16mat2x4 matrixCompMult(f16mat2x4, f16mat2x4);f16mat3x2 matrixCompMult(f16mat3x2, f16mat3x2);f16mat3x4 matrixCompMult(f16mat3x4, f16mat3x4);f16mat4x2 matrixCompMult(f16mat4x2, f16mat4x2);f16mat4x3 matrixCompMult(f16mat4x3, f16mat4x3);f16mat2   outerProduct(f16vec2, f16vec2);f16mat3   outerProduct(f16vec3, f16vec3);f16mat4   outerProduct(f16vec4, f16vec4);f16mat2x3 outerProduct(f16vec3, f16vec2);f16mat3x2 outerProduct(f16vec2, f16vec3);f16mat2x4 outerProduct(f16vec4, f16vec2);f16mat4x2 outerProduct(f16vec2, f16vec4);f16mat3x4 outerProduct(f16vec4, f16vec3);f16mat4x3 outerProduct(f16vec3, f16vec4);f16mat2   transpose(f16mat2);f16mat3   transpose(f16mat3);f16mat4   transpose(f16mat4);f16mat2x3 transpose(f16mat3x2);f16mat3x2 transpose(f16mat2x3);f16mat2x4 transpose(f16mat4x2);f16mat4x2 transpose(f16mat2x4);f16mat3x4 transpose(f16mat4x3);f16mat4x3 transpose(f16mat3x4);float16_t determinant(f16mat2);float16_t determinant(f16mat3);float16_t determinant(f16mat4);f16mat2 inverse(f16mat2);f16mat3 inverse(f16mat3);f16mat4 inverse(f16mat4);bvec2 lessThan(f16vec2, f16vec2);bvec3 lessThan(f16vec3, f16vec3);bvec4 lessThan(f16vec4, f16vec4);bvec2 lessThanEqual(f16vec2, f16vec2);bvec3 lessThanEqual(f16vec3, f16vec3);bvec4 lessThanEqual(f16vec4, f16vec4);bvec2 greaterThan(f16vec2, f16vec2);bvec3 greaterThan(f16vec3, f16vec3);bvec4 greaterThan(f16vec4, f16vec4);bvec2 greaterThanEqual(f16vec2, f16vec2);bvec3 greaterThanEqual(f16vec3, f16vec3);bvec4 greaterThanEqual(f16vec4, f16vec4);bvec2 equal(f16vec2, f16vec2);bvec3 equal(f16vec3, f16vec3);bvec4 equal(f16vec4, f16vec4);bvec2 notEqual(f16vec2, f16vec2);bvec3 notEqual(f16vec3, f16vec3);bvec4 notEqual(f16vec4, f16vec4);
float1x1
float1x2
float1x3
float1x4
float2x1
float2x2
float2x3
float2x4
float32_t
float32_t matrix
float32_t vector
float3x1
float3x2
float3x3
float3x4
float4x1
float4x2
float4x3
float4x4
float64_t
float64_t dFdx(float64_t);f64vec2   dFdx(f64vec2);f64vec3   dFdx(f64vec3);f64vec4   dFdx(f64vec4);float64_t dFdy(float64_t);f64vec2   dFdy(f64vec2);f64vec3   dFdy(f64vec3);f64vec4   dFdy(f64vec4);float64_t dFdxFine(float64_t);f64vec2   dFdxFine(f64vec2);f64vec3   dFdxFine(f64vec3);f64vec4   dFdxFine(f64vec4);float64_t dFdyFine(float64_t);f64vec2   dFdyFine(f64vec2);f64vec3   dFdyFine(f64vec3);f64vec4   dFdyFine(f64vec4);float64_t dFdxCoarse(float64_t);f64vec2   dFdxCoarse(f64vec2);f64vec3   dFdxCoarse(f64vec3);f64vec4   dFdxCoarse(f64vec4);float64_t dFdyCoarse(float64_t);f64vec2   dFdyCoarse(f64vec2);f64vec3   dFdyCoarse(f64vec3);f64vec4   dFdyCoarse(f64vec4);float64_t fwidth(float64_t);f64vec2   fwidth(f64vec2);f64vec3   fwidth(f64vec3);f64vec4   fwidth(f64vec4);float64_t fwidthFine(float64_t);f64vec2   fwidthFine(f64vec2);f64vec3   fwidthFine(f64vec3);f64vec4   fwidthFine(f64vec4);float64_t fwidthCoarse(float64_t);f64vec2   fwidthCoarse(f64vec2);f64vec3   fwidthCoarse(f64vec3);f64vec4   fwidthCoarse(f64vec4);
float64_t interpolateAtCentroid(float64_t);f64vec2   interpolateAtCentroid(f64vec2);f64vec3   interpolateAtCentroid(f64vec3);f64vec4   interpolateAtCentroid(f64vec4);float64_t interpolateAtSample(float64_t, int);f64vec2   interpolateAtSample(f64vec2,   int);f64vec3   interpolateAtSample(f64vec3,   int);f64vec4   interpolateAtSample(f64vec4,   int);float64_t interpolateAtOffset(float64_t, f64vec2);f64vec2   interpolateAtOffset(f64vec2,   f64vec2);f64vec3   interpolateAtOffset(f64vec3,   f64vec2);f64vec4   interpolateAtOffset(f64vec4,   f64vec2);
float64_t matrix
float64_t vector
floatBitsToInt
floatBitsToInt(00B
floatBitsToInt(10B
floatBitsToInt(20B
floatBitsToInt(30B
floatBitsToUint
floatBitsToUint(00B
floatBitsToUint(10B
floatBitsToUint(20B
floatBitsToUint(30B
floating-point fast math mode
floating-point rounding mode
floatsuffix_check(sh::TParseContext*)
floor
floor(00B
floor(00C
floor(10B
floor(10C
floor(20B
floor(20C
floor(30B
floor(30C
floorf
flushImpl
flush_after_vertex_conversion
flush_before_delete_texture_if_copied_to
flush_pending
fma
fma(00B00B00B
fma(00C00C00C
fma(10B10B10B
fma(10C10C10C
fma(20B20B20B
fma(20C20C20C
fma(30B30B30B
fma(30C30C30C
fmax
fmax_common
fmin
fmin_common
fmod
fold.cpp
fold_spec_constant_op_and_composite_pass.cpp
folding_rules.cpp
for
for (
for Entry Point id
for Vulkan environment.
for header name: %s
for image target EGL_LINUX_DMA_BUF_EXT.
for non-parameter, can only apply to 'in' or no storage qualifier
for sub-statement
for target environment
for variable in
for-loop initializer statement
for_init_statement
for_rest_statement
force_D16_texture_filter
force_cpu_path_for_cube_map_copy
force_fallback_format
force_old_rewrite_struct_samplers
forcing 32-bit vector type to non 64-bit scalar
forcing non 32-bit vector type
format is not one of supported image unit formats.
format requires readonly or writeonly memory qualifier
format_map_autogen.cpp
format_map_desktop.cpp
format_rg16snormIncrementCountert
format_rgba16snoro
formatutils.cpp
formatutilsgl.cpp
forward_pointer(
fprintf
fputc
fputs
frac
fract(00B
fract(00C
fract(10B
fract(10C
fract(20B
fract(20C
fract(30B
fract(30C
fractional_even_ckSecondaryColorpost_depth_coverce
fractional_even_spacing
fractional_odd_spacing
fragColor
fragRotation
fragment
fragment input block
fragment outputs sharing the same location must be the same basic type
fragment shader barycentric
fragment shader input cannot be an array of arrays
fragment shader interlock layout qualifier
fragment shader output
fragment shader output cannot be an array of arrays
fragment-shader array-of-array input
fragment-shader array-of-array output
fragment-shader array-of-struct input
fragment-shader struct input
fragment-shader struct input containing an array
fragment-shader struct input containing structure
fragmentFetchAMD
fragmentMaskFetchAMD
frameId is NULL.
frame_dummy
free
freelocale
freeze_spec_constant_value_pass.cpp
frexp
frexp(00B00D
frexp(00C00D
frexp(10B10D
frexp(10C10D
frexp(20B20D
frexp(20C20D
frexp(30B30D
frexp(30C30D
friend
from
fs:
ftransform
ftransform(
fully_specified_type
function already has a body
function body can't be in a declarator list
function body can't be in a typedef
function call arguments
function call, method, or subroutine call expected
function cannot take any parameter(s)
function control
function does not return a value:
function inside function
function must have the same parameter qualifiers in all of its declarations
function must have the same return type in all of its declarations
function name expected
function name is redeclaration of existing name
function parameter array must be sized at compile time
function parameter array must specify a size
function parameter attribute
function parameter list
function parameter requires array size
function return is not matching type:
function typedefs not implemented
function.cpp
function_call
function_call_generic
function_call_header
function_call_header_no_parameters
function_call_header_with_parameters
function_call_or_method
function_declarator
function_definition
function_header
function_header_with_parameters
function_identifier
function_prototype
functional.cpp
functions->compressedTexImage2D( ToGLenum(face), static_cast<GLint>(level), compressedTexImageFormat.format, levelSize.width, levelSize.height, 0, static_cast<GLsizei>(dataSize), nullptr)
functions->compressedTexImage2D( ToGLenum(type), static_cast<GLint>(level), compressedTexImageFormat.format, levelSize.width, levelSize.height, 0, static_cast<GLsizei>(dataSize), nullptr)
functions->compressedTexImage2D(ToGLenum(target), static_cast<GLint>(level), compressedTexImageFormat.internalFormat, size.width, size.height, 0, static_cast<GLsizei>(imageSize), pixels)
functions->compressedTexImage3D( ToGLenum(type), i, compressedTexImageFormat.format, levelSize.width, levelSize.height, levelSize.depth, 0, static_cast<GLsizei>(dataSize), nullptr)
functions->compressedTexImage3D(ToGLenum(target), static_cast<GLint>(level), compressedTexImageFormat.internalFormat, size.width, size.height, size.depth, 0, static_cast<GLsizei>(imageSize), pixels)
functions->copyTexImage2D(ToGLenum(target), static_cast<GLint>(level), copyTexImageFormat.internalFormat, clippedArea.x, clippedArea.y, clippedArea.width, clippedArea.height, 0)
functions->generateMipmap(ToGLenum(getType()))
functions->isAtMostGL(gl::Version(4, 1)) || (functions->standard == STANDARD_GL_DESKTOP && isAMD)
functions->renderbufferStorage(GL_RENDERBUFFER, renderbufferFormat.internalFormat, static_cast<GLsizei>(width), static_cast<GLsizei>(height))
functions->renderbufferStorageMultisample( GL_RENDERBUFFER, static_cast<GLsizei>(samples), renderbufferFormat.internalFormat, static_cast<GLsizei>(width), static_cast<GLsizei>(height))
functions->standard == STANDARD_GL_DESKTOP && (isIntel || isAMD)
functions->standard == STANDARD_GL_DESKTOP && functions->isAtLeastGL(gl::Version(3, 1)) && !functions->isAtLeastGL(gl::Version(4, 3))
functions->standard == STANDARD_GL_DESKTOP && isIntel
functions->standard == STANDARD_GL_DESKTOP && isNvidia
functions->standard == STANDARD_GL_ES && functions->isAtLeastGLES(gl::Version(3, 1)) && functions->hasGLESExtension("GL_EXT_texture_norm16")
functions->texImage2D( ToGLenum(face), static_cast<GLint>(level), texImageFormat.internalFormat, levelSize.width, levelSize.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->texImage2D( ToGLenum(getType()), effectiveBaseLevel + levelIdx, texImageFormat.internalFormat, levelSize.width, levelSize.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->texImage2D(ToGLenum(target), static_cast<GLint>(level), copyTexImageFormat.internalFormat, sourceArea.width, sourceArea.height, 0, gl::GetUnsizedFormat(copyTexImageFormat.internalFormat), type, zero->data())
functions->texImage2D(ToGLenum(type), static_cast<GLint>(level), texImageFormat.internalFormat, levelSize.width, levelSize.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->texImage2D(nativegl::GetTextureBindingTarget(target), static_cast<GLint>(level), texImageFormat.internalFormat, size.width, size.height, 0, texImageFormat.format, texImageFormat.type, pixels)
functions->texImage2DMultisample( ToGLenum(type), samples, texStorageFormat.internalFormat, size.width, size.height, gl::ConvertToGLBoolean(fixedSampleLocations))
functions->texImage3D(ToGLenum(target), static_cast<GLint>(level), texImageFormat.internalFormat, size.width, size.height, size.depth, 0, texImageFormat.format, texImageFormat.type, pixels)
functions->texImage3D(ToGLenum(type), i, texImageFormat.internalFormat, levelSize.width, levelSize.height, levelSize.depth, 0, texImageFormat.format, texImageFormat.type, nullptr)
functions->texStorage2D(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height)
functions->texStorage2DMultisample( ToGLenum(type), samples, texStorageFormat.internalFormat, size.width, size.height, gl::ConvertToGLBoolean(fixedSampleLocations))
functions->texStorage3D(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height, size.depth)
functions->texStorage3DMultisample( ToGLenum(type), samples, texStorageFormat.internalFormat, size.width, size.height, size.depth, gl::ConvertToGLBoolean(fixedSampleLocations))
functions->texStorageMem2DEXT(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height, memoryObjectGL->getMemoryObjectID(), offset)
functions->texStorageMem3DEXT(ToGLenum(type), static_cast<GLsizei>(levels), texStorageFormat.internalFormat, size.width, size.height, size.depth, memoryObjectGL->getMemoryObjectID(), offset)
future
future reserved word in ES 300 and keyword in GLSL
future.cpp
fvec2
fvec3
fvec4
fwidth
fwidth(00B
fwidth(10B
fwidth(20B
fwidth(30B
fwidthCoarse
fwidthCoarse(00B
fwidthCoarse(10B
fwidthCoarse(20B
fwidthCoarse(30B
fwidthFine
fwidthFine(00B
fwidthFine(10B
fwidthFine(20B
fwidthFine(30B
fwrite
g
g%>
g0>
g7
g8
g9<
g;>
g>
gAD
gE>
g_5
ge,
generateConfigs
generateMipmap
generateSRGBMipmap
generate_webgpu_initializers_pass.cpp
generated error
geometry
geometry shader passthrough
geometry shaders
getCommandBufferOneOff
getComputePipeline
getCurrentFramebuffer
getCurrentWindowSize
getDescriptorSetLayout
getDestinationComponentOffset(u1;u1;
getPipelineCacheSize
getPipelineLayout
getProgram
getShiftBits(u1;u1;
getSourceComponentOffset(u1;u1;
getStatus
getTimestamp
getTraceCategoryEnabledFlag
getUint64Result
getUint64ResultNonBlocking
getUserExtentsImpl
getValidContext
getc
getcwd
getenv
gets larger than 3
gl::(anonymous namespace)::AddParentPrefix(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
gl::(anonymous namespace)::CheckAttachmentCompleteness(gl::Context const*, gl::FramebufferAttachment const&)
gl::(anonymous namespace)::CheckAttachmentSampleCompleteness(gl::Context const*, gl::FramebufferAttachment const&, bool, Optional<int>*, Optional<bool>*, Optional<int>*)
gl::(anonymous namespace)::ComparePackedVarying(gl::PackedVarying const&, gl::PackedVarying const&)
gl::(anonymous namespace)::CompressedTextureFormatRequiresExactSize(unsigned int)
gl::(anonymous namespace)::FlattenUniformVisitor::enterStructAccess(sh::ShaderVariable const&, bool)
gl::(anonymous namespace)::FlattenUniformVisitor::exitStructAccess(sh::ShaderVariable const&, bool)
gl::(anonymous namespace)::FlattenUniformVisitor::visitNamedSampler(sh::ShaderVariable const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
gl::(anonymous namespace)::FlattenUniformVisitor::visitNamedVariable(sh::ShaderVariable const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
gl::(anonymous namespace)::FlattenUniformVisitor::~FlattenUniformVisitor()
gl::(anonymous namespace)::GetInterfaceBlockIndex(std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::(anonymous namespace)::GetInterfaceBlockName(unsigned int, std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> > const&, int, int*, char*)
gl::(anonymous namespace)::GetShaderVariableBufferResourceProperty(gl::ShaderVariableBuffer const&, unsigned int, int*, int, int*)
gl::(anonymous namespace)::GetVariableLocation(std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<gl::VariableLocation, std::__1::allocator<gl::VariableLocation> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::(anonymous namespace)::InitShaderStorageBlockLinker(gl::ProgramState const&, gl::ShaderStorageBlockLinker*)
gl::(anonymous namespace)::InitUniformBlockLinker(gl::ProgramState const&, gl::UniformBlockLinker*)
gl::(anonymous namespace)::InterfaceBlockInfo::getShaderBlockInfo(std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> > const&)
gl::(anonymous namespace)::IsClearBufferMaskedOut(gl::Context const*, unsigned int, int)
gl::(anonymous namespace)::IsValidCopyTextureDestinationInternalFormatEnum(int)
gl::(anonymous namespace)::LoadInterfaceBlock(gl::BinaryInputStream*, gl::InterfaceBlock*)
gl::(anonymous namespace)::LoadShaderVariableBuffer(gl::BinaryInputStream*, gl::ShaderVariableBuffer*)
gl::(anonymous namespace)::LogUniformsExceedLimit(gl::ShaderType, gl::(anonymous namespace)::UniformType, unsigned int, gl::InfoLog&)
gl::(anonymous namespace)::ShaderStorageBlockVisitor::visitNamedVariable(sh::ShaderVariable const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
gl::(anonymous namespace)::ShaderStorageBlockVisitor::~ShaderStorageBlockVisitor()
gl::(anonymous namespace)::UniformBlockEncodingVisitor::visitNamedVariable(sh::ShaderVariable const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
gl::(anonymous namespace)::UniformBlockEncodingVisitor::~UniformBlockEncodingVisitor()
gl::(anonymous namespace)::ValidBlendFunc(gl::Context const*, unsigned int)
gl::(anonymous namespace)::ValidCap(gl::Context const*, unsigned int, bool)
gl::(anonymous namespace)::ValidateCopyTexture3DCommon(gl::Context const*, gl::Texture const*, int, int, gl::Texture const*, int, int, gl::TextureTarget)
gl::(anonymous namespace)::ValidateES2CopyTexImageParameters(gl::Context const*, gl::TextureTarget, int, unsigned int, bool, int, int, int, int, int, int, int)
gl::(anonymous namespace)::ValidateInterfaceBlocksCount(unsigned int, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> > const&, gl::ShaderType, sh::BlockType, unsigned int*, gl::InfoLog&)
gl::(anonymous namespace)::ValidateInterfaceBlocksMatch(unsigned int, angle::PackedEnumMap<gl::ShaderType, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> > const*, 4ul> const&, gl::InfoLog&, bool)
gl::(anonymous namespace)::ValidateProgramResourceIndex(gl::Program const*, unsigned int, unsigned int)
gl::(anonymous namespace)::ValidateProgramUniform(gl::Context const*, unsigned int, gl::ShaderProgramID, gl::UniformLocation, int)
gl::(anonymous namespace)::WriteShaderVariableBuffer(gl::BinaryOutputStream*, gl::ShaderVariableBuffer const&)
gl::(anonymous namespace)::gActiveCompilers
gl::(anonymous namespace)::gIDCounter
gl::(anonymous namespace)::g_debugAnnotator
gl::(anonymous namespace)::g_debugMutex
gl::(anonymous namespace)::kInfoTable
gl::(anonymous namespace)::kValidBasicDrawModes
gl::(anonymous namespace)::operator<<(gl::(anonymous namespace)::HashStream&, gl::ProgramAliasedBindings const&)
gl::(anonymous namespace)::operator<<(gl::(anonymous namespace)::HashStream&, std::__1::vector<gl::VariableLocation, std::__1::allocator<gl::VariableLocation> > const&)
gl::ActiveShaderProgram(unsigned int, unsigned int)
gl::ActiveShaderProgramContextANGLE(void*, unsigned int, unsigned int)
gl::ActiveTexture(unsigned int)
gl::ActiveTextureContextANGLE(void*, unsigned int)
gl::ActiveVariable::ActiveVariable(gl::ActiveVariable const&)
gl::ActiveVariable::activeShaderCount() const
gl::ActiveVariable::getFirstShaderTypeWhereActive() const
gl::ActiveVariable::setActive(gl::ShaderType, bool)
gl::ActiveVariable::unionReferencesWith(gl::ActiveVariable const&)
gl::ActiveVariable::~ActiveVariable()
gl::AllocateFirstFreeBits(unsigned int*, unsigned int, unsigned int)
gl::AlphaFunc(unsigned int, float)
gl::AlphaFuncContextANGLE(void*, unsigned int, float)
gl::AlphaFuncx(unsigned int, int)
gl::AlphaFuncxContextANGLE(void*, unsigned int, int)
gl::AlphaTestFunc gl::FromGLenum<gl::AlphaTestFunc>(unsigned int)
gl::AlwaysSupported(gl::Version const&, gl::Extensions const&)
gl::ArraySizeProduct(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
gl::AtomicCounterBufferLinker::link(std::__1::map<int, unsigned int, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, unsigned int> > > const&) const
gl::AttachShader(unsigned int, unsigned int)
gl::AttachShaderContextANGLE(void*, unsigned int, unsigned int)
gl::BeginQuery(unsigned int, unsigned int)
gl::BeginQueryContextANGLE(void*, unsigned int, unsigned int)
gl::BeginQueryEXT(unsigned int, unsigned int)
gl::BeginQueryEXTContextANGLE(void*, unsigned int, unsigned int)
gl::BeginTransformFeedback(unsigned int)
gl::BeginTransformFeedbackContextANGLE(void*, unsigned int)
gl::BindAttribLocation(unsigned int, unsigned int, char const*)
gl::BindAttribLocationContextANGLE(void*, unsigned int, unsigned int, char const*)
gl::BindBuffer(unsigned int, unsigned int)
gl::BindBufferBase(unsigned int, unsigned int, unsigned int)
gl::BindBufferBaseContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::BindBufferContextANGLE(void*, unsigned int, unsigned int)
gl::BindBufferRange(unsigned int, unsigned int, unsigned int, long, long)
gl::BindBufferRangeContextANGLE(void*, unsigned int, unsigned int, unsigned int, long, long)
gl::BindFragDataLocationEXT(unsigned int, unsigned int, char const*)
gl::BindFragDataLocationEXTContextANGLE(void*, unsigned int, unsigned int, char const*)
gl::BindFragDataLocationIndexedEXT(unsigned int, unsigned int, unsigned int, char const*)
gl::BindFragDataLocationIndexedEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int, char const*)
gl::BindFramebuffer(unsigned int, unsigned int)
gl::BindFramebufferContextANGLE(void*, unsigned int, unsigned int)
gl::BindFramebufferOES(unsigned int, unsigned int)
gl::BindFramebufferOESContextANGLE(void*, unsigned int, unsigned int)
gl::BindImageTexture(unsigned int, unsigned int, int, unsigned char, int, unsigned int, unsigned int)
gl::BindImageTextureContextANGLE(void*, unsigned int, unsigned int, int, unsigned char, int, unsigned int, unsigned int)
gl::BindProgramPipeline(unsigned int)
gl::BindProgramPipelineContextANGLE(void*, unsigned int)
gl::BindRenderbuffer(unsigned int, unsigned int)
gl::BindRenderbufferContextANGLE(void*, unsigned int, unsigned int)
gl::BindRenderbufferOES(unsigned int, unsigned int)
gl::BindRenderbufferOESContextANGLE(void*, unsigned int, unsigned int)
gl::BindSampler(unsigned int, unsigned int)
gl::BindSamplerContextANGLE(void*, unsigned int, unsigned int)
gl::BindTexture(unsigned int, unsigned int)
gl::BindTextureContextANGLE(void*, unsigned int, unsigned int)
gl::BindTransformFeedback(unsigned int, unsigned int)
gl::BindTransformFeedbackContextANGLE(void*, unsigned int, unsigned int)
gl::BindUniformLocationCHROMIUM(unsigned int, int, char const*)
gl::BindUniformLocationCHROMIUMContextANGLE(void*, unsigned int, int, char const*)
gl::BindVertexArray(unsigned int)
gl::BindVertexArrayContextANGLE(void*, unsigned int)
gl::BindVertexArrayOES(unsigned int)
gl::BindVertexArrayOESContextANGLE(void*, unsigned int)
gl::BindVertexBuffer(unsigned int, unsigned int, long, int)
gl::BindVertexBufferContextANGLE(void*, unsigned int, unsigned int, long, int)
gl::BindingPointer<gl::Buffer>::~BindingPointer()
gl::BindingPointer<gl::Compiler>::~BindingPointer()
gl::BindingPointer<gl::ProgramPipeline>::~BindingPointer()
gl::BindingPointer<gl::Query>::~BindingPointer()
gl::BindingPointer<gl::Renderbuffer>::~BindingPointer()
gl::BindingPointer<gl::Sampler>::~BindingPointer()
gl::BindingPointer<gl::Texture>::~BindingPointer()
gl::BindingPointer<gl::TransformFeedback>::~BindingPointer()
gl::BlendBarrier()
gl::BlendBarrierContextANGLE(void*)
gl::BlendColor(float, float, float, float)
gl::BlendColorContextANGLE(void*, float, float, float, float)
gl::BlendEquation(unsigned int)
gl::BlendEquationContextANGLE(void*, unsigned int)
gl::BlendEquationSeparate(unsigned int, unsigned int)
gl::BlendEquationSeparateContextANGLE(void*, unsigned int, unsigned int)
gl::BlendEquationSeparatei(unsigned int, unsigned int, unsigned int)
gl::BlendEquationSeparateiContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::BlendEquationSeparateiEXT(unsigned int, unsigned int, unsigned int)
gl::BlendEquationSeparateiEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::BlendEquationSeparateiOES(unsigned int, unsigned int, unsigned int)
gl::BlendEquationSeparateiOESContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::BlendEquationi(unsigned int, unsigned int)
gl::BlendEquationiContextANGLE(void*, unsigned int, unsigned int)
gl::BlendEquationiEXT(unsigned int, unsigned int)
gl::BlendEquationiEXTContextANGLE(void*, unsigned int, unsigned int)
gl::BlendEquationiOES(unsigned int, unsigned int)
gl::BlendEquationiOESContextANGLE(void*, unsigned int, unsigned int)
gl::BlendFunc(unsigned int, unsigned int)
gl::BlendFuncContextANGLE(void*, unsigned int, unsigned int)
gl::BlendFuncSeparate(unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFuncSeparateContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFuncSeparatei(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFuncSeparateiContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFuncSeparateiEXT(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFuncSeparateiEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFuncSeparateiOES(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFuncSeparateiOESContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendFunci(unsigned int, unsigned int, unsigned int)
gl::BlendFunciContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::BlendFunciEXT(unsigned int, unsigned int, unsigned int)
gl::BlendFunciEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::BlendFunciOES(unsigned int, unsigned int, unsigned int)
gl::BlendFunciOESContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::BlendState::BlendState()
gl::BlendStateExt::BlendStateExt(unsigned long)
gl::BlendStateExt::compareColorMask(unsigned long) const
gl::BlendStateExt::compareEquations(unsigned long, unsigned long) const
gl::BlendStateExt::compareFactors(unsigned long, unsigned long, unsigned long, unsigned long) const
gl::BlendStateExt::expandColorMaskIndexed(unsigned long) const
gl::BlendStateExt::expandColorMaskValue(bool, bool, bool, bool) const
gl::BlendStateExt::expandDstAlphaIndexed(unsigned long) const
gl::BlendStateExt::expandDstColorIndexed(unsigned long) const
gl::BlendStateExt::expandEquationAlphaIndexed(unsigned long) const
gl::BlendStateExt::expandEquationColorIndexed(unsigned long) const
gl::BlendStateExt::expandSrcAlphaIndexed(unsigned long) const
gl::BlendStateExt::expandSrcColorIndexed(unsigned long) const
gl::BlendStateExt::getColorMaskIndexed(unsigned long, bool*, bool*, bool*, bool*) const
gl::BlendStateExt::getDstAlphaIndexed(unsigned long) const
gl::BlendStateExt::getDstColorIndexed(unsigned long) const
gl::BlendStateExt::getEquationAlphaIndexed(unsigned long) const
gl::BlendStateExt::getEquationColorIndexed(unsigned long) const
gl::BlendStateExt::getSrcAlphaIndexed(unsigned long) const
gl::BlendStateExt::getSrcColorIndexed(unsigned long) const
gl::BlendStateExt::operator=(gl::BlendStateExt const&)
gl::BlendStateExt::setColorMask(bool, bool, bool, bool)
gl::BlendStateExt::setColorMaskIndexed(unsigned long, bool, bool, bool, bool)
gl::BlendStateExt::setEnabled(bool)
gl::BlendStateExt::setEnabledIndexed(unsigned long, bool)
gl::BlendStateExt::setEquations(unsigned int, unsigned int)
gl::BlendStateExt::setEquationsIndexed(unsigned long, unsigned int, unsigned int)
gl::BlendStateExt::setFactors(unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlendStateExt::setFactorsIndexed(unsigned long, unsigned int, unsigned int, unsigned int, unsigned int)
gl::BlitFramebuffer(int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::BlitFramebufferANGLE(int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::BlitFramebufferANGLEContextANGLE(void*, int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::BlitFramebufferContextANGLE(void*, int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::Box::toRect() const
gl::Buffer* gl::TypedResourceManager<gl::Buffer, gl::HandleAllocator, gl::BufferManager, gl::BufferID>::checkObjectAllocationImpl<>(rx::GLImplFactory*, gl::BufferID)
gl::Buffer::Buffer(rx::GLImplFactory*, gl::BufferID)
gl::Buffer::bufferData(gl::Context*, gl::BufferBinding, void const*, long, gl::BufferUsage)
gl::Buffer::bufferSubData(gl::Context const*, gl::BufferBinding, void const*, long, long)
gl::Buffer::copyBufferSubData(gl::Context const*, gl::Buffer*, long, long, long)
gl::Buffer::getIndexRange(gl::Context const*, gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange*) const
gl::Buffer::getLabel() const
gl::Buffer::getMemorySize() const
gl::Buffer::isDoubleBoundForTransformFeedback() const
gl::Buffer::map(gl::Context const*, unsigned int)
gl::Buffer::mapRange(gl::Context const*, long, long, unsigned int)
gl::Buffer::onDataChanged()
gl::Buffer::onDestroy(gl::Context const*)
gl::Buffer::onSubjectStateChange(unsigned long, angle::SubjectMessage)
gl::Buffer::onTFBindingChanged(gl::Context const*, bool, bool)
gl::Buffer::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Buffer::unmap(gl::Context const*, unsigned char*)
gl::Buffer::~Buffer()
gl::BufferBinding gl::FromGLenum<gl::BufferBinding>(unsigned int)
gl::BufferData(unsigned int, long, void const*, unsigned int)
gl::BufferDataContextANGLE(void*, unsigned int, long, void const*, unsigned int)
gl::BufferManager::AllocateNewObject(rx::GLImplFactory*, gl::BufferID)
gl::BufferManager::createBuffer()
gl::BufferManager::getBuffer(gl::BufferID) const
gl::BufferManager::~BufferManager()
gl::BufferStorageMemEXT(unsigned int, long, unsigned int, unsigned long)
gl::BufferStorageMemEXTContextANGLE(void*, unsigned int, long, unsigned int, unsigned long)
gl::BufferSubData(unsigned int, long, long, void const*)
gl::BufferSubDataContextANGLE(void*, unsigned int, long, long, void const*)
gl::BufferUsage gl::FromGLenum<gl::BufferUsage>(unsigned int)
gl::BufferVariable::BufferVariable()
gl::BufferVariable::BufferVariable(unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, int, sh::BlockMemberInfo const&)
gl::BufferVariable::~BufferVariable()
gl::BuildInternalFormatInfoMap()
gl::Caps::Caps()
gl::Caps::Caps(gl::Caps const&)
gl::Caps::~Caps()
gl::CastMaskValue(unsigned int)
gl::CheckFramebufferStatus(unsigned int)
gl::CheckFramebufferStatusContextANGLE(void*, unsigned int)
gl::CheckFramebufferStatusOES(unsigned int)
gl::CheckFramebufferStatusOESContextANGLE(void*, unsigned int)
gl::Clear(unsigned int)
gl::ClearBufferfi(unsigned int, int, float, int)
gl::ClearBufferfiContextANGLE(void*, unsigned int, int, float, int)
gl::ClearBufferfv(unsigned int, int, float const*)
gl::ClearBufferfvContextANGLE(void*, unsigned int, int, float const*)
gl::ClearBufferiv(unsigned int, int, int const*)
gl::ClearBufferivContextANGLE(void*, unsigned int, int, int const*)
gl::ClearBufferuiv(unsigned int, int, unsigned int const*)
gl::ClearBufferuivContextANGLE(void*, unsigned int, int, unsigned int const*)
gl::ClearColor(float, float, float, float)
gl::ClearColorContextANGLE(void*, float, float, float, float)
gl::ClearColorx(int, int, int, int)
gl::ClearColorxContextANGLE(void*, int, int, int, int)
gl::ClearContextANGLE(void*, unsigned int)
gl::ClearDepthf(float)
gl::ClearDepthfContextANGLE(void*, float)
gl::ClearDepthx(int)
gl::ClearDepthxContextANGLE(void*, int)
gl::ClearStencil(int)
gl::ClearStencilContextANGLE(void*, int)
gl::ClientActiveTexture(unsigned int)
gl::ClientActiveTextureContextANGLE(void*, unsigned int)
gl::ClientVertexArrayType gl::FromGLenum<gl::ClientVertexArrayType>(unsigned int)
gl::ClientWaitSync(__GLsync*, unsigned int, unsigned long)
gl::ClientWaitSyncContextANGLE(void*, __GLsync*, unsigned int, unsigned long)
gl::ClipPlanef(unsigned int, float const*)
gl::ClipPlanefContextANGLE(void*, unsigned int, float const*)
gl::ClipPlanex(unsigned int, int const*)
gl::ClipPlanexContextANGLE(void*, unsigned int, int const*)
gl::ClipRectangle(gl::Rectangle const&, gl::Rectangle const&, gl::Rectangle*)
gl::Color4f(float, float, float, float)
gl::Color4fContextANGLE(void*, float, float, float, float)
gl::Color4ub(unsigned char, unsigned char, unsigned char, unsigned char)
gl::Color4ubContextANGLE(void*, unsigned char, unsigned char, unsigned char, unsigned char)
gl::Color4x(int, int, int, int)
gl::Color4xContextANGLE(void*, int, int, int, int)
gl::ColorMask(unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorMaskContextANGLE(void*, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorMaski(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorMaskiContextANGLE(void*, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorMaskiEXT(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorMaskiEXTContextANGLE(void*, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorMaskiOES(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorMaskiOESContextANGLE(void*, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ColorPointer(int, unsigned int, int, void const*)
gl::ColorPointerContextANGLE(void*, int, unsigned int, int, void const*)
gl::CompareShaderVar(sh::ShaderVariable const&, sh::ShaderVariable const&)
gl::CompileShader(unsigned int)
gl::CompileShaderContextANGLE(void*, unsigned int)
gl::Compiler::Compiler(rx::GLImplFactory*, gl::State const&)
gl::Compiler::getInstance(gl::ShaderType)
gl::Compiler::putInstance(gl::ShCompilerInstance&&)
gl::Compiler::~Compiler()
gl::CompressedCopyTextureCHROMIUM(unsigned int, unsigned int)
gl::CompressedCopyTextureCHROMIUMContextANGLE(void*, unsigned int, unsigned int)
gl::CompressedFormatRequiresWholeImage(unsigned int)
gl::CompressedTexImage2D(unsigned int, int, unsigned int, int, int, int, int, void const*)
gl::CompressedTexImage2DContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, int, void const*)
gl::CompressedTexImage2DRobustANGLE(unsigned int, int, unsigned int, int, int, int, int, int, void const*)
gl::CompressedTexImage2DRobustANGLEContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, int, int, void const*)
gl::CompressedTexImage3D(unsigned int, int, unsigned int, int, int, int, int, int, void const*)
gl::CompressedTexImage3DContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, int, int, void const*)
gl::CompressedTexImage3DOES(unsigned int, int, unsigned int, int, int, int, int, int, void const*)
gl::CompressedTexImage3DOESContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, int, int, void const*)
gl::CompressedTexImage3DRobustANGLE(unsigned int, int, unsigned int, int, int, int, int, int, int, void const*)
gl::CompressedTexImage3DRobustANGLEContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, int, int, int, void const*)
gl::CompressedTexSubImage2D(unsigned int, int, int, int, int, int, unsigned int, int, void const*)
gl::CompressedTexSubImage2DContextANGLE(void*, unsigned int, int, int, int, int, int, unsigned int, int, void const*)
gl::CompressedTexSubImage2DRobustANGLE(unsigned int, int, int, int, int, int, unsigned int, int, int, void const*)
gl::CompressedTexSubImage2DRobustANGLEContextANGLE(void*, unsigned int, int, int, int, int, int, unsigned int, int, int, void const*)
gl::CompressedTexSubImage3D(unsigned int, int, int, int, int, int, int, int, unsigned int, int, void const*)
gl::CompressedTexSubImage3DContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, unsigned int, int, void const*)
gl::CompressedTexSubImage3DOES(unsigned int, int, int, int, int, int, int, int, unsigned int, int, void const*)
gl::CompressedTexSubImage3DOESContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, unsigned int, int, void const*)
gl::CompressedTexSubImage3DRobustANGLE(unsigned int, int, int, int, int, int, int, int, unsigned int, int, int, void const*)
gl::CompressedTexSubImage3DRobustANGLEContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, unsigned int, int, int, void const*)
gl::ComputeIndexRange(gl::DrawElementsType, void const*, unsigned long, bool)
gl::ComputeVertexAttributeStride(gl::VertexAttribute const&, gl::VertexBinding const&)
gl::ComputeVertexBindingElementCount(unsigned int, unsigned long, unsigned long)
gl::Context::Context(egl::Display*, egl::Config const*, gl::Context const*, gl::TextureManager*, gl::MemoryProgramCache*, unsigned int, egl::AttributeMap const&, egl::DisplayExtensions const&, egl::ClientExtensions const&)
gl::Context::activeShaderProgram(gl::ProgramPipelineID, gl::ShaderProgramID)
gl::Context::activeTexture(unsigned int)
gl::Context::alphaFunc(gl::AlphaTestFunc, float)
gl::Context::alphaFuncx(gl::AlphaTestFunc, int)
gl::Context::attachShader(gl::ShaderProgramID, gl::ShaderProgramID)
gl::Context::beginQuery(gl::QueryType, gl::QueryID)
gl::Context::beginTransformFeedback(gl::PrimitiveMode)
gl::Context::bindAttribLocation(gl::ShaderProgramID, unsigned int, char const*)
gl::Context::bindBufferBase(gl::BufferBinding, unsigned int, gl::BufferID)
gl::Context::bindBufferRange(gl::BufferBinding, unsigned int, gl::BufferID, long, long)
gl::Context::bindFragDataLocation(gl::ShaderProgramID, unsigned int, char const*)
gl::Context::bindFragDataLocationIndexed(gl::ShaderProgramID, unsigned int, unsigned int, char const*)
gl::Context::bindFramebuffer(unsigned int, gl::FramebufferID)
gl::Context::bindImageTexture(unsigned int, gl::TextureID, int, unsigned char, int, unsigned int, unsigned int)
gl::Context::bindProgramPipeline(gl::ProgramPipelineID)
gl::Context::bindRenderbuffer(unsigned int, gl::RenderbufferID)
gl::Context::bindSampler(unsigned int, gl::SamplerID)
gl::Context::bindTexture(gl::TextureType, gl::TextureID)
gl::Context::bindTransformFeedback(unsigned int, gl::TransformFeedbackID)
gl::Context::bindUniformLocation(gl::ShaderProgramID, gl::UniformLocation, char const*)
gl::Context::bindVertexArray(gl::VertexArrayID)
gl::Context::bindVertexBuffer(unsigned int, gl::BufferID, long, int)
gl::Context::blendBarrier()
gl::Context::blendColor(float, float, float, float)
gl::Context::blendEquation(unsigned int)
gl::Context::blendEquationSeparate(unsigned int, unsigned int)
gl::Context::blendEquationSeparatei(unsigned int, unsigned int, unsigned int)
gl::Context::blendEquationi(unsigned int, unsigned int)
gl::Context::blendFunc(unsigned int, unsigned int)
gl::Context::blendFuncSeparate(unsigned int, unsigned int, unsigned int, unsigned int)
gl::Context::blendFuncSeparatei(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::Context::blendFunci(unsigned int, unsigned int, unsigned int)
gl::Context::blitFramebuffer(int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::Context::bufferData(gl::BufferBinding, long, void const*, gl::BufferUsage)
gl::Context::bufferStorageMem(gl::TextureType, long, gl::MemoryObjectID, unsigned long)
gl::Context::bufferSubData(gl::BufferBinding, long, long, void const*)
gl::Context::checkFramebufferStatus(unsigned int)
gl::Context::checkTransformFeedbackAllocation(gl::TransformFeedbackID)
gl::Context::checkVertexArrayAllocation(gl::VertexArrayID)
gl::Context::clear(unsigned int)
gl::Context::clearBufferfi(unsigned int, int, float, int)
gl::Context::clearBufferfv(unsigned int, int, float const*)
gl::Context::clearBufferiv(unsigned int, int, int const*)
gl::Context::clearBufferuiv(unsigned int, int, unsigned int const*)
gl::Context::clearColor(float, float, float, float)
gl::Context::clearColorx(int, int, int, int)
gl::Context::clearDepthf(float)
gl::Context::clearDepthx(int)
gl::Context::clearStencil(int)
gl::Context::clientActiveTexture(unsigned int)
gl::Context::clientWaitSync(__GLsync*, unsigned int, unsigned long)
gl::Context::clipPlanef(unsigned int, float const*)
gl::Context::clipPlanex(unsigned int, int const*)
gl::Context::color4f(float, float, float, float)
gl::Context::color4ub(unsigned char, unsigned char, unsigned char, unsigned char)
gl::Context::color4x(int, int, int, int)
gl::Context::colorMask(unsigned char, unsigned char, unsigned char, unsigned char)
gl::Context::colorMaski(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::Context::colorPointer(int, gl::VertexAttribType, int, void const*)
gl::Context::compileShader(gl::ShaderProgramID)
gl::Context::compressedCopyTexture(gl::TextureID, gl::TextureID)
gl::Context::compressedTexImage2D(gl::TextureTarget, int, unsigned int, int, int, int, int, void const*)
gl::Context::compressedTexImage2DRobust(gl::TextureTarget, int, unsigned int, int, int, int, int, int, void const*)
gl::Context::compressedTexImage3D(gl::TextureTarget, int, unsigned int, int, int, int, int, int, void const*)
gl::Context::compressedTexImage3DRobust(gl::TextureTarget, int, unsigned int, int, int, int, int, int, int, void const*)
gl::Context::compressedTexSubImage2D(gl::TextureTarget, int, int, int, int, int, unsigned int, int, void const*)
gl::Context::compressedTexSubImage2DRobust(gl::TextureTarget, int, int, int, int, int, unsigned int, int, int, void const*)
gl::Context::compressedTexSubImage3D(gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, int, void const*)
gl::Context::compressedTexSubImage3DRobust(gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, int, int, void const*)
gl::Context::copyBufferSubData(gl::BufferBinding, gl::BufferBinding, long, long, long)
gl::Context::copyImageSubData(unsigned int, unsigned int, int, int, int, int, unsigned int, unsigned int, int, int, int, int, int, int, int)
gl::Context::copySubTexture(gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::Context::copySubTexture3D(gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, int, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::Context::copyTexImage2D(gl::TextureTarget, int, unsigned int, int, int, int, int, int)
gl::Context::copyTexSubImage2D(gl::TextureTarget, int, int, int, int, int, int, int)
gl::Context::copyTexSubImage3D(gl::TextureTarget, int, int, int, int, int, int, int, int)
gl::Context::copyTexture(gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::Context::copyTexture3D(gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::Context::coverageModulation(unsigned int)
gl::Context::createMemoryObjects(int, gl::MemoryObjectID*)
gl::Context::createProgram()
gl::Context::createShader(gl::ShaderType)
gl::Context::createShaderProgramv(gl::ShaderType, int, char const* const*)
gl::Context::cullFace(gl::CullFaceMode)
gl::Context::currentPaletteMatrix(unsigned int)
gl::Context::debugMessageCallback(void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::Context::debugMessageControl(unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
gl::Context::debugMessageInsert(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
gl::Context::deleteBuffers(int, gl::BufferID const*)
gl::Context::deleteFencesNV(int, gl::FenceNVID const*)
gl::Context::deleteFramebuffers(int, gl::FramebufferID const*)
gl::Context::deleteMemoryObjects(int, gl::MemoryObjectID const*)
gl::Context::deleteProgram(gl::ShaderProgramID)
gl::Context::deleteProgramPipelines(int, gl::ProgramPipelineID const*)
gl::Context::deleteQueries(int, gl::QueryID const*)
gl::Context::deleteRenderbuffers(int, gl::RenderbufferID const*)
gl::Context::deleteSamplers(int, gl::SamplerID const*)
gl::Context::deleteSemaphores(int, gl::SemaphoreID const*)
gl::Context::deleteShader(gl::ShaderProgramID)
gl::Context::deleteSync(__GLsync*)
gl::Context::deleteTexture(gl::TextureID)
gl::Context::deleteTextures(int, gl::TextureID const*)
gl::Context::deleteTransformFeedbacks(int, gl::TransformFeedbackID const*)
gl::Context::deleteVertexArrays(int, gl::VertexArrayID const*)
gl::Context::depthFunc(unsigned int)
gl::Context::depthMask(unsigned char)
gl::Context::depthRangef(float, float)
gl::Context::depthRangex(int, int)
gl::Context::detachFramebuffer(gl::FramebufferID)
gl::Context::detachShader(gl::ShaderProgramID, gl::ShaderProgramID)
gl::Context::detachTexture(gl::TextureID)
gl::Context::disable(unsigned int)
gl::Context::disableClientState(gl::ClientVertexArrayType)
gl::Context::disableExtension(char const*)
gl::Context::disableVertexAttribArray(unsigned int)
gl::Context::disablei(unsigned int, unsigned int)
gl::Context::discardFramebuffer(unsigned int, int, unsigned int const*)
gl::Context::dispatchCompute(unsigned int, unsigned int, unsigned int)
gl::Context::dispatchComputeIndirect(long)
gl::Context::drawArraysIndirect(gl::PrimitiveMode, void const*)
gl::Context::drawArraysInstanced(gl::PrimitiveMode, int, int, int)
gl::Context::drawArraysInstancedBaseInstance(gl::PrimitiveMode, int, int, int, unsigned int)
gl::Context::drawBuffers(int, unsigned int const*)
gl::Context::drawElementsBaseVertex(gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::Context::drawElementsIndirect(gl::PrimitiveMode, gl::DrawElementsType, void const*)
gl::Context::drawElementsInstanced(gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::Context::drawElementsInstancedBaseVertex(gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int)
gl::Context::drawElementsInstancedBaseVertexBaseInstance(gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int, unsigned int)
gl::Context::drawRangeElements(gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*)
gl::Context::drawRangeElementsBaseVertex(gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*, int)
gl::Context::drawTexf(float, float, float, float, float)
gl::Context::drawTexfv(float const*)
gl::Context::drawTexi(int, int, int, int, int)
gl::Context::drawTexiv(int const*)
gl::Context::drawTexs(short, short, short, short, short)
gl::Context::drawTexsv(short const*)
gl::Context::drawTexx(int, int, int, int, int)
gl::Context::drawTexxv(int const*)
gl::Context::eGLImageTargetRenderbufferStorage(unsigned int, void*)
gl::Context::eGLImageTargetTexture2D(gl::TextureType, void*)
gl::Context::enable(unsigned int)
gl::Context::enableClientState(gl::ClientVertexArrayType)
gl::Context::enableVertexAttribArray(unsigned int)
gl::Context::enablei(unsigned int, unsigned int)
gl::Context::endQuery(gl::QueryType)
gl::Context::endTransformFeedback()
gl::Context::fenceSync(unsigned int, unsigned int)
gl::Context::finish()
gl::Context::finishFenceNV(gl::FenceNVID)
gl::Context::flush()
gl::Context::flushMappedBufferRange(gl::BufferBinding, long, long)
gl::Context::fogf(unsigned int, float)
gl::Context::fogfv(unsigned int, float const*)
gl::Context::fogx(unsigned int, int)
gl::Context::fogxv(unsigned int, int const*)
gl::Context::framebufferParameteri(unsigned int, unsigned int, int)
gl::Context::framebufferRenderbuffer(unsigned int, unsigned int, unsigned int, gl::RenderbufferID)
gl::Context::framebufferTexture(unsigned int, unsigned int, gl::TextureID, int)
gl::Context::framebufferTexture2D(unsigned int, unsigned int, gl::TextureTarget, gl::TextureID, int)
gl::Context::framebufferTexture2DMultisample(unsigned int, unsigned int, unsigned int, unsigned int, int, int)
gl::Context::framebufferTexture3D(unsigned int, unsigned int, gl::TextureTarget, gl::TextureID, int, int)
gl::Context::framebufferTextureLayer(unsigned int, unsigned int, gl::TextureID, int, int)
gl::Context::framebufferTextureMultiview(unsigned int, unsigned int, gl::TextureID, int, int, int)
gl::Context::frontFace(unsigned int)
gl::Context::frustumf(float, float, float, float, float, float)
gl::Context::frustumx(int, int, int, int, int, int)
gl::Context::genBuffers(int, gl::BufferID*)
gl::Context::genFencesNV(int, gl::FenceNVID*)
gl::Context::genFramebuffers(int, gl::FramebufferID*)
gl::Context::genProgramPipelines(int, gl::ProgramPipelineID*)
gl::Context::genQueries(int, gl::QueryID*)
gl::Context::genRenderbuffers(int, gl::RenderbufferID*)
gl::Context::genSamplers(int, gl::SamplerID*)
gl::Context::genSemaphores(int, gl::SemaphoreID*)
gl::Context::genTextures(int, gl::TextureID*)
gl::Context::genTransformFeedbacks(int, gl::TransformFeedbackID*)
gl::Context::genVertexArrays(int, gl::VertexArrayID*)
gl::Context::generateMipmap(gl::TextureType)
gl::Context::generateSupportedExtensions() const
gl::Context::getActiveAttrib(gl::ShaderProgramID, unsigned int, int, int*, int*, unsigned int*, char*)
gl::Context::getActiveLinkedProgram() const
gl::Context::getActiveUniform(gl::ShaderProgramID, unsigned int, int, int*, int*, unsigned int*, char*)
gl::Context::getActiveUniformBlockName(gl::ShaderProgramID, unsigned int, int, int*, char*)
gl::Context::getActiveUniformBlockiv(gl::ShaderProgramID, unsigned int, unsigned int, int*)
gl::Context::getActiveUniformBlockivRobust(gl::ShaderProgramID, unsigned int, unsigned int, int, int*, int*)
gl::Context::getActiveUniformsiv(gl::ShaderProgramID, int, unsigned int const*, unsigned int, int*)
gl::Context::getAttachedShaders(gl::ShaderProgramID, int, int*, gl::ShaderProgramID*)
gl::Context::getAttribLocation(gl::ShaderProgramID, char const*)
gl::Context::getBooleani_v(unsigned int, unsigned int, unsigned char*)
gl::Context::getBooleani_vRobust(unsigned int, unsigned int, int, int*, unsigned char*)
gl::Context::getBooleanv(unsigned int, unsigned char*)
gl::Context::getBooleanvImpl(unsigned int, unsigned char*) const
gl::Context::getBooleanvRobust(unsigned int, int, int*, unsigned char*)
gl::Context::getBuffer(gl::BufferID) const
gl::Context::getBufferParameteri64v(gl::BufferBinding, unsigned int, long*)
gl::Context::getBufferParameteri64vRobust(gl::BufferBinding, unsigned int, int, int*, long*)
gl::Context::getBufferParameteriv(gl::BufferBinding, unsigned int, int*)
gl::Context::getBufferParameterivRobust(gl::BufferBinding, unsigned int, int, int*, int*)
gl::Context::getBufferPointerv(gl::BufferBinding, unsigned int, void**)
gl::Context::getBufferPointervRobust(gl::BufferBinding, unsigned int, int, int*, void**)
gl::Context::getClientType() const
gl::Context::getClipPlanef(unsigned int, float*)
gl::Context::getClipPlanex(unsigned int, int*)
gl::Context::getCompiler() const
gl::Context::getConfig() const
gl::Context::getContextPriority() const
gl::Context::getConvertedRenderbufferFormat(unsigned int) const
gl::Context::getDebugMessageLog(unsigned int, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, int*, char*)
gl::Context::getError()
gl::Context::getExtensionStringCount() const
gl::Context::getFenceNV(gl::FenceNVID) const
gl::Context::getFenceivNV(gl::FenceNVID, unsigned int, int*)
gl::Context::getFixedv(unsigned int, int*)
gl::Context::getFloatv(unsigned int, float*)
gl::Context::getFloatvImpl(unsigned int, float*) const
gl::Context::getFloatvRobust(unsigned int, int, int*, float*)
gl::Context::getFragDataIndex(gl::ShaderProgramID, char const*)
gl::Context::getFragDataLocation(gl::ShaderProgramID, char const*)
gl::Context::getFramebuffer(gl::FramebufferID) const
gl::Context::getFramebufferAttachmentParameteriv(unsigned int, unsigned int, unsigned int, int*)
gl::Context::getFramebufferAttachmentParameterivRobust(unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::Context::getFramebufferParameteriv(unsigned int, unsigned int, int*)
gl::Context::getFramebufferParameterivRobust(unsigned int, unsigned int, int, int*, int*)
gl::Context::getFrontendFeatures() const
gl::Context::getGraphicsResetStatus()
gl::Context::getIndexedQueryParameterInfo(unsigned int, unsigned int*, unsigned int*) const
gl::Context::getInteger64i_v(unsigned int, unsigned int, long*)
gl::Context::getInteger64i_vRobust(unsigned int, unsigned int, int, int*, long*)
gl::Context::getInteger64v(unsigned int, long*)
gl::Context::getInteger64vImpl(unsigned int, long*) const
gl::Context::getInteger64vRobust(unsigned int, int, int*, long*)
gl::Context::getIntegeri_v(unsigned int, unsigned int, int*)
gl::Context::getIntegeri_vRobust(unsigned int, unsigned int, int, int*, int*)
gl::Context::getIntegerv(unsigned int, int*)
gl::Context::getIntegervImpl(unsigned int, int*) const
gl::Context::getIntegervRobust(unsigned int, int, int*, int*)
gl::Context::getInternalformativ(unsigned int, unsigned int, unsigned int, int, int*)
gl::Context::getInternalformativRobust(unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::Context::getLabel() const
gl::Context::getLabeledObject(unsigned int, unsigned int) const
gl::Context::getLightfv(unsigned int, gl::LightParameter, float*)
gl::Context::getLightxv(unsigned int, gl::LightParameter, int*)
gl::Context::getMaterialfv(unsigned int, gl::MaterialParameter, float*)
gl::Context::getMaterialxv(unsigned int, gl::MaterialParameter, int*)
gl::Context::getMemoryObject(gl::MemoryObjectID) const
gl::Context::getMemoryObjectParameteriv(gl::MemoryObjectID, unsigned int, int*)
gl::Context::getMultisamplefv(unsigned int, unsigned int, float*)
gl::Context::getMultisamplefvRobust(unsigned int, unsigned int, int, int*, float*)
gl::Context::getObjectLabel(unsigned int, unsigned int, int, int*, char*)
gl::Context::getObjectPtrLabel(void const*, int, int*, char*)
gl::Context::getOrCreateQuery(gl::QueryID, gl::QueryType)
gl::Context::getPointerv(unsigned int, void**)
gl::Context::getPointervRobustANGLERobust(unsigned int, int, int*, void**)
gl::Context::getProgramBinary(gl::ShaderProgramID, int, int*, unsigned int*, void*)
gl::Context::getProgramInfoLog(gl::ShaderProgramID, int, int*, char*)
gl::Context::getProgramInterfaceiv(gl::ShaderProgramID, unsigned int, unsigned int, int*)
gl::Context::getProgramInterfaceivRobust(gl::ShaderProgramID, unsigned int, unsigned int, int, int*, int*)
gl::Context::getProgramNoResolveLink(gl::ShaderProgramID) const
gl::Context::getProgramPipeline(gl::ProgramPipelineID) const
gl::Context::getProgramPipelineInfoLog(gl::ProgramPipelineID, int, int*, char*)
gl::Context::getProgramPipelineiv(gl::ProgramPipelineID, unsigned int, int*)
gl::Context::getProgramResourceIndex(gl::ShaderProgramID, unsigned int, char const*)
gl::Context::getProgramResourceLocation(gl::ShaderProgramID, unsigned int, char const*)
gl::Context::getProgramResourceLocationIndex(gl::ShaderProgramID, unsigned int, char const*)
gl::Context::getProgramResourceName(gl::ShaderProgramID, unsigned int, unsigned int, int, int*, char*)
gl::Context::getProgramResourceiv(gl::ShaderProgramID, unsigned int, unsigned int, int, unsigned int const*, int, int*, int*)
gl::Context::getProgramiv(gl::ShaderProgramID, unsigned int, int*)
gl::Context::getProgramivRobust(gl::ShaderProgramID, unsigned int, int, int*, int*)
gl::Context::getQuery(gl::QueryID) const
gl::Context::getQueryObjecti64v(gl::QueryID, unsigned int, long*)
gl::Context::getQueryObjecti64vRobust(gl::QueryID, unsigned int, int, int*, long*)
gl::Context::getQueryObjectiv(gl::QueryID, unsigned int, int*)
gl::Context::getQueryObjectivRobust(gl::QueryID, unsigned int, int, int*, int*)
gl::Context::getQueryObjectui64v(gl::QueryID, unsigned int, unsigned long*)
gl::Context::getQueryObjectui64vRobust(gl::QueryID, unsigned int, int, int*, unsigned long*)
gl::Context::getQueryObjectuiv(gl::QueryID, unsigned int, unsigned int*)
gl::Context::getQueryObjectuivRobust(gl::QueryID, unsigned int, int, int*, unsigned int*)
gl::Context::getQueryParameterInfo(unsigned int, unsigned int*, unsigned int*) const
gl::Context::getQueryiv(gl::QueryType, unsigned int, int*)
gl::Context::getQueryivRobust(gl::QueryType, unsigned int, int, int*, int*)
gl::Context::getRenderBuffer() const
gl::Context::getRenderbuffer(gl::RenderbufferID) const
gl::Context::getRenderbufferImage(unsigned int, unsigned int, unsigned int, void*)
gl::Context::getRenderbufferParameteriv(unsigned int, unsigned int, int*)
gl::Context::getRenderbufferParameterivRobust(unsigned int, unsigned int, int, int*, int*)
gl::Context::getRequestableExtensionStringCount() const
gl::Context::getSampler(gl::SamplerID) const
gl::Context::getSamplerParameterIiv(gl::SamplerID, unsigned int, int*)
gl::Context::getSamplerParameterIivRobust(gl::SamplerID, unsigned int, int, int*, int*)
gl::Context::getSamplerParameterIuiv(gl::SamplerID, unsigned int, unsigned int*)
gl::Context::getSamplerParameterIuivRobust(gl::SamplerID, unsigned int, int, int*, unsigned int*)
gl::Context::getSamplerParameterfv(gl::SamplerID, unsigned int, float*)
gl::Context::getSamplerParameterfvRobust(gl::SamplerID, unsigned int, int, int*, float*)
gl::Context::getSamplerParameteriv(gl::SamplerID, unsigned int, int*)
gl::Context::getSamplerParameterivRobust(gl::SamplerID, unsigned int, int, int*, int*)
gl::Context::getScratchBuffer() const
gl::Context::getScratchBuffer(unsigned long, angle::MemoryBuffer**) const
gl::Context::getSemaphoreParameterui64v(gl::SemaphoreID, unsigned int, unsigned long*)
gl::Context::getShader(gl::ShaderProgramID) const
gl::Context::getShaderInfoLog(gl::ShaderProgramID, int, int*, char*)
gl::Context::getShaderPrecisionFormat(unsigned int, unsigned int, int*, int*)
gl::Context::getShaderSource(gl::ShaderProgramID, int, int*, char*)
gl::Context::getShaderiv(gl::ShaderProgramID, unsigned int, int*)
gl::Context::getShaderivRobust(gl::ShaderProgramID, unsigned int, int, int*, int*)
gl::Context::getString(unsigned int)
gl::Context::getString(unsigned int) const
gl::Context::getStringi(unsigned int, unsigned int)
gl::Context::getSync(__GLsync*) const
gl::Context::getSynciv(__GLsync*, unsigned int, int, int*, int*)
gl::Context::getTexEnvfv(gl::TextureEnvTarget, gl::TextureEnvParameter, float*)
gl::Context::getTexEnviv(gl::TextureEnvTarget, gl::TextureEnvParameter, int*)
gl::Context::getTexEnvxv(gl::TextureEnvTarget, gl::TextureEnvParameter, int*)
gl::Context::getTexGenfv(unsigned int, unsigned int, float*)
gl::Context::getTexGeniv(unsigned int, unsigned int, int*)
gl::Context::getTexGenxv(unsigned int, unsigned int, int*)
gl::Context::getTexImage(gl::TextureTarget, int, unsigned int, unsigned int, void*)
gl::Context::getTexLevelParameterfv(gl::TextureTarget, int, unsigned int, float*)
gl::Context::getTexLevelParameterfvRobust(gl::TextureTarget, int, unsigned int, int, int*, float*)
gl::Context::getTexLevelParameteriv(gl::TextureTarget, int, unsigned int, int*)
gl::Context::getTexLevelParameterivRobust(gl::TextureTarget, int, unsigned int, int, int*, int*)
gl::Context::getTexParameterIiv(gl::TextureType, unsigned int, int*)
gl::Context::getTexParameterIivRobust(gl::TextureType, unsigned int, int, int*, int*)
gl::Context::getTexParameterIuiv(gl::TextureType, unsigned int, unsigned int*)
gl::Context::getTexParameterIuivRobust(gl::TextureType, unsigned int, int, int*, unsigned int*)
gl::Context::getTexParameterfv(gl::TextureType, unsigned int, float*)
gl::Context::getTexParameterfvRobust(gl::TextureType, unsigned int, int, int*, float*)
gl::Context::getTexParameteriv(gl::TextureType, unsigned int, int*)
gl::Context::getTexParameterivRobust(gl::TextureType, unsigned int, int, int*, int*)
gl::Context::getTexParameterxv(gl::TextureType, unsigned int, int*)
gl::Context::getTextureByTarget(gl::TextureTarget) const
gl::Context::getTextureByType(gl::TextureType) const
gl::Context::getTransformFeedback(gl::TransformFeedbackID) const
gl::Context::getTransformFeedbackVarying(gl::ShaderProgramID, unsigned int, int, int*, int*, unsigned int*, char*)
gl::Context::getTranslatedShaderSource(gl::ShaderProgramID, int, int*, char*)
gl::Context::getUniformBlockIndex(gl::ShaderProgramID, char const*)
gl::Context::getUniformIndices(gl::ShaderProgramID, int, char const* const*, unsigned int*)
gl::Context::getUniformLocation(gl::ShaderProgramID, char const*)
gl::Context::getUniformfv(gl::ShaderProgramID, gl::UniformLocation, float*)
gl::Context::getUniformfvRobust(gl::ShaderProgramID, gl::UniformLocation, int, int*, float*)
gl::Context::getUniformiv(gl::ShaderProgramID, gl::UniformLocation, int*)
gl::Context::getUniformivRobust(gl::ShaderProgramID, gl::UniformLocation, int, int*, int*)
gl::Context::getUniformuiv(gl::ShaderProgramID, gl::UniformLocation, unsigned int*)
gl::Context::getUniformuivRobust(gl::ShaderProgramID, gl::UniformLocation, int, int*, unsigned int*)
gl::Context::getUnsignedBytei_v(unsigned int, unsigned int, unsigned char*)
gl::Context::getUnsignedBytev(unsigned int, unsigned char*)
gl::Context::getVertexArray(gl::VertexArrayID) const
gl::Context::getVertexAttribIiv(unsigned int, unsigned int, int*)
gl::Context::getVertexAttribIivRobust(unsigned int, unsigned int, int, int*, int*)
gl::Context::getVertexAttribIuiv(unsigned int, unsigned int, unsigned int*)
gl::Context::getVertexAttribIuivRobust(unsigned int, unsigned int, int, int*, unsigned int*)
gl::Context::getVertexAttribPointerv(unsigned int, unsigned int, void**)
gl::Context::getVertexAttribPointervRobust(unsigned int, unsigned int, int, int*, void**)
gl::Context::getVertexAttribfv(unsigned int, unsigned int, float*)
gl::Context::getVertexAttribfvRobust(unsigned int, unsigned int, int, int*, float*)
gl::Context::getVertexAttribiv(unsigned int, unsigned int, int*)
gl::Context::getVertexAttribivRobust(unsigned int, unsigned int, int, int*, int*)
gl::Context::getZeroFilledBuffer(unsigned long, angle::MemoryBuffer**) const
gl::Context::getnUniformfv(gl::ShaderProgramID, gl::UniformLocation, int, float*)
gl::Context::getnUniformfvRobust(gl::ShaderProgramID, gl::UniformLocation, int, int*, float*)
gl::Context::getnUniformiv(gl::ShaderProgramID, gl::UniformLocation, int, int*)
gl::Context::getnUniformivRobust(gl::ShaderProgramID, gl::UniformLocation, int, int*, int*)
gl::Context::getnUniformuiv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned int*)
gl::Context::getnUniformuivRobust(gl::ShaderProgramID, gl::UniformLocation, int, int*, unsigned int*)
gl::Context::handleError(unsigned int, char const*, char const*, char const*, unsigned int)
gl::Context::hasActiveTransformFeedback(gl::ShaderProgramID) const
gl::Context::hint(unsigned int, unsigned int)
gl::Context::importMemoryFd(gl::MemoryObjectID, unsigned long, gl::HandleType, int)
gl::Context::importMemoryZirconHandle(gl::MemoryObjectID, unsigned long, gl::HandleType, unsigned int)
gl::Context::importSemaphoreFd(gl::SemaphoreID, gl::HandleType, int)
gl::Context::importSemaphoreZirconHandle(gl::SemaphoreID, gl::HandleType, unsigned int)
gl::Context::initCaps()
gl::Context::initExtensionStrings()
gl::Context::initExtensionStrings()::$_0::operator()(std::__1::vector<char const*, std::__1::allocator<char const*> > const&) const
gl::Context::initRendererString()
gl::Context::initVersionStrings()
gl::Context::initialize()
gl::Context::insertEventMarker(int, char const*)
gl::Context::invalidateFramebuffer(unsigned int, int, unsigned int const*)
gl::Context::invalidateSubFramebuffer(unsigned int, int, unsigned int const*, int, int, int, int)
gl::Context::invalidateTexture(gl::TextureType)
gl::Context::isBuffer(gl::BufferID) const
gl::Context::isCurrentTransformFeedback(gl::TransformFeedback const*) const
gl::Context::isEnabled(unsigned int) const
gl::Context::isEnabledi(unsigned int, unsigned int) const
gl::Context::isExtensionDisablable(char const*) const
gl::Context::isExtensionRequestable(char const*) const
gl::Context::isFenceNV(gl::FenceNVID) const
gl::Context::isFramebuffer(gl::FramebufferID) const
gl::Context::isFramebufferGenerated(gl::FramebufferID) const
gl::Context::isMemoryObject(gl::MemoryObjectID) const
gl::Context::isProgram(gl::ShaderProgramID) const
gl::Context::isProgramPipeline(gl::ProgramPipelineID) const
gl::Context::isProgramPipelineGenerated(gl::ProgramPipelineID) const
gl::Context::isQuery(gl::QueryID) const
gl::Context::isQueryGenerated(gl::QueryID) const
gl::Context::isRenderbuffer(gl::RenderbufferID) const
gl::Context::isRenderbufferGenerated(gl::RenderbufferID) const
gl::Context::isResetNotificationEnabled()
gl::Context::isSampler(gl::SamplerID) const
gl::Context::isSemaphore(gl::SemaphoreID) const
gl::Context::isShader(gl::ShaderProgramID) const
gl::Context::isSync(__GLsync*) const
gl::Context::isTexture(gl::TextureID) const
gl::Context::isTransformFeedback(gl::TransformFeedbackID) const
gl::Context::isTransformFeedbackGenerated(gl::TransformFeedbackID) const
gl::Context::isVertexArray(gl::VertexArrayID) const
gl::Context::isVertexArrayGenerated(gl::VertexArrayID) const
gl::Context::lightModelf(unsigned int, float)
gl::Context::lightModelfv(unsigned int, float const*)
gl::Context::lightModelx(unsigned int, int)
gl::Context::lightModelxv(unsigned int, int const*)
gl::Context::lightf(unsigned int, gl::LightParameter, float)
gl::Context::lightfv(unsigned int, gl::LightParameter, float const*)
gl::Context::lightx(unsigned int, gl::LightParameter, int)
gl::Context::lightxv(unsigned int, gl::LightParameter, int const*)
gl::Context::lineWidth(float)
gl::Context::lineWidthx(int)
gl::Context::linkProgram(gl::ShaderProgramID)
gl::Context::loadIdentity()
gl::Context::loadMatrixf(float const*)
gl::Context::loadMatrixx(int const*)
gl::Context::loadPaletteFromModelViewMatrix()
gl::Context::logicOp(gl::LogicalOperation)
gl::Context::loseContext(gl::GraphicsResetStatus, gl::GraphicsResetStatus)
gl::Context::makeCurrent(egl::Display*, egl::Surface*, egl::Surface*)
gl::Context::mapBuffer(gl::BufferBinding, unsigned int)
gl::Context::mapBufferRange(gl::BufferBinding, long, long, unsigned int)
gl::Context::markContextLost(gl::GraphicsResetStatus)
gl::Context::materialf(unsigned int, gl::MaterialParameter, float)
gl::Context::materialfv(unsigned int, gl::MaterialParameter, float const*)
gl::Context::materialx(unsigned int, gl::MaterialParameter, int)
gl::Context::materialxv(unsigned int, gl::MaterialParameter, int const*)
gl::Context::matrixIndexPointer(int, unsigned int, int, void const*)
gl::Context::matrixMode(gl::MatrixType)
gl::Context::maxShaderCompilerThreads(unsigned int)
gl::Context::memoryBarrier(unsigned int)
gl::Context::memoryBarrierByRegion(unsigned int)
gl::Context::memoryObjectParameteriv(gl::MemoryObjectID, unsigned int, int const*)
gl::Context::minSampleShading(float)
gl::Context::multMatrixf(float const*)
gl::Context::multMatrixx(int const*)
gl::Context::multiDrawArrays(gl::PrimitiveMode, int const*, int const*, int)
gl::Context::multiDrawArraysInstanced(gl::PrimitiveMode, int const*, int const*, int const*, int)
gl::Context::multiDrawArraysInstancedBaseInstance(gl::PrimitiveMode, int const*, int const*, int const*, unsigned int const*, int)
gl::Context::multiDrawElements(gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int)
gl::Context::multiDrawElementsBaseVertex(gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int, int const*)
gl::Context::multiDrawElementsInstanced(gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int const*, int)
gl::Context::multiDrawElementsInstancedBaseVertexBaseInstance(gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int const*, int const*, unsigned int const*, int)
gl::Context::multiTexCoord4f(unsigned int, float, float, float, float)
gl::Context::multiTexCoord4x(unsigned int, int, int, int, int)
gl::Context::normal3f(float, float, float)
gl::Context::normal3x(int, int, int)
gl::Context::normalPointer(gl::VertexAttribType, int, void const*)
gl::Context::objectLabel(unsigned int, unsigned int, int, char const*)
gl::Context::objectPtrLabel(void const*, int, char const*)
gl::Context::onDestroy(egl::Display const*)
gl::Context::onGPUSwitch()
gl::Context::onPostSwap() const
gl::Context::onProgramLink(gl::Program*)
gl::Context::onSamplerUniformChange(unsigned long)
gl::Context::onSubjectStateChange(unsigned long, angle::SubjectMessage)
gl::Context::orthof(float, float, float, float, float, float)
gl::Context::orthox(int, int, int, int, int, int)
gl::Context::patchParameteri(unsigned int, int)
gl::Context::pauseTransformFeedback()
gl::Context::pixelStorei(unsigned int, int)
gl::Context::pointParameterf(gl::PointParameter, float)
gl::Context::pointParameterfv(gl::PointParameter, float const*)
gl::Context::pointParameterx(gl::PointParameter, int)
gl::Context::pointParameterxv(gl::PointParameter, int const*)
gl::Context::pointSize(float)
gl::Context::pointSizePointer(gl::VertexAttribType, int, void const*)
gl::Context::pointSizex(int)
gl::Context::polygonOffset(float, float)
gl::Context::polygonOffsetx(int, int)
gl::Context::popDebugGroup()
gl::Context::popGroupMarker()
gl::Context::popMatrix()
gl::Context::primitiveBoundingBox(float, float, float, float, float, float, float, float)
gl::Context::programBinary(gl::ShaderProgramID, unsigned int, void const*, int)
gl::Context::programParameteri(gl::ShaderProgramID, unsigned int, int)
gl::Context::programUniform1f(gl::ShaderProgramID, gl::UniformLocation, float)
gl::Context::programUniform1fv(gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::Context::programUniform1i(gl::ShaderProgramID, gl::UniformLocation, int)
gl::Context::programUniform1iv(gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::Context::programUniform1ui(gl::ShaderProgramID, gl::UniformLocation, unsigned int)
gl::Context::programUniform1uiv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::Context::programUniform2f(gl::ShaderProgramID, gl::UniformLocation, float, float)
gl::Context::programUniform2fv(gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::Context::programUniform2i(gl::ShaderProgramID, gl::UniformLocation, int, int)
gl::Context::programUniform2iv(gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::Context::programUniform2ui(gl::ShaderProgramID, gl::UniformLocation, unsigned int, unsigned int)
gl::Context::programUniform2uiv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::Context::programUniform3f(gl::ShaderProgramID, gl::UniformLocation, float, float, float)
gl::Context::programUniform3fv(gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::Context::programUniform3i(gl::ShaderProgramID, gl::UniformLocation, int, int, int)
gl::Context::programUniform3iv(gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::Context::programUniform3ui(gl::ShaderProgramID, gl::UniformLocation, unsigned int, unsigned int, unsigned int)
gl::Context::programUniform3uiv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::Context::programUniform4f(gl::ShaderProgramID, gl::UniformLocation, float, float, float, float)
gl::Context::programUniform4fv(gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::Context::programUniform4i(gl::ShaderProgramID, gl::UniformLocation, int, int, int, int)
gl::Context::programUniform4iv(gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::Context::programUniform4ui(gl::ShaderProgramID, gl::UniformLocation, unsigned int, unsigned int, unsigned int, unsigned int)
gl::Context::programUniform4uiv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::Context::programUniformMatrix2fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix2x3fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix2x4fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix3fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix3x2fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix3x4fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix4fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix4x2fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::programUniformMatrix4x3fv(gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::Context::provokingVertex(gl::ProvokingVertexConvention)
gl::Context::pushDebugGroup(unsigned int, unsigned int, int, char const*)
gl::Context::pushGroupMarker(int, char const*)
gl::Context::pushMatrix()
gl::Context::queryCounter(gl::QueryID, gl::QueryType)
gl::Context::queryMatrixx(int*, int*)
gl::Context::reacquireHighPowerGPU()
gl::Context::readBuffer(unsigned int)
gl::Context::readPixels(int, int, int, int, unsigned int, unsigned int, void*)
gl::Context::readPixelsRobust(int, int, int, int, unsigned int, unsigned int, int, int*, int*, int*, void*)
gl::Context::readnPixels(int, int, int, int, unsigned int, unsigned int, int, void*)
gl::Context::readnPixelsRobust(int, int, int, int, unsigned int, unsigned int, int, int*, int*, int*, void*)
gl::Context::reinitializeAfterExtensionsChanged()
gl::Context::releaseHighPowerGPU()
gl::Context::releaseShaderCompiler()
gl::Context::renderbufferStorage(unsigned int, unsigned int, int, int)
gl::Context::renderbufferStorageMultisample(unsigned int, int, unsigned int, int, int)
gl::Context::requestExtension(char const*)
gl::Context::resumeTransformFeedback()
gl::Context::rotatef(float, float, float, float)
gl::Context::rotatex(int, int, int, int)
gl::Context::sampleCoverage(float, unsigned char)
gl::Context::sampleCoveragex(int, unsigned char)
gl::Context::sampleMaski(unsigned int, unsigned int)
gl::Context::samplerParameterIiv(gl::SamplerID, unsigned int, int const*)
gl::Context::samplerParameterIivRobust(gl::SamplerID, unsigned int, int, int const*)
gl::Context::samplerParameterIuiv(gl::SamplerID, unsigned int, unsigned int const*)
gl::Context::samplerParameterIuivRobust(gl::SamplerID, unsigned int, int, unsigned int const*)
gl::Context::samplerParameterf(gl::SamplerID, unsigned int, float)
gl::Context::samplerParameterfv(gl::SamplerID, unsigned int, float const*)
gl::Context::samplerParameterfvRobust(gl::SamplerID, unsigned int, int, float const*)
gl::Context::samplerParameteri(gl::SamplerID, unsigned int, int)
gl::Context::samplerParameteriv(gl::SamplerID, unsigned int, int const*)
gl::Context::samplerParameterivRobust(gl::SamplerID, unsigned int, int, int const*)
gl::Context::scalef(float, float, float)
gl::Context::scalex(int, int, int)
gl::Context::scissor(int, int, int, int)
gl::Context::semaphoreParameterui64v(gl::SemaphoreID, unsigned int, unsigned long const*)
gl::Context::setDefaultFramebuffer(egl::Surface*, egl::Surface*)
gl::Context::setExtensionEnabled(char const*, bool)
gl::Context::setFenceNV(gl::FenceNVID, unsigned int)
gl::Context::setLabel(void*)
gl::Context::shadeModel(gl::ShadingModel)
gl::Context::shaderBinary(int, gl::ShaderProgramID const*, unsigned int, void const*, int)
gl::Context::shaderSource(gl::ShaderProgramID, int, char const* const*, int const*)
gl::Context::signalSemaphore(gl::SemaphoreID, unsigned int, gl::BufferID const*, unsigned int, gl::TextureID const*, unsigned int const*)
gl::Context::stencilFunc(unsigned int, int, unsigned int)
gl::Context::stencilFuncSeparate(unsigned int, unsigned int, int, unsigned int)
gl::Context::stencilMask(unsigned int)
gl::Context::stencilMaskSeparate(unsigned int, unsigned int)
gl::Context::stencilOp(unsigned int, unsigned int, unsigned int)
gl::Context::stencilOpSeparate(unsigned int, unsigned int, unsigned int, unsigned int)
gl::Context::testFenceNV(gl::FenceNVID)
gl::Context::texBuffer(unsigned int, unsigned int, gl::BufferID)
gl::Context::texBufferRange(unsigned int, unsigned int, gl::BufferID, long, long)
gl::Context::texCoordPointer(int, gl::VertexAttribType, int, void const*)
gl::Context::texEnvf(gl::TextureEnvTarget, gl::TextureEnvParameter, float)
gl::Context::texEnvfv(gl::TextureEnvTarget, gl::TextureEnvParameter, float const*)
gl::Context::texEnvi(gl::TextureEnvTarget, gl::TextureEnvParameter, int)
gl::Context::texEnviv(gl::TextureEnvTarget, gl::TextureEnvParameter, int const*)
gl::Context::texEnvx(gl::TextureEnvTarget, gl::TextureEnvParameter, int)
gl::Context::texEnvxv(gl::TextureEnvTarget, gl::TextureEnvParameter, int const*)
gl::Context::texGenf(unsigned int, unsigned int, float)
gl::Context::texGenfv(unsigned int, unsigned int, float const*)
gl::Context::texGeni(unsigned int, unsigned int, int)
gl::Context::texGeniv(unsigned int, unsigned int, int const*)
gl::Context::texGenx(unsigned int, unsigned int, int)
gl::Context::texGenxv(unsigned int, unsigned int, int const*)
gl::Context::texImage2D(gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::Context::texImage2DExternal(gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int)
gl::Context::texImage2DRobust(gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::Context::texImage3D(gl::TextureTarget, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::Context::texImage3DRobust(gl::TextureTarget, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::Context::texParameterIiv(gl::TextureType, unsigned int, int const*)
gl::Context::texParameterIivRobust(gl::TextureType, unsigned int, int, int const*)
gl::Context::texParameterIuiv(gl::TextureType, unsigned int, unsigned int const*)
gl::Context::texParameterIuivRobust(gl::TextureType, unsigned int, int, unsigned int const*)
gl::Context::texParameterf(gl::TextureType, unsigned int, float)
gl::Context::texParameterfv(gl::TextureType, unsigned int, float const*)
gl::Context::texParameterfvRobust(gl::TextureType, unsigned int, int, float const*)
gl::Context::texParameteri(gl::TextureType, unsigned int, int)
gl::Context::texParameteriv(gl::TextureType, unsigned int, int const*)
gl::Context::texParameterivRobust(gl::TextureType, unsigned int, int, int const*)
gl::Context::texParameterx(gl::TextureType, unsigned int, int)
gl::Context::texParameterxv(gl::TextureType, unsigned int, int const*)
gl::Context::texStorage1D(unsigned int, int, unsigned int, int)
gl::Context::texStorage2D(gl::TextureType, int, unsigned int, int, int)
gl::Context::texStorage2DMultisample(gl::TextureType, int, unsigned int, int, int, unsigned char)
gl::Context::texStorage3D(gl::TextureType, int, unsigned int, int, int, int)
gl::Context::texStorage3DMultisample(gl::TextureType, int, unsigned int, int, int, int, unsigned char)
gl::Context::texStorageMem2D(gl::TextureType, int, unsigned int, int, int, gl::MemoryObjectID, unsigned long)
gl::Context::texStorageMem2DMultisample(gl::TextureType, int, unsigned int, int, int, unsigned char, gl::MemoryObjectID, unsigned long)
gl::Context::texStorageMem3D(gl::TextureType, int, unsigned int, int, int, int, gl::MemoryObjectID, unsigned long)
gl::Context::texStorageMem3DMultisample(gl::TextureType, int, unsigned int, int, int, int, unsigned char, gl::MemoryObjectID, unsigned long)
gl::Context::texSubImage2D(gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::Context::texSubImage2DRobust(gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::Context::texSubImage3D(gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::Context::texSubImage3DRobust(gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::Context::transformFeedbackVaryings(gl::ShaderProgramID, int, char const* const*, unsigned int)
gl::Context::translatef(float, float, float)
gl::Context::translatex(int, int, int)
gl::Context::unMakeCurrent(egl::Display const*)
gl::Context::uniform1f(gl::UniformLocation, float)
gl::Context::uniform1fv(gl::UniformLocation, int, float const*)
gl::Context::uniform1i(gl::UniformLocation, int)
gl::Context::uniform1iv(gl::UniformLocation, int, int const*)
gl::Context::uniform1ui(gl::UniformLocation, unsigned int)
gl::Context::uniform1uiv(gl::UniformLocation, int, unsigned int const*)
gl::Context::uniform2f(gl::UniformLocation, float, float)
gl::Context::uniform2fv(gl::UniformLocation, int, float const*)
gl::Context::uniform2i(gl::UniformLocation, int, int)
gl::Context::uniform2iv(gl::UniformLocation, int, int const*)
gl::Context::uniform2ui(gl::UniformLocation, unsigned int, unsigned int)
gl::Context::uniform2uiv(gl::UniformLocation, int, unsigned int const*)
gl::Context::uniform3f(gl::UniformLocation, float, float, float)
gl::Context::uniform3fv(gl::UniformLocation, int, float const*)
gl::Context::uniform3i(gl::UniformLocation, int, int, int)
gl::Context::uniform3iv(gl::UniformLocation, int, int const*)
gl::Context::uniform3ui(gl::UniformLocation, unsigned int, unsigned int, unsigned int)
gl::Context::uniform3uiv(gl::UniformLocation, int, unsigned int const*)
gl::Context::uniform4f(gl::UniformLocation, float, float, float, float)
gl::Context::uniform4fv(gl::UniformLocation, int, float const*)
gl::Context::uniform4i(gl::UniformLocation, int, int, int, int)
gl::Context::uniform4iv(gl::UniformLocation, int, int const*)
gl::Context::uniform4ui(gl::UniformLocation, unsigned int, unsigned int, unsigned int, unsigned int)
gl::Context::uniform4uiv(gl::UniformLocation, int, unsigned int const*)
gl::Context::uniformBlockBinding(gl::ShaderProgramID, unsigned int, unsigned int)
gl::Context::uniformMatrix2fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix2x3fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix2x4fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix3fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix3x2fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix3x4fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix4fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix4x2fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::uniformMatrix4x3fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Context::unmapBuffer(gl::BufferBinding)
gl::Context::unsetDefaultFramebuffer()
gl::Context::updateCaps()
gl::Context::useProgram(gl::ShaderProgramID)
gl::Context::useProgramStages(gl::ProgramPipelineID, unsigned int, gl::ShaderProgramID)
gl::Context::usingDisplayTextureShareGroup() const
gl::Context::validateProgram(gl::ShaderProgramID)
gl::Context::validateProgramPipeline(gl::ProgramPipelineID)
gl::Context::validationError(unsigned int, char const*) const
gl::Context::vertexArrayIndex(gl::ClientVertexArrayType) const
gl::Context::vertexAttrib1f(unsigned int, float)
gl::Context::vertexAttrib1fv(unsigned int, float const*)
gl::Context::vertexAttrib2f(unsigned int, float, float)
gl::Context::vertexAttrib2fv(unsigned int, float const*)
gl::Context::vertexAttrib3f(unsigned int, float, float, float)
gl::Context::vertexAttrib3fv(unsigned int, float const*)
gl::Context::vertexAttrib4f(unsigned int, float, float, float, float)
gl::Context::vertexAttrib4fv(unsigned int, float const*)
gl::Context::vertexAttribBinding(unsigned int, unsigned int)
gl::Context::vertexAttribDivisor(unsigned int, unsigned int)
gl::Context::vertexAttribFormat(unsigned int, int, gl::VertexAttribType, unsigned char, unsigned int)
gl::Context::vertexAttribI4i(unsigned int, int, int, int, int)
gl::Context::vertexAttribI4iv(unsigned int, int const*)
gl::Context::vertexAttribI4ui(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::Context::vertexAttribI4uiv(unsigned int, unsigned int const*)
gl::Context::vertexAttribIFormat(unsigned int, int, gl::VertexAttribType, unsigned int)
gl::Context::vertexAttribIPointer(unsigned int, int, gl::VertexAttribType, int, void const*)
gl::Context::vertexAttribPointer(unsigned int, int, gl::VertexAttribType, unsigned char, int, void const*)
gl::Context::vertexBindingDivisor(unsigned int, unsigned int)
gl::Context::vertexPointer(int, gl::VertexAttribType, int, void const*)
gl::Context::viewport(int, int, int, int)
gl::Context::waitSemaphore(gl::SemaphoreID, unsigned int, gl::BufferID const*, unsigned int, gl::TextureID const*, unsigned int const*)
gl::Context::waitSync(__GLsync*, unsigned int, unsigned long)
gl::Context::weightPointer(int, unsigned int, int, void const*)
gl::Context::~Context()
gl::ConvertTextureEnvFromFixed(gl::TextureEnvParameter, int const*, float*)
gl::ConvertTextureEnvFromInt(gl::TextureEnvParameter, int const*, float*)
gl::ConvertTextureEnvToFixed(gl::TextureEnvParameter, float const*, int*)
gl::ConvertTextureEnvToInt(gl::TextureEnvParameter, float const*, int*)
gl::CopyBufferSubData(unsigned int, unsigned int, long, long, long)
gl::CopyBufferSubDataContextANGLE(void*, unsigned int, unsigned int, long, long, long)
gl::CopyImageSubData(unsigned int, unsigned int, int, int, int, int, unsigned int, unsigned int, int, int, int, int, int, int, int)
gl::CopyImageSubDataContextANGLE(void*, unsigned int, unsigned int, int, int, int, int, unsigned int, unsigned int, int, int, int, int, int, int, int)
gl::CopySubTexture3DANGLE(unsigned int, int, unsigned int, unsigned int, int, int, int, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::CopySubTexture3DANGLEContextANGLE(void*, unsigned int, int, unsigned int, unsigned int, int, int, int, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::CopySubTextureCHROMIUM(unsigned int, int, unsigned int, unsigned int, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::CopySubTextureCHROMIUMContextANGLE(void*, unsigned int, int, unsigned int, unsigned int, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::CopyTexImage2D(unsigned int, int, unsigned int, int, int, int, int, int)
gl::CopyTexImage2DContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, int, int)
gl::CopyTexSubImage2D(unsigned int, int, int, int, int, int, int, int)
gl::CopyTexSubImage2DContextANGLE(void*, unsigned int, int, int, int, int, int, int, int)
gl::CopyTexSubImage3D(unsigned int, int, int, int, int, int, int, int, int)
gl::CopyTexSubImage3DContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, int)
gl::CopyTexSubImage3DOES(unsigned int, int, int, int, int, int, int, int, int)
gl::CopyTexSubImage3DOESContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, int)
gl::CopyTexture3DANGLE(unsigned int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::CopyTexture3DANGLEContextANGLE(void*, unsigned int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::CopyTextureCHROMIUM(unsigned int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::CopyTextureCHROMIUMContextANGLE(void*, unsigned int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::CoverageModulationCHROMIUM(unsigned int)
gl::CoverageModulationCHROMIUMContextANGLE(void*, unsigned int)
gl::CreateMemoryObjectsEXT(int, unsigned int*)
gl::CreateMemoryObjectsEXTContextANGLE(void*, int, unsigned int*)
gl::CreateProgram()
gl::CreateProgramContextANGLE(void*)
gl::CreateShader(unsigned int)
gl::CreateShaderContextANGLE(void*, unsigned int)
gl::CreateShaderProgramv(unsigned int, int, char const* const*)
gl::CreateShaderProgramvContextANGLE(void*, unsigned int, int, char const* const*)
gl::CubeFaceIndexToTextureTarget(unsigned long)
gl::CubeMapTextureTargetToFaceIndex(gl::TextureTarget)
gl::CullFace(unsigned int)
gl::CullFaceContextANGLE(void*, unsigned int)
gl::CullFaceMode gl::FromGLenum<gl::CullFaceMode>(unsigned int)
gl::CurrentPaletteMatrixOES(unsigned int)
gl::CurrentPaletteMatrixOESContextANGLE(void*, unsigned int)
gl::CustomBlockLayoutEncoderFactory::~CustomBlockLayoutEncoderFactory()
gl::Debug::Debug(bool)
gl::Debug::Group::Group(gl::Debug::Group const&)
gl::Debug::getCallback() const
gl::Debug::getGroupStackDepth() const
gl::Debug::getMessageCount() const
gl::Debug::getMessages(unsigned int, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, int*, char*)
gl::Debug::getNextMessageLength() const
gl::Debug::getUserParam() const
gl::Debug::insertMessage(unsigned int, unsigned int, unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&, int) const
gl::Debug::isOutputEnabled() const
gl::Debug::isOutputSynchronous() const
gl::Debug::popGroup()
gl::Debug::pushDefaultGroup()
gl::Debug::pushGroup(unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)
gl::Debug::setCallback(void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::Debug::setMaxLoggedMessages(unsigned int)
gl::Debug::setMessageControl(unsigned int, unsigned int, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&&, bool)
gl::Debug::setOutputEnabled(bool)
gl::Debug::setOutputSynchronous(bool)
gl::Debug::~Debug()
gl::DebugAnnotator::~DebugAnnotator()
gl::DebugMessageCallback(void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::DebugMessageCallbackContextANGLE(void*, void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::DebugMessageCallbackKHR(void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::DebugMessageCallbackKHRContextANGLE(void*, void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::DebugMessageControl(unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
gl::DebugMessageControlContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
gl::DebugMessageControlKHR(unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
gl::DebugMessageControlKHRContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
gl::DebugMessageInsert(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
gl::DebugMessageInsertContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
gl::DebugMessageInsertKHR(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
gl::DebugMessageInsertKHRContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
gl::DeleteBuffers(int, unsigned int const*)
gl::DeleteBuffersContextANGLE(void*, int, unsigned int const*)
gl::DeleteFencesNV(int, unsigned int const*)
gl::DeleteFencesNVContextANGLE(void*, int, unsigned int const*)
gl::DeleteFramebuffers(int, unsigned int const*)
gl::DeleteFramebuffersContextANGLE(void*, int, unsigned int const*)
gl::DeleteFramebuffersOES(int, unsigned int const*)
gl::DeleteFramebuffersOESContextANGLE(void*, int, unsigned int const*)
gl::DeleteMemoryObjectsEXT(int, unsigned int const*)
gl::DeleteMemoryObjectsEXTContextANGLE(void*, int, unsigned int const*)
gl::DeleteProgram(unsigned int)
gl::DeleteProgramContextANGLE(void*, unsigned int)
gl::DeleteProgramPipelines(int, unsigned int const*)
gl::DeleteProgramPipelinesContextANGLE(void*, int, unsigned int const*)
gl::DeleteQueries(int, unsigned int const*)
gl::DeleteQueriesContextANGLE(void*, int, unsigned int const*)
gl::DeleteQueriesEXT(int, unsigned int const*)
gl::DeleteQueriesEXTContextANGLE(void*, int, unsigned int const*)
gl::DeleteRenderbuffers(int, unsigned int const*)
gl::DeleteRenderbuffersContextANGLE(void*, int, unsigned int const*)
gl::DeleteRenderbuffersOES(int, unsigned int const*)
gl::DeleteRenderbuffersOESContextANGLE(void*, int, unsigned int const*)
gl::DeleteSamplers(int, unsigned int const*)
gl::DeleteSamplersContextANGLE(void*, int, unsigned int const*)
gl::DeleteSemaphoresEXT(int, unsigned int const*)
gl::DeleteSemaphoresEXTContextANGLE(void*, int, unsigned int const*)
gl::DeleteShader(unsigned int)
gl::DeleteShaderContextANGLE(void*, unsigned int)
gl::DeleteSync(__GLsync*)
gl::DeleteSyncContextANGLE(void*, __GLsync*)
gl::DeleteTextures(int, unsigned int const*)
gl::DeleteTexturesContextANGLE(void*, int, unsigned int const*)
gl::DeleteTransformFeedbacks(int, unsigned int const*)
gl::DeleteTransformFeedbacksContextANGLE(void*, int, unsigned int const*)
gl::DeleteVertexArrays(int, unsigned int const*)
gl::DeleteVertexArraysContextANGLE(void*, int, unsigned int const*)
gl::DeleteVertexArraysOES(int, unsigned int const*)
gl::DeleteVertexArraysOESContextANGLE(void*, int, unsigned int const*)
gl::DepthFunc(unsigned int)
gl::DepthFuncContextANGLE(void*, unsigned int)
gl::DepthMask(unsigned char)
gl::DepthMaskContextANGLE(void*, unsigned char)
gl::DepthRangef(float, float)
gl::DepthRangefContextANGLE(void*, float, float)
gl::DepthRangex(int, int)
gl::DepthRangexContextANGLE(void*, int, int)
gl::DepthStencilState::DepthStencilState()
gl::DepthStencilState::DepthStencilState(gl::DepthStencilState const&)
gl::DetachShader(unsigned int, unsigned int)
gl::DetachShaderContextANGLE(void*, unsigned int, unsigned int)
gl::DetermineASTCLDRTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineASTCOESTExtureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineBPTCTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineColorBufferFloatSupport(gl::TextureCapsMap const&)::blendableFormats
gl::DetermineColorBufferFloatSupport(gl::TextureCapsMap const&)::nonBlendableFormats
gl::DetermineCompressedTextureETCSupport(gl::TextureCapsMap const&)
gl::DetermineDepthTextureANGLESupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineFloatBlendSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineFloatTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineHalfFloatTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DeterminePVRTCTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DeterminePVRTCsRGBTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineRGTCTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineS3TCsRGBTextureSupport(gl::TextureCapsMap const&)::requiredFormats
gl::DetermineTextureNorm16Support(gl::TextureCapsMap const&)::requiredRenderFormats
gl::Disable(unsigned int)
gl::DisableClientState(unsigned int)
gl::DisableClientStateContextANGLE(void*, unsigned int)
gl::DisableContextANGLE(void*, unsigned int)
gl::DisableExtensionANGLE(char const*)
gl::DisableExtensionANGLEContextANGLE(void*, char const*)
gl::DisableVertexAttribArray(unsigned int)
gl::DisableVertexAttribArrayContextANGLE(void*, unsigned int)
gl::Disablei(unsigned int, unsigned int)
gl::DisableiContextANGLE(void*, unsigned int, unsigned int)
gl::DisableiEXT(unsigned int, unsigned int)
gl::DisableiEXTContextANGLE(void*, unsigned int, unsigned int)
gl::DisableiOES(unsigned int, unsigned int)
gl::DisableiOESContextANGLE(void*, unsigned int, unsigned int)
gl::DiscardFramebufferEXT(unsigned int, int, unsigned int const*)
gl::DiscardFramebufferEXTContextANGLE(void*, unsigned int, int, unsigned int const*)
gl::DispatchCompute(unsigned int, unsigned int, unsigned int)
gl::DispatchComputeContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::DispatchComputeIndirect(long)
gl::DispatchComputeIndirectContextANGLE(void*, long)
gl::DrawArrays(unsigned int, int, int)
gl::DrawArraysContextANGLE(void*, unsigned int, int, int)
gl::DrawArraysIndirect(unsigned int, void const*)
gl::DrawArraysIndirectContextANGLE(void*, unsigned int, void const*)
gl::DrawArraysInstanced(unsigned int, int, int, int)
gl::DrawArraysInstancedANGLE(unsigned int, int, int, int)
gl::DrawArraysInstancedANGLEContextANGLE(void*, unsigned int, int, int, int)
gl::DrawArraysInstancedBaseInstanceANGLE(unsigned int, int, int, int, unsigned int)
gl::DrawArraysInstancedBaseInstanceANGLEContextANGLE(void*, unsigned int, int, int, int, unsigned int)
gl::DrawArraysInstancedContextANGLE(void*, unsigned int, int, int, int)
gl::DrawArraysInstancedEXT(unsigned int, int, int, int)
gl::DrawArraysInstancedEXTContextANGLE(void*, unsigned int, int, int, int)
gl::DrawBuffers(int, unsigned int const*)
gl::DrawBuffersContextANGLE(void*, int, unsigned int const*)
gl::DrawBuffersEXT(int, unsigned int const*)
gl::DrawBuffersEXTContextANGLE(void*, int, unsigned int const*)
gl::DrawElements(unsigned int, int, unsigned int, void const*)
gl::DrawElementsBaseVertex(unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsBaseVertexContextANGLE(void*, unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsBaseVertexEXT(unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsBaseVertexEXTContextANGLE(void*, unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsBaseVertexOES(unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsBaseVertexOESContextANGLE(void*, unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsContextANGLE(void*, unsigned int, int, unsigned int, void const*)
gl::DrawElementsIndirect(unsigned int, unsigned int, void const*)
gl::DrawElementsIndirectContextANGLE(void*, unsigned int, unsigned int, void const*)
gl::DrawElementsInstanced(unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsInstancedANGLE(unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsInstancedANGLEContextANGLE(void*, unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsInstancedBaseVertex(unsigned int, int, unsigned int, void const*, int, int)
gl::DrawElementsInstancedBaseVertexBaseInstanceANGLE(unsigned int, int, unsigned int, void const*, int, int, unsigned int)
gl::DrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE(void*, unsigned int, int, unsigned int, void const*, int, int, unsigned int)
gl::DrawElementsInstancedBaseVertexContextANGLE(void*, unsigned int, int, unsigned int, void const*, int, int)
gl::DrawElementsInstancedBaseVertexEXT(unsigned int, int, unsigned int, void const*, int, int)
gl::DrawElementsInstancedBaseVertexEXTContextANGLE(void*, unsigned int, int, unsigned int, void const*, int, int)
gl::DrawElementsInstancedBaseVertexOES(unsigned int, int, unsigned int, void const*, int, int)
gl::DrawElementsInstancedBaseVertexOESContextANGLE(void*, unsigned int, int, unsigned int, void const*, int, int)
gl::DrawElementsInstancedContextANGLE(void*, unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsInstancedEXT(unsigned int, int, unsigned int, void const*, int)
gl::DrawElementsInstancedEXTContextANGLE(void*, unsigned int, int, unsigned int, void const*, int)
gl::DrawRangeElements(unsigned int, unsigned int, unsigned int, int, unsigned int, void const*)
gl::DrawRangeElementsBaseVertex(unsigned int, unsigned int, unsigned int, int, unsigned int, void const*, int)
gl::DrawRangeElementsBaseVertexContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, unsigned int, void const*, int)
gl::DrawRangeElementsBaseVertexEXT(unsigned int, unsigned int, unsigned int, int, unsigned int, void const*, int)
gl::DrawRangeElementsBaseVertexEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, unsigned int, void const*, int)
gl::DrawRangeElementsBaseVertexOES(unsigned int, unsigned int, unsigned int, int, unsigned int, void const*, int)
gl::DrawRangeElementsBaseVertexOESContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, unsigned int, void const*, int)
gl::DrawRangeElementsContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, unsigned int, void const*)
gl::DrawTexfOES(float, float, float, float, float)
gl::DrawTexfOESContextANGLE(void*, float, float, float, float, float)
gl::DrawTexfvOES(float const*)
gl::DrawTexfvOESContextANGLE(void*, float const*)
gl::DrawTexiOES(int, int, int, int, int)
gl::DrawTexiOESContextANGLE(void*, int, int, int, int, int)
gl::DrawTexivOES(int const*)
gl::DrawTexivOESContextANGLE(void*, int const*)
gl::DrawTexsOES(short, short, short, short, short)
gl::DrawTexsOESContextANGLE(void*, short, short, short, short, short)
gl::DrawTexsvOES(short const*)
gl::DrawTexsvOESContextANGLE(void*, short const*)
gl::DrawTexxOES(int, int, int, int, int)
gl::DrawTexxOESContextANGLE(void*, int, int, int, int, int)
gl::DrawTexxvOES(int const*)
gl::DrawTexxvOESContextANGLE(void*, int const*)
gl::DummyOverlay::DummyOverlay(rx::GLImplFactory*)
gl::DummyOverlay::~DummyOverlay()
gl::EGLImageTargetRenderbufferStorageOES(unsigned int, void*)
gl::EGLImageTargetRenderbufferStorageOESContextANGLE(void*, unsigned int, void*)
gl::EGLImageTargetTexture2DOES(unsigned int, void*)
gl::EGLImageTargetTexture2DOESContextANGLE(void*, unsigned int, void*)
gl::Enable(unsigned int)
gl::EnableClientState(unsigned int)
gl::EnableClientStateContextANGLE(void*, unsigned int)
gl::EnableContextANGLE(void*, unsigned int)
gl::EnableVertexAttribArray(unsigned int)
gl::EnableVertexAttribArrayContextANGLE(void*, unsigned int)
gl::Enablei(unsigned int, unsigned int)
gl::EnableiContextANGLE(void*, unsigned int, unsigned int)
gl::EnableiEXT(unsigned int, unsigned int)
gl::EnableiEXTContextANGLE(void*, unsigned int, unsigned int)
gl::EnableiOES(unsigned int, unsigned int)
gl::EnableiOESContextANGLE(void*, unsigned int, unsigned int)
gl::EndQuery(unsigned int)
gl::EndQueryContextANGLE(void*, unsigned int)
gl::EndQueryEXT(unsigned int)
gl::EndQueryEXTContextANGLE(void*, unsigned int)
gl::EndTransformFeedback()
gl::EndTransformFeedbackContextANGLE(void*)
gl::ErrorSet::handleError(unsigned int, char const*, char const*, char const*, unsigned int)
gl::ErrorSet::validationError(unsigned int, char const*)
gl::Extensions::Extensions()
gl::Extensions::Extensions(gl::Extensions const&)
gl::Extensions::getStrings() const
gl::Extensions::setTextureExtensionSupport(gl::TextureCapsMap const&)
gl::FenceNV::FenceNV(rx::GLImplFactory*)
gl::FenceNV::finish(gl::Context const*)
gl::FenceNV::onDestroy(gl::Context const*)
gl::FenceNV::set(gl::Context const*, unsigned int)
gl::FenceNV::test(gl::Context const*, unsigned char*)
gl::FenceNV::~FenceNV()
gl::FenceSync(unsigned int, unsigned int)
gl::FenceSyncContextANGLE(void*, unsigned int, unsigned int)
gl::FilterMode gl::FromGLenum<gl::FilterMode>(unsigned int)
gl::Finish()
gl::FinishContextANGLE(void*)
gl::FinishFenceNV(unsigned int)
gl::FinishFenceNVContextANGLE(void*, unsigned int)
gl::Float32BlendableSupport(gl::Version const&, gl::Extensions const&)
gl::Flush()
gl::FlushContextANGLE(void*)
gl::FlushMappedBufferRange(unsigned int, long, long)
gl::FlushMappedBufferRangeContextANGLE(void*, unsigned int, long, long)
gl::FlushMappedBufferRangeEXT(unsigned int, long, long)
gl::FlushMappedBufferRangeEXTContextANGLE(void*, unsigned int, long, long)
gl::FogMode gl::FromGLenum<gl::FogMode>(unsigned int)
gl::Fogf(unsigned int, float)
gl::FogfContextANGLE(void*, unsigned int, float)
gl::Fogfv(unsigned int, float const*)
gl::FogfvContextANGLE(void*, unsigned int, float const*)
gl::Fogx(unsigned int, int)
gl::FogxContextANGLE(void*, unsigned int, int)
gl::Fogxv(unsigned int, int const*)
gl::FogxvContextANGLE(void*, unsigned int, int const*)
gl::Format::EquivalentForBlit(gl::Format const&, gl::Format const&)
gl::Format::Format(gl::Format const&)
gl::Format::Format(gl::InternalFormat const&)
gl::Format::Format(unsigned int)
gl::Format::Format(unsigned int, unsigned int)
gl::Format::Invalid()
gl::Format::Invalid()::invalid
gl::Format::SameSized(gl::Format const&, gl::Format const&)
gl::Format::operator=(gl::Format const&)
gl::Format::valid() const
gl::Framebuffer* gl::TypedResourceManager<gl::Framebuffer, gl::HandleAllocator, gl::FramebufferManager, gl::FramebufferID>::checkObjectAllocationImpl<gl::Caps, unsigned long>(rx::GLImplFactory*, gl::FramebufferID, gl::Caps, unsigned long)
gl::Framebuffer::Framebuffer(gl::Caps const&, rx::GLImplFactory*, gl::FramebufferID, unsigned long)
gl::Framebuffer::Framebuffer(gl::Context const*, egl::Surface*, egl::Surface*)
gl::Framebuffer::Framebuffer(gl::Context const*, rx::GLImplFactory*, egl::Surface*)
gl::Framebuffer::blit(gl::Context const*, gl::Rectangle const&, gl::Rectangle const&, unsigned int, unsigned int)
gl::Framebuffer::checkStatusImpl(gl::Context const*) const
gl::Framebuffer::checkStatusWithGLFrontEnd(gl::Context const*) const
gl::Framebuffer::clear(gl::Context const*, unsigned int)
gl::Framebuffer::clearBufferfi(gl::Context const*, unsigned int, int, float, int)
gl::Framebuffer::clearBufferfv(gl::Context const*, unsigned int, int, float const*)
gl::Framebuffer::clearBufferiv(gl::Context const*, unsigned int, int, int const*)
gl::Framebuffer::clearBufferuiv(gl::Context const*, unsigned int, int, unsigned int const*)
gl::Framebuffer::commitWebGL1DepthStencilIfConsistent(gl::Context const*, int, unsigned int, bool, int)
gl::Framebuffer::detachRenderbuffer(gl::Context const*, gl::RenderbufferID)
gl::Framebuffer::detachResourceById(gl::Context const*, unsigned int, unsigned int)
gl::Framebuffer::detachTexture(gl::Context const*, gl::TextureID)
gl::Framebuffer::discard(gl::Context const*, unsigned long, unsigned int const*)
gl::Framebuffer::ensureBufferInitialized(gl::Context const*, unsigned int, int)
gl::Framebuffer::ensureClearAttachmentsInitialized(gl::Context const*, unsigned int)
gl::Framebuffer::ensureClearBufferAttachmentsInitialized(gl::Context const*, unsigned int, int)
gl::Framebuffer::ensureDrawAttachmentsInitialized(gl::Context const*)
gl::Framebuffer::ensureReadAttachmentsInitialized(gl::Context const*)
gl::Framebuffer::formsCopyingFeedbackLoopWith(gl::TextureID, int, int) const
gl::Framebuffer::getAttachment(gl::Context const*, unsigned int) const
gl::Framebuffer::getCachedSamples(gl::Context const*, gl::AttachmentSampleType) const
gl::Framebuffer::getColorAttachment(unsigned long) const
gl::Framebuffer::getDefaultFixedSampleLocations() const
gl::Framebuffer::getDefaultHeight() const
gl::Framebuffer::getDefaultLayers() const
gl::Framebuffer::getDefaultSamples() const
gl::Framebuffer::getDefaultWidth() const
gl::Framebuffer::getDepthAttachment() const
gl::Framebuffer::getDrawBuffer(unsigned long) const
gl::Framebuffer::getDrawBufferMask() const
gl::Framebuffer::getDrawBufferState(unsigned long) const
gl::Framebuffer::getDrawBufferTypeMask() const
gl::Framebuffer::getDrawbufferStateCount() const
gl::Framebuffer::getExtents() const
gl::Framebuffer::getFirstColorAttachment() const
gl::Framebuffer::getImplementationColorReadFormat(gl::Context const*)
gl::Framebuffer::getImplementationColorReadType(gl::Context const*)
gl::Framebuffer::getLabel() const
gl::Framebuffer::getNumColorAttachments() const
gl::Framebuffer::getNumViews() const
gl::Framebuffer::getReadBufferState() const
gl::Framebuffer::getReadColorAttachment() const
gl::Framebuffer::getResourceSamples(gl::Context const*) const
gl::Framebuffer::getSamplePosition(gl::Context const*, unsigned long, float*) const
gl::Framebuffer::getSamples(gl::Context const*) const
gl::Framebuffer::getStencilAttachment() const
gl::Framebuffer::getStencilOrDepthStencilAttachment() const
gl::Framebuffer::hasDepth() const
gl::Framebuffer::hasEnabledDrawBuffer() const
gl::Framebuffer::hasStencil() const
gl::Framebuffer::hasValidDepthStencil() const
gl::Framebuffer::invalidate(gl::Context const*, unsigned long, unsigned int const*)
gl::Framebuffer::invalidateCompletenessCache()
gl::Framebuffer::invalidateSub(gl::Context const*, unsigned long, unsigned int const*, gl::Rectangle const&)
gl::Framebuffer::isMultiview() const
gl::Framebuffer::kDefaultDrawFramebufferHandle
gl::Framebuffer::markBufferInitialized(unsigned int, int)
gl::Framebuffer::onDestroy(gl::Context const*)
gl::Framebuffer::onSubjectStateChange(unsigned long, angle::SubjectMessage)
gl::Framebuffer::partialBufferClearNeedsInit(gl::Context const*, unsigned int)
gl::Framebuffer::readDisallowedByMultiview() const
gl::Framebuffer::readPixels(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, void*)
gl::Framebuffer::resetAttachment(gl::Context const*, unsigned int)
gl::Framebuffer::setAttachment(gl::Context const*, unsigned int, unsigned int, gl::ImageIndex const&, gl::FramebufferAttachmentObject*)
gl::Framebuffer::setAttachment(gl::Context const*, unsigned int, unsigned int, gl::ImageIndex const&, gl::FramebufferAttachmentObject*, int, unsigned int, bool, int)
gl::Framebuffer::setAttachmentImpl(gl::Context const*, unsigned int, unsigned int, gl::ImageIndex const&, gl::FramebufferAttachmentObject*, int, unsigned int, bool, int)
gl::Framebuffer::setAttachmentMultisample(gl::Context const*, unsigned int, unsigned int, gl::ImageIndex const&, gl::FramebufferAttachmentObject*, int)
gl::Framebuffer::setAttachmentMultiview(gl::Context const*, unsigned int, unsigned int, gl::ImageIndex const&, gl::FramebufferAttachmentObject*, int, int)
gl::Framebuffer::setDefaultFixedSampleLocations(gl::Context const*, bool)
gl::Framebuffer::setDefaultHeight(gl::Context const*, int)
gl::Framebuffer::setDefaultLayers(int)
gl::Framebuffer::setDefaultSamples(gl::Context const*, int)
gl::Framebuffer::setDefaultWidth(gl::Context const*, int)
gl::Framebuffer::setDrawBuffers(unsigned long, unsigned int const*)
gl::Framebuffer::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Framebuffer::setReadBuffer(unsigned int)
gl::Framebuffer::syncState(gl::Context const*, unsigned int) const
gl::Framebuffer::updateAttachment(gl::Context const*, gl::FramebufferAttachment*, unsigned long, angle::ObserverBinding*, unsigned int, unsigned int, gl::ImageIndex const&, gl::FramebufferAttachmentObject*, int, unsigned int, bool, int)
gl::Framebuffer::~Framebuffer()
gl::FramebufferAttachment::FramebufferAttachment()
gl::FramebufferAttachment::attach(gl::Context const*, unsigned int, unsigned int, gl::ImageIndex const&, gl::FramebufferAttachmentObject*, int, unsigned int, bool, int)
gl::FramebufferAttachment::cubeMapFace() const
gl::FramebufferAttachment::detach(gl::Context const*)
gl::FramebufferAttachment::getAlphaSize() const
gl::FramebufferAttachment::getBaseViewIndex() const
gl::FramebufferAttachment::getBlueSize() const
gl::FramebufferAttachment::getColorEncoding() const
gl::FramebufferAttachment::getComponentType() const
gl::FramebufferAttachment::getDepthSize() const
gl::FramebufferAttachment::getGreenSize() const
gl::FramebufferAttachment::getRedSize() const
gl::FramebufferAttachment::getRenderbuffer() const
gl::FramebufferAttachment::getResource() const
gl::FramebufferAttachment::getStencilSize() const
gl::FramebufferAttachment::getSurface() const
gl::FramebufferAttachment::getTexture() const
gl::FramebufferAttachment::id() const
gl::FramebufferAttachment::initState() const
gl::FramebufferAttachment::initializeContents(gl::Context const*)
gl::FramebufferAttachment::isBoundAsSamplerOrImage(unsigned long) const
gl::FramebufferAttachment::isLayered() const
gl::FramebufferAttachment::isMultiview() const
gl::FramebufferAttachment::kDefaultBaseViewIndex
gl::FramebufferAttachment::kDefaultNumViews
gl::FramebufferAttachment::kDefaultRenderToTextureSamples
gl::FramebufferAttachment::layer() const
gl::FramebufferAttachment::mipLevel() const
gl::FramebufferAttachment::operator!=(gl::FramebufferAttachment const&) const
gl::FramebufferAttachment::operator==(gl::FramebufferAttachment const&) const
gl::FramebufferAttachment::setInitState(gl::InitState) const
gl::FramebufferAttachment::~FramebufferAttachment()
gl::FramebufferAttachmentObject::FramebufferAttachmentObject()
gl::FramebufferAttachmentObject::getAttachmentRenderTarget(gl::Context const*, unsigned int, gl::ImageIndex const&, int, rx::FramebufferAttachmentRenderTarget**) const
gl::FramebufferAttachmentObject::initializeContents(gl::Context const*, gl::ImageIndex const&)
gl::FramebufferAttachmentObject::~FramebufferAttachmentObject()
gl::FramebufferManager::AllocateNewObject(rx::GLImplFactory*, gl::FramebufferID, gl::Caps const&, unsigned long)
gl::FramebufferManager::checkFramebufferAllocation(rx::GLImplFactory*, gl::Caps const&, gl::FramebufferID, unsigned long)
gl::FramebufferManager::createFramebuffer()
gl::FramebufferManager::getFramebuffer(gl::FramebufferID) const
gl::FramebufferManager::invalidateFramebufferCompletenessCache() const
gl::FramebufferManager::setDefaultFramebuffer(gl::Framebuffer*)
gl::FramebufferManager::~FramebufferManager()
gl::FramebufferParameteri(unsigned int, unsigned int, int)
gl::FramebufferParameteriContextANGLE(void*, unsigned int, unsigned int, int)
gl::FramebufferRenderbuffer(unsigned int, unsigned int, unsigned int, unsigned int)
gl::FramebufferRenderbufferContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int)
gl::FramebufferRenderbufferOES(unsigned int, unsigned int, unsigned int, unsigned int)
gl::FramebufferRenderbufferOESContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int)
gl::FramebufferState::FramebufferState(gl::Caps const&, gl::FramebufferID, unsigned long)
gl::FramebufferState::FramebufferState(unsigned long)
gl::FramebufferState::attachmentsHaveSameDimensions() const
gl::FramebufferState::getAttachment(gl::Context const*, unsigned int) const
gl::FramebufferState::getBaseViewIndex() const
gl::FramebufferState::getColorAttachment(unsigned long) const
gl::FramebufferState::getDepthAttachment() const
gl::FramebufferState::getDepthOrStencilAttachment() const
gl::FramebufferState::getDepthStencilAttachment() const
gl::FramebufferState::getDimensions() const
gl::FramebufferState::getFirstNonNullAttachment() const
gl::FramebufferState::getReadAttachment() const
gl::FramebufferState::getReadIndex() const
gl::FramebufferState::getReadPixelsAttachment(unsigned int) const
gl::FramebufferState::getStencilAttachment() const
gl::FramebufferState::hasSeparateDepthAndStencilAttachments() const
gl::FramebufferState::isDefault() const
gl::FramebufferState::isMultiview() const
gl::FramebufferState::updateAttachmentFeedbackLoopAndReturnIfChanged(unsigned long)
gl::FramebufferState::~FramebufferState()
gl::FramebufferTexture(unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTexture2D(unsigned int, unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTexture2DContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTexture2DMultisampleEXT(unsigned int, unsigned int, unsigned int, unsigned int, int, int)
gl::FramebufferTexture2DMultisampleEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, int, int)
gl::FramebufferTexture2DOES(unsigned int, unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTexture2DOESContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTexture3DOES(unsigned int, unsigned int, unsigned int, unsigned int, int, int)
gl::FramebufferTexture3DOESContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, int, int)
gl::FramebufferTextureContextANGLE(void*, unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTextureEXT(unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTextureEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int, int)
gl::FramebufferTextureLayer(unsigned int, unsigned int, unsigned int, int, int)
gl::FramebufferTextureLayerContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int)
gl::FramebufferTextureMultiviewOVR(unsigned int, unsigned int, unsigned int, int, int, int)
gl::FramebufferTextureMultiviewOVRContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int, int)
gl::FrontFace(unsigned int)
gl::FrontFaceContextANGLE(void*, unsigned int)
gl::Frustumf(float, float, float, float, float, float)
gl::FrustumfContextANGLE(void*, float, float, float, float, float, float)
gl::Frustumx(int, int, int, int, int, int)
gl::FrustumxContextANGLE(void*, int, int, int, int, int, int)
gl::GLES1Renderer::GLES1Renderer()
gl::GLES1Renderer::TexCoordArrayIndex(unsigned int)
gl::GLES1Renderer::VertexArrayIndex(gl::ClientVertexArrayType, gl::GLES1State const&)
gl::GLES1Renderer::compileShader(gl::Context*, gl::ShaderType, char const*, gl::ShaderProgramID*)
gl::GLES1Renderer::drawTexture(gl::Context*, gl::State*, float, float, float, float, float)
gl::GLES1Renderer::initializeRendererProgram(gl::Context*, gl::State*)
gl::GLES1Renderer::linkProgram(gl::Context*, gl::State*, gl::ShaderProgramID, gl::ShaderProgramID, std::__1::unordered_map<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<int const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > > const&, gl::ShaderProgramID*)
gl::GLES1Renderer::onDestroy(gl::Context*, gl::State*)
gl::GLES1Renderer::prepareForDraw(gl::PrimitiveMode, gl::Context*, gl::State*)
gl::GLES1Renderer::setAttributesEnabled(gl::Context*, gl::State*, angle::BitSetT<16ul, unsigned long, unsigned long>)
gl::GLES1Renderer::~GLES1Renderer()
gl::GLES1State::GLES1State()
gl::GLES1State::clearDirty()
gl::GLES1State::currentMatrixStack() const
gl::GLES1State::fogParameters()
gl::GLES1State::fogParameters() const
gl::GLES1State::getActiveAttributesMask() const
gl::GLES1State::getClientTextureUnit() const
gl::GLES1State::getClipPlane(unsigned int, float*) const
gl::GLES1State::getCurrentColor() const
gl::GLES1State::getCurrentMatrixStackDepth(unsigned int) const
gl::GLES1State::getCurrentNormal() const
gl::GLES1State::getCurrentTextureCoords(unsigned int) const
gl::GLES1State::getHint(unsigned int) const
gl::GLES1State::getModelviewMatrix() const
gl::GLES1State::getVertexArraysAttributeMask() const
gl::GLES1State::initialize(gl::Context const*, gl::State const*)
gl::GLES1State::isClientStateEnabled(gl::ClientVertexArrayType) const
gl::GLES1State::isColorMaterialEnabled() const
gl::GLES1State::isDirty(gl::GLES1State::DirtyGles1Type) const
gl::GLES1State::isTextureTargetEnabled(unsigned int, gl::TextureType) const
gl::GLES1State::lightModelParameters()
gl::GLES1State::lightModelParameters() const
gl::GLES1State::lightParameters(unsigned int)
gl::GLES1State::lightParameters(unsigned int) const
gl::GLES1State::loadMatrix(angle::Mat4 const&)
gl::GLES1State::materialParameters()
gl::GLES1State::materialParameters() const
gl::GLES1State::multMatrix(angle::Mat4 const&)
gl::GLES1State::pointParameters()
gl::GLES1State::pointParameters() const
gl::GLES1State::popMatrix()
gl::GLES1State::pushMatrix()
gl::GLES1State::setAllDirty()
gl::GLES1State::setAlphaFunc(gl::AlphaTestFunc, float)
gl::GLES1State::setClientStateEnabled(gl::ClientVertexArrayType, bool)
gl::GLES1State::setClientTextureUnit(unsigned int)
gl::GLES1State::setClipPlane(unsigned int, float const*)
gl::GLES1State::setCurrentColor(angle::Color<float> const&)
gl::GLES1State::setCurrentNormal(angle::Vector<3ul, float> const&)
gl::GLES1State::setCurrentTextureCoords(unsigned int, gl::TextureCoordF const&)
gl::GLES1State::setHint(unsigned int, unsigned int)
gl::GLES1State::setLogicOp(gl::LogicalOperation)
gl::GLES1State::setMatrixMode(gl::MatrixType)
gl::GLES1State::setShadeModel(gl::ShadingModel)
gl::GLES1State::setTexCoordArrayEnabled(unsigned int, bool)
gl::GLES1State::textureEnvironment(unsigned int)
gl::GLES1State::textureEnvironment(unsigned int) const
gl::GLES1State::~GLES1State()
gl::GenBuffers(int, unsigned int*)
gl::GenBuffersContextANGLE(void*, int, unsigned int*)
gl::GenFencesNV(int, unsigned int*)
gl::GenFencesNVContextANGLE(void*, int, unsigned int*)
gl::GenFramebuffers(int, unsigned int*)
gl::GenFramebuffersContextANGLE(void*, int, unsigned int*)
gl::GenFramebuffersOES(int, unsigned int*)
gl::GenFramebuffersOESContextANGLE(void*, int, unsigned int*)
gl::GenProgramPipelines(int, unsigned int*)
gl::GenProgramPipelinesContextANGLE(void*, int, unsigned int*)
gl::GenQueries(int, unsigned int*)
gl::GenQueriesContextANGLE(void*, int, unsigned int*)
gl::GenQueriesEXT(int, unsigned int*)
gl::GenQueriesEXTContextANGLE(void*, int, unsigned int*)
gl::GenRenderbuffers(int, unsigned int*)
gl::GenRenderbuffersContextANGLE(void*, int, unsigned int*)
gl::GenRenderbuffersOES(int, unsigned int*)
gl::GenRenderbuffersOESContextANGLE(void*, int, unsigned int*)
gl::GenSamplers(int, unsigned int*)
gl::GenSamplersContextANGLE(void*, int, unsigned int*)
gl::GenSemaphoresEXT(int, unsigned int*)
gl::GenSemaphoresEXTContextANGLE(void*, int, unsigned int*)
gl::GenTextures(int, unsigned int*)
gl::GenTexturesContextANGLE(void*, int, unsigned int*)
gl::GenTransformFeedbacks(int, unsigned int*)
gl::GenTransformFeedbacksContextANGLE(void*, int, unsigned int*)
gl::GenVertexArrays(int, unsigned int*)
gl::GenVertexArraysContextANGLE(void*, int, unsigned int*)
gl::GenVertexArraysOES(int, unsigned int*)
gl::GenVertexArraysOESContextANGLE(void*, int, unsigned int*)
gl::GenerateMinimumCaps(gl::Version const&, gl::Extensions const&)
gl::GenerateMinimumTextureCaps(unsigned int, gl::Version const&, gl::Extensions const&)
gl::GenerateMipmap(unsigned int)
gl::GenerateMipmapContextANGLE(void*, unsigned int)
gl::GenerateMipmapOES(unsigned int)
gl::GenerateMipmapOESContextANGLE(void*, unsigned int)
gl::GetActiveAttrib(unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
gl::GetActiveAttribContextANGLE(void*, unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
gl::GetActiveUniform(unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
gl::GetActiveUniformBlockName(unsigned int, unsigned int, int, int*, char*)
gl::GetActiveUniformBlockNameContextANGLE(void*, unsigned int, unsigned int, int, int*, char*)
gl::GetActiveUniformBlockiv(unsigned int, unsigned int, unsigned int, int*)
gl::GetActiveUniformBlockivContextANGLE(void*, unsigned int, unsigned int, unsigned int, int*)
gl::GetActiveUniformBlockivRobustANGLE(unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetActiveUniformBlockivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetActiveUniformContextANGLE(void*, unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
gl::GetActiveUniformsiv(unsigned int, int, unsigned int const*, unsigned int, int*)
gl::GetActiveUniformsivContextANGLE(void*, unsigned int, int, unsigned int const*, unsigned int, int*)
gl::GetAllSizedInternalFormats()
gl::GetAllSizedInternalFormats()::formatSet
gl::GetAttachedShaders(unsigned int, int, int*, unsigned int*)
gl::GetAttachedShadersContextANGLE(void*, unsigned int, int, int*, unsigned int*)
gl::GetAttribLocation(unsigned int, char const*)
gl::GetAttribLocationContextANGLE(void*, unsigned int, char const*)
gl::GetBooleani_v(unsigned int, unsigned int, unsigned char*)
gl::GetBooleani_vContextANGLE(void*, unsigned int, unsigned int, unsigned char*)
gl::GetBooleani_vRobustANGLE(unsigned int, unsigned int, int, int*, unsigned char*)
gl::GetBooleani_vRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, unsigned char*)
gl::GetBooleanv(unsigned int, unsigned char*)
gl::GetBooleanvContextANGLE(void*, unsigned int, unsigned char*)
gl::GetBooleanvRobustANGLE(unsigned int, int, int*, unsigned char*)
gl::GetBooleanvRobustANGLEContextANGLE(void*, unsigned int, int, int*, unsigned char*)
gl::GetBoundBufferAvailableSize(gl::OffsetBindingPointer<gl::Buffer> const&)
gl::GetBufferParameteri64v(unsigned int, unsigned int, long*)
gl::GetBufferParameteri64vContextANGLE(void*, unsigned int, unsigned int, long*)
gl::GetBufferParameteri64vRobustANGLE(unsigned int, unsigned int, int, int*, long*)
gl::GetBufferParameteri64vRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, long*)
gl::GetBufferParameteriv(unsigned int, unsigned int, int*)
gl::GetBufferParameterivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetBufferParameterivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetBufferParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetBufferPointerv(unsigned int, unsigned int, void**)
gl::GetBufferPointervContextANGLE(void*, unsigned int, unsigned int, void**)
gl::GetBufferPointervOES(unsigned int, unsigned int, void**)
gl::GetBufferPointervOESContextANGLE(void*, unsigned int, unsigned int, void**)
gl::GetBufferPointervRobustANGLE(unsigned int, unsigned int, int, int*, void**)
gl::GetBufferPointervRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, void**)
gl::GetBufferVariableResourceProperty(gl::Program const*, unsigned int, unsigned int)
gl::GetClipPlanef(unsigned int, float*)
gl::GetClipPlanefContextANGLE(void*, unsigned int, float*)
gl::GetClipPlanex(unsigned int, int*)
gl::GetClipPlanexContextANGLE(void*, unsigned int, int*)
gl::GetCurrentValueFormatID(gl::VertexAttribType)
gl::GetDebugMessageLog(unsigned int, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, int*, char*)
gl::GetDebugMessageLogContextANGLE(void*, unsigned int, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, int*, char*)
gl::GetDebugMessageLogKHR(unsigned int, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, int*, char*)
gl::GetDebugMessageLogKHRContextANGLE(void*, unsigned int, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, int*, char*)
gl::GetDebugMessageSeverityString(unsigned int)
gl::GetDebugMessageSourceString(unsigned int)
gl::GetDebugMessageTypeString(unsigned int)
gl::GetError()
gl::GetErrorContextANGLE(void*)
gl::GetExtensionInfoMap()
gl::GetExtensionInfoMap()::$_0::operator()() const
gl::GetExtensionInfoMap()::extensionInfo
gl::GetFenceivNV(unsigned int, unsigned int, int*)
gl::GetFenceivNVContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetFixedv(unsigned int, int*)
gl::GetFixedvContextANGLE(void*, unsigned int, int*)
gl::GetFloatv(unsigned int, float*)
gl::GetFloatvContextANGLE(void*, unsigned int, float*)
gl::GetFloatvRobustANGLE(unsigned int, int, int*, float*)
gl::GetFloatvRobustANGLEContextANGLE(void*, unsigned int, int, int*, float*)
gl::GetFogParameterCount(unsigned int)
gl::GetFogParameters(gl::GLES1State const*, unsigned int, float*)
gl::GetFragDataIndexEXT(unsigned int, char const*)
gl::GetFragDataIndexEXTContextANGLE(void*, unsigned int, char const*)
gl::GetFragDataLocation(unsigned int, char const*)
gl::GetFragDataLocationContextANGLE(void*, unsigned int, char const*)
gl::GetFramebufferAttachmentParameteriv(unsigned int, unsigned int, unsigned int, int*)
gl::GetFramebufferAttachmentParameterivContextANGLE(void*, unsigned int, unsigned int, unsigned int, int*)
gl::GetFramebufferAttachmentParameterivOES(unsigned int, unsigned int, unsigned int, int*)
gl::GetFramebufferAttachmentParameterivOESContextANGLE(void*, unsigned int, unsigned int, unsigned int, int*)
gl::GetFramebufferAttachmentParameterivRobustANGLE(unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetFramebufferAttachmentParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetFramebufferParameteriv(unsigned int, unsigned int, int*)
gl::GetFramebufferParameterivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetFramebufferParameterivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetFramebufferParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetGLSLTypeString(unsigned int)
gl::GetGraphicsResetStatus()
gl::GetGraphicsResetStatusContextANGLE(void*)
gl::GetGraphicsResetStatusEXT()
gl::GetGraphicsResetStatusEXTContextANGLE(void*)
gl::GetInteger64i_v(unsigned int, unsigned int, long*)
gl::GetInteger64i_vContextANGLE(void*, unsigned int, unsigned int, long*)
gl::GetInteger64i_vRobustANGLE(unsigned int, unsigned int, int, int*, long*)
gl::GetInteger64i_vRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, long*)
gl::GetInteger64v(unsigned int, long*)
gl::GetInteger64vContextANGLE(void*, unsigned int, long*)
gl::GetInteger64vEXT(unsigned int, long*)
gl::GetInteger64vEXTContextANGLE(void*, unsigned int, long*)
gl::GetInteger64vRobustANGLE(unsigned int, int, int*, long*)
gl::GetInteger64vRobustANGLEContextANGLE(void*, unsigned int, int, int*, long*)
gl::GetIntegeri_v(unsigned int, unsigned int, int*)
gl::GetIntegeri_vContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetIntegeri_vRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetIntegeri_vRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetIntegerv(unsigned int, int*)
gl::GetIntegervContextANGLE(void*, unsigned int, int*)
gl::GetIntegervRobustANGLE(unsigned int, int, int*, int*)
gl::GetIntegervRobustANGLEContextANGLE(void*, unsigned int, int, int*, int*)
gl::GetInternalFormatInfo(unsigned int, unsigned int)
gl::GetInternalFormatInfo(unsigned int, unsigned int)::defaultInternalFormat
gl::GetInternalFormatMap()
gl::GetInternalFormatMap()::formatMap
gl::GetInternalformativ(unsigned int, unsigned int, unsigned int, int, int*)
gl::GetInternalformativContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int*)
gl::GetInternalformativRobustANGLE(unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetInternalformativRobustANGLEContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetLightModelParameterCount(unsigned int)
gl::GetLightModelParameters(gl::GLES1State const*, unsigned int, float*)
gl::GetLightParameterCount(gl::LightParameter)
gl::GetLightParameters(gl::GLES1State const*, unsigned int, gl::LightParameter, float*)
gl::GetLightfv(unsigned int, unsigned int, float*)
gl::GetLightfvContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetLightxv(unsigned int, unsigned int, int*)
gl::GetLightxvContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetMaterialParameterCount(gl::MaterialParameter)
gl::GetMaterialParameters(gl::GLES1State const*, unsigned int, gl::MaterialParameter, float*)
gl::GetMaterialfv(unsigned int, unsigned int, float*)
gl::GetMaterialfvContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetMaterialxv(unsigned int, unsigned int, int*)
gl::GetMaterialxvContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetMemoryObjectParameterivEXT(unsigned int, unsigned int, int*)
gl::GetMemoryObjectParameterivEXTContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetMultisamplefv(unsigned int, unsigned int, float*)
gl::GetMultisamplefvANGLE(unsigned int, unsigned int, float*)
gl::GetMultisamplefvANGLEContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetMultisamplefvContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetMultisamplefvRobustANGLE(unsigned int, unsigned int, int, int*, float*)
gl::GetMultisamplefvRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, float*)
gl::GetObjectLabel(unsigned int, unsigned int, int, int*, char*)
gl::GetObjectLabelContextANGLE(void*, unsigned int, unsigned int, int, int*, char*)
gl::GetObjectLabelKHR(unsigned int, unsigned int, int, int*, char*)
gl::GetObjectLabelKHRContextANGLE(void*, unsigned int, unsigned int, int, int*, char*)
gl::GetObjectPtrLabel(void const*, int, int*, char*)
gl::GetObjectPtrLabelContextANGLE(void*, void const*, int, int*, char*)
gl::GetObjectPtrLabelKHR(void const*, int, int*, char*)
gl::GetObjectPtrLabelKHRContextANGLE(void*, void const*, int, int*, char*)
gl::GetPackedTypeInfo(unsigned int)
gl::GetPointParameter(gl::GLES1State const*, gl::PointParameter, float*)
gl::GetPointParameterCount(gl::PointParameter)
gl::GetPointSize(gl::GLES1State const*, float*)
gl::GetPointerv(unsigned int, void**)
gl::GetPointervContextANGLE(void*, unsigned int, void**)
gl::GetPointervKHR(unsigned int, void**)
gl::GetPointervKHRContextANGLE(void*, unsigned int, void**)
gl::GetPointervRobustANGLERobustANGLE(unsigned int, int, int*, void**)
gl::GetPointervRobustANGLERobustANGLEContextANGLE(void*, unsigned int, int, int*, void**)
gl::GetPrimitiveRestartIndex(gl::DrawElementsType)
gl::GetProgramBinary(unsigned int, int, int*, unsigned int*, void*)
gl::GetProgramBinaryContextANGLE(void*, unsigned int, int, int*, unsigned int*, void*)
gl::GetProgramBinaryOES(unsigned int, int, int*, unsigned int*, void*)
gl::GetProgramBinaryOESContextANGLE(void*, unsigned int, int, int*, unsigned int*, void*)
gl::GetProgramInfoLog(unsigned int, int, int*, char*)
gl::GetProgramInfoLogContextANGLE(void*, unsigned int, int, int*, char*)
gl::GetProgramInterfaceiv(unsigned int, unsigned int, unsigned int, int*)
gl::GetProgramInterfaceivContextANGLE(void*, unsigned int, unsigned int, unsigned int, int*)
gl::GetProgramInterfaceivRobustANGLE(unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetProgramInterfaceivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int*, int*)
gl::GetProgramPipelineInfoLog(unsigned int, int, int*, char*)
gl::GetProgramPipelineInfoLogContextANGLE(void*, unsigned int, int, int*, char*)
gl::GetProgramPipelineiv(unsigned int, unsigned int, int*)
gl::GetProgramPipelineivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetProgramResourceIndex(unsigned int, unsigned int, char const*)
gl::GetProgramResourceIndexContextANGLE(void*, unsigned int, unsigned int, char const*)
gl::GetProgramResourceLocation(unsigned int, unsigned int, char const*)
gl::GetProgramResourceLocationContextANGLE(void*, unsigned int, unsigned int, char const*)
gl::GetProgramResourceLocationIndexEXT(unsigned int, unsigned int, char const*)
gl::GetProgramResourceLocationIndexEXTContextANGLE(void*, unsigned int, unsigned int, char const*)
gl::GetProgramResourceName(unsigned int, unsigned int, unsigned int, int, int*, char*)
gl::GetProgramResourceNameContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, int*, char*)
gl::GetProgramResourceiv(unsigned int, unsigned int, unsigned int, int, unsigned int const*, int, int*, int*)
gl::GetProgramResourceivContextANGLE(void*, unsigned int, unsigned int, unsigned int, int, unsigned int const*, int, int*, int*)
gl::GetProgramiv(unsigned int, unsigned int, int*)
gl::GetProgramivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetProgramivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetProgramivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetQueryObjecti64vEXT(unsigned int, unsigned int, long*)
gl::GetQueryObjecti64vEXTContextANGLE(void*, unsigned int, unsigned int, long*)
gl::GetQueryObjecti64vRobustANGLE(unsigned int, unsigned int, int, int*, long*)
gl::GetQueryObjecti64vRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, long*)
gl::GetQueryObjectivEXT(unsigned int, unsigned int, int*)
gl::GetQueryObjectivEXTContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetQueryObjectivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetQueryObjectivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetQueryObjectui64vEXT(unsigned int, unsigned int, unsigned long*)
gl::GetQueryObjectui64vEXTContextANGLE(void*, unsigned int, unsigned int, unsigned long*)
gl::GetQueryObjectui64vRobustANGLE(unsigned int, unsigned int, int, int*, unsigned long*)
gl::GetQueryObjectui64vRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, unsigned long*)
gl::GetQueryObjectuiv(unsigned int, unsigned int, unsigned int*)
gl::GetQueryObjectuivContextANGLE(void*, unsigned int, unsigned int, unsigned int*)
gl::GetQueryObjectuivEXT(unsigned int, unsigned int, unsigned int*)
gl::GetQueryObjectuivEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int*)
gl::GetQueryObjectuivRobustANGLE(unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetQueryObjectuivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetQueryParameterInfo(gl::State const&, unsigned int, unsigned int*, unsigned int*)
gl::GetQueryiv(unsigned int, unsigned int, int*)
gl::GetQueryivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetQueryivEXT(unsigned int, unsigned int, int*)
gl::GetQueryivEXTContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetQueryivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetQueryivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetRenderbufferImageANGLE(unsigned int, unsigned int, unsigned int, void*)
gl::GetRenderbufferImageANGLEContextANGLE(void*, unsigned int, unsigned int, unsigned int, void*)
gl::GetRenderbufferParameteriv(unsigned int, unsigned int, int*)
gl::GetRenderbufferParameterivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetRenderbufferParameterivOES(unsigned int, unsigned int, int*)
gl::GetRenderbufferParameterivOESContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetRenderbufferParameterivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetRenderbufferParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetSamplerParameterIiv(unsigned int, unsigned int, int*)
gl::GetSamplerParameterIivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetSamplerParameterIivOES(unsigned int, unsigned int, int*)
gl::GetSamplerParameterIivOESContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetSamplerParameterIivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetSamplerParameterIivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetSamplerParameterIuiv(unsigned int, unsigned int, unsigned int*)
gl::GetSamplerParameterIuivContextANGLE(void*, unsigned int, unsigned int, unsigned int*)
gl::GetSamplerParameterIuivOES(unsigned int, unsigned int, unsigned int*)
gl::GetSamplerParameterIuivOESContextANGLE(void*, unsigned int, unsigned int, unsigned int*)
gl::GetSamplerParameterIuivRobustANGLE(unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetSamplerParameterIuivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetSamplerParameterfv(unsigned int, unsigned int, float*)
gl::GetSamplerParameterfvContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetSamplerParameterfvRobustANGLE(unsigned int, unsigned int, int, int*, float*)
gl::GetSamplerParameterfvRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, float*)
gl::GetSamplerParameteriv(unsigned int, unsigned int, int*)
gl::GetSamplerParameterivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetSamplerParameterivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetSamplerParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetSemaphoreParameterui64vEXT(unsigned int, unsigned int, unsigned long*)
gl::GetSemaphoreParameterui64vEXTContextANGLE(void*, unsigned int, unsigned int, unsigned long*)
gl::GetShaderInfoLog(unsigned int, int, int*, char*)
gl::GetShaderInfoLogContextANGLE(void*, unsigned int, int, int*, char*)
gl::GetShaderPrecisionFormat(unsigned int, unsigned int, int*, int*)
gl::GetShaderPrecisionFormatContextANGLE(void*, unsigned int, unsigned int, int*, int*)
gl::GetShaderSource(unsigned int, int, int*, char*)
gl::GetShaderSourceContextANGLE(void*, unsigned int, int, int*, char*)
gl::GetShaderTypeString(gl::ShaderType)
gl::GetShaderiv(unsigned int, unsigned int, int*)
gl::GetShaderivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetShaderivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetShaderivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetSizedEffectiveInternalFormatInfo(gl::InternalFormat const&, unsigned int*)::list
gl::GetSizedFormatInternal(unsigned int, unsigned int)
gl::GetSizedInternalFormatInfo(unsigned int)
gl::GetSizedInternalFormatInfo(unsigned int)::defaultInternalFormat
gl::GetString(unsigned int)
gl::GetStringContextANGLE(void*, unsigned int)
gl::GetStringi(unsigned int, unsigned int)
gl::GetStringiContextANGLE(void*, unsigned int, unsigned int)
gl::GetSynciv(__GLsync*, unsigned int, int, int*, int*)
gl::GetSyncivContextANGLE(void*, __GLsync*, unsigned int, int, int*, int*)
gl::GetTexEnvfv(unsigned int, unsigned int, float*)
gl::GetTexEnvfvContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetTexEnviv(unsigned int, unsigned int, int*)
gl::GetTexEnvivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTexEnvxv(unsigned int, unsigned int, int*)
gl::GetTexEnvxvContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTexGenfvOES(unsigned int, unsigned int, float*)
gl::GetTexGenfvOESContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetTexGenivOES(unsigned int, unsigned int, int*)
gl::GetTexGenivOESContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTexGenxvOES(unsigned int, unsigned int, int*)
gl::GetTexGenxvOESContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTexImageANGLE(unsigned int, int, unsigned int, unsigned int, void*)
gl::GetTexImageANGLEContextANGLE(void*, unsigned int, int, unsigned int, unsigned int, void*)
gl::GetTexLevelParameterfv(unsigned int, int, unsigned int, float*)
gl::GetTexLevelParameterfvANGLE(unsigned int, int, unsigned int, float*)
gl::GetTexLevelParameterfvANGLEContextANGLE(void*, unsigned int, int, unsigned int, float*)
gl::GetTexLevelParameterfvContextANGLE(void*, unsigned int, int, unsigned int, float*)
gl::GetTexLevelParameterfvRobustANGLE(unsigned int, int, unsigned int, int, int*, float*)
gl::GetTexLevelParameterfvRobustANGLEContextANGLE(void*, unsigned int, int, unsigned int, int, int*, float*)
gl::GetTexLevelParameteriv(unsigned int, int, unsigned int, int*)
gl::GetTexLevelParameterivANGLE(unsigned int, int, unsigned int, int*)
gl::GetTexLevelParameterivANGLEContextANGLE(void*, unsigned int, int, unsigned int, int*)
gl::GetTexLevelParameterivContextANGLE(void*, unsigned int, int, unsigned int, int*)
gl::GetTexLevelParameterivRobustANGLE(unsigned int, int, unsigned int, int, int*, int*)
gl::GetTexLevelParameterivRobustANGLEContextANGLE(void*, unsigned int, int, unsigned int, int, int*, int*)
gl::GetTexParameterCount(unsigned int)
gl::GetTexParameterIiv(unsigned int, unsigned int, int*)
gl::GetTexParameterIivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTexParameterIivOES(unsigned int, unsigned int, int*)
gl::GetTexParameterIivOESContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTexParameterIivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetTexParameterIivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetTexParameterIuiv(unsigned int, unsigned int, unsigned int*)
gl::GetTexParameterIuivContextANGLE(void*, unsigned int, unsigned int, unsigned int*)
gl::GetTexParameterIuivOES(unsigned int, unsigned int, unsigned int*)
gl::GetTexParameterIuivOESContextANGLE(void*, unsigned int, unsigned int, unsigned int*)
gl::GetTexParameterIuivRobustANGLE(unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetTexParameterIuivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetTexParameterfv(unsigned int, unsigned int, float*)
gl::GetTexParameterfvContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetTexParameterfvRobustANGLE(unsigned int, unsigned int, int, int*, float*)
gl::GetTexParameterfvRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, float*)
gl::GetTexParameteriv(unsigned int, unsigned int, int*)
gl::GetTexParameterivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTexParameterivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetTexParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetTexParameterxv(unsigned int, unsigned int, int*)
gl::GetTexParameterxvContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetTextureEnv(unsigned int, gl::GLES1State const*, gl::TextureEnvTarget, gl::TextureEnvParameter, float*)
gl::GetTextureEnvParameterCount(gl::TextureEnvParameter)
gl::GetTransformFeedbackVarying(unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
gl::GetTransformFeedbackVaryingContextANGLE(void*, unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
gl::GetTranslatedShaderSourceANGLE(unsigned int, int, int*, char*)
gl::GetTranslatedShaderSourceANGLEContextANGLE(void*, unsigned int, int, int*, char*)
gl::GetUniformBlockIndex(unsigned int, char const*)
gl::GetUniformBlockIndexContextANGLE(void*, unsigned int, char const*)
gl::GetUniformIndices(unsigned int, int, char const* const*, unsigned int*)
gl::GetUniformIndicesContextANGLE(void*, unsigned int, int, char const* const*, unsigned int*)
gl::GetUniformLocation(unsigned int, char const*)
gl::GetUniformLocationContextANGLE(void*, unsigned int, char const*)
gl::GetUniformResourceProperty(gl::Program const*, unsigned int, unsigned int)
gl::GetUniformTypeInfo(unsigned int)
gl::GetUniformfv(unsigned int, int, float*)
gl::GetUniformfvContextANGLE(void*, unsigned int, int, float*)
gl::GetUniformfvRobustANGLE(unsigned int, int, int, int*, float*)
gl::GetUniformfvRobustANGLEContextANGLE(void*, unsigned int, int, int, int*, float*)
gl::GetUniformiv(unsigned int, int, int*)
gl::GetUniformivContextANGLE(void*, unsigned int, int, int*)
gl::GetUniformivRobustANGLE(unsigned int, int, int, int*, int*)
gl::GetUniformivRobustANGLEContextANGLE(void*, unsigned int, int, int, int*, int*)
gl::GetUniformuiv(unsigned int, int, unsigned int*)
gl::GetUniformuivContextANGLE(void*, unsigned int, int, unsigned int*)
gl::GetUniformuivRobustANGLE(unsigned int, int, int, int*, unsigned int*)
gl::GetUniformuivRobustANGLEContextANGLE(void*, unsigned int, int, int, int*, unsigned int*)
gl::GetUnsignedBytei_vEXT(unsigned int, unsigned int, unsigned char*)
gl::GetUnsignedBytei_vEXTContextANGLE(void*, unsigned int, unsigned int, unsigned char*)
gl::GetUnsignedBytevEXT(unsigned int, unsigned char*)
gl::GetUnsignedBytevEXTContextANGLE(void*, unsigned int, unsigned char*)
gl::GetUnsizedEffectiveInternalFormatInfo(gl::InternalFormat const&, gl::InternalFormat const&, unsigned int*)::list
gl::GetUnsizedFormat(unsigned int)
gl::GetValidProgram(gl::Context const*, gl::ShaderProgramID)
gl::GetValidShader(gl::Context const*, gl::ShaderProgramID)
gl::GetVertexAttribIiv(unsigned int, unsigned int, int*)
gl::GetVertexAttribIivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetVertexAttribIivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetVertexAttribIivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetVertexAttribIuiv(unsigned int, unsigned int, unsigned int*)
gl::GetVertexAttribIuivContextANGLE(void*, unsigned int, unsigned int, unsigned int*)
gl::GetVertexAttribIuivRobustANGLE(unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetVertexAttribIuivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, unsigned int*)
gl::GetVertexAttribPointerv(unsigned int, unsigned int, void**)
gl::GetVertexAttribPointervContextANGLE(void*, unsigned int, unsigned int, void**)
gl::GetVertexAttribPointervRobustANGLE(unsigned int, unsigned int, int, int*, void**)
gl::GetVertexAttribPointervRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, void**)
gl::GetVertexAttribfv(unsigned int, unsigned int, float*)
gl::GetVertexAttribfvContextANGLE(void*, unsigned int, unsigned int, float*)
gl::GetVertexAttribfvRobustANGLE(unsigned int, unsigned int, int, int*, float*)
gl::GetVertexAttribfvRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, float*)
gl::GetVertexAttribiv(unsigned int, unsigned int, int*)
gl::GetVertexAttribivContextANGLE(void*, unsigned int, unsigned int, int*)
gl::GetVertexAttribivRobustANGLE(unsigned int, unsigned int, int, int*, int*)
gl::GetVertexAttribivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int*, int*)
gl::GetVertexFormatID(gl::VertexAttribType, unsigned char, unsigned int, bool)
gl::GetVertexFormatSize(angle::FormatID)
gl::GetVerticesNeededForDraw(gl::PrimitiveMode, int, int)
gl::GetnUniformfv(unsigned int, int, int, float*)
gl::GetnUniformfvContextANGLE(void*, unsigned int, int, int, float*)
gl::GetnUniformfvEXT(unsigned int, int, int, float*)
gl::GetnUniformfvEXTContextANGLE(void*, unsigned int, int, int, float*)
gl::GetnUniformfvRobustANGLE(unsigned int, int, int, int*, float*)
gl::GetnUniformfvRobustANGLEContextANGLE(void*, unsigned int, int, int, int*, float*)
gl::GetnUniformiv(unsigned int, int, int, int*)
gl::GetnUniformivContextANGLE(void*, unsigned int, int, int, int*)
gl::GetnUniformivEXT(unsigned int, int, int, int*)
gl::GetnUniformivEXTContextANGLE(void*, unsigned int, int, int, int*)
gl::GetnUniformivRobustANGLE(unsigned int, int, int, int*, int*)
gl::GetnUniformivRobustANGLEContextANGLE(void*, unsigned int, int, int, int*, int*)
gl::GetnUniformuiv(unsigned int, int, int, unsigned int*)
gl::GetnUniformuivContextANGLE(void*, unsigned int, int, int, unsigned int*)
gl::GetnUniformuivRobustANGLE(unsigned int, int, int, int*, unsigned int*)
gl::GetnUniformuivRobustANGLEContextANGLE(void*, unsigned int, int, int, int*, unsigned int*)
gl::GraphicsResetStatus gl::FromGLenum<gl::GraphicsResetStatus>(unsigned int)
gl::HandleAllocator::HandleAllocator()
gl::HandleAllocator::allocate()
gl::HandleAllocator::release(unsigned int)
gl::HandleAllocator::reserve(unsigned int)
gl::HandleAllocator::reset()
gl::HandleAllocator::setBaseHandle(unsigned int)
gl::HandleAllocator::~HandleAllocator()
gl::HandleType gl::FromGLenum<gl::HandleType>(unsigned int)
gl::Hint(unsigned int, unsigned int)
gl::HintContextANGLE(void*, unsigned int, unsigned int)
gl::HintSetting gl::FromGLenum<gl::HintSetting>(unsigned int)
gl::ImageBinding::ImageBinding(unsigned int, unsigned long, bool)
gl::ImageBinding::~ImageBinding()
gl::ImageIndex::ImageIndex()
gl::ImageIndex::ImageIndex(gl::ImageIndex const&)
gl::ImageIndex::Make2D(int)
gl::ImageIndex::Make2DArray(int, int)
gl::ImageIndex::Make2DArrayRange(int, int, int)
gl::ImageIndex::Make2DMultisampleArrayRange(int, int)
gl::ImageIndex::Make3D(int, int)
gl::ImageIndex::MakeCubeMapFace(gl::TextureTarget, int)
gl::ImageIndex::MakeFromTarget(gl::TextureTarget, int, int)
gl::ImageIndex::MakeFromType(gl::TextureType, int, int, int)
gl::ImageIndex::cubeMapFaceIndex() const
gl::ImageIndex::getTarget() const
gl::ImageIndex::getTargetOrFirstCubeFace() const
gl::ImageIndex::has3DLayer() const
gl::ImageIndex::hasLayer() const
gl::ImageIndex::isEntireLevelCubeMap() const
gl::ImageIndex::isLayered() const
gl::ImageIndex::operator!=(gl::ImageIndex const&) const
gl::ImageIndex::operator=(gl::ImageIndex const&)
gl::ImageIndex::usesTex3D() const
gl::ImageIndexIterator::MakeGeneric(gl::TextureType, int, int, int, int)
gl::ImageIndexIterator::hasNext() const
gl::ImageIndexIterator::next()
gl::ImageLayout gl::FromGLenum<gl::ImageLayout>(unsigned int)
gl::ImageUnit::ImageUnit()
gl::ImageUnit::ImageUnit(gl::ImageUnit const&)
gl::ImageUnit::~ImageUnit()
gl::ImportMemoryFdEXT(unsigned int, unsigned long, unsigned int, int)
gl::ImportMemoryFdEXTContextANGLE(void*, unsigned int, unsigned long, unsigned int, int)
gl::ImportMemoryZirconHandleANGLE(unsigned int, unsigned long, unsigned int, unsigned int)
gl::ImportMemoryZirconHandleANGLEContextANGLE(void*, unsigned int, unsigned long, unsigned int, unsigned int)
gl::ImportSemaphoreFdEXT(unsigned int, unsigned int, int)
gl::ImportSemaphoreFdEXTContextANGLE(void*, unsigned int, unsigned int, int)
gl::ImportSemaphoreZirconHandleANGLE(unsigned int, unsigned int, unsigned int)
gl::ImportSemaphoreZirconHandleANGLEContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::IndexRangeCache::IndexRangeCache()
gl::IndexRangeCache::addRange(gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange const&)
gl::IndexRangeCache::clear()
gl::IndexRangeCache::findRange(gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange*) const
gl::IndexRangeCache::invalidateRange(unsigned long, unsigned long)
gl::IndexRangeCache::~IndexRangeCache()
gl::InfoLog::InfoLog()
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [10]>(char const (&) [10])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [12]>(char const (&) [12])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [159]>(char const (&) [159])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [21]>(char const (&) [21])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [22]>(char const (&) [22])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [24]>(char const (&) [24])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [28]>(char const (&) [28])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [31]>(char const (&) [31])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [32]>(char const (&) [32])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [33]>(char const (&) [33])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [34]>(char const (&) [34])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [37]>(char const (&) [37])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [39]>(char const (&) [39])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [40]>(char const (&) [40])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [41]>(char const (&) [41])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [42]>(char const (&) [42])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [45]>(char const (&) [45])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [46]>(char const (&) [46])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [50]>(char const (&) [50])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [51]>(char const (&) [51])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [52]>(char const (&) [52])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [56]>(char const (&) [56])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [57]>(char const (&) [57])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [58]>(char const (&) [58])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [61]>(char const (&) [61])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [62]>(char const (&) [62])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [63]>(char const (&) [63])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [65]>(char const (&) [65])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [67]>(char const (&) [67])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [68]>(char const (&) [68])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [69]>(char const (&) [69])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [71]>(char const (&) [71])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [73]>(char const (&) [73])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [75]>(char const (&) [75])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [85]>(char const (&) [85])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [94]>(char const (&) [94])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [96]>(char const (&) [96])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char [99]>(char const (&) [99])
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char const*>(char const* const&)
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <char*>(char* const&)
gl::InfoLog::StreamHelper gl::InfoLog::operator<< <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::InfoLog::getLength() const
gl::InfoLog::getLog(int, int*, char*) const
gl::InfoLog::reset()
gl::InfoLog::~InfoLog()
gl::InitMinimumTextureCapsMap(gl::Version const&, gl::Extensions const&, gl::TextureCapsMap*)
gl::InitializeDebugAnnotations(gl::DebugAnnotator*)
gl::InitializeDebugMutexIfNeeded()
gl::InsertEventMarkerEXT(int, char const*)
gl::InsertEventMarkerEXTContextANGLE(void*, int, char const*)
gl::InterfaceBlock::InterfaceBlock()
gl::InterfaceBlock::InterfaceBlock(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, unsigned int, unsigned int, int)
gl::InterfaceBlock::mappedNameWithArrayIndex() const
gl::InterfaceBlock::nameWithArrayIndex() const
gl::InterfaceBlock::~InterfaceBlock()
gl::InterfaceBlockLinker::addShaderBlocks(gl::ShaderType, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> > const*)
gl::InterfaceBlockLinker::defineInterfaceBlock(std::__1::function<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> const&, std::__1::function<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> const&, sh::InterfaceBlock const&, gl::ShaderType) const
gl::InterfaceBlockLinker::linkBlocks(std::__1::function<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> const&, std::__1::function<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> const&) const
gl::InterfaceBlockLinker::~InterfaceBlockLinker()
gl::InternalFormat::InternalFormat(gl::InternalFormat const&)
gl::InternalFormat::computeCompressedImageSize(gl::Extents const&, unsigned int*) const
gl::InternalFormat::computeDepthPitch(int, int, unsigned int, unsigned int*) const
gl::InternalFormat::computePackUnpackEndByte(unsigned int, gl::Extents const&, gl::PixelStoreStateBase const&, bool, unsigned int*) const
gl::InternalFormat::computePixelBytes(unsigned int) const
gl::InternalFormat::computeRowPitch(unsigned int, int, int, int, unsigned int*) const
gl::InternalFormat::computeSkipBytes(unsigned int, unsigned int, unsigned int, gl::PixelStoreStateBase const&, bool, unsigned int*) const
gl::InternalFormat::getReadPixelsFormat(gl::Extensions const&) const
gl::InternalFormat::getReadPixelsType(gl::Version const&) const
gl::InternalFormat::isDepthOrStencil() const
gl::InternalFormat::isInt() const
gl::InternalFormat::isLUMA() const
gl::InternalFormat::isRequiredRenderbufferFormat(gl::Version const&) const
gl::InternalFormat::operator!=(gl::InternalFormat const&) const
gl::InvalidateFramebuffer(unsigned int, int, unsigned int const*)
gl::InvalidateFramebufferContextANGLE(void*, unsigned int, int, unsigned int const*)
gl::InvalidateSubFramebuffer(unsigned int, int, unsigned int const*, int, int, int, int)
gl::InvalidateSubFramebufferContextANGLE(void*, unsigned int, int, unsigned int const*, int, int, int, int)
gl::InvalidateTextureANGLE(unsigned int)
gl::InvalidateTextureANGLEContextANGLE(void*, unsigned int)
gl::IsActiveInterfaceBlock(sh::InterfaceBlock const&)
gl::IsArrayTextureType(gl::TextureType)
gl::IsAtomicCounterType(unsigned int)
gl::IsBuffer(unsigned int)
gl::IsBufferContextANGLE(void*, unsigned int)
gl::IsCubeMapFaceTarget(gl::TextureTarget)
gl::IsEnabled(unsigned int)
gl::IsEnabledContextANGLE(void*, unsigned int)
gl::IsEnabledi(unsigned int, unsigned int)
gl::IsEnablediContextANGLE(void*, unsigned int, unsigned int)
gl::IsEnablediEXT(unsigned int, unsigned int)
gl::IsEnablediEXTContextANGLE(void*, unsigned int, unsigned int)
gl::IsEnablediOES(unsigned int, unsigned int)
gl::IsEnablediOESContextANGLE(void*, unsigned int, unsigned int)
gl::IsFenceNV(unsigned int)
gl::IsFenceNVContextANGLE(void*, unsigned int)
gl::IsFramebuffer(unsigned int)
gl::IsFramebufferContextANGLE(void*, unsigned int)
gl::IsFramebufferOES(unsigned int)
gl::IsFramebufferOESContextANGLE(void*, unsigned int)
gl::IsImageType(unsigned int)
gl::IsLightModelTwoSided(gl::GLES1State const*)
gl::IsMatrixType(unsigned int)
gl::IsMemoryObjectEXT(unsigned int)
gl::IsMemoryObjectEXTContextANGLE(void*, unsigned int)
gl::IsMipmapFiltered(gl::SamplerState const&)
gl::IsMultisampled(gl::TextureType)
gl::IsOpaqueType(unsigned int)
gl::IsProgram(unsigned int)
gl::IsProgramContextANGLE(void*, unsigned int)
gl::IsProgramPipeline(unsigned int)
gl::IsProgramPipelineContextANGLE(void*, unsigned int)
gl::IsQuery(unsigned int)
gl::IsQueryContextANGLE(void*, unsigned int)
gl::IsQueryEXT(unsigned int)
gl::IsQueryEXTContextANGLE(void*, unsigned int)
gl::IsRenderbuffer(unsigned int)
gl::IsRenderbufferContextANGLE(void*, unsigned int)
gl::IsRenderbufferOES(unsigned int)
gl::IsRenderbufferOESContextANGLE(void*, unsigned int)
gl::IsSampler(unsigned int)
gl::IsSamplerContextANGLE(void*, unsigned int)
gl::IsSamplerType(unsigned int)
gl::IsSemaphoreEXT(unsigned int)
gl::IsSemaphoreEXTContextANGLE(void*, unsigned int)
gl::IsShader(unsigned int)
gl::IsShaderContextANGLE(void*, unsigned int)
gl::IsSync(__GLsync*)
gl::IsSyncContextANGLE(void*, __GLsync*)
gl::IsTexture(unsigned int)
gl::IsTextureContextANGLE(void*, unsigned int)
gl::IsTransformFeedback(unsigned int)
gl::IsTransformFeedbackContextANGLE(void*, unsigned int)
gl::IsValidES3CopyTexImageCombination(gl::InternalFormat const&, gl::InternalFormat const&, gl::FramebufferID)
gl::IsVertexArray(unsigned int)
gl::IsVertexArrayContextANGLE(void*, unsigned int)
gl::IsVertexArrayOES(unsigned int)
gl::IsVertexArrayOESContextANGLE(void*, unsigned int)
gl::LabeledObject::~LabeledObject()
gl::LightModelf(unsigned int, float)
gl::LightModelfContextANGLE(void*, unsigned int, float)
gl::LightModelfv(unsigned int, float const*)
gl::LightModelfvContextANGLE(void*, unsigned int, float const*)
gl::LightModelx(unsigned int, int)
gl::LightModelxContextANGLE(void*, unsigned int, int)
gl::LightModelxv(unsigned int, int const*)
gl::LightModelxvContextANGLE(void*, unsigned int, int const*)
gl::LightParameter gl::FromGLenum<gl::LightParameter>(unsigned int)
gl::Lightf(unsigned int, unsigned int, float)
gl::LightfContextANGLE(void*, unsigned int, unsigned int, float)
gl::Lightfv(unsigned int, unsigned int, float const*)
gl::LightfvContextANGLE(void*, unsigned int, unsigned int, float const*)
gl::Lightx(unsigned int, unsigned int, int)
gl::LightxContextANGLE(void*, unsigned int, unsigned int, int)
gl::Lightxv(unsigned int, unsigned int, int const*)
gl::LightxvContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::Limitations::Limitations()
gl::LineWidth(float)
gl::LineWidthContextANGLE(void*, float)
gl::LineWidthx(int)
gl::LineWidthxContextANGLE(void*, int)
gl::LinkProgram(unsigned int)
gl::LinkProgramContextANGLE(void*, unsigned int)
gl::LinkedUniform::LinkedUniform()
gl::LinkedUniform::LinkedUniform(gl::LinkedUniform const&)
gl::LinkedUniform::LinkedUniform(unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, int, int, int, int, sh::BlockMemberInfo const&)
gl::LinkedUniform::operator=(gl::LinkedUniform const&)
gl::LinkedUniform::~LinkedUniform()
gl::LoadBlockMemberInfo(gl::BinaryInputStream*, sh::BlockMemberInfo*)
gl::LoadIdentity()
gl::LoadIdentityContextANGLE(void*)
gl::LoadMatrixf(float const*)
gl::LoadMatrixfContextANGLE(void*, float const*)
gl::LoadMatrixx(int const*)
gl::LoadMatrixxContextANGLE(void*, int const*)
gl::LoadPaletteFromModelViewMatrixOES()
gl::LoadPaletteFromModelViewMatrixOESContextANGLE(void*)
gl::LoadShaderVar(gl::BinaryInputStream*, sh::ShaderVariable*)
gl::LogLinkMismatch(gl::InfoLog&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const*, gl::LinkMismatchError, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, gl::ShaderType, gl::ShaderType)
gl::LogMessage::LogMessage(char const*, int, int)
gl::LogMessage::getMessage() const
gl::LogMessage::getSeverity() const
gl::LogMessage::~LogMessage()
gl::LogicOp(unsigned int)
gl::LogicOpContextANGLE(void*, unsigned int)
gl::LogicalOperation gl::FromGLenum<gl::LogicalOperation>(unsigned int)
gl::LoseContextCHROMIUM(unsigned int, unsigned int)
gl::LoseContextCHROMIUMContextANGLE(void*, unsigned int, unsigned int)
gl::MapBufferOES(unsigned int, unsigned int)
gl::MapBufferOESContextANGLE(void*, unsigned int, unsigned int)
gl::MapBufferRange(unsigned int, long, long, unsigned int)
gl::MapBufferRangeContextANGLE(void*, unsigned int, long, long, unsigned int)
gl::MapBufferRangeEXT(unsigned int, long, long, unsigned int)
gl::MapBufferRangeEXTContextANGLE(void*, unsigned int, long, long, unsigned int)
gl::MaterialParameter gl::FromGLenum<gl::MaterialParameter>(unsigned int)
gl::Materialf(unsigned int, unsigned int, float)
gl::MaterialfContextANGLE(void*, unsigned int, unsigned int, float)
gl::Materialfv(unsigned int, unsigned int, float const*)
gl::MaterialfvContextANGLE(void*, unsigned int, unsigned int, float const*)
gl::Materialx(unsigned int, unsigned int, int)
gl::MaterialxContextANGLE(void*, unsigned int, unsigned int, int)
gl::Materialxv(unsigned int, unsigned int, int const*)
gl::MaterialxvContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::MatrixIndexPointerOES(int, unsigned int, int, void const*)
gl::MatrixIndexPointerOESContextANGLE(void*, int, unsigned int, int, void const*)
gl::MatrixMode(unsigned int)
gl::MatrixModeContextANGLE(void*, unsigned int)
gl::MatrixRegisterCount(unsigned int, bool)
gl::MatrixType gl::FromGLenum<gl::MatrixType>(unsigned int)
gl::MaxShaderCompilerThreadsKHR(unsigned int)
gl::MaxShaderCompilerThreadsKHRContextANGLE(void*, unsigned int)
gl::MemoryBarrier(unsigned int)
gl::MemoryBarrierByRegion(unsigned int)
gl::MemoryBarrierByRegionContextANGLE(void*, unsigned int)
gl::MemoryBarrierContextANGLE(void*, unsigned int)
gl::MemoryObject::MemoryObject(rx::GLImplFactory*, gl::MemoryObjectID)
gl::MemoryObject::importFd(gl::Context*, unsigned long, gl::HandleType, int)
gl::MemoryObject::importZirconHandle(gl::Context*, unsigned long, gl::HandleType, unsigned int)
gl::MemoryObject::onDestroy(gl::Context const*)
gl::MemoryObject::setDedicatedMemory(gl::Context const*, bool)
gl::MemoryObject::~MemoryObject()
gl::MemoryObjectManager::MemoryObjectManager()
gl::MemoryObjectManager::createMemoryObject(rx::GLImplFactory*)
gl::MemoryObjectManager::deleteMemoryObject(gl::Context const*, gl::MemoryObjectID)
gl::MemoryObjectManager::getMemoryObject(gl::MemoryObjectID) const
gl::MemoryObjectManager::reset(gl::Context const*)
gl::MemoryObjectManager::~MemoryObjectManager()
gl::MemoryObjectParameterivEXT(unsigned int, unsigned int, int const*)
gl::MemoryObjectParameterivEXTContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::MemoryProgramCache::ComputeHash(gl::Context const*, gl::Program const*, std::__1::array<unsigned char, 20ul>*)
gl::MemoryProgramCache::MemoryProgramCache(egl::BlobCache&)
gl::MemoryProgramCache::clear()
gl::MemoryProgramCache::entryCount() const
gl::MemoryProgramCache::getAt(unsigned long, std::__1::array<unsigned char, 20ul> const**, egl::BlobCache::Value*)
gl::MemoryProgramCache::getProgram(gl::Context const*, gl::Program*, std::__1::array<unsigned char, 20ul>*)
gl::MemoryProgramCache::maxSize() const
gl::MemoryProgramCache::putBinary(std::__1::array<unsigned char, 20ul> const&, unsigned char const*, unsigned long)
gl::MemoryProgramCache::putProgram(std::__1::array<unsigned char, 20ul> const&, gl::Context const*, gl::Program const*)
gl::MemoryProgramCache::resize(unsigned long)
gl::MemoryProgramCache::size() const
gl::MemoryProgramCache::trim(unsigned long)
gl::MemoryProgramCache::~MemoryProgramCache()
gl::MinSampleShading(float)
gl::MinSampleShadingContextANGLE(void*, float)
gl::MultMatrixf(float const*)
gl::MultMatrixfContextANGLE(void*, float const*)
gl::MultMatrixx(int const*)
gl::MultMatrixxContextANGLE(void*, int const*)
gl::MultiDrawArraysANGLE(unsigned int, int const*, int const*, int)
gl::MultiDrawArraysANGLEContextANGLE(void*, unsigned int, int const*, int const*, int)
gl::MultiDrawArraysInstancedANGLE(unsigned int, int const*, int const*, int const*, int)
gl::MultiDrawArraysInstancedANGLEContextANGLE(void*, unsigned int, int const*, int const*, int const*, int)
gl::MultiDrawArraysInstancedBaseInstanceANGLE(unsigned int, int const*, int const*, int const*, unsigned int const*, int)
gl::MultiDrawArraysInstancedBaseInstanceANGLEContextANGLE(void*, unsigned int, int const*, int const*, int const*, unsigned int const*, int)
gl::MultiDrawElementsANGLE(unsigned int, int const*, unsigned int, void const* const*, int)
gl::MultiDrawElementsANGLEContextANGLE(void*, unsigned int, int const*, unsigned int, void const* const*, int)
gl::MultiDrawElementsBaseVertexEXT(unsigned int, int const*, unsigned int, void const* const*, int, int const*)
gl::MultiDrawElementsBaseVertexEXTContextANGLE(void*, unsigned int, int const*, unsigned int, void const* const*, int, int const*)
gl::MultiDrawElementsInstancedANGLE(unsigned int, int const*, unsigned int, void const* const*, int const*, int)
gl::MultiDrawElementsInstancedANGLEContextANGLE(void*, unsigned int, int const*, unsigned int, void const* const*, int const*, int)
gl::MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE(unsigned int, int const*, unsigned int, void const* const*, int const*, int const*, unsigned int const*, int)
gl::MultiDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE(void*, unsigned int, int const*, unsigned int, void const* const*, int const*, int const*, unsigned int const*, int)
gl::MultiTexCoord4f(unsigned int, float, float, float, float)
gl::MultiTexCoord4fContextANGLE(void*, unsigned int, float, float, float, float)
gl::MultiTexCoord4x(unsigned int, int, int, int, int)
gl::MultiTexCoord4xContextANGLE(void*, unsigned int, int, int, int, int)
gl::NeverSupported(gl::Version const&, gl::Extensions const&)
gl::NonCubeTextureTypeToTarget(gl::TextureType)
gl::Normal3f(float, float, float)
gl::Normal3fContextANGLE(void*, float, float, float)
gl::Normal3x(int, int, int)
gl::Normal3xContextANGLE(void*, int, int, int)
gl::NormalPointer(unsigned int, int, void const*)
gl::NormalPointerContextANGLE(void*, unsigned int, int, void const*)
gl::ObjectLabel(unsigned int, unsigned int, int, char const*)
gl::ObjectLabelContextANGLE(void*, unsigned int, unsigned int, int, char const*)
gl::ObjectLabelKHR(unsigned int, unsigned int, int, char const*)
gl::ObjectLabelKHRContextANGLE(void*, unsigned int, unsigned int, int, char const*)
gl::ObjectPtrLabel(void const*, int, char const*)
gl::ObjectPtrLabelContextANGLE(void*, void const*, int, char const*)
gl::ObjectPtrLabelKHR(void const*, int, char const*)
gl::ObjectPtrLabelKHRContextANGLE(void*, void const*, int, char const*)
gl::OffsetBindingPointer<gl::Buffer>::~OffsetBindingPointer()
gl::Orthof(float, float, float, float, float, float)
gl::OrthofContextANGLE(void*, float, float, float, float, float, float)
gl::Orthox(int, int, int, int, int, int)
gl::OrthoxContextANGLE(void*, int, int, int, int, int, int)
gl::OverlayState::initFontData(unsigned char*) const
gl::PackedVarying::fullName(gl::ShaderType) const
gl::PackedVarying::operator=(gl::PackedVarying&&)
gl::ParamToVertexArrayType(unsigned int)
gl::ParseArrayIndex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)
gl::ParseResourceName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*)
gl::PatchParameteri(unsigned int, int)
gl::PatchParameteriContextANGLE(void*, unsigned int, int)
gl::PauseTransformFeedback()
gl::PauseTransformFeedbackContextANGLE(void*)
gl::PixelStorei(unsigned int, int)
gl::PixelStoreiContextANGLE(void*, unsigned int, int)
gl::PointParameter gl::FromGLenum<gl::PointParameter>(unsigned int)
gl::PointParameterf(unsigned int, float)
gl::PointParameterfContextANGLE(void*, unsigned int, float)
gl::PointParameterfv(unsigned int, float const*)
gl::PointParameterfvContextANGLE(void*, unsigned int, float const*)
gl::PointParameterx(unsigned int, int)
gl::PointParameterxContextANGLE(void*, unsigned int, int)
gl::PointParameterxv(unsigned int, int const*)
gl::PointParameterxvContextANGLE(void*, unsigned int, int const*)
gl::PointSize(float)
gl::PointSizeContextANGLE(void*, float)
gl::PointSizePointerOES(unsigned int, int, void const*)
gl::PointSizePointerOESContextANGLE(void*, unsigned int, int, void const*)
gl::PointSizex(int)
gl::PointSizexContextANGLE(void*, int)
gl::PolygonOffset(float, float)
gl::PolygonOffsetContextANGLE(void*, float, float)
gl::PolygonOffsetx(int, int)
gl::PolygonOffsetxContextANGLE(void*, int, int)
gl::PopDebugGroup()
gl::PopDebugGroupContextANGLE(void*)
gl::PopDebugGroupKHR()
gl::PopDebugGroupKHRContextANGLE(void*)
gl::PopGroupMarkerEXT()
gl::PopGroupMarkerEXTContextANGLE(void*)
gl::PopMatrix()
gl::PopMatrixContextANGLE(void*)
gl::PrimitiveBoundingBox(float, float, float, float, float, float, float, float)
gl::PrimitiveBoundingBoxContextANGLE(void*, float, float, float, float, float, float, float, float)
gl::Program::LinkValidateVariablesBase(sh::ShaderVariable const&, sh::ShaderVariable const&, bool, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
gl::Program::LinkValidateVaryings(sh::ShaderVariable const&, sh::ShaderVariable const&, int, bool, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
gl::Program::Program(rx::GLImplFactory*, gl::ShaderProgramManager*, gl::ShaderProgramID)
gl::Program::attachShader(gl::Context const*, gl::Shader*)
gl::Program::bindAttributeLocation(unsigned int, char const*)
gl::Program::bindFragmentOutputIndex(unsigned int, char const*)
gl::Program::bindFragmentOutputLocation(unsigned int, char const*)
gl::Program::bindUniformBlock(unsigned int, unsigned int)
gl::Program::bindUniformLocation(gl::UniformLocation, char const*)
gl::Program::deleteSelf(gl::Context const*)
gl::Program::deserialize(gl::Context const*, gl::BinaryInputStream&, gl::InfoLog&)
gl::Program::detachShader(gl::Context const*, gl::Shader*)
gl::Program::doShaderVariablesMatch(int, gl::ShaderType, gl::ShaderType, sh::ShaderVariable const&, sh::ShaderVariable const&, bool, bool, gl::InfoLog&)
gl::Program::flagForDeletion()
gl::Program::gatherTransformFeedbackVaryings(std::__1::vector<gl::ProgramVaryingRef, std::__1::allocator<gl::ProgramVaryingRef> > const&, gl::ShaderType)
gl::Program::getActiveAttribute(unsigned int, int, int*, int*, unsigned int*, char*) const
gl::Program::getActiveAttributeCount() const
gl::Program::getActiveAttributeMaxLength() const
gl::Program::getActiveBufferVariableCount() const
gl::Program::getActiveShaderStorageBlockMaxNameLength() const
gl::Program::getActiveShaderStorageBlockName(unsigned int, int, int*, char*) const
gl::Program::getActiveUniform(unsigned int, int, int*, int*, unsigned int*, char*) const
gl::Program::getActiveUniformBlockMaxNameLength() const
gl::Program::getActiveUniformBlockName(unsigned int, int, int*, char*) const
gl::Program::getActiveUniformCount() const
gl::Program::getActiveUniformMaxLength() const
gl::Program::getAttachedShader(gl::ShaderType) const
gl::Program::getAttachedShaders(int, int*, gl::ShaderProgramID*) const
gl::Program::getAttachedShadersCount() const
gl::Program::getAttributeBindings() const
gl::Program::getAttributeLocation(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::Program::getBinaryLength(gl::Context*) const
gl::Program::getBinaryRetrievableHint() const
gl::Program::getBufferVariableByIndex(unsigned int) const
gl::Program::getBufferVariableResourceName(unsigned int, int, int*, char*) const
gl::Program::getComputeShaderLocalSize() const
gl::Program::getDrawBufferTypeMask() const
gl::Program::getFilteredVaryings(std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<sh::ShaderVariable const*, std::__1::allocator<sh::ShaderVariable const*> >*)
gl::Program::getFragDataIndex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::Program::getFragDataLocation(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::Program::getFragmentOutputIndexes() const
gl::Program::getFragmentOutputLocations() const
gl::Program::getGeometryShaderInputPrimitiveType() const
gl::Program::getGeometryShaderInvocations() const
gl::Program::getGeometryShaderMaxVertices() const
gl::Program::getGeometryShaderOutputPrimitiveType() const
gl::Program::getInputResource(unsigned long) const
gl::Program::getInputResourceIndex(char const*) const
gl::Program::getInputResourceLocation(char const*) const
gl::Program::getInputResourceMaxNameSize() const
gl::Program::getInputResourceName(unsigned int) const
gl::Program::getInputResourceName(unsigned int, int, int*, char*) const
gl::Program::getLabel() const
gl::Program::getMergedVaryings() const
gl::Program::getOutputResource(unsigned long) const
gl::Program::getOutputResourceCount() const
gl::Program::getOutputResourceIndex(char const*) const
gl::Program::getOutputResourceLocation(char const*) const
gl::Program::getOutputResourceMaxNameSize() const
gl::Program::getOutputResourceName(unsigned int) const
gl::Program::getOutputResourceName(unsigned int, int, int*, char*) const
gl::Program::getRefCount() const
gl::Program::getResourceLocation(char const*, sh::ShaderVariable const&) const
gl::Program::getResourceMaxNameSize(sh::ShaderVariable const&, int) const
gl::Program::getShaderStorageBlockBinding(unsigned int) const
gl::Program::getShaderStorageBlockByIndex(unsigned int) const
gl::Program::getShaderStorageBlockIndex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::Program::getTransformFeedbackBufferMode() const
gl::Program::getTransformFeedbackStrides() const
gl::Program::getTransformFeedbackVarying(unsigned int, int, int*, int*, unsigned int*, char*) const
gl::Program::getTransformFeedbackVaryingCount() const
gl::Program::getTransformFeedbackVaryingMaxLength() const
gl::Program::getTransformFeedbackVaryingResource(unsigned int) const
gl::Program::getTransformFeedbackVaryingResourceIndex(char const*) const
gl::Program::getUniformBlockBinding(unsigned int) const
gl::Program::getUniformBlockByIndex(unsigned int) const
gl::Program::getUniformBlockIndex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::Program::getUniformByLocation(gl::UniformLocation) const
gl::Program::getUniformIndex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::Program::getUniformLocation(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::Program::getUniformLocationBindings() const
gl::Program::getUniformResourceName(unsigned int, int, int*, char*) const
gl::Program::getUniformfv(gl::Context const*, gl::UniformLocation, float*) const
gl::Program::getUniformiv(gl::Context const*, gl::UniformLocation, int*) const
gl::Program::getUniformuiv(gl::Context const*, gl::UniformLocation, unsigned int*) const
gl::Program::hasBaseInstanceUniform() const
gl::Program::hasBaseVertexUniform() const
gl::Program::hasDrawIDUniform() const
gl::Program::id() const
gl::Program::isFlaggedForDeletion() const
gl::Program::isLinking() const
gl::Program::isSeparable() const
gl::Program::isValidUniformLocation(gl::UniformLocation) const
gl::Program::isValidated() const
gl::Program::link(gl::Context const*)
gl::Program::linkAtomicCounterBuffers()
gl::Program::linkAttributes(gl::Context const*, gl::InfoLog&)
gl::Program::linkImpl(gl::Context const*)
gl::Program::linkInterfaceBlocks(gl::Caps const&, gl::Version const&, bool, gl::InfoLog&, unsigned int*)
gl::Program::linkMergedVaryings(gl::Context const*, gl::ProgramExecutable const&, std::__1::vector<gl::ProgramVaryingRef, std::__1::allocator<gl::ProgramVaryingRef> > const&)
gl::Program::linkOutputVariables(gl::Caps const&, gl::Extensions const&, gl::Version const&, unsigned int, unsigned int)
gl::Program::linkSamplerAndImageBindings(unsigned int*)
gl::Program::linkUniforms(gl::Caps const&, gl::Version const&, gl::InfoLog&, gl::ProgramAliasedBindings const&, unsigned int*, std::__1::vector<gl::UnusedUniform, std::__1::allocator<gl::UnusedUniform> >*)
gl::Program::linkValidateBuiltInVaryings(std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, int, gl::InfoLog&)
gl::Program::linkValidateShaderInterfaceMatching(std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, gl::ShaderType, gl::ShaderType, int, int, bool, gl::InfoLog&)
gl::Program::linkValidateShaders(gl::InfoLog&)
gl::Program::linkValidateTransformFeedback(gl::Version const&, gl::InfoLog&, std::__1::vector<gl::ProgramVaryingRef, std::__1::allocator<gl::ProgramVaryingRef> > const&, gl::ShaderType, gl::Caps const&) const
gl::Program::linkVaryings(gl::InfoLog&) const
gl::Program::loadBinary(gl::Context const*, unsigned int, void const*, int)
gl::Program::onDestroy(gl::Context const*)
gl::Program::postResolveLink(gl::Context const*)
gl::Program::resolveLinkImpl(gl::Context const*)
gl::Program::saveBinary(gl::Context*, unsigned int*, void*, int, int*) const
gl::Program::serialize(gl::Context const*, angle::MemoryBuffer*) const
gl::Program::setBaseInstanceUniform(unsigned int)
gl::Program::setBaseVertexUniform(int)
gl::Program::setBinaryRetrievableHint(bool)
gl::Program::setDrawIDUniform(int)
gl::Program::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Program::setSeparable(bool)
gl::Program::setTransformFeedbackVaryings(int, char const* const*, unsigned int)
gl::Program::setUniform1fv(gl::UniformLocation, int, float const*)
gl::Program::setUniform1iv(gl::Context*, gl::UniformLocation, int, int const*)
gl::Program::setUniform1uiv(gl::UniformLocation, int, unsigned int const*)
gl::Program::setUniform2fv(gl::UniformLocation, int, float const*)
gl::Program::setUniform2iv(gl::UniformLocation, int, int const*)
gl::Program::setUniform2uiv(gl::UniformLocation, int, unsigned int const*)
gl::Program::setUniform3fv(gl::UniformLocation, int, float const*)
gl::Program::setUniform3iv(gl::UniformLocation, int, int const*)
gl::Program::setUniform3uiv(gl::UniformLocation, int, unsigned int const*)
gl::Program::setUniform4fv(gl::UniformLocation, int, float const*)
gl::Program::setUniform4iv(gl::UniformLocation, int, int const*)
gl::Program::setUniform4uiv(gl::UniformLocation, int, unsigned int const*)
gl::Program::setUniformMatrix2fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix2x3fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix2x4fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix3fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix3x2fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix3x4fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix4fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix4x2fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformMatrix4x3fv(gl::UniformLocation, int, unsigned char, float const*)
gl::Program::setUniformValuesFromBindingQualifiers()
gl::Program::syncState(gl::Context const*)
gl::Program::unlink()
gl::Program::updateLinkedShaderStages()
gl::Program::updateSamplerUniform(gl::Context*, gl::VariableLocation const&, int, int const*)
gl::Program::validate(gl::Caps const&)
gl::Program::validateSamplersImpl(gl::InfoLog*, gl::Caps const&)
gl::Program::~Program()
gl::ProgramAliasedBindings::begin() const
gl::ProgramAliasedBindings::bindLocation(unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::ProgramAliasedBindings::end() const
gl::ProgramAliasedBindings::getBinding(sh::ShaderVariable const&) const
gl::ProgramAliasedBindings::getBindingByLocation(unsigned int) const
gl::ProgramBinary(unsigned int, unsigned int, void const*, int)
gl::ProgramBinaryContextANGLE(void*, unsigned int, unsigned int, void const*, int)
gl::ProgramBinaryOES(unsigned int, unsigned int, void const*, int)
gl::ProgramBinaryOESContextANGLE(void*, unsigned int, unsigned int, void const*, int)
gl::ProgramBindings::begin() const
gl::ProgramBindings::end() const
gl::ProgramExecutable::ProgramExecutable()
gl::ProgramExecutable::ProgramExecutable(gl::ProgramExecutable const&)
gl::ProgramExecutable::getAttributesMask() const
gl::ProgramExecutable::getInfoLog(int, int*, char*) const
gl::ProgramExecutable::getInfoLogLength() const
gl::ProgramExecutable::getInfoLogString() const
gl::ProgramExecutable::getUniformIndexFromImageIndex(unsigned int) const
gl::ProgramExecutable::hasAtomicCounterBuffers() const
gl::ProgramExecutable::hasDefaultUniforms() const
gl::ProgramExecutable::hasImages() const
gl::ProgramExecutable::hasStorageBuffers() const
gl::ProgramExecutable::hasTextures() const
gl::ProgramExecutable::hasUniformBuffers() const
gl::ProgramExecutable::isAttribLocationActive(unsigned long) const
gl::ProgramExecutable::linkValidateGlobalNames(gl::InfoLog&, angle::PackedEnumMap<gl::ShaderType, gl::ProgramState const*, 4ul> const&) const
gl::ProgramExecutable::load(gl::BinaryInputStream*)
gl::ProgramExecutable::reset()
gl::ProgramExecutable::save(gl::BinaryOutputStream*) const
gl::ProgramExecutable::saveLinkedStateInfo(gl::ProgramState const&)
gl::ProgramExecutable::setSamplerUniformTextureTypeAndFormat(unsigned long, std::__1::vector<gl::SamplerBinding, std::__1::allocator<gl::SamplerBinding> >&)
gl::ProgramExecutable::updateActiveImages(gl::ProgramExecutable const&)
gl::ProgramExecutable::updateActiveSamplers(gl::ProgramState const&)
gl::ProgramExecutable::updateCanDrawWith()
gl::ProgramExecutable::~ProgramExecutable()
gl::ProgramLinkedResources::ProgramLinkedResources(unsigned int, gl::PackMode, std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> >*, std::__1::vector<gl::LinkedUniform, std::__1::allocator<gl::LinkedUniform> >*, std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> >*, std::__1::vector<gl::BufferVariable, std::__1::allocator<gl::BufferVariable> >*, std::__1::vector<gl::ShaderVariableBuffer, std::__1::allocator<gl::ShaderVariableBuffer> >*)
gl::ProgramLinkedResources::~ProgramLinkedResources()
gl::ProgramLinkedResourcesLinker::getAtomicCounterBufferSizeMap(gl::ProgramState const&, std::__1::map<int, unsigned int, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, unsigned int> > >&) const
gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const
gl::ProgramParameteri(unsigned int, unsigned int, int)
gl::ProgramParameteriContextANGLE(void*, unsigned int, unsigned int, int)
gl::ProgramPipeline* gl::TypedResourceManager<gl::ProgramPipeline, gl::HandleAllocator, gl::ProgramPipelineManager, gl::ProgramPipelineID>::checkObjectAllocationImpl<>(rx::GLImplFactory*, gl::ProgramPipelineID)
gl::ProgramPipeline::ProgramPipeline(rx::GLImplFactory*, gl::ProgramPipelineID)
gl::ProgramPipeline::activeShaderProgram(gl::Program*)
gl::ProgramPipeline::getImplementation() const
gl::ProgramPipeline::getLabel() const
gl::ProgramPipeline::getMergedVaryings() const
gl::ProgramPipeline::link(gl::Context const*)
gl::ProgramPipeline::linkVaryings(gl::InfoLog&) const
gl::ProgramPipeline::onDestroy(gl::Context const*)
gl::ProgramPipeline::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::ProgramPipeline::syncState(gl::Context const*)
gl::ProgramPipeline::updateExecutable()
gl::ProgramPipeline::updateExecutableTextures()
gl::ProgramPipeline::updateHasBooleans()
gl::ProgramPipeline::updateLinkedShaderStages()
gl::ProgramPipeline::useProgramStages(gl::Context const*, unsigned int, gl::Program*)
gl::ProgramPipeline::validate(gl::Context const*)
gl::ProgramPipeline::validateSamplers(gl::InfoLog*, gl::Caps const&)
gl::ProgramPipeline::~ProgramPipeline()
gl::ProgramPipelineManager::AllocateNewObject(rx::GLImplFactory*, gl::ProgramPipelineID)
gl::ProgramPipelineManager::checkProgramPipelineAllocation(rx::GLImplFactory*, gl::ProgramPipelineID)
gl::ProgramPipelineManager::createProgramPipeline()
gl::ProgramPipelineManager::getProgramPipeline(gl::ProgramPipelineID) const
gl::ProgramPipelineManager::~ProgramPipelineManager()
gl::ProgramPipelineState::useProgramStages(gl::Context const*, unsigned int, gl::Program*)
gl::ProgramPipelineState::usesShaderProgram(gl::ShaderProgramID) const
gl::ProgramState::getAttachedShader(gl::ShaderType) const
gl::ProgramState::getBufferVariableIndexFromName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::ProgramState::getFirstAttachedShaderStageType() const
gl::ProgramState::getImageIndexFromUniformIndex(unsigned int) const
gl::ProgramState::getLastAttachedShaderStageType() const
gl::ProgramState::getSamplerIndexFromUniformIndex(unsigned int) const
gl::ProgramState::getUniformIndexFromName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
gl::ProgramState::getUniformIndexFromSamplerIndex(unsigned int) const
gl::ProgramState::isImageUniformIndex(unsigned int) const
gl::ProgramState::isSamplerUniformIndex(unsigned int) const
gl::ProgramState::updateProgramInterfaceInputs()
gl::ProgramState::updateProgramInterfaceOutputs()
gl::ProgramState::updateTransformFeedbackStrides()
gl::ProgramState::~ProgramState()
gl::ProgramUniform1f(unsigned int, int, float)
gl::ProgramUniform1fContextANGLE(void*, unsigned int, int, float)
gl::ProgramUniform1fv(unsigned int, int, int, float const*)
gl::ProgramUniform1fvContextANGLE(void*, unsigned int, int, int, float const*)
gl::ProgramUniform1i(unsigned int, int, int)
gl::ProgramUniform1iContextANGLE(void*, unsigned int, int, int)
gl::ProgramUniform1iv(unsigned int, int, int, int const*)
gl::ProgramUniform1ivContextANGLE(void*, unsigned int, int, int, int const*)
gl::ProgramUniform1ui(unsigned int, int, unsigned int)
gl::ProgramUniform1uiContextANGLE(void*, unsigned int, int, unsigned int)
gl::ProgramUniform1uiv(unsigned int, int, int, unsigned int const*)
gl::ProgramUniform1uivContextANGLE(void*, unsigned int, int, int, unsigned int const*)
gl::ProgramUniform2f(unsigned int, int, float, float)
gl::ProgramUniform2fContextANGLE(void*, unsigned int, int, float, float)
gl::ProgramUniform2fv(unsigned int, int, int, float const*)
gl::ProgramUniform2fvContextANGLE(void*, unsigned int, int, int, float const*)
gl::ProgramUniform2i(unsigned int, int, int, int)
gl::ProgramUniform2iContextANGLE(void*, unsigned int, int, int, int)
gl::ProgramUniform2iv(unsigned int, int, int, int const*)
gl::ProgramUniform2ivContextANGLE(void*, unsigned int, int, int, int const*)
gl::ProgramUniform2ui(unsigned int, int, unsigned int, unsigned int)
gl::ProgramUniform2uiContextANGLE(void*, unsigned int, int, unsigned int, unsigned int)
gl::ProgramUniform2uiv(unsigned int, int, int, unsigned int const*)
gl::ProgramUniform2uivContextANGLE(void*, unsigned int, int, int, unsigned int const*)
gl::ProgramUniform3f(unsigned int, int, float, float, float)
gl::ProgramUniform3fContextANGLE(void*, unsigned int, int, float, float, float)
gl::ProgramUniform3fv(unsigned int, int, int, float const*)
gl::ProgramUniform3fvContextANGLE(void*, unsigned int, int, int, float const*)
gl::ProgramUniform3i(unsigned int, int, int, int, int)
gl::ProgramUniform3iContextANGLE(void*, unsigned int, int, int, int, int)
gl::ProgramUniform3iv(unsigned int, int, int, int const*)
gl::ProgramUniform3ivContextANGLE(void*, unsigned int, int, int, int const*)
gl::ProgramUniform3ui(unsigned int, int, unsigned int, unsigned int, unsigned int)
gl::ProgramUniform3uiContextANGLE(void*, unsigned int, int, unsigned int, unsigned int, unsigned int)
gl::ProgramUniform3uiv(unsigned int, int, int, unsigned int const*)
gl::ProgramUniform3uivContextANGLE(void*, unsigned int, int, int, unsigned int const*)
gl::ProgramUniform4f(unsigned int, int, float, float, float, float)
gl::ProgramUniform4fContextANGLE(void*, unsigned int, int, float, float, float, float)
gl::ProgramUniform4fv(unsigned int, int, int, float const*)
gl::ProgramUniform4fvContextANGLE(void*, unsigned int, int, int, float const*)
gl::ProgramUniform4i(unsigned int, int, int, int, int, int)
gl::ProgramUniform4iContextANGLE(void*, unsigned int, int, int, int, int, int)
gl::ProgramUniform4iv(unsigned int, int, int, int const*)
gl::ProgramUniform4ivContextANGLE(void*, unsigned int, int, int, int const*)
gl::ProgramUniform4ui(unsigned int, int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ProgramUniform4uiContextANGLE(void*, unsigned int, int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ProgramUniform4uiv(unsigned int, int, int, unsigned int const*)
gl::ProgramUniform4uivContextANGLE(void*, unsigned int, int, int, unsigned int const*)
gl::ProgramUniformMatrix2fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix2fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix2x3fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix2x3fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix2x4fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix2x4fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix3fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix3fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix3x2fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix3x2fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix3x4fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix3x4fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix4fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix4fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix4x2fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix4x2fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix4x3fv(unsigned int, int, int, unsigned char, float const*)
gl::ProgramUniformMatrix4x3fvContextANGLE(void*, unsigned int, int, int, unsigned char, float const*)
gl::ProvokingVertexANGLE(unsigned int)
gl::ProvokingVertexANGLEContextANGLE(void*, unsigned int)
gl::ProvokingVertexConvention gl::FromGLenum<gl::ProvokingVertexConvention>(unsigned int)
gl::PushDebugGroup(unsigned int, unsigned int, int, char const*)
gl::PushDebugGroupContextANGLE(void*, unsigned int, unsigned int, int, char const*)
gl::PushDebugGroupKHR(unsigned int, unsigned int, int, char const*)
gl::PushDebugGroupKHRContextANGLE(void*, unsigned int, unsigned int, int, char const*)
gl::PushGroupMarkerEXT(int, char const*)
gl::PushGroupMarkerEXTContextANGLE(void*, int, char const*)
gl::PushMatrix()
gl::PushMatrixContextANGLE(void*)
gl::Query::Query(rx::GLImplFactory*, gl::QueryType, gl::QueryID)
gl::Query::begin(gl::Context const*)
gl::Query::end(gl::Context const*)
gl::Query::getImplementation() const
gl::Query::getLabel() const
gl::Query::getResult(gl::Context const*, int*)
gl::Query::getResult(gl::Context const*, long*)
gl::Query::getResult(gl::Context const*, unsigned int*)
gl::Query::getResult(gl::Context const*, unsigned long*)
gl::Query::getType() const
gl::Query::isResultAvailable(gl::Context const*, bool*)
gl::Query::onDestroy(gl::Context const*)
gl::Query::queryCounter(gl::Context const*)
gl::Query::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Query::~Query()
gl::QueryActiveUniformBlockiv(gl::Program const*, unsigned int, unsigned int, int*)
gl::QueryBufferParameteri64v(gl::Buffer const*, unsigned int, long*)
gl::QueryBufferParameteriv(gl::Buffer const*, unsigned int, int*)
gl::QueryBufferPointerv(gl::Buffer const*, unsigned int, void**)
gl::QueryCounterEXT(unsigned int, unsigned int)
gl::QueryCounterEXTContextANGLE(void*, unsigned int, unsigned int)
gl::QueryFramebufferAttachmentParameteriv(gl::Context const*, gl::Framebuffer const*, unsigned int, unsigned int, int*)
gl::QueryFramebufferParameteriv(gl::Framebuffer const*, unsigned int, int*)
gl::QueryInternalFormativ(gl::TextureCaps const&, unsigned int, int, int*)
gl::QueryMatrixxOES(int*, int*)
gl::QueryMatrixxOESContextANGLE(void*, int*, int*)
gl::QueryMemoryObjectParameteriv(gl::MemoryObject const*, unsigned int, int*)
gl::QueryProgramInterfaceiv(gl::Program const*, unsigned int, unsigned int, int*)
gl::QueryProgramPipelineiv(gl::Context const*, gl::ProgramPipeline*, unsigned int, int*)
gl::QueryProgramResourceIndex(gl::Program const*, unsigned int, char const*)
gl::QueryProgramResourceLocation(gl::Program const*, unsigned int, char const*)
gl::QueryProgramResourceName(gl::Program const*, unsigned int, unsigned int, int, int*, char*)
gl::QueryProgramResourceiv(gl::Program const*, unsigned int, unsigned int, int, unsigned int const*, int, int*, int*)
gl::QueryProgramiv(gl::Context*, gl::Program const*, unsigned int, int*)
gl::QueryRenderbufferiv(gl::Context const*, gl::Renderbuffer const*, unsigned int, int*)
gl::QuerySamplerParameterIiv(gl::Sampler const*, unsigned int, int*)
gl::QuerySamplerParameterIuiv(gl::Sampler const*, unsigned int, unsigned int*)
gl::QuerySamplerParameterfv(gl::Sampler const*, unsigned int, float*)
gl::QuerySamplerParameteriv(gl::Sampler const*, unsigned int, int*)
gl::QueryShaderiv(gl::Context const*, gl::Shader*, unsigned int, int*)
gl::QuerySynciv(gl::Context const*, gl::Sync const*, unsigned int, int, int*, int*)
gl::QueryTexLevelParameterfv(gl::Texture const*, gl::TextureTarget, int, unsigned int, float*)
gl::QueryTexLevelParameteriv(gl::Texture const*, gl::TextureTarget, int, unsigned int, int*)
gl::QueryTexParameterIiv(gl::Context const*, gl::Texture const*, unsigned int, int*)
gl::QueryTexParameterIuiv(gl::Context const*, gl::Texture const*, unsigned int, unsigned int*)
gl::QueryTexParameterfv(gl::Context const*, gl::Texture const*, unsigned int, float*)
gl::QueryTexParameteriv(gl::Context const*, gl::Texture const*, unsigned int, int*)
gl::QueryTexParameterxv(gl::Context const*, gl::Texture const*, unsigned int, int*)
gl::QueryType gl::FromGLenum<gl::QueryType>(unsigned int)
gl::QueryVertexAttribIiv(gl::VertexAttribute const&, gl::VertexBinding const&, gl::VertexAttribCurrentValueData const&, unsigned int, int*)
gl::QueryVertexAttribIuiv(gl::VertexAttribute const&, gl::VertexBinding const&, gl::VertexAttribCurrentValueData const&, unsigned int, unsigned int*)
gl::QueryVertexAttribPointerv(gl::VertexAttribute const&, unsigned int, void**)
gl::QueryVertexAttribfv(gl::VertexAttribute const&, gl::VertexBinding const&, gl::VertexAttribCurrentValueData const&, unsigned int, float*)
gl::QueryVertexAttribiv(gl::VertexAttribute const&, gl::VertexBinding const&, gl::VertexAttribCurrentValueData const&, unsigned int, int*)
gl::RasterizerState::RasterizerState()
gl::ReadBuffer(unsigned int)
gl::ReadBufferContextANGLE(void*, unsigned int)
gl::ReadPixels(int, int, int, int, unsigned int, unsigned int, void*)
gl::ReadPixelsContextANGLE(void*, int, int, int, int, unsigned int, unsigned int, void*)
gl::ReadPixelsRobustANGLE(int, int, int, int, unsigned int, unsigned int, int, int*, int*, int*, void*)
gl::ReadPixelsRobustANGLEContextANGLE(void*, int, int, int, int, unsigned int, unsigned int, int, int*, int*, int*, void*)
gl::ReadnPixels(int, int, int, int, unsigned int, unsigned int, int, void*)
gl::ReadnPixelsContextANGLE(void*, int, int, int, int, unsigned int, unsigned int, int, void*)
gl::ReadnPixelsEXT(int, int, int, int, unsigned int, unsigned int, int, void*)
gl::ReadnPixelsEXTContextANGLE(void*, int, int, int, int, unsigned int, unsigned int, int, void*)
gl::ReadnPixelsRobustANGLE(int, int, int, int, unsigned int, unsigned int, int, int*, int*, int*, void*)
gl::ReadnPixelsRobustANGLEContextANGLE(void*, int, int, int, int, unsigned int, unsigned int, int, int*, int*, int*, void*)
gl::RecordBindTextureTypeError(gl::Context const*, gl::TextureType)
gl::RecordDrawAttribsError(gl::Context const*)
gl::RecordDrawModeError(gl::Context const*, gl::PrimitiveMode)
gl::Rectangle::encloses(gl::Rectangle const&) const
gl::Rectangle::flip(bool, bool) const
gl::Rectangle::removeReversal() const
gl::RefCountObject<gl::BufferID>::~RefCountObject()
gl::RefCountObject<gl::RenderbufferID>::~RefCountObject()
gl::RefCountObject<gl::SamplerID>::~RefCountObject()
gl::RefCountObject<gl::TextureID>::~RefCountObject()
gl::ReleaseShaderCompiler()
gl::ReleaseShaderCompilerContextANGLE(void*)
gl::Renderbuffer* gl::TypedResourceManager<gl::Renderbuffer, gl::HandleAllocator, gl::RenderbufferManager, gl::RenderbufferID>::checkObjectAllocationImpl<>(rx::GLImplFactory*, gl::RenderbufferID)
gl::Renderbuffer::Renderbuffer(rx::GLImplFactory*, gl::RenderbufferID)
gl::Renderbuffer::getAlphaSize() const
gl::Renderbuffer::getAttachmentFormat(unsigned int, gl::ImageIndex const&) const
gl::Renderbuffer::getAttachmentImpl() const
gl::Renderbuffer::getAttachmentSamples(gl::ImageIndex const&) const
gl::Renderbuffer::getAttachmentSize(gl::ImageIndex const&) const
gl::Renderbuffer::getBlueSize() const
gl::Renderbuffer::getDepthSize() const
gl::Renderbuffer::getFormat() const
gl::Renderbuffer::getGreenSize() const
gl::Renderbuffer::getHeight() const
gl::Renderbuffer::getId() const
gl::Renderbuffer::getImplementation() const
gl::Renderbuffer::getImplementationColorReadFormat(gl::Context const*) const
gl::Renderbuffer::getImplementationColorReadType(gl::Context const*) const
gl::Renderbuffer::getLabel() const
gl::Renderbuffer::getMemorySize() const
gl::Renderbuffer::getRedSize() const
gl::Renderbuffer::getRenderbufferImage(gl::Context const*, gl::PixelPackState const&, gl::Buffer*, unsigned int, unsigned int, void*) const
gl::Renderbuffer::getSamples() const
gl::Renderbuffer::getStencilSize() const
gl::Renderbuffer::getWidth() const
gl::Renderbuffer::initState(gl::ImageIndex const&) const
gl::Renderbuffer::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
gl::Renderbuffer::onAttach(gl::Context const*)
gl::Renderbuffer::onDestroy(gl::Context const*)
gl::Renderbuffer::onDetach(gl::Context const*)
gl::Renderbuffer::onSubjectStateChange(unsigned long, angle::SubjectMessage)
gl::Renderbuffer::setInitState(gl::ImageIndex const&, gl::InitState)
gl::Renderbuffer::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Renderbuffer::setStorage(gl::Context const*, unsigned int, unsigned long, unsigned long)
gl::Renderbuffer::setStorageEGLImageTarget(gl::Context const*, egl::Image*)
gl::Renderbuffer::setStorageMultisample(gl::Context const*, unsigned long, unsigned int, unsigned long, unsigned long)
gl::Renderbuffer::~Renderbuffer()
gl::RenderbufferManager::AllocateNewObject(rx::GLImplFactory*, gl::RenderbufferID)
gl::RenderbufferManager::checkRenderbufferAllocation(rx::GLImplFactory*, gl::RenderbufferID)
gl::RenderbufferManager::createRenderbuffer()
gl::RenderbufferManager::getRenderbuffer(gl::RenderbufferID) const
gl::RenderbufferManager::~RenderbufferManager()
gl::RenderbufferState::getFormat() const
gl::RenderbufferState::getHeight() const
gl::RenderbufferState::getWidth() const
gl::RenderbufferStorage(unsigned int, unsigned int, int, int)
gl::RenderbufferStorageContextANGLE(void*, unsigned int, unsigned int, int, int)
gl::RenderbufferStorageMultisample(unsigned int, int, unsigned int, int, int)
gl::RenderbufferStorageMultisampleANGLE(unsigned int, int, unsigned int, int, int)
gl::RenderbufferStorageMultisampleANGLEContextANGLE(void*, unsigned int, int, unsigned int, int, int)
gl::RenderbufferStorageMultisampleContextANGLE(void*, unsigned int, int, unsigned int, int, int)
gl::RenderbufferStorageMultisampleEXT(unsigned int, int, unsigned int, int, int)
gl::RenderbufferStorageMultisampleEXTContextANGLE(void*, unsigned int, int, unsigned int, int, int)
gl::RenderbufferStorageOES(unsigned int, unsigned int, int, int)
gl::RenderbufferStorageOESContextANGLE(void*, unsigned int, unsigned int, int, int)
gl::RequestExtensionANGLE(char const*)
gl::RequestExtensionANGLEContextANGLE(void*, char const*)
gl::ResourceManagerBase<gl::HandleAllocator>::ResourceManagerBase()
gl::ResourceManagerBase<gl::HandleAllocator>::addRef()
gl::ResourceManagerBase<gl::HandleAllocator>::release(gl::Context const*)
gl::ResourceManagerBase<gl::HandleAllocator>::~ResourceManagerBase()
gl::ResourceMap<gl::Buffer, gl::BufferID>::assign(gl::BufferID, gl::Buffer*)
gl::ResourceMap<gl::Buffer, gl::BufferID>::erase(gl::BufferID, gl::Buffer**)
gl::ResourceMap<gl::FenceNV, gl::FenceNVID>::assign(gl::FenceNVID, gl::FenceNV*)
gl::ResourceMap<gl::FenceNV, gl::FenceNVID>::erase(gl::FenceNVID, gl::FenceNV**)
gl::ResourceMap<gl::Framebuffer, gl::FramebufferID>::assign(gl::FramebufferID, gl::Framebuffer*)
gl::ResourceMap<gl::Framebuffer, gl::FramebufferID>::erase(gl::FramebufferID, gl::Framebuffer**)
gl::ResourceMap<gl::MemoryObject, gl::MemoryObjectID>::assign(gl::MemoryObjectID, gl::MemoryObject*)
gl::ResourceMap<gl::MemoryObject, gl::MemoryObjectID>::erase(gl::MemoryObjectID, gl::MemoryObject**)
gl::ResourceMap<gl::Program, gl::ShaderProgramID>::assign(gl::ShaderProgramID, gl::Program*)
gl::ResourceMap<gl::Program, gl::ShaderProgramID>::erase(gl::ShaderProgramID, gl::Program**)
gl::ResourceMap<gl::ProgramPipeline, gl::ProgramPipelineID>::assign(gl::ProgramPipelineID, gl::ProgramPipeline*)
gl::ResourceMap<gl::ProgramPipeline, gl::ProgramPipelineID>::erase(gl::ProgramPipelineID, gl::ProgramPipeline**)
gl::ResourceMap<gl::Query, gl::QueryID>::assign(gl::QueryID, gl::Query*)
gl::ResourceMap<gl::Query, gl::QueryID>::erase(gl::QueryID, gl::Query**)
gl::ResourceMap<gl::Renderbuffer, gl::RenderbufferID>::assign(gl::RenderbufferID, gl::Renderbuffer*)
gl::ResourceMap<gl::Renderbuffer, gl::RenderbufferID>::erase(gl::RenderbufferID, gl::Renderbuffer**)
gl::ResourceMap<gl::Sampler, gl::SamplerID>::assign(gl::SamplerID, gl::Sampler*)
gl::ResourceMap<gl::Sampler, gl::SamplerID>::erase(gl::SamplerID, gl::Sampler**)
gl::ResourceMap<gl::Semaphore, gl::SemaphoreID>::assign(gl::SemaphoreID, gl::Semaphore*)
gl::ResourceMap<gl::Semaphore, gl::SemaphoreID>::erase(gl::SemaphoreID, gl::Semaphore**)
gl::ResourceMap<gl::Shader, gl::ShaderProgramID>::assign(gl::ShaderProgramID, gl::Shader*)
gl::ResourceMap<gl::Shader, gl::ShaderProgramID>::erase(gl::ShaderProgramID, gl::Shader**)
gl::ResourceMap<gl::Sync, unsigned int>::assign(unsigned int, gl::Sync*)
gl::ResourceMap<gl::Sync, unsigned int>::erase(unsigned int, gl::Sync**)
gl::ResourceMap<gl::Texture, gl::TextureID>::assign(gl::TextureID, gl::Texture*)
gl::ResourceMap<gl::Texture, gl::TextureID>::erase(gl::TextureID, gl::Texture**)
gl::ResourceMap<gl::TransformFeedback, gl::TransformFeedbackID>::assign(gl::TransformFeedbackID, gl::TransformFeedback*)
gl::ResourceMap<gl::TransformFeedback, gl::TransformFeedbackID>::erase(gl::TransformFeedbackID, gl::TransformFeedback**)
gl::ResourceMap<gl::VertexArray, gl::VertexArrayID>::assign(gl::VertexArrayID, gl::VertexArray*)
gl::ResourceMap<gl::VertexArray, gl::VertexArrayID>::erase(gl::VertexArrayID, gl::VertexArray**)
gl::ResumeTransformFeedback()
gl::ResumeTransformFeedbackContextANGLE(void*)
gl::Rotatef(float, float, float, float)
gl::RotatefContextANGLE(void*, float, float, float, float)
gl::Rotatex(int, int, int, int)
gl::RotatexContextANGLE(void*, int, int, int, int)
gl::SampleCoverage(float, unsigned char)
gl::SampleCoverageContextANGLE(void*, float, unsigned char)
gl::SampleCoveragex(int, unsigned char)
gl::SampleCoveragexContextANGLE(void*, int, unsigned char)
gl::SampleMaski(unsigned int, unsigned int)
gl::SampleMaskiANGLE(unsigned int, unsigned int)
gl::SampleMaskiANGLEContextANGLE(void*, unsigned int, unsigned int)
gl::SampleMaskiContextANGLE(void*, unsigned int, unsigned int)
gl::Sampler* gl::TypedResourceManager<gl::Sampler, gl::HandleAllocator, gl::SamplerManager, gl::SamplerID>::checkObjectAllocationImpl<>(rx::GLImplFactory*, gl::SamplerID)
gl::Sampler::Sampler(rx::GLImplFactory*, gl::SamplerID)
gl::Sampler::getBorderColor() const
gl::Sampler::getCompareFunc() const
gl::Sampler::getCompareMode() const
gl::Sampler::getImplementation() const
gl::Sampler::getLabel() const
gl::Sampler::getMagFilter() const
gl::Sampler::getMaxAnisotropy() const
gl::Sampler::getMaxLod() const
gl::Sampler::getMinFilter() const
gl::Sampler::getMinLod() const
gl::Sampler::getSRGBDecode() const
gl::Sampler::getSamplerState() const
gl::Sampler::getWrapR() const
gl::Sampler::getWrapS() const
gl::Sampler::getWrapT() const
gl::Sampler::onDestroy(gl::Context const*)
gl::Sampler::setBorderColor(gl::Context const*, angle::ColorGeneric const&)
gl::Sampler::setCompareFunc(gl::Context const*, unsigned int)
gl::Sampler::setCompareMode(gl::Context const*, unsigned int)
gl::Sampler::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Sampler::setMagFilter(gl::Context const*, unsigned int)
gl::Sampler::setMaxAnisotropy(gl::Context const*, float)
gl::Sampler::setMaxLod(gl::Context const*, float)
gl::Sampler::setMinFilter(gl::Context const*, unsigned int)
gl::Sampler::setMinLod(gl::Context const*, float)
gl::Sampler::setSRGBDecode(gl::Context const*, unsigned int)
gl::Sampler::setWrapR(gl::Context const*, unsigned int)
gl::Sampler::setWrapS(gl::Context const*, unsigned int)
gl::Sampler::setWrapT(gl::Context const*, unsigned int)
gl::Sampler::syncState(gl::Context const*)
gl::Sampler::~Sampler()
gl::SamplerBinding::~SamplerBinding()
gl::SamplerManager::AllocateNewObject(rx::GLImplFactory*, gl::SamplerID)
gl::SamplerManager::checkSamplerAllocation(rx::GLImplFactory*, gl::SamplerID)
gl::SamplerManager::createSampler()
gl::SamplerManager::getSampler(gl::SamplerID) const
gl::SamplerManager::isSampler(gl::SamplerID) const
gl::SamplerManager::~SamplerManager()
gl::SamplerNameContainsNonZeroArrayElement(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::SamplerNameContainsNonZeroArrayElement(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::kZERO_ELEMENT
gl::SamplerParameterIiv(unsigned int, unsigned int, int const*)
gl::SamplerParameterIivContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::SamplerParameterIivOES(unsigned int, unsigned int, int const*)
gl::SamplerParameterIivOESContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::SamplerParameterIivRobustANGLE(unsigned int, unsigned int, int, int const*)
gl::SamplerParameterIivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int const*)
gl::SamplerParameterIuiv(unsigned int, unsigned int, unsigned int const*)
gl::SamplerParameterIuivContextANGLE(void*, unsigned int, unsigned int, unsigned int const*)
gl::SamplerParameterIuivOES(unsigned int, unsigned int, unsigned int const*)
gl::SamplerParameterIuivOESContextANGLE(void*, unsigned int, unsigned int, unsigned int const*)
gl::SamplerParameterIuivRobustANGLE(unsigned int, unsigned int, int, unsigned int const*)
gl::SamplerParameterIuivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, unsigned int const*)
gl::SamplerParameterf(unsigned int, unsigned int, float)
gl::SamplerParameterfContextANGLE(void*, unsigned int, unsigned int, float)
gl::SamplerParameterfv(unsigned int, unsigned int, float const*)
gl::SamplerParameterfvContextANGLE(void*, unsigned int, unsigned int, float const*)
gl::SamplerParameterfvRobustANGLE(unsigned int, unsigned int, int, float const*)
gl::SamplerParameterfvRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, float const*)
gl::SamplerParameteri(unsigned int, unsigned int, int)
gl::SamplerParameteriContextANGLE(void*, unsigned int, unsigned int, int)
gl::SamplerParameteriv(unsigned int, unsigned int, int const*)
gl::SamplerParameterivContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::SamplerParameterivRobustANGLE(unsigned int, unsigned int, int, int const*)
gl::SamplerParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int const*)
gl::SamplerState::CreateDefaultForTarget(gl::TextureType)
gl::SamplerState::SamplerState()
gl::SamplerState::SamplerState(gl::SamplerState const&)
gl::SamplerState::setBorderColor(angle::ColorGeneric const&)
gl::SamplerState::setCompareFunc(unsigned int)
gl::SamplerState::setCompareMode(unsigned int)
gl::SamplerState::setMagFilter(unsigned int)
gl::SamplerState::setMaxAnisotropy(float)
gl::SamplerState::setMaxLod(float)
gl::SamplerState::setMinFilter(unsigned int)
gl::SamplerState::setMinLod(float)
gl::SamplerState::setSRGBDecode(unsigned int)
gl::SamplerState::setWrapR(unsigned int)
gl::SamplerState::setWrapS(unsigned int)
gl::SamplerState::setWrapT(unsigned int)
gl::SamplerTypeToTextureType(unsigned int)
gl::Scalef(float, float, float)
gl::ScalefContextANGLE(void*, float, float, float)
gl::Scalex(int, int, int)
gl::ScalexContextANGLE(void*, int, int, int)
gl::Scissor(int, int, int, int)
gl::ScissorContextANGLE(void*, int, int, int, int)
gl::Semaphore::Semaphore(rx::GLImplFactory*, gl::SemaphoreID)
gl::Semaphore::importFd(gl::Context*, gl::HandleType, int)
gl::Semaphore::importZirconHandle(gl::Context*, gl::HandleType, unsigned int)
gl::Semaphore::onDestroy(gl::Context const*)
gl::Semaphore::signal(gl::Context*, angle::FastVector<gl::Buffer*, 16ul, std::__1::array<gl::Buffer*, 16ul> > const&, angle::FastVector<gl::TextureAndLayout, 16ul, std::__1::array<gl::TextureAndLayout, 16ul> > const&)
gl::Semaphore::wait(gl::Context*, angle::FastVector<gl::Buffer*, 16ul, std::__1::array<gl::Buffer*, 16ul> > const&, angle::FastVector<gl::TextureAndLayout, 16ul, std::__1::array<gl::TextureAndLayout, 16ul> > const&)
gl::Semaphore::~Semaphore()
gl::SemaphoreManager::SemaphoreManager()
gl::SemaphoreManager::createSemaphore(rx::GLImplFactory*)
gl::SemaphoreManager::deleteSemaphore(gl::Context const*, gl::SemaphoreID)
gl::SemaphoreManager::getSemaphore(gl::SemaphoreID) const
gl::SemaphoreManager::reset(gl::Context const*)
gl::SemaphoreManager::~SemaphoreManager()
gl::SemaphoreParameterui64vEXT(unsigned int, unsigned int, unsigned long const*)
gl::SemaphoreParameterui64vEXTContextANGLE(void*, unsigned int, unsigned int, unsigned long const*)
gl::SetFenceNV(unsigned int, unsigned int)
gl::SetFenceNVContextANGLE(void*, unsigned int, unsigned int)
gl::SetFogParameters(gl::GLES1State*, unsigned int, float const*)
gl::SetFramebufferParameteri(gl::Context const*, gl::Framebuffer*, unsigned int, int)
gl::SetLightModelParameters(gl::GLES1State*, unsigned int, float const*)
gl::SetLightParameters(gl::GLES1State*, unsigned int, gl::LightParameter, float const*)
gl::SetMaterialParameters(gl::GLES1State*, unsigned int, gl::MaterialParameter, float const*)
gl::SetMemoryObjectParameteriv(gl::Context const*, gl::MemoryObject*, unsigned int, int const*)
gl::SetPointParameter(gl::GLES1State*, gl::PointParameter, float const*)
gl::SetPointSize(gl::GLES1State*, float)
gl::SetProgramParameteri(gl::Program*, unsigned int, int)
gl::SetRobustLengthParam(int const*, int)
gl::SetSamplerParameterIiv(gl::Context*, gl::Sampler*, unsigned int, int const*)
gl::SetSamplerParameterIuiv(gl::Context*, gl::Sampler*, unsigned int, unsigned int const*)
gl::SetSamplerParameterf(gl::Context*, gl::Sampler*, unsigned int, float)
gl::SetSamplerParameterfv(gl::Context*, gl::Sampler*, unsigned int, float const*)
gl::SetSamplerParameteri(gl::Context*, gl::Sampler*, unsigned int, int)
gl::SetSamplerParameteriv(gl::Context*, gl::Sampler*, unsigned int, int const*)
gl::SetTexParameterIiv(gl::Context*, gl::Texture*, unsigned int, int const*)
gl::SetTexParameterIuiv(gl::Context*, gl::Texture*, unsigned int, unsigned int const*)
gl::SetTexParameterf(gl::Context*, gl::Texture*, unsigned int, float)
gl::SetTexParameterfv(gl::Context*, gl::Texture*, unsigned int, float const*)
gl::SetTexParameteri(gl::Context*, gl::Texture*, unsigned int, int)
gl::SetTexParameteriv(gl::Context*, gl::Texture*, unsigned int, int const*)
gl::SetTexParameterx(gl::Context*, gl::Texture*, unsigned int, int)
gl::SetTexParameterxv(gl::Context*, gl::Texture*, unsigned int, int const*)
gl::SetTextureEnv(unsigned int, gl::GLES1State*, gl::TextureEnvTarget, gl::TextureEnvParameter, float const*)
gl::ShCompilerInstance::ShCompilerInstance()
gl::ShCompilerInstance::getBuiltinResourcesString()
gl::ShCompilerInstance::getHandle()
gl::ShCompilerInstance::operator=(gl::ShCompilerInstance&&)
gl::ShCompilerInstance::~ShCompilerInstance()
gl::ShadeModel(unsigned int)
gl::ShadeModelContextANGLE(void*, unsigned int)
gl::Shader::Shader(gl::ShaderProgramManager*, rx::GLImplFactory*, gl::Limitations const&, gl::ShaderType, gl::ShaderProgramID)
gl::Shader::addRef()
gl::Shader::compile(gl::Context const*)
gl::Shader::flagForDeletion()
gl::Shader::getActiveAttributes()
gl::Shader::getActiveOutputVariables()
gl::Shader::getAllAttributes()
gl::Shader::getCompilerResourcesString() const
gl::Shader::getGeometryShaderInputPrimitiveType()
gl::Shader::getGeometryShaderInvocations()
gl::Shader::getGeometryShaderMaxVertices()
gl::Shader::getGeometryShaderOutputPrimitiveType()
gl::Shader::getHandle() const
gl::Shader::getInfoLog(int, int*, char*)
gl::Shader::getInfoLogLength()
gl::Shader::getInputVaryings()
gl::Shader::getLabel() const
gl::Shader::getNumViews()
gl::Shader::getOutputVaryings()
gl::Shader::getRefCount() const
gl::Shader::getShaderStorageBlocks()
gl::Shader::getShaderVersion()
gl::Shader::getSource(int, int*, char*) const
gl::Shader::getSourceLength() const
gl::Shader::getTransformFeedbackVaryingMappedName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Shader::getTranslatedSource()
gl::Shader::getTranslatedSourceWithDebugInfo(int, int*, char*)
gl::Shader::getTranslatedSourceWithDebugInfoLength()
gl::Shader::getUniformBlocks()
gl::Shader::getUniforms()
gl::Shader::getWorkGroupSize()
gl::Shader::isCompiled()
gl::Shader::isCompleted()
gl::Shader::isFlaggedForDeletion() const
gl::Shader::onDestroy(gl::Context const*)
gl::Shader::release(gl::Context const*)
gl::Shader::resolveCompile()
gl::Shader::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Shader::setSource(int, char const* const*, int const*)
gl::Shader::~Shader()
gl::ShaderBinary(int, unsigned int const*, unsigned int, void const*, int)
gl::ShaderBinaryContextANGLE(void*, int, unsigned int const*, unsigned int, void const*, int)
gl::ShaderProgramManager::ShaderProgramManager()
gl::ShaderProgramManager::createProgram(rx::GLImplFactory*)
gl::ShaderProgramManager::createShader(rx::GLImplFactory*, gl::Limitations const&, gl::ShaderType)
gl::ShaderProgramManager::deleteProgram(gl::Context const*, gl::ShaderProgramID)
gl::ShaderProgramManager::deleteShader(gl::Context const*, gl::ShaderProgramID)
gl::ShaderProgramManager::getShader(gl::ShaderProgramID) const
gl::ShaderProgramManager::reset(gl::Context const*)
gl::ShaderProgramManager::~ShaderProgramManager()
gl::ShaderSource(unsigned int, int, char const* const*, int const*)
gl::ShaderSourceContextANGLE(void*, unsigned int, int, char const* const*, int const*)
gl::ShaderState::~ShaderState()
gl::ShaderStorageBlockLinker::getCurrentBlockMemberIndex() const
gl::ShaderStorageBlockLinker::getVisitor(std::__1::function<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, gl::ShaderType, int) const
gl::ShaderStorageBlockLinker::~ShaderStorageBlockLinker()
gl::ShaderType gl::FromGLenum<gl::ShaderType>(unsigned int)
gl::ShaderVariableBuffer::ShaderVariableBuffer()
gl::ShaderVariableBuffer::ShaderVariableBuffer(gl::ShaderVariableBuffer const&)
gl::ShaderVariableBuffer::numActiveVariables() const
gl::ShaderVariableBuffer::~ShaderVariableBuffer()
gl::ShadingModel gl::FromGLenum<gl::ShadingModel>(unsigned int)
gl::SignalSemaphoreEXT(unsigned int, unsigned int, unsigned int const*, unsigned int, unsigned int const*, unsigned int const*)
gl::SignalSemaphoreEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int const*, unsigned int, unsigned int const*, unsigned int const*)
gl::SizedFloatRGBARenderableSupport(gl::Version const&, gl::Extensions const&)
gl::SizedFloatRGBASupport(gl::Version const&, gl::Extensions const&)
gl::SizedFloatRGBSupport(gl::Version const&, gl::Extensions const&)
gl::SizedFloatRGSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatFilterSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatRGBARenderbufferSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatRGBATextureAttachmentSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatRGBRenderbufferSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatRGBTextureAttachmentSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatRGRenderbufferSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatRGSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatRGTextureAttachmentSupport(gl::Version const&, gl::Extensions const&)
gl::SizedHalfFloatSupport(gl::Version const&, gl::Extensions const&)
gl::SizedRGSupport(gl::Version const&, gl::Extensions const&)
gl::State::State(gl::State const*, egl::ShareGroup*, gl::TextureManager*, gl::DummyOverlay const*, unsigned int, gl::Version const&, bool, bool, bool, bool, bool, unsigned int)
gl::State::allActiveDrawBufferChannelsMasked() const
gl::State::anyActiveDrawBufferChannelMasked() const
gl::State::bindVertexBuffer(gl::Context const*, unsigned int, gl::Buffer*, long, int)
gl::State::detachBuffer(gl::Context*, gl::Buffer const*)
gl::State::detachProgramPipeline(gl::Context const*, gl::ProgramPipelineID)
gl::State::detachRenderbuffer(gl::Context const*, gl::RenderbufferID)
gl::State::detachSampler(gl::Context const*, gl::SamplerID)
gl::State::detachTexture(gl::Context const*, angle::PackedEnumMap<gl::TextureType, gl::BindingPointer<gl::Texture>, 10ul> const&, gl::TextureID)
gl::State::getActiveQuery(gl::QueryType) const
gl::State::getActiveQueryId(gl::QueryType) const
gl::State::getAndResetDirtyCurrentValues() const
gl::State::getBooleani_v(unsigned int, unsigned int, unsigned char*) const
gl::State::getBooleanv(unsigned int, unsigned char*) const
gl::State::getDepthStencilState() const
gl::State::getEnableFeature(unsigned int) const
gl::State::getEnableFeatureIndexed(unsigned int, unsigned int) const
gl::State::getFloatv(unsigned int, float*) const
gl::State::getIndexedAtomicCounterBuffer(unsigned long) const
gl::State::getIndexedShaderStorageBuffer(unsigned long) const
gl::State::getIndexedUniformBuffer(unsigned long) const
gl::State::getInteger64i_v(unsigned int, unsigned int, long*) const
gl::State::getIntegeri_v(unsigned int, unsigned int, int*) const
gl::State::getIntegerv(gl::Context const*, unsigned int, int*) const
gl::State::getPointerv(gl::Context const*, unsigned int, void**) const
gl::State::getRasterizerState() const
gl::State::getTargetFramebuffer(unsigned int) const
gl::State::getTargetTexture(gl::TextureType) const
gl::State::getTextureFilteringHint() const
gl::State::getVertexArrayId() const
gl::State::initialize(gl::Context*)
gl::State::initializeZeroTextures(gl::Context const*, angle::PackedEnumMap<gl::TextureType, gl::BindingPointer<gl::Texture>, 10ul> const&)
gl::State::invalidateTexture(gl::TextureType)
gl::State::isQueryActive(gl::Query*) const
gl::State::isQueryActive(gl::QueryType) const
gl::State::kBufferSetters
gl::State::kDirtyObjectHandlers
gl::State::onActiveTextureChange(gl::Context const*, unsigned long)
gl::State::onActiveTextureStateChange(gl::Context const*, unsigned long)
gl::State::onImageStateChange(gl::Context const*, unsigned long)
gl::State::onProgramExecutableChange(gl::Context const*, gl::Program*)
gl::State::onProgramPipelineExecutableChange(gl::Context const*, gl::ProgramPipeline*)
gl::State::onUniformBufferStateChange(unsigned long)
gl::State::removeDrawFramebufferBinding(gl::FramebufferID)
gl::State::removeReadFramebufferBinding(gl::FramebufferID)
gl::State::removeTransformFeedbackBinding(gl::Context const*, gl::TransformFeedbackID)
gl::State::removeVertexArrayBinding(gl::Context const*, gl::VertexArrayID)
gl::State::reset(gl::Context const*)
gl::State::setActiveQuery(gl::Context const*, gl::QueryType, gl::Query*)
gl::State::setActiveSampler(unsigned int)
gl::State::setBlendColor(float, float, float, float)
gl::State::setBlendEquation(unsigned int, unsigned int)
gl::State::setBlendEquationIndexed(unsigned int, unsigned int, unsigned int)
gl::State::setBlendFactors(unsigned int, unsigned int, unsigned int, unsigned int)
gl::State::setBlendFactorsIndexed(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::State::setColorClearValue(float, float, float, float)
gl::State::setColorMask(bool, bool, bool, bool)
gl::State::setColorMaskIndexed(bool, bool, bool, bool, unsigned int)
gl::State::setCoverageModulation(unsigned int)
gl::State::setCullMode(gl::CullFaceMode)
gl::State::setDepthClearValue(float)
gl::State::setDepthFunc(unsigned int)
gl::State::setDepthMask(bool)
gl::State::setDepthRange(float, float)
gl::State::setDrawFramebufferBinding(gl::Framebuffer*)
gl::State::setEnableFeature(unsigned int, bool)
gl::State::setEnableFeatureIndexed(unsigned int, bool, unsigned int)
gl::State::setEnableVertexAttribArray(unsigned int, bool)
gl::State::setFragmentShaderDerivativeHint(unsigned int)
gl::State::setFrontFace(unsigned int)
gl::State::setGenerateMipmapHint(unsigned int)
gl::State::setImageUnit(gl::Context const*, unsigned long, gl::Texture*, int, unsigned char, int, unsigned int, unsigned int)
gl::State::setIndexedBufferBinding(gl::Context const*, gl::BufferBinding, unsigned int, gl::Buffer*, long, long)
gl::State::setLineWidth(float)
gl::State::setMaxShaderCompilerThreads(unsigned int)
gl::State::setObjectDirty(unsigned int)
gl::State::setPackAlignment(int)
gl::State::setPackReverseRowOrder(bool)
gl::State::setPackRowLength(int)
gl::State::setPackSkipPixels(int)
gl::State::setPackSkipRows(int)
gl::State::setPolygonOffsetParams(float, float)
gl::State::setProgram(gl::Context const*, gl::Program*)
gl::State::setProgramPipelineBinding(gl::Context const*, gl::ProgramPipeline*)
gl::State::setReadFramebufferBinding(gl::Framebuffer*)
gl::State::setRenderbufferBinding(gl::Context const*, gl::Renderbuffer*)
gl::State::setSampleCoverageParams(float, bool)
gl::State::setSampleMaskParams(unsigned int, unsigned int)
gl::State::setSamplerBinding(gl::Context const*, unsigned int, gl::Sampler*)
gl::State::setSamplerDirty(unsigned long)
gl::State::setSamplerTexture(gl::Context const*, gl::TextureType, gl::Texture*)
gl::State::setScissorParams(int, int, int, int)
gl::State::setStencilBackOperations(unsigned int, unsigned int, unsigned int)
gl::State::setStencilBackParams(unsigned int, int, unsigned int)
gl::State::setStencilBackWritemask(unsigned int)
gl::State::setStencilClearValue(int)
gl::State::setStencilOperations(unsigned int, unsigned int, unsigned int)
gl::State::setStencilParams(unsigned int, int, unsigned int)
gl::State::setStencilWritemask(unsigned int)
gl::State::setTextureFilteringHint(unsigned int)
gl::State::setTransformFeedbackBinding(gl::Context const*, gl::TransformFeedback*)
gl::State::setUnpackAlignment(int)
gl::State::setUnpackImageHeight(int)
gl::State::setUnpackRowLength(int)
gl::State::setUnpackSkipImages(int)
gl::State::setUnpackSkipPixels(int)
gl::State::setUnpackSkipRows(int)
gl::State::setVertexArrayBinding(gl::Context const*, gl::VertexArray*)
gl::State::setVertexAttribDivisor(gl::Context const*, unsigned int, unsigned int)
gl::State::setVertexAttribFormat(unsigned int, int, gl::VertexAttribType, bool, bool, unsigned int)
gl::State::setVertexAttribf(unsigned int, float const*)
gl::State::setVertexAttribi(unsigned int, int const*)
gl::State::setVertexAttribu(unsigned int, unsigned int const*)
gl::State::setVertexBindingDivisor(unsigned int, unsigned int)
gl::State::setViewportParams(int, int, int, int)
gl::State::syncDirtyObject(gl::Context const*, unsigned int)
gl::State::syncDrawAttachments(gl::Context const*)
gl::State::syncDrawFramebuffer(gl::Context const*)
gl::State::syncImages(gl::Context const*)
gl::State::syncImagesInit(gl::Context const*)
gl::State::syncProgram(gl::Context const*)
gl::State::syncProgramPipeline(gl::Context const*)
gl::State::syncReadAttachments(gl::Context const*)
gl::State::syncReadFramebuffer(gl::Context const*)
gl::State::syncSamplers(gl::Context const*)
gl::State::syncTextures(gl::Context const*)
gl::State::syncTexturesInit(gl::Context const*)
gl::State::syncVertexArray(gl::Context const*)
gl::State::updatePPOActiveTextures()
gl::State::useProgramStages(gl::Context const*, gl::ProgramPipeline*, unsigned int, gl::Program*)
gl::State::~State()
gl::StateCache::getBasicDrawElementsErrorImpl(gl::Context const*) const
gl::StateCache::getBasicDrawStatesErrorImpl(gl::Context const*) const
gl::StateCache::onGLES1ClientStateChange(gl::Context*)
gl::StateCache::onProgramExecutableChange(gl::Context*)
gl::StateCache::onVertexArrayBindingChange(gl::Context*)
gl::StateCache::onVertexArrayStateChange(gl::Context*)
gl::StateCache::updateBasicDrawElementsError()
gl::StateCache::updateBasicDrawStatesError()
gl::StateCache::updateValidBindTextureTypes(gl::Context*)
gl::StateCache::updateValidDrawModes(gl::Context*)
gl::StateCache::updateVertexAttribTypesValidation(gl::Context*)
gl::StencilFunc(unsigned int, int, unsigned int)
gl::StencilFuncContextANGLE(void*, unsigned int, int, unsigned int)
gl::StencilFuncSeparate(unsigned int, unsigned int, int, unsigned int)
gl::StencilFuncSeparateContextANGLE(void*, unsigned int, unsigned int, int, unsigned int)
gl::StencilMask(unsigned int)
gl::StencilMaskContextANGLE(void*, unsigned int)
gl::StencilMaskSeparate(unsigned int, unsigned int)
gl::StencilMaskSeparateContextANGLE(void*, unsigned int, unsigned int)
gl::StencilOp(unsigned int, unsigned int, unsigned int)
gl::StencilOpContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::StencilOpSeparate(unsigned int, unsigned int, unsigned int, unsigned int)
gl::StencilOpSeparateContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int)
gl::StripLastArrayIndex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::SubjectBindingPointer<gl::Buffer>::~SubjectBindingPointer()
gl::SwizzleState::SwizzleState()
gl::SwizzleState::SwizzleState(unsigned int, unsigned int, unsigned int, unsigned int)
gl::SwizzleState::operator!=(gl::SwizzleState const&) const
gl::SwizzleState::swizzleRequired() const
gl::Sync::Sync(rx::GLImplFactory*, unsigned int)
gl::Sync::clientWait(gl::Context const*, unsigned int, unsigned long, unsigned int*)
gl::Sync::getLabel() const
gl::Sync::getStatus(gl::Context const*, int*) const
gl::Sync::onDestroy(gl::Context const*)
gl::Sync::serverWait(gl::Context const*, unsigned int, unsigned long)
gl::Sync::set(gl::Context const*, unsigned int, unsigned int)
gl::Sync::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Sync::~Sync()
gl::SyncManager::createSync(rx::GLImplFactory*)
gl::SyncManager::getSync(unsigned int) const
gl::SyncManager::~SyncManager()
gl::TestFenceNV(unsigned int)
gl::TestFenceNVContextANGLE(void*, unsigned int)
gl::TexBuffer(unsigned int, unsigned int, unsigned int)
gl::TexBufferContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::TexBufferRange(unsigned int, unsigned int, unsigned int, long, long)
gl::TexBufferRangeContextANGLE(void*, unsigned int, unsigned int, unsigned int, long, long)
gl::TexCoordPointer(int, unsigned int, int, void const*)
gl::TexCoordPointerContextANGLE(void*, int, unsigned int, int, void const*)
gl::TexEnvf(unsigned int, unsigned int, float)
gl::TexEnvfContextANGLE(void*, unsigned int, unsigned int, float)
gl::TexEnvfv(unsigned int, unsigned int, float const*)
gl::TexEnvfvContextANGLE(void*, unsigned int, unsigned int, float const*)
gl::TexEnvi(unsigned int, unsigned int, int)
gl::TexEnviContextANGLE(void*, unsigned int, unsigned int, int)
gl::TexEnviv(unsigned int, unsigned int, int const*)
gl::TexEnvivContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexEnvx(unsigned int, unsigned int, int)
gl::TexEnvxContextANGLE(void*, unsigned int, unsigned int, int)
gl::TexEnvxv(unsigned int, unsigned int, int const*)
gl::TexEnvxvContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexGenfOES(unsigned int, unsigned int, float)
gl::TexGenfOESContextANGLE(void*, unsigned int, unsigned int, float)
gl::TexGenfvOES(unsigned int, unsigned int, float const*)
gl::TexGenfvOESContextANGLE(void*, unsigned int, unsigned int, float const*)
gl::TexGeniOES(unsigned int, unsigned int, int)
gl::TexGeniOESContextANGLE(void*, unsigned int, unsigned int, int)
gl::TexGenivOES(unsigned int, unsigned int, int const*)
gl::TexGenivOESContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexGenxOES(unsigned int, unsigned int, int)
gl::TexGenxOESContextANGLE(void*, unsigned int, unsigned int, int)
gl::TexGenxvOES(unsigned int, unsigned int, int const*)
gl::TexGenxvOESContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexImage2D(unsigned int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexImage2DContextANGLE(void*, unsigned int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexImage2DExternalANGLE(unsigned int, int, int, int, int, int, unsigned int, unsigned int)
gl::TexImage2DExternalANGLEContextANGLE(void*, unsigned int, int, int, int, int, int, unsigned int, unsigned int)
gl::TexImage2DRobustANGLE(unsigned int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::TexImage2DRobustANGLEContextANGLE(void*, unsigned int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::TexImage3D(unsigned int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexImage3DContextANGLE(void*, unsigned int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexImage3DOES(unsigned int, int, unsigned int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexImage3DOESContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexImage3DRobustANGLE(unsigned int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::TexImage3DRobustANGLEContextANGLE(void*, unsigned int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::TexParameterIiv(unsigned int, unsigned int, int const*)
gl::TexParameterIivContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexParameterIivOES(unsigned int, unsigned int, int const*)
gl::TexParameterIivOESContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexParameterIivRobustANGLE(unsigned int, unsigned int, int, int const*)
gl::TexParameterIivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int const*)
gl::TexParameterIuiv(unsigned int, unsigned int, unsigned int const*)
gl::TexParameterIuivContextANGLE(void*, unsigned int, unsigned int, unsigned int const*)
gl::TexParameterIuivOES(unsigned int, unsigned int, unsigned int const*)
gl::TexParameterIuivOESContextANGLE(void*, unsigned int, unsigned int, unsigned int const*)
gl::TexParameterIuivRobustANGLE(unsigned int, unsigned int, int, unsigned int const*)
gl::TexParameterIuivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, unsigned int const*)
gl::TexParameterf(unsigned int, unsigned int, float)
gl::TexParameterfContextANGLE(void*, unsigned int, unsigned int, float)
gl::TexParameterfv(unsigned int, unsigned int, float const*)
gl::TexParameterfvContextANGLE(void*, unsigned int, unsigned int, float const*)
gl::TexParameterfvRobustANGLE(unsigned int, unsigned int, int, float const*)
gl::TexParameterfvRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, float const*)
gl::TexParameteri(unsigned int, unsigned int, int)
gl::TexParameteriContextANGLE(void*, unsigned int, unsigned int, int)
gl::TexParameteriv(unsigned int, unsigned int, int const*)
gl::TexParameterivContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexParameterivRobustANGLE(unsigned int, unsigned int, int, int const*)
gl::TexParameterivRobustANGLEContextANGLE(void*, unsigned int, unsigned int, int, int const*)
gl::TexParameterx(unsigned int, unsigned int, int)
gl::TexParameterxContextANGLE(void*, unsigned int, unsigned int, int)
gl::TexParameterxv(unsigned int, unsigned int, int const*)
gl::TexParameterxvContextANGLE(void*, unsigned int, unsigned int, int const*)
gl::TexStorage1DEXT(unsigned int, int, unsigned int, int)
gl::TexStorage1DEXTContextANGLE(void*, unsigned int, int, unsigned int, int)
gl::TexStorage2D(unsigned int, int, unsigned int, int, int)
gl::TexStorage2DContextANGLE(void*, unsigned int, int, unsigned int, int, int)
gl::TexStorage2DEXT(unsigned int, int, unsigned int, int, int)
gl::TexStorage2DEXTContextANGLE(void*, unsigned int, int, unsigned int, int, int)
gl::TexStorage2DMultisample(unsigned int, int, unsigned int, int, int, unsigned char)
gl::TexStorage2DMultisampleANGLE(unsigned int, int, unsigned int, int, int, unsigned char)
gl::TexStorage2DMultisampleANGLEContextANGLE(void*, unsigned int, int, unsigned int, int, int, unsigned char)
gl::TexStorage2DMultisampleContextANGLE(void*, unsigned int, int, unsigned int, int, int, unsigned char)
gl::TexStorage3D(unsigned int, int, unsigned int, int, int, int)
gl::TexStorage3DContextANGLE(void*, unsigned int, int, unsigned int, int, int, int)
gl::TexStorage3DEXT(unsigned int, int, unsigned int, int, int, int)
gl::TexStorage3DEXTContextANGLE(void*, unsigned int, int, unsigned int, int, int, int)
gl::TexStorage3DMultisample(unsigned int, int, unsigned int, int, int, int, unsigned char)
gl::TexStorage3DMultisampleContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, unsigned char)
gl::TexStorage3DMultisampleOES(unsigned int, int, unsigned int, int, int, int, unsigned char)
gl::TexStorage3DMultisampleOESContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, unsigned char)
gl::TexStorageMem2DEXT(unsigned int, int, unsigned int, int, int, unsigned int, unsigned long)
gl::TexStorageMem2DEXTContextANGLE(void*, unsigned int, int, unsigned int, int, int, unsigned int, unsigned long)
gl::TexStorageMem2DMultisampleEXT(unsigned int, int, unsigned int, int, int, unsigned char, unsigned int, unsigned long)
gl::TexStorageMem2DMultisampleEXTContextANGLE(void*, unsigned int, int, unsigned int, int, int, unsigned char, unsigned int, unsigned long)
gl::TexStorageMem3DEXT(unsigned int, int, unsigned int, int, int, int, unsigned int, unsigned long)
gl::TexStorageMem3DEXTContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, unsigned int, unsigned long)
gl::TexStorageMem3DMultisampleEXT(unsigned int, int, unsigned int, int, int, int, unsigned char, unsigned int, unsigned long)
gl::TexStorageMem3DMultisampleEXTContextANGLE(void*, unsigned int, int, unsigned int, int, int, int, unsigned char, unsigned int, unsigned long)
gl::TexSubImage2D(unsigned int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexSubImage2DContextANGLE(void*, unsigned int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexSubImage2DRobustANGLE(unsigned int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::TexSubImage2DRobustANGLEContextANGLE(void*, unsigned int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::TexSubImage3D(unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexSubImage3DContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexSubImage3DOES(unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexSubImage3DOESContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::TexSubImage3DRobustANGLE(unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::TexSubImage3DRobustANGLEContextANGLE(void*, unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::Texture* gl::TypedResourceManager<gl::Texture, gl::HandleAllocator, gl::TextureManager, gl::TextureID>::checkObjectAllocationImpl<gl::TextureType>(rx::GLImplFactory*, gl::TextureID, gl::TextureType)
gl::Texture::Texture(rx::GLImplFactory*, gl::TextureID, gl::TextureType)
gl::Texture::acquireImageFromStream(gl::Context const*, egl::Stream::GLTextureDescription const&)
gl::Texture::bindStream(egl::Stream*)
gl::Texture::bindTexImageFromSurface(gl::Context*, egl::Surface*)
gl::Texture::copyCompressedTexture(gl::Context*, gl::Texture const*)
gl::Texture::copyImage(gl::Context*, gl::TextureTarget, int, gl::Rectangle const&, unsigned int, gl::Framebuffer*)
gl::Texture::copySubImage(gl::Context*, gl::ImageIndex const&, gl::Offset const&, gl::Rectangle const&, gl::Framebuffer*)
gl::Texture::copySubTexture(gl::Context const*, gl::TextureTarget, int, gl::Offset const&, int, gl::Box const&, bool, bool, bool, gl::Texture*)
gl::Texture::copyTexture(gl::Context*, gl::TextureTarget, int, unsigned int, unsigned int, int, bool, bool, bool, gl::Texture*)
gl::Texture::ensureInitialized(gl::Context const*)
gl::Texture::ensureSubImageInitialized(gl::Context const*, gl::ImageIndex const&, gl::Box const&)
gl::Texture::generateMipmap(gl::Context*)
gl::Texture::getAttachmentFixedSampleLocations(gl::ImageIndex const&) const
gl::Texture::getAttachmentFormat(unsigned int, gl::ImageIndex const&) const
gl::Texture::getAttachmentImpl() const
gl::Texture::getAttachmentSamples(gl::ImageIndex const&) const
gl::Texture::getAttachmentSize(gl::ImageIndex const&) const
gl::Texture::getBaseLevel() const
gl::Texture::getBorderColor() const
gl::Texture::getBoundSurface() const
gl::Texture::getCompareFunc() const
gl::Texture::getCompareMode() const
gl::Texture::getCrop() const
gl::Texture::getDepth(gl::TextureTarget, unsigned long) const
gl::Texture::getDepthStencilTextureMode() const
gl::Texture::getFixedSampleLocations(gl::TextureTarget, unsigned long) const
gl::Texture::getFormat(gl::TextureTarget, unsigned long) const
gl::Texture::getGenerateMipmapHint() const
gl::Texture::getHeight(gl::TextureTarget, unsigned long) const
gl::Texture::getId() const
gl::Texture::getImmutableFormat() const
gl::Texture::getImmutableLevels() const
gl::Texture::getImplementationColorReadFormat(gl::Context const*) const
gl::Texture::getImplementationColorReadType(gl::Context const*) const
gl::Texture::getLabel() const
gl::Texture::getLevelMemorySize(gl::TextureTarget, int) const
gl::Texture::getMagFilter() const
gl::Texture::getMaxAnisotropy() const
gl::Texture::getMaxLevel() const
gl::Texture::getMaxLod() const
gl::Texture::getMemorySize() const
gl::Texture::getMinFilter() const
gl::Texture::getMinLod() const
gl::Texture::getMipmapMaxLevel() const
gl::Texture::getNativeID() const
gl::Texture::getSRGBDecode() const
gl::Texture::getSRGBOverride() const
gl::Texture::getSamplerState() const
gl::Texture::getSamples(gl::TextureTarget, unsigned long) const
gl::Texture::getSwizzleAlpha() const
gl::Texture::getSwizzleBlue() const
gl::Texture::getSwizzleGreen() const
gl::Texture::getSwizzleRed() const
gl::Texture::getTexImage(gl::Context const*, gl::PixelPackState const&, gl::Buffer*, gl::TextureTarget, int, unsigned int, unsigned int, void*)
gl::Texture::getTextureState() const
gl::Texture::getUsage() const
gl::Texture::getWidth(gl::TextureTarget, unsigned long) const
gl::Texture::getWrapR() const
gl::Texture::getWrapS() const
gl::Texture::getWrapT() const
gl::Texture::initState(gl::ImageIndex const&) const
gl::Texture::isMipmapComplete() const
gl::Texture::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
gl::Texture::isSamplerComplete(gl::Context const*, gl::Sampler const*)
gl::Texture::onAttach(gl::Context const*)
gl::Texture::onBindAsImageTexture(unsigned long)
gl::Texture::onDestroy(gl::Context const*)
gl::Texture::onDetach(gl::Context const*)
gl::Texture::onSubjectStateChange(unsigned long, angle::SubjectMessage)
gl::Texture::releaseImageFromStream(gl::Context const*)
gl::Texture::releaseStream()
gl::Texture::releaseTexImageFromSurface(gl::Context const*)
gl::Texture::releaseTexImageInternal(gl::Context*)
gl::Texture::setBaseLevel(gl::Context const*, unsigned int)
gl::Texture::setBorderColor(gl::Context const*, angle::ColorGeneric const&)
gl::Texture::setCompareFunc(gl::Context const*, unsigned int)
gl::Texture::setCompareMode(gl::Context const*, unsigned int)
gl::Texture::setCompressedImage(gl::Context*, gl::PixelUnpackState const&, gl::TextureTarget, int, unsigned int, gl::Extents const&, unsigned long, unsigned char const*)
gl::Texture::setCompressedSubImage(gl::Context const*, gl::PixelUnpackState const&, gl::TextureTarget, int, gl::Box const&, unsigned int, unsigned long, unsigned char const*)
gl::Texture::setCrop(gl::Rectangle const&)
gl::Texture::setDepthStencilTextureMode(gl::Context const*, unsigned int)
gl::Texture::setEGLImageTarget(gl::Context*, gl::TextureType, egl::Image*)
gl::Texture::setGenerateMipmapHint(unsigned int)
gl::Texture::setImage(gl::Context*, gl::PixelUnpackState const&, gl::Buffer*, gl::TextureTarget, int, unsigned int, gl::Extents const&, unsigned int, unsigned int, unsigned char const*)
gl::Texture::setImageExternal(gl::Context*, gl::TextureTarget, int, unsigned int, gl::Extents const&, unsigned int, unsigned int)
gl::Texture::setInitState(gl::ImageIndex const&, gl::InitState)
gl::Texture::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::Texture::setMagFilter(gl::Context const*, unsigned int)
gl::Texture::setMaxAnisotropy(gl::Context const*, float)
gl::Texture::setMaxLevel(gl::Context const*, unsigned int)
gl::Texture::setMaxLod(gl::Context const*, float)
gl::Texture::setMinFilter(gl::Context const*, unsigned int)
gl::Texture::setMinLod(gl::Context const*, float)
gl::Texture::setSRGBDecode(gl::Context const*, unsigned int)
gl::Texture::setSRGBOverride(gl::Context const*, unsigned int)
gl::Texture::setStorage(gl::Context*, gl::TextureType, int, unsigned int, gl::Extents const&)
gl::Texture::setStorageExternalMemory(gl::Context*, gl::TextureType, int, unsigned int, gl::Extents const&, gl::MemoryObject*, unsigned long)
gl::Texture::setStorageMultisample(gl::Context*, gl::TextureType, int, int, gl::Extents const&, bool)
gl::Texture::setSubImage(gl::Context*, gl::PixelUnpackState const&, gl::Buffer*, gl::TextureTarget, int, gl::Box const&, unsigned int, unsigned int, unsigned char const*)
gl::Texture::setSwizzleAlpha(gl::Context const*, unsigned int)
gl::Texture::setSwizzleBlue(gl::Context const*, unsigned int)
gl::Texture::setSwizzleGreen(gl::Context const*, unsigned int)
gl::Texture::setSwizzleRed(gl::Context const*, unsigned int)
gl::Texture::setUsage(gl::Context const*, unsigned int)
gl::Texture::setWrapR(gl::Context const*, unsigned int)
gl::Texture::setWrapS(gl::Context const*, unsigned int)
gl::Texture::setWrapT(gl::Context const*, unsigned int)
gl::Texture::signalDirtyStorage(gl::InitState)
gl::Texture::syncState(gl::Context const*, gl::TextureCommand)
gl::Texture::~Texture()
gl::TextureCaps::TextureCaps()
gl::TextureCaps::TextureCaps(gl::TextureCaps const&)
gl::TextureCaps::getMaxSamples() const
gl::TextureCaps::getNearestSamples(unsigned int) const
gl::TextureCaps::~TextureCaps()
gl::TextureCapsMap::TextureCapsMap()
gl::TextureCapsMap::clear()
gl::TextureCapsMap::get(unsigned int) const
gl::TextureCapsMap::insert(unsigned int, gl::TextureCaps const&)
gl::TextureCapsMap::set(angle::FormatID, gl::TextureCaps const&)
gl::TextureCapsMap::~TextureCapsMap()
gl::TextureCombine gl::FromGLenum<gl::TextureCombine>(unsigned int)
gl::TextureCoordF::TextureCoordF(float, float, float, float)
gl::TextureEnvMode gl::FromGLenum<gl::TextureEnvMode>(unsigned int)
gl::TextureEnvParameter gl::FromGLenum<gl::TextureEnvParameter>(unsigned int)
gl::TextureEnvTarget gl::FromGLenum<gl::TextureEnvTarget>(unsigned int)
gl::TextureManager::AllocateNewObject(rx::GLImplFactory*, gl::TextureID, gl::TextureType)
gl::TextureManager::createTexture()
gl::TextureManager::signalAllTexturesDirty() const
gl::TextureManager::~TextureManager()
gl::TextureOp gl::FromGLenum<gl::TextureOp>(unsigned int)
gl::TextureSrc gl::FromGLenum<gl::TextureSrc>(unsigned int)
gl::TextureState::TextureState(gl::TextureType)
gl::TextureState::clearImageDesc(gl::TextureTarget, unsigned long)
gl::TextureState::computeLevelCompleteness(gl::TextureTarget, unsigned long) const
gl::TextureState::computeMipmapCompleteness() const
gl::TextureState::computeRequiredSamplerFormat(gl::SamplerState const&) const
gl::TextureState::computeSamplerCompleteness(gl::SamplerState const&, gl::State const&) const
gl::TextureState::getBaseLevelDesc() const
gl::TextureState::getBindingCount(unsigned long)
gl::TextureState::getEffectiveBaseLevel() const
gl::TextureState::getEffectiveMaxLevel() const
gl::TextureState::getEnabledLevelCount() const
gl::TextureState::getImageDesc(gl::ImageIndex const&) const
gl::TextureState::getImageDesc(gl::TextureTarget, unsigned long) const
gl::TextureState::getMipmapMaxLevel() const
gl::TextureState::isCubeComplete() const
gl::TextureState::setImageDescChain(unsigned int, unsigned int, gl::Extents, gl::Format const&, gl::InitState)
gl::TextureTarget gl::FromGLenum<gl::TextureTarget>(unsigned int)
gl::TextureTargetToType(gl::TextureTarget)
gl::TextureType gl::FromGLenum<gl::TextureType>(unsigned int)
gl::TextureTypeToTarget(gl::TextureType, int)
gl::ToGLenum(gl::AlphaTestFunc)
gl::ToGLenum(gl::BufferBinding)
gl::ToGLenum(gl::BufferUsage)
gl::ToGLenum(gl::CullFaceMode)
gl::ToGLenum(gl::FogMode)
gl::ToGLenum(gl::GraphicsResetStatus)
gl::ToGLenum(gl::HandleType)
gl::ToGLenum(gl::HintSetting)
gl::ToGLenum(gl::LogicalOperation)
gl::ToGLenum(gl::MatrixType)
gl::ToGLenum(gl::ProvokingVertexConvention)
gl::ToGLenum(gl::QueryType)
gl::ToGLenum(gl::ShaderType)
gl::ToGLenum(gl::ShadingModel)
gl::ToGLenum(gl::TextureCombine)
gl::ToGLenum(gl::TextureEnvMode)
gl::ToGLenum(gl::TextureOp)
gl::ToGLenum(gl::TextureSrc)
gl::ToGLenum(gl::TextureTarget)
gl::ToGLenum(gl::TextureType)
gl::Trace(int, char const*)
gl::TransformFeedback::TransformFeedback(rx::GLImplFactory*, gl::TransformFeedbackID, gl::Caps const&)
gl::TransformFeedback::begin(gl::Context const*, gl::PrimitiveMode, gl::Program*)
gl::TransformFeedback::bindIndexedBuffer(gl::Context const*, unsigned long, gl::Buffer*, unsigned long, unsigned long)
gl::TransformFeedback::buffersBoundForOtherUse() const
gl::TransformFeedback::checkBufferSpaceForDraw(int, int) const
gl::TransformFeedback::detachBuffer(gl::Context const*, gl::BufferID)
gl::TransformFeedback::end(gl::Context const*)
gl::TransformFeedback::getImplementation() const
gl::TransformFeedback::getIndexedBuffer(unsigned long) const
gl::TransformFeedback::getIndexedBufferCount() const
gl::TransformFeedback::getLabel() const
gl::TransformFeedback::getPrimitiveMode() const
gl::TransformFeedback::hasBoundProgram(gl::ShaderProgramID) const
gl::TransformFeedback::isPaused() const
gl::TransformFeedback::onBindingChanged(gl::Context const*, bool)
gl::TransformFeedback::onDestroy(gl::Context const*)
gl::TransformFeedback::onVerticesDrawn(gl::Context const*, int, int)
gl::TransformFeedback::pause(gl::Context const*)
gl::TransformFeedback::resume(gl::Context const*)
gl::TransformFeedback::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::TransformFeedback::~TransformFeedback()
gl::TransformFeedbackState::getIndexedBuffer(unsigned long) const
gl::TransformFeedbackState::getPrimitivesDrawn() const
gl::TransformFeedbackVarying::TransformFeedbackVarying(sh::ShaderVariable const&, sh::ShaderVariable const&)
gl::TransformFeedbackVarying::nameWithArrayIndex() const
gl::TransformFeedbackVaryings(unsigned int, int, char const* const*, unsigned int)
gl::TransformFeedbackVaryingsContextANGLE(void*, unsigned int, int, char const* const*, unsigned int)
gl::Translatef(float, float, float)
gl::TranslatefContextANGLE(void*, float, float, float)
gl::Translatex(int, int, int)
gl::TranslatexContextANGLE(void*, int, int, int)
gl::TransposeMatrixType(unsigned int)
gl::TypePrecision::TypePrecision()
gl::TypePrecision::get(int*, int*) const
gl::TypePrecision::setIEEEFloat()
gl::TypePrecision::setTwosComplementInt(unsigned int)
gl::TypedResourceManager<gl::Buffer, gl::HandleAllocator, gl::BufferManager, gl::BufferID>::deleteObject(gl::Context const*, gl::BufferID)
gl::TypedResourceManager<gl::Buffer, gl::HandleAllocator, gl::BufferManager, gl::BufferID>::reset(gl::Context const*)
gl::TypedResourceManager<gl::Buffer, gl::HandleAllocator, gl::BufferManager, gl::BufferID>::~TypedResourceManager()
gl::TypedResourceManager<gl::Framebuffer, gl::HandleAllocator, gl::FramebufferManager, gl::FramebufferID>::deleteObject(gl::Context const*, gl::FramebufferID)
gl::TypedResourceManager<gl::Framebuffer, gl::HandleAllocator, gl::FramebufferManager, gl::FramebufferID>::reset(gl::Context const*)
gl::TypedResourceManager<gl::Framebuffer, gl::HandleAllocator, gl::FramebufferManager, gl::FramebufferID>::~TypedResourceManager()
gl::TypedResourceManager<gl::ProgramPipeline, gl::HandleAllocator, gl::ProgramPipelineManager, gl::ProgramPipelineID>::deleteObject(gl::Context const*, gl::ProgramPipelineID)
gl::TypedResourceManager<gl::ProgramPipeline, gl::HandleAllocator, gl::ProgramPipelineManager, gl::ProgramPipelineID>::reset(gl::Context const*)
gl::TypedResourceManager<gl::ProgramPipeline, gl::HandleAllocator, gl::ProgramPipelineManager, gl::ProgramPipelineID>::~TypedResourceManager()
gl::TypedResourceManager<gl::Renderbuffer, gl::HandleAllocator, gl::RenderbufferManager, gl::RenderbufferID>::deleteObject(gl::Context const*, gl::RenderbufferID)
gl::TypedResourceManager<gl::Renderbuffer, gl::HandleAllocator, gl::RenderbufferManager, gl::RenderbufferID>::reset(gl::Context const*)
gl::TypedResourceManager<gl::Renderbuffer, gl::HandleAllocator, gl::RenderbufferManager, gl::RenderbufferID>::~TypedResourceManager()
gl::TypedResourceManager<gl::Sampler, gl::HandleAllocator, gl::SamplerManager, gl::SamplerID>::deleteObject(gl::Context const*, gl::SamplerID)
gl::TypedResourceManager<gl::Sampler, gl::HandleAllocator, gl::SamplerManager, gl::SamplerID>::reset(gl::Context const*)
gl::TypedResourceManager<gl::Sampler, gl::HandleAllocator, gl::SamplerManager, gl::SamplerID>::~TypedResourceManager()
gl::TypedResourceManager<gl::Sync, gl::HandleAllocator, gl::SyncManager, unsigned int>::deleteObject(gl::Context const*, unsigned int)
gl::TypedResourceManager<gl::Sync, gl::HandleAllocator, gl::SyncManager, unsigned int>::reset(gl::Context const*)
gl::TypedResourceManager<gl::Sync, gl::HandleAllocator, gl::SyncManager, unsigned int>::~TypedResourceManager()
gl::TypedResourceManager<gl::Texture, gl::HandleAllocator, gl::TextureManager, gl::TextureID>::deleteObject(gl::Context const*, gl::TextureID)
gl::TypedResourceManager<gl::Texture, gl::HandleAllocator, gl::TextureManager, gl::TextureID>::reset(gl::Context const*)
gl::TypedResourceManager<gl::Texture, gl::HandleAllocator, gl::TextureManager, gl::TextureID>::~TypedResourceManager()
gl::Uniform1f(int, float)
gl::Uniform1fContextANGLE(void*, int, float)
gl::Uniform1fv(int, int, float const*)
gl::Uniform1fvContextANGLE(void*, int, int, float const*)
gl::Uniform1i(int, int)
gl::Uniform1iContextANGLE(void*, int, int)
gl::Uniform1iv(int, int, int const*)
gl::Uniform1ivContextANGLE(void*, int, int, int const*)
gl::Uniform1ui(int, unsigned int)
gl::Uniform1uiContextANGLE(void*, int, unsigned int)
gl::Uniform1uiv(int, int, unsigned int const*)
gl::Uniform1uivContextANGLE(void*, int, int, unsigned int const*)
gl::Uniform2f(int, float, float)
gl::Uniform2fContextANGLE(void*, int, float, float)
gl::Uniform2fv(int, int, float const*)
gl::Uniform2fvContextANGLE(void*, int, int, float const*)
gl::Uniform2i(int, int, int)
gl::Uniform2iContextANGLE(void*, int, int, int)
gl::Uniform2iv(int, int, int const*)
gl::Uniform2ivContextANGLE(void*, int, int, int const*)
gl::Uniform2ui(int, unsigned int, unsigned int)
gl::Uniform2uiContextANGLE(void*, int, unsigned int, unsigned int)
gl::Uniform2uiv(int, int, unsigned int const*)
gl::Uniform2uivContextANGLE(void*, int, int, unsigned int const*)
gl::Uniform3f(int, float, float, float)
gl::Uniform3fContextANGLE(void*, int, float, float, float)
gl::Uniform3fv(int, int, float const*)
gl::Uniform3fvContextANGLE(void*, int, int, float const*)
gl::Uniform3i(int, int, int, int)
gl::Uniform3iContextANGLE(void*, int, int, int, int)
gl::Uniform3iv(int, int, int const*)
gl::Uniform3ivContextANGLE(void*, int, int, int const*)
gl::Uniform3ui(int, unsigned int, unsigned int, unsigned int)
gl::Uniform3uiContextANGLE(void*, int, unsigned int, unsigned int, unsigned int)
gl::Uniform3uiv(int, int, unsigned int const*)
gl::Uniform3uivContextANGLE(void*, int, int, unsigned int const*)
gl::Uniform4f(int, float, float, float, float)
gl::Uniform4fContextANGLE(void*, int, float, float, float, float)
gl::Uniform4fv(int, int, float const*)
gl::Uniform4fvContextANGLE(void*, int, int, float const*)
gl::Uniform4i(int, int, int, int, int)
gl::Uniform4iContextANGLE(void*, int, int, int, int, int)
gl::Uniform4iv(int, int, int const*)
gl::Uniform4ivContextANGLE(void*, int, int, int const*)
gl::Uniform4ui(int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::Uniform4uiContextANGLE(void*, int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::Uniform4uiv(int, int, unsigned int const*)
gl::Uniform4uivContextANGLE(void*, int, int, unsigned int const*)
gl::UniformBlockBinding(unsigned int, unsigned int, unsigned int)
gl::UniformBlockBindingContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::UniformBlockLinker::getCurrentBlockMemberIndex() const
gl::UniformBlockLinker::getVisitor(std::__1::function<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, gl::ShaderType, int) const
gl::UniformBlockLinker::~UniformBlockLinker()
gl::UniformLinker::UniformLinker(gl::ProgramState const&)
gl::UniformLinker::checkMaxCombinedAtomicCounters(gl::Caps const&, gl::InfoLog&)
gl::UniformLinker::flattenUniformsAndCheckCaps(gl::Caps const&, gl::InfoLog&)
gl::UniformLinker::flattenUniformsAndCheckCapsForShader(gl::Shader*, gl::Caps const&, std::__1::vector<gl::LinkedUniform, std::__1::allocator<gl::LinkedUniform> >&, std::__1::vector<gl::LinkedUniform, std::__1::allocator<gl::LinkedUniform> >&, std::__1::vector<gl::LinkedUniform, std::__1::allocator<gl::LinkedUniform> >&, std::__1::vector<gl::UnusedUniform, std::__1::allocator<gl::UnusedUniform> >&, gl::InfoLog&)
gl::UniformLinker::gatherUniformLocationsAndCheckConflicts(gl::InfoLog&, gl::ProgramAliasedBindings const&, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >*, int*)
gl::UniformLinker::getResults(std::__1::vector<gl::LinkedUniform, std::__1::allocator<gl::LinkedUniform> >*, std::__1::vector<gl::UnusedUniform, std::__1::allocator<gl::UnusedUniform> >*, std::__1::vector<gl::VariableLocation, std::__1::allocator<gl::VariableLocation> >*)
gl::UniformLinker::indexUniforms(gl::InfoLog&, gl::ProgramAliasedBindings const&)
gl::UniformLinker::link(gl::Caps const&, gl::InfoLog&, gl::ProgramAliasedBindings const&)
gl::UniformLinker::pruneUnusedUniforms()
gl::UniformLinker::validateGraphicsUniforms(gl::InfoLog&) const
gl::UniformLinker::~UniformLinker()
gl::UniformMatrix2fv(int, int, unsigned char, float const*)
gl::UniformMatrix2fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix2x3fv(int, int, unsigned char, float const*)
gl::UniformMatrix2x3fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix2x4fv(int, int, unsigned char, float const*)
gl::UniformMatrix2x4fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix3fv(int, int, unsigned char, float const*)
gl::UniformMatrix3fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix3x2fv(int, int, unsigned char, float const*)
gl::UniformMatrix3x2fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix3x4fv(int, int, unsigned char, float const*)
gl::UniformMatrix3x4fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix4fv(int, int, unsigned char, float const*)
gl::UniformMatrix4fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix4x2fv(int, int, unsigned char, float const*)
gl::UniformMatrix4x2fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UniformMatrix4x3fv(int, int, unsigned char, float const*)
gl::UniformMatrix4x3fvContextANGLE(void*, int, int, unsigned char, float const*)
gl::UninitializeDebugAnnotations()
gl::UnmapBuffer(unsigned int)
gl::UnmapBufferContextANGLE(void*, unsigned int)
gl::UnmapBufferOES(unsigned int)
gl::UnmapBufferOESContextANGLE(void*, unsigned int)
gl::UnsizedHalfFloatOESRGBATextureAttachmentSupport(gl::Version const&, gl::Extensions const&)
gl::UpdateBufferBinding(gl::Context const*, gl::BindingPointer<gl::Buffer>*, gl::Buffer*, gl::BufferBinding)
gl::UpdateIndexedBufferBinding(gl::Context const*, gl::OffsetBindingPointer<gl::Buffer>*, gl::Buffer*, gl::BufferBinding, long, long)
gl::UseProgram(unsigned int)
gl::UseProgramContextANGLE(void*, unsigned int)
gl::UseProgramStages(unsigned int, unsigned int, unsigned int)
gl::UseProgramStagesContextANGLE(void*, unsigned int, unsigned int, unsigned int)
gl::ValidCompressedImageSize(gl::Context const*, unsigned int, int, int, int, int)
gl::ValidCompressedSubImageSize(gl::Context const*, unsigned int, int, int, int, int, int, int, unsigned long, unsigned long, unsigned long)
gl::ValidDesktopFormat(unsigned int)
gl::ValidDesktopFormatCombination(unsigned int, unsigned int, unsigned int)
gl::ValidDesktopType(unsigned int)
gl::ValidES3CopyConversion(unsigned int, unsigned int)
gl::ValidES3Format(unsigned int)
gl::ValidES3FormatCombination(unsigned int, unsigned int, unsigned int)
gl::ValidES3InternalFormat(unsigned int)
gl::ValidES3Type(unsigned int)
gl::ValidFramebufferTarget(gl::Context const*, unsigned int)
gl::ValidImageDataSize(gl::Context const*, gl::TextureType, int, int, int, unsigned int, unsigned int, void const*, int)
gl::ValidImageSizeParameters(gl::Context const*, gl::TextureType, int, int, int, int, bool)
gl::ValidMipLevel(gl::Context const*, gl::TextureType, int)
gl::ValidTexture2DDestinationTarget(gl::Context const*, gl::TextureTarget)
gl::ValidTexture2DTarget(gl::Context const*, gl::TextureType)
gl::ValidTexture3DDestinationTarget(gl::Context const*, gl::TextureTarget)
gl::ValidTexture3DTarget(gl::Context const*, gl::TextureType)
gl::ValidTextureTarget(gl::Context const*, gl::TextureType)
gl::ValidateActiveShaderProgram(gl::Context const*, gl::ProgramPipelineID, gl::ShaderProgramID)
gl::ValidateActiveTexture(gl::Context const*, unsigned int)
gl::ValidateAlphaFunc(gl::Context const*, gl::AlphaTestFunc, float)
gl::ValidateAlphaFuncx(gl::Context const*, gl::AlphaTestFunc, int)
gl::ValidateAttachShader(gl::Context const*, gl::ShaderProgramID, gl::ShaderProgramID)
gl::ValidateAttachmentTarget(gl::Context const*, unsigned int)
gl::ValidateBeginQuery(gl::Context const*, gl::QueryType, gl::QueryID)
gl::ValidateBeginQueryBase(gl::Context const*, gl::QueryType, gl::QueryID)
gl::ValidateBeginQueryEXT(gl::Context const*, gl::QueryType, gl::QueryID)
gl::ValidateBeginTransformFeedback(gl::Context const*, gl::PrimitiveMode)
gl::ValidateBindAttribLocation(gl::Context const*, gl::ShaderProgramID, unsigned int, char const*)
gl::ValidateBindBufferBase(gl::Context const*, gl::BufferBinding, unsigned int, gl::BufferID)
gl::ValidateBindBufferCommon(gl::Context const*, gl::BufferBinding, unsigned int, gl::BufferID, long, long)
gl::ValidateBindBufferRange(gl::Context const*, gl::BufferBinding, unsigned int, gl::BufferID, long, long)
gl::ValidateBindFragDataLocationEXT(gl::Context const*, gl::ShaderProgramID, unsigned int, char const*)
gl::ValidateBindFragDataLocationIndexedEXT(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, char const*)
gl::ValidateBindFramebuffer(gl::Context const*, unsigned int, gl::FramebufferID)
gl::ValidateBindFramebufferOES(gl::Context const*, unsigned int, gl::FramebufferID)
gl::ValidateBindImageTexture(gl::Context const*, unsigned int, gl::TextureID, int, unsigned char, int, unsigned int, unsigned int)
gl::ValidateBindProgramPipeline(gl::Context const*, gl::ProgramPipelineID)
gl::ValidateBindRenderbuffer(gl::Context const*, unsigned int, gl::RenderbufferID)
gl::ValidateBindRenderbufferOES(gl::Context const*, unsigned int, gl::RenderbufferID)
gl::ValidateBindSampler(gl::Context const*, unsigned int, gl::SamplerID)
gl::ValidateBindTransformFeedback(gl::Context const*, unsigned int, gl::TransformFeedbackID)
gl::ValidateBindUniformLocationCHROMIUM(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, char const*)
gl::ValidateBindVertexArray(gl::Context const*, gl::VertexArrayID)
gl::ValidateBindVertexArrayBase(gl::Context const*, gl::VertexArrayID)
gl::ValidateBindVertexArrayOES(gl::Context const*, gl::VertexArrayID)
gl::ValidateBindVertexBuffer(gl::Context const*, unsigned int, gl::BufferID, long, int)
gl::ValidateBlendBarrier(gl::Context const*)
gl::ValidateBlendColor(gl::Context const*, float, float, float, float)
gl::ValidateBlendEquation(gl::Context const*, unsigned int)
gl::ValidateBlendEquationSeparate(gl::Context const*, unsigned int, unsigned int)
gl::ValidateBlendEquationSeparatei(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendEquationSeparateiEXT(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendEquationSeparateiOES(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendEquationi(gl::Context const*, unsigned int, unsigned int)
gl::ValidateBlendEquationiEXT(gl::Context const*, unsigned int, unsigned int)
gl::ValidateBlendEquationiOES(gl::Context const*, unsigned int, unsigned int)
gl::ValidateBlendFunc(gl::Context const*, unsigned int, unsigned int)
gl::ValidateBlendFuncSeparate(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendFuncSeparatei(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendFuncSeparateiEXT(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendFuncSeparateiOES(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendFunci(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendFunciEXT(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateBlendFunciOES(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateBlitFramebuffer(gl::Context const*, int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::ValidateBlitFramebufferANGLE(gl::Context const*, int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::ValidateBlitFramebufferParameters(gl::Context const*, int, int, int, int, int, int, int, int, unsigned int, unsigned int)
gl::ValidateBufferData(gl::Context const*, gl::BufferBinding, long, void const*, gl::BufferUsage)
gl::ValidateBufferStorageMemEXT(gl::Context const*, gl::TextureType, long, gl::MemoryObjectID, unsigned long)
gl::ValidateBufferSubData(gl::Context const*, gl::BufferBinding, long, long, void const*)
gl::ValidateBuiltinVertexAttributeCommon(gl::Context const*, gl::ClientVertexArrayType, int, gl::VertexAttribType, int, void const*)
gl::ValidateCheckFramebufferStatus(gl::Context const*, unsigned int)
gl::ValidateCheckFramebufferStatusOES(gl::Context const*, unsigned int)
gl::ValidateClear(gl::Context const*, unsigned int)
gl::ValidateClear(gl::Context const*, unsigned int)::validComponentTypes
gl::ValidateClearBufferfi(gl::Context const*, unsigned int, int, float, int)
gl::ValidateClearBufferfv(gl::Context const*, unsigned int, int, float const*)
gl::ValidateClearBufferfv(gl::Context const*, unsigned int, int, float const*)::validComponentTypes
gl::ValidateClearBufferiv(gl::Context const*, unsigned int, int, int const*)
gl::ValidateClearBufferiv(gl::Context const*, unsigned int, int, int const*)::validComponentTypes
gl::ValidateClearBufferuiv(gl::Context const*, unsigned int, int, unsigned int const*)
gl::ValidateClearBufferuiv(gl::Context const*, unsigned int, int, unsigned int const*)::validComponentTypes
gl::ValidateClearColor(gl::Context const*, float, float, float, float)
gl::ValidateClearColorx(gl::Context const*, int, int, int, int)
gl::ValidateClearDepthf(gl::Context const*, float)
gl::ValidateClearDepthx(gl::Context const*, int)
gl::ValidateClearStencil(gl::Context const*, int)
gl::ValidateClientActiveTexture(gl::Context const*, unsigned int)
gl::ValidateClientWaitSync(gl::Context const*, __GLsync*, unsigned int, unsigned long)
gl::ValidateClipPlanef(gl::Context const*, unsigned int, float const*)
gl::ValidateClipPlanex(gl::Context const*, unsigned int, int const*)
gl::ValidateColor4f(gl::Context const*, float, float, float, float)
gl::ValidateColor4ub(gl::Context const*, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ValidateColor4x(gl::Context const*, int, int, int, int)
gl::ValidateColorMask(gl::Context const*, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ValidateColorMaski(gl::Context const*, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ValidateColorMaskiEXT(gl::Context const*, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ValidateColorMaskiOES(gl::Context const*, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
gl::ValidateColorPointer(gl::Context const*, int, gl::VertexAttribType, int, void const*)
gl::ValidateCompileShader(gl::Context const*, gl::ShaderProgramID)
gl::ValidateComponentTypeMasks(unsigned long, unsigned long, unsigned long, unsigned long)
gl::ValidateCompressedCopyTextureCHROMIUM(gl::Context const*, gl::TextureID, gl::TextureID)
gl::ValidateCompressedTexImage2D(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int, int, int, void const*)
gl::ValidateCompressedTexImage2DRobustANGLE(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int, int, int, int, void const*)
gl::ValidateCompressedTexImage3D(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int, int, int, int, void const*)
gl::ValidateCompressedTexImage3DOES(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int, int, int, int, void const*)
gl::ValidateCompressedTexImage3DRobustANGLE(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int, int, int, int, int, void const*)
gl::ValidateCompressedTexSubImage2D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, unsigned int, int, void const*)
gl::ValidateCompressedTexSubImage2DRobustANGLE(gl::Context const*, gl::TextureTarget, int, int, int, int, int, unsigned int, int, int, void const*)
gl::ValidateCompressedTexSubImage3D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, int, void const*)
gl::ValidateCompressedTexSubImage3DOES(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, int, void const*)
gl::ValidateCompressedTexSubImage3DRobustANGLE(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, int, int, void const*)
gl::ValidateCopyBufferSubData(gl::Context const*, gl::BufferBinding, gl::BufferBinding, long, long, long)
gl::ValidateCopyImageSubData(gl::Context const*, unsigned int, unsigned int, int, int, int, int, unsigned int, unsigned int, int, int, int, int, int, int, int)
gl::ValidateCopySubTexture3DANGLE(gl::Context const*, gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, int, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::ValidateCopySubTextureCHROMIUM(gl::Context const*, gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, int, int, int, int, int, unsigned char, unsigned char, unsigned char)
gl::ValidateCopyTexImage2D(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int, int, int, int)
gl::ValidateCopyTexImageParametersBase(gl::Context const*, gl::TextureTarget, int, unsigned int, bool, int, int, int, int, int, int, int, int, gl::Format*)
gl::ValidateCopyTexSubImage2D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int)
gl::ValidateCopyTexSubImage3D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, int)
gl::ValidateCopyTexSubImage3DOES(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, int)
gl::ValidateCopyTexture3DANGLE(gl::Context const*, gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::ValidateCopyTextureCHROMIUM(gl::Context const*, gl::TextureID, int, gl::TextureTarget, gl::TextureID, int, int, unsigned int, unsigned char, unsigned char, unsigned char)
gl::ValidateCoverageModulationCHROMIUM(gl::Context const*, unsigned int)
gl::ValidateCreateMemoryObjectsEXT(gl::Context const*, int, gl::MemoryObjectID const*)
gl::ValidateCreateProgram(gl::Context const*)
gl::ValidateCreateShader(gl::Context const*, gl::ShaderType)
gl::ValidateCreateShaderProgramv(gl::Context const*, gl::ShaderType, int, char const* const*)
gl::ValidateCullFace(gl::Context const*, gl::CullFaceMode)
gl::ValidateCurrentPaletteMatrixOES(gl::Context const*, unsigned int)
gl::ValidateDebugMessageCallback(gl::Context const*, void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::ValidateDebugMessageCallbackKHR(gl::Context const*, void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
gl::ValidateDebugMessageControl(gl::Context const*, unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
gl::ValidateDebugMessageControlKHR(gl::Context const*, unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
gl::ValidateDebugMessageInsert(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
gl::ValidateDebugMessageInsertKHR(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
gl::ValidateDeleteBuffers(gl::Context const*, int, gl::BufferID const*)
gl::ValidateDeleteFencesNV(gl::Context const*, int, gl::FenceNVID const*)
gl::ValidateDeleteFramebuffers(gl::Context const*, int, gl::FramebufferID const*)
gl::ValidateDeleteFramebuffersOES(gl::Context const*, int, gl::FramebufferID const*)
gl::ValidateDeleteMemoryObjectsEXT(gl::Context const*, int, gl::MemoryObjectID const*)
gl::ValidateDeleteProgram(gl::Context const*, gl::ShaderProgramID)
gl::ValidateDeleteProgramPipelines(gl::Context const*, int, gl::ProgramPipelineID const*)
gl::ValidateDeleteQueries(gl::Context const*, int, gl::QueryID const*)
gl::ValidateDeleteQueriesEXT(gl::Context const*, int, gl::QueryID const*)
gl::ValidateDeleteRenderbuffers(gl::Context const*, int, gl::RenderbufferID const*)
gl::ValidateDeleteRenderbuffersOES(gl::Context const*, int, gl::RenderbufferID const*)
gl::ValidateDeleteSamplers(gl::Context const*, int, gl::SamplerID const*)
gl::ValidateDeleteSemaphoresEXT(gl::Context const*, int, gl::SemaphoreID const*)
gl::ValidateDeleteShader(gl::Context const*, gl::ShaderProgramID)
gl::ValidateDeleteSync(gl::Context const*, __GLsync*)
gl::ValidateDeleteTextures(gl::Context const*, int, gl::TextureID const*)
gl::ValidateDeleteTransformFeedbacks(gl::Context const*, int, gl::TransformFeedbackID const*)
gl::ValidateDeleteVertexArrays(gl::Context const*, int, gl::VertexArrayID const*)
gl::ValidateDeleteVertexArraysOES(gl::Context const*, int, gl::VertexArrayID const*)
gl::ValidateDepthFunc(gl::Context const*, unsigned int)
gl::ValidateDepthMask(gl::Context const*, unsigned char)
gl::ValidateDepthRangef(gl::Context const*, float, float)
gl::ValidateDepthRangex(gl::Context const*, int, int)
gl::ValidateDetachShader(gl::Context const*, gl::ShaderProgramID, gl::ShaderProgramID)
gl::ValidateDisable(gl::Context const*, unsigned int)
gl::ValidateDisableClientState(gl::Context const*, gl::ClientVertexArrayType)
gl::ValidateDisableExtensionANGLE(gl::Context const*, char const*)
gl::ValidateDisableVertexAttribArray(gl::Context const*, unsigned int)
gl::ValidateDisablei(gl::Context const*, unsigned int, unsigned int)
gl::ValidateDisableiEXT(gl::Context const*, unsigned int, unsigned int)
gl::ValidateDisableiOES(gl::Context const*, unsigned int, unsigned int)
gl::ValidateDiscardFramebufferBase(gl::Context const*, unsigned int, int, unsigned int const*, bool)
gl::ValidateDiscardFramebufferEXT(gl::Context const*, unsigned int, int, unsigned int const*)
gl::ValidateDispatchCompute(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateDispatchComputeIndirect(gl::Context const*, long)
gl::ValidateDrawArraysIndirect(gl::Context const*, gl::PrimitiveMode, void const*)
gl::ValidateDrawArraysInstanced(gl::Context const*, gl::PrimitiveMode, int, int, int)
gl::ValidateDrawArraysInstancedANGLE(gl::Context const*, gl::PrimitiveMode, int, int, int)
gl::ValidateDrawArraysInstancedBase(gl::Context const*, gl::PrimitiveMode, int, int, int)
gl::ValidateDrawArraysInstancedBaseInstanceANGLE(gl::Context const*, gl::PrimitiveMode, int, int, int, unsigned int)
gl::ValidateDrawArraysInstancedEXT(gl::Context const*, gl::PrimitiveMode, int, int, int)
gl::ValidateDrawBuffers(gl::Context const*, int, unsigned int const*)
gl::ValidateDrawBuffersBase(gl::Context const*, int, unsigned int const*)
gl::ValidateDrawBuffersEXT(gl::Context const*, int, unsigned int const*)
gl::ValidateDrawElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawElementsBaseVertexEXT(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawElementsBaseVertexOES(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawElementsIndirect(gl::Context const*, gl::PrimitiveMode, gl::DrawElementsType, void const*)
gl::ValidateDrawElementsInstanced(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawElementsInstancedANGLE(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawElementsInstancedBase(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawElementsInstancedBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int)
gl::ValidateDrawElementsInstancedBaseVertexBaseInstanceANGLE(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int, unsigned int)
gl::ValidateDrawElementsInstancedBaseVertexEXT(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int)
gl::ValidateDrawElementsInstancedBaseVertexOES(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int)
gl::ValidateDrawElementsInstancedEXT(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawElementsStates(gl::Context const*)
gl::ValidateDrawIndirectBase(gl::Context const*, gl::PrimitiveMode, void const*)
gl::ValidateDrawInstancedANGLE(gl::Context const*)
gl::ValidateDrawRangeElements(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*)
gl::ValidateDrawRangeElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawRangeElementsBaseVertexEXT(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawRangeElementsBaseVertexOES(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*, int)
gl::ValidateDrawStates(gl::Context const*)
gl::ValidateDrawTexfOES(gl::Context const*, float, float, float, float, float)
gl::ValidateDrawTexfvOES(gl::Context const*, float const*)
gl::ValidateDrawTexiOES(gl::Context const*, int, int, int, int, int)
gl::ValidateDrawTexivOES(gl::Context const*, int const*)
gl::ValidateDrawTexsOES(gl::Context const*, short, short, short, short, short)
gl::ValidateDrawTexsvOES(gl::Context const*, short const*)
gl::ValidateDrawTexxOES(gl::Context const*, int, int, int, int, int)
gl::ValidateDrawTexxvOES(gl::Context const*, int const*)
gl::ValidateEGLImageTargetRenderbufferStorageOES(gl::Context const*, unsigned int, void*)
gl::ValidateEGLImageTargetTexture2DOES(gl::Context const*, gl::TextureType, void*)
gl::ValidateES2TexImageParametersBase(gl::Context const*, gl::TextureTarget, int, unsigned int, bool, bool, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateES2TexStorageParameters(gl::Context const*, gl::TextureType, int, unsigned int, int, int)
gl::ValidateES3CompressedFormatForTexture3D(gl::Context const*, unsigned int)
gl::ValidateES3CopyTexImage2DParameters(gl::Context const*, gl::TextureTarget, int, unsigned int, bool, int, int, int, int, int, int, int, int)
gl::ValidateES3CopyTexImageParametersBase(gl::Context const*, gl::TextureTarget, int, unsigned int, bool, int, int, int, int, int, int, int, int)
gl::ValidateES3TexImage2DParameters(gl::Context const*, gl::TextureTarget, int, unsigned int, bool, bool, int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateES3TexImageParametersBase(gl::Context const*, gl::TextureTarget, int, unsigned int, bool, bool, int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateES3TexStorage2DParameters(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int)
gl::ValidateES3TexStorage3DParameters(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int)
gl::ValidateES3TexStorageParametersBase(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int)
gl::ValidateEnable(gl::Context const*, unsigned int)
gl::ValidateEnableClientState(gl::Context const*, gl::ClientVertexArrayType)
gl::ValidateEnableVertexAttribArray(gl::Context const*, unsigned int)
gl::ValidateEnablei(gl::Context const*, unsigned int, unsigned int)
gl::ValidateEnableiEXT(gl::Context const*, unsigned int, unsigned int)
gl::ValidateEnableiOES(gl::Context const*, unsigned int, unsigned int)
gl::ValidateEndQuery(gl::Context const*, gl::QueryType)
gl::ValidateEndQueryBase(gl::Context const*, gl::QueryType)
gl::ValidateEndQueryEXT(gl::Context const*, gl::QueryType)
gl::ValidateEndTransformFeedback(gl::Context const*)
gl::ValidateFenceSync(gl::Context const*, unsigned int, unsigned int)
gl::ValidateFinish(gl::Context const*)
gl::ValidateFinishFenceNV(gl::Context const*, gl::FenceNVID)
gl::ValidateFlush(gl::Context const*)
gl::ValidateFlushMappedBufferRange(gl::Context const*, gl::BufferBinding, long, long)
gl::ValidateFlushMappedBufferRangeBase(gl::Context const*, gl::BufferBinding, long, long)
gl::ValidateFlushMappedBufferRangeEXT(gl::Context const*, gl::BufferBinding, long, long)
gl::ValidateFogCommon(gl::Context const*, unsigned int, float const*)
gl::ValidateFogf(gl::Context const*, unsigned int, float)
gl::ValidateFogfv(gl::Context const*, unsigned int, float const*)
gl::ValidateFogx(gl::Context const*, unsigned int, int)
gl::ValidateFogxv(gl::Context const*, unsigned int, int const*)
gl::ValidateFramebufferNotMultisampled(gl::Context const*, gl::Framebuffer const*, bool)
gl::ValidateFramebufferParameteri(gl::Context const*, unsigned int, unsigned int, int)
gl::ValidateFramebufferRenderbuffer(gl::Context const*, unsigned int, unsigned int, unsigned int, gl::RenderbufferID)
gl::ValidateFramebufferRenderbufferOES(gl::Context const*, unsigned int, unsigned int, unsigned int, gl::RenderbufferID)
gl::ValidateFramebufferRenderbufferParameters(gl::Context const*, unsigned int, unsigned int, unsigned int, gl::RenderbufferID)
gl::ValidateFramebufferTexture(gl::Context const*, unsigned int, unsigned int, gl::TextureID, int)
gl::ValidateFramebufferTexture2D(gl::Context const*, unsigned int, unsigned int, gl::TextureTarget, gl::TextureID, int)
gl::ValidateFramebufferTexture2DMultisampleEXT(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int, int, int)
gl::ValidateFramebufferTexture2DOES(gl::Context const*, unsigned int, unsigned int, gl::TextureTarget, gl::TextureID, int)
gl::ValidateFramebufferTexture3DOES(gl::Context const*, unsigned int, unsigned int, gl::TextureTarget, gl::TextureID, int, int)
gl::ValidateFramebufferTextureBase(gl::Context const*, unsigned int, unsigned int, gl::TextureID, int)
gl::ValidateFramebufferTextureEXT(gl::Context const*, unsigned int, unsigned int, gl::TextureID, int)
gl::ValidateFramebufferTextureLayer(gl::Context const*, unsigned int, unsigned int, gl::TextureID, int, int)
gl::ValidateFramebufferTextureMultiviewOVR(gl::Context const*, unsigned int, unsigned int, gl::TextureID, int, int, int)
gl::ValidateFrontFace(gl::Context const*, unsigned int)
gl::ValidateFrustumf(gl::Context const*, float, float, float, float, float, float)
gl::ValidateFrustumx(gl::Context const*, int, int, int, int, int, int)
gl::ValidateGenBuffers(gl::Context const*, int, gl::BufferID const*)
gl::ValidateGenFencesNV(gl::Context const*, int, gl::FenceNVID const*)
gl::ValidateGenFramebuffers(gl::Context const*, int, gl::FramebufferID const*)
gl::ValidateGenFramebuffersOES(gl::Context const*, int, gl::FramebufferID const*)
gl::ValidateGenOrDelete(gl::Context const*, int)
gl::ValidateGenProgramPipelines(gl::Context const*, int, gl::ProgramPipelineID const*)
gl::ValidateGenQueries(gl::Context const*, int, gl::QueryID const*)
gl::ValidateGenQueriesEXT(gl::Context const*, int, gl::QueryID const*)
gl::ValidateGenRenderbuffers(gl::Context const*, int, gl::RenderbufferID const*)
gl::ValidateGenRenderbuffersOES(gl::Context const*, int, gl::RenderbufferID const*)
gl::ValidateGenSamplers(gl::Context const*, int, gl::SamplerID const*)
gl::ValidateGenSemaphoresEXT(gl::Context const*, int, gl::SemaphoreID const*)
gl::ValidateGenTextures(gl::Context const*, int, gl::TextureID const*)
gl::ValidateGenTransformFeedbacks(gl::Context const*, int, gl::TransformFeedbackID const*)
gl::ValidateGenVertexArrays(gl::Context const*, int, gl::VertexArrayID const*)
gl::ValidateGenVertexArraysOES(gl::Context const*, int, gl::VertexArrayID const*)
gl::ValidateGenerateMipmap(gl::Context const*, gl::TextureType)
gl::ValidateGenerateMipmapOES(gl::Context const*, gl::TextureType)
gl::ValidateGetActiveAttrib(gl::Context const*, gl::ShaderProgramID, unsigned int, int, int const*, int const*, unsigned int const*, char const*)
gl::ValidateGetActiveUniform(gl::Context const*, gl::ShaderProgramID, unsigned int, int, int const*, int const*, unsigned int const*, char const*)
gl::ValidateGetActiveUniformBlockName(gl::Context const*, gl::ShaderProgramID, unsigned int, int, int const*, char const*)
gl::ValidateGetActiveUniformBlockiv(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, int const*)
gl::ValidateGetActiveUniformBlockivBase(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, int*)
gl::ValidateGetActiveUniformBlockivRobustANGLE(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetActiveUniformsiv(gl::Context const*, gl::ShaderProgramID, int, unsigned int const*, unsigned int, int const*)
gl::ValidateGetAttachedShaders(gl::Context const*, gl::ShaderProgramID, int, int const*, gl::ShaderProgramID const*)
gl::ValidateGetAttribLocation(gl::Context const*, gl::ShaderProgramID, char const*)
gl::ValidateGetBooleani_v(gl::Context const*, unsigned int, unsigned int, unsigned char const*)
gl::ValidateGetBooleani_vRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, unsigned char const*)
gl::ValidateGetBooleanv(gl::Context const*, unsigned int, unsigned char const*)
gl::ValidateGetBooleanvRobustANGLE(gl::Context const*, unsigned int, int, int const*, unsigned char const*)
gl::ValidateGetBufferParameterBase(gl::Context const*, gl::BufferBinding, unsigned int, bool, int*)
gl::ValidateGetBufferParameteri64v(gl::Context const*, gl::BufferBinding, unsigned int, long const*)
gl::ValidateGetBufferParameteri64vRobustANGLE(gl::Context const*, gl::BufferBinding, unsigned int, int, int const*, long const*)
gl::ValidateGetBufferParameteriv(gl::Context const*, gl::BufferBinding, unsigned int, int const*)
gl::ValidateGetBufferParameterivRobustANGLE(gl::Context const*, gl::BufferBinding, unsigned int, int, int const*, int const*)
gl::ValidateGetBufferPointerv(gl::Context const*, gl::BufferBinding, unsigned int, void* const*)
gl::ValidateGetBufferPointervBase(gl::Context const*, gl::BufferBinding, unsigned int, int*, void* const*)
gl::ValidateGetBufferPointervOES(gl::Context const*, gl::BufferBinding, unsigned int, void* const*)
gl::ValidateGetBufferPointervRobustANGLE(gl::Context const*, gl::BufferBinding, unsigned int, int, int const*, void* const*)
gl::ValidateGetClipPlanef(gl::Context const*, unsigned int, float const*)
gl::ValidateGetClipPlanex(gl::Context const*, unsigned int, int const*)
gl::ValidateGetDebugMessageLog(gl::Context const*, unsigned int, int, unsigned int const*, unsigned int const*, unsigned int const*, unsigned int const*, int const*, char const*)
gl::ValidateGetDebugMessageLogKHR(gl::Context const*, unsigned int, int, unsigned int const*, unsigned int const*, unsigned int const*, unsigned int const*, int const*, char const*)
gl::ValidateGetError(gl::Context const*)
gl::ValidateGetFenceivNV(gl::Context const*, gl::FenceNVID, unsigned int, int const*)
gl::ValidateGetFixedv(gl::Context const*, unsigned int, int const*)
gl::ValidateGetFloatv(gl::Context const*, unsigned int, float const*)
gl::ValidateGetFloatvRobustANGLE(gl::Context const*, unsigned int, int, int const*, float const*)
gl::ValidateGetFragDataIndexEXT(gl::Context const*, gl::ShaderProgramID, char const*)
gl::ValidateGetFragDataLocation(gl::Context const*, gl::ShaderProgramID, char const*)
gl::ValidateGetFramebufferAttachmentParameteriv(gl::Context const*, unsigned int, unsigned int, unsigned int, int const*)
gl::ValidateGetFramebufferAttachmentParameterivBase(gl::Context const*, unsigned int, unsigned int, unsigned int, int*)
gl::ValidateGetFramebufferAttachmentParameterivOES(gl::Context const*, unsigned int, unsigned int, unsigned int, int const*)
gl::ValidateGetFramebufferAttachmentParameterivRobustANGLE(gl::Context const*, unsigned int, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetFramebufferParameteriv(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetFramebufferParameterivRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetGraphicsResetStatus(gl::Context const*)
gl::ValidateGetGraphicsResetStatusEXT(gl::Context const*)
gl::ValidateGetInteger64i_v(gl::Context const*, unsigned int, unsigned int, long const*)
gl::ValidateGetInteger64i_vRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, long const*)
gl::ValidateGetInteger64v(gl::Context const*, unsigned int, long const*)
gl::ValidateGetInteger64vEXT(gl::Context const*, unsigned int, long const*)
gl::ValidateGetInteger64vRobustANGLE(gl::Context const*, unsigned int, int, int const*, long*)
gl::ValidateGetIntegeri_v(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetIntegeri_vRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetIntegerv(gl::Context const*, unsigned int, int const*)
gl::ValidateGetIntegervRobustANGLE(gl::Context const*, unsigned int, int, int const*, int const*)
gl::ValidateGetInternalFormativBase(gl::Context const*, unsigned int, unsigned int, unsigned int, int, int*)
gl::ValidateGetInternalformativ(gl::Context const*, unsigned int, unsigned int, unsigned int, int, int const*)
gl::ValidateGetInternalformativRobustANGLE(gl::Context const*, unsigned int, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetLightfv(gl::Context const*, unsigned int, gl::LightParameter, float const*)
gl::ValidateGetLightxv(gl::Context const*, unsigned int, gl::LightParameter, int const*)
gl::ValidateGetMaterialfv(gl::Context const*, unsigned int, gl::MaterialParameter, float const*)
gl::ValidateGetMaterialxv(gl::Context const*, unsigned int, gl::MaterialParameter, int const*)
gl::ValidateGetMemoryObjectParameterivEXT(gl::Context const*, gl::MemoryObjectID, unsigned int, int const*)
gl::ValidateGetMultisamplefv(gl::Context const*, unsigned int, unsigned int, float const*)
gl::ValidateGetMultisamplefvANGLE(gl::Context const*, unsigned int, unsigned int, float const*)
gl::ValidateGetMultisamplefvBase(gl::Context const*, unsigned int, unsigned int, float const*)
gl::ValidateGetMultisamplefvRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, float const*)
gl::ValidateGetObjectLabel(gl::Context const*, unsigned int, unsigned int, int, int const*, char const*)
gl::ValidateGetObjectLabelKHR(gl::Context const*, unsigned int, unsigned int, int, int const*, char const*)
gl::ValidateGetObjectPtrLabel(gl::Context const*, void const*, int, int const*, char const*)
gl::ValidateGetObjectPtrLabelKHR(gl::Context const*, void const*, int, int const*, char const*)
gl::ValidateGetPointerv(gl::Context const*, unsigned int, void* const*)
gl::ValidateGetPointervKHR(gl::Context const*, unsigned int, void* const*)
gl::ValidateGetPointervRobustANGLERobustANGLE(gl::Context const*, unsigned int, int, int const*, void* const*)
gl::ValidateGetProgramBinary(gl::Context const*, gl::ShaderProgramID, int, int const*, unsigned int const*, void const*)
gl::ValidateGetProgramBinaryBase(gl::Context const*, gl::ShaderProgramID, int, int const*, unsigned int const*, void const*)
gl::ValidateGetProgramBinaryOES(gl::Context const*, gl::ShaderProgramID, int, int const*, unsigned int const*, void const*)
gl::ValidateGetProgramInfoLog(gl::Context const*, gl::ShaderProgramID, int, int const*, char const*)
gl::ValidateGetProgramInterfaceiv(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, int const*)
gl::ValidateGetProgramInterfaceivRobustANGLE(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetProgramPipelineInfoLog(gl::Context const*, gl::ProgramPipelineID, int, int const*, char const*)
gl::ValidateGetProgramPipelineiv(gl::Context const*, gl::ProgramPipelineID, unsigned int, int const*)
gl::ValidateGetProgramResourceIndex(gl::Context const*, gl::ShaderProgramID, unsigned int, char const*)
gl::ValidateGetProgramResourceLocation(gl::Context const*, gl::ShaderProgramID, unsigned int, char const*)
gl::ValidateGetProgramResourceLocationIndexEXT(gl::Context const*, gl::ShaderProgramID, unsigned int, char const*)
gl::ValidateGetProgramResourceName(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, int, int const*, char const*)
gl::ValidateGetProgramResourceiv(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int, int, unsigned int const*, int, int const*, int const*)
gl::ValidateGetProgramiv(gl::Context const*, gl::ShaderProgramID, unsigned int, int const*)
gl::ValidateGetProgramivBase(gl::Context const*, gl::ShaderProgramID, unsigned int, int*)
gl::ValidateGetProgramivRobustANGLE(gl::Context const*, gl::ShaderProgramID, unsigned int, int, int const*, int const*)
gl::ValidateGetQueryObjectValueBase(gl::Context const*, gl::QueryID, unsigned int, int*)
gl::ValidateGetQueryObjecti64vEXT(gl::Context const*, gl::QueryID, unsigned int, long*)
gl::ValidateGetQueryObjecti64vRobustANGLE(gl::Context const*, gl::QueryID, unsigned int, int, int const*, long*)
gl::ValidateGetQueryObjectivEXT(gl::Context const*, gl::QueryID, unsigned int, int const*)
gl::ValidateGetQueryObjectivRobustANGLE(gl::Context const*, gl::QueryID, unsigned int, int, int const*, int const*)
gl::ValidateGetQueryObjectui64vEXT(gl::Context const*, gl::QueryID, unsigned int, unsigned long*)
gl::ValidateGetQueryObjectui64vRobustANGLE(gl::Context const*, gl::QueryID, unsigned int, int, int const*, unsigned long*)
gl::ValidateGetQueryObjectuiv(gl::Context const*, gl::QueryID, unsigned int, unsigned int const*)
gl::ValidateGetQueryObjectuivEXT(gl::Context const*, gl::QueryID, unsigned int, unsigned int const*)
gl::ValidateGetQueryObjectuivRobustANGLE(gl::Context const*, gl::QueryID, unsigned int, int, int const*, unsigned int const*)
gl::ValidateGetQueryiv(gl::Context const*, gl::QueryType, unsigned int, int const*)
gl::ValidateGetQueryivBase(gl::Context const*, gl::QueryType, unsigned int, int*)
gl::ValidateGetQueryivEXT(gl::Context const*, gl::QueryType, unsigned int, int const*)
gl::ValidateGetQueryivRobustANGLE(gl::Context const*, gl::QueryType, unsigned int, int, int const*, int const*)
gl::ValidateGetRenderbufferImageANGLE(gl::Context const*, unsigned int, unsigned int, unsigned int, void const*)
gl::ValidateGetRenderbufferParameteriv(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetRenderbufferParameterivBase(gl::Context const*, unsigned int, unsigned int, int*)
gl::ValidateGetRenderbufferParameterivOES(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetRenderbufferParameterivRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetSamplerParameterBase(gl::Context const*, gl::SamplerID, unsigned int, int*)
gl::ValidateGetSamplerParameterIiv(gl::Context const*, gl::SamplerID, unsigned int, int const*)
gl::ValidateGetSamplerParameterIivOES(gl::Context const*, gl::SamplerID, unsigned int, int const*)
gl::ValidateGetSamplerParameterIivRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, int const*, int const*)
gl::ValidateGetSamplerParameterIuiv(gl::Context const*, gl::SamplerID, unsigned int, unsigned int const*)
gl::ValidateGetSamplerParameterIuivOES(gl::Context const*, gl::SamplerID, unsigned int, unsigned int const*)
gl::ValidateGetSamplerParameterIuivRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, int const*, unsigned int const*)
gl::ValidateGetSamplerParameterfv(gl::Context const*, gl::SamplerID, unsigned int, float const*)
gl::ValidateGetSamplerParameterfvRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, int const*, float const*)
gl::ValidateGetSamplerParameteriv(gl::Context const*, gl::SamplerID, unsigned int, int const*)
gl::ValidateGetSamplerParameterivRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, int const*, int const*)
gl::ValidateGetSemaphoreParameterui64vEXT(gl::Context const*, gl::SemaphoreID, unsigned int, unsigned long const*)
gl::ValidateGetShaderInfoLog(gl::Context const*, gl::ShaderProgramID, int, int const*, char const*)
gl::ValidateGetShaderPrecisionFormat(gl::Context const*, unsigned int, unsigned int, int const*, int const*)
gl::ValidateGetShaderSource(gl::Context const*, gl::ShaderProgramID, int, int const*, char const*)
gl::ValidateGetShaderiv(gl::Context const*, gl::ShaderProgramID, unsigned int, int const*)
gl::ValidateGetShaderivBase(gl::Context const*, gl::ShaderProgramID, unsigned int, int*)
gl::ValidateGetShaderivRobustANGLE(gl::Context const*, gl::ShaderProgramID, unsigned int, int, int const*, int const*)
gl::ValidateGetString(gl::Context const*, unsigned int)
gl::ValidateGetStringi(gl::Context const*, unsigned int, unsigned int)
gl::ValidateGetSynciv(gl::Context const*, __GLsync*, unsigned int, int, int const*, int const*)
gl::ValidateGetTexEnvCommon(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter)
gl::ValidateGetTexEnvfv(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, float const*)
gl::ValidateGetTexEnviv(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, int const*)
gl::ValidateGetTexEnvxv(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, int const*)
gl::ValidateGetTexGenfvOES(gl::Context const*, unsigned int, unsigned int, float const*)
gl::ValidateGetTexGenivOES(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetTexGenxvOES(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetTexImageANGLE(gl::Context const*, gl::TextureTarget, int, unsigned int, unsigned int, void const*)
gl::ValidateGetTexLevelParameterBase(gl::Context const*, gl::TextureTarget, int, unsigned int, int*)
gl::ValidateGetTexLevelParameterfv(gl::Context const*, gl::TextureTarget, int, unsigned int, float const*)
gl::ValidateGetTexLevelParameterfvANGLE(gl::Context const*, gl::TextureTarget, int, unsigned int, float const*)
gl::ValidateGetTexLevelParameterfvRobustANGLE(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int const*, float const*)
gl::ValidateGetTexLevelParameteriv(gl::Context const*, gl::TextureTarget, int, unsigned int, int const*)
gl::ValidateGetTexLevelParameterivANGLE(gl::Context const*, gl::TextureTarget, int, unsigned int, int const*)
gl::ValidateGetTexLevelParameterivRobustANGLE(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int const*, int const*)
gl::ValidateGetTexParameterBase(gl::Context const*, gl::TextureType, unsigned int, int*)
gl::ValidateGetTexParameterIiv(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateGetTexParameterIivOES(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateGetTexParameterIivRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, int const*, int const*)
gl::ValidateGetTexParameterIuiv(gl::Context const*, gl::TextureType, unsigned int, unsigned int const*)
gl::ValidateGetTexParameterIuivOES(gl::Context const*, gl::TextureType, unsigned int, unsigned int const*)
gl::ValidateGetTexParameterIuivRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, int const*, unsigned int const*)
gl::ValidateGetTexParameterfv(gl::Context const*, gl::TextureType, unsigned int, float const*)
gl::ValidateGetTexParameterfvRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, int const*, float const*)
gl::ValidateGetTexParameteriv(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateGetTexParameterivRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, int const*, int const*)
gl::ValidateGetTexParameterxv(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateGetTransformFeedbackVarying(gl::Context const*, gl::ShaderProgramID, unsigned int, int, int const*, int const*, unsigned int const*, char const*)
gl::ValidateGetTranslatedShaderSourceANGLE(gl::Context const*, gl::ShaderProgramID, int, int const*, char const*)
gl::ValidateGetUniformBase(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation)
gl::ValidateGetUniformBlockIndex(gl::Context const*, gl::ShaderProgramID, char const*)
gl::ValidateGetUniformIndices(gl::Context const*, gl::ShaderProgramID, int, char const* const*, unsigned int const*)
gl::ValidateGetUniformLocation(gl::Context const*, gl::ShaderProgramID, char const*)
gl::ValidateGetUniformfv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, float const*)
gl::ValidateGetUniformfvRobustANGLE(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*, float const*)
gl::ValidateGetUniformiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int const*)
gl::ValidateGetUniformivRobustANGLE(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*, int const*)
gl::ValidateGetUniformuiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, unsigned int const*)
gl::ValidateGetUniformuivRobustANGLE(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*, unsigned int const*)
gl::ValidateGetUnsignedBytei_vEXT(gl::Context const*, unsigned int, unsigned int, unsigned char const*)
gl::ValidateGetUnsignedBytevEXT(gl::Context const*, unsigned int, unsigned char const*)
gl::ValidateGetVertexAttribBase(gl::Context const*, unsigned int, unsigned int, int*, bool, bool)
gl::ValidateGetVertexAttribIiv(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetVertexAttribIivRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetVertexAttribIuiv(gl::Context const*, unsigned int, unsigned int, unsigned int const*)
gl::ValidateGetVertexAttribIuivRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, unsigned int const*)
gl::ValidateGetVertexAttribPointerv(gl::Context const*, unsigned int, unsigned int, void* const*)
gl::ValidateGetVertexAttribPointervRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, void* const*)
gl::ValidateGetVertexAttribfv(gl::Context const*, unsigned int, unsigned int, float const*)
gl::ValidateGetVertexAttribfvRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, float const*)
gl::ValidateGetVertexAttribiv(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateGetVertexAttribivRobustANGLE(gl::Context const*, unsigned int, unsigned int, int, int const*, int const*)
gl::ValidateGetnUniformfv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::ValidateGetnUniformfvEXT(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::ValidateGetnUniformfvRobustANGLE(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*, float const*)
gl::ValidateGetnUniformiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::ValidateGetnUniformivEXT(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::ValidateGetnUniformivRobustANGLE(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*, int const*)
gl::ValidateGetnUniformuiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::ValidateGetnUniformuivRobustANGLE(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*, unsigned int const*)
gl::ValidateHint(gl::Context const*, unsigned int, unsigned int)
gl::ValidateImportMemoryFdEXT(gl::Context const*, gl::MemoryObjectID, unsigned long, gl::HandleType, int)
gl::ValidateImportMemoryZirconHandleANGLE(gl::Context const*, gl::MemoryObjectID, unsigned long, gl::HandleType, unsigned int)
gl::ValidateImportSemaphoreFdEXT(gl::Context const*, gl::SemaphoreID, gl::HandleType, int)
gl::ValidateImportSemaphoreZirconHandleANGLE(gl::Context const*, gl::SemaphoreID, gl::HandleType, unsigned int)
gl::ValidateIndexedStateQuery(gl::Context const*, unsigned int, unsigned int, int*)
gl::ValidateInsertEventMarkerEXT(gl::Context const*, int, char const*)
gl::ValidateInvalidateFramebuffer(gl::Context const*, unsigned int, int, unsigned int const*)
gl::ValidateInvalidateSubFramebuffer(gl::Context const*, unsigned int, int, unsigned int const*, int, int, int, int)
gl::ValidateInvalidateTextureANGLE(gl::Context const*, gl::TextureType)
gl::ValidateIsBuffer(gl::Context const*, gl::BufferID)
gl::ValidateIsEnabled(gl::Context const*, unsigned int)
gl::ValidateIsEnabledi(gl::Context const*, unsigned int, unsigned int)
gl::ValidateIsEnablediEXT(gl::Context const*, unsigned int, unsigned int)
gl::ValidateIsEnablediOES(gl::Context const*, unsigned int, unsigned int)
gl::ValidateIsFenceNV(gl::Context const*, gl::FenceNVID)
gl::ValidateIsFramebuffer(gl::Context const*, gl::FramebufferID)
gl::ValidateIsFramebufferOES(gl::Context const*, gl::FramebufferID)
gl::ValidateIsMemoryObjectEXT(gl::Context const*, gl::MemoryObjectID)
gl::ValidateIsProgram(gl::Context const*, gl::ShaderProgramID)
gl::ValidateIsProgramPipeline(gl::Context const*, gl::ProgramPipelineID)
gl::ValidateIsQuery(gl::Context const*, gl::QueryID)
gl::ValidateIsQueryEXT(gl::Context const*, gl::QueryID)
gl::ValidateIsRenderbuffer(gl::Context const*, gl::RenderbufferID)
gl::ValidateIsRenderbufferOES(gl::Context const*, gl::RenderbufferID)
gl::ValidateIsSampler(gl::Context const*, gl::SamplerID)
gl::ValidateIsSemaphoreEXT(gl::Context const*, gl::SemaphoreID)
gl::ValidateIsShader(gl::Context const*, gl::ShaderProgramID)
gl::ValidateIsSync(gl::Context const*, __GLsync*)
gl::ValidateIsTexture(gl::Context const*, gl::TextureID)
gl::ValidateIsTransformFeedback(gl::Context const*, gl::TransformFeedbackID)
gl::ValidateIsVertexArray(gl::Context const*, gl::VertexArrayID)
gl::ValidateIsVertexArrayOES(gl::Context const*, gl::VertexArrayID)
gl::ValidateLightCommon(gl::Context const*, unsigned int, gl::LightParameter, float const*)
gl::ValidateLightModelf(gl::Context const*, unsigned int, float)
gl::ValidateLightModelfv(gl::Context const*, unsigned int, float const*)
gl::ValidateLightModelx(gl::Context const*, unsigned int, int)
gl::ValidateLightModelxv(gl::Context const*, unsigned int, int const*)
gl::ValidateLightf(gl::Context const*, unsigned int, gl::LightParameter, float)
gl::ValidateLightfv(gl::Context const*, unsigned int, gl::LightParameter, float const*)
gl::ValidateLightx(gl::Context const*, unsigned int, gl::LightParameter, int)
gl::ValidateLightxv(gl::Context const*, unsigned int, gl::LightParameter, int const*)
gl::ValidateLineWidth(gl::Context const*, float)
gl::ValidateLineWidthx(gl::Context const*, int)
gl::ValidateLinkProgram(gl::Context const*, gl::ShaderProgramID)
gl::ValidateLoadIdentity(gl::Context const*)
gl::ValidateLoadMatrixf(gl::Context const*, float const*)
gl::ValidateLoadMatrixx(gl::Context const*, int const*)
gl::ValidateLoadPaletteFromModelViewMatrixOES(gl::Context const*)
gl::ValidateLogicOp(gl::Context const*, gl::LogicalOperation)
gl::ValidateLoseContextCHROMIUM(gl::Context const*, gl::GraphicsResetStatus, gl::GraphicsResetStatus)
gl::ValidateMapBufferBase(gl::Context const*, gl::BufferBinding)
gl::ValidateMapBufferOES(gl::Context const*, gl::BufferBinding, unsigned int)
gl::ValidateMapBufferRange(gl::Context const*, gl::BufferBinding, long, long, unsigned int)
gl::ValidateMapBufferRangeBase(gl::Context const*, gl::BufferBinding, long, long, unsigned int)
gl::ValidateMapBufferRangeEXT(gl::Context const*, gl::BufferBinding, long, long, unsigned int)
gl::ValidateMaterialSetting(gl::Context const*, unsigned int, gl::MaterialParameter, float const*)
gl::ValidateMaterialf(gl::Context const*, unsigned int, gl::MaterialParameter, float)
gl::ValidateMaterialfv(gl::Context const*, unsigned int, gl::MaterialParameter, float const*)
gl::ValidateMaterialx(gl::Context const*, unsigned int, gl::MaterialParameter, int)
gl::ValidateMaterialxv(gl::Context const*, unsigned int, gl::MaterialParameter, int const*)
gl::ValidateMatrixIndexPointerOES(gl::Context const*, int, unsigned int, int, void const*)
gl::ValidateMatrixMode(gl::Context const*, gl::MatrixType)
gl::ValidateMaxShaderCompilerThreadsKHR(gl::Context const*, unsigned int)
gl::ValidateMemoryBarrier(gl::Context const*, unsigned int)
gl::ValidateMemoryBarrierByRegion(gl::Context const*, unsigned int)
gl::ValidateMemoryObjectParameterivEXT(gl::Context const*, gl::MemoryObjectID, unsigned int, int const*)
gl::ValidateMinSampleShading(gl::Context const*, float)
gl::ValidateMultMatrixf(gl::Context const*, float const*)
gl::ValidateMultMatrixx(gl::Context const*, int const*)
gl::ValidateMultiDrawArraysANGLE(gl::Context const*, gl::PrimitiveMode, int const*, int const*, int)
gl::ValidateMultiDrawArraysInstancedANGLE(gl::Context const*, gl::PrimitiveMode, int const*, int const*, int const*, int)
gl::ValidateMultiDrawArraysInstancedBaseInstanceANGLE(gl::Context const*, gl::PrimitiveMode, int const*, int const*, int const*, unsigned int const*, int)
gl::ValidateMultiDrawElementsANGLE(gl::Context const*, gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int)
gl::ValidateMultiDrawElementsBaseVertexEXT(gl::Context const*, gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int, int const*)
gl::ValidateMultiDrawElementsInstancedANGLE(gl::Context const*, gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int const*, int)
gl::ValidateMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE(gl::Context const*, gl::PrimitiveMode, int const*, gl::DrawElementsType, void const* const*, int const*, int const*, unsigned int const*, int)
gl::ValidateMultiTexCoord4f(gl::Context const*, unsigned int, float, float, float, float)
gl::ValidateMultiTexCoord4x(gl::Context const*, unsigned int, int, int, int, int)
gl::ValidateMultitextureUnit(gl::Context const*, unsigned int)
gl::ValidateNormal3f(gl::Context const*, float, float, float)
gl::ValidateNormal3x(gl::Context const*, int, int, int)
gl::ValidateNormalPointer(gl::Context const*, gl::VertexAttribType, int, void const*)
gl::ValidateObjectIdentifierAndName(gl::Context const*, unsigned int, unsigned int)
gl::ValidateObjectLabel(gl::Context const*, unsigned int, unsigned int, int, char const*)
gl::ValidateObjectLabelKHR(gl::Context const*, unsigned int, unsigned int, int, char const*)
gl::ValidateObjectPtrLabel(gl::Context const*, void const*, int, char const*)
gl::ValidateObjectPtrLabelKHR(gl::Context const*, void const*, int, char const*)
gl::ValidateOrthof(gl::Context const*, float, float, float, float, float, float)
gl::ValidateOrthox(gl::Context const*, int, int, int, int, int, int)
gl::ValidatePatchParameteri(gl::Context const*, unsigned int, int)
gl::ValidatePauseTransformFeedback(gl::Context const*)
gl::ValidatePixelPack(gl::Context const*, unsigned int, unsigned int, int, int, int, int, int, int*, void const*)
gl::ValidatePixelStorei(gl::Context const*, unsigned int, int)
gl::ValidatePointParameterCommon(gl::Context const*, gl::PointParameter, float const*)
gl::ValidatePointParameterf(gl::Context const*, gl::PointParameter, float)
gl::ValidatePointParameterfv(gl::Context const*, gl::PointParameter, float const*)
gl::ValidatePointParameterx(gl::Context const*, gl::PointParameter, int)
gl::ValidatePointParameterxv(gl::Context const*, gl::PointParameter, int const*)
gl::ValidatePointSize(gl::Context const*, float)
gl::ValidatePointSizePointerOES(gl::Context const*, gl::VertexAttribType, int, void const*)
gl::ValidatePointSizex(gl::Context const*, int)
gl::ValidatePolygonOffset(gl::Context const*, float, float)
gl::ValidatePolygonOffsetx(gl::Context const*, int, int)
gl::ValidatePopDebugGroup(gl::Context const*)
gl::ValidatePopDebugGroupKHR(gl::Context const*)
gl::ValidatePopGroupMarkerEXT(gl::Context const*)
gl::ValidatePopMatrix(gl::Context const*)
gl::ValidatePrimitiveBoundingBox(gl::Context const*, float, float, float, float, float, float, float, float)
gl::ValidateProgram(unsigned int)
gl::ValidateProgramBinary(gl::Context const*, gl::ShaderProgramID, unsigned int, void const*, int)
gl::ValidateProgramBinaryBase(gl::Context const*, gl::ShaderProgramID, unsigned int, void const*, int)
gl::ValidateProgramBinaryOES(gl::Context const*, gl::ShaderProgramID, unsigned int, void const*, int)
gl::ValidateProgramContextANGLE(void*, unsigned int)
gl::ValidateProgramDrawStates(gl::State const&, gl::Extensions const&, gl::Program*)
gl::ValidateProgramParameteri(gl::Context const*, gl::ShaderProgramID, unsigned int, int)
gl::ValidateProgramPipeline(unsigned int)
gl::ValidateProgramPipelineAttachedPrograms(gl::ProgramPipeline*)
gl::ValidateProgramPipelineContextANGLE(void*, unsigned int)
gl::ValidateProgramPipelineDrawStates(gl::State const&, gl::Extensions const&, gl::ProgramPipeline*)
gl::ValidateProgramUniform1f(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, float)
gl::ValidateProgramUniform1fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::ValidateProgramUniform1i(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int)
gl::ValidateProgramUniform1iv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::ValidateProgramUniform1ui(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, unsigned int)
gl::ValidateProgramUniform1uiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::ValidateProgramUniform2f(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, float, float)
gl::ValidateProgramUniform2fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::ValidateProgramUniform2i(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int)
gl::ValidateProgramUniform2iv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::ValidateProgramUniform2ui(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, unsigned int, unsigned int)
gl::ValidateProgramUniform2uiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::ValidateProgramUniform3f(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, float, float, float)
gl::ValidateProgramUniform3fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::ValidateProgramUniform3i(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int, int)
gl::ValidateProgramUniform3iv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::ValidateProgramUniform3ui(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, unsigned int, unsigned int, unsigned int)
gl::ValidateProgramUniform3uiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::ValidateProgramUniform4f(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, float, float, float, float)
gl::ValidateProgramUniform4fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, float const*)
gl::ValidateProgramUniform4i(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int, int, int)
gl::ValidateProgramUniform4iv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int const*)
gl::ValidateProgramUniform4ui(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateProgramUniform4uiv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned int const*)
gl::ValidateProgramUniformMatrix2fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix2x3fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix2x4fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix3fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix3x2fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix3x4fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix4fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix4x2fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProgramUniformMatrix4x3fv(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateProvokingVertexANGLE(gl::Context const*, gl::ProvokingVertexConvention)
gl::ValidatePushDebugGroup(gl::Context const*, unsigned int, unsigned int, int, char const*)
gl::ValidatePushDebugGroupKHR(gl::Context const*, unsigned int, unsigned int, int, char const*)
gl::ValidatePushGroupMarkerEXT(gl::Context const*, int, char const*)
gl::ValidatePushMatrix(gl::Context const*)
gl::ValidateQueryCounterEXT(gl::Context const*, gl::QueryID, gl::QueryType)
gl::ValidateQueryMatrixxOES(gl::Context const*, int const*, int const*)
gl::ValidateReadBuffer(gl::Context const*, unsigned int)
gl::ValidateReadPixels(gl::Context const*, int, int, int, int, unsigned int, unsigned int, void const*)
gl::ValidateReadPixelsBase(gl::Context const*, int, int, int, int, unsigned int, unsigned int, int, int*, int*, int*, void const*)
gl::ValidateReadPixelsRobustANGLE(gl::Context const*, int, int, int, int, unsigned int, unsigned int, int, int const*, int const*, int const*, void const*)
gl::ValidateReadnPixels(gl::Context const*, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateReadnPixelsEXT(gl::Context const*, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateReadnPixelsRobustANGLE(gl::Context const*, int, int, int, int, unsigned int, unsigned int, int, int const*, int const*, int const*, void const*)
gl::ValidateReleaseShaderCompiler(gl::Context const*)
gl::ValidateRenderbufferStorage(gl::Context const*, unsigned int, unsigned int, int, int)
gl::ValidateRenderbufferStorageMultisample(gl::Context const*, unsigned int, int, unsigned int, int, int)
gl::ValidateRenderbufferStorageMultisampleANGLE(gl::Context const*, unsigned int, int, unsigned int, int, int)
gl::ValidateRenderbufferStorageMultisampleEXT(gl::Context const*, unsigned int, int, unsigned int, int, int)
gl::ValidateRenderbufferStorageOES(gl::Context const*, unsigned int, unsigned int, int, int)
gl::ValidateRenderbufferStorageParametersBase(gl::Context const*, unsigned int, int, unsigned int, int, int)
gl::ValidateRequestExtensionANGLE(gl::Context const*, char const*)
gl::ValidateResumeTransformFeedback(gl::Context const*)
gl::ValidateRobustBufferSize(gl::Context const*, int, int)
gl::ValidateRobustCompressedTexImageBase(gl::Context const*, int, int)
gl::ValidateRobustEntryPoint(gl::Context const*, int)
gl::ValidateRotatef(gl::Context const*, float, float, float, float)
gl::ValidateRotatex(gl::Context const*, int, int, int, int)
gl::ValidateSampleCoverage(gl::Context const*, float, unsigned char)
gl::ValidateSampleCoveragex(gl::Context const*, int, unsigned char)
gl::ValidateSampleMaski(gl::Context const*, unsigned int, unsigned int)
gl::ValidateSampleMaskiANGLE(gl::Context const*, unsigned int, unsigned int)
gl::ValidateSampleMaskiBase(gl::Context const*, unsigned int, unsigned int)
gl::ValidateSamplerParameterIiv(gl::Context const*, gl::SamplerID, unsigned int, int const*)
gl::ValidateSamplerParameterIivOES(gl::Context const*, gl::SamplerID, unsigned int, int const*)
gl::ValidateSamplerParameterIivRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, int const*)
gl::ValidateSamplerParameterIuiv(gl::Context const*, gl::SamplerID, unsigned int, unsigned int const*)
gl::ValidateSamplerParameterIuivOES(gl::Context const*, gl::SamplerID, unsigned int, unsigned int const*)
gl::ValidateSamplerParameterIuivRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, unsigned int const*)
gl::ValidateSamplerParameterf(gl::Context const*, gl::SamplerID, unsigned int, float)
gl::ValidateSamplerParameterfv(gl::Context const*, gl::SamplerID, unsigned int, float const*)
gl::ValidateSamplerParameterfvRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, float const*)
gl::ValidateSamplerParameteri(gl::Context const*, gl::SamplerID, unsigned int, int)
gl::ValidateSamplerParameteriv(gl::Context const*, gl::SamplerID, unsigned int, int const*)
gl::ValidateSamplerParameterivRobustANGLE(gl::Context const*, gl::SamplerID, unsigned int, int, int const*)
gl::ValidateScalef(gl::Context const*, float, float, float)
gl::ValidateScalex(gl::Context const*, int, int, int)
gl::ValidateScissor(gl::Context const*, int, int, int, int)
gl::ValidateSemaphoreParameterui64vEXT(gl::Context const*, gl::SemaphoreID, unsigned int, unsigned long const*)
gl::ValidateSetFenceNV(gl::Context const*, gl::FenceNVID, unsigned int)
gl::ValidateShadeModel(gl::Context const*, gl::ShadingModel)
gl::ValidateShaderBinary(gl::Context const*, int, gl::ShaderProgramID const*, unsigned int, void const*, int)
gl::ValidateShaderSource(gl::Context const*, gl::ShaderProgramID, int, char const* const*, int const*)
gl::ValidateSignalSemaphoreEXT(gl::Context const*, gl::SemaphoreID, unsigned int, gl::BufferID const*, unsigned int, gl::TextureID const*, unsigned int const*)
gl::ValidateSizedGetUniform(gl::Context const*, gl::ShaderProgramID, gl::UniformLocation, int, int*)
gl::ValidateStateQuery(gl::Context const*, unsigned int, unsigned int*, unsigned int*)
gl::ValidateStencilFunc(gl::Context const*, unsigned int, int, unsigned int)
gl::ValidateStencilFuncSeparate(gl::Context const*, unsigned int, unsigned int, int, unsigned int)
gl::ValidateStencilMask(gl::Context const*, unsigned int)
gl::ValidateStencilMaskSeparate(gl::Context const*, unsigned int, unsigned int)
gl::ValidateStencilOp(gl::Context const*, unsigned int, unsigned int, unsigned int)
gl::ValidateStencilOpSeparate(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateTestFenceNV(gl::Context const*, gl::FenceNVID)
gl::ValidateTexBuffer(gl::Context const*, unsigned int, unsigned int, gl::BufferID)
gl::ValidateTexBufferRange(gl::Context const*, unsigned int, unsigned int, gl::BufferID, long, long)
gl::ValidateTexCoordPointer(gl::Context const*, int, gl::VertexAttribType, int, void const*)
gl::ValidateTexEnvCommon(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, float const*)
gl::ValidateTexEnvf(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, float)
gl::ValidateTexEnvfv(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, float const*)
gl::ValidateTexEnvi(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, int)
gl::ValidateTexEnviv(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, int const*)
gl::ValidateTexEnvx(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, int)
gl::ValidateTexEnvxv(gl::Context const*, gl::TextureEnvTarget, gl::TextureEnvParameter, int const*)
gl::ValidateTexGenfOES(gl::Context const*, unsigned int, unsigned int, float)
gl::ValidateTexGenfvOES(gl::Context const*, unsigned int, unsigned int, float const*)
gl::ValidateTexGeniOES(gl::Context const*, unsigned int, unsigned int, int)
gl::ValidateTexGenivOES(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateTexGenxOES(gl::Context const*, unsigned int, unsigned int, int)
gl::ValidateTexGenxvOES(gl::Context const*, unsigned int, unsigned int, int const*)
gl::ValidateTexImage2D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::ValidateTexImage2DExternalANGLE(gl::Context const*, gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int)
gl::ValidateTexImage2DRobustANGLE(gl::Context const*, gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateTexImage3D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::ValidateTexImage3DOES(gl::Context const*, gl::TextureTarget, int, unsigned int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::ValidateTexImage3DRobustANGLE(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateTexParameterIiv(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateTexParameterIivOES(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateTexParameterIivRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, int const*)
gl::ValidateTexParameterIuiv(gl::Context const*, gl::TextureType, unsigned int, unsigned int const*)
gl::ValidateTexParameterIuivOES(gl::Context const*, gl::TextureType, unsigned int, unsigned int const*)
gl::ValidateTexParameterIuivRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, unsigned int const*)
gl::ValidateTexParameterf(gl::Context const*, gl::TextureType, unsigned int, float)
gl::ValidateTexParameterfv(gl::Context const*, gl::TextureType, unsigned int, float const*)
gl::ValidateTexParameterfvRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, float const*)
gl::ValidateTexParameteri(gl::Context const*, gl::TextureType, unsigned int, int)
gl::ValidateTexParameteriv(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateTexParameterivRobustANGLE(gl::Context const*, gl::TextureType, unsigned int, int, int const*)
gl::ValidateTexParameterx(gl::Context const*, gl::TextureType, unsigned int, int)
gl::ValidateTexParameterxv(gl::Context const*, gl::TextureType, unsigned int, int const*)
gl::ValidateTexStorage1DEXT(gl::Context const*, unsigned int, int, unsigned int, int)
gl::ValidateTexStorage2D(gl::Context const*, gl::TextureType, int, unsigned int, int, int)
gl::ValidateTexStorage2DEXT(gl::Context const*, gl::TextureType, int, unsigned int, int, int)
gl::ValidateTexStorage2DMultisample(gl::Context const*, gl::TextureType, int, unsigned int, int, int, unsigned char)
gl::ValidateTexStorage2DMultisampleANGLE(gl::Context const*, gl::TextureType, int, unsigned int, int, int, unsigned char)
gl::ValidateTexStorage2DMultisampleBase(gl::Context const*, gl::TextureType, int, int, int, int)
gl::ValidateTexStorage3D(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int)
gl::ValidateTexStorage3DEXT(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int)
gl::ValidateTexStorage3DMultisample(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int, unsigned char)
gl::ValidateTexStorage3DMultisampleOES(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int, unsigned char)
gl::ValidateTexStorageMem2DEXT(gl::Context const*, gl::TextureType, int, unsigned int, int, int, gl::MemoryObjectID, unsigned long)
gl::ValidateTexStorageMem2DMultisampleEXT(gl::Context const*, gl::TextureType, int, unsigned int, int, int, unsigned char, gl::MemoryObjectID, unsigned long)
gl::ValidateTexStorageMem3DEXT(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int, gl::MemoryObjectID, unsigned long)
gl::ValidateTexStorageMem3DMultisampleEXT(gl::Context const*, gl::TextureType, int, unsigned int, int, int, int, unsigned char, gl::MemoryObjectID, unsigned long)
gl::ValidateTexStorageMultisample(gl::Context const*, gl::TextureType, int, int, int, int)
gl::ValidateTexSubImage2D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::ValidateTexSubImage2DRobustANGLE(gl::Context const*, gl::TextureTarget, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateTexSubImage3D(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::ValidateTexSubImage3DOES(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
gl::ValidateTexSubImage3DRobustANGLE(gl::Context const*, gl::TextureTarget, int, int, int, int, int, int, int, unsigned int, unsigned int, int, void const*)
gl::ValidateTransformFeedbackPrimitiveMode(gl::Context const*, gl::PrimitiveMode, gl::PrimitiveMode)
gl::ValidateTransformFeedbackVaryings(gl::Context const*, gl::ShaderProgramID, int, char const* const*, unsigned int)
gl::ValidateTranslatef(gl::Context const*, float, float, float)
gl::ValidateTranslatex(gl::Context const*, int, int, int)
gl::ValidateUniform(gl::Context const*, unsigned int, gl::UniformLocation, int)
gl::ValidateUniform1f(gl::Context const*, gl::UniformLocation, float)
gl::ValidateUniform1fv(gl::Context const*, gl::UniformLocation, int, float const*)
gl::ValidateUniform1i(gl::Context const*, gl::UniformLocation, int)
gl::ValidateUniform1iv(gl::Context const*, gl::UniformLocation, int, int const*)
gl::ValidateUniform1ivValue(gl::Context const*, unsigned int, int, int const*)
gl::ValidateUniform1ui(gl::Context const*, gl::UniformLocation, unsigned int)
gl::ValidateUniform1uiv(gl::Context const*, gl::UniformLocation, int, unsigned int const*)
gl::ValidateUniform2fv(gl::Context const*, gl::UniformLocation, int, float const*)
gl::ValidateUniform2i(gl::Context const*, gl::UniformLocation, int, int)
gl::ValidateUniform2iv(gl::Context const*, gl::UniformLocation, int, int const*)
gl::ValidateUniform2ui(gl::Context const*, gl::UniformLocation, unsigned int, unsigned int)
gl::ValidateUniform2uiv(gl::Context const*, gl::UniformLocation, int, unsigned int const*)
gl::ValidateUniform3f(gl::Context const*, gl::UniformLocation, float, float, float)
gl::ValidateUniform3fv(gl::Context const*, gl::UniformLocation, int, float const*)
gl::ValidateUniform3i(gl::Context const*, gl::UniformLocation, int, int, int)
gl::ValidateUniform3iv(gl::Context const*, gl::UniformLocation, int, int const*)
gl::ValidateUniform3ui(gl::Context const*, gl::UniformLocation, unsigned int, unsigned int, unsigned int)
gl::ValidateUniform3uiv(gl::Context const*, gl::UniformLocation, int, unsigned int const*)
gl::ValidateUniform4f(gl::Context const*, gl::UniformLocation, float, float, float, float)
gl::ValidateUniform4fv(gl::Context const*, gl::UniformLocation, int, float const*)
gl::ValidateUniform4i(gl::Context const*, gl::UniformLocation, int, int, int, int)
gl::ValidateUniform4iv(gl::Context const*, gl::UniformLocation, int, int const*)
gl::ValidateUniform4ui(gl::Context const*, gl::UniformLocation, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateUniform4uiv(gl::Context const*, gl::UniformLocation, int, unsigned int const*)
gl::ValidateUniformBlockBinding(gl::Context const*, gl::ShaderProgramID, unsigned int, unsigned int)
gl::ValidateUniformCommonBase(gl::Context const*, gl::Program const*, gl::UniformLocation, int, gl::LinkedUniform const**)
gl::ValidateUniformMatrix(gl::Context const*, unsigned int, gl::UniformLocation, int, unsigned char)
gl::ValidateUniformMatrix2fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix2x3fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix2x4fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix3fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix3x2fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix3x4fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix4fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix4x2fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrix4x3fv(gl::Context const*, gl::UniformLocation, int, unsigned char, float const*)
gl::ValidateUniformMatrixValue(gl::Context const*, unsigned int, unsigned int)
gl::ValidateUnmapBuffer(gl::Context const*, gl::BufferBinding)
gl::ValidateUnmapBufferBase(gl::Context const*, gl::BufferBinding)
gl::ValidateUnmapBufferOES(gl::Context const*, gl::BufferBinding)
gl::ValidateUseProgram(gl::Context const*, gl::ShaderProgramID)
gl::ValidateUseProgramStages(gl::Context const*, gl::ProgramPipelineID, unsigned int, gl::ShaderProgramID)
gl::ValidateValidateProgram(gl::Context const*, gl::ShaderProgramID)
gl::ValidateValidateProgramPipeline(gl::Context const*, gl::ProgramPipelineID)
gl::ValidateVertexAttrib1f(gl::Context const*, unsigned int, float)
gl::ValidateVertexAttrib1fv(gl::Context const*, unsigned int, float const*)
gl::ValidateVertexAttrib2f(gl::Context const*, unsigned int, float, float)
gl::ValidateVertexAttrib2fv(gl::Context const*, unsigned int, float const*)
gl::ValidateVertexAttrib3f(gl::Context const*, unsigned int, float, float, float)
gl::ValidateVertexAttrib3fv(gl::Context const*, unsigned int, float const*)
gl::ValidateVertexAttrib4f(gl::Context const*, unsigned int, float, float, float, float)
gl::ValidateVertexAttrib4fv(gl::Context const*, unsigned int, float const*)
gl::ValidateVertexAttribBinding(gl::Context const*, unsigned int, unsigned int)
gl::ValidateVertexAttribDivisor(gl::Context const*, unsigned int, unsigned int)
gl::ValidateVertexAttribDivisorANGLE(gl::Context const*, unsigned int, unsigned int)
gl::ValidateVertexAttribDivisorEXT(gl::Context const*, unsigned int, unsigned int)
gl::ValidateVertexAttribFormat(gl::Context const*, unsigned int, int, gl::VertexAttribType, unsigned char, unsigned int)
gl::ValidateVertexAttribI4i(gl::Context const*, unsigned int, int, int, int, int)
gl::ValidateVertexAttribI4iv(gl::Context const*, unsigned int, int const*)
gl::ValidateVertexAttribI4ui(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::ValidateVertexAttribI4uiv(gl::Context const*, unsigned int, unsigned int const*)
gl::ValidateVertexAttribIFormat(gl::Context const*, unsigned int, int, gl::VertexAttribType, unsigned int)
gl::ValidateVertexAttribIPointer(gl::Context const*, unsigned int, int, gl::VertexAttribType, int, void const*)
gl::ValidateVertexAttribIndex(gl::Context const*, unsigned int)
gl::ValidateVertexBindingDivisor(gl::Context const*, unsigned int, unsigned int)
gl::ValidateVertexPointer(gl::Context const*, int, gl::VertexAttribType, int, void const*)
gl::ValidateViewport(gl::Context const*, int, int, int, int)
gl::ValidateWaitSemaphoreEXT(gl::Context const*, gl::SemaphoreID, unsigned int, gl::BufferID const*, unsigned int, gl::TextureID const*, unsigned int const*)
gl::ValidateWaitSync(gl::Context const*, __GLsync*, unsigned int, unsigned long)
gl::ValidateWebGLFramebufferAttachmentClearType(gl::Context const*, int, unsigned int const*, unsigned long)
gl::ValidateWebGLVertexAttribPointer(gl::Context const*, gl::VertexAttribType, unsigned char, int, void const*, bool)
gl::ValidateWeightPointerOES(gl::Context const*, int, unsigned int, int, void const*)
gl::VariableBoolVectorType(unsigned int)
gl::VariableColumnCount(unsigned int)
gl::VariableComponentCount(unsigned int)
gl::VariableComponentType(unsigned int)
gl::VariableExternalSize(unsigned int)
gl::VariableLocation::VariableLocation()
gl::VariableLocation::VariableLocation(unsigned int, unsigned int)
gl::VariableRegisterCount(unsigned int)
gl::VariableRowCount(unsigned int)
gl::VariableSortOrder(unsigned int)
gl::VaryingPacking::VaryingPacking(unsigned int, gl::PackMode)
gl::VaryingPacking::collectAndPackUserVaryings(gl::InfoLog&, std::__1::vector<gl::ProgramVaryingRef, std::__1::allocator<gl::ProgramVaryingRef> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, bool)
gl::VaryingPacking::insert(unsigned int, unsigned int, gl::PackedVarying const&)
gl::VaryingPacking::packUserVarying(gl::ProgramVaryingRef const&, angle::PackedEnumMap<gl::ShaderType, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, 4ul>*)
gl::VaryingPacking::packUserVaryingField(gl::ProgramVaryingRef const&, unsigned int, angle::PackedEnumMap<gl::ShaderType, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, 4ul>*)
gl::VaryingPacking::packUserVaryingFieldTF(gl::ProgramVaryingRef const&, sh::ShaderVariable const&, unsigned int)
gl::VaryingPacking::packUserVaryingTF(gl::ProgramVaryingRef const&, unsigned long)
gl::VaryingPacking::packUserVaryings(gl::InfoLog&, std::__1::vector<gl::PackedVarying, std::__1::allocator<gl::PackedVarying> > const&)
gl::VaryingPacking::packVarying(gl::PackedVarying const&)
gl::VaryingPacking::reset()
gl::VaryingPacking::~VaryingPacking()
gl::VertexArray::VertexArray(rx::GLImplFactory*, gl::VertexArrayID, unsigned long, unsigned long)
gl::VertexArray::bindVertexBuffer(gl::Context const*, unsigned long, gl::Buffer*, long, int)
gl::VertexArray::bindVertexBufferImpl(gl::Context const*, unsigned long, gl::Buffer*, long, int)
gl::VertexArray::detachBuffer(gl::Context const*, gl::BufferID)
gl::VertexArray::enableAttribute(unsigned long, bool)
gl::VertexArray::getIndexRangeImpl(gl::Context const*, gl::DrawElementsType, int, void const*, gl::IndexRange*) const
gl::VertexArray::getLabel() const
gl::VertexArray::getVertexAttribute(unsigned long) const
gl::VertexArray::getVertexBinding(unsigned long) const
gl::VertexArray::hasTransformFeedbackBindingConflict(gl::Context const*) const
gl::VertexArray::onBindingChanged(gl::Context const*, int)
gl::VertexArray::onDestroy(gl::Context const*)
gl::VertexArray::onSubjectStateChange(unsigned long, angle::SubjectMessage)
gl::VertexArray::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
gl::VertexArray::setVertexAttribBinding(gl::Context const*, unsigned long, unsigned int)
gl::VertexArray::setVertexAttribDivisor(gl::Context const*, unsigned long, unsigned int)
gl::VertexArray::setVertexAttribFormat(unsigned long, int, gl::VertexAttribType, bool, bool, unsigned int)
gl::VertexArray::setVertexAttribIPointer(gl::Context const*, unsigned long, gl::Buffer*, int, gl::VertexAttribType, int, void const*)
gl::VertexArray::setVertexAttribPointer(gl::Context const*, unsigned long, gl::Buffer*, int, gl::VertexAttribType, bool, int, void const*)
gl::VertexArray::setVertexBindingDivisor(unsigned long, unsigned int)
gl::VertexArray::syncState(gl::Context const*)
gl::VertexArray::~VertexArray()
gl::VertexArrayState::VertexArrayState(gl::VertexArray*, unsigned long, unsigned long)
gl::VertexArrayState::hasEnabledNullPointerClientArray() const
gl::VertexAttrib1f(unsigned int, float)
gl::VertexAttrib1fContextANGLE(void*, unsigned int, float)
gl::VertexAttrib1fv(unsigned int, float const*)
gl::VertexAttrib1fvContextANGLE(void*, unsigned int, float const*)
gl::VertexAttrib2f(unsigned int, float, float)
gl::VertexAttrib2fContextANGLE(void*, unsigned int, float, float)
gl::VertexAttrib2fv(unsigned int, float const*)
gl::VertexAttrib2fvContextANGLE(void*, unsigned int, float const*)
gl::VertexAttrib3f(unsigned int, float, float, float)
gl::VertexAttrib3fContextANGLE(void*, unsigned int, float, float, float)
gl::VertexAttrib3fv(unsigned int, float const*)
gl::VertexAttrib3fvContextANGLE(void*, unsigned int, float const*)
gl::VertexAttrib4f(unsigned int, float, float, float, float)
gl::VertexAttrib4fContextANGLE(void*, unsigned int, float, float, float, float)
gl::VertexAttrib4fv(unsigned int, float const*)
gl::VertexAttrib4fvContextANGLE(void*, unsigned int, float const*)
gl::VertexAttribBinding(unsigned int, unsigned int)
gl::VertexAttribBindingContextANGLE(void*, unsigned int, unsigned int)
gl::VertexAttribDivisor(unsigned int, unsigned int)
gl::VertexAttribDivisorANGLE(unsigned int, unsigned int)
gl::VertexAttribDivisorANGLEContextANGLE(void*, unsigned int, unsigned int)
gl::VertexAttribDivisorContextANGLE(void*, unsigned int, unsigned int)
gl::VertexAttribDivisorEXT(unsigned int, unsigned int)
gl::VertexAttribDivisorEXTContextANGLE(void*, unsigned int, unsigned int)
gl::VertexAttribFormat(unsigned int, int, unsigned int, unsigned char, unsigned int)
gl::VertexAttribFormatContextANGLE(void*, unsigned int, int, unsigned int, unsigned char, unsigned int)
gl::VertexAttribI4i(unsigned int, int, int, int, int)
gl::VertexAttribI4iContextANGLE(void*, unsigned int, int, int, int, int)
gl::VertexAttribI4iv(unsigned int, int const*)
gl::VertexAttribI4ivContextANGLE(void*, unsigned int, int const*)
gl::VertexAttribI4ui(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::VertexAttribI4uiContextANGLE(void*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
gl::VertexAttribI4uiv(unsigned int, unsigned int const*)
gl::VertexAttribI4uivContextANGLE(void*, unsigned int, unsigned int const*)
gl::VertexAttribIFormat(unsigned int, int, unsigned int, unsigned int)
gl::VertexAttribIFormatContextANGLE(void*, unsigned int, int, unsigned int, unsigned int)
gl::VertexAttribIPointer(unsigned int, int, unsigned int, int, void const*)
gl::VertexAttribIPointerContextANGLE(void*, unsigned int, int, unsigned int, int, void const*)
gl::VertexAttribPointer(unsigned int, int, unsigned int, unsigned char, int, void const*)
gl::VertexAttribPointerContextANGLE(void*, unsigned int, int, unsigned int, unsigned char, int, void const*)
gl::VertexAttribute::VertexAttribute(gl::VertexAttribute&&)
gl::VertexAttribute::VertexAttribute(unsigned int)
gl::VertexAttribute::updateCachedElementLimit(gl::VertexBinding const&)
gl::VertexBinding::VertexBinding()
gl::VertexBinding::VertexBinding(gl::VertexBinding&&)
gl::VertexBinding::VertexBinding(unsigned int)
gl::VertexBinding::onContainerBindingChanged(gl::Context const*, int) const
gl::VertexBinding::~VertexBinding()
gl::VertexBindingDivisor(unsigned int, unsigned int)
gl::VertexBindingDivisorContextANGLE(void*, unsigned int, unsigned int)
gl::VertexPointer(int, unsigned int, int, void const*)
gl::VertexPointerContextANGLE(void*, int, unsigned int, int, void const*)
gl::Viewport(int, int, int, int)
gl::ViewportContextANGLE(void*, int, int, int, int)
gl::WaitSemaphoreEXT(unsigned int, unsigned int, unsigned int const*, unsigned int, unsigned int const*, unsigned int const*)
gl::WaitSemaphoreEXTContextANGLE(void*, unsigned int, unsigned int, unsigned int const*, unsigned int, unsigned int const*, unsigned int const*)
gl::WaitSync(__GLsync*, unsigned int, unsigned long)
gl::WaitSyncContextANGLE(void*, __GLsync*, unsigned int, unsigned long)
gl::WeightPointerOES(int, unsigned int, int, void const*)
gl::WeightPointerOESContextANGLE(void*, int, unsigned int, int, void const*)
gl::WrapMode gl::FromGLenum<gl::WrapMode>(unsigned int)
gl::WriteBlockMemberInfo(gl::BinaryOutputStream*, sh::BlockMemberInfo const&)
gl::WriteShaderVar(gl::BinaryOutputStream*, sh::ShaderVariable const&)
gl::averageFloat10(unsigned int, unsigned int)
gl::averageFloat11(unsigned int, unsigned int)
gl::convert999E5toRGBFloats(unsigned int, float*, float*, float*)
gl::convertRGBFloatsTo999E5(float, float, float)
gl::float16ToFloat32(unsigned short)
gl::gIsMultiThreadedContext
gl::gSingleThreadedContext
gl::g_exponent
gl::g_mantissa
gl::g_offset
gl::kAllGraphicsShaderTypes
gl::kComponentMasks
gl::kMinimumPrimitiveCounts
gl::kOffsetZero
gl::operator!=(gl::Extents const&, gl::Extents const&)
gl::operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, gl::ShaderType)
gl::operator==(gl::Extents const&, gl::Extents const&)
gl::priv::ShouldCreatePlatformLogMessage(int)
gl::priv::gLineModes
gl::supportsSSE2()::checked
gl::supportsSSE2()::supports
glActiveShaderProgram
glActiveShaderProgramContextANGLE
glActiveShaderProgramEXT
glActiveTexture
glActiveTextureARB
glActiveTextureContextANGLE
glAlphaFunc
glAlphaFuncContextANGLE
glAlphaFuncx
glAlphaFuncxContextANGLE
glAttachShader
glAttachShaderContextANGLE
glBeginConditionalRender
glBeginQuery
glBeginQueryContextANGLE
glBeginQueryEXT
glBeginQueryEXTContextANGLE
glBeginQueryIndexed
glBeginTransformFeedback
glBeginTransformFeedbackContextANGLE
glBeginTransformFeedbackEXT
glBindAttribLocation
glBindAttribLocationARB
glBindAttribLocationContextANGLE
glBindBuffer
glBindBufferBase
glBindBufferBaseContextANGLE
glBindBufferBaseEXT
glBindBufferContextANGLE
glBindBufferRange
glBindBufferRangeContextANGLE
glBindBufferRangeEXT
glBindBuffersBase
glBindBuffersRange
glBindFragDataLocation
glBindFragDataLocationEXT
glBindFragDataLocationEXTContextANGLE
glBindFragDataLocationIndexed
glBindFragDataLocationIndexedEXT
glBindFragDataLocationIndexedEXTContextANGLE
glBindFramebuffer
glBindFramebufferContextANGLE
glBindFramebufferEXT
glBindFramebufferOES
glBindFramebufferOESContextANGLE
glBindImageTexture
glBindImageTextureContextANGLE
glBindImageTextureEXT
glBindImageTextures
glBindProgramPipeline
glBindProgramPipelineContextANGLE
glBindProgramPipelineEXT
glBindRenderbuffer
glBindRenderbufferContextANGLE
glBindRenderbufferEXT
glBindRenderbufferOES
glBindRenderbufferOESContextANGLE
glBindSampler
glBindSamplerContextANGLE
glBindTexture
glBindTextureContextANGLE
glBindTextureEXT
glBindTextureUnit
glBindTransformFeedback
glBindTransformFeedbackContextANGLE
glBindUniformLocationCHROMIUM
glBindUniformLocationCHROMIUMContextANGLE
glBindVertexArray
glBindVertexArrayContextANGLE
glBindVertexArrayOES
glBindVertexArrayOESContextANGLE
glBindVertexBuffer
glBindVertexBufferContextANGLE
glBindVertexBuffers
glBlendBarrier
glBlendBarrierContextANGLE
glBlendColor
glBlendColorContextANGLE
glBlendEquation
glBlendEquationContextANGLE
glBlendEquationEXT
glBlendEquationSeparate
glBlendEquationSeparateContextANGLE
glBlendEquationSeparateEXT
glBlendEquationSeparatei
glBlendEquationSeparateiARB
glBlendEquationSeparateiContextANGLE
glBlendEquationSeparateiEXT
glBlendEquationSeparateiEXTContextANGLE
glBlendEquationSeparateiOES
glBlendEquationSeparateiOESContextANGLE
glBlendEquationi
glBlendEquationiARB
glBlendEquationiContextANGLE
glBlendEquationiEXT
glBlendEquationiEXTContextANGLE
glBlendEquationiOES
glBlendEquationiOESContextANGLE
glBlendFunc
glBlendFuncContextANGLE
glBlendFuncSeparate
glBlendFuncSeparateContextANGLE
glBlendFuncSeparateEXT
glBlendFuncSeparatei
glBlendFuncSeparateiARB
glBlendFuncSeparateiContextANGLE
glBlendFuncSeparateiEXT
glBlendFuncSeparateiEXTContextANGLE
glBlendFuncSeparateiOES
glBlendFuncSeparateiOESContextANGLE
glBlendFunci
glBlendFunciContextANGLE
glBlendFunciEXT
glBlendFunciEXTContextANGLE
glBlendFunciOES
glBlendFunciOESContextANGLE
glBlitFramebuffer
glBlitFramebufferANGLE
glBlitFramebufferANGLEContextANGLE
glBlitFramebufferContextANGLE
glBlitFramebufferEXT
glBlitNamedFramebuffer
glBufferData
glBufferDataContextANGLE
glBufferStorageEXT
glBufferStorageMemEXT
glBufferStorageMemEXTContextANGLE
glBufferSubData
glBufferSubDataARB
glBufferSubDataContextANGLE
glCheckFramebufferStatus
glCheckFramebufferStatusContextANGLE
glCheckFramebufferStatusEXT
glCheckFramebufferStatusOES
glCheckFramebufferStatusOESContextANGLE
glCheckNamedFramebufferStatus
glCheckNamedFramebufferStatusEXT
glClear
glClearBufferData
glClearBufferSubData
glClearBufferfi
glClearBufferfiContextANGLE
glClearBufferfv
glClearBufferfvContextANGLE
glClearBufferiv
glClearBufferivContextANGLE
glClearBufferuiv
glClearBufferuivContextANGLE
glClearColor
glClearColorContextANGLE
glClearColorx
glClearColorxContextANGLE
glClearContextANGLE
glClearDepthf
glClearDepthfContextANGLE
glClearDepthfOES
glClearDepthx
glClearDepthxContextANGLE
glClearNamedBufferData
glClearNamedBufferDataEXT
glClearNamedBufferSubData
glClearNamedBufferSubDataEXT
glClearNamedFramebufferfi
glClearNamedFramebufferfv
glClearNamedFramebufferiv
glClearNamedFramebufferuiv
glClearStencil
glClearStencilContextANGLE
glClearTexImageEXT
glClearTexSubImage
glClearTexSubImageEXT
glClientActiveTexture
glClientActiveTextureContextANGLE
glClientWaitSync
glClientWaitSync did not return GL_ALREADY_SIGNALED or GL_CONDITION_SATISFIED.
glClientWaitSyncContextANGLE
glClipControlEXT
glClipPlanef
glClipPlanefContextANGLE
glClipPlanex
glClipPlanexContextANGLE
glColor4f
glColor4fContextANGLE
glColor4ub
glColor4ubContextANGLE
glColor4x
glColor4xContextANGLE
glColorMask
glColorMaskContextANGLE
glColorMaski
glColorMaskiContextANGLE
glColorMaskiEXT
glColorMaskiEXTContextANGLE
glColorMaskiOES
glColorMaskiOESContextANGLE
glColorPointer
glColorPointerContextANGLE
glCompileShader
glCompileShaderARB
glCompileShaderContextANGLE
glCompressedCopyTextureCHROMIUM
glCompressedCopyTextureCHROMIUMContextANGLE
glCompressedTexImage1D
glCompressedTexImage1DARB
glCompressedTexImage2D
glCompressedTexImage2DARB
glCompressedTexImage2DContextANGLE
glCompressedTexImage2DRobustANGLE
glCompressedTexImage2DRobustANGLEContextANGLE
glCompressedTexImage3D
glCompressedTexImage3DARB
glCompressedTexImage3DContextANGLE
glCompressedTexImage3DOES
glCompressedTexImage3DOESContextANGLE
glCompressedTexImage3DRobustANGLE
glCompressedTexImage3DRobustANGLEContextANGLE
glCompressedTexSubImage1D
glCompressedTexSubImage1DARB
glCompressedTexSubImage2D
glCompressedTexSubImage2DARB
glCompressedTexSubImage2DContextANGLE
glCompressedTexSubImage2DRobustANGLE
glCompressedTexSubImage2DRobustANGLEContextANGLE
glCompressedTexSubImage3D
glCompressedTexSubImage3DARB
glCompressedTexSubImage3DContextANGLE
glCompressedTexSubImage3DOES
glCompressedTexSubImage3DOESContextANGLE
glCompressedTexSubImage3DRobustANGLE
glCompressedTexSubImage3DRobustANGLEContextANGLE
glCompressedTextureSubImage1D
glCompressedTextureSubImage1DEXT
glCompressedTextureSubImage2D
glCompressedTextureSubImage2DEXT
glCompressedTextureSubImage3D
glCompressedTextureSubImage3DEXT
glCopyBufferSubData
glCopyBufferSubDataContextANGLE
glCopyImageSubData
glCopyImageSubDataContextANGLE
glCopyImageSubDataEXT
glCopyImageSubDataOES
glCopyNamedBufferSubData
glCopySubTexture3DANGLE
glCopySubTexture3DANGLEContextANGLE
glCopySubTextureCHROMIUM
glCopySubTextureCHROMIUMContextANGLE
glCopyTexImage1D
glCopyTexImage1DEXT
glCopyTexImage2D
glCopyTexImage2DContextANGLE
glCopyTexImage2DEXT
glCopyTexSubImage1D
glCopyTexSubImage1DEXT
glCopyTexSubImage2D
glCopyTexSubImage2DContextANGLE
glCopyTexSubImage2DEXT
glCopyTexSubImage3D
glCopyTexSubImage3DContextANGLE
glCopyTexSubImage3DEXT
glCopyTexSubImage3DOES
glCopyTexSubImage3DOESContextANGLE
glCopyTexture3DANGLE
glCopyTexture3DANGLEContextANGLE
glCopyTextureCHROMIUM
glCopyTextureCHROMIUM with sourceLevel != 0 not implemented.
glCopyTextureCHROMIUMContextANGLE
glCopyTextureSubImage1D
glCopyTextureSubImage1DEXT
glCopyTextureSubImage2D
glCopyTextureSubImage2DEXT
glCopyTextureSubImage3D
glCopyTextureSubImage3DEXT
glCoverageModulationCHROMIUM
glCoverageModulationCHROMIUMContextANGLE
glCoverageModulationNV
glCreateFramebuffers
glCreateMemoryObjectsEXT
glCreateMemoryObjectsEXTContextANGLE
glCreateProgram
glCreateProgramContextANGLE
glCreateProgramPipelines
glCreateRenderbuffers
glCreateSamplers
glCreateShader
glCreateShaderContextANGLE
glCreateShaderProgramv
glCreateShaderProgramvContextANGLE
glCreateShaderProgramvEXT
glCreateTextures
glCreateTransformFeedbacks
glCreateVertexArrays
glCullFace
glCullFaceContextANGLE
glCurrentPaletteMatrixOES
glCurrentPaletteMatrixOESContextANGLE
glDebugMessageCallback
glDebugMessageCallbackARB
glDebugMessageCallbackContextANGLE
glDebugMessageCallbackKHR
glDebugMessageCallbackKHRContextANGLE
glDebugMessageControl
glDebugMessageControlARB
glDebugMessageControlContextANGLE
glDebugMessageControlKHR
glDebugMessageControlKHRContextANGLE
glDebugMessageInsert
glDebugMessageInsertARB
glDebugMessageInsertContextANGLE
glDebugMessageInsertKHR
glDebugMessageInsertKHRContextANGLE
glDeleteBuffers
glDeleteBuffersARB
glDeleteBuffersContextANGLE
glDeleteFencesNV
glDeleteFencesNVContextANGLE
glDeleteFramebuffers
glDeleteFramebuffersContextANGLE
glDeleteFramebuffersEXT
glDeleteFramebuffersOES
glDeleteFramebuffersOESContextANGLE
glDeleteMemoryObjectsEXT
glDeleteMemoryObjectsEXTContextANGLE
glDeleteProgram
glDeleteProgramContextANGLE
glDeleteProgramPipelines
glDeleteProgramPipelinesContextANGLE
glDeleteProgramPipelinesEXT
glDeleteQueries
glDeleteQueriesARB
glDeleteQueriesContextANGLE
glDeleteQueriesEXT
glDeleteQueriesEXTContextANGLE
glDeleteRenderbuffers
glDeleteRenderbuffersContextANGLE
glDeleteRenderbuffersEXT
glDeleteRenderbuffersOES
glDeleteRenderbuffersOESContextANGLE
glDeleteSamplers
glDeleteSamplersContextANGLE
glDeleteSemaphoresEXT
glDeleteSemaphoresEXTContextANGLE
glDeleteShader
glDeleteShaderContextANGLE
glDeleteSync
glDeleteSyncContextANGLE
glDeleteTextures
glDeleteTexturesContextANGLE
glDeleteTexturesEXT
glDeleteTransformFeedbacks
glDeleteTransformFeedbacksContextANGLE
glDeleteVertexArrays
glDeleteVertexArraysContextANGLE
glDeleteVertexArraysOES
glDeleteVertexArraysOESContextANGLE
glDepthFunc
glDepthFuncContextANGLE
glDepthMask
glDepthMaskContextANGLE
glDepthRangeArrayv
glDepthRangeIndexed
glDepthRangef
glDepthRangefContextANGLE
glDepthRangefOES
glDepthRangex
glDepthRangexContextANGLE
glDetachShader
glDetachShaderContextANGLE
glDisable
glDisableClientState
glDisableClientStateContextANGLE
glDisableContextANGLE
glDisableExtensionANGLE
glDisableExtensionANGLEContextANGLE
glDisableVertexArrayAttrib
glDisableVertexArrayAttribEXT
glDisableVertexAttribArray
glDisableVertexAttribArrayARB
glDisableVertexAttribArrayContextANGLE
glDisablei
glDisableiContextANGLE
glDisableiEXT
glDisableiEXTContextANGLE
glDisableiOES
glDisableiOESContextANGLE
glDiscardFramebufferEXT
glDiscardFramebufferEXTContextANGLE
glDispatchCompute
glDispatchComputeContextANGLE
glDispatchComputeIndirect
glDispatchComputeIndirectContextANGLE
glDrawArrays
glDrawArraysContextANGLE
glDrawArraysIndirect
glDrawArraysIndirectContextANGLE
glDrawArraysInstanced
glDrawArraysInstancedANGLE
glDrawArraysInstancedANGLEContextANGLE
glDrawArraysInstancedARB
glDrawArraysInstancedBaseInstance
glDrawArraysInstancedBaseInstanceANGLE
glDrawArraysInstancedBaseInstanceANGLEContextANGLE
glDrawArraysInstancedBaseInstanceEXT
glDrawArraysInstancedContextANGLE
glDrawArraysInstancedEXT
glDrawArraysInstancedEXTContextANGLE
glDrawBuffers
glDrawBuffersARB
glDrawBuffersContextANGLE
glDrawBuffersEXT
glDrawBuffersEXTContextANGLE
glDrawElements
glDrawElementsBaseVertex
glDrawElementsBaseVertexContextANGLE
glDrawElementsBaseVertexEXT
glDrawElementsBaseVertexEXTContextANGLE
glDrawElementsBaseVertexOES
glDrawElementsBaseVertexOESContextANGLE
glDrawElementsContextANGLE
glDrawElementsIndirect
glDrawElementsIndirectContextANGLE
glDrawElementsInstanced
glDrawElementsInstancedANGLE
glDrawElementsInstancedANGLEContextANGLE
glDrawElementsInstancedARB
glDrawElementsInstancedBaseInstance
glDrawElementsInstancedBaseInstanceEXT
glDrawElementsInstancedBaseVertex
glDrawElementsInstancedBaseVertexBaseInstance
glDrawElementsInstancedBaseVertexBaseInstanceANGLE
glDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
glDrawElementsInstancedBaseVertexBaseInstanceEXT
glDrawElementsInstancedBaseVertexContextANGLE
glDrawElementsInstancedBaseVertexEXT
glDrawElementsInstancedBaseVertexEXTContextANGLE
glDrawElementsInstancedBaseVertexOES
glDrawElementsInstancedBaseVertexOESContextANGLE
glDrawElementsInstancedContextANGLE
glDrawElementsInstancedEXT
glDrawElementsInstancedEXTContextANGLE
glDrawRangeElements
glDrawRangeElementsBaseVertex
glDrawRangeElementsBaseVertexContextANGLE
glDrawRangeElementsBaseVertexEXT
glDrawRangeElementsBaseVertexEXTContextANGLE
glDrawRangeElementsBaseVertexOES
glDrawRangeElementsBaseVertexOESContextANGLE
glDrawRangeElementsContextANGLE
glDrawRangeElementsEXT
glDrawTexfOES
glDrawTexfOESContextANGLE
glDrawTexfvOES
glDrawTexfvOESContextANGLE
glDrawTexiOES
glDrawTexiOESContextANGLE
glDrawTexivOES
glDrawTexivOESContextANGLE
glDrawTexsOES
glDrawTexsOESContextANGLE
glDrawTexsvOES
glDrawTexsvOESContextANGLE
glDrawTexxOES
glDrawTexxOESContextANGLE
glDrawTexxvOES
glDrawTexxvOESContextANGLE
glDrawTransformFeedback
glDrawTransformFeedbackEXT
glDrawTransformFeedbackInstanced
glDrawTransformFeedbackInstancedEXT
glDrawTransformFeedbackStream
glDrawTransformFeedbackStreamInstanced
glEGLImageTargetRenderbufferStorageOES
glEGLImageTargetRenderbufferStorageOESContextANGLE
glEGLImageTargetTexture2DOES
glEGLImageTargetTexture2DOESContextANGLE
glEnable
glEnableClientState
glEnableClientStateContextANGLE
glEnableContextANGLE
glEnableVertexArrayAttrib
glEnableVertexArrayAttribEXT
glEnableVertexAttribArray
glEnableVertexAttribArrayARB
glEnableVertexAttribArrayContextANGLE
glEnablei
glEnableiContextANGLE
glEnableiEXT
glEnableiEXTContextANGLE
glEnableiOES
glEnableiOESContextANGLE
glEndConditionalRender
glEndQuery
glEndQueryContextANGLE
glEndQueryEXT
glEndQueryEXTContextANGLE
glEndQueryIndexed
glEndTransformFeedback
glEndTransformFeedbackContextANGLE
glEndTransformFeedbackEXT
glFenceSync
glFenceSync failed to create a GLsync object.
glFenceSyncContextANGLE
glFinish
glFinish doesn't cause all queries to report available result
glFinishContextANGLE
glFinishFenceNV
glFinishFenceNVContextANGLE
glFlush
glFlushContextANGLE
glFlushMappedBufferRange
glFlushMappedBufferRangeContextANGLE
glFlushMappedBufferRangeEXT
glFlushMappedBufferRangeEXTContextANGLE
glFlushMappedNamedBufferRange
glFlushMappedNamedBufferRangeEXT
glFogf
glFogfContextANGLE
glFogfv
glFogfvContextANGLE
glFogx
glFogxContextANGLE
glFogxv
glFogxvContextANGLE
glFramebufferParameteri
glFramebufferParameteriContextANGLE
glFramebufferRenderbuffer
glFramebufferRenderbufferContextANGLE
glFramebufferRenderbufferEXT
glFramebufferRenderbufferOES
glFramebufferRenderbufferOESContextANGLE
glFramebufferTexture
glFramebufferTexture1D
glFramebufferTexture1DEXT
glFramebufferTexture2D
glFramebufferTexture2DContextANGLE
glFramebufferTexture2DEXT
glFramebufferTexture2DMultisampleEXT
glFramebufferTexture2DMultisampleEXTContextANGLE
glFramebufferTexture2DOES
glFramebufferTexture2DOESContextANGLE
glFramebufferTexture3D
glFramebufferTexture3DEXT
glFramebufferTexture3DOES
glFramebufferTexture3DOESContextANGLE
glFramebufferTextureARB
glFramebufferTextureContextANGLE
glFramebufferTextureEXT
glFramebufferTextureEXTContextANGLE
glFramebufferTextureLayer
glFramebufferTextureLayerARB
glFramebufferTextureLayerContextANGLE
glFramebufferTextureLayerEXT
glFramebufferTextureMultiviewOVR
glFramebufferTextureMultiviewOVRContextANGLE
glFramebufferTextureOES
glFrontFace
glFrontFaceContextANGLE
glFrustumf
glFrustumfContextANGLE
glFrustumx
glFrustumxContextANGLE
glGenBuffers
glGenBuffersContextANGLE
glGenFencesNV
glGenFencesNVContextANGLE
glGenFramebuffers
glGenFramebuffersContextANGLE
glGenFramebuffersEXT
glGenFramebuffersOES
glGenFramebuffersOESContextANGLE
glGenProgramPipelines
glGenProgramPipelinesContextANGLE
glGenProgramPipelinesEXT
glGenQueries
glGenQueriesContextANGLE
glGenQueriesEXT
glGenQueriesEXTContextANGLE
glGenRenderbuffers
glGenRenderbuffersContextANGLE
glGenRenderbuffersEXT
glGenRenderbuffersOES
glGenRenderbuffersOESContextANGLE
glGenSamplers
glGenSamplersContextANGLE
glGenSemaphoresEXT
glGenSemaphoresEXTContextANGLE
glGenTextures
glGenTexturesContextANGLE
glGenTexturesEXT
glGenTransformFeedbacks
glGenTransformFeedbacksContextANGLE
glGenVertexArrays
glGenVertexArraysContextANGLE
glGenVertexArraysOES
glGenVertexArraysOESContextANGLE
glGenerateMipmap
glGenerateMipmapContextANGLE
glGenerateMipmapEXT
glGenerateMipmapOES
glGenerateMipmapOESContextANGLE
glGenerateTextureMipmap
glGenerateTextureMipmapEXT
glGetActiveAtomicCounterBufferiv
glGetActiveAttrib
glGetActiveAttribARB
glGetActiveAttribContextANGLE
glGetActiveSubroutineName
glGetActiveSubroutineUniformName
glGetActiveSubroutineUniformiv
glGetActiveUniform
glGetActiveUniformARB
glGetActiveUniformBlockName
glGetActiveUniformBlockNameContextANGLE
glGetActiveUniformBlockiv
glGetActiveUniformBlockivContextANGLE
glGetActiveUniformBlockivRobustANGLE
glGetActiveUniformBlockivRobustANGLEContextANGLE
glGetActiveUniformContextANGLE
glGetActiveUniformName
glGetActiveUniformsiv
glGetActiveUniformsivContextANGLE
glGetAttachedShaders
glGetAttachedShadersContextANGLE
glGetAttribLocation
glGetAttribLocationARB
glGetAttribLocationContextANGLE
glGetBooleani_v
glGetBooleani_vContextANGLE
glGetBooleani_vRobustANGLE
glGetBooleani_vRobustANGLEContextANGLE
glGetBooleanv
glGetBooleanvContextANGLE
glGetBooleanvRobustANGLE
glGetBooleanvRobustANGLEContextANGLE
glGetBufferParameteri64v
glGetBufferParameteri64vContextANGLE
glGetBufferParameteri64vRobustANGLE
glGetBufferParameteri64vRobustANGLEContextANGLE
glGetBufferParameteriv
glGetBufferParameterivARB
glGetBufferParameterivContextANGLE
glGetBufferParameterivRobustANGLE
glGetBufferParameterivRobustANGLEContextANGLE
glGetBufferPointerv
glGetBufferPointervARB
glGetBufferPointervContextANGLE
glGetBufferPointervOES
glGetBufferPointervOESContextANGLE
glGetBufferPointervRobustANGLE
glGetBufferPointervRobustANGLEContextANGLE
glGetBufferSubData
glGetBufferSubDataARB
glGetClipPlanef
glGetClipPlanefContextANGLE
glGetClipPlanex
glGetClipPlanexContextANGLE
glGetCompressedTexImage
glGetCompressedTexImageARB
glGetCompressedTextureImage
glGetCompressedTextureImageEXT
glGetCompressedTextureSubImage
glGetDebugMessageLog
glGetDebugMessageLogARB
glGetDebugMessageLogContextANGLE
glGetDebugMessageLogKHR
glGetDebugMessageLogKHRContextANGLE
glGetDoublei_vEXT
glGetError
glGetErrorContextANGLE
glGetFenceivNV
glGetFenceivNVContextANGLE
glGetFixedv
glGetFixedvContextANGLE
glGetFloati_vEXT
glGetFloati_vOES
glGetFloatv
glGetFloatvContextANGLE
glGetFloatvRobustANGLE
glGetFloatvRobustANGLEContextANGLE
glGetFragDataIndex
glGetFragDataIndexEXT
glGetFragDataIndexEXTContextANGLE
glGetFragDataLocation
glGetFragDataLocationContextANGLE
glGetFragDataLocationEXT
glGetFramebufferAttachmentParameteriv
glGetFramebufferAttachmentParameterivContextANGLE
glGetFramebufferAttachmentParameterivEXT
glGetFramebufferAttachmentParameterivOES
glGetFramebufferAttachmentParameterivOESContextANGLE
glGetFramebufferAttachmentParameterivRobustANGLE
glGetFramebufferAttachmentParameterivRobustANGLEContextANGLE
glGetFramebufferParameteriv
glGetFramebufferParameterivContextANGLE
glGetFramebufferParameterivEXT
glGetFramebufferParameterivRobustANGLE
glGetFramebufferParameterivRobustANGLEContextANGLE
glGetGraphicsResetStatus
glGetGraphicsResetStatusARB
glGetGraphicsResetStatusContextANGLE
glGetGraphicsResetStatusEXT
glGetGraphicsResetStatusEXTContextANGLE
glGetGraphicsResetStatusKHR
glGetInteger64i_v
glGetInteger64i_vContextANGLE
glGetInteger64i_vRobustANGLE
glGetInteger64i_vRobustANGLEContextANGLE
glGetInteger64v
glGetInteger64vContextANGLE
glGetInteger64vEXT
glGetInteger64vEXTContextANGLE
glGetInteger64vRobustANGLE
glGetInteger64vRobustANGLEContextANGLE
glGetIntegeri_v
glGetIntegeri_vContextANGLE
glGetIntegeri_vEXT
glGetIntegeri_vRobustANGLE
glGetIntegeri_vRobustANGLEContextANGLE
glGetIntegerv
glGetIntegervContextANGLE
glGetIntegervRobustANGLE
glGetIntegervRobustANGLEContextANGLE
glGetInternalformatSampleivNV
glGetInternalformati64v
glGetInternalformativ
glGetInternalformativContextANGLE
glGetInternalformativRobustANGLE
glGetInternalformativRobustANGLEContextANGLE
glGetLightfv
glGetLightfvContextANGLE
glGetLightxv
glGetLightxvContextANGLE
glGetMaterialfv
glGetMaterialfvContextANGLE
glGetMaterialxv
glGetMaterialxvContextANGLE
glGetMemoryObjectParameterivEXT
glGetMemoryObjectParameterivEXTContextANGLE
glGetMultisamplefv
glGetMultisamplefvANGLE
glGetMultisamplefvANGLEContextANGLE
glGetMultisamplefvContextANGLE
glGetMultisamplefvRobustANGLE
glGetMultisamplefvRobustANGLEContextANGLE
glGetNamedBufferParameteri64v
glGetNamedBufferParameteriv
glGetNamedBufferParameterivEXT
glGetNamedBufferPointerv
glGetNamedBufferPointervEXT
glGetNamedBufferSubData
glGetNamedBufferSubDataEXT
glGetNamedFramebufferAttachmentParameteriv
glGetNamedFramebufferAttachmentParameterivEXT
glGetNamedFramebufferParameteriv
glGetNamedFramebufferParameterivEXT
glGetNamedRenderbufferParameteriv
glGetNamedRenderbufferParameterivEXT
glGetObjectLabel
glGetObjectLabelContextANGLE
glGetObjectLabelEXT
glGetObjectLabelKHR
glGetObjectLabelKHRContextANGLE
glGetObjectPtrLabel
glGetObjectPtrLabelContextANGLE
glGetObjectPtrLabelKHR
glGetObjectPtrLabelKHRContextANGLE
glGetPointerv
glGetPointervContextANGLE
glGetPointervEXT
glGetPointervKHR
glGetPointervKHRContextANGLE
glGetPointervRobustANGLERobustANGLE
glGetPointervRobustANGLERobustANGLEContextANGLE
glGetProgramBinary
glGetProgramBinaryContextANGLE
glGetProgramBinaryOES
glGetProgramBinaryOESContextANGLE
glGetProgramInfoLog
glGetProgramInfoLogContextANGLE
glGetProgramInterfaceiv
glGetProgramInterfaceivContextANGLE
glGetProgramInterfaceivRobustANGLE
glGetProgramInterfaceivRobustANGLEContextANGLE
glGetProgramPipelineInfoLog
glGetProgramPipelineInfoLogContextANGLE
glGetProgramPipelineInfoLogEXT
glGetProgramPipelineiv
glGetProgramPipelineivContextANGLE
glGetProgramPipelineivEXT
glGetProgramResourceIndex
glGetProgramResourceIndexContextANGLE
glGetProgramResourceLocation
glGetProgramResourceLocationContextANGLE
glGetProgramResourceLocationIndex
glGetProgramResourceLocationIndexEXT
glGetProgramResourceLocationIndexEXTContextANGLE
glGetProgramResourceName
glGetProgramResourceNameContextANGLE
glGetProgramResourceiv
glGetProgramResourceivContextANGLE
glGetProgramStageiv
glGetProgramiv
glGetProgramivARB
glGetProgramivContextANGLE
glGetProgramivRobustANGLE
glGetProgramivRobustANGLEContextANGLE
glGetQueryBufferObjecti64v
glGetQueryBufferObjectiv
glGetQueryBufferObjectui64v
glGetQueryBufferObjectuiv
glGetQueryIndexediv
glGetQueryObjecti64v
glGetQueryObjecti64vEXT
glGetQueryObjecti64vEXTContextANGLE
glGetQueryObjecti64vRobustANGLE
glGetQueryObjecti64vRobustANGLEContextANGLE
glGetQueryObjectiv
glGetQueryObjectivARB
glGetQueryObjectivEXT
glGetQueryObjectivEXTContextANGLE
glGetQueryObjectivRobustANGLE
glGetQueryObjectivRobustANGLEContextANGLE
glGetQueryObjectui64v
glGetQueryObjectui64vEXT
glGetQueryObjectui64vEXTContextANGLE
glGetQueryObjectui64vRobustANGLE
glGetQueryObjectui64vRobustANGLEContextANGLE
glGetQueryObjectuiv
glGetQueryObjectuivARB
glGetQueryObjectuivContextANGLE
glGetQueryObjectuivEXT
glGetQueryObjectuivEXTContextANGLE
glGetQueryObjectuivRobustANGLE
glGetQueryObjectuivRobustANGLEContextANGLE
glGetQueryiv
glGetQueryivContextANGLE
glGetQueryivEXT
glGetQueryivEXTContextANGLE
glGetQueryivRobustANGLE
glGetQueryivRobustANGLEContextANGLE
glGetRenderbufferImageANGLE
glGetRenderbufferImageANGLEContextANGLE
glGetRenderbufferParameteriv
glGetRenderbufferParameterivContextANGLE
glGetRenderbufferParameterivEXT
glGetRenderbufferParameterivOES
glGetRenderbufferParameterivOESContextANGLE
glGetRenderbufferParameterivRobustANGLE
glGetRenderbufferParameterivRobustANGLEContextANGLE
glGetSamplerParameterIiv
glGetSamplerParameterIivContextANGLE
glGetSamplerParameterIivEXT
glGetSamplerParameterIivOES
glGetSamplerParameterIivOESContextANGLE
glGetSamplerParameterIivRobustANGLE
glGetSamplerParameterIivRobustANGLEContextANGLE
glGetSamplerParameterIuiv
glGetSamplerParameterIuivContextANGLE
glGetSamplerParameterIuivEXT
glGetSamplerParameterIuivOES
glGetSamplerParameterIuivOESContextANGLE
glGetSamplerParameterIuivRobustANGLE
glGetSamplerParameterIuivRobustANGLEContextANGLE
glGetSamplerParameterfv
glGetSamplerParameterfvContextANGLE
glGetSamplerParameterfvRobustANGLE
glGetSamplerParameterfvRobustANGLEContextANGLE
glGetSamplerParameteriv
glGetSamplerParameterivContextANGLE
glGetSamplerParameterivRobustANGLE
glGetSamplerParameterivRobustANGLEContextANGLE
glGetSemaphoreParameterui64vEXT
glGetSemaphoreParameterui64vEXTContextANGLE
glGetShaderInfoLog
glGetShaderInfoLogContextANGLE
glGetShaderPrecisionFormat
glGetShaderPrecisionFormatContextANGLE
glGetShaderSource
glGetShaderSourceARB
glGetShaderSourceContextANGLE
glGetShaderiv
glGetShaderivContextANGLE
glGetShaderivRobustANGLE
glGetShaderivRobustANGLEContextANGLE
glGetString
glGetStringContextANGLE
glGetStringi
glGetStringiContextANGLE
glGetSubroutineIndex
glGetSubroutineUniformLocation
glGetSynciv
glGetSyncivContextANGLE
glGetTexEnvfv
glGetTexEnvfvContextANGLE
glGetTexEnviv
glGetTexEnvivContextANGLE
glGetTexEnvxv
glGetTexEnvxvContextANGLE
glGetTexGenfvOES
glGetTexGenfvOESContextANGLE
glGetTexGenivOES
glGetTexGenivOESContextANGLE
glGetTexGenxvOES
glGetTexGenxvOESContextANGLE
glGetTexImageANGLE
glGetTexImageANGLEContextANGLE
glGetTexLevelParameterfv
glGetTexLevelParameterfvANGLE
glGetTexLevelParameterfvANGLEContextANGLE
glGetTexLevelParameterfvContextANGLE
glGetTexLevelParameterfvRobustANGLE
glGetTexLevelParameterfvRobustANGLEContextANGLE
glGetTexLevelParameteriv
glGetTexLevelParameterivANGLE
glGetTexLevelParameterivANGLEContextANGLE
glGetTexLevelParameterivContextANGLE
glGetTexLevelParameterivRobustANGLE
glGetTexLevelParameterivRobustANGLEContextANGLE
glGetTexParameterIiv
glGetTexParameterIivContextANGLE
glGetTexParameterIivEXT
glGetTexParameterIivOES
glGetTexParameterIivOESContextANGLE
glGetTexParameterIivRobustANGLE
glGetTexParameterIivRobustANGLEContextANGLE
glGetTexParameterIuiv
glGetTexParameterIuivContextANGLE
glGetTexParameterIuivEXT
glGetTexParameterIuivOES
glGetTexParameterIuivOESContextANGLE
glGetTexParameterIuivRobustANGLE
glGetTexParameterIuivRobustANGLEContextANGLE
glGetTexParameterfv
glGetTexParameterfvContextANGLE
glGetTexParameterfvRobustANGLE
glGetTexParameterfvRobustANGLEContextANGLE
glGetTexParameteriv
glGetTexParameterivContextANGLE
glGetTexParameterivRobustANGLE
glGetTexParameterivRobustANGLEContextANGLE
glGetTexParameterxv
glGetTexParameterxvContextANGLE
glGetTextureImage
glGetTextureImageEXT
glGetTextureLevelParameterfv
glGetTextureLevelParameterfvEXT
glGetTextureLevelParameteriv
glGetTextureLevelParameterivEXT
glGetTextureParameterIiv
glGetTextureParameterIivEXT
glGetTextureParameterIuiv
glGetTextureParameterIuivEXT
glGetTextureParameterfv
glGetTextureParameterfvEXT
glGetTextureParameteriv
glGetTextureParameterivEXT
glGetTextureSubImage
glGetTransformFeedbackVarying
glGetTransformFeedbackVaryingContextANGLE
glGetTransformFeedbackVaryingEXT
glGetTransformFeedbacki64_v
glGetTransformFeedbacki_v
glGetTransformFeedbackiv
glGetTranslatedShaderSourceANGLE
glGetTranslatedShaderSourceANGLEContextANGLE
glGetUniformBlockIndex
glGetUniformBlockIndexContextANGLE
glGetUniformIndices
glGetUniformIndicesContextANGLE
glGetUniformLocation
glGetUniformLocationARB
glGetUniformLocationContextANGLE
glGetUniformSubroutineuiv
glGetUniformfv
glGetUniformfvARB
glGetUniformfvContextANGLE
glGetUniformfvRobustANGLE
glGetUniformfvRobustANGLEContextANGLE
glGetUniformiv
glGetUniformivARB
glGetUniformivContextANGLE
glGetUniformivRobustANGLE
glGetUniformivRobustANGLEContextANGLE
glGetUniformuiv
glGetUniformuivContextANGLE
glGetUniformuivEXT
glGetUniformuivRobustANGLE
glGetUniformuivRobustANGLEContextANGLE
glGetUnsignedBytei_vEXT
glGetUnsignedBytei_vEXTContextANGLE
glGetUnsignedBytevEXT
glGetUnsignedBytevEXTContextANGLE
glGetVertexArrayIndexed64iv
glGetVertexArrayIndexediv
glGetVertexArrayiv
glGetVertexAttribIiv
glGetVertexAttribIivContextANGLE
glGetVertexAttribIivEXT
glGetVertexAttribIivRobustANGLE
glGetVertexAttribIivRobustANGLEContextANGLE
glGetVertexAttribIuiv
glGetVertexAttribIuivContextANGLE
glGetVertexAttribIuivEXT
glGetVertexAttribIuivRobustANGLE
glGetVertexAttribIuivRobustANGLEContextANGLE
glGetVertexAttribLdv
glGetVertexAttribLdvEXT
glGetVertexAttribPointerv
glGetVertexAttribPointervARB
glGetVertexAttribPointervContextANGLE
glGetVertexAttribPointervRobustANGLE
glGetVertexAttribPointervRobustANGLEContextANGLE
glGetVertexAttribdv
glGetVertexAttribdvARB
glGetVertexAttribfv
glGetVertexAttribfvARB
glGetVertexAttribfvContextANGLE
glGetVertexAttribfvRobustANGLE
glGetVertexAttribfvRobustANGLEContextANGLE
glGetVertexAttribiv
glGetVertexAttribivARB
glGetVertexAttribivContextANGLE
glGetVertexAttribivRobustANGLE
glGetVertexAttribivRobustANGLEContextANGLE
glGetnCompressedTexImage
glGetnCompressedTexImageARB
glGetnTexImageARB
glGetnUniformdvARB
glGetnUniformfv
glGetnUniformfvARB
glGetnUniformfvContextANGLE
glGetnUniformfvEXT
glGetnUniformfvEXTContextANGLE
glGetnUniformfvKHR
glGetnUniformfvRobustANGLE
glGetnUniformfvRobustANGLEContextANGLE
glGetnUniformiv
glGetnUniformivARB
glGetnUniformivContextANGLE
glGetnUniformivEXT
glGetnUniformivEXTContextANGLE
glGetnUniformivKHR
glGetnUniformivRobustANGLE
glGetnUniformivRobustANGLEContextANGLE
glGetnUniformuiv
glGetnUniformuivARB
glGetnUniformuivContextANGLE
glGetnUniformuivKHR
glGetnUniformuivRobustANGLE
glGetnUniformuivRobustANGLEContextANGLE
glHint
glHintContextANGLE
glImportMemoryFdEXT
glImportMemoryFdEXTContextANGLE
glImportMemoryWin32HandleEXT
glImportMemoryWin32NameEXT
glImportMemoryZirconHandleANGLE
glImportMemoryZirconHandleANGLEContextANGLE
glImportSemaphoreFdEXT
glImportSemaphoreFdEXTContextANGLE
glImportSemaphoreWin32HandleEXT
glImportSemaphoreWin32NameEXT
glImportSemaphoreZirconHandleANGLE
glImportSemaphoreZirconHandleANGLEContextANGLE
glInsertEventMarkerEXT
glInsertEventMarkerEXTContextANGLE
glInvalidateBufferData
glInvalidateBufferSubData
glInvalidateFramebuffer
glInvalidateFramebufferContextANGLE
glInvalidateNamedFramebufferData
glInvalidateNamedFramebufferSubData
glInvalidateSubFramebuffer
glInvalidateSubFramebufferContextANGLE
glInvalidateTexImage
glInvalidateTexSubImage
glInvalidateTextureANGLE
glInvalidateTextureANGLEContextANGLE
glIsBuffer
glIsBufferContextANGLE
glIsEnabled
glIsEnabledContextANGLE
glIsEnabledi
glIsEnablediContextANGLE
glIsEnablediEXT
glIsEnablediEXTContextANGLE
glIsEnablediOES
glIsEnablediOESContextANGLE
glIsFenceNV
glIsFenceNVContextANGLE
glIsFramebuffer
glIsFramebufferContextANGLE
glIsFramebufferEXT
glIsFramebufferOES
glIsFramebufferOESContextANGLE
glIsMemoryObjectEXT
glIsMemoryObjectEXTContextANGLE
glIsProgram
glIsProgramContextANGLE
glIsProgramPipeline
glIsProgramPipelineContextANGLE
glIsProgramPipelineEXT
glIsQuery
glIsQueryContextANGLE
glIsQueryEXT
glIsQueryEXTContextANGLE
glIsRenderbuffer
glIsRenderbufferContextANGLE
glIsRenderbufferEXT
glIsRenderbufferOES
glIsRenderbufferOESContextANGLE
glIsSampler
glIsSamplerContextANGLE
glIsSemaphoreEXT
glIsSemaphoreEXTContextANGLE
glIsShader
glIsShaderContextANGLE
glIsSync
glIsSyncContextANGLE
glIsTexture
glIsTextureContextANGLE
glIsTransformFeedback
glIsTransformFeedbackContextANGLE
glIsVertexArray
glIsVertexArrayContextANGLE
glIsVertexArrayOES
glIsVertexArrayOESContextANGLE
glLightModelf
glLightModelfContextANGLE
glLightModelfv
glLightModelfvContextANGLE
glLightModelx
glLightModelxContextANGLE
glLightModelxv
glLightModelxvContextANGLE
glLightf
glLightfContextANGLE
glLightfv
glLightfvContextANGLE
glLightx
glLightxContextANGLE
glLightxv
glLightxvContextANGLE
glLineWidth
glLineWidthContextANGLE
glLineWidthx
glLineWidthxContextANGLE
glLinkProgram
glLinkProgramARB
glLinkProgramContextANGLE
glLoadIdentity
glLoadIdentityContextANGLE
glLoadMatrixf
glLoadMatrixfContextANGLE
glLoadMatrixx
glLoadMatrixxContextANGLE
glLoadPaletteFromModelViewMatrixOES
glLoadPaletteFromModelViewMatrixOESContextANGLE
glLogicOp
glLogicOpContextANGLE
glLoseContextCHROMIUM
glLoseContextCHROMIUMContextANGLE
glMapBufferOES
glMapBufferOESContextANGLE
glMapBufferRange
glMapBufferRangeContextANGLE
glMapBufferRangeEXT
glMapBufferRangeEXTContextANGLE
glMapNamedBuffer
glMapNamedBufferEXT
glMapNamedBufferRange
glMapNamedBufferRangeEXT
glMaterialf
glMaterialfContextANGLE
glMaterialfv
glMaterialfvContextANGLE
glMaterialx
glMaterialxContextANGLE
glMaterialxv
glMaterialxvContextANGLE
glMatrixIndexPointerOES
glMatrixIndexPointerOESContextANGLE
glMatrixMode
glMatrixModeContextANGLE
glMaxShaderCompilerThreadsARB
glMaxShaderCompilerThreadsKHR
glMaxShaderCompilerThreadsKHRContextANGLE
glMemoryBarrier
glMemoryBarrierByRegion
glMemoryBarrierByRegionContextANGLE
glMemoryBarrierContextANGLE
glMemoryBarrierEXT
glMemoryObjectParameterivEXT
glMemoryObjectParameterivEXTContextANGLE
glMinSampleShading
glMinSampleShadingARB
glMinSampleShadingContextANGLE
glMinSampleShadingOES
glMultMatrixf
glMultMatrixfContextANGLE
glMultMatrixx
glMultMatrixxContextANGLE
glMultiDrawArrays
glMultiDrawArraysANGLE
glMultiDrawArraysANGLEContextANGLE
glMultiDrawArraysEXT
glMultiDrawArraysIndirect
glMultiDrawArraysIndirectEXT
glMultiDrawArraysInstancedANGLE
glMultiDrawArraysInstancedANGLEContextANGLE
glMultiDrawArraysInstancedBaseInstanceANGLE
glMultiDrawArraysInstancedBaseInstanceANGLEContextANGLE
glMultiDrawElements
glMultiDrawElementsANGLE
glMultiDrawElementsANGLEContextANGLE
glMultiDrawElementsBaseVertex
glMultiDrawElementsBaseVertexEXT
glMultiDrawElementsBaseVertexEXTContextANGLE
glMultiDrawElementsEXT
glMultiDrawElementsIndirect
glMultiDrawElementsIndirectEXT
glMultiDrawElementsInstancedANGLE
glMultiDrawElementsInstancedANGLEContextANGLE
glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE
glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLEContextANGLE
glMultiTexCoord4f
glMultiTexCoord4fContextANGLE
glMultiTexCoord4x
glMultiTexCoord4xContextANGLE
glNamedBufferData
glNamedBufferDataEXT
glNamedBufferStorage
glNamedBufferStorageEXT
glNamedBufferStorageMemEXT
glNamedBufferSubData
glNamedBufferSubDataEXT
glNamedFramebufferDrawBuffer
glNamedFramebufferDrawBuffers
glNamedFramebufferParameteri
glNamedFramebufferParameteriEXT
glNamedFramebufferReadBuffer
glNamedFramebufferRenderbuffer
glNamedFramebufferRenderbufferEXT
glNamedFramebufferTexture
glNamedFramebufferTextureEXT
glNamedFramebufferTextureLayer
glNamedFramebufferTextureLayerEXT
glNamedRenderbufferStorage
glNamedRenderbufferStorageEXT
glNamedRenderbufferStorageMultisample
glNamedRenderbufferStorageMultisampleEXT
glNormal3f
glNormal3fContextANGLE
glNormal3x
glNormal3xContextANGLE
glNormalPointer
glNormalPointerContextANGLE
glObjectLabel
glObjectLabelContextANGLE
glObjectLabelKHR
glObjectLabelKHRContextANGLE
glObjectPtrLabel
glObjectPtrLabelContextANGLE
glObjectPtrLabelKHR
glObjectPtrLabelKHRContextANGLE
glOrthof
glOrthofContextANGLE
glOrthox
glOrthoxContextANGLE
glPatchParameterfv
glPatchParameteri
glPatchParameteriContextANGLE
glPatchParameteriEXT
glPatchParameteriOES
glPauseTransformFeedback
glPauseTransformFeedbackContextANGLE
glPixelStorei
glPixelStoreiContextANGLE
glPointParameterf
glPointParameterfARB
glPointParameterfContextANGLE
glPointParameterfEXT
glPointParameterfv
glPointParameterfvARB
glPointParameterfvContextANGLE
glPointParameterfvEXT
glPointParameteri
glPointParameteriv
glPointParameterx
glPointParameterxContextANGLE
glPointParameterxv
glPointParameterxvContextANGLE
glPointSize
glPointSizeContextANGLE
glPointSizePointerOES
glPointSizePointerOESContextANGLE
glPointSizex
glPointSizexContextANGLE
glPolygonOffset
glPolygonOffsetContextANGLE
glPolygonOffsetEXT
glPolygonOffsetx
glPolygonOffsetxContextANGLE
glPopDebugGroup
glPopDebugGroupContextANGLE
glPopDebugGroupKHR
glPopDebugGroupKHRContextANGLE
glPopGroupMarkerEXT
glPopGroupMarkerEXTContextANGLE
glPopMatrix
glPopMatrixContextANGLE
glPrimitiveBoundingBox
glPrimitiveBoundingBoxARB
glPrimitiveBoundingBoxContextANGLE
glPrimitiveBoundingBoxEXT
glPrimitiveBoundingBoxOES
glPrimitiveRestartIndex
glProgramBinary
glProgramBinaryContextANGLE
glProgramBinaryOES
glProgramBinaryOESContextANGLE
glProgramParameteri
glProgramParameteriARB
glProgramParameteriContextANGLE
glProgramParameteriEXT
glProgramUniform1d
glProgramUniform1dEXT
glProgramUniform1dv
glProgramUniform1dvEXT
glProgramUniform1f
glProgramUniform1fContextANGLE
glProgramUniform1fEXT
glProgramUniform1fv
glProgramUniform1fvContextANGLE
glProgramUniform1fvEXT
glProgramUniform1i
glProgramUniform1iContextANGLE
glProgramUniform1iEXT
glProgramUniform1iv
glProgramUniform1ivContextANGLE
glProgramUniform1ivEXT
glProgramUniform1ui
glProgramUniform1uiContextANGLE
glProgramUniform1uiEXT
glProgramUniform1uiv
glProgramUniform1uivContextANGLE
glProgramUniform1uivEXT
glProgramUniform2d
glProgramUniform2dEXT
glProgramUniform2dv
glProgramUniform2dvEXT
glProgramUniform2f
glProgramUniform2fContextANGLE
glProgramUniform2fEXT
glProgramUniform2fv
glProgramUniform2fvContextANGLE
glProgramUniform2fvEXT
glProgramUniform2i
glProgramUniform2iContextANGLE
glProgramUniform2iEXT
glProgramUniform2iv
glProgramUniform2ivContextANGLE
glProgramUniform2ivEXT
glProgramUniform2ui
glProgramUniform2uiContextANGLE
glProgramUniform2uiEXT
glProgramUniform2uiv
glProgramUniform2uivContextANGLE
glProgramUniform2uivEXT
glProgramUniform3d
glProgramUniform3dEXT
glProgramUniform3dv
glProgramUniform3dvEXT
glProgramUniform3f
glProgramUniform3fContextANGLE
glProgramUniform3fEXT
glProgramUniform3fv
glProgramUniform3fvContextANGLE
glProgramUniform3fvEXT
glProgramUniform3i
glProgramUniform3iContextANGLE
glProgramUniform3iEXT
glProgramUniform3iv
glProgramUniform3ivContextANGLE
glProgramUniform3ivEXT
glProgramUniform3ui
glProgramUniform3uiContextANGLE
glProgramUniform3uiEXT
glProgramUniform3uiv
glProgramUniform3uivContextANGLE
glProgramUniform3uivEXT
glProgramUniform4d
glProgramUniform4dEXT
glProgramUniform4dv
glProgramUniform4dvEXT
glProgramUniform4f
glProgramUniform4fContextANGLE
glProgramUniform4fEXT
glProgramUniform4fv
glProgramUniform4fvContextANGLE
glProgramUniform4fvEXT
glProgramUniform4i
glProgramUniform4iContextANGLE
glProgramUniform4iEXT
glProgramUniform4iv
glProgramUniform4ivContextANGLE
glProgramUniform4ivEXT
glProgramUniform4ui
glProgramUniform4uiContextANGLE
glProgramUniform4uiEXT
glProgramUniform4uiv
glProgramUniform4uivContextANGLE
glProgramUniform4uivEXT
glProgramUniformMatrix2dv
glProgramUniformMatrix2dvEXT
glProgramUniformMatrix2fv
glProgramUniformMatrix2fvContextANGLE
glProgramUniformMatrix2fvEXT
glProgramUniformMatrix2x3dv
glProgramUniformMatrix2x3dvEXT
glProgramUniformMatrix2x3fv
glProgramUniformMatrix2x3fvContextANGLE
glProgramUniformMatrix2x3fvEXT
glProgramUniformMatrix2x4dv
glProgramUniformMatrix2x4dvEXT
glProgramUniformMatrix2x4fv
glProgramUniformMatrix2x4fvContextANGLE
glProgramUniformMatrix2x4fvEXT
glProgramUniformMatrix3dv
glProgramUniformMatrix3dvEXT
glProgramUniformMatrix3fv
glProgramUniformMatrix3fvContextANGLE
glProgramUniformMatrix3fvEXT
glProgramUniformMatrix3x2dv
glProgramUniformMatrix3x2dvEXT
glProgramUniformMatrix3x2fv
glProgramUniformMatrix3x2fvContextANGLE
glProgramUniformMatrix3x2fvEXT
glProgramUniformMatrix3x4dv
glProgramUniformMatrix3x4dvEXT
glProgramUniformMatrix3x4fv
glProgramUniformMatrix3x4fvContextANGLE
glProgramUniformMatrix3x4fvEXT
glProgramUniformMatrix4dv
glProgramUniformMatrix4dvEXT
glProgramUniformMatrix4fv
glProgramUniformMatrix4fvContextANGLE
glProgramUniformMatrix4fvEXT
glProgramUniformMatrix4x2dv
glProgramUniformMatrix4x2dvEXT
glProgramUniformMatrix4x2fv
glProgramUniformMatrix4x2fvContextANGLE
glProgramUniformMatrix4x2fvEXT
glProgramUniformMatrix4x3dv
glProgramUniformMatrix4x3dvEXT
glProgramUniformMatrix4x3fv
glProgramUniformMatrix4x3fvContextANGLE
glProgramUniformMatrix4x3fvEXT
glProvokingVertex
glProvokingVertexANGLE
glProvokingVertexANGLEContextANGLE
glProvokingVertexEXT
glPushDebugGroup
glPushDebugGroupContextANGLE
glPushDebugGroupKHR
glPushDebugGroupKHRContextANGLE
glPushGroupMarkerEXT
glPushGroupMarkerEXTContextANGLE
glPushMatrix
glPushMatrixContextANGLE
glQueryCounterEXT
glQueryCounterEXTContextANGLE
glQueryMatrixxOES
glQueryMatrixxOESContextANGLE
glReadBuffer
glReadBufferContextANGLE
glReadPixels
glReadPixels: GL_IMPLEMENTATION_COLOR_READ_FORMAT advertised by the driver is not handled by RGBA16 readPixels workaround.
glReadPixelsContextANGLE
glReadPixelsRobustANGLE
glReadPixelsRobustANGLEContextANGLE
glReadnPixels
glReadnPixelsARB
glReadnPixelsContextANGLE
glReadnPixelsEXT
glReadnPixelsEXTContextANGLE
glReadnPixelsKHR
glReadnPixelsRobustANGLE
glReadnPixelsRobustANGLEContextANGLE
glReleaseShaderCompiler
glReleaseShaderCompilerContextANGLE
glRenderbufferStorage
glRenderbufferStorageContextANGLE
glRenderbufferStorageEXT
glRenderbufferStorageMultisample
glRenderbufferStorageMultisampleANGLE
glRenderbufferStorageMultisampleANGLEContextANGLE
glRenderbufferStorageMultisampleContextANGLE
glRenderbufferStorageMultisampleEXT
glRenderbufferStorageMultisampleEXTContextANGLE
glRenderbufferStorageOES
glRenderbufferStorageOESContextANGLE
glRequestExtensionANGLE
glRequestExtensionANGLEContextANGLE
glResumeTransformFeedback
glResumeTransformFeedbackContextANGLE
glRotatef
glRotatefContextANGLE
glRotatex
glRotatexContextANGLE
glSampleCoverage
glSampleCoverageARB
glSampleCoverageContextANGLE
glSampleCoveragex
glSampleCoveragexContextANGLE
glSampleMaski
glSampleMaskiANGLE
glSampleMaskiANGLEContextANGLE
glSampleMaskiContextANGLE
glSamplerParameterIiv
glSamplerParameterIivContextANGLE
glSamplerParameterIivEXT
glSamplerParameterIivOES
glSamplerParameterIivOESContextANGLE
glSamplerParameterIivRobustANGLE
glSamplerParameterIivRobustANGLEContextANGLE
glSamplerParameterIuiv
glSamplerParameterIuivContextANGLE
glSamplerParameterIuivEXT
glSamplerParameterIuivOES
glSamplerParameterIuivOESContextANGLE
glSamplerParameterIuivRobustANGLE
glSamplerParameterIuivRobustANGLEContextANGLE
glSamplerParameterf
glSamplerParameterfContextANGLE
glSamplerParameterfv
glSamplerParameterfvContextANGLE
glSamplerParameterfvRobustANGLE
glSamplerParameterfvRobustANGLEContextANGLE
glSamplerParameteri
glSamplerParameteriContextANGLE
glSamplerParameteriv
glSamplerParameterivContextANGLE
glSamplerParameterivRobustANGLE
glSamplerParameterivRobustANGLEContextANGLE
glScalef
glScalefContextANGLE
glScalex
glScalexContextANGLE
glScissor
glScissorArrayvOES
glScissorContextANGLE
glScissorIndexed
glScissorIndexedOES
glScissorIndexedv
glScissorIndexedvOES
glSemaphoreParameterui64vEXT
glSemaphoreParameterui64vEXTContextANGLE
glSetFenceNV
glSetFenceNVContextANGLE
glShadeModel
glShadeModelContextANGLE
glShaderBinary
glShaderBinaryContextANGLE
glShaderSource
glShaderSourceARB
glShaderSourceContextANGLE
glShaderStorageBlockBinding
glSignalSemaphoreEXT
glSignalSemaphoreEXTContextANGLE
glStencilFunc
glStencilFuncContextANGLE
glStencilFuncSeparate
glStencilFuncSeparateContextANGLE
glStencilMask
glStencilMaskContextANGLE
glStencilMaskSeparate
glStencilMaskSeparateContextANGLE
glStencilOp
glStencilOpContextANGLE
glStencilOpSeparate
glStencilOpSeparateContextANGLE
glTestFenceNV
glTestFenceNVContextANGLE
glTexBuffer
glTexBufferContextANGLE
glTexBufferRange
glTexBufferRangeContextANGLE
glTexBufferRangeEXT
glTexBufferRangeOES
glTexCoordPointer
glTexCoordPointerContextANGLE
glTexEnvf
glTexEnvfContextANGLE
glTexEnvfv
glTexEnvfvContextANGLE
glTexEnvi
glTexEnviContextANGLE
glTexEnviv
glTexEnvivContextANGLE
glTexEnvx
glTexEnvxContextANGLE
glTexEnvxv
glTexEnvxvContextANGLE
glTexGenfOES
glTexGenfOESContextANGLE
glTexGenfvOES
glTexGenfvOESContextANGLE
glTexGeniOES
glTexGeniOESContextANGLE
glTexGenivOES
glTexGenivOESContextANGLE
glTexGenxOES
glTexGenxOESContextANGLE
glTexGenxvOES
glTexGenxvOESContextANGLE
glTexImage2D
glTexImage2DContextANGLE
glTexImage2DExternalANGLE
glTexImage2DExternalANGLEContextANGLE
glTexImage2DMultisample
glTexImage2DRobustANGLE
glTexImage2DRobustANGLEContextANGLE
glTexImage3D
glTexImage3DContextANGLE
glTexImage3DMultisample
glTexImage3DOES
glTexImage3DOESContextANGLE
glTexImage3DRobustANGLE
glTexImage3DRobustANGLEContextANGLE
glTexParameterIiv
glTexParameterIivContextANGLE
glTexParameterIivEXT
glTexParameterIivOES
glTexParameterIivOESContextANGLE
glTexParameterIivRobustANGLE
glTexParameterIivRobustANGLEContextANGLE
glTexParameterIuiv
glTexParameterIuivContextANGLE
glTexParameterIuivEXT
glTexParameterIuivOES
glTexParameterIuivOESContextANGLE
glTexParameterIuivRobustANGLE
glTexParameterIuivRobustANGLEContextANGLE
glTexParameterf
glTexParameterfContextANGLE
glTexParameterfv
glTexParameterfvContextANGLE
glTexParameterfvRobustANGLE
glTexParameterfvRobustANGLEContextANGLE
glTexParameteri
glTexParameteriContextANGLE
glTexParameteriv
glTexParameterivContextANGLE
glTexParameterivRobustANGLE
glTexParameterivRobustANGLEContextANGLE
glTexParameterx
glTexParameterxContextANGLE
glTexParameterxv
glTexParameterxvContextANGLE
glTexStorage1DEXT
glTexStorage1DEXTContextANGLE
glTexStorage2D
glTexStorage2DContextANGLE
glTexStorage2DEXT
glTexStorage2DEXTContextANGLE
glTexStorage2DMultisample
glTexStorage2DMultisampleANGLE
glTexStorage2DMultisampleANGLEContextANGLE
glTexStorage2DMultisampleContextANGLE
glTexStorage3D
glTexStorage3DContextANGLE
glTexStorage3DEXT
glTexStorage3DEXTContextANGLE
glTexStorage3DMultisample
glTexStorage3DMultisampleContextANGLE
glTexStorage3DMultisampleOES
glTexStorage3DMultisampleOESContextANGLE
glTexStorageMem2DEXT
glTexStorageMem2DEXTContextANGLE
glTexStorageMem2DMultisampleEXT
glTexStorageMem2DMultisampleEXTContextANGLE
glTexStorageMem3DEXT
glTexStorageMem3DEXTContextANGLE
glTexStorageMem3DMultisampleEXT
glTexStorageMem3DMultisampleEXTContextANGLE
glTexSubImage1DEXT
glTexSubImage2D
glTexSubImage2DContextANGLE
glTexSubImage2DEXT
glTexSubImage2DRobustANGLE
glTexSubImage2DRobustANGLEContextANGLE
glTexSubImage3D
glTexSubImage3DContextANGLE
glTexSubImage3DEXT
glTexSubImage3DOES
glTexSubImage3DOESContextANGLE
glTexSubImage3DRobustANGLE
glTexSubImage3DRobustANGLEContextANGLE
glTextureBarrier
glTextureBufferEXT
glTextureBufferRange
glTextureBufferRangeEXT
glTextureParameterIiv
glTextureParameterIivEXT
glTextureParameterIuiv
glTextureParameterIuivEXT
glTextureParameterf
glTextureParameterfEXT
glTextureParameterfv
glTextureParameterfvEXT
glTextureParameteri
glTextureParameteriEXT
glTextureParameteriv
glTextureParameterivEXT
glTextureStorage1D
glTextureStorage1DEXT
glTextureStorage2D
glTextureStorage2DEXT
glTextureStorage2DMultisample
glTextureStorage2DMultisampleEXT
glTextureStorage3D
glTextureStorage3DEXT
glTextureStorage3DMultisample
glTextureStorage3DMultisampleEXT
glTextureStorageMem2DEXT
glTextureStorageMem2DMultisampleEXT
glTextureStorageMem3DEXT
glTextureStorageMem3DMultisampleEXT
glTextureSubImage1D
glTextureSubImage1DEXT
glTextureSubImage2D
glTextureSubImage2DEXT
glTextureSubImage3D
glTextureSubImage3DEXT
glTextureViewEXT
glTextureViewOES
glTransformFeedbackBufferBase
glTransformFeedbackBufferRange
glTransformFeedbackVaryings
glTransformFeedbackVaryingsContextANGLE
glTransformFeedbackVaryingsEXT
glTranslatef
glTranslatefContextANGLE
glTranslatex
glTranslatexContextANGLE
glUniform1f
glUniform1fContextANGLE
glUniform1fv
glUniform1fvContextANGLE
glUniform1i
glUniform1iContextANGLE
glUniform1iv
glUniform1ivContextANGLE
glUniform1ui
glUniform1uiContextANGLE
glUniform1uiv
glUniform1uivContextANGLE
glUniform1uivEXT
glUniform2f
glUniform2fContextANGLE
glUniform2fv
glUniform2fvContextANGLE
glUniform2i
glUniform2iContextANGLE
glUniform2iv
glUniform2ivContextANGLE
glUniform2ui
glUniform2uiContextANGLE
glUniform2uiv
glUniform2uivContextANGLE
glUniform2uivEXT
glUniform3f
glUniform3fContextANGLE
glUniform3fv
glUniform3fvContextANGLE
glUniform3i
glUniform3iContextANGLE
glUniform3iv
glUniform3ivContextANGLE
glUniform3ui
glUniform3uiContextANGLE
glUniform3uiv
glUniform3uivContextANGLE
glUniform3uivEXT
glUniform4f
glUniform4fContextANGLE
glUniform4fv
glUniform4fvContextANGLE
glUniform4i
glUniform4iContextANGLE
glUniform4iv
glUniform4ivContextANGLE
glUniform4ui
glUniform4uiContextANGLE
glUniform4uiv
glUniform4uivContextANGLE
glUniform4uivEXT
glUniformBlockBinding
glUniformBlockBindingContextANGLE
glUniformMatrix2dv
glUniformMatrix2fv
glUniformMatrix2fvARB
glUniformMatrix2fvContextANGLE
glUniformMatrix2x3dv
glUniformMatrix2x3fv
glUniformMatrix2x3fvContextANGLE
glUniformMatrix2x4dv
glUniformMatrix2x4fv
glUniformMatrix2x4fvContextANGLE
glUniformMatrix3dv
glUniformMatrix3fv
glUniformMatrix3fvARB
glUniformMatrix3fvContextANGLE
glUniformMatrix3x2dv
glUniformMatrix3x2fv
glUniformMatrix3x2fvContextANGLE
glUniformMatrix3x4dv
glUniformMatrix3x4fv
glUniformMatrix3x4fvContextANGLE
glUniformMatrix4dv
glUniformMatrix4fv
glUniformMatrix4fvARB
glUniformMatrix4fvContextANGLE
glUniformMatrix4x2dv
glUniformMatrix4x2fv
glUniformMatrix4x2fvContextANGLE
glUniformMatrix4x3dv
glUniformMatrix4x3fv
glUniformMatrix4x3fvContextANGLE
glUniformSubroutinesuiv
glUnmapBuffer
glUnmapBufferARB
glUnmapBufferContextANGLE
glUnmapBufferOES
glUnmapBufferOESContextANGLE
glUnmapNamedBuffer
glUnmapNamedBufferEXT
glUseProgram
glUseProgramContextANGLE
glUseProgramStages
glUseProgramStagesContextANGLE
glUseProgramStagesEXT
glValidateProgram
glValidateProgramARB
glValidateProgramContextANGLE
glValidateProgramPipeline
glValidateProgramPipelineContextANGLE
glValidateProgramPipelineEXT
glVertexArrayAttribBinding
glVertexArrayAttribFormat
glVertexArrayAttribIFormat
glVertexArrayAttribLFormat
glVertexArrayBindingDivisor
glVertexArrayElementBuffer
glVertexArrayVertexBuffer
glVertexArrayVertexBuffers
glVertexAttrib1d
glVertexAttrib1dARB
glVertexAttrib1dv
glVertexAttrib1dvARB
glVertexAttrib1f
glVertexAttrib1fARB
glVertexAttrib1fContextANGLE
glVertexAttrib1fv
glVertexAttrib1fvARB
glVertexAttrib1fvContextANGLE
glVertexAttrib1s
glVertexAttrib1sARB
glVertexAttrib1sv
glVertexAttrib1svARB
glVertexAttrib2d
glVertexAttrib2dARB
glVertexAttrib2dv
glVertexAttrib2dvARB
glVertexAttrib2f
glVertexAttrib2fARB
glVertexAttrib2fContextANGLE
glVertexAttrib2fv
glVertexAttrib2fvARB
glVertexAttrib2fvContextANGLE
glVertexAttrib2s
glVertexAttrib2sARB
glVertexAttrib2sv
glVertexAttrib2svARB
glVertexAttrib3d
glVertexAttrib3dARB
glVertexAttrib3dv
glVertexAttrib3dvARB
glVertexAttrib3f
glVertexAttrib3fARB
glVertexAttrib3fContextANGLE
glVertexAttrib3fv
glVertexAttrib3fvARB
glVertexAttrib3fvContextANGLE
glVertexAttrib3s
glVertexAttrib3sARB
glVertexAttrib3sv
glVertexAttrib3svARB
glVertexAttrib4Nbv
glVertexAttrib4NbvARB
glVertexAttrib4Niv
glVertexAttrib4NivARB
glVertexAttrib4Nsv
glVertexAttrib4NsvARB
glVertexAttrib4Nub
glVertexAttrib4NubARB
glVertexAttrib4Nubv
glVertexAttrib4NubvARB
glVertexAttrib4Nuiv
glVertexAttrib4NuivARB
glVertexAttrib4Nusv
glVertexAttrib4NusvARB
glVertexAttrib4bv
glVertexAttrib4bvARB
glVertexAttrib4d
glVertexAttrib4dARB
glVertexAttrib4dv
glVertexAttrib4dvARB
glVertexAttrib4f
glVertexAttrib4fARB
glVertexAttrib4fContextANGLE
glVertexAttrib4fv
glVertexAttrib4fvARB
glVertexAttrib4fvContextANGLE
glVertexAttrib4iv
glVertexAttrib4ivARB
glVertexAttrib4s
glVertexAttrib4sARB
glVertexAttrib4sv
glVertexAttrib4svARB
glVertexAttrib4ubv
glVertexAttrib4ubvARB
glVertexAttrib4uiv
glVertexAttrib4uivARB
glVertexAttrib4usv
glVertexAttrib4usvARB
glVertexAttribBinding
glVertexAttribBindingContextANGLE
glVertexAttribDivisor
glVertexAttribDivisorANGLE
glVertexAttribDivisorANGLEContextANGLE
glVertexAttribDivisorARB
glVertexAttribDivisorContextANGLE
glVertexAttribDivisorEXT
glVertexAttribDivisorEXTContextANGLE
glVertexAttribFormat
glVertexAttribFormatContextANGLE
glVertexAttribI1i
glVertexAttribI1iEXT
glVertexAttribI1iv
glVertexAttribI1ivEXT
glVertexAttribI1ui
glVertexAttribI1uiEXT
glVertexAttribI1uiv
glVertexAttribI1uivEXT
glVertexAttribI2i
glVertexAttribI2iEXT
glVertexAttribI2iv
glVertexAttribI2ivEXT
glVertexAttribI2ui
glVertexAttribI2uiEXT
glVertexAttribI2uiv
glVertexAttribI2uivEXT
glVertexAttribI3i
glVertexAttribI3iEXT
glVertexAttribI3iv
glVertexAttribI3ivEXT
glVertexAttribI3ui
glVertexAttribI3uiEXT
glVertexAttribI3uiv
glVertexAttribI3uivEXT
glVertexAttribI4bv
glVertexAttribI4bvEXT
glVertexAttribI4i
glVertexAttribI4iContextANGLE
glVertexAttribI4iEXT
glVertexAttribI4iv
glVertexAttribI4ivContextANGLE
glVertexAttribI4ivEXT
glVertexAttribI4sv
glVertexAttribI4svEXT
glVertexAttribI4ubv
glVertexAttribI4ubvEXT
glVertexAttribI4ui
glVertexAttribI4uiContextANGLE
glVertexAttribI4uiEXT
glVertexAttribI4uiv
glVertexAttribI4uivContextANGLE
glVertexAttribI4uivEXT
glVertexAttribI4usv
glVertexAttribI4usvEXT
glVertexAttribIFormat
glVertexAttribIFormatContextANGLE
glVertexAttribIPointer
glVertexAttribIPointerContextANGLE
glVertexAttribIPointerEXT
glVertexAttribL1d
glVertexAttribL1dEXT
glVertexAttribL1dv
glVertexAttribL1dvEXT
glVertexAttribL2d
glVertexAttribL2dEXT
glVertexAttribL2dv
glVertexAttribL2dvEXT
glVertexAttribL3d
glVertexAttribL3dEXT
glVertexAttribL3dv
glVertexAttribL3dvEXT
glVertexAttribL4d
glVertexAttribL4dEXT
glVertexAttribL4dv
glVertexAttribL4dvEXT
glVertexAttribLFormat
glVertexAttribLPointer
glVertexAttribLPointerEXT
glVertexAttribP1ui
glVertexAttribP1uiv
glVertexAttribP2ui
glVertexAttribP2uiv
glVertexAttribP3ui
glVertexAttribP3uiv
glVertexAttribP4ui
glVertexAttribP4uiv
glVertexAttribPointer
glVertexAttribPointerARB
glVertexAttribPointerContextANGLE
glVertexBindingDivisor
glVertexBindingDivisorContextANGLE
glVertexPointer
glVertexPointerContextANGLE
glViewport
glViewportArrayv
glViewportArrayvOES
glViewportContextANGLE
glViewportIndexedf
glViewportIndexedfOES
glViewportIndexedfv
glViewportIndexedfvOES
glWaitSemaphoreEXT
glWaitSemaphoreEXTContextANGLE
glWaitSync
glWaitSyncContextANGLE
glWeightPointerOES
glWeightPointerOESContextANGLE
glXGetMscRateOML failed.
glXGetProcAddressARB
glXGetSyncValuesOML failed.
glXQueryExtensionsString returned NULL
gl_BackColor
gl_BackSecondaryColor
gl_BaryCoordNV
gl_BaryCoordNoPerspAMD
gl_BaryCoordNoPerspCentroidAMD
gl_BaryCoordNoPerspNV
gl_BaryCoordNoPerspSampleAMD
gl_BaryCoordPullModelAMD
gl_BaryCoordSmoothAMD
gl_BaryCoordSmoothCentroidAMD
gl_BaryCoordSmoothSampleAMD
gl_BaseInstance
gl_BaseInstanceARB
gl_BaseVertex
gl_BaseVertexARB
gl_BoundingBox
gl_BoundingBoxEXT
gl_BoundingBoxOES
gl_ClipDistance
gl_ClipDistance array size
gl_ClipDistancePerViewNV array size
gl_ClipVertex
gl_Color
gl_CullDistance
gl_CullDistance array size
gl_CullDistancePerViewNV array size
gl_DepthRange
gl_DepthRangeParameters
gl_DeviceIndex
gl_DrawID
gl_DrawIDARB
gl_FogCoord
gl_FogFragCoord
gl_FragCoord
gl_FragCoord can only be declared invariant if and only if gl_Position is declared invariant.
gl_FragCoord origin is upper left
gl_FragCoord pixel center is integer
gl_FragCoord redeclarations must match across shaders
gl_FragDepth
gl_FragDepth is not clamped correctly when rendering to a floating point depth buffer
gl_FragDepthEXT
gl_FragFullyCoveredNV
gl_FragInvocationCountEXT
gl_FragSizeEXT
gl_FragStencilRefARB
gl_FragmentSizeNV
gl_FrontColor
gl_FrontSecondaryColor
gl_GeometryIndexEXT
gl_GlobalInvocationID
gl_HitKindEXT
gl_HitKindNV
gl_HitTEXT
gl_HitTNV
gl_IncomingRayFlagsEXT
gl_IncomingRayFlagsNV
gl_InstanceCustomIndexEXT
gl_InstanceCustomIndexNV
gl_InstanceId
gl_InstanceIndex
gl_InvocationsPerPixelNV
gl_LastFragColor
gl_LastFragColorARM
gl_LastFragData
gl_LaunchIDEXT
gl_LaunchIDNV
gl_LaunchSizeEXT
gl_LaunchSizeNV
gl_Layer
gl_MaxAtomicCounterBufferSize
gl_MaxCombinedAtomicCounterBuffers
gl_MaxCombinedAtomicCounters
gl_MaxCombinedImageUniforms
gl_MaxCombinedShaderOutputResources
gl_MaxComputeAtomicCounterBuffers
gl_MaxComputeAtomicCounters
gl_MaxComputeImageUniforms
gl_MaxComputeTextureImageUnits
gl_MaxComputeUniformComponents
gl_MaxComputeWorkGroupCount
gl_MaxCullDistances
gl_MaxDualSourceDrawBuffersEXT
gl_MaxFragmentAtomicCounterBuffers
gl_MaxFragmentAtomicCounters
gl_MaxFragmentImageUniforms
gl_MaxFragmentInputVectors
gl_MaxFragmentUniformVectors
gl_MaxGeometryAtomicCounterBuffers
gl_MaxGeometryAtomicCounters
gl_MaxGeometryImageUniforms
gl_MaxGeometryInputComponents
gl_MaxGeometryOutputComponents
gl_MaxGeometryTextureImageUnits
gl_MaxGeometryTotalOutputComponents
gl_MaxGeometryUniformComponents
gl_MaxMeshViewCountNV
gl_MaxProgramTexelOffset
gl_MaxTextureCoords
gl_MaxTextureImageUnits
gl_MaxTransformFeedbackBuffers
gl_MaxTransformFeedbackBuffers is %d
gl_MaxTransformFeedbackInterleavedComponents
gl_MaxTransformFeedbackInterleavedComponents is %d
gl_MaxVaryingVectors
gl_MaxVertexAtomicCounterBuffers
gl_MaxVertexAtomicCounters
gl_MaxVertexAttribs
gl_MaxVertexImageUniforms
gl_MaxVertexOutputVectors
gl_MaxVertexTextureImageUnits
gl_MaxVertexUniformVectors
gl_MaxViewports
gl_MeshPrimitive
gl_MeshPrimitivesNV
gl_MeshVerticesNV
gl_MeshViewCountNV
gl_MeshViewIndicesNV
gl_MinProgramTexelOffset
gl_MultiTexCoord0
gl_MultiTexCoord1
gl_MultiTexCoord2
gl_MultiTexCoord3
gl_MultiTexCoord4
gl_MultiTexCoord5
gl_MultiTexCoord6
gl_MultiTexCoord7
gl_Normal
gl_NumSamples
gl_NumSubgroups
gl_ObjectRayDirectionEXT
gl_ObjectRayDirectionNV
gl_ObjectRayOriginEXT
gl_ObjectRayOriginNV
gl_ObjectToWorld3x4EXT
gl_ObjectToWorldEXT
gl_ObjectToWorldNV
gl_PatchVertices
gl_PatchVerticesIn
gl_PerVertex
gl_PointCoord can only be declared invariant if and only if gl_PointSize is declared invariant.
gl_PointSize
gl_Position
gl_Position = vec4((a_texcoord * 2.0) - 1.0, 0.0, 1.0);
gl_PrimitiveCountNV
gl_PrimitiveID
gl_PrimitiveIndicesNV
gl_RayFlagsSkipAABBEXT
gl_RayFlagsSkipTrianglesEXT
gl_RayTmaxEXT
gl_RayTmaxNV
gl_RayTminEXT
gl_RayTminNV
gl_SIMDGroupSizeAMD
gl_SMCountNV
gl_SMIDNV
gl_SampleID
gl_SampleMask
gl_SampleMaskIn
gl_SamplePosition
gl_ScopeDevice
gl_ScopeInvocation
gl_ScopeSubgroup
gl_ScopeWorkgroup
gl_SecondaryColor
gl_SecondaryFragColorEXT
gl_SecondaryFragDataEXT
gl_SecondaryPositionNV
gl_SecondaryViewportMaskNV
gl_SemanticsAcquire
gl_SemanticsAcquire must not be used with (image) atomic store
gl_SemanticsAcquireRelease must not be used with (image) atomic load/store
gl_SemanticsMakeAvailable
gl_SemanticsMakeAvailable requires gl_SemanticsRelease or gl_SemanticsAcquireRelease
gl_SemanticsMakeVisible
gl_SemanticsMakeVisible requires gl_SemanticsAcquire or gl_SemanticsAcquireRelease
gl_SemanticsRelaxed
gl_SemanticsRelease
gl_SemanticsRelease must not be used with (image) atomic load
gl_SemanticsVolatile
gl_SemanticsVolatile must not be used with memoryBarrier or controlBarrier
gl_StorageSemanticsBuffer
gl_StorageSemanticsImage
gl_StorageSemanticsNone
gl_StorageSemanticsOutput
gl_StorageSemanticsShared
gl_SubGroupEqMaskARB
gl_SubGroupGeMaskARB
gl_SubGroupGtMaskARB
gl_SubGroupInvocationARB
gl_SubGroupLeMaskARB
gl_SubGroupLtMaskARB
gl_SubGroupSizeARB
gl_SubgroupEqMask
gl_SubgroupGeMask
gl_SubgroupGtMask
gl_SubgroupID
gl_SubgroupLeMask
gl_SubgroupLtMask
gl_TaskCountNV
gl_TessCoord
gl_TessLevelInner
gl_TessLevelOuter
gl_TexCoord
gl_TexCoord array size
gl_Vertex
gl_VertexID in GLSL vertex shader doesn't include base vertex value
gl_VertexId
gl_VertexIndex
gl_ViewIndex
gl_ViewportIndex
gl_ViewportMask
gl_WarpIDNV
gl_WarpsPerSMNV
gl_WorldRayDirectionEXT
gl_WorldRayDirectionNV
gl_WorldRayOriginEXT
gl_WorldRayOriginNV
gl_WorldToObject3x4EXT
gl_WorldToObjectEXT
gl_WorldToObjectNV
gl_egl::GLComponentTypeToEGLColorComponentType(unsigned int)
gl_egl::GLObjectHandleToEGLClientBuffer(unsigned int)
gl_out
global
global binding
global const initializers must be constant
global storage input qualifier cannot be used in a compute shader
global storage output qualifier cannot be used in a compute shader
global variable initializers must be constant expressions
global variable initializers should be constant expressions (uniforms and globals are allowed in global initializers for legacy compatibility)
global variables) and section 10 (function
global_state.cpp
globallycoherent
glsl_entries
glslang::(anonymous namespace)::BaseFunctions
glslang::(anonymous namespace)::CustomFunctions
glslang::(anonymous namespace)::DerivativeFunctions
glslang::(anonymous namespace)::Es300Desktop130Version
glslang::(anonymous namespace)::Es310Desktop420Version
glslang::(anonymous namespace)::Es310Desktop450Version
glslang::(anonymous namespace)::TypeString
glslang::(anonymous namespace)::gMutex
glslang::(anonymous namespace)::op_add(int, int)
glslang::(anonymous namespace)::op_and(int, int)
glslang::(anonymous namespace)::op_cmpl(int)
glslang::(anonymous namespace)::op_div(int, int)
glslang::(anonymous namespace)::op_eq(int, int)
glslang::(anonymous namespace)::op_ge(int, int)
glslang::(anonymous namespace)::op_gt(int, int)
glslang::(anonymous namespace)::op_le(int, int)
glslang::(anonymous namespace)::op_logand(int, int)
glslang::(anonymous namespace)::op_logor(int, int)
glslang::(anonymous namespace)::op_lt(int, int)
glslang::(anonymous namespace)::op_mod(int, int)
glslang::(anonymous namespace)::op_mul(int, int)
glslang::(anonymous namespace)::op_ne(int, int)
glslang::(anonymous namespace)::op_neg(int)
glslang::(anonymous namespace)::op_not(int)
glslang::(anonymous namespace)::op_or(int, int)
glslang::(anonymous namespace)::op_pos(int)
glslang::(anonymous namespace)::op_shl(int, int)
glslang::(anonymous namespace)::op_shr(int, int)
glslang::(anonymous namespace)::op_sub(int, int)
glslang::(anonymous namespace)::op_xor(int, int)
glslang::AEP_geometry_point_size
glslang::AEP_geometry_shader
glslang::AEP_gpu_shader5
glslang::AEP_shader_io_blocks
glslang::AEP_tessellation_point_size
glslang::AEP_tessellation_shader
glslang::AEP_texture_buffer
glslang::AEP_texture_cube_map_array
glslang::BuiltInVariable(char const*, char const*, glslang::TBuiltInVariable, glslang::TSymbolTable&)
glslang::BuiltInVariable(char const*, glslang::TBuiltInVariable, glslang::TSymbolTable&)
glslang::DefaultTBuiltInResource
glslang::E_GL_AMD_gcn_shader
glslang::E_GL_AMD_gpu_shader_half_float_fetch
glslang::E_GL_AMD_shader_ballot
glslang::E_GL_AMD_shader_explicit_vertex_parameter
glslang::E_GL_AMD_shader_fragment_mask
glslang::E_GL_AMD_shader_image_load_store_lod
glslang::E_GL_AMD_shader_trinary_minmax
glslang::E_GL_AMD_texture_gather_bias_lod
glslang::E_GL_ARB_compute_shader
glslang::E_GL_ARB_derivative_control
glslang::E_GL_ARB_enhanced_layouts
glslang::E_GL_ARB_fragment_shader_interlock
glslang::E_GL_ARB_sample_shading
glslang::E_GL_ARB_shader_atomic_counters
glslang::E_GL_ARB_shader_ballot
glslang::E_GL_ARB_shader_bit_encoding
glslang::E_GL_ARB_shader_clock
glslang::E_GL_ARB_shader_draw_parameters
glslang::E_GL_ARB_shader_group_vote
glslang::E_GL_ARB_shader_image_load_store
glslang::E_GL_ARB_shader_image_size
glslang::E_GL_ARB_shader_stencil_export
glslang::E_GL_ARB_shader_storage_buffer_object
glslang::E_GL_ARB_shader_texture_lod
glslang::E_GL_ARB_shading_language_420pack
glslang::E_GL_ARB_shading_language_packing
glslang::E_GL_ARB_sparse_texture2
glslang::E_GL_ARB_sparse_texture_clamp
glslang::E_GL_ARB_tessellation_shader
glslang::E_GL_ARB_texture_multisample
glslang::E_GL_ARB_texture_query_lod
glslang::E_GL_ARB_texture_rectangle
glslang::E_GL_ARB_viewport_array
glslang::E_GL_EXT_YUV_target
glslang::E_GL_EXT_blend_func_extended
glslang::E_GL_EXT_buffer_reference
glslang::E_GL_EXT_buffer_reference2
glslang::E_GL_EXT_buffer_reference_uvec2
glslang::E_GL_EXT_control_flow_attributes
glslang::E_GL_EXT_debug_printf
glslang::E_GL_EXT_demote_to_helper_invocation
glslang::E_GL_EXT_device_group
glslang::E_GL_EXT_frag_depth
glslang::E_GL_EXT_fragment_invocation_density
glslang::E_GL_EXT_multiview
glslang::E_GL_EXT_nonuniform_qualifier
glslang::E_GL_EXT_primitive_bounding_box
glslang::E_GL_EXT_ray_flags_primitive_culling
glslang::E_GL_EXT_ray_query
glslang::E_GL_EXT_ray_tracing
glslang::E_GL_EXT_samplerless_texture_functions
glslang::E_GL_EXT_scalar_block_layout
glslang::E_GL_EXT_shader_integer_mix
glslang::E_GL_EXT_shader_realtime_clock
glslang::E_GL_EXT_shader_subgroup_extended_types_float16
glslang::E_GL_EXT_shader_subgroup_extended_types_int16
glslang::E_GL_EXT_shader_subgroup_extended_types_int64
glslang::E_GL_EXT_shader_subgroup_extended_types_int8
glslang::E_GL_EXT_shader_texture_lod
glslang::E_GL_EXT_shadow_samplers
glslang::E_GL_GOOGLE_cpp_style_line_directive
glslang::E_GL_GOOGLE_include_directive
glslang::E_GL_INTEL_shader_integer_functions2
glslang::E_GL_KHR_blend_equation_advanced
glslang::E_GL_KHR_memory_scope_semantics
glslang::E_GL_KHR_shader_subgroup_arithmetic
glslang::E_GL_KHR_shader_subgroup_ballot
glslang::E_GL_KHR_shader_subgroup_basic
glslang::E_GL_KHR_shader_subgroup_clustered
glslang::E_GL_KHR_shader_subgroup_quad
glslang::E_GL_KHR_shader_subgroup_shuffle
glslang::E_GL_KHR_shader_subgroup_shuffle_relative
glslang::E_GL_KHR_shader_subgroup_vote
glslang::E_GL_NVX_multiview_per_view_attributes
glslang::E_GL_NV_compute_shader_derivatives
glslang::E_GL_NV_conservative_raster_underestimation
glslang::E_GL_NV_fragment_shader_barycentric
glslang::E_GL_NV_mesh_shader
glslang::E_GL_NV_ray_tracing
glslang::E_GL_NV_sample_mask_override_coverage
glslang::E_GL_NV_shader_sm_builtins
glslang::E_GL_NV_shader_subgroup_partitioned
glslang::E_GL_NV_shader_texture_footprint
glslang::E_GL_NV_shading_rate_image
glslang::E_GL_NV_stereo_view_rendering
glslang::E_GL_NV_viewport_array2
glslang::E_GL_OES_EGL_image_external
glslang::E_GL_OES_EGL_image_external_essl3
glslang::E_GL_OES_primitive_bounding_box
glslang::E_GL_OES_sample_variables
glslang::E_GL_OES_shader_image_atomic
glslang::E_GL_OES_shader_multisample_interpolation
glslang::E_GL_OES_standard_derivatives
glslang::E_GL_OES_texture_storage_multisample_2d_array
glslang::E_SPV_NV_geometry_shader_passthrough
glslang::GetBuiltInVariableString(glslang::TBuiltInVariable)
glslang::GetGlobalLock()
glslang::GetKhronosToolId()
glslang::GetThreadPoolAllocator()
glslang::GlslangToSpv(glslang::TIntermediate const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, glslang::SpvOptions*)
glslang::GlslangToSpv(glslang::TIntermediate const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions*)
glslang::HlslGrammar::acceptAnnotations(glslang::TQualifier&)
glslang::HlslGrammar::acceptArguments(glslang::TFunction*, glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptArraySpecifier(glslang::TArraySizes*&)
glslang::HlslGrammar::acceptAssignmentExpression(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptAttributes(glslang::TList<glslang::TAttributeArgs>&)
glslang::HlslGrammar::acceptBinaryExpression(glslang::TIntermTyped*&, glslang::PrecedenceLevel)
glslang::HlslGrammar::acceptCaseLabel(TIntermNode*&)
glslang::HlslGrammar::acceptCompilationUnit()
glslang::HlslGrammar::acceptCompoundStatement(TIntermNode*&)
glslang::HlslGrammar::acceptConditionalExpression(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptConstantBufferType(glslang::TType&)
glslang::HlslGrammar::acceptConstructor(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptControlDeclaration(TIntermNode*&)
glslang::HlslGrammar::acceptDeclaration(TIntermNode*&)
glslang::HlslGrammar::acceptDefaultParameterDeclaration(glslang::TType const&, glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptExpression(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptFullySpecifiedType(glslang::TType&, TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&, bool)
glslang::HlslGrammar::acceptFunctionBody(glslang::TFunctionDeclarator&, TIntermNode*&)
glslang::HlslGrammar::acceptFunctionCall(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TIntermTyped*&, glslang::TIntermTyped*)
glslang::HlslGrammar::acceptFunctionParameters(glslang::TFunction&)
glslang::HlslGrammar::acceptIdentifier(glslang::HlslToken&)
glslang::HlslGrammar::acceptInitializer(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptIterationStatement(TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslGrammar::acceptJumpStatement(TIntermNode*&)
glslang::HlslGrammar::acceptLayoutQualifierList(glslang::TQualifier&)
glslang::HlslGrammar::acceptLiteral(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptMatrixTemplateType(glslang::TType&)
glslang::HlslGrammar::acceptMemberFunctionDefinition(TIntermNode*&, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TFunctionDeclarator&)
glslang::HlslGrammar::acceptParameterDeclaration(glslang::TFunction&)
glslang::HlslGrammar::acceptParenExpression(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptPostDecls(glslang::TQualifier&)
glslang::HlslGrammar::acceptPostfixExpression(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptQualifier(glslang::TQualifier&)
glslang::HlslGrammar::acceptSamplerState()
glslang::HlslGrammar::acceptSamplerTypeDX9(glslang::TType&)
glslang::HlslGrammar::acceptSelectionStatement(TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslGrammar::acceptStatement(TIntermNode*&)
glslang::HlslGrammar::acceptStreamOutTemplateType(glslang::TType&, glslang::TLayoutGeometry&)
glslang::HlslGrammar::acceptStruct(glslang::TType&, TIntermNode*&)
glslang::HlslGrammar::acceptStructBufferType(glslang::TType&)
glslang::HlslGrammar::acceptStructDeclarationList(glslang::TVector<glslang::TTypeLoc>*&, TIntermNode*&, glslang::TVector<glslang::TFunctionDeclarator>&)
glslang::HlslGrammar::acceptSubpassInputType(glslang::TType&)
glslang::HlslGrammar::acceptSwitchStatement(TIntermNode*&, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslGrammar::acceptTessellationPatchTemplateType(glslang::TType&)
glslang::HlslGrammar::acceptTextureBufferType(glslang::TType&)
glslang::HlslGrammar::acceptTextureType(glslang::TType&)
glslang::HlslGrammar::acceptType(glslang::TType&, TIntermNode*&)
glslang::HlslGrammar::acceptUnaryExpression(glslang::TIntermTyped*&)
glslang::HlslGrammar::acceptVectorTemplateType(glslang::TType&)
glslang::HlslGrammar::captureBlockTokens(glslang::TVector<glslang::HlslToken>&)
glslang::HlslGrammar::getTypeString(glslang::EHlslTokenClass) const
glslang::HlslGrammar::parse()
glslang::HlslGrammar::~HlslGrammar()
glslang::HlslOpMap::assignment(glslang::EHlslTokenClass)
glslang::HlslOpMap::binary(glslang::EHlslTokenClass)
glslang::HlslOpMap::postUnary(glslang::EHlslTokenClass)
glslang::HlslOpMap::preUnary(glslang::EHlslTokenClass)
glslang::HlslOpMap::precedenceLevel(glslang::TOperator)
glslang::HlslParseContext::HlslParseContext(glslang::TSymbolTable&, glslang::TIntermediate&, bool, int, EProfile, glslang::SpvVersion const&, EShLanguage, TInfoSink&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool, EShMessages)
glslang::HlslParseContext::addConstructor(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TType const&)
glslang::HlslParseContext::addFlattenedMember(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, bool, glslang::TQualifier const&, glslang::TArraySizes const*)
glslang::HlslParseContext::addGenMulArgumentConversion(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TIntermTyped*&)
glslang::HlslParseContext::addInputArgumentConversions(glslang::TFunction const&, glslang::TIntermTyped*&)
glslang::HlslParseContext::addOutputArgumentConversions(glslang::TFunction const&, glslang::TIntermOperator&)
glslang::HlslParseContext::addOutputArgumentConversions(glslang::TFunction const&, glslang::TIntermOperator&)::$_25::operator()(int) const
glslang::HlslParseContext::addPatchConstantInvocation()
glslang::HlslParseContext::addPatchConstantInvocation()::$_37::operator()(glslang::TFunction const&, std::__1::set<glslang::HlslParseContext::tInterstageIoData, std::__1::less<glslang::HlslParseContext::tInterstageIoData>, std::__1::allocator<glslang::HlslParseContext::tInterstageIoData> >&) const
glslang::HlslParseContext::addPatchConstantInvocation()::$_39::operator()(glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TIntermSymbol**) const
glslang::HlslParseContext::addScopeMangler(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&)
glslang::HlslParseContext::addStructBuffArguments(glslang::TSourceLoc const&, glslang::TIntermAggregate*&)
glslang::HlslParseContext::addStructBufferHiddenCounterParam(glslang::TSourceLoc const&, glslang::TParameter&, glslang::TIntermAggregate*&)
glslang::HlslParseContext::addSwitch(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermAggregate*, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslParseContext::arraySizeCheck(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TArraySize&)
glslang::HlslParseContext::assignClipCullDistance(glslang::TSourceLoc const&, glslang::TOperator, int, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::assignPosition(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::assignToInterface(glslang::TVariable&)
glslang::HlslParseContext::assignToInterface(glslang::TVariable&)::$_8::operator()(glslang::TVariable&) const
glslang::HlslParseContext::attributeFromName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
glslang::HlslParseContext::builtInOpCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermOperator&)
glslang::HlslParseContext::constructAggregate(TIntermNode*, glslang::TType const&, int, glslang::TSourceLoc const&)
glslang::HlslParseContext::constructBuiltIn(glslang::TType const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc const&, bool)
glslang::HlslParseContext::constructorError(glslang::TSourceLoc const&, TIntermNode*, glslang::TFunction&, glslang::TOperator, glslang::TType&)
glslang::HlslParseContext::convertArray(glslang::TIntermTyped*, glslang::TType const&)
glslang::HlslParseContext::convertArray(glslang::TIntermTyped*, glslang::TType const&)::$_36::operator()() const
glslang::HlslParseContext::convertConditionalExpression(glslang::TSourceLoc const&, glslang::TIntermTyped*, bool)
glslang::HlslParseContext::convertInitializerList(glslang::TSourceLoc const&, glslang::TType const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::correctOutput(glslang::TQualifier&)
glslang::HlslParseContext::counterBufferType(glslang::TSourceLoc const&, glslang::TType&)
glslang::HlslParseContext::declareArray(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TSymbol*&, bool)
glslang::HlslParseContext::declareBlock(glslang::TSourceLoc const&, glslang::TType&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::HlslParseContext::declareNonArray(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, bool)
glslang::HlslParseContext::declareStruct(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TType&)
glslang::HlslParseContext::declareStructBufferCounter(glslang::TSourceLoc const&, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::HlslParseContext::declareTypedef(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&)
glslang::HlslParseContext::declareVariable(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType&, glslang::TIntermTyped*)
glslang::HlslParseContext::decomposeGeometryMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
glslang::HlslParseContext::decomposeIntrinsic(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
glslang::HlslParseContext::decomposeIntrinsic(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)::$_22::operator()(char const*, glslang::TBuiltInVariable, glslang::TType&) const
glslang::HlslParseContext::decomposeSampleMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
glslang::HlslParseContext::decomposeSampleMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)::$_19::operator()(glslang::TIntermTyped*, glslang::TSampler const&) const
glslang::HlslParseContext::decomposeStructBufferMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)
glslang::HlslParseContext::decomposeStructBufferMethods(glslang::TSourceLoc const&, glslang::TIntermTyped*&, TIntermNode*)::$_18::operator()(int) const
glslang::HlslParseContext::executeInitializer(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TVariable*)
glslang::HlslParseContext::expandArguments(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermTyped*&)
glslang::HlslParseContext::finalizeAppendMethods()
glslang::HlslParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction&, bool&, int&, glslang::TIntermTyped*&)
glslang::HlslParseContext::findPatchConstantFunction(glslang::TSourceLoc const&)
glslang::HlslParseContext::findSubtreeOffset(glslang::TType const&, int, glslang::TVector<int> const&) const
glslang::HlslParseContext::finish()
glslang::HlslParseContext::fixBlockLocations(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&, bool, bool)
glslang::HlslParseContext::fixBlockUniformOffsets(glslang::TQualifier const&, glslang::TVector<glslang::TTypeLoc>&)
glslang::HlslParseContext::fixBuiltInIoType(glslang::TType&)
glslang::HlslParseContext::fixTextureShadowModes()
glslang::HlslParseContext::fixXfbOffsets(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&)
glslang::HlslParseContext::flatten(glslang::TVariable const&, bool, bool)
glslang::HlslParseContext::flatten(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool, glslang::TQualifier const&, glslang::TArraySizes const*)
glslang::HlslParseContext::flattenAccess(int, int, glslang::TStorageQualifier, glslang::TType const&, int)
glslang::HlslParseContext::flattenArray(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool, glslang::TQualifier const&)
glslang::HlslParseContext::flattenStruct(glslang::TVariable const&, glslang::TType const&, glslang::HlslParseContext::TFlattenData&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool, glslang::TQualifier const&, glslang::TArraySizes const*)
glslang::HlslParseContext::getFullNamespaceName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >*&) const
glslang::HlslParseContext::getGlobalUniformBlockName() const
glslang::HlslParseContext::getLayoutFromTxType(glslang::TSourceLoc const&, glslang::TType const&)
glslang::HlslParseContext::getSamplePosArray(int)
glslang::HlslParseContext::getSamplePosArray(int)::pos1
glslang::HlslParseContext::getSamplePosArray(int)::pos16
glslang::HlslParseContext::getSamplePosArray(int)::pos2
glslang::HlslParseContext::getSamplePosArray(int)::pos4
glslang::HlslParseContext::getSamplePosArray(int)::pos8
glslang::HlslParseContext::getStructBufferCounter(glslang::TSourceLoc const&, glslang::TIntermTyped*)
glslang::HlslParseContext::getTextureReturnType(glslang::TSampler const&, glslang::TType&) const
glslang::HlslParseContext::growGlobalUniformBlock(glslang::TSourceLoc const&, glslang::TType&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TVector<glslang::TTypeLoc>*)
glslang::HlslParseContext::handleAssign(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::handleAssign(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)::$_42::operator()(bool, glslang::TType const&, int, glslang::TIntermTyped*, int, bool) const
glslang::HlslParseContext::handleAssignToMatrixSwizzle(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::handleBracketDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::handleBracketOperator(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::handleConstructor(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TType const&)
glslang::HlslParseContext::handleDotDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::HlslParseContext::handleEntryPointAttributes(glslang::TSourceLoc const&, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslParseContext::handleFunctionArgument(glslang::TFunction*, glslang::TIntermTyped*&, glslang::TIntermTyped*)
glslang::HlslParseContext::handleFunctionBody(glslang::TSourceLoc const&, glslang::TFunction&, TIntermNode*, TIntermNode*&)
glslang::HlslParseContext::handleFunctionCall(glslang::TSourceLoc const&, glslang::TFunction*, glslang::TIntermTyped*)
glslang::HlslParseContext::handleFunctionDeclarator(glslang::TSourceLoc const&, glslang::TFunction&, bool)
glslang::HlslParseContext::handleFunctionDefinition(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*&)
glslang::HlslParseContext::handleInputGeometry(glslang::TSourceLoc const&, glslang::TLayoutGeometry const&)
glslang::HlslParseContext::handleLoopAttributes(glslang::TSourceLoc const&, glslang::TIntermLoop*, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslParseContext::handleLvalue(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*&)
glslang::HlslParseContext::handleLvalue(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*&)::$_5::operator()(glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermSymbol*) const
glslang::HlslParseContext::handleOutputGeometry(glslang::TSourceLoc const&, glslang::TLayoutGeometry const&)
glslang::HlslParseContext::handlePackOffset(glslang::TSourceLoc const&, glslang::TQualifier&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::HlslParseContext::handlePragma(glslang::TSourceLoc const&, glslang::TVector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&)
glslang::HlslParseContext::handleRegister(glslang::TSourceLoc const&, glslang::TQualifier&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::HlslParseContext::handleReturnValue(glslang::TSourceLoc const&, glslang::TIntermTyped*)
glslang::HlslParseContext::handleSamplerTextureCombine(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::HlslParseContext::handleSelectionAttributes(glslang::TSourceLoc const&, glslang::TIntermSelection*, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslParseContext::handleSemantic(glslang::TSourceLoc, glslang::TQualifier&, glslang::TBuiltInVariable, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::HlslParseContext::handleVariable(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::HlslParseContext::indexStructBufferContent(glslang::TSourceLoc const&, glslang::TIntermTyped*) const
glslang::HlslParseContext::initializeExtensionBehavior()
glslang::HlslParseContext::isBuiltInMethod(glslang::TSourceLoc const&, glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::HlslParseContext::isInputBuiltIn(glslang::TQualifier const&) const
glslang::HlslParseContext::isOutputBuiltIn(glslang::TQualifier const&) const
glslang::HlslParseContext::isStructBufferMethod(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
glslang::HlslParseContext::lValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
glslang::HlslParseContext::lengthenList(glslang::TSourceLoc const&, glslang::TVector<TIntermNode*>&, int, glslang::TIntermTyped*)
glslang::HlslParseContext::lineContinuationCheck(glslang::TSourceLoc const&, bool)
glslang::HlslParseContext::lineDirectiveShouldSetNextLine() const
glslang::HlslParseContext::lookupUserType(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType&)
glslang::HlslParseContext::makeConstructorCall(glslang::TSourceLoc const&, glslang::TType const&)
glslang::HlslParseContext::makeInternalVariable(char const*, glslang::TType const&) const
glslang::HlslParseContext::mergeObjectLayoutQualifiers(glslang::TQualifier&, glslang::TQualifier const&, bool)
glslang::HlslParseContext::mergeQualifiers(glslang::TQualifier&, glslang::TQualifier const&)
glslang::HlslParseContext::paramFix(glslang::TType&)
glslang::HlslParseContext::parseMatrixSwizzleSelector(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, int, glslang::TSwizzleSelectors<glslang::TMatrixSelector>&)
glslang::HlslParseContext::parseShaderStrings(glslang::TPpContext&, glslang::TInputScanner&, bool)
glslang::HlslParseContext::popNamespace()
glslang::HlslParseContext::pushNamespace(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::HlslParseContext::pushScope()
glslang::HlslParseContext::pushThisScope(glslang::TType const&, glslang::TVector<glslang::TFunctionDeclarator> const&)
glslang::HlslParseContext::remapEntryPointIO(glslang::TFunction&, glslang::TVariable*&, glslang::TVector<glslang::TVariable*>&, glslang::TVector<glslang::TVariable*>&)
glslang::HlslParseContext::remapEntryPointIO(glslang::TFunction&, glslang::TVariable*&, glslang::TVector<glslang::TVariable*>&, glslang::TVector<glslang::TVariable*>&)::$_11::operator()(char const*, glslang::TType&, glslang::TStorageQualifier) const
glslang::HlslParseContext::remapNonEntryPointIO(glslang::TFunction&)
glslang::HlslParseContext::removeUnusedStructBufferCounters()
glslang::HlslParseContext::reservedPpErrorCheck(glslang::TSourceLoc const&, char const*, char const*)
glslang::HlslParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TQualifier&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&)
glslang::HlslParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TQualifier&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TIntermTyped const*)
glslang::HlslParseContext::setLimits(TBuiltInResource const&)
glslang::HlslParseContext::setTextureReturnType(glslang::TSampler&, glslang::TType const&, glslang::TSourceLoc const&)
glslang::HlslParseContext::setUniformBlockDefaults(glslang::TType&) const
glslang::HlslParseContext::shareStructBufferType(glslang::TType&)
glslang::HlslParseContext::splitBuiltIn(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TArraySizes const*, glslang::TQualifier const&)
glslang::HlslParseContext::trackLinkage(glslang::TSymbol&)
glslang::HlslParseContext::transferTypeAttributes(glslang::TSourceLoc const&, glslang::TList<glslang::TAttributeArgs> const&, glslang::TType&, bool)
glslang::HlslParseContext::transformEntryPoint(glslang::TSourceLoc const&, glslang::TFunction&, glslang::TList<glslang::TAttributeArgs> const&)
glslang::HlslParseContext::variableCheck(glslang::TIntermTyped*&)
glslang::HlslParseContext::wrapupSwitchSubsequence(glslang::TIntermAggregate*, TIntermNode*)
glslang::HlslParseContext::~HlslParseContext()
glslang::HlslScanContext::deleteKeywordMap()
glslang::HlslScanContext::fillInKeywordMap()
glslang::HlslScanContext::identifierOrType()
glslang::HlslScanContext::mapSemantic(char const*)
glslang::HlslScanContext::tokenize(glslang::HlslToken&)
glslang::HlslScanContext::tokenizeClass(glslang::HlslToken&)
glslang::HlslScanContext::tokenizeIdentifier()
glslang::HlslScanContext::~HlslScanContext()
glslang::HlslTokenStream::acceptTokenClass(glslang::EHlslTokenClass)
glslang::HlslTokenStream::advanceToken()
glslang::HlslTokenStream::peek() const
glslang::HlslTokenStream::peekTokenClass(glslang::EHlslTokenClass) const
glslang::HlslTokenStream::popTokenStream()
glslang::HlslTokenStream::pushTokenStream(glslang::TVector<glslang::HlslToken> const*)
glslang::HlslTokenStream::recedeToken()
glslang::HlslTokenStream::~HlslTokenStream()
glslang::InitGlobalLock()
glslang::InitProcess()
glslang::InitThread()
glslang::InitializePoolIndex()
glslang::MapToSpirvToolsEnv(glslang::SpvVersion const&, spv::SpvBuildLogger*)
glslang::OS_AllocTLSIndex()
glslang::OS_GetTLSValue(void*)
glslang::OS_SetTLSValue(void*, void*)
glslang::OVR_multiview_EXTs
glslang::OptimizerMesssageConsumer(spv_message_level_t, char const*, spv_position_t const&, char const*)
glslang::OutputConstantUnion(TInfoSink&, glslang::TIntermTyped const*, glslang::TConstUnionArray const&, glslang::TOutputTraverser::EExtraOutput, int)
glslang::OutputTreeText(TInfoSink&, TIntermNode const*, int)
glslang::PoolIndex
glslang::PropagateNoContraction(glslang::TIntermediate const&)
glslang::PureOperatorBuiltins
glslang::ReleaseGlobalLock()
glslang::SetThreadPoolAllocator(glslang::TPoolAllocator*)
glslang::SpirvToolsDisassemble(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
glslang::SpirvToolsStripDebugInfo(glslang::TIntermediate const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, spv::SpvBuildLogger*)
glslang::SpirvToolsTransform(glslang::TIntermediate const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, spv::SpvBuildLogger*, glslang::SpvOptions const*)
glslang::SpirvToolsValidate(glslang::TIntermediate const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, spv::SpvBuildLogger*, bool)
glslang::TAnonMember::clone() const
glslang::TAnonMember::dump(TInfoSink&, bool) const
glslang::TAnonMember::getAnonContainer() const
glslang::TAnonMember::getAnonId() const
glslang::TAnonMember::getAsAnonMember() const
glslang::TAnonMember::getExtensions() const
glslang::TAnonMember::getMemberNumber() const
glslang::TAnonMember::getNumExtensions() const
glslang::TAnonMember::getType() const
glslang::TAnonMember::getWritableType()
glslang::TAnonMember::setExtensions(int, char const* const*)
glslang::TAnonMember::~TAnonMember()
glslang::TArraySizes::addInnerSize(int)
glslang::TArraySizes::operator==(glslang::TArraySizes const&) const
glslang::TAttributeArgs::getInt(int&, int) const
glslang::TAttributeArgs::getString(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, int, bool) const
glslang::TBuiltInIdTraverser::visitSymbol(glslang::TIntermSymbol*)
glslang::TBuiltInIdTraverser::~TBuiltInIdTraverser()
glslang::TBuiltInParseables::TBuiltInParseables()
glslang::TBuiltInParseables::getCommonString() const
glslang::TBuiltInParseables::getStageString(EShLanguage) const
glslang::TBuiltInParseables::~TBuiltInParseables()
glslang::TBuiltInParseablesHlsl::TBuiltInParseablesHlsl()
glslang::TBuiltInParseablesHlsl::createMatTimesMat()
glslang::TBuiltInParseablesHlsl::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&)
glslang::TBuiltInParseablesHlsl::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&, TBuiltInResource const&)
glslang::TBuiltInParseablesHlsl::initialize(TBuiltInResource const&, int, EProfile, glslang::SpvVersion const&, EShLanguage)
glslang::TBuiltInParseablesHlsl::initialize(int, EProfile, glslang::SpvVersion const&)
glslang::TBuiltInParseablesHlsl::initialize(int, EProfile, glslang::SpvVersion const&)::hlslIntrinsics
glslang::TBuiltInParseablesHlsl::~TBuiltInParseablesHlsl()
glslang::TBuiltIns::TBuiltIns()
glslang::TBuiltIns::add2ndGenerationSamplingImaging(int, EProfile, glslang::SpvVersion const&)
glslang::TBuiltIns::add2ndGenerationSamplingImaging(int, EProfile, glslang::SpvVersion const&)::bTypes
glslang::TBuiltIns::addGatherFunctions(glslang::TSampler, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
glslang::TBuiltIns::addImageFunctions(glslang::TSampler, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
glslang::TBuiltIns::addImageFunctions(glslang::TSampler, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)::atomicFunc
glslang::TBuiltIns::addQueryFunctions(glslang::TSampler, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
glslang::TBuiltIns::addSamplingFunctions(glslang::TSampler, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
glslang::TBuiltIns::addSubpassSampling(glslang::TSampler, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, EProfile)
glslang::TBuiltIns::addTabledBuiltins(int, EProfile, glslang::SpvVersion const&)::$_0::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, glslang::(anonymous namespace)::BuiltInFunction const*) const
glslang::TBuiltIns::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&)
glslang::TBuiltIns::identifyBuiltIns(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&, TBuiltInResource const&)
glslang::TBuiltIns::initialize(TBuiltInResource const&, int, EProfile, glslang::SpvVersion const&, EShLanguage)
glslang::TBuiltIns::initialize(int, EProfile, glslang::SpvVersion const&)
glslang::TBuiltIns::initialize(int, EProfile, glslang::SpvVersion const&)::intTypes
glslang::TBuiltIns::initialize(int, EProfile, glslang::SpvVersion const&)::subgroupOps
glslang::TBuiltIns::relateTabledBuiltins(int, EProfile, glslang::SpvVersion const&, EShLanguage, glslang::TSymbolTable&)
glslang::TBuiltIns::~TBuiltIns()
glslang::TCall::TCall(glslang::TCall const&)
glslang::TCall::TCall(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TConstTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
glslang::TConstTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
glslang::TConstTraverser::~TConstTraverser()
glslang::TConstUnion::operator%(glslang::TConstUnion const&) const
glslang::TConstUnion::operator&(glslang::TConstUnion const&) const
glslang::TConstUnion::operator*(glslang::TConstUnion const&) const
glslang::TConstUnion::operator+(glslang::TConstUnion const&) const
glslang::TConstUnion::operator-(glslang::TConstUnion const&) const
glslang::TConstUnion::operator<<(glslang::TConstUnion const&) const
glslang::TConstUnion::operator==(glslang::TConstUnion const&) const
glslang::TConstUnion::operator>>(glslang::TConstUnion const&) const
glslang::TConstUnion::operator^(glslang::TConstUnion const&) const
glslang::TConstUnion::operator|(glslang::TConstUnion const&) const
glslang::TConstUnionArray::TConstUnionArray(glslang::TConstUnionArray const&, int, int)
glslang::TConstUnionArray::~TConstUnionArray()
glslang::TDeferredCompiler::compile(TIntermNode*, int, EProfile)
glslang::TDeferredCompiler::~TDeferredCompiler()
glslang::TFunction::TFunction(glslang::TFunction const&)
glslang::TFunction::TFunction(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TType const&, glslang::TOperator)
glslang::TFunction::addParameter(glslang::TParameter&)
glslang::TFunction::addPrefix(char const*)
glslang::TFunction::addThisParameter(glslang::TType&, char const*)
glslang::TFunction::clone() const
glslang::TFunction::dump(TInfoSink&, bool) const
glslang::TFunction::getAsFunction()
glslang::TFunction::getAsFunction() const
glslang::TFunction::getBuiltInOp() const
glslang::TFunction::getDeclaredBuiltInType() const
glslang::TFunction::getDefaultParamCount() const
glslang::TFunction::getFixedParamCount() const
glslang::TFunction::getMangledName() const
glslang::TFunction::getParamCount() const
glslang::TFunction::getType() const
glslang::TFunction::getWritableType()
glslang::TFunction::hasIllegalImplicitThis() const
glslang::TFunction::hasImplicitThis() const
glslang::TFunction::isDefined() const
glslang::TFunction::isPrototyped() const
glslang::TFunction::operator[](int)
glslang::TFunction::operator[](int) const
glslang::TFunction::relateToOperator(glslang::TOperator)
glslang::TFunction::removePrefix(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TFunction::setDefined()
glslang::TFunction::setIllegalImplicitThis()
glslang::TFunction::setImplicitThis()
glslang::TFunction::setPrototyped()
glslang::TFunction::~TFunction()
glslang::TIndexTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
glslang::TIndexTraverser::visitSymbol(glslang::TIntermSymbol*)
glslang::TIndexTraverser::~TIndexTraverser()
glslang::TInductiveTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
glslang::TInductiveTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
glslang::TInductiveTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
glslang::TInductiveTraverser::~TInductiveTraverser()
glslang::TInfoSinkBase::append(char const*)
glslang::TInfoSinkBase::append(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TInfoSinkBase::append(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
glslang::TInfoSinkBase::location(glslang::TSourceLoc const&)
glslang::TInfoSinkBase::operator<<(int)
glslang::TInfoSinkBase::operator<<(unsigned int)
glslang::TInfoSinkBase::prefix(glslang::TPrefixType)
glslang::TInputScanner::TInputScanner(int, char const* const*, unsigned long*, char const* const*, int, int, bool)
glslang::TInputScanner::advance()
glslang::TInputScanner::consumeComment()
glslang::TInputScanner::consumeWhiteSpace(bool&)
glslang::TInputScanner::scanVersion(int&, EProfile&, bool&)
glslang::TInputScanner::setFile(char const*)
glslang::TInputScanner::setFile(char const*, int)
glslang::TInputScanner::unget()
glslang::TInputScanner::~TInputScanner()
glslang::TIntermAggregate::getAsAggregate()
glslang::TIntermAggregate::getAsAggregate() const
glslang::TIntermAggregate::getName() const
glslang::TIntermAggregate::getQualifierList()
glslang::TIntermAggregate::getQualifierList() const
glslang::TIntermAggregate::getSequence()
glslang::TIntermAggregate::getSequence() const
glslang::TIntermAggregate::isUserDefined()
glslang::TIntermAggregate::setName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TIntermAggregate::setOperator(glslang::TOperator)
glslang::TIntermAggregate::setPragmaTable(glslang::TPragmaTable const&)
glslang::TIntermAggregate::setUserDefined()
glslang::TIntermAggregate::traverse(glslang::TIntermTraverser*)
glslang::TIntermAggregate::~TIntermAggregate()
glslang::TIntermBinary::getAsBinaryNode()
glslang::TIntermBinary::getAsBinaryNode() const
glslang::TIntermBinary::getLeft() const
glslang::TIntermBinary::getRight() const
glslang::TIntermBinary::setLeft(glslang::TIntermTyped*)
glslang::TIntermBinary::setRight(glslang::TIntermTyped*)
glslang::TIntermBinary::traverse(glslang::TIntermTraverser*)
glslang::TIntermBinary::updatePrecision()
glslang::TIntermBinary::~TIntermBinary()
glslang::TIntermBranch::getAsBranchNode()
glslang::TIntermBranch::getAsBranchNode() const
glslang::TIntermBranch::traverse(glslang::TIntermTraverser*)
glslang::TIntermBranch::~TIntermBranch()
glslang::TIntermConstantUnion::fold(glslang::TOperator, glslang::TIntermTyped const*) const
glslang::TIntermConstantUnion::fold(glslang::TOperator, glslang::TType const&) const
glslang::TIntermConstantUnion::getAsConstantUnion()
glslang::TIntermConstantUnion::getAsConstantUnion() const
glslang::TIntermConstantUnion::traverse(glslang::TIntermTraverser*)
glslang::TIntermConstantUnion::~TIntermConstantUnion()
glslang::TIntermLoop::getAsLoopNode()
glslang::TIntermLoop::getAsLoopNode() const
glslang::TIntermLoop::traverse(glslang::TIntermTraverser*)
glslang::TIntermLoop::~TIntermLoop()
glslang::TIntermMethod::getAsMethodNode()
glslang::TIntermMethod::getAsMethodNode() const
glslang::TIntermMethod::getMethodName() const
glslang::TIntermMethod::getObject() const
glslang::TIntermMethod::traverse(glslang::TIntermTraverser*)
glslang::TIntermMethod::~TIntermMethod()
glslang::TIntermOperator::crackTexture(glslang::TSampler, glslang::TCrackedTextureOp&) const
glslang::TIntermOperator::getAsOperator()
glslang::TIntermOperator::getAsOperator() const
glslang::TIntermOperator::getCompleteString() const
glslang::TIntermOperator::isConstructor() const
glslang::TIntermOperator::modifiesState() const
glslang::TIntermSelection::getAsSelectionNode()
glslang::TIntermSelection::getAsSelectionNode() const
glslang::TIntermSelection::getCondition() const
glslang::TIntermSelection::getFalseBlock() const
glslang::TIntermSelection::getTrueBlock() const
glslang::TIntermSelection::traverse(glslang::TIntermTraverser*)
glslang::TIntermSelection::~TIntermSelection()
glslang::TIntermSwitch::getAsSwitchNode()
glslang::TIntermSwitch::getAsSwitchNode() const
glslang::TIntermSwitch::getBody() const
glslang::TIntermSwitch::getCondition() const
glslang::TIntermSwitch::traverse(glslang::TIntermTraverser*)
glslang::TIntermSwitch::~TIntermSwitch()
glslang::TIntermSymbol::TIntermSymbol(int, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&)
glslang::TIntermSymbol::changeId(int)
glslang::TIntermSymbol::getAsSymbolNode()
glslang::TIntermSymbol::getAsSymbolNode() const
glslang::TIntermSymbol::getId() const
glslang::TIntermSymbol::getName() const
glslang::TIntermSymbol::switchId(int)
glslang::TIntermSymbol::traverse(glslang::TIntermTraverser*)
glslang::TIntermSymbol::~TIntermSymbol()
glslang::TIntermTraverser::incrementDepth(TIntermNode*)
glslang::TIntermTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
glslang::TIntermTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
glslang::TIntermTraverser::visitBranch(glslang::TVisit, glslang::TIntermBranch*)
glslang::TIntermTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
glslang::TIntermTraverser::visitLoop(glslang::TVisit, glslang::TIntermLoop*)
glslang::TIntermTraverser::visitSelection(glslang::TVisit, glslang::TIntermSelection*)
glslang::TIntermTraverser::visitSwitch(glslang::TVisit, glslang::TIntermSwitch*)
glslang::TIntermTraverser::visitSymbol(glslang::TIntermSymbol*)
glslang::TIntermTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
glslang::TIntermTraverser::~TIntermTraverser()
glslang::TIntermTyped* glslang::TIntermediate::addSwizzle<glslang::TMatrixSelector>(glslang::TSwizzleSelectors<glslang::TMatrixSelector>&, glslang::TSourceLoc const&)
glslang::TIntermTyped* glslang::TIntermediate::addSwizzle<int>(glslang::TSwizzleSelectors<int>&, glslang::TSourceLoc const&)
glslang::TIntermTyped::getAsTyped()
glslang::TIntermTyped::getAsTyped() const
glslang::TIntermTyped::getBasicType() const
glslang::TIntermTyped::getMatrixCols() const
glslang::TIntermTyped::getMatrixRows() const
glslang::TIntermTyped::getQualifier()
glslang::TIntermTyped::getQualifier() const
glslang::TIntermTyped::getType() const
glslang::TIntermTyped::getVectorSize() const
glslang::TIntermTyped::getWritableType()
glslang::TIntermTyped::isArray() const
glslang::TIntermTyped::isFloatingDomain() const
glslang::TIntermTyped::isIntegerDomain() const
glslang::TIntermTyped::isMatrix() const
glslang::TIntermTyped::isScalar() const
glslang::TIntermTyped::isStruct() const
glslang::TIntermTyped::isVector() const
glslang::TIntermTyped::propagatePrecision(glslang::TPrecisionQualifier)
glslang::TIntermTyped::setType(glslang::TType const&)
glslang::TIntermTyped::~TIntermTyped()
glslang::TIntermUnary::getAsUnaryNode()
glslang::TIntermUnary::getAsUnaryNode() const
glslang::TIntermUnary::getOperand()
glslang::TIntermUnary::getOperand() const
glslang::TIntermUnary::setOperand(glslang::TIntermTyped*)
glslang::TIntermUnary::traverse(glslang::TIntermTraverser*)
glslang::TIntermUnary::updatePrecision()
glslang::TIntermUnary::~TIntermUnary()
glslang::TIntermediate::TIntermediate(EShLanguage, int, EProfile)
glslang::TIntermediate::addAssign(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc)
glslang::TIntermediate::addBiShapeConversion(glslang::TOperator, glslang::TIntermTyped*&, glslang::TIntermTyped*&)
glslang::TIntermediate::addBinaryMath(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc)
glslang::TIntermediate::addBinaryNode(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc) const
glslang::TIntermediate::addBinaryNode(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc, glslang::TType const&) const
glslang::TIntermediate::addBranch(glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc const&)
glslang::TIntermediate::addBranch(glslang::TOperator, glslang::TSourceLoc const&)
glslang::TIntermediate::addBuiltInFunctionCall(glslang::TSourceLoc const&, glslang::TOperator, bool, TIntermNode*, glslang::TType const&)
glslang::TIntermediate::addComma(glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc const&)
glslang::TIntermediate::addConstantUnion(bool, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(double, glslang::TBasicType, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(glslang::TConstUnionArray const&, glslang::TType const&, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(int, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(long long, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(short, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(unsigned int, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(unsigned long long, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConstantUnion(unsigned short, glslang::TSourceLoc const&, bool) const
glslang::TIntermediate::addConversion(glslang::TBasicType, glslang::TIntermTyped*) const
glslang::TIntermediate::addConversion(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::TIntermediate::addConversion(glslang::TOperator, glslang::TType const&, glslang::TIntermTyped*)
glslang::TIntermediate::addForLoop(TIntermNode*, TIntermNode*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool, glslang::TSourceLoc const&, glslang::TIntermLoop*&)
glslang::TIntermediate::addIncludeText(char const*, char const*, unsigned long)
glslang::TIntermediate::addIndex(glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc)
glslang::TIntermediate::addLoop(TIntermNode*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool, glslang::TSourceLoc const&)
glslang::TIntermediate::addMethod(glslang::TIntermTyped*, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TSourceLoc const&)
glslang::TIntermediate::addSelection(glslang::TIntermTyped*, glslang::TIntermNodePair, glslang::TSourceLoc const&)
glslang::TIntermediate::addSelection(glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TSourceLoc const&)
glslang::TIntermediate::addShapeConversion(glslang::TType const&, glslang::TIntermTyped*)
glslang::TIntermediate::addSymbol(glslang::TIntermSymbol const&)
glslang::TIntermediate::addSymbol(glslang::TType const&, glslang::TSourceLoc const&)
glslang::TIntermediate::addSymbol(glslang::TVariable const&)
glslang::TIntermediate::addSymbol(glslang::TVariable const&, glslang::TSourceLoc const&)
glslang::TIntermediate::addSymbol(int, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TConstUnionArray const&, glslang::TIntermTyped*, glslang::TSourceLoc const&)
glslang::TIntermediate::addSymbolLinkageNode(glslang::TIntermAggregate*&, glslang::TSymbol const&)
glslang::TIntermediate::addSymbolLinkageNodes(glslang::TIntermAggregate*&, EShLanguage, glslang::TSymbolTable&)
glslang::TIntermediate::addToCallGraph(TInfoSink&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TIntermediate::addUnaryMath(glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc)
glslang::TIntermediate::addUnaryNode(glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc, glslang::TType const&) const
glslang::TIntermediate::addUniShapeConversion(glslang::TOperator, glslang::TType const&, glslang::TIntermTyped*)
glslang::TIntermediate::addUsedConstantId(int)
glslang::TIntermediate::addUsedLocation(glslang::TQualifier const&, glslang::TType const&, bool&)
glslang::TIntermediate::addUsedOffsets(int, int, int)
glslang::TIntermediate::addXfbBufferOffset(glslang::TType const&)
glslang::TIntermediate::buildConvertOp(glslang::TBasicType, glslang::TBasicType, glslang::TOperator&) const
glslang::TIntermediate::canImplicitlyPromote(glslang::TBasicType, glslang::TBasicType, glslang::TOperator) const
glslang::TIntermediate::checkCallGraphBodies(TInfoSink&, bool)
glslang::TIntermediate::checkCallGraphCycles(TInfoSink&)
glslang::TIntermediate::checkLocationRange(int, glslang::TIoRange const&, glslang::TType const&, bool&)
glslang::TIntermediate::computeBufferReferenceTypeSize(glslang::TType const&)
glslang::TIntermediate::computeTypeLocationSize(glslang::TType const&, EShLanguage)
glslang::TIntermediate::computeTypeXfbSize(glslang::TType const&, bool&, bool&, bool&) const
glslang::TIntermediate::createConversion(glslang::TBasicType, glslang::TIntermTyped*) const
glslang::TIntermediate::extensionRequested(char const*) const
glslang::TIntermediate::finalCheck(TInfoSink&, bool)
glslang::TIntermediate::finalCheck(TInfoSink&, bool)::TFinalLinkTraverser::visitSymbol(glslang::TIntermSymbol*)
glslang::TIntermediate::finalCheck(TInfoSink&, bool)::TFinalLinkTraverser::~TFinalLinkTraverser()
glslang::TIntermediate::findLValueBase(glslang::TIntermTyped const*, bool)
glslang::TIntermediate::fold(glslang::TIntermAggregate*)
glslang::TIntermediate::foldConstructor(glslang::TIntermAggregate*)
glslang::TIntermediate::foldDereference(glslang::TIntermTyped*, int, glslang::TSourceLoc const&)
glslang::TIntermediate::foldSwizzle(glslang::TIntermTyped*, glslang::TSwizzleSelectors<int>&, glslang::TSourceLoc const&)
glslang::TIntermediate::getBaseAlignment(glslang::TType const&, int&, int&, glslang::TLayoutPacking, bool)
glslang::TIntermediate::getBaseAlignmentScalar(glslang::TType const&, int&)
glslang::TIntermediate::getBlockSize(glslang::TType const&)
glslang::TIntermediate::getConversionDestinatonType(glslang::TBasicType, glslang::TBasicType, glslang::TOperator) const
glslang::TIntermediate::getMemberAlignment(glslang::TType const&, int&, int&, glslang::TLayoutPacking, bool)
glslang::TIntermediate::getOffset(glslang::TType const&, int)
glslang::TIntermediate::getResourceName(glslang::TResourceType)
glslang::TIntermediate::getScalarAlignment(glslang::TType const&, int&, int&, bool)
glslang::TIntermediate::growAggregate(TIntermNode*, TIntermNode*)
glslang::TIntermediate::growAggregate(TIntermNode*, TIntermNode*, glslang::TSourceLoc const&)
glslang::TIntermediate::improperStraddle(glslang::TType const&, int, int)
glslang::TIntermediate::inOutLocationCheck(TInfoSink&)
glslang::TIntermediate::isConversionAllowed(glslang::TOperator, glslang::TIntermTyped*) const
glslang::TIntermediate::isFPConversion(glslang::TBasicType, glslang::TBasicType) const
glslang::TIntermediate::isFPIntegralConversion(glslang::TBasicType, glslang::TBasicType) const
glslang::TIntermediate::isFPPromotion(glslang::TBasicType, glslang::TBasicType) const
glslang::TIntermediate::isIntegralConversion(glslang::TBasicType, glslang::TBasicType) const
glslang::TIntermediate::isIntegralPromotion(glslang::TBasicType, glslang::TBasicType) const
glslang::TIntermediate::isNonuniformPropagating(glslang::TOperator) const
glslang::TIntermediate::isSpecializationOperation(glslang::TIntermOperator const&) const
glslang::TIntermediate::makeAggregate(TIntermNode*)
glslang::TIntermediate::makeAggregate(TIntermNode*, glslang::TSourceLoc const&)
glslang::TIntermediate::makeAggregate(glslang::TSourceLoc const&)
glslang::TIntermediate::mapTypeToConstructorOp(glslang::TType const&) const
glslang::TIntermediate::merge(TInfoSink&, glslang::TIntermediate&)
glslang::TIntermediate::mergeBodies(TInfoSink&, glslang::TVector<TIntermNode*>&, glslang::TVector<TIntermNode*> const&)
glslang::TIntermediate::mergeCallGraphs(TInfoSink&, glslang::TIntermediate&)
glslang::TIntermediate::mergeErrorCheck(TInfoSink&, glslang::TIntermSymbol const&, glslang::TIntermSymbol const&, bool)
glslang::TIntermediate::mergeImplicitArraySizes(glslang::TType&, glslang::TType const&)
glslang::TIntermediate::mergeLinkerObjects(TInfoSink&, glslang::TVector<TIntermNode*>&, glslang::TVector<TIntermNode*> const&)
glslang::TIntermediate::mergeModes(TInfoSink&, glslang::TIntermediate&)
glslang::TIntermediate::mergeTrees(TInfoSink&, glslang::TIntermediate&)
glslang::TIntermediate::output(TInfoSink&, bool)
glslang::TIntermediate::parseConstTree(TIntermNode*, glslang::TConstUnionArray, glslang::TOperator, glslang::TType const&, bool)
glslang::TIntermediate::postProcess(TIntermNode*, EShLanguage)
glslang::TIntermediate::promote(glslang::TIntermOperator*)
glslang::TIntermediate::promoteAggregate(glslang::TIntermAggregate&)
glslang::TIntermediate::promoteBinary(glslang::TIntermBinary&)
glslang::TIntermediate::promoteConstantUnion(glslang::TBasicType, glslang::TIntermConstantUnion*) const
glslang::TIntermediate::promoteUnary(glslang::TIntermUnary&)
glslang::TIntermediate::pushSelector(glslang::TVector<TIntermNode*>&, glslang::TMatrixSelector const&, glslang::TSourceLoc const&)
glslang::TIntermediate::pushSelector(glslang::TVector<TIntermNode*>&, int const&, glslang::TSourceLoc const&)
glslang::TIntermediate::seedIdMap(glslang::TIdMaps&, int&)
glslang::TIntermediate::setAggregateOperator(TIntermNode*, glslang::TOperator, glslang::TType const&, glslang::TSourceLoc)
glslang::TIntermediate::setSpv(glslang::SpvVersion const&)
glslang::TIntermediate::updateRequestedExtension(char const*, glslang::TExtensionBehavior)
glslang::TIntermediate::userOutputUsed() const
glslang::TIntermediate::~TIntermediate()
glslang::TOutputTraverser::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
glslang::TOutputTraverser::visitBinary(glslang::TVisit, glslang::TIntermBinary*)
glslang::TOutputTraverser::visitBranch(glslang::TVisit, glslang::TIntermBranch*)
glslang::TOutputTraverser::visitConstantUnion(glslang::TIntermConstantUnion*)
glslang::TOutputTraverser::visitLoop(glslang::TVisit, glslang::TIntermLoop*)
glslang::TOutputTraverser::visitSelection(glslang::TVisit, glslang::TIntermSelection*)
glslang::TOutputTraverser::visitSwitch(glslang::TVisit, glslang::TIntermSwitch*)
glslang::TOutputTraverser::visitSymbol(glslang::TIntermSymbol*)
glslang::TOutputTraverser::visitUnary(glslang::TVisit, glslang::TIntermUnary*)
glslang::TOutputTraverser::~TOutputTraverser()
glslang::TParseContext::TParseContext(glslang::TSymbolTable&, glslang::TIntermediate&, bool, int, EProfile, glslang::SpvVersion const&, EShLanguage, TInfoSink&, bool, EShMessages, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::TParseContext::accStructCheck(glslang::TSourceLoc const&, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::addConstructor(glslang::TSourceLoc const&, TIntermNode*, glslang::TType const&)
glslang::TParseContext::addInputArgumentConversions(glslang::TFunction const&, TIntermNode*&) const
glslang::TParseContext::addOutputArgumentConversions(glslang::TFunction const&, glslang::TIntermAggregate&) const
glslang::TParseContext::addQualifierToExisting(glslang::TSourceLoc const&, glslang::TQualifier, glslang::TVector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >*>&)
glslang::TParseContext::addQualifierToExisting(glslang::TSourceLoc const&, glslang::TQualifier, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::addSwitch(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermAggregate*)
glslang::TParseContext::arrayError(glslang::TSourceLoc const&, glslang::TType const&)
glslang::TParseContext::arrayLimitCheck(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int)
glslang::TParseContext::arrayObjectCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
glslang::TParseContext::arrayOfArrayVersionCheck(glslang::TSourceLoc const&, glslang::TArraySizes const*)
glslang::TParseContext::arrayQualifierError(glslang::TSourceLoc const&, glslang::TQualifier const&)
glslang::TParseContext::arraySizeCheck(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TArraySize&, char const*)
glslang::TParseContext::arraySizeRequiredCheck(glslang::TSourceLoc const&, glslang::TArraySizes const&)
glslang::TParseContext::arraySizesCheck(glslang::TSourceLoc const&, glslang::TQualifier const&, glslang::TArraySizes*, glslang::TIntermTyped const*, bool)
glslang::TParseContext::assignError(glslang::TSourceLoc const&, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >)
glslang::TParseContext::atomicUintCheck(glslang::TSourceLoc const&, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::attributeFromName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
glslang::TParseContext::binaryOpError(glslang::TSourceLoc const&, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >)
glslang::TParseContext::blockMemberExtensionCheck(glslang::TSourceLoc const&, glslang::TIntermTyped const*, int, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::blockQualifierCheck(glslang::TSourceLoc const&, glslang::TQualifier const&, bool)
glslang::TParseContext::blockStageIoCheck(glslang::TSourceLoc const&, glslang::TQualifier const&)
glslang::TParseContext::boolCheck(glslang::TSourceLoc const&, glslang::TIntermTyped const*)
glslang::TParseContext::boolCheck(glslang::TSourceLoc const&, glslang::TPublicType const&)
glslang::TParseContext::builtInOpCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermOperator&)
glslang::TParseContext::builtInOpCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermOperator&)::extensions
glslang::TParseContext::checkAndResizeMeshViewDim(glslang::TSourceLoc const&, glslang::TType&, bool)
glslang::TParseContext::checkIoArrayConsistency(glslang::TSourceLoc const&, int, char const*, glslang::TType&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::checkIoArraysConsistency(glslang::TSourceLoc const&, bool)
glslang::TParseContext::checkLocation(glslang::TSourceLoc const&, glslang::TOperator)
glslang::TParseContext::checkNoShaderLayouts(glslang::TSourceLoc const&, glslang::TShaderQualifiers const&)
glslang::TParseContext::checkPrecisionQualifier(glslang::TSourceLoc const&, glslang::TPrecisionQualifier)
glslang::TParseContext::checkRuntimeSizable(glslang::TSourceLoc const&, glslang::TIntermTyped const&)
glslang::TParseContext::computeBuiltinPrecisions(glslang::TIntermTyped&, glslang::TFunction const&)
glslang::TParseContext::constantIndexExpressionCheck(TIntermNode*)
glslang::TParseContext::constantValueCheck(glslang::TIntermTyped*, char const*)
glslang::TParseContext::constructAggregate(TIntermNode*, glslang::TType const&, int, glslang::TSourceLoc const&)
glslang::TParseContext::constructBuiltIn(glslang::TType const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TSourceLoc const&, bool)
glslang::TParseContext::constructorError(glslang::TSourceLoc const&, TIntermNode*, glslang::TFunction&, glslang::TOperator, glslang::TType&)
glslang::TParseContext::constructorTextureSamplerError(glslang::TSourceLoc const&, glslang::TFunction const&)
glslang::TParseContext::containsFieldWithBasicType(glslang::TType const&, glslang::TBasicType)
glslang::TParseContext::convertInitializerList(glslang::TSourceLoc const&, glslang::TType const&, glslang::TIntermTyped*)
glslang::TParseContext::declareArray(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&, glslang::TSymbol*&)
glslang::TParseContext::declareBlock(glslang::TSourceLoc const&, glslang::TVector<glslang::TTypeLoc>&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TArraySizes*)
glslang::TParseContext::declareNonArray(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TType const&)
glslang::TParseContext::declareTypeDefaults(glslang::TSourceLoc const&, glslang::TPublicType const&)
glslang::TParseContext::declareVariable(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TPublicType const&, glslang::TArraySizes*, glslang::TIntermTyped*)
glslang::TParseContext::executeInitializer(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TVariable*)
glslang::TParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
glslang::TParseContext::findFunction120(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
glslang::TParseContext::findFunction400(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
glslang::TParseContext::findFunctionExplicitTypes(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)
glslang::TParseContext::finish()
glslang::TParseContext::fixBlockLocations(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&, bool, bool)
glslang::TParseContext::fixBlockUniformLayoutMatrix(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*)
glslang::TParseContext::fixBlockUniformLayoutPacking(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*)
glslang::TParseContext::fixBlockUniformOffsets(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&)
glslang::TParseContext::fixIoArraySize(glslang::TSourceLoc const&, glslang::TType&)
glslang::TParseContext::fixOffset(glslang::TSourceLoc const&, glslang::TSymbol&)
glslang::TParseContext::fixXfbOffsets(glslang::TQualifier&, glslang::TVector<glslang::TTypeLoc>&)
glslang::TParseContext::getDefaultPrecision(glslang::TPublicType&)
glslang::TParseContext::getIoArrayImplicitSize(glslang::TQualifier const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >*) const
glslang::TParseContext::globalCheck(glslang::TSourceLoc const&, char const*)
glslang::TParseContext::globalQualifierFixCheck(glslang::TSourceLoc const&, glslang::TQualifier&)
glslang::TParseContext::globalQualifierTypeCheck(glslang::TSourceLoc const&, glslang::TQualifier const&, glslang::TPublicType const&)
glslang::TParseContext::handleBinaryMath(glslang::TSourceLoc const&, char const*, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::TParseContext::handleBracketDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::TParseContext::handleBuiltInFunctionCall(glslang::TSourceLoc, TIntermNode*, glslang::TFunction const&)
glslang::TParseContext::handleConstructorCall(glslang::TSourceLoc const&, glslang::TPublicType const&)
glslang::TParseContext::handleDotDereference(glslang::TSourceLoc const&, glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::handleDotSwizzle(glslang::TSourceLoc const&, glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::handleFunctionCall(glslang::TSourceLoc const&, glslang::TFunction*, TIntermNode*)
glslang::TParseContext::handleFunctionDeclarator(glslang::TSourceLoc const&, glslang::TFunction&, bool)
glslang::TParseContext::handleFunctionDefinition(glslang::TSourceLoc const&, glslang::TFunction&)
glslang::TParseContext::handleIndexLimits(glslang::TSourceLoc const&, glslang::TIntermTyped*, glslang::TIntermTyped*)
glslang::TParseContext::handleLengthMethod(glslang::TSourceLoc const&, glslang::TFunction*, TIntermNode*)
glslang::TParseContext::handleLoopAttributes(glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*)
glslang::TParseContext::handlePragma(glslang::TSourceLoc const&, glslang::TVector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&)
glslang::TParseContext::handlePrecisionQualifier(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TPrecisionQualifier)
glslang::TParseContext::handleReturnValue(glslang::TSourceLoc const&, glslang::TIntermTyped*)
glslang::TParseContext::handleSelectionAttributes(glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*)
glslang::TParseContext::handleSwitchAttributes(glslang::TList<glslang::TAttributeArgs> const&, TIntermNode*)
glslang::TParseContext::handleUnaryMath(glslang::TSourceLoc const&, char const*, glslang::TOperator, glslang::TIntermTyped*)
glslang::TParseContext::handleVariable(glslang::TSourceLoc const&, glslang::TSymbol*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::TParseContext::inductiveLoopBodyCheck(TIntermNode*, int, glslang::TSymbolTable&)
glslang::TParseContext::inductiveLoopCheck(glslang::TSourceLoc const&, TIntermNode*, glslang::TIntermLoop*)
glslang::TParseContext::integerCheck(glslang::TIntermTyped const*, char const*)
glslang::TParseContext::ioArrayCheck(glslang::TSourceLoc const&, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::isIoResizeArray(glslang::TType const&) const
glslang::TParseContext::isRuntimeLength(glslang::TIntermTyped const&) const
glslang::TParseContext::lValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
glslang::TParseContext::layoutObjectCheck(glslang::TSourceLoc const&, glslang::TSymbol const&)
glslang::TParseContext::layoutQualifierCheck(glslang::TSourceLoc const&, glslang::TQualifier const&)
glslang::TParseContext::layoutTypeCheck(glslang::TSourceLoc const&, glslang::TType const&)
glslang::TParseContext::limitCheck(glslang::TSourceLoc const&, int, char const*, char const*)
glslang::TParseContext::lineContinuationCheck(glslang::TSourceLoc const&, bool)
glslang::TParseContext::lineDirectiveShouldSetNextLine() const
glslang::TParseContext::makeAttributes(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
glslang::TParseContext::makeAttributes(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, TIntermNode*) const
glslang::TParseContext::makeEditable(glslang::TSymbol*&)
glslang::TParseContext::makeInternalVariable(char const*, glslang::TType const&) const
glslang::TParseContext::memberQualifierCheck(glslang::TPublicType&)
glslang::TParseContext::memorySemanticsCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermOperator const&)
glslang::TParseContext::mergeAttributes(glslang::TList<glslang::TAttributeArgs>*, glslang::TList<glslang::TAttributeArgs>*) const
glslang::TParseContext::mergeObjectLayoutQualifiers(glslang::TQualifier&, glslang::TQualifier const&, bool)
glslang::TParseContext::mergeQualifiers(glslang::TSourceLoc const&, glslang::TQualifier&, glslang::TQualifier const&, bool)
glslang::TParseContext::nestedBlockCheck(glslang::TSourceLoc const&)
glslang::TParseContext::nestedStructCheck(glslang::TSourceLoc const&)
glslang::TParseContext::nonOpBuiltInCheck(glslang::TSourceLoc const&, glslang::TFunction const&, glslang::TIntermAggregate&)
glslang::TParseContext::opaqueCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
glslang::TParseContext::paramCheckFix(glslang::TSourceLoc const&, glslang::TQualifier const&, glslang::TType&)
glslang::TParseContext::paramCheckFixStorage(glslang::TSourceLoc const&, glslang::TStorageQualifier const&, glslang::TType&)
glslang::TParseContext::parameterTypeCheck(glslang::TSourceLoc const&, glslang::TStorageQualifier, glslang::TType const&)
glslang::TParseContext::parseShaderStrings(glslang::TPpContext&, glslang::TInputScanner&, bool)
glslang::TParseContext::parserError(char const*)
glslang::TParseContext::precisionQualifierCheck(glslang::TSourceLoc const&, glslang::TBasicType, glslang::TQualifier&)
glslang::TParseContext::rValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
glslang::TParseContext::recordStructCopy(std::__1::map<glslang::TVector<glslang::TTypeLoc> const*, std::__1::map<unsigned long, glslang::TVector<glslang::TTypeLoc> const*, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<unsigned long const, glslang::TVector<glslang::TTypeLoc> const*> > >, std::__1::less<glslang::TVector<glslang::TTypeLoc> const*>, std::__1::allocator<std::__1::pair<glslang::TVector<glslang::TTypeLoc> const* const, std::__1::map<unsigned long, glslang::TVector<glslang::TTypeLoc> const*, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<unsigned long const, glslang::TVector<glslang::TTypeLoc> const*> > > > > >&, glslang::TType const*, glslang::TType const*)
glslang::TParseContext::redeclareBuiltinBlock(glslang::TSourceLoc const&, glslang::TVector<glslang::TTypeLoc>&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TArraySizes*)
glslang::TParseContext::redeclareBuiltinVariable(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TQualifier const&, glslang::TShaderQualifiers const&)
glslang::TParseContext::referenceCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
glslang::TParseContext::reservedErrorCheck(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TParseContext::reservedPpErrorCheck(glslang::TSourceLoc const&, char const*, char const*)
glslang::TParseContext::samplerCheck(glslang::TSourceLoc const&, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TIntermTyped*)
glslang::TParseContext::samplerConstructorLocationCheck(glslang::TSourceLoc const&, char const*, TIntermNode*)
glslang::TParseContext::setDefaultPrecision(glslang::TSourceLoc const&, glslang::TPublicType&, glslang::TPrecisionQualifier)
glslang::TParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TPublicType&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&)
glslang::TParseContext::setLayoutQualifier(glslang::TSourceLoc const&, glslang::TPublicType&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&, glslang::TIntermTyped const*)
glslang::TParseContext::setLimits(TBuiltInResource const&)
glslang::TParseContext::specializationCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
glslang::TParseContext::storage16BitAssignmentCheck(glslang::TSourceLoc const&, glslang::TType const&, char const*)
glslang::TParseContext::structArrayCheck(glslang::TSourceLoc const&, glslang::TType const&)
glslang::TParseContext::structTypeCheck(glslang::TSourceLoc const&, glslang::TPublicType&)
glslang::TParseContext::updateStandaloneQualifierDefaults(glslang::TSourceLoc const&, glslang::TPublicType const&)
glslang::TParseContext::variableCheck(glslang::TIntermTyped*&)
glslang::TParseContext::voidErrorCheck(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TBasicType)
glslang::TParseContext::wrapupSwitchSubsequence(glslang::TIntermAggregate*, TIntermNode*)
glslang::TParseContext::~TParseContext()
glslang::TParseContextBase::TParseContextBase(glslang::TSymbolTable&, glslang::TIntermediate&, bool, int, EProfile, glslang::SpvVersion const&, EShLanguage, TInfoSink&, bool, EShMessages, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::TParseContextBase::checkIndex(glslang::TSourceLoc const&, glslang::TType const&, int&)
glslang::TParseContextBase::error(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
glslang::TParseContextBase::finalizeGlobalUniformBlockLayout(glslang::TVariable&)
glslang::TParseContextBase::finish()
glslang::TParseContextBase::getEditableVariable(char const*)
glslang::TParseContextBase::getGlobalUniformBlockName() const
glslang::TParseContextBase::growGlobalUniformBlock(glslang::TSourceLoc const&, glslang::TType&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TVector<glslang::TTypeLoc>*)
glslang::TParseContextBase::lValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
glslang::TParseContextBase::makeEditable(glslang::TSymbol*&)
glslang::TParseContextBase::notifyErrorDirective(int, char const*)
glslang::TParseContextBase::notifyExtensionDirective(int, char const*, char const*)
glslang::TParseContextBase::notifyLineDirective(int, int, bool, int, char const*)
glslang::TParseContextBase::notifyVersion(int, int, char const*)
glslang::TParseContextBase::outputMessage(glslang::TSourceLoc const&, char const*, char const*, char const*, glslang::TPrefixType, __va_list_tag*)
glslang::TParseContextBase::parseSwizzleSelector(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, int, glslang::TSwizzleSelectors<int>&)
glslang::TParseContextBase::ppError(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
glslang::TParseContextBase::ppWarn(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
glslang::TParseContextBase::rValueErrorCheck(glslang::TSourceLoc const&, char const*, glslang::TIntermTyped*)
glslang::TParseContextBase::renameShaderFunction(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >*&) const
glslang::TParseContextBase::selectFunction(glslang::TVector<glslang::TFunction const*>, glslang::TFunction const&, std::__1::function<bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)>, std::__1::function<bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)>, bool&)
glslang::TParseContextBase::setErrorCallback(std::__1::function<void (int, char const*)> const&)
glslang::TParseContextBase::setExtensionCallback(std::__1::function<void (int, char const*, char const*)> const&)
glslang::TParseContextBase::setLineCallback(std::__1::function<void (int, int, bool, int, char const*)> const&)
glslang::TParseContextBase::setPragmaCallback(std::__1::function<void (int, glslang::TVector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&)> const&)
glslang::TParseContextBase::setUniformBlockDefaults(glslang::TType&) const
glslang::TParseContextBase::setVersionCallback(std::__1::function<void (int, int, char const*)> const&)
glslang::TParseContextBase::trackLinkage(glslang::TSymbol&)
glslang::TParseContextBase::warn(glslang::TSourceLoc const&, char const*, char const*, char const*, ...)
glslang::TParseContextBase::~TParseContextBase()
glslang::TParseVersions::checkDeprecated(glslang::TSourceLoc const&, int, int, char const*)
glslang::TParseVersions::checkExtensionStage(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::checkExtensionsRequested(glslang::TSourceLoc const&, int, char const* const*, char const*)
glslang::TParseVersions::doubleCheck(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::doubleCheck(glslang::TSourceLoc const&, char const*)::f64_Extensions
glslang::TParseVersions::explicitFloat32Check(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::explicitFloat32Check(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::explicitFloat64Check(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::explicitFloat64Check(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::explicitInt16Check(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::explicitInt16Check(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::explicitInt32Check(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::explicitInt32Check(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::explicitInt8Check(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::explicitInt8Check(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::extensionRequires(glslang::TSourceLoc const&, char const*, char const*)
glslang::TParseVersions::extensionTurnedOn(char const*)
glslang::TParseVersions::extensionsTurnedOn(int, char const* const*)
glslang::TParseVersions::fcoopmatCheck(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::fcoopmatCheck(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::float16Arithmetic()
glslang::TParseVersions::float16Arithmetic()::extensions
glslang::TParseVersions::float16Check(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::float16Check(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::float16OpaqueCheck(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::float16ScalarVectorCheck(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::float16ScalarVectorCheck(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::fullIntegerCheck(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::getExtensionBehavior(char const*)
glslang::TParseVersions::getPreamble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&)
glslang::TParseVersions::initializeExtensionBehavior()
glslang::TParseVersions::int16Arithmetic()
glslang::TParseVersions::int16Arithmetic()::extensions
glslang::TParseVersions::int16ScalarVectorCheck(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::int16ScalarVectorCheck(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::int64Check(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::int64Check(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::int8Arithmetic()
glslang::TParseVersions::int8Arithmetic()::extensions
glslang::TParseVersions::int8ScalarVectorCheck(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::int8ScalarVectorCheck(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::intcoopmatCheck(glslang::TSourceLoc const&, char const*, bool)
glslang::TParseVersions::intcoopmatCheck(glslang::TSourceLoc const&, char const*, bool)::extensions
glslang::TParseVersions::ppRequireExtensions(glslang::TSourceLoc const&, int, char const* const*, char const*)
glslang::TParseVersions::profileRequires(glslang::TSourceLoc const&, int, int, char const*, char const*)
glslang::TParseVersions::profileRequires(glslang::TSourceLoc const&, int, int, int, char const* const*, char const*)
glslang::TParseVersions::requireExtensions(glslang::TSourceLoc const&, int, char const* const*, char const*)
glslang::TParseVersions::requireFloat16Arithmetic(glslang::TSourceLoc const&, char const*, char const*)
glslang::TParseVersions::requireFloat16Arithmetic(glslang::TSourceLoc const&, char const*, char const*)::extensions
glslang::TParseVersions::requireInt16Arithmetic(glslang::TSourceLoc const&, char const*, char const*)
glslang::TParseVersions::requireInt16Arithmetic(glslang::TSourceLoc const&, char const*, char const*)::extensions
glslang::TParseVersions::requireInt8Arithmetic(glslang::TSourceLoc const&, char const*, char const*)
glslang::TParseVersions::requireInt8Arithmetic(glslang::TSourceLoc const&, char const*, char const*)::extensions
glslang::TParseVersions::requireNotRemoved(glslang::TSourceLoc const&, int, int, char const*)
glslang::TParseVersions::requireProfile(glslang::TSourceLoc const&, int, char const*)
glslang::TParseVersions::requireSpv(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::requireSpv(glslang::TSourceLoc const&, char const*, unsigned int)
glslang::TParseVersions::requireStage(glslang::TSourceLoc const&, EShLanguage, char const*)
glslang::TParseVersions::requireStage(glslang::TSourceLoc const&, EShLanguageMask, char const*)
glslang::TParseVersions::requireVulkan(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::spvRemoved(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::unimplemented(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::updateExtensionBehavior(char const*, glslang::TExtensionBehavior)
glslang::TParseVersions::updateExtensionBehavior(int, char const*, char const*)
glslang::TParseVersions::vulkanRemoved(glslang::TSourceLoc const&, char const*)
glslang::TParseVersions::~TParseVersions()
glslang::TPoolAllocator::TPoolAllocator(int, int)
glslang::TPoolAllocator::allocate(unsigned long)
glslang::TPoolAllocator::pop()
glslang::TPoolAllocator::push()
glslang::TPoolAllocator::~TPoolAllocator()
glslang::TPpContext::CPPdefine(glslang::TPpToken*)
glslang::TPpContext::CPPelse(int, glslang::TPpToken*)
glslang::TPpContext::CPPerror(glslang::TPpToken*)
glslang::TPpContext::CPPextension(glslang::TPpToken*)
glslang::TPpContext::CPPif(glslang::TPpToken*)
glslang::TPpContext::CPPifdef(int, glslang::TPpToken*)
glslang::TPpContext::CPPinclude(glslang::TPpToken*)
glslang::TPpContext::CPPline(glslang::TPpToken*)
glslang::TPpContext::CPPpragma(glslang::TPpToken*)
glslang::TPpContext::CPPundef(glslang::TPpToken*)
glslang::TPpContext::CPPversion(glslang::TPpToken*)
glslang::TPpContext::MacroExpand(glslang::TPpToken*, bool, bool)
glslang::TPpContext::PrescanMacroArg(glslang::TPpContext::TokenStream&, glslang::TPpToken*, bool)
glslang::TPpContext::TPpContext(glslang::TParseContextBase&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, glslang::TShader::Includer&)
glslang::TPpContext::TokenStream::getToken(glslang::TParseContextBase&, glslang::TPpToken*)
glslang::TPpContext::TokenStream::peekUntokenizedPasting()
glslang::TPpContext::TokenStream::putToken(int, glslang::TPpToken*)
glslang::TPpContext::TokenizableIncludeFile::TokenizableIncludeFile(glslang::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, glslang::TShader::Includer::IncludeResult*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, glslang::TPpContext*)
glslang::TPpContext::TokenizableIncludeFile::getch()
glslang::TPpContext::TokenizableIncludeFile::notifyActivated()
glslang::TPpContext::TokenizableIncludeFile::notifyDeleted()
glslang::TPpContext::TokenizableIncludeFile::scan(glslang::TPpToken*)
glslang::TPpContext::TokenizableIncludeFile::ungetch()
glslang::TPpContext::TokenizableIncludeFile::~TokenizableIncludeFile()
glslang::TPpContext::UngetToken(int, glslang::TPpToken*)
glslang::TPpContext::characterLiteral(glslang::TPpToken*)
glslang::TPpContext::eval(int, int, bool, int&, bool&, glslang::TPpToken*)
glslang::TPpContext::evalToToken(int, bool, int&, bool&, glslang::TPpToken*)
glslang::TPpContext::extraTokenCheck(int, glslang::TPpToken*, int)
glslang::TPpContext::lFloatConst(int, int, glslang::TPpToken*)
glslang::TPpContext::pop_include()
glslang::TPpContext::pushInput(glslang::TPpContext::tInput*)
glslang::TPpContext::pushTokenStreamInput(glslang::TPpContext::TokenStream&, bool)
glslang::TPpContext::readCPPline(glslang::TPpToken*)
glslang::TPpContext::setInput(glslang::TInputScanner&, bool)
glslang::TPpContext::tInput::endOfReplacementList()
glslang::TPpContext::tInput::isMacroInput()
glslang::TPpContext::tInput::notifyActivated()
glslang::TPpContext::tInput::notifyDeleted()
glslang::TPpContext::tInput::peekContinuedPasting(int)
glslang::TPpContext::tInput::peekPasting()
glslang::TPpContext::tInput::~tInput()
glslang::TPpContext::tMacroInput::endOfReplacementList()
glslang::TPpContext::tMacroInput::getch()
glslang::TPpContext::tMacroInput::isMacroInput()
glslang::TPpContext::tMacroInput::peekContinuedPasting(int)
glslang::TPpContext::tMacroInput::peekPasting()
glslang::TPpContext::tMacroInput::scan(glslang::TPpToken*)
glslang::TPpContext::tMacroInput::ungetch()
glslang::TPpContext::tMacroInput::~tMacroInput()
glslang::TPpContext::tMarkerInput::getch()
glslang::TPpContext::tMarkerInput::scan(glslang::TPpToken*)
glslang::TPpContext::tMarkerInput::ungetch()
glslang::TPpContext::tMarkerInput::~tMarkerInput()
glslang::TPpContext::tStringInput::getch()
glslang::TPpContext::tStringInput::scan(glslang::TPpToken*)
glslang::TPpContext::tStringInput::scan(glslang::TPpToken*)::Int16_Extensions
glslang::TPpContext::tStringInput::scan(glslang::TPpToken*)::Int64_Extensions
glslang::TPpContext::tStringInput::ungetch()
glslang::TPpContext::tStringInput::~tStringInput()
glslang::TPpContext::tTokenInput::getch()
glslang::TPpContext::tTokenInput::peekContinuedPasting(int)
glslang::TPpContext::tTokenInput::peekPasting()
glslang::TPpContext::tTokenInput::scan(glslang::TPpToken*)
glslang::TPpContext::tTokenInput::ungetch()
glslang::TPpContext::tTokenInput::~tTokenInput()
glslang::TPpContext::tUngotTokenInput::getch()
glslang::TPpContext::tUngotTokenInput::scan(glslang::TPpToken*)
glslang::TPpContext::tUngotTokenInput::ungetch()
glslang::TPpContext::tUngotTokenInput::~tUngotTokenInput()
glslang::TPpContext::tZeroInput::getch()
glslang::TPpContext::tZeroInput::scan(glslang::TPpToken*)
glslang::TPpContext::tZeroInput::ungetch()
glslang::TPpContext::tZeroInput::~tZeroInput()
glslang::TPpContext::tokenPaste(int, glslang::TPpToken&)
glslang::TPpContext::tokenize(glslang::TPpToken&)
glslang::TPpContext::~TPpContext()
glslang::TPrecisionManager::~TPrecisionManager()
glslang::TProcesses::addProcess(char const*)
glslang::TProgram::TProgram()
glslang::TProgram::getInfoLog()
glslang::TProgram::link(EShMessages)
glslang::TProgram::linkStage(EShLanguage, EShMessages)
glslang::TProgram::~TProgram()
glslang::TQualifier::isArrayedIo(EShLanguage) const
glslang::TRemapIdTraverser::visitSymbol(glslang::TIntermSymbol*)
glslang::TRemapIdTraverser::~TRemapIdTraverser()
glslang::TSampler::getString() const
glslang::TScanContext::dMat()
glslang::TScanContext::deleteKeywordMap()
glslang::TScanContext::fillInKeywordMap()
glslang::TScanContext::firstGenerationImage(bool)
glslang::TScanContext::identifierOrType()
glslang::TScanContext::secondGenerationImage()
glslang::TScanContext::tokenize(glslang::TPpContext*, glslang::TParserToken&)
glslang::TScanContext::tokenizeIdentifier()
glslang::TScanContext::~TScanContext()
glslang::TShader::ForbidIncluder::releaseInclude(glslang::TShader::Includer::IncludeResult*)
glslang::TShader::ForbidIncluder::~ForbidIncluder()
glslang::TShader::Includer::includeLocal(char const*, char const*, unsigned long)
glslang::TShader::Includer::includeSystem(char const*, char const*, unsigned long)
glslang::TShader::Includer::~Includer()
glslang::TShader::TShader(EShLanguage)
glslang::TShader::getInfoDebugLog()
glslang::TShader::getInfoLog()
glslang::TShader::parse(TBuiltInResource const*, int, EProfile, bool, bool, EShMessages, glslang::TShader::Includer&)
glslang::TShader::setEntryPoint(char const*)
glslang::TShader::setStringsWithLengths(char const* const*, int const*, int)
glslang::TShader::~TShader()
glslang::TShaderQualifiers::merge(glslang::TShaderQualifiers const&)
glslang::TSmallArrayVector::operator==(glslang::TSmallArrayVector const&) const
glslang::TSmallArrayVector::push_back(unsigned int, glslang::TIntermTyped*)
glslang::TSmallArrayVector::~TSmallArrayVector()
glslang::TSourceLoc::getStringNameOrNum(bool) const
glslang::TStringAtomMap::TStringAtomMap()
glslang::TStringAtomMap::addAtomFixed(char const*, int)
glslang::TStringAtomMap::getAtom(char const*) const
glslang::TSymbol::TSymbol(glslang::TSymbol const&)
glslang::TSymbol::addPrefix(char const*)
glslang::TSymbol::changeName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*)
glslang::TSymbol::getAsAnonMember() const
glslang::TSymbol::getAsFunction()
glslang::TSymbol::getAsFunction() const
glslang::TSymbol::getAsVariable()
glslang::TSymbol::getAsVariable() const
glslang::TSymbol::getExtensions() const
glslang::TSymbol::getMangledName() const
glslang::TSymbol::getName() const
glslang::TSymbol::getNumExtensions() const
glslang::TSymbol::getUniqueId() const
glslang::TSymbol::isReadOnly() const
glslang::TSymbol::makeReadOnly()
glslang::TSymbol::setExtensions(int, char const* const*)
glslang::TSymbol::setUniqueId(int)
glslang::TSymbol::~TSymbol()
glslang::TSymbolTable::adoptLevels(glslang::TSymbolTable&)
glslang::TSymbolTable::copyTable(glslang::TSymbolTable const&)
glslang::TSymbolTable::copyUpDeferredInsert(glslang::TSymbol*)
glslang::TSymbolTable::dump(TInfoSink&, bool) const
glslang::TSymbolTable::insert(glslang::TSymbol&)
glslang::TSymbolTable::push()
glslang::TSymbolTable::pushThis(glslang::TSymbol&)
glslang::TSymbolTable::setVariableExtensions(char const*, char const*, int, char const* const*)
glslang::TSymbolTable::setVariableExtensions(char const*, int, char const* const*)
glslang::TSymbolTableLevel::clone() const
glslang::TSymbolTableLevel::findFunctionNameList(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TVector<glslang::TFunction const*>&)
glslang::TSymbolTableLevel::findFunctionVariableName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, bool&) const
glslang::TSymbolTableLevel::getPreviousDefaultPrecisions(glslang::TPrecisionQualifier*)
glslang::TSymbolTableLevel::hasFunctionName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
glslang::TSymbolTableLevel::insert(glslang::TSymbol&, bool)
glslang::TSymbolTableLevel::insertAnonymousMembers(glslang::TSymbol&, int)
glslang::TSymbolTableLevel::readOnly()
glslang::TSymbolTableLevel::relateToOperator(char const*, glslang::TOperator)
glslang::TSymbolTableLevel::setFunctionExtensions(char const*, int, char const* const*)
glslang::TSymbolTableLevel::setPreviousDefaultPrecisions(glslang::TPrecisionQualifier const*)
glslang::TSymbolTableLevel::~TSymbolTableLevel()
glslang::TType::TType(glslang::TBasicType, glslang::TType const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TType::TType(glslang::TPublicType const&)
glslang::TType::TType(glslang::TType const&, int, bool)
glslang::TType::TType(glslang::TVector<glslang::TTypeLoc>*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TType::TType(glslang::TVector<glslang::TTypeLoc>*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, glslang::TQualifier const&)
glslang::TType::adoptImplicitArraySizes(bool)
glslang::TType::buildMangledName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&) const
glslang::TType::computeNumComponents() const
glslang::TType::containsArray() const
glslang::TType::containsBasicType(glslang::TBasicType) const
glslang::TType::containsBuiltIn() const
glslang::TType::containsNonOpaque() const
glslang::TType::containsOpaque() const
glslang::TType::containsSpecializationSize() const
glslang::TType::containsStructure() const
glslang::TType::containsUnsizedArray() const
glslang::TType::copyArrayInnerSizes(glslang::TArraySizes const*)
glslang::TType::copyArraySizes(glslang::TArraySizes const&)
glslang::TType::copyTypeParameters(glslang::TArraySizes const&)
glslang::TType::deepCopy(glslang::TType const&, glslang::TMap<glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*, std::__1::less<glslang::TVector<glslang::TTypeLoc>*> >&)
glslang::TType::getArraySizes()
glslang::TType::getArraySizes() const
glslang::TType::getBasicType() const
glslang::TType::getBasicTypeString() const
glslang::TType::getCompleteString() const
glslang::TType::getCumulativeArraySize() const
glslang::TType::getFieldName() const
glslang::TType::getImplicitArraySize() const
glslang::TType::getMatrixCols() const
glslang::TType::getMatrixRows() const
glslang::TType::getOuterArrayNode() const
glslang::TType::getOuterArraySize() const
glslang::TType::getQualifier()
glslang::TType::getQualifier() const
glslang::TType::getReferentType() const
glslang::TType::getSampler()
glslang::TType::getSampler() const
glslang::TType::getTypeName() const
glslang::TType::getTypeParameters()
glslang::TType::getTypeParameters() const
glslang::TType::getVectorSize() const
glslang::TType::hiddenMember() const
glslang::TType::hideMember()
glslang::TType::isArray() const
glslang::TType::isArrayVariablyIndexed() const
glslang::TType::isBuiltIn() const
glslang::TType::isFloatingDomain() const
glslang::TType::isImage() const
glslang::TType::isIntegerDomain() const
glslang::TType::isMatrix() const
glslang::TType::isOpaque() const
glslang::TType::isParameterized() const
glslang::TType::isScalar() const
glslang::TType::isScalarOrVec1() const
glslang::TType::isSizedArray() const
glslang::TType::isStruct() const
glslang::TType::isSubpass() const
glslang::TType::isTexture() const
glslang::TType::isUnsizedArray() const
glslang::TType::isUnusableName() const
glslang::TType::isVector() const
glslang::TType::sameCoopMatBaseType(glslang::TType const&) const
glslang::TType::sameElementShape(glslang::TType const&) const
glslang::TType::sameStructType(glslang::TType const&) const
glslang::TType::setArrayVariablyIndexed()
glslang::TType::setFieldName(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
glslang::TType::updateImplicitArraySize(int)
glslang::TType::~TType()
glslang::TUserIdTraverser::visitSymbol(glslang::TIntermSymbol*)
glslang::TUserIdTraverser::~TUserIdTraverser()
glslang::TVariable::TVariable(glslang::TVariable const&)
glslang::TVariable::TVariable(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::TType const&, bool)
glslang::TVariable::clone() const
glslang::TVariable::dump(TInfoSink&, bool) const
glslang::TVariable::getAnonId() const
glslang::TVariable::getAsVariable()
glslang::TVariable::getAsVariable() const
glslang::TVariable::getConstArray() const
glslang::TVariable::getConstSubtree() const
glslang::TVariable::getMemberExtensions(int) const
glslang::TVariable::getNumMemberExtensions(int) const
glslang::TVariable::getType() const
glslang::TVariable::getWritableConstArray()
glslang::TVariable::getWritableType()
glslang::TVariable::hasMemberExtensions() const
glslang::TVariable::isUserType() const
glslang::TVariable::setAnonId(int)
glslang::TVariable::setConstArray(glslang::TConstUnionArray const&)
glslang::TVariable::setConstSubtree(glslang::TIntermTyped*)
glslang::TVariable::setMemberExtensions(int, int, char const* const*)
glslang::TVariable::~TVariable()
glslang::TextureUpgradeAndSamplerRemovalTransform::visitAggregate(glslang::TVisit, glslang::TIntermAggregate*)
glslang::TextureUpgradeAndSamplerRemovalTransform::visitSymbol(glslang::TIntermSymbol*)
glslang::TextureUpgradeAndSamplerRemovalTransform::~TextureUpgradeAndSamplerRemovalTransform()
glslang::ThreadInitializeIndex
glslang::binop
glslang::post_depth_coverageEXTs
glslang::unop
glslang::viewportEXTs
glslang_binary_double_output
glslang_finalize(sh::TParseContext*)
glslang_initialize(sh::TParseContext*)
glslang_lex_autogen.cpp
glslang_parse(sh::TParseContext*)
glslang_scan(unsigned long, char const* const*, int const*, sh::TParseContext*)
glslang_tab.cpp
glslang_tab_autogen.cpp
glslang_wrapper_utils.cpp
glx_utils.cpp
goto
gpu.angle
gpu.angle.gpu
graphics_robust_access_pass.cpp
greaterThan
greaterThan(10B10B
greaterThan(10D10D
greaterThan(10E10E
greaterThan(20B20B
greaterThan(20D20D
greaterThan(20E20E
greaterThan(30B30B
greaterThan(30D30D
greaterThan(30E30E
greaterThanEqual
greaterThanEqual(10B10B
greaterThanEqual(10D10D
greaterThanEqual(10E10E
greaterThanEqual(20B20B
greaterThanEqual(20D20D
greaterThanEqual(20E20E
greaterThanEqual(30B30B
greaterThanEqual(30D30D
greaterThanEqual(30E30E
group operation
groupMemoryBarrier(
groupshared
guard variable for (anonymous namespace)::PlatformMethods()::platformMethods
guard variable for MakeStaticString(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::strings
guard variable for angle::AsyncWaitableEvent::wait()::trace_event_unique_catstatic110
guard variable for angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1::operator()() const::trace_event_unique_catstatic193
guard variable for angle::LoggingAnnotator::beginEvent(char const*, char const*)::trace_event_unique_catstatic23
guard variable for angle::LoggingAnnotator::endEvent(char const*)::trace_event_unique_catstatic28
guard variable for angle::LoggingAnnotator::setMarker(char const*)::trace_event_unique_catstatic33
guard variable for egl::(anonymous namespace)::GetANGLEPlatformDisplayMap()::displays
guard variable for egl::(anonymous namespace)::GetDevicePlatformDisplayMap()::displays
guard variable for egl::(anonymous namespace)::GetWindowSurfaces()::windowSurfaces
guard variable for egl::Display::GetClientExtensionString()::clientExtensionsString
guard variable for egl::Display::GetClientExtensions()::clientExtensions
guard variable for egl::Display::initialize()::trace_event_unique_catstatic784
guard variable for egl::GetDeviceSet()::devices
guard variable for egl::Surface::swap(gl::Context const*)::trace_event_unique_catstatic280
guard variable for gl::Format::Invalid()::invalid
guard variable for gl::GetAllSizedInternalFormats()::formatSet
guard variable for gl::GetExtensionInfoMap()::extensionInfo
guard variable for gl::GetInternalFormatInfo(unsigned int, unsigned int)::defaultInternalFormat
guard variable for gl::GetInternalFormatMap()::formatMap
guard variable for gl::GetSizedInternalFormatInfo(unsigned int)::defaultInternalFormat
guard variable for rx::BufferVk::getIndexRange(gl::Context const*, gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange*)::trace_event_unique_catstatic450
guard variable for rx::BufferVk::mapRange(gl::Context const*, unsigned long, unsigned long, unsigned int, void**)::trace_event_unique_catstatic347
guard variable for rx::CommandProcessor::queueCommands(rx::vk::CommandProcessorTask const&)::trace_event_unique_catstatic20
guard variable for rx::CommandProcessor::waitForWorkComplete()::trace_event_unique_catstatic60
guard variable for rx::CommandQueue::checkCompletedCommands(rx::vk::Context*)::trace_event_unique_catstatic356
guard variable for rx::CommandQueue::checkCompletedCommands(rx::vk::Context*)::trace_event_unique_catstatic374
guard variable for rx::CommandQueue::finishToSerial(rx::vk::Context*, rx::Serial, unsigned long)::trace_event_unique_catstatic499
guard variable for rx::CommandQueue::submitFrame(rx::vk::Context*, egl::ContextPriority, VkSubmitInfo const&, rx::vk::Shared<rx::vk::Fence> const&, std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >*, rx::vk::CommandPool*, rx::vk::priv::CommandBuffer&&)::trace_event_unique_catstatic540
guard variable for rx::ContextVk::ContextVk(gl::State const&, gl::ErrorSet*, rx::RendererVk*)::trace_event_unique_catstatic634
guard variable for rx::ContextVk::clearAllGarbage()::trace_event_unique_catstatic1898
guard variable for rx::ContextVk::finishImpl()::trace_event_unique_catstatic3873
guard variable for rx::ContextVk::flushGpuEvents(double, double)::categoryEnabled
guard variable for rx::ContextVk::flushImpl(rx::vk::Semaphore const*)::trace_event_unique_catstatic3805
guard variable for rx::ContextVk::getNextAvailableCommandBuffer(rx::vk::CommandBufferHelper**, bool)::trace_event_unique_catstatic4328
guard variable for rx::ContextVk::initialize()::trace_event_unique_catstatic784
guard variable for rx::ContextVk::recycleCommandBuffer(rx::vk::CommandBufferHelper*)::trace_event_unique_catstatic4342
guard variable for rx::ContextVk::synchronizeCpuGpuTime()::trace_event_unique_catstatic1665
guard variable for rx::DisplayVk::waitClient(gl::Context const*)::trace_event_unique_catstatic91
guard variable for rx::DisplayVk::waitNative(gl::Context const*, int)::trace_event_unique_catstatic98
guard variable for rx::FramebufferVk::clear(gl::Context const*, unsigned int)::trace_event_unique_catstatic243
guard variable for rx::FramebufferVk::readPixelsImpl(rx::ContextVk*, gl::Rectangle const&, rx::PackPixelsParams const&, VkImageAspectFlagBits, rx::RenderTargetVk*, void*)::trace_event_unique_catstatic1871
guard variable for rx::ProgramGL::LinkEventGL::wait(gl::Context const*)::trace_event_unique_catstatic208
guard variable for rx::ProgramGL::LinkEventNativeParallel::wait(gl::Context const*)::trace_event_unique_catstatic169
guard variable for rx::ProgramGL::LinkTask::operator()()::trace_event_unique_catstatic142
guard variable for rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::trace_event_unique_catstatic226
guard variable for rx::ProgramGL::load(gl::Context const*, gl::BinaryInputStream*, gl::InfoLog&)::trace_event_unique_catstatic63
guard variable for rx::RendererVk::queuePresent(egl::ContextPriority, VkPresentInfoKHR const&)::trace_event_unique_catstatic2040
guard variable for rx::RendererVk::queuePresent(egl::ContextPriority, VkPresentInfoKHR const&)::trace_event_unique_catstatic2052
guard variable for rx::SemaphoreVk::importZirconEvent(rx::ContextVk*, unsigned int)::vkImportSemaphoreZirconHandleFUCHSIA
guard variable for rx::TextureVk::copyBufferDataToImage(rx::ContextVk*, rx::vk::BufferHelper*, gl::ImageIndex, unsigned int, unsigned int, gl::Box const&, unsigned long)::trace_event_unique_catstatic1288
guard variable for rx::TextureVk::copyImageDataToBufferAndGetData(rx::ContextVk*, unsigned long, unsigned int, gl::Box const&, unsigned char**)::trace_event_unique_catstatic1249
guard variable for rx::TranslateTask::operator()()::trace_event_unique_catstatic50
guard variable for rx::TranslateTaskGL::operator()()::trace_event_unique_catstatic42
guard variable for rx::VertexArrayVk::convertVertexBufferCPU(rx::ContextVk*, rx::BufferVk*, gl::VertexBinding const&, unsigned long, rx::vk::Format const&, rx::ConversionBuffer*, unsigned int)::trace_event_unique_catstatic400
guard variable for rx::WindowSurfaceVk::createSwapChain(rx::vk::Context*, gl::Extents const&, VkSwapchainKHR_T*)::trace_event_unique_catstatic841
guard variable for rx::WindowSurfaceVk::present(rx::ContextVk*, int*, int, void const*, bool*)::trace_event_unique_catstatic1125
guard variable for rx::WindowSurfaceVk::present(rx::ContextVk*, int*, int, void const*, bool*)::trace_event_unique_catstatic1130
guard variable for rx::WindowSurfaceVk::swapImpl(gl::Context const*, int*, int, void const*)::trace_event_unique_catstatic1291
guard variable for rx::WindowSurfaceVk::swapImpl(gl::Context const*, int*, int, void const*)::trace_event_unique_catstatic1307
guard variable for rx::nativegl::GetInternalFormatInfo(unsigned int, rx::StandardGL)::defaultInternalFormat
guard variable for rx::nativegl::GetInternalFormatMap()::formatMap
guard variable for rx::vk::CommandBufferHelper::flushToPrimary(rx::ContextVk*, rx::vk::priv::CommandBuffer*)::trace_event_unique_catstatic680
guard variable for rx::vk::DeviceMemory::map(VkDevice_T*, unsigned long, unsigned long, unsigned int, unsigned char**) const::trace_event_unique_catstatic1363
guard variable for rx::vk::GarbageObject::destroy(rx::RendererVk*)::trace_event_unique_catstatic607
guard variable for rx::vk::ImageHelper::copyImageDataToBuffer(rx::ContextVk*, unsigned long, unsigned int, unsigned int, gl::Box const&, rx::vk::BufferHelper**, unsigned long*, std::__1::array<unsigned long, 2ul>*, unsigned char**)::trace_event_unique_catstatic4238
guard variable for rx::vk::ImageHelper::readPixels(rx::ContextVk*, gl::Rectangle const&, rx::PackPixelsParams const&, VkImageAspectFlagBits, unsigned int, unsigned int, void*, rx::vk::DynamicBuffer*)::trace_event_unique_catstatic4443
guard variable for rx::vk::LineLoopHelper::getIndexBufferForElementArrayBuffer(rx::ContextVk*, rx::BufferVk*, gl::DrawElementsType, int, long, rx::vk::BufferHelper**, unsigned long*, unsigned int*)::trace_event_unique_catstatic1913
guard variable for rx::vk::priv::CommandBuffer::end()::trace_event_unique_catstatic723
guard variable for rx::vk::priv::SecondaryCommandBuffer::executeCommands(VkCommandBuffer_T*)::trace_event_unique_catstatic148
guard variable for spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > > >(spvtools::utils::round_direction, bool*)::first_rounded_bit
guard variable for spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > > >(spvtools::utils::round_direction, bool*)::last_significant_bit
guard variable for spvtools::val::(anonymous namespace)::ValidateImageOperands(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, spvtools::val::(anonymous namespace)::ImageTypeInfo const&, unsigned int, unsigned int)::kAllImageOperandsHandled
guard variable for spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > >(spvutils::round_direction, bool*)::first_rounded_bit
guard variable for spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > >(spvutils::round_direction, bool*)::last_significant_bit
guard variable for std::__1::__cloc()::result
guard variable for std::__1::__thread_local_data()::__p
guard variable for std::__1::__time_get_c_storage<char>::__X() const::s
guard variable for std::__1::__time_get_c_storage<char>::__am_pm() const::am_pm
guard variable for std::__1::__time_get_c_storage<char>::__c() const::s
guard variable for std::__1::__time_get_c_storage<char>::__months() const::months
guard variable for std::__1::__time_get_c_storage<char>::__r() const::s
guard variable for std::__1::__time_get_c_storage<char>::__weeks() const::weeks
guard variable for std::__1::__time_get_c_storage<char>::__x() const::s
guard variable for std::__1::__time_get_c_storage<wchar_t>::__X() const::s
guard variable for std::__1::__time_get_c_storage<wchar_t>::__am_pm() const::am_pm
guard variable for std::__1::__time_get_c_storage<wchar_t>::__c() const::s
guard variable for std::__1::__time_get_c_storage<wchar_t>::__months() const::months
guard variable for std::__1::__time_get_c_storage<wchar_t>::__r() const::s
guard variable for std::__1::__time_get_c_storage<wchar_t>::__weeks() const::weeks
guard variable for std::__1::__time_get_c_storage<wchar_t>::__x() const::s
guard variable for std::__1::future_category()::__f
guard variable for std::__1::generic_category()::s
guard variable for std::__1::init_am_pm()::am_pm
guard variable for std::__1::init_months()::months
guard variable for std::__1::init_wam_pm()::am_pm
guard variable for std::__1::init_weeks()::weeks
guard variable for std::__1::init_wmonths()::months
guard variable for std::__1::init_wweeks()::weeks
guard variable for std::__1::ios_base::Init::Init()::init_the_streams
guard variable for std::__1::iostream_category()::s
guard variable for std::__1::locale::__global()::g
guard variable for std::__1::locale::classic()::c
guard variable for std::__1::system_category()::s
gyG
gz7
gzclose.c
gzlib.c
gzread.c
gzwrite.c
g|/
h
h*>
h0.
h6
h7
h8
h>+
hG
hJ5
hK
hL5
hO-
half float image
half float literal
half float matrix
half float sampler
half float subpass input
half float texture
half float vector
half floating-point suffix
half1
half1x1
half1x2
half1x3
half1x4
half2
half2x1
half2x2
half2x3
half2x4
half3
half3x1
half3x2
half3x3
half3x4
half4
half4x1
half4x2
half4x3
half4x4
halfBitsToInt16
halfBitsToUint16
halfRenderArea
half_cos
half_divide
half_exp
half_exp10
half_exp2
half_log
half_log10
half_log2
half_powr
half_recip
half_rsqrt
half_sin
half_sqrt
half_tan
handleError
has bit width
has branches to multiple other case construct targets
has branches to the case construct that targets
has components with bit width
has invalid branch to block
has invalid mask component
has no type
has not been defined
has storage class StorageBuffer.
hash.cpp
headed by <ID>
header crc mismatch
header name too long
helperInvocationEXT
hexadecimal literal too big
hexadecimal literal too long
highp
highp   vec4  gl_FragCoord;        bool  gl_FrontFacing;mediump vec2  gl_PointCoord;highp   float gl_FragDepth;
highp   vec4  gl_Position;mediump float gl_PointSize;
highp float gl_FragDepthEXT;
highp float near;highp float far;highp float diff;
highp int
highp ivec2 textureSize(__samplerExternal2DY2YEXT, int lod);vec4 texture(__samplerExternal2DY2YEXT, vec2);vec4 texture(__samplerExternal2DY2YEXT, vec2, float bias);vec4 textureProj(__samplerExternal2DY2YEXT, vec3);vec4 textureProj(__samplerExternal2DY2YEXT, vec3, float bias);vec4 textureProj(__samplerExternal2DY2YEXT, vec4);vec4 textureProj(__samplerExternal2DY2YEXT, vec4, float bias);vec4 texelFetch(__samplerExternal2DY2YEXT sampler, ivec2, int lod);
highp ivec2 textureSize(samplerExternalOES, int lod);vec4 texture(samplerExternalOES, vec2);vec4 texture(samplerExternalOES, vec2, float bias);vec4 textureProj(samplerExternalOES, vec3);vec4 textureProj(samplerExternalOES, vec3, float bias);vec4 textureProj(samplerExternalOES, vec4);vec4 textureProj(samplerExternalOES, vec4, float bias);vec4 texelFetch(samplerExternalOES, ivec2, int lod);
highp precision qualifier
highp uint
highp uint packSnorm2x16(vec2);      vec2 unpackSnorm2x16(highp uint);highp uint packHalf2x16(vec2);
highp uint packSnorm4x8(vec4);highp uint packUnorm4x8(vec4);
highp uint packUnorm2x16(vec2);vec2 unpackUnorm2x16(highp uint);
highp vec4  gl_Position;highp float gl_PointSize;
histogramBoolean
histogramCustomCounts
histogramEnumeration
histogramSparse
hitAttributeEXT
hitAttributeNV
hitAttributeNV block
hlsl-offsets
hlslAttributes.cpp
hlslGrammar.cpp
hlslOpMap.cpp
hlslParseHelper.cpp
hlslParseables.cpp
hlslScanContext.cpp
hlslTokenStream.cpp
ho7
hp7
http://anglebug.com/1085
http://anglebug.com/1512
http://anglebug.com/1637
http://anglebug.com/1936
http://anglebug.com/2046
http://anglebug.com/2162
http://anglebug.com/2273
http://anglebug.com/2514
http://anglebug.com/2517
http://anglebug.com/2703
http://anglebug.com/2727
http://anglebug.com/2970
http://anglebug.com/2978
http://anglebug.com/3016
http://anglebug.com/3027
http://anglebug.com/3045
http://anglebug.com/3078
http://anglebug.com/3153
http://anglebug.com/3205
http://anglebug.com/3206
http://anglebug.com/3243
http://anglebug.com/3452
http://anglebug.com/3498
http://anglebug.com/3502
http://anglebug.com/3623, http://anglebug.com/3624, http://anglebug.com/3625
http://anglebug.com/3729
http://anglebug.com/3859
http://anglebug.com/3997
http://anglebug.com/4214
http://anglebug.com/4267
http://anglebug.com/4324
http://anglebug.com/4384
http://anglebug.com/4405
http://anglebug.com/4428
http://anglebug.com/4442
http://anglebug.com/4490
http://anglebug.com/4633
http://anglebug.com/4646
http://anglebug.com/482
http://crbug.com/1094869
http://crbug.com/110263
http://crbug.com/308366
http://crbug.com/398694
http://crbug.com/403957
http://crbug.com/565179
http://crbug.com/642227
http://crbug.com/642605
http://crbug.com/644669
http://crbug.com/650547
http://crbug.com/672380
http://crbug.com/709351
http://crbug.com/772651
http://crbug.com/797243
http://crbug.com/809422
http://crbug.com/830046
http://crbug.com/849576
http://crbug.com/883276
http://crbug.com/927470
https://anglebug.com/4674
https://crbug.com/1046462
https://crbug.com/1091824
https://crbug.com/705865
https://crbug.com/710443
https://crbug.com/811661
hvec2
hvec3
hvec4
hypot
hzT
i
i(>
i16
i32vec2
i32vec3
i32vec4
i3>
i64
i7
i8
i;2
i>
i>>
iAG
iBD
iC@
iD2
iK+
iMulExtended
ibC
icoopmatNV
id:
identical
identifier after ::
identifier not previously declared
identifier_list
identifiers containing consecutive underscores ("__") are reserved
identifiers containing consecutive underscores ("__") are reserved, and an error if version < 300
identifiers containing two consecutive underscores (__) are reserved as possible future keywords
identifiers starting with "gl_" are reserved
ie>
if
if (
if (clamp(v_texcoord, vec2(0.0),
if (u_multiply_alpha)
if (u_unmultiply_alpha && color.a != 0.0)
if it has storage class Uniform.
if level is zero and the texture is incomplete, it must have all of its faces specified at level zero.
if level is zero and the texture is incomplete, it must have no mip levels specified except zero.
if-conversion
if_conversion.cpp
ifdef
ifndef
ignoreIntersectionEXT
ignoreIntersectionNV
ignoring shader_profile
ignoring unrecognized register type
iimage1D
iimage1DArray
iimage2D
iimage2DArray
iimage2DMS
iimage2DMSArray
iimage2DRect
iimage3D
iimageBuffer
iimageCube
ijG
illegal - vector component fields not from the same set
illegal type argument for default precision qualifier
illegal type for precision qualifier
illegal use of escape character
illegal use of type 'void'
illegal vector field selection
ilogb
imO
image binding greater than gl_MaxImageUnits
image channel data type
image channel order
image formats must match
image load store
image load-store format
image uniform
image variables not declared 'writeonly' and without a format layout qualifier
imageAtomic
imageAtomicAdd
imageAtomicAdd(00z10D00D
imageAtomicAdd(00z10D00E
imageAtomicAdd(01A10D00D
imageAtomicAdd(01A10D00E
imageAtomicAdd(01B10D00D
imageAtomicAdd(01B10D00E
imageAtomicAdd(01C20D00D
imageAtomicAdd(01C20D00E
imageAtomicAdd(01D20D00D
imageAtomicAdd(01D20D00E
imageAtomicAdd(01E20D00D
imageAtomicAdd(01E20D00E
imageAtomicAdd(01F20D00D
imageAtomicAdd(01F20D00E
imageAtomicAdd(01G20D00D
imageAtomicAdd(01G20D00E
imageAtomicAdd(01H20D00D
imageAtomicAdd(01H20D00E
imageAtomicAdd(01I20D00D
imageAtomicAdd(01I20D00E
imageAtomicAdd(01J20D00D
imageAtomicAdd(01J20D00E
imageAtomicAdd(01K20D00D
imageAtomicAdd(01K20D00E
imageAtomicAdd(01L00D00D
imageAtomicAdd(01L00D00E
imageAtomicAdd(01M00D00D
imageAtomicAdd(01M00D00E
imageAtomicAdd(01N00D00D
imageAtomicAdd(01N00D00E
imageAtomicAdd(01O10D00D
imageAtomicAdd(01O10D00E
imageAtomicAdd(01P10D00D
imageAtomicAdd(01P10D00E
imageAtomicAdd(01Q10D00D
imageAtomicAdd(01Q10D00E
imageAtomicAdd(01R10D00D00D
imageAtomicAdd(01R10D00D00E
imageAtomicAdd(01S10D00D00D
imageAtomicAdd(01S10D00D00E
imageAtomicAdd(01T10D00D00D
imageAtomicAdd(01T10D00D00E
imageAtomicAdd(01U20D00D00D
imageAtomicAdd(01U20D00D00E
imageAtomicAdd(01V20D00D00D
imageAtomicAdd(01V20D00D00E
imageAtomicAdd(01W20D00D00D
imageAtomicAdd(01W20D00D00E
imageAtomicAdd(01X10D00D
imageAtomicAdd(01X10D00E
imageAtomicAdd(01Y10D00D
imageAtomicAdd(01Y10D00E
imageAtomicAdd(01Z10D00D
imageAtomicAdd(01Z10D00E
imageAtomicAdd(01a20D00D
imageAtomicAdd(01a20D00E
imageAtomicAdd(01b20D00D
imageAtomicAdd(01b20D00E
imageAtomicAdd(01c20D00D
imageAtomicAdd(01c20D00E
imageAtomicAdd(01g00D00D
imageAtomicAdd(01g00D00E
imageAtomicAdd(01h00D00D
imageAtomicAdd(01h00D00E
imageAtomicAdd(01i00D00D
imageAtomicAdd(01i00D00E
imageAtomicAdd(volatile coherent
imageAtomicAnd
imageAtomicAnd(00z10D00D
imageAtomicAnd(00z10D00E
imageAtomicAnd(01A10D00D
imageAtomicAnd(01A10D00E
imageAtomicAnd(01B10D00D
imageAtomicAnd(01B10D00E
imageAtomicAnd(01C20D00D
imageAtomicAnd(01C20D00E
imageAtomicAnd(01D20D00D
imageAtomicAnd(01D20D00E
imageAtomicAnd(01E20D00D
imageAtomicAnd(01E20D00E
imageAtomicAnd(01F20D00D
imageAtomicAnd(01F20D00E
imageAtomicAnd(01G20D00D
imageAtomicAnd(01G20D00E
imageAtomicAnd(01H20D00D
imageAtomicAnd(01H20D00E
imageAtomicAnd(01I20D00D
imageAtomicAnd(01I20D00E
imageAtomicAnd(01J20D00D
imageAtomicAnd(01J20D00E
imageAtomicAnd(01K20D00D
imageAtomicAnd(01K20D00E
imageAtomicAnd(01L00D00D
imageAtomicAnd(01L00D00E
imageAtomicAnd(01M00D00D
imageAtomicAnd(01M00D00E
imageAtomicAnd(01N00D00D
imageAtomicAnd(01N00D00E
imageAtomicAnd(01O10D00D
imageAtomicAnd(01O10D00E
imageAtomicAnd(01P10D00D
imageAtomicAnd(01P10D00E
imageAtomicAnd(01Q10D00D
imageAtomicAnd(01Q10D00E
imageAtomicAnd(01R10D00D00D
imageAtomicAnd(01R10D00D00E
imageAtomicAnd(01S10D00D00D
imageAtomicAnd(01S10D00D00E
imageAtomicAnd(01T10D00D00D
imageAtomicAnd(01T10D00D00E
imageAtomicAnd(01U20D00D00D
imageAtomicAnd(01U20D00D00E
imageAtomicAnd(01V20D00D00D
imageAtomicAnd(01V20D00D00E
imageAtomicAnd(01W20D00D00D
imageAtomicAnd(01W20D00D00E
imageAtomicAnd(01X10D00D
imageAtomicAnd(01X10D00E
imageAtomicAnd(01Y10D00D
imageAtomicAnd(01Y10D00E
imageAtomicAnd(01Z10D00D
imageAtomicAnd(01Z10D00E
imageAtomicAnd(01a20D00D
imageAtomicAnd(01a20D00E
imageAtomicAnd(01b20D00D
imageAtomicAnd(01b20D00E
imageAtomicAnd(01c20D00D
imageAtomicAnd(01c20D00E
imageAtomicAnd(01g00D00D
imageAtomicAnd(01g00D00E
imageAtomicAnd(01h00D00D
imageAtomicAnd(01h00D00E
imageAtomicAnd(01i00D00D
imageAtomicAnd(01i00D00E
imageAtomicAnd(volatile coherent
imageAtomicCompSwap
imageAtomicCompSwap(00z10D00D00D
imageAtomicCompSwap(00z10D00E00E
imageAtomicCompSwap(01A10D00D00D
imageAtomicCompSwap(01A10D00E00E
imageAtomicCompSwap(01B10D00D00D
imageAtomicCompSwap(01B10D00E00E
imageAtomicCompSwap(01C20D00D00D
imageAtomicCompSwap(01C20D00E00E
imageAtomicCompSwap(01D20D00D00D
imageAtomicCompSwap(01D20D00E00E
imageAtomicCompSwap(01E20D00D00D
imageAtomicCompSwap(01E20D00E00E
imageAtomicCompSwap(01F20D00D00D
imageAtomicCompSwap(01F20D00E00E
imageAtomicCompSwap(01G20D00D00D
imageAtomicCompSwap(01G20D00E00E
imageAtomicCompSwap(01H20D00D00D
imageAtomicCompSwap(01H20D00E00E
imageAtomicCompSwap(01I20D00D00D
imageAtomicCompSwap(01I20D00E00E
imageAtomicCompSwap(01J20D00D00D
imageAtomicCompSwap(01J20D00E00E
imageAtomicCompSwap(01K20D00D00D
imageAtomicCompSwap(01K20D00E00E
imageAtomicCompSwap(01L00D00D00D
imageAtomicCompSwap(01L00D00E00E
imageAtomicCompSwap(01M00D00D00D
imageAtomicCompSwap(01M00D00E00E
imageAtomicCompSwap(01N00D00D00D
imageAtomicCompSwap(01N00D00E00E
imageAtomicCompSwap(01O10D00D00D
imageAtomicCompSwap(01O10D00E00E
imageAtomicCompSwap(01P10D00D00D
imageAtomicCompSwap(01P10D00E00E
imageAtomicCompSwap(01Q10D00D00D
imageAtomicCompSwap(01Q10D00E00E
imageAtomicCompSwap(01R10D00D00D00D
imageAtomicCompSwap(01R10D00D00E00E
imageAtomicCompSwap(01S10D00D00D00D
imageAtomicCompSwap(01S10D00D00E00E
imageAtomicCompSwap(01T10D00D00D00D
imageAtomicCompSwap(01T10D00D00E00E
imageAtomicCompSwap(01U20D00D00D00D
imageAtomicCompSwap(01U20D00D00E00E
imageAtomicCompSwap(01V20D00D00D00D
imageAtomicCompSwap(01V20D00D00E00E
imageAtomicCompSwap(01W20D00D00D00D
imageAtomicCompSwap(01W20D00D00E00E
imageAtomicCompSwap(01X10D00D00D
imageAtomicCompSwap(01X10D00E00E
imageAtomicCompSwap(01Y10D00D00D
imageAtomicCompSwap(01Y10D00E00E
imageAtomicCompSwap(01Z10D00D00D
imageAtomicCompSwap(01Z10D00E00E
imageAtomicCompSwap(01a20D00D00D
imageAtomicCompSwap(01a20D00E00E
imageAtomicCompSwap(01b20D00D00D
imageAtomicCompSwap(01b20D00E00E
imageAtomicCompSwap(01c20D00D00D
imageAtomicCompSwap(01c20D00E00E
imageAtomicCompSwap(01g00D00D00D
imageAtomicCompSwap(01g00D00E00E
imageAtomicCompSwap(01h00D00D00D
imageAtomicCompSwap(01h00D00E00E
imageAtomicCompSwap(01i00D00D00D
imageAtomicCompSwap(01i00D00E00E
imageAtomicCompSwap(volatile coherent
imageAtomicExchange
imageAtomicExchange(00z10D00B
imageAtomicExchange(00z10D00D
imageAtomicExchange(00z10D00E
imageAtomicExchange(01A10D00B
imageAtomicExchange(01A10D00D
imageAtomicExchange(01A10D00E
imageAtomicExchange(01B10D00B
imageAtomicExchange(01B10D00D
imageAtomicExchange(01B10D00E
imageAtomicExchange(01C20D00B
imageAtomicExchange(01C20D00D
imageAtomicExchange(01C20D00E
imageAtomicExchange(01D20D00B
imageAtomicExchange(01D20D00D
imageAtomicExchange(01D20D00E
imageAtomicExchange(01E20D00B
imageAtomicExchange(01E20D00D
imageAtomicExchange(01E20D00E
imageAtomicExchange(01F20D00B
imageAtomicExchange(01F20D00D
imageAtomicExchange(01F20D00E
imageAtomicExchange(01G20D00B
imageAtomicExchange(01G20D00D
imageAtomicExchange(01G20D00E
imageAtomicExchange(01H20D00B
imageAtomicExchange(01H20D00D
imageAtomicExchange(01H20D00E
imageAtomicExchange(01I20D00B
imageAtomicExchange(01I20D00D
imageAtomicExchange(01I20D00E
imageAtomicExchange(01J20D00B
imageAtomicExchange(01J20D00D
imageAtomicExchange(01J20D00E
imageAtomicExchange(01K20D00B
imageAtomicExchange(01K20D00D
imageAtomicExchange(01K20D00E
imageAtomicExchange(01L00D00B
imageAtomicExchange(01L00D00D
imageAtomicExchange(01L00D00E
imageAtomicExchange(01M00D00B
imageAtomicExchange(01M00D00D
imageAtomicExchange(01M00D00E
imageAtomicExchange(01N00D00B
imageAtomicExchange(01N00D00D
imageAtomicExchange(01N00D00E
imageAtomicExchange(01O10D00B
imageAtomicExchange(01O10D00D
imageAtomicExchange(01O10D00E
imageAtomicExchange(01P10D00B
imageAtomicExchange(01P10D00D
imageAtomicExchange(01P10D00E
imageAtomicExchange(01Q10D00B
imageAtomicExchange(01Q10D00D
imageAtomicExchange(01Q10D00E
imageAtomicExchange(01R10D00D00B
imageAtomicExchange(01R10D00D00D
imageAtomicExchange(01R10D00D00E
imageAtomicExchange(01S10D00D00B
imageAtomicExchange(01S10D00D00D
imageAtomicExchange(01S10D00D00E
imageAtomicExchange(01T10D00D00B
imageAtomicExchange(01T10D00D00D
imageAtomicExchange(01T10D00D00E
imageAtomicExchange(01U20D00D00B
imageAtomicExchange(01U20D00D00D
imageAtomicExchange(01U20D00D00E
imageAtomicExchange(01V20D00D00B
imageAtomicExchange(01V20D00D00D
imageAtomicExchange(01V20D00D00E
imageAtomicExchange(01W20D00D00B
imageAtomicExchange(01W20D00D00D
imageAtomicExchange(01W20D00D00E
imageAtomicExchange(01X10D00B
imageAtomicExchange(01X10D00D
imageAtomicExchange(01X10D00E
imageAtomicExchange(01Y10D00B
imageAtomicExchange(01Y10D00D
imageAtomicExchange(01Y10D00E
imageAtomicExchange(01Z10D00B
imageAtomicExchange(01Z10D00D
imageAtomicExchange(01Z10D00E
imageAtomicExchange(01a20D00B
imageAtomicExchange(01a20D00D
imageAtomicExchange(01a20D00E
imageAtomicExchange(01b20D00B
imageAtomicExchange(01b20D00D
imageAtomicExchange(01b20D00E
imageAtomicExchange(01c20D00B
imageAtomicExchange(01c20D00D
imageAtomicExchange(01c20D00E
imageAtomicExchange(01g00D00B
imageAtomicExchange(01g00D00D
imageAtomicExchange(01g00D00E
imageAtomicExchange(01h00D00B
imageAtomicExchange(01h00D00D
imageAtomicExchange(01h00D00E
imageAtomicExchange(01i00D00B
imageAtomicExchange(01i00D00D
imageAtomicExchange(01i00D00E
imageAtomicLoad
imageAtomicLoad(volatile coherent
imageAtomicMax
imageAtomicMax(00z10D00D
imageAtomicMax(00z10D00E
imageAtomicMax(01A10D00D
imageAtomicMax(01A10D00E
imageAtomicMax(01B10D00D
imageAtomicMax(01B10D00E
imageAtomicMax(01C20D00D
imageAtomicMax(01C20D00E
imageAtomicMax(01D20D00D
imageAtomicMax(01D20D00E
imageAtomicMax(01E20D00D
imageAtomicMax(01E20D00E
imageAtomicMax(01F20D00D
imageAtomicMax(01F20D00E
imageAtomicMax(01G20D00D
imageAtomicMax(01G20D00E
imageAtomicMax(01H20D00D
imageAtomicMax(01H20D00E
imageAtomicMax(01I20D00D
imageAtomicMax(01I20D00E
imageAtomicMax(01J20D00D
imageAtomicMax(01J20D00E
imageAtomicMax(01K20D00D
imageAtomicMax(01K20D00E
imageAtomicMax(01L00D00D
imageAtomicMax(01L00D00E
imageAtomicMax(01M00D00D
imageAtomicMax(01M00D00E
imageAtomicMax(01N00D00D
imageAtomicMax(01N00D00E
imageAtomicMax(01O10D00D
imageAtomicMax(01O10D00E
imageAtomicMax(01P10D00D
imageAtomicMax(01P10D00E
imageAtomicMax(01Q10D00D
imageAtomicMax(01Q10D00E
imageAtomicMax(01R10D00D00D
imageAtomicMax(01R10D00D00E
imageAtomicMax(01S10D00D00D
imageAtomicMax(01S10D00D00E
imageAtomicMax(01T10D00D00D
imageAtomicMax(01T10D00D00E
imageAtomicMax(01U20D00D00D
imageAtomicMax(01U20D00D00E
imageAtomicMax(01V20D00D00D
imageAtomicMax(01V20D00D00E
imageAtomicMax(01W20D00D00D
imageAtomicMax(01W20D00D00E
imageAtomicMax(01X10D00D
imageAtomicMax(01X10D00E
imageAtomicMax(01Y10D00D
imageAtomicMax(01Y10D00E
imageAtomicMax(01Z10D00D
imageAtomicMax(01Z10D00E
imageAtomicMax(01a20D00D
imageAtomicMax(01a20D00E
imageAtomicMax(01b20D00D
imageAtomicMax(01b20D00E
imageAtomicMax(01c20D00D
imageAtomicMax(01c20D00E
imageAtomicMax(01g00D00D
imageAtomicMax(01g00D00E
imageAtomicMax(01h00D00D
imageAtomicMax(01h00D00E
imageAtomicMax(01i00D00D
imageAtomicMax(01i00D00E
imageAtomicMax(volatile coherent
imageAtomicMin
imageAtomicMin(00z10D00D
imageAtomicMin(00z10D00E
imageAtomicMin(01A10D00D
imageAtomicMin(01A10D00E
imageAtomicMin(01B10D00D
imageAtomicMin(01B10D00E
imageAtomicMin(01C20D00D
imageAtomicMin(01C20D00E
imageAtomicMin(01D20D00D
imageAtomicMin(01D20D00E
imageAtomicMin(01E20D00D
imageAtomicMin(01E20D00E
imageAtomicMin(01F20D00D
imageAtomicMin(01F20D00E
imageAtomicMin(01G20D00D
imageAtomicMin(01G20D00E
imageAtomicMin(01H20D00D
imageAtomicMin(01H20D00E
imageAtomicMin(01I20D00D
imageAtomicMin(01I20D00E
imageAtomicMin(01J20D00D
imageAtomicMin(01J20D00E
imageAtomicMin(01K20D00D
imageAtomicMin(01K20D00E
imageAtomicMin(01L00D00D
imageAtomicMin(01L00D00E
imageAtomicMin(01M00D00D
imageAtomicMin(01M00D00E
imageAtomicMin(01N00D00D
imageAtomicMin(01N00D00E
imageAtomicMin(01O10D00D
imageAtomicMin(01O10D00E
imageAtomicMin(01P10D00D
imageAtomicMin(01P10D00E
imageAtomicMin(01Q10D00D
imageAtomicMin(01Q10D00E
imageAtomicMin(01R10D00D00D
imageAtomicMin(01R10D00D00E
imageAtomicMin(01S10D00D00D
imageAtomicMin(01S10D00D00E
imageAtomicMin(01T10D00D00D
imageAtomicMin(01T10D00D00E
imageAtomicMin(01U20D00D00D
imageAtomicMin(01U20D00D00E
imageAtomicMin(01V20D00D00D
imageAtomicMin(01V20D00D00E
imageAtomicMin(01W20D00D00D
imageAtomicMin(01W20D00D00E
imageAtomicMin(01X10D00D
imageAtomicMin(01X10D00E
imageAtomicMin(01Y10D00D
imageAtomicMin(01Y10D00E
imageAtomicMin(01Z10D00D
imageAtomicMin(01Z10D00E
imageAtomicMin(01a20D00D
imageAtomicMin(01a20D00E
imageAtomicMin(01b20D00D
imageAtomicMin(01b20D00E
imageAtomicMin(01c20D00D
imageAtomicMin(01c20D00E
imageAtomicMin(01g00D00D
imageAtomicMin(01g00D00E
imageAtomicMin(01h00D00D
imageAtomicMin(01h00D00E
imageAtomicMin(01i00D00D
imageAtomicMin(01i00D00E
imageAtomicMin(volatile coherent
imageAtomicOr
imageAtomicOr(00z10D00D
imageAtomicOr(00z10D00E
imageAtomicOr(01A10D00D
imageAtomicOr(01A10D00E
imageAtomicOr(01B10D00D
imageAtomicOr(01B10D00E
imageAtomicOr(01C20D00D
imageAtomicOr(01C20D00E
imageAtomicOr(01D20D00D
imageAtomicOr(01D20D00E
imageAtomicOr(01E20D00D
imageAtomicOr(01E20D00E
imageAtomicOr(01F20D00D
imageAtomicOr(01F20D00E
imageAtomicOr(01G20D00D
imageAtomicOr(01G20D00E
imageAtomicOr(01H20D00D
imageAtomicOr(01H20D00E
imageAtomicOr(01I20D00D
imageAtomicOr(01I20D00E
imageAtomicOr(01J20D00D
imageAtomicOr(01J20D00E
imageAtomicOr(01K20D00D
imageAtomicOr(01K20D00E
imageAtomicOr(01L00D00D
imageAtomicOr(01L00D00E
imageAtomicOr(01M00D00D
imageAtomicOr(01M00D00E
imageAtomicOr(01N00D00D
imageAtomicOr(01N00D00E
imageAtomicOr(01O10D00D
imageAtomicOr(01O10D00E
imageAtomicOr(01P10D00D
imageAtomicOr(01P10D00E
imageAtomicOr(01Q10D00D
imageAtomicOr(01Q10D00E
imageAtomicOr(01R10D00D00D
imageAtomicOr(01R10D00D00E
imageAtomicOr(01S10D00D00D
imageAtomicOr(01S10D00D00E
imageAtomicOr(01T10D00D00D
imageAtomicOr(01T10D00D00E
imageAtomicOr(01U20D00D00D
imageAtomicOr(01U20D00D00E
imageAtomicOr(01V20D00D00D
imageAtomicOr(01V20D00D00E
imageAtomicOr(01W20D00D00D
imageAtomicOr(01W20D00D00E
imageAtomicOr(01X10D00D
imageAtomicOr(01X10D00E
imageAtomicOr(01Y10D00D
imageAtomicOr(01Y10D00E
imageAtomicOr(01Z10D00D
imageAtomicOr(01Z10D00E
imageAtomicOr(01a20D00D
imageAtomicOr(01a20D00E
imageAtomicOr(01b20D00D
imageAtomicOr(01b20D00E
imageAtomicOr(01c20D00D
imageAtomicOr(01c20D00E
imageAtomicOr(01g00D00D
imageAtomicOr(01g00D00E
imageAtomicOr(01h00D00D
imageAtomicOr(01h00D00E
imageAtomicOr(01i00D00D
imageAtomicOr(01i00D00E
imageAtomicOr(volatile coherent
imageAtomicStore
imageAtomicXor
imageAtomicXor(00z10D00D
imageAtomicXor(00z10D00E
imageAtomicXor(01A10D00D
imageAtomicXor(01A10D00E
imageAtomicXor(01B10D00D
imageAtomicXor(01B10D00E
imageAtomicXor(01C20D00D
imageAtomicXor(01C20D00E
imageAtomicXor(01D20D00D
imageAtomicXor(01D20D00E
imageAtomicXor(01E20D00D
imageAtomicXor(01E20D00E
imageAtomicXor(01F20D00D
imageAtomicXor(01F20D00E
imageAtomicXor(01G20D00D
imageAtomicXor(01G20D00E
imageAtomicXor(01H20D00D
imageAtomicXor(01H20D00E
imageAtomicXor(01I20D00D
imageAtomicXor(01I20D00E
imageAtomicXor(01J20D00D
imageAtomicXor(01J20D00E
imageAtomicXor(01K20D00D
imageAtomicXor(01K20D00E
imageAtomicXor(01L00D00D
imageAtomicXor(01L00D00E
imageAtomicXor(01M00D00D
imageAtomicXor(01M00D00E
imageAtomicXor(01N00D00D
imageAtomicXor(01N00D00E
imageAtomicXor(01O10D00D
imageAtomicXor(01O10D00E
imageAtomicXor(01P10D00D
imageAtomicXor(01P10D00E
imageAtomicXor(01Q10D00D
imageAtomicXor(01Q10D00E
imageAtomicXor(01R10D00D00D
imageAtomicXor(01R10D00D00E
imageAtomicXor(01S10D00D00D
imageAtomicXor(01S10D00D00E
imageAtomicXor(01T10D00D00D
imageAtomicXor(01T10D00D00E
imageAtomicXor(01U20D00D00D
imageAtomicXor(01U20D00D00E
imageAtomicXor(01V20D00D00D
imageAtomicXor(01V20D00D00E
imageAtomicXor(01W20D00D00D
imageAtomicXor(01W20D00D00E
imageAtomicXor(01X10D00D
imageAtomicXor(01X10D00E
imageAtomicXor(01Y10D00D
imageAtomicXor(01Y10D00E
imageAtomicXor(01Z10D00D
imageAtomicXor(01Z10D00E
imageAtomicXor(01a20D00D
imageAtomicXor(01a20D00E
imageAtomicXor(01b20D00D
imageAtomicXor(01b20D00E
imageAtomicXor(01c20D00D
imageAtomicXor(01c20D00E
imageAtomicXor(01g00D00D
imageAtomicXor(01g00D00E
imageAtomicXor(01h00D00D
imageAtomicXor(01h00D00E
imageAtomicXor(01i00D00D
imageAtomicXor(01i00D00E
imageAtomicXor(volatile coherent
imageLoad
imageLoad(00z10D
imageLoad(01A10D
imageLoad(01B10D
imageLoad(01C20D
imageLoad(01D20D
imageLoad(01E20D
imageLoad(01F20D
imageLoad(01G20D
imageLoad(01H20D
imageLoad(01I20D
imageLoad(01J20D
imageLoad(01K20D
imageLoad(01L00D
imageLoad(01M00D
imageLoad(01N00D
imageLoad(01O10D
imageLoad(01P10D
imageLoad(01Q10D
imageLoad(01R10D00D
imageLoad(01S10D00D
imageLoad(01T10D00D
imageLoad(01U20D00D
imageLoad(01V20D00D
imageLoad(01W20D00D
imageLoad(01X10D
imageLoad(01Y10D
imageLoad(01Z10D
imageLoad(01a20D
imageLoad(01b20D
imageLoad(01c20D
imageLoad(01g00D
imageLoad(01h00D
imageLoad(01i00D
imageLoadLod
imageLoadLodAMD
imageQuerySamples
imageQuerySize
imageSampleFootprintClampNV
imageSampleFootprintGradNV
imageSampleFootprintLodNV
imageSampleFootprintNV
imageSamples(01R
imageSamples(01S
imageSamples(01T
imageSamples(01U
imageSamples(01V
imageSamples(01W
imageSamples(readonly writeonly volatile coherent
imageSize
imageSize is too small.
imageSize must be 0 if no texture data is provided.
imageSize(00z
imageSize(01A
imageSize(01B
imageSize(01C
imageSize(01D
imageSize(01E
imageSize(01F
imageSize(01G
imageSize(01H
imageSize(01I
imageSize(01J
imageSize(01K
imageSize(01L
imageSize(01M
imageSize(01N
imageSize(01O
imageSize(01P
imageSize(01Q
imageSize(01R
imageSize(01S
imageSize(01T
imageSize(01U
imageSize(01V
imageSize(01W
imageSize(01a
imageSize(01b
imageSize(01c
imageSize(01d
imageSize(01e
imageSize(01f
imageSize(01g
imageSize(01h
imageSize(01i
imageSize(readonly writeonly volatile coherent
imageStore
imageStore(00z10D30B
imageStore(01A10D30D
imageStore(01B10D30E
imageStore(01C20D30B
imageStore(01D20D30D
imageStore(01E20D30E
imageStore(01F20D30B
imageStore(01G20D30D
imageStore(01H20D30E
imageStore(01I20D30B
imageStore(01J20D30D
imageStore(01K20D30E
imageStore(01L00D30B
imageStore(01M00D30D
imageStore(01N00D30E
imageStore(01O10D30B
imageStore(01P10D30D
imageStore(01Q10D30E
imageStore(01R10D00D30B
imageStore(01S10D00D30D
imageStore(01T10D00D30E
imageStore(01U20D00D30B
imageStore(01V20D00D30D
imageStore(01W20D00D30E
imageStore(01X10D30B
imageStore(01Y10D30D
imageStore(01Z10D30E
imageStore(01a20D30B
imageStore(01b20D30D
imageStore(01c20D30E
imageStore(01g00D30B
imageStore(01h00D30D
imageStore(01i00D30E
imageStoreLod
imageStoreLodAMD
imageformats.cpp
immediate sampler state
implicitly sized array constructor must have at least one argument
implicitly sized array of arrays constructor argument dimensionality is too low
implicitly sized array of arrays constructor argument is not an array
implicitly sized array supported in GLSL ES 3.00 and above only
implicitly sized arrays need to be initialized
importFd
importOpaqueFd
importZirconEvent
importZirconHandle
imulExtended
imulExtended(00D00D00D00D
imulExtended(10D10D10D10D
imulExtended(20D20D20D20D
imulExtended(30D30D30D30D
in    highp uvec3 gl_NumWorkGroups;const highp uvec3 gl_WorkGroupSize = uvec3(1,1,1);in highp uvec3 gl_WorkGroupID;in highp uvec3 gl_LocalInvocationID;in highp uvec3 gl_GlobalInvocationID;in highp uint gl_LocalInvocationIndex;
in    uvec3  gl_LaunchIDNV;in    uvec3  gl_LaunchIDEXT;in    uvec3  gl_LaunchSizeNV;in    uvec3  gl_LaunchSizeEXT;
in    uvec3  gl_LaunchIDNV;in    uvec3  gl_LaunchIDEXT;in    uvec3  gl_LaunchSizeNV;in    uvec3  gl_LaunchSizeEXT;in     int   gl_PrimitiveID;in     int   gl_InstanceID;in     int   gl_InstanceCustomIndexNV;in     int   gl_InstanceCustomIndexEXT;in     int   gl_GeometryIndexEXT;in    vec3   gl_WorldRayOriginNV;in    vec3   gl_WorldRayOriginEXT;in    vec3   gl_WorldRayDirectionNV;in    vec3   gl_WorldRayDirectionEXT;in    vec3   gl_ObjectRayOriginNV;in    vec3   gl_ObjectRayOriginEXT;in    vec3   gl_ObjectRayDirectionNV;in    vec3   gl_ObjectRayDirectionEXT;in    float  gl_RayTminNV;in    float  gl_RayTminEXT;in    float  gl_RayTmaxNV;in    float  gl_RayTmaxEXT;in    float  gl_HitTNV;in    float  gl_HitTEXT;in    uint   gl_HitKindNV;in    uint   gl_HitKindEXT;in    mat4x3 gl_ObjectToWorldNV;in    mat4x3 gl_ObjectToWorldEXT;in    mat3x4 gl_ObjectToWorld3x4EXT;in    mat4x3 gl_WorldToObjectNV;in    mat4x3 gl_WorldToObjectEXT;in    mat3x4 gl_WorldToObject3x4EXT;in    uint   gl_IncomingRayFlagsNV;in    uint   gl_IncomingRayFlagsEXT;
in    uvec3  gl_LaunchIDNV;in    uvec3  gl_LaunchIDEXT;in    uvec3  gl_LaunchSizeNV;in    uvec3  gl_LaunchSizeEXT;in     int   gl_PrimitiveID;in     int   gl_InstanceID;in     int   gl_InstanceCustomIndexNV;in     int   gl_InstanceCustomIndexEXT;in     int   gl_GeometryIndexEXT;in    vec3   gl_WorldRayOriginNV;in    vec3   gl_WorldRayOriginEXT;in    vec3   gl_WorldRayDirectionNV;in    vec3   gl_WorldRayDirectionEXT;in    vec3   gl_ObjectRayOriginNV;in    vec3   gl_ObjectRayOriginEXT;in    vec3   gl_ObjectRayDirectionNV;in    vec3   gl_ObjectRayDirectionEXT;in    float  gl_RayTminNV;in    float  gl_RayTminEXT;in    float  gl_RayTmaxNV;in    float  gl_RayTmaxEXT;in    mat4x3 gl_ObjectToWorldNV;in    mat4x3 gl_ObjectToWorldEXT;in    mat3x4 gl_ObjectToWorld3x4EXT;in    mat4x3 gl_WorldToObjectNV;in    mat4x3 gl_WorldToObjectEXT;in    mat3x4 gl_WorldToObject3x4EXT;in    uint   gl_IncomingRayFlagsNV;in    uint   gl_IncomingRayFlagsEXT;
in    uvec3  gl_LaunchIDNV;in    uvec3  gl_LaunchIDEXT;in    uvec3  gl_LaunchSizeNV;in    uvec3  gl_LaunchSizeEXT;in    vec3   gl_WorldRayOriginNV;in    vec3   gl_WorldRayOriginEXT;in    vec3   gl_WorldRayDirectionNV;in    vec3   gl_WorldRayDirectionEXT;in    vec3   gl_ObjectRayOriginNV;in    vec3   gl_ObjectRayDirectionNV;in    float  gl_RayTminNV;in    float  gl_RayTminEXT;in    float  gl_RayTmaxNV;in    float  gl_RayTmaxEXT;in    uint   gl_IncomingRayFlagsNV;in    uint   gl_IncomingRayFlagsEXT;
in Function or Private storage classes or as function parameters
in Vertex or Tessellation execution model requires the ShaderViewportIndexLayerEXT capability.
in Vulkan evironment, OpControlBarrier execution scope must be Subgroup for Fragment, Vertex, Geometry and TessellationEvaluation execution models
in bool gl_FragFullyCoveredNV;
in float gl_ClipDistance[];
in float gl_CullDistance[];bool gl_HelperInvocation;
in float gl_FogFragCoord;in vec4  gl_TexCoord[];in vec4  gl_Color;in vec4  gl_SecondaryColor;
in for stage inputs
in function <
in gl_PerFragment {in float gl_FogFragCoord;in vec4  gl_TexCoord[];in vec4  gl_Color;in vec4  gl_SecondaryColor;};
in gl_PerVertex {highp vec4 gl_Position;highp float gl_PointSize;highp vec4 gl_SecondaryPositionNV;highp vec4 gl_PositionPerViewNV[];} gl_in[gl_MaxPatchVertices];
in gl_PerVertex {highp vec4 gl_Position;highp float gl_PointSize;} gl_in[];in highp int gl_PrimitiveIDIn;in highp int gl_InvocationID;out gl_PerVertex {highp vec4 gl_Position;highp float gl_PointSize;};out highp int gl_PrimitiveID;out highp int gl_Layer;
in gl_PerVertex {vec4 gl_Position;float gl_PointSize;float gl_ClipDistance[];
in highp   uint  gl_NumSubgroups;in highp   uint  gl_SubgroupID;
in highp int gl_DeviceIndex;
in highp int gl_DeviceIndex;in highp int gl_ViewIndex;
in highp int gl_DeviceIndex;in int gl_DrawIDARB;
in highp int gl_PatchVerticesIn;in highp int gl_PrimitiveID;in highp int gl_InvocationID;out gl_PerVertex {highp vec4 gl_Position;highp float gl_PointSize;
in highp int gl_PatchVerticesIn;in highp int gl_PrimitiveID;in highp vec3 gl_TessCoord;patch in highp float gl_TessLevelOuter[4];patch in highp float gl_TessLevelInner[2];out gl_PerVertex {highp vec4 gl_Position;highp float gl_PointSize;
in highp int gl_VertexID;in highp int gl_InstanceID;
in highp int gl_VertexIndex;in highp int gl_InstanceIndex;
in int gl_BaseVertex;in int gl_BaseInstance;in int gl_DrawID;
in int gl_BaseVertexARB;in int gl_BaseInstanceARB;in int gl_DrawIDARB;
in int gl_DrawID;
in int gl_InvocationID;
in int gl_PatchVerticesIn;in int gl_PrimitiveID;in int gl_InvocationID;out gl_PerVertex {vec4 gl_Position;float gl_PointSize;float gl_ClipDistance[];
in int gl_PatchVerticesIn;in int gl_PrimitiveID;in vec3 gl_TessCoord;patch in float gl_TessLevelOuter[4];patch in float gl_TessLevelInner[2];out gl_PerVertex {vec4 gl_Position;float gl_PointSize;float gl_ClipDistance[];
in int gl_VertexIndex;in int gl_InstanceIndex;
in mediump uint  gl_SubgroupSize;in mediump uint  gl_SubgroupInvocationID;in highp   uvec4 gl_SubgroupEqMask;in highp   uvec4 gl_SubgroupGeMask;in highp   uvec4 gl_SubgroupGtMask;in highp   uvec4 gl_SubgroupLeMask;in highp   uvec4 gl_SubgroupLtMask;in highp   uint  gl_WarpsPerSMNV;in highp   uint  gl_SMCountNV;in highp   uint  gl_WarpIDNV;in highp   uint  gl_SMIDNV;
in semantic instruction cannot be a non-semantic instruction
in the structure <id> '
in type qualifier supported in GLSL ES 3.10 only
in type qualifier without variable declaration supported in GLSL ES 3.10 only
in vec2 gl_BaryCoordNoPerspAMD;in vec2 gl_BaryCoordNoPerspCentroidAMD;in vec2 gl_BaryCoordNoPerspSampleAMD;in vec2 gl_BaryCoordSmoothAMD;in vec2 gl_BaryCoordSmoothCentroidAMD;in vec2 gl_BaryCoordSmoothSampleAMD;in vec3 gl_BaryCoordPullModelAMD;
in vec4  gl_Color;in vec4  gl_SecondaryColor;in vec3  gl_Normal;in vec4  gl_Vertex;in vec4  gl_MultiTexCoord0;in vec4  gl_MultiTexCoord1;in vec4  gl_MultiTexCoord2;in vec4  gl_MultiTexCoord3;in vec4  gl_MultiTexCoord4;in vec4  gl_MultiTexCoord5;in vec4  gl_MultiTexCoord6;in vec4  gl_MultiTexCoord7;in float gl_FogCoord;
in xfb mode
in/out must appear before const
in/out qualifiers are only valid on parameters
inclusive-or
inclusive_or_expression
incompatible version
incomplete method syntax
inconsistent input primitive for array size of
inconsistent output array size of
inconsistent output number of vertices for array size of
incorrect data check
incorrect directive, expected identifier
incorrect header check
incorrect length check
index =
index expression is negative
index is negative.
index is too big.
index layout qualifier on fragment output
index=
indexIndirectBuf
indexIndirectBufOffsetDiv4
indexable
indexes.
indirect index
indirect must be a multiple of the size of uint in basic machine units.
indirectBuf
indirectBufferOffsetDiv4
inductive loop index modified
inductive loop requires a scalar 'int' or 'float' loop index
inductive-loop condition requires the form "loop-index <comparison-op> constant-expression"
inductive-loop init-declaration requires the form "type-specifier loop-index = constant-expression"
inductive-loop termination requires the form "loop-index++, loop-index--, loop-index += constant-expression, or loop-index -= constant-expression"
infback.c
inffast.c
inffast_chunk.c
inflate.c
info:
inftrees.c
init-expression in a switch statement must be a scalar integer
init2DStaging
initCaps
initExternal
initGlobals
initLayerImageViewImpl
initPipelineCache
init_declarator_list
initialize first child with second child
initializeContents
initializeDevice
initializeImpl
initializeNonZeroMemory
initializePipeline
initializeWithFd
initialize_current_vertex_attributes
initialized declaration
initializer requires a variable, not a member
initializer: Output, Private, or Function
initializer_list
inline-entry-points-exhaustive
inline_exhaustive_pass.cpp
inline_opaque_pass.cpp
inline_pass.cpp
inout
input attachment
input blocks cannot be used in a mesh shader
input primitive =
input primitive geometry redefinition
input_attachment_index
input_attachment_index=
insertMessage
insert_string_c
insert_string_simd
inst_bindless_check_pass.cpp
inst_buff_addr_check_pass.cpp
inst_debug_printf_pass.cpp
instruction in its block.
instruction must be a pointer.
instruction.cpp
instruction_list.cpp
instructions require Geometry execution model
instrument_pass.cpp
insufficient memory
int   floatBitsToInt(highp float value);ivec2 floatBitsToInt(highp vec2  value);ivec3 floatBitsToInt(highp vec3  value);ivec4 floatBitsToInt(highp vec4  value);uint  floatBitsToUint(highp float value);uvec2 floatBitsToUint(highp vec2  value);uvec3 floatBitsToUint(highp vec3  value);uvec4 floatBitsToUint(highp vec4  value);float intBitsToFloat(highp int   value);vec2  intBitsToFloat(highp ivec2 value);vec3  intBitsToFloat(highp ivec3 value);vec4  intBitsToFloat(highp ivec4 value);float uintBitsToFloat(highp uint  value);vec2  uintBitsToFloat(highp uvec2 value);vec3  uintBitsToFloat(highp uvec3 value);vec4  uintBitsToFloat(highp uvec4 value);
int abs_emu(int x) { return x * sign(x); }
int bitCount(  int);ivec2 bitCount(ivec2);ivec3 bitCount(ivec3);ivec4 bitCount(ivec4);  int bitCount( uint);ivec2 bitCount(uvec2);ivec3 bitCount(uvec3);ivec4 bitCount(uvec4);  int findMSB(highp   int);ivec2 findMSB(highp ivec2);ivec3 findMSB(highp ivec3);ivec4 findMSB(highp ivec4);  int findMSB(highp  uint);ivec2 findMSB(highp uvec2);ivec3 findMSB(highp uvec3);ivec4 findMSB(highp uvec4);
int bitfieldExtract(  int, int, int);ivec2 bitfieldExtract(ivec2, int, int);ivec3 bitfieldExtract(ivec3, int, int);ivec4 bitfieldExtract(ivec4, int, int); uint bitfieldExtract( uint, int, int);uvec2 bitfieldExtract(uvec2, int, int);uvec3 bitfieldExtract(uvec3, int, int);uvec4 bitfieldExtract(uvec4, int, int);  int bitfieldInsert(  int base,   int, int, int);ivec2 bitfieldInsert(ivec2 base, ivec2, int, int);ivec3 bitfieldInsert(ivec3 base, ivec3, int, int);ivec4 bitfieldInsert(ivec4 base, ivec4, int, int); uint bitfieldInsert( uint base,  uint, int, int);uvec2 bitfieldInsert(uvec2 base, uvec2, int, int);uvec3 bitfieldInsert(uvec3 base, uvec3, int, int);uvec4 bitfieldInsert(uvec4 base, uvec4, int, int);
int findLSB(  int);ivec2 findLSB(ivec2);ivec3 findLSB(ivec3);ivec4 findLSB(ivec4);  int findLSB( uint);ivec2 findLSB(uvec2);ivec3 findLSB(uvec3);ivec4 findLSB(uvec4);
int gl::CastFromGLintStateValue<int, bool>(unsigned int, bool)
int gl::CastFromGLintStateValue<int, int>(unsigned int, int)
int gl::CastFromGLintStateValue<int, unsigned int>(unsigned int, unsigned int)
int gl::CastFromStateValue<int, float>(unsigned int, float)
int gl::CastFromStateValue<int, int>(unsigned int, int)
int gl::CastFromStateValue<int, long>(unsigned int, long)
int gl::CastFromStateValue<int, unsigned char>(unsigned int, unsigned char)
int gl::CastFromStateValue<int, unsigned int>(unsigned int, unsigned int)
int gl::CastQueryValueTo<int, float>(unsigned int, float)
int gl::CastQueryValueTo<int, int>(unsigned int, int)
int gl::CastQueryValueTo<int, unsigned int>(unsigned int, unsigned int)
int gl_VertexID;
int mix(int, int, bool);ivec2 mix(ivec2, ivec2, bvec2);ivec3 mix(ivec3, ivec3, bvec3);ivec4 mix(ivec4, ivec4, bvec4);uint  mix(uint,  uint,  bool );uvec2 mix(uvec2, uvec2, bvec2);uvec3 mix(uvec3, uvec3, bvec3);uvec4 mix(uvec4, uvec4, bvec4);bool  mix(bool,  bool,  bool );bvec2 mix(bvec2, bvec2, bvec2);bvec3 mix(bvec3, bvec3, bvec3);bvec4 mix(bvec4, bvec4, bvec4);
int scalar or vector with the same number of
int sparseImageLoadARB(readonly volatile coherent
int sparseImageLoadLodAMD(readonly volatile coherent
int std::__1::__get_up_to_n_digits<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&, int)
int std::__1::__get_up_to_n_digits<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&, int)
int textureQueryLevels(
int webgl_int_clamp(int value, int minValue, int maxValue) { return ((value < minValue) ? minValue : ((value > maxValue) ? maxValue : value)); }
int64_t abs(int64_t);i64vec2 abs(i64vec2);i64vec3 abs(i64vec3);i64vec4 abs(i64vec4);int64_t sign(int64_t);i64vec2 sign(i64vec2);i64vec3 sign(i64vec3);i64vec4 sign(i64vec4);int64_t  min(int64_t,  int64_t);i64vec2  min(i64vec2,  int64_t);i64vec3  min(i64vec3,  int64_t);i64vec4  min(i64vec4,  int64_t);i64vec2  min(i64vec2,  i64vec2);i64vec3  min(i64vec3,  i64vec3);i64vec4  min(i64vec4,  i64vec4);uint64_t min(uint64_t, uint64_t);u64vec2  min(u64vec2,  uint64_t);u64vec3  min(u64vec3,  uint64_t);u64vec4  min(u64vec4,  uint64_t);u64vec2  min(u64vec2,  u64vec2);u64vec3  min(u64vec3,  u64vec3);u64vec4  min(u64vec4,  u64vec4);int64_t  max(int64_t,  int64_t);i64vec2  max(i64vec2,  int64_t);i64vec3  max(i64vec3,  int64_t);i64vec4  max(i64vec4,  int64_t);i64vec2  max(i64vec2,  i64vec2);i64vec3  max(i64vec3,  i64vec3);i64vec4  max(i64vec4,  i64vec4);uint64_t max(uint64_t, uint64_t);u64vec2  max(u64vec2,  uint64_t);u64vec3  max(u64vec3,  uint64_t);u64vec4  max(u64vec4,  uint64_t);u64vec2  max(u64vec2,  u64vec2);u64vec3  max(u64vec3,  u64vec3);u64vec4  max(u64vec4,  u64vec4);int64_t  clamp(int64_t,  int64_t,  int64_t);i64vec2  clamp(i64vec2,  int64_t,  int64_t);i64vec3  clamp(i64vec3,  int64_t,  int64_t);i64vec4  clamp(i64vec4,  int64_t,  int64_t);i64vec2  clamp(i64vec2,  i64vec2,  i64vec2);i64vec3  clamp(i64vec3,  i64vec3,  i64vec3);i64vec4  clamp(i64vec4,  i64vec4,  i64vec4);uint64_t clamp(uint64_t, uint64_t, uint64_t);u64vec2  clamp(u64vec2,  uint64_t, uint64_t);u64vec3  clamp(u64vec3,  uint64_t, uint64_t);u64vec4  clamp(u64vec4,  uint64_t, uint64_t);u64vec2  clamp(u64vec2,  u64vec2,  u64vec2);u64vec3  clamp(u64vec3,  u64vec3,  u64vec3);u64vec4  clamp(u64vec4,  u64vec4,  u64vec4);int64_t  mix(int64_t,  int64_t,  bool);i64vec2  mix(i64vec2,  i64vec2,  bvec2);i64vec3  mix(i64vec3,  i64vec3,  bvec3);i64vec4  mix(i64vec4,  i64vec4,  bvec4);uint64_t mix(uint64_t, uint64_t, bool);u64vec2  mix(u64vec2,  u64vec2,  bvec2);u64vec3  mix(u64vec3,  u64vec3,  bvec3);u64vec4  mix(u64vec4,  u64vec4,  bvec4);int64_t doubleBitsToInt64(double);i64vec2 doubleBitsToInt64(dvec2);i64vec3 doubleBitsToInt64(dvec3);i64vec4 doubleBitsToInt64(dvec4);uint64_t doubleBitsToUint64(double);u64vec2  doubleBitsToUint64(dvec2);u64vec3  doubleBitsToUint64(dvec3);u64vec4  doubleBitsToUint64(dvec4);double int64BitsToDouble(int64_t);dvec2  int64BitsToDouble(i64vec2);dvec3  int64BitsToDouble(i64vec3);dvec4  int64BitsToDouble(i64vec4);double uint64BitsToDouble(uint64_t);dvec2  uint64BitsToDouble(u64vec2);dvec3  uint64BitsToDouble(u64vec3);dvec4  uint64BitsToDouble(u64vec4);int64_t  packInt2x32(ivec2);uint64_t packUint2x32(uvec2);ivec2    unpackInt2x32(int64_t);uvec2    unpackUint2x32(uint64_t);bvec2 lessThan(i64vec2, i64vec2);bvec3 lessThan(i64vec3, i64vec3);bvec4 lessThan(i64vec4, i64vec4);bvec2 lessThan(u64vec2, u64vec2);bvec3 lessThan(u64vec3, u64vec3);bvec4 lessThan(u64vec4, u64vec4);bvec2 lessThanEqual(i64vec2, i64vec2);bvec3 lessThanEqual(i64vec3, i64vec3);bvec4 lessThanEqual(i64vec4, i64vec4);bvec2 lessThanEqual(u64vec2, u64vec2);bvec3 lessThanEqual(u64vec3, u64vec3);bvec4 lessThanEqual(u64vec4, u64vec4);bvec2 greaterThan(i64vec2, i64vec2);bvec3 greaterThan(i64vec3, i64vec3);bvec4 greaterThan(i64vec4, i64vec4);bvec2 greaterThan(u64vec2, u64vec2);bvec3 greaterThan(u64vec3, u64vec3);bvec4 greaterThan(u64vec4, u64vec4);bvec2 greaterThanEqual(i64vec2, i64vec2);bvec3 greaterThanEqual(i64vec3, i64vec3);bvec4 greaterThanEqual(i64vec4, i64vec4);bvec2 greaterThanEqual(u64vec2, u64vec2);bvec3 greaterThanEqual(u64vec3, u64vec3);bvec4 greaterThanEqual(u64vec4, u64vec4);bvec2 equal(i64vec2, i64vec2);bvec3 equal(i64vec3, i64vec3);bvec4 equal(i64vec4, i64vec4);bvec2 equal(u64vec2, u64vec2);bvec3 equal(u64vec3, u64vec3);bvec4 equal(u64vec4, u64vec4);bvec2 notEqual(i64vec2, i64vec2);bvec3 notEqual(i64vec3, i64vec3);bvec4 notEqual(i64vec4, i64vec4);bvec2 notEqual(u64vec2, u64vec2);bvec3 notEqual(u64vec3, u64vec3);bvec4 notEqual(u64vec4, u64vec4);int64_t findLSB(int64_t);i64vec2 findLSB(i64vec2);i64vec3 findLSB(i64vec3);i64vec4 findLSB(i64vec4);int64_t findLSB(uint64_t);i64vec2 findLSB(u64vec2);i64vec3 findLSB(u64vec3);i64vec4 findLSB(u64vec4);int64_t findMSB(int64_t);i64vec2 findMSB(i64vec2);i64vec3 findMSB(i64vec3);i64vec4 findMSB(i64vec4);int64_t findMSB(uint64_t);i64vec2 findMSB(u64vec2);i64vec3 findMSB(u64vec3);i64vec4 findMSB(u64vec4);
int8_t abs(int8_t);i8vec2 abs(i8vec2);i8vec3 abs(i8vec3);i8vec4 abs(i8vec4);int8_t sign(int8_t);i8vec2 sign(i8vec2);i8vec3 sign(i8vec3);i8vec4 sign(i8vec4);int8_t min(int8_t x, int8_t y);i8vec2 min(i8vec2 x, int8_t y);i8vec3 min(i8vec3 x, int8_t y);i8vec4 min(i8vec4 x, int8_t y);i8vec2 min(i8vec2 x, i8vec2 y);i8vec3 min(i8vec3 x, i8vec3 y);i8vec4 min(i8vec4 x, i8vec4 y);uint8_t min(uint8_t x, uint8_t y);u8vec2 min(u8vec2 x, uint8_t y);u8vec3 min(u8vec3 x, uint8_t y);u8vec4 min(u8vec4 x, uint8_t y);u8vec2 min(u8vec2 x, u8vec2 y);u8vec3 min(u8vec3 x, u8vec3 y);u8vec4 min(u8vec4 x, u8vec4 y);int8_t max(int8_t x, int8_t y);i8vec2 max(i8vec2 x, int8_t y);i8vec3 max(i8vec3 x, int8_t y);i8vec4 max(i8vec4 x, int8_t y);i8vec2 max(i8vec2 x, i8vec2 y);i8vec3 max(i8vec3 x, i8vec3 y);i8vec4 max(i8vec4 x, i8vec4 y);uint8_t max(uint8_t x, uint8_t y);u8vec2 max(u8vec2 x, uint8_t y);u8vec3 max(u8vec3 x, uint8_t y);u8vec4 max(u8vec4 x, uint8_t y);u8vec2 max(u8vec2 x, u8vec2 y);u8vec3 max(u8vec3 x, u8vec3 y);u8vec4 max(u8vec4 x, u8vec4 y);int8_t    clamp(int8_t x, int8_t minVal, int8_t maxVal);i8vec2  clamp(i8vec2  x, int8_t minVal, int8_t maxVal);i8vec3  clamp(i8vec3  x, int8_t minVal, int8_t maxVal);i8vec4  clamp(i8vec4  x, int8_t minVal, int8_t maxVal);i8vec2  clamp(i8vec2  x, i8vec2  minVal, i8vec2  maxVal);i8vec3  clamp(i8vec3  x, i8vec3  minVal, i8vec3  maxVal);i8vec4  clamp(i8vec4  x, i8vec4  minVal, i8vec4  maxVal);uint8_t   clamp(uint8_t x, uint8_t minVal, uint8_t maxVal);u8vec2  clamp(u8vec2  x, uint8_t minVal, uint8_t maxVal);u8vec3  clamp(u8vec3  x, uint8_t minVal, uint8_t maxVal);u8vec4  clamp(u8vec4  x, uint8_t minVal, uint8_t maxVal);u8vec2  clamp(u8vec2  x, u8vec2  minVal, u8vec2  maxVal);u8vec3  clamp(u8vec3  x, u8vec3  minVal, u8vec3  maxVal);u8vec4  clamp(u8vec4  x, u8vec4  minVal, u8vec4  maxVal);int8_t  mix(int8_t,  int8_t,  bool);i8vec2  mix(i8vec2,  i8vec2,  bvec2);i8vec3  mix(i8vec3,  i8vec3,  bvec3);i8vec4  mix(i8vec4,  i8vec4,  bvec4);uint8_t mix(uint8_t, uint8_t, bool);u8vec2  mix(u8vec2,  u8vec2,  bvec2);u8vec3  mix(u8vec3,  u8vec3,  bvec3);u8vec4  mix(u8vec4,  u8vec4,  bvec4);bvec2 lessThan(i8vec2, i8vec2);bvec3 lessThan(i8vec3, i8vec3);bvec4 lessThan(i8vec4, i8vec4);bvec2 lessThan(u8vec2, u8vec2);bvec3 lessThan(u8vec3, u8vec3);bvec4 lessThan(u8vec4, u8vec4);bvec2 lessThanEqual(i8vec2, i8vec2);bvec3 lessThanEqual(i8vec3, i8vec3);bvec4 lessThanEqual(i8vec4, i8vec4);bvec2 lessThanEqual(u8vec2, u8vec2);bvec3 lessThanEqual(u8vec3, u8vec3);bvec4 lessThanEqual(u8vec4, u8vec4);bvec2 greaterThan(i8vec2, i8vec2);bvec3 greaterThan(i8vec3, i8vec3);bvec4 greaterThan(i8vec4, i8vec4);bvec2 greaterThan(u8vec2, u8vec2);bvec3 greaterThan(u8vec3, u8vec3);bvec4 greaterThan(u8vec4, u8vec4);bvec2 greaterThanEqual(i8vec2, i8vec2);bvec3 greaterThanEqual(i8vec3, i8vec3);bvec4 greaterThanEqual(i8vec4, i8vec4);bvec2 greaterThanEqual(u8vec2, u8vec2);bvec3 greaterThanEqual(u8vec3, u8vec3);bvec4 greaterThanEqual(u8vec4, u8vec4);bvec2 equal(i8vec2, i8vec2);bvec3 equal(i8vec3, i8vec3);bvec4 equal(i8vec4, i8vec4);bvec2 equal(u8vec2, u8vec2);bvec3 equal(u8vec3, u8vec3);bvec4 equal(u8vec4, u8vec4);bvec2 notEqual(i8vec2, i8vec2);bvec3 notEqual(i8vec3, i8vec3);bvec4 notEqual(i8vec4, i8vec4);bvec2 notEqual(u8vec2, u8vec2);bvec3 notEqual(u8vec3, u8vec3);bvec4 notEqual(u8vec4, u8vec4);  int8_t bitfieldExtract(  int8_t, int8_t, int8_t);i8vec2 bitfieldExtract(i8vec2, int8_t, int8_t);i8vec3 bitfieldExtract(i8vec3, int8_t, int8_t);i8vec4 bitfieldExtract(i8vec4, int8_t, int8_t); uint8_t bitfieldExtract( uint8_t, int8_t, int8_t);u8vec2 bitfieldExtract(u8vec2, int8_t, int8_t);u8vec3 bitfieldExtract(u8vec3, int8_t, int8_t);u8vec4 bitfieldExtract(u8vec4, int8_t, int8_t);  int8_t bitfieldInsert(  int8_t base,   int8_t, int8_t, int8_t);i8vec2 bitfieldInsert(i8vec2 base, i8vec2, int8_t, int8_t);i8vec3 bitfieldInsert(i8vec3 base, i8vec3, int8_t, int8_t);i8vec4 bitfieldInsert(i8vec4 base, i8vec4, int8_t, int8_t); uint8_t bitfieldInsert( uint8_t base,  uint8_t, int8_t, int8_t);u8vec2 bitfieldInsert(u8vec2 base, u8vec2, int8_t, int8_t);u8vec3 bitfieldInsert(u8vec3 base, u8vec3, int8_t, int8_t);u8vec4 bitfieldInsert(u8vec4 base, u8vec4, int8_t, int8_t);  int8_t bitCount(  int8_t);i8vec2 bitCount(i8vec2);i8vec3 bitCount(i8vec3);i8vec4 bitCount(i8vec4);  int8_t bitCount( uint8_t);i8vec2 bitCount(u8vec2);i8vec3 bitCount(u8vec3);i8vec4 bitCount(u8vec4);  int8_t findLSB(  int8_t);i8vec2 findLSB(i8vec2);i8vec3 findLSB(i8vec3);i8vec4 findLSB(i8vec4);  int8_t findLSB( uint8_t);i8vec2 findLSB(u8vec2);i8vec3 findLSB(u8vec3);i8vec4 findLSB(u8vec4);  int8_t findMSB(  int8_t);i8vec2 findMSB(i8vec2);i8vec3 findMSB(i8vec3);i8vec4 findMSB(i8vec4);  int8_t findMSB( uint8_t);i8vec2 findMSB(u8vec2);i8vec3 findMSB(u8vec3);i8vec4 findMSB(u8vec4);int16_t abs(int16_t);i16vec2 abs(i16vec2);i16vec3 abs(i16vec3);i16vec4 abs(i16vec4);int16_t sign(int16_t);i16vec2 sign(i16vec2);i16vec3 sign(i16vec3);i16vec4 sign(i16vec4);int16_t min(int16_t x, int16_t y);i16vec2 min(i16vec2 x, int16_t y);i16vec3 min(i16vec3 x, int16_t y);i16vec4 min(i16vec4 x, int16_t y);i16vec2 min(i16vec2 x, i16vec2 y);i16vec3 min(i16vec3 x, i16vec3 y);i16vec4 min(i16vec4 x, i16vec4 y);uint16_t min(uint16_t x, uint16_t y);u16vec2 min(u16vec2 x, uint16_t y);u16vec3 min(u16vec3 x, uint16_t y);u16vec4 min(u16vec4 x, uint16_t y);u16vec2 min(u16vec2 x, u16vec2 y);u16vec3 min(u16vec3 x, u16vec3 y);u16vec4 min(u16vec4 x, u16vec4 y);int16_t max(int16_t x, int16_t y);i16vec2 max(i16vec2 x, int16_t y);i16vec3 max(i16vec3 x, int16_t y);i16vec4 max(i16vec4 x, int16_t y);i16vec2 max(i16vec2 x, i16vec2 y);i16vec3 max(i16vec3 x, i16vec3 y);i16vec4 max(i16vec4 x, i16vec4 y);uint16_t max(uint16_t x, uint16_t y);u16vec2 max(u16vec2 x, uint16_t y);u16vec3 max(u16vec3 x, uint16_t y);u16vec4 max(u16vec4 x, uint16_t y);u16vec2 max(u16vec2 x, u16vec2 y);u16vec3 max(u16vec3 x, u16vec3 y);u16vec4 max(u16vec4 x, u16vec4 y);int16_t    clamp(int16_t x, int16_t minVal, int16_t maxVal);i16vec2  clamp(i16vec2  x, int16_t minVal, int16_t maxVal);i16vec3  clamp(i16vec3  x, int16_t minVal, int16_t maxVal);i16vec4  clamp(i16vec4  x, int16_t minVal, int16_t maxVal);i16vec2  clamp(i16vec2  x, i16vec2  minVal, i16vec2  maxVal);i16vec3  clamp(i16vec3  x, i16vec3  minVal, i16vec3  maxVal);i16vec4  clamp(i16vec4  x, i16vec4  minVal, i16vec4  maxVal);uint16_t   clamp(uint16_t x, uint16_t minVal, uint16_t maxVal);u16vec2  clamp(u16vec2  x, uint16_t minVal, uint16_t maxVal);u16vec3  clamp(u16vec3  x, uint16_t minVal, uint16_t maxVal);u16vec4  clamp(u16vec4  x, uint16_t minVal, uint16_t maxVal);u16vec2  clamp(u16vec2  x, u16vec2  minVal, u16vec2  maxVal);u16vec3  clamp(u16vec3  x, u16vec3  minVal, u16vec3  maxVal);u16vec4  clamp(u16vec4  x, u16vec4  minVal, u16vec4  maxVal);int16_t  mix(int16_t,  int16_t,  bool);i16vec2  mix(i16vec2,  i16vec2,  bvec2);i16vec3  mix(i16vec3,  i16vec3,  bvec3);i16vec4  mix(i16vec4,  i16vec4,  bvec4);uint16_t mix(uint16_t, uint16_t, bool);u16vec2  mix(u16vec2,  u16vec2,  bvec2);u16vec3  mix(u16vec3,  u16vec3,  bvec3);u16vec4  mix(u16vec4,  u16vec4,  bvec4);float16_t frexp(float16_t, out int16_t);f16vec2   frexp(f16vec2,   out i16vec2);f16vec3   frexp(f16vec3,   out i16vec3);f16vec4   frexp(f16vec4,   out i16vec4);float16_t ldexp(float16_t, int16_t);f16vec2   ldexp(f16vec2,   i16vec2);f16vec3   ldexp(f16vec3,   i16vec3);f16vec4   ldexp(f16vec4,   i16vec4);int16_t halfBitsToInt16(float16_t);i16vec2 halfBitsToInt16(f16vec2);i16vec3 halhBitsToInt16(f16vec3);i16vec4 halfBitsToInt16(f16vec4);uint16_t halfBitsToUint16(float16_t);u16vec2  halfBitsToUint16(f16vec2);u16vec3  halfBitsToUint16(f16vec3);u16vec4  halfBitsToUint16(f16vec4);int16_t float16BitsToInt16(float16_t);i16vec2 float16BitsToInt16(f16vec2);i16vec3 float16BitsToInt16(f16vec3);i16vec4 float16BitsToInt16(f16vec4);uint16_t float16BitsToUint16(float16_t);u16vec2  float16BitsToUint16(f16vec2);u16vec3  float16BitsToUint16(f16vec3);u16vec4  float16BitsToUint16(f16vec4);float16_t int16BitsToFloat16(int16_t);f16vec2   int16BitsToFloat16(i16vec2);f16vec3   int16BitsToFloat16(i16vec3);f16vec4   int16BitsToFloat16(i16vec4);float16_t uint16BitsToFloat16(uint16_t);f16vec2   uint16BitsToFloat16(u16vec2);f16vec3   uint16BitsToFloat16(u16vec3);f16vec4   uint16BitsToFloat16(u16vec4);float16_t int16BitsToHalf(int16_t);f16vec2   int16BitsToHalf(i16vec2);f16vec3   int16BitsToHalf(i16vec3);f16vec4   int16BitsToHalf(i16vec4);float16_t uint16BitsToHalf(uint16_t);f16vec2   uint16BitsToHalf(u16vec2);f16vec3   uint16BitsToHalf(u16vec3);f16vec4   uint16BitsToHalf(u16vec4);int      packInt2x16(i16vec2);uint     packUint2x16(u16vec2);int64_t  packInt4x16(i16vec4);uint64_t packUint4x16(u16vec4);i16vec2  unpackInt2x16(int);u16vec2  unpackUint2x16(uint);i16vec4  unpackInt4x16(int64_t);u16vec4  unpackUint4x16(uint64_t);bvec2 lessThan(i16vec2, i16vec2);bvec3 lessThan(i16vec3, i16vec3);bvec4 lessThan(i16vec4, i16vec4);bvec2 lessThan(u16vec2, u16vec2);bvec3 lessThan(u16vec3, u16vec3);bvec4 lessThan(u16vec4, u16vec4);bvec2 lessThanEqual(i16vec2, i16vec2);bvec3 lessThanEqual(i16vec3, i16vec3);bvec4 lessThanEqual(i16vec4, i16vec4);bvec2 lessThanEqual(u16vec2, u16vec2);bvec3 lessThanEqual(u16vec3, u16vec3);bvec4 lessThanEqual(u16vec4, u16vec4);bvec2 greaterThan(i16vec2, i16vec2);bvec3 greaterThan(i16vec3, i16vec3);bvec4 greaterThan(i16vec4, i16vec4);bvec2 greaterThan(u16vec2, u16vec2);bvec3 greaterThan(u16vec3, u16vec3);bvec4 greaterThan(u16vec4, u16vec4);bvec2 greaterThanEqual(i16vec2, i16vec2);bvec3 greaterThanEqual(i16vec3, i16vec3);bvec4 greaterThanEqual(i16vec4, i16vec4);bvec2 greaterThanEqual(u16vec2, u16vec2);bvec3 greaterThanEqual(u16vec3, u16vec3);bvec4 greaterThanEqual(u16vec4, u16vec4);bvec2 equal(i16vec2, i16vec2);bvec3 equal(i16vec3, i16vec3);bvec4 equal(i16vec4, i16vec4);bvec2 equal(u16vec2, u16vec2);bvec3 equal(u16vec3, u16vec3);bvec4 equal(u16vec4, u16vec4);bvec2 notEqual(i16vec2, i16vec2);bvec3 notEqual(i16vec3, i16vec3);bvec4 notEqual(i16vec4, i16vec4);bvec2 notEqual(u16vec2, u16vec2);bvec3 notEqual(u16vec3, u16vec3);bvec4 notEqual(u16vec4, u16vec4);  int16_t bitfieldExtract(  int16_t, int16_t, int16_t);i16vec2 bitfieldExtract(i16vec2, int16_t, int16_t);i16vec3 bitfieldExtract(i16vec3, int16_t, int16_t);i16vec4 bitfieldExtract(i16vec4, int16_t, int16_t); uint16_t bitfieldExtract( uint16_t, int16_t, int16_t);u16vec2 bitfieldExtract(u16vec2, int16_t, int16_t);u16vec3 bitfieldExtract(u16vec3, int16_t, int16_t);u16vec4 bitfieldExtract(u16vec4, int16_t, int16_t);  int16_t bitfieldInsert(  int16_t base,   int16_t, int16_t, int16_t);i16vec2 bitfieldInsert(i16vec2 base, i16vec2, int16_t, int16_t);i16vec3 bitfieldInsert(i16vec3 base, i16vec3, int16_t, int16_t);i16vec4 bitfieldInsert(i16vec4 base, i16vec4, int16_t, int16_t); uint16_t bitfieldInsert( uint16_t base,  uint16_t, int16_t, int16_t);u16vec2 bitfieldInsert(u16vec2 base, u16vec2, int16_t, int16_t);u16vec3 bitfieldInsert(u16vec3 base, u16vec3, int16_t, int16_t);u16vec4 bitfieldInsert(u16vec4 base, u16vec4, int16_t, int16_t);  int16_t bitCount(  int16_t);i16vec2 bitCount(i16vec2);i16vec3 bitCount(i16vec3);i16vec4 bitCount(i16vec4);  int16_t bitCount( uint16_t);i16vec2 bitCount(u16vec2);i16vec3 bitCount(u16vec3);i16vec4 bitCount(u16vec4);  int16_t findLSB(  int16_t);i16vec2 findLSB(i16vec2);i16vec3 findLSB(i16vec3);i16vec4 findLSB(i16vec4);  int16_t findLSB( uint16_t);i16vec2 findLSB(u16vec2);i16vec3 findLSB(u16vec3);i16vec4 findLSB(u16vec4);  int16_t findMSB(  int16_t);i16vec2 findMSB(i16vec2);i16vec3 findMSB(i16vec3);i16vec4 findMSB(i16vec4);  int16_t findMSB( uint16_t);i16vec2 findMSB(u16vec2);i16vec3 findMSB(u16vec3);i16vec4 findMSB(u16vec4);int16_t  pack16(i8vec2);uint16_t pack16(u8vec2);int32_t  pack32(i8vec4);uint32_t pack32(u8vec4);int32_t  pack32(i16vec2);uint32_t pack32(u16vec2);int64_t  pack64(i16vec4);uint64_t pack64(u16vec4);int64_t  pack64(i32vec2);uint64_t pack64(u32vec2);i8vec2   unpack8(int16_t);u8vec2   unpack8(uint16_t);i8vec4   unpack8(int32_t);u8vec4   unpack8(uint32_t);i16vec2  unpack16(int32_t);u16vec2  unpack16(uint32_t);i16vec4  unpack16(int64_t);u16vec4  unpack16(uint64_t);i32vec2  unpack32(int64_t);u32vec2  unpack32(uint64_t);float64_t radians(float64_t);f64vec2   radians(f64vec2);f64vec3   radians(f64vec3);f64vec4   radians(f64vec4);float64_t degrees(float64_t);f64vec2   degrees(f64vec2);f64vec3   degrees(f64vec3);f64vec4   degrees(f64vec4);float64_t sin(float64_t);f64vec2   sin(f64vec2);f64vec3   sin(f64vec3);f64vec4   sin(f64vec4);float64_t cos(float64_t);f64vec2   cos(f64vec2);f64vec3   cos(f64vec3);f64vec4   cos(f64vec4);float64_t tan(float64_t);f64vec2   tan(f64vec2);f64vec3   tan(f64vec3);f64vec4   tan(f64vec4);float64_t asin(float64_t);f64vec2   asin(f64vec2);f64vec3   asin(f64vec3);f64vec4   asin(f64vec4);float64_t acos(float64_t);f64vec2   acos(f64vec2);f64vec3   acos(f64vec3);f64vec4   acos(f64vec4);float64_t atan(float64_t, float64_t);f64vec2   atan(f64vec2,   f64vec2);f64vec3   atan(f64vec3,   f64vec3);f64vec4   atan(f64vec4,   f64vec4);float64_t atan(float64_t);f64vec2   atan(f64vec2);f64vec3   atan(f64vec3);f64vec4   atan(f64vec4);float64_t sinh(float64_t);f64vec2   sinh(f64vec2);f64vec3   sinh(f64vec3);f64vec4   sinh(f64vec4);float64_t cosh(float64_t);f64vec2   cosh(f64vec2);f64vec3   cosh(f64vec3);f64vec4   cosh(f64vec4);float64_t tanh(float64_t);f64vec2   tanh(f64vec2);f64vec3   tanh(f64vec3);f64vec4   tanh(f64vec4);float64_t asinh(float64_t);f64vec2   asinh(f64vec2);f64vec3   asinh(f64vec3);f64vec4   asinh(f64vec4);float64_t acosh(float64_t);f64vec2   acosh(f64vec2);f64vec3   acosh(f64vec3);f64vec4   acosh(f64vec4);float64_t atanh(float64_t);f64vec2   atanh(f64vec2);f64vec3   atanh(f64vec3);f64vec4   atanh(f64vec4);float64_t pow(float64_t, float64_t);f64vec2   pow(f64vec2,   f64vec2);f64vec3   pow(f64vec3,   f64vec3);f64vec4   pow(f64vec4,   f64vec4);float64_t exp(float64_t);f64vec2   exp(f64vec2);f64vec3   exp(f64vec3);f64vec4   exp(f64vec4);float64_t log(float64_t);f64vec2   log(f64vec2);f64vec3   log(f64vec3);f64vec4   log(f64vec4);float64_t exp2(float64_t);f64vec2   exp2(f64vec2);f64vec3   exp2(f64vec3);f64vec4   exp2(f64vec4);float64_t log2(float64_t);f64vec2   log2(f64vec2);f64vec3   log2(f64vec3);f64vec4   log2(f64vec4);
int;
intBitsToFloat(00D
intBitsToFloat(10D
intBitsToFloat(20D
intBitsToFloat(30D
integer less than or equal to 4
integer modulus operator supported in GLSL ES 3.00 and above only
integer overflow
integer scalar or vector:
integer_expression
interface block has no fields
interface blocks supported in GLSL ES 3.00 and above only
interlock ordering =
intermOut.cpp
intermVec
internal error
internal image format requires a floating image type
internal image format requires an integer image type
internal image format requires an unsigned image type
internal max is %d
internal tokenizer error
internalformat is an ASTC format and target is not GL_TEXTURE_2D_ARRAY.
internalformat is an ETC2/EAC format and target is not GL_TEXTURE_2D_ARRAY.
internalformat is an RGTC format and target is not GL_TEXTURE_2D_ARRAY.
internalformat is an S3TC format and target is not GL_TEXTURE_2D_ARRAY.
interpolant
interpolateAtCentroid
interpolateAtCentroid(00B
interpolateAtCentroid(10B
interpolateAtCentroid(20B
interpolateAtCentroid(30B
interpolateAtOffset
interpolateAtOffset(00B10B
interpolateAtOffset(10B10B
interpolateAtOffset(20B10B
interpolateAtOffset(30B10B
interpolateAtSample
interpolateAtSample(00B00D
interpolateAtSample(10B00D
interpolateAtSample(20B00D
interpolateAtSample(30B00D
interpolateAtVertex
interpolateAtVertexAMD
interpolation qualifiers must appear before storage and precision qualifiers
interpolation_qualifier
into the structure <id> '
invSamples
invSrcExtent
invalid GL colorspace
invalid attribute: 0x
invalid bit length repeat
invalid block type
invalid character
invalid clip semantic
invalid code -- missing end-of-block
invalid code lengths set
invalid compositor timing.
invalid cull semantic
invalid default parameter value
invalid directive
invalid directive name
invalid directive:
invalid distance code
invalid distance too far back
invalid distances set
invalid domain
invalid expression
invalid extension behavior
invalid extension directive
invalid extension name
invalid file number
invalid layout qualifier
invalid layout qualifier combination
invalid layout qualifier: cannot be used here
invalid layout qualifier: location requires an argument
invalid layout qualifier: not supported
invalid layout qualifier: only valid on program inputs and outputs
invalid layout qualifier: only valid on program outputs
invalid layout qualifier: only valid on shader inputs, outputs, and uniforms
invalid layout qualifier: only valid when used with 'in' in a compute shader global layout declaration
invalid layout qualifier: only valid when used with 'in' in a fragment shader
invalid layout qualifier: only valid when used with a fragment shader output in ESSL version >= 3.00 and EXT_blend_func_extended is enabled
invalid layout qualifier: only valid when used with atomic counters
invalid layout qualifier: only valid when used with images
invalid layout qualifier: only valid when used with opaque types or blocks
invalid line directive
invalid line number
invalid literal/length code
invalid literal/lengths set
invalid maxvertexcount
invalid method
invalid number
invalid outputcontrolpoints
invalid outputtopology
invalid parameter after default value parameters
invalid parameter qualifier
invalid partitioning
invalid patch constant function
invalid pragma value - 'on' or 'off' expected
invalid preprocessor command
invalid primitive type for 'in' layout
invalid primitive type for 'out' layout
invalid qualifier combination
invalid qualifier on interface block member
invalid qualifier on shader storage block member
invalid qualifier on struct member
invalid qualifier on uniform block member
invalid qualifier: can be only used with function parameters
invalid qualifier: global layout can only be set for blocks
invalid qualifier: interface blocks must be uniform in version lower than GLSL ES 3.10
invalid qualifier: interface blocks must be uniform or buffer
invalid stored block lengths
invalid target: 0x
invalid timestamp type.
invalid timing name.
invalid value: Value must be at least 1 and no greater than
invalid version directive
invalid version number
invalid window size
invariant
invariant gl_Position;
invariant or precise declaration specifies layout
invariant or precise declaration specifies precision
invariant or precise declaration specifies qualifier
invariant qualifier must appear before interpolation, storage, and precision qualifiers
invariant varying
invariant_qualifier
inverse
inverse sqrt
inverse(50B
inverse(A0B
inverse(F0B
inversesqrt
inversesqrt(00B
inversesqrt(00C
inversesqrt(10B
inversesqrt(10C
inversesqrt(20B
inversesqrt(20C
inversesqrt(30B
inversesqrt(30C
invocation operation
invocations
invocations =
invocations can only be declared in 'in' layout in a geometry shader
invocations contradicts to the earlier declaration
iomapper.cpp
ios.cpp
ios_base::clear
iostream
iostream.cpp
ir_context.cpp
ir_loader.cpp
is a matrix with stride
is a type, not a value
is already a merge block for another header
is an improperly straddling vector at offset
is banned when using the Vulkan memory model.
is being used for
is contained in the
is decorated with BuiltIn. BuiltIn decoration should only be applied to struct types, variables and constants.
is defined more than once
is missing an Offset decoration
is not a bool scalar.
is not a constant.
is not a float scalar.
is not a float vector.
is not a predecessor of <id>
is not a scalar integer
is not a scalar numeric type
is not a type
is not a type id
is not a valid debug type
is not aligned to
is not aligned to scalar element size
is not allowed by OpenCL 1.2
is not allowed by OpenCL 2.0/2.1
is not allowed by OpenCL 2.2
is not allowed by Vulkan 1.0 specification
is not allowed by Vulkan 1.1 specification
is not allowed by Vulkan 1.2 specification
is not allowed by WebGPU specification
is not an OpLabel.
is not an array.
is not an int scalar.
is not an int vector.
is not marked separable.
is not post dominated by
is out of bounds for
is out of bounds. The structure has
is referencing
is reserved for future use.
is targeted by
is targeted by block
is too big to fit
is used outside of it's defining function
isAMD || IsAndroid()
isDualGPUMacWithNVIDIA
isIntel && IsApple() && IsSkylake(device) && GetMacOSVersion() < OSVersion(10, 13, 2)
isIntel || (IsWindows() && isAMD) || IsFuchsia() || isARM
isNegative
isNonZero = exponent < -25.0;    v = v * exp2(-exponent);    v = sign(v) * floor(abs(v));    return v * exp2(exponent) * (float
isNonZero = greaterThanEqual(exponent, vec
isNvidia && nvidiaVersion.major < uint32_t(IsWindows() ? 430 : 421)
isNvidia || isAMD || isIntel
isRestartEnabled
isSrcA2BGR10
isSrcHDR
isampler1D
isampler1DArray
isampler2D
isampler2DArray
isampler2DMS
isampler2DMSArray
isampler2DRect
isampler3D
isamplerBuffer
isamplerCube
isfinite
isinf
isinf(00B
isinf(00C
isinf(10B
isinf(10C
isinf(20B
isinf(20C
isinf(30B
isinf(30C
isnan
isnan(00B
isnan(00C
isnan(10B
isnan(10C
isnan(20B
isnan(20C
isnan(30B
isnan(30C
isolines
isubpassInput
isubpassInputMS
it7
itG
iteration_multiple
iteration_statement
iteration_statement_nonattributed
itexture1D
itexture1DArray
itexture2D
itexture2DArray
itexture2DMS
itexture2DMSArray
itexture2DRect
itexture3D
itextureBuffer
itextureCube
itextureCubeArray
itu_601
itu_601_full_range
itu_709
i~7
j
j">
j09
j7
j8
jAD
jCB
jI0
jW
jW5
jZ5
ji0
jlG
jq7
jt7
jump_statement
jxG
j}7
k
k&
k+>
k6>
k7
k8
k;E
kG
kGroups_1_0
kIntClampBegin
kIntClampDefinition
kIntClampEnd
kOperandTable
kTable_1_0
kWG
kYC
ka5
kan Mock Device
kernel enqeue flags
kernel profiling info
key and binary must both be null or both non-null.
keysize and binarysize must always be valid pointers.
kj5
k|/
k|O
l
l%>
l&
l-value of swizzle cannot have duplicate components
l-value required
l1B
l4>
l6
l7
l8
l=
lBV
lH[
l`@
label statement nested inside control flow
last case/default label not followed by statements
layout (
layout (early_fragment_tests) in;
layout (local_size_x=
layout qualifier can not have storage qualifiers
layout qualifier only valid for interface blocks
layout qualifiers supported in GLSL ES 3.00 and above
layout rules: member
layout(
layout(binding=X) is required
layout(constant_id=
layout(location =
layout(location = 0) out vec4 webgl_FragColor;
layout(location = 0) out vec4 webgl_FragData[gl_MaxDrawBuffers];
layout(num_views=
layout(set =
layout(set=0, binding=
layout, semantic, packoffset, or register
layoutSecondaryViewportRelativeOffset=
layoutViewportRelative
layout_qualifier
layout_qualifier_id
layout_qualifier_id_list
lbC
ldexp
ldexp(00B00D
ldexp(00C00D
ldexp(10B10D
ldexp(10C10D
ldexp(20B20D
ldexp(20C20D
ldexp(30B30D
ldexp(30C30D
left angle bracket
left of '[' is not of type array, matrix, or vector
left shift second child into first child
left-shift
legalize_vector_shuffle_pass.cpp
length can only be called on arrays
length(00B
length(00C
length(10B
length(10C
length(20B
length(20C
length(30B
length(30C
lerp
lessThan
lessThan(10B10B
lessThan(10D10D
lessThan(10E10E
lessThan(20B20B
lessThan(20D20D
lessThan(20E20E
lessThan(30B30B
lessThan(30D30D
lessThan(30E30E
lessThanEqual
lessThanEqual(10B10B
lessThanEqual(10D10D
lessThanEqual(10E10E
lessThanEqual(20B20B
lessThanEqual(20D20D
lessThanEqual(20E20E
lessThanEqual(30B30B
lessThanEqual(30D30D
lessThanEqual(30E30E
lg5
lgamma
lgamma_r
liW
libEGL.so.1
libGL.so.1
libGLESv2.so
libGLESv2_autogen.cpp
libX11.so.6
libc.so.6
libdl.so.2
libgcc_s.so.1
libm.so.6
libpthread.so.0
librt.so.1
libspirv.cpp
libvulkan.so
libvulkan.so.1
libxcb.so.1
licm_pass.cpp
light_attenuation_consts
light_attenuation_linears
light_attenuation_quadratics
light_directions
light_model_scene_ambient
light_model_two_sided
light_spotlight_cutoff_angles
light_spotlight_exponents
limit must be non-negative.
limitation
limitations
limits.cpp
line
line_strip
lineadj
linear
linearToSRGB(f1;
lines_adjacency
linkProgram
linkValidate.cpp
linkage type
literal string
loadSourceComponent(u1;
load_functions_table_autogen.cpp
loadedDevice
loadedInstance
loadimage.cpp
loadimage_etc.cpp
local function declaration
local function prototype declarations are not allowed
local_access_chain_convert_pass.cpp
local_redundancy_elimination.cpp
local_single_block_elim_pass.cpp
local_single_store_elim_pass.cpp
local_size
local_size = (
local_size id
local_size ids = (
local_size_
local_size_x
local_size_y
local_size_y and local_size_z.
local_size_z
locale not supported
locale.cpp
location is too large
location must not be set for atomic_uint
location must only be specified for a single input or output variable
location on block member
location qualifier on in/out block
location qualifier on input
location qualifier on output
location qualifier on uniform or buffer
location/component/index
location=
lod bias
log
log(00B
log(10B
log(20B
log(30B
log1p
log2
log2(00B
log2(10B
log2(20B
log2(30B
logError
logInfo
logWarning
logf
logical-and
logical-or
logical-xor
logical_and_expression
logical_or_expression
logical_xor_expression
long double std::__1::__num_get_float<long double>(char const*, char const*, unsigned int&)
long gl::CastFromGLintStateValue<long, unsigned int>(unsigned int, unsigned int)
long gl::CastFromStateValue<long, long>(unsigned int, long)
long gl::CastFromStateValue<long, unsigned char>(unsigned int, unsigned char)
long gl::CastFromStateValue<long, unsigned int>(unsigned int, unsigned int)
long long std::__1::__num_get_signed_integral<long long>(char const*, char const*, unsigned int&, int)
long std::__1::__num_get_signed_integral<long>(char const*, char const*, unsigned int&, int)
loop control
loop header
loop or switch
loop_dependence.cpp
loop_dependence_helpers.cpp
loop_descriptor.cpp
loop_fission.cpp
loop_fusion.cpp
loop_fusion_pass.cpp
loop_peeling.cpp
loop_unroller.cpp
loop_unswitch_pass.cpp
loop_utils.cpp
lose_context_on_out_of_memory
lowp
lowp   int bitCount(  int);lowp ivec2 bitCount(ivec2);lowp ivec3 bitCount(ivec3);lowp ivec4 bitCount(ivec4);lowp   int bitCount( uint);lowp ivec2 bitCount(uvec2);lowp ivec3 bitCount(uvec3);lowp ivec4 bitCount(uvec4);lowp   int findMSB(highp   int);lowp ivec2 findMSB(highp ivec2);lowp ivec3 findMSB(highp ivec3);lowp ivec4 findMSB(highp ivec4);lowp   int findMSB(highp  uint);lowp ivec2 findMSB(highp uvec2);lowp ivec3 findMSB(highp uvec3);lowp ivec4 findMSB(highp uvec4);
lowp   int findLSB(  int);lowp ivec2 findLSB(ivec2);lowp ivec3 findLSB(ivec3);lowp ivec4 findLSB(ivec4);lowp   int findLSB( uint);lowp ivec2 findLSB(uvec2);lowp ivec3 findLSB(uvec3);lowp ivec4 findLSB(uvec4);
lowp precision qualifier
lsG
l|O
l~,
m
m#>
m) {
m+5
m.>
m7
m8
m9>
m@=
mE5
mFunctions->copyTexImage2D(GL_TEXTURE_2D, 0, copyTexImageFormat.internalFormat, inBoundsSource.x, inBoundsSource.y, inBoundsSource.width, inBoundsSource.height, 0)
mFunctions->copyTexImage2D(GL_TEXTURE_2D, 0, copyTexImageFormat.internalFormat, sourceArea.x, sourceArea.y, sourceArea.width, sourceArea.height, 0)
mFunctions->generateMipmap(ToGLenum(sourceTarget))
mFunctions->texImage2D(GL_TEXTURE_2D, 0, copyTexImageFormat.internalFormat, sourceArea.width, sourceArea.height, 0, gl::GetUnsizedFormat(copyTexImageFormat.internalFormat), readType, nullptr)
mFunctions->texImage2D(ToGLenum(scratchTextureType), 0, texImageFormat.internalFormat, sourceArea.width, sourceArea.height, 0, texImageFormat.format, texImageFormat.type, nullptr)
mFunctions->texImage2D(ToGLenum(target), static_cast<GLint>(level), internalFormat, sourceArea.width, sourceArea.height, 0, format, readType, nullptr)
mG?
mIndexTypeUint8Features.indexTypeUint8 == 1
mOW
mTransformFeedbackFeatures.transformFeedback == 1
mZE
m[E
m\<
maC
macro expansion
macro invocation chain too deep
macro name is reserved
macro name with a double underscore is reserved - unintented behavior is possible
macro undefined while being invoked
mad
mageSampleFootprintGradClampNV
main
main function cannot return a value
makeCurrent
makeDestinationComponent(u1;f1;
makeDestinationComponent(u1;i1;
makeDestinationComponent(u1;u1;
malloc
mapImpl
mat2   outerProduct(vec2 c, vec2 r);mat3   outerProduct(vec3 c, vec3 r);mat4   outerProduct(vec4 c, vec4 r);mat2x3 outerProduct(vec3 c, vec2 r);mat3x2 outerProduct(vec2 c, vec3 r);mat2x4 outerProduct(vec4 c, vec2 r);mat4x2 outerProduct(vec2 c, vec4 r);mat3x4 outerProduct(vec4 c, vec3 r);mat4x3 outerProduct(vec3 c, vec4 r);mat2   transpose(mat2   m);mat3   transpose(mat3   m);mat4   transpose(mat4   m);mat2x3 transpose(mat3x2 m);mat3x2 transpose(mat2x3 m);mat2x4 transpose(mat4x2 m);mat4x2 transpose(mat2x4 m);mat3x4 transpose(mat4x3 m);mat4x3 transpose(mat3x4 m);mat2x3 matrixCompMult(mat2x3, mat2x3);mat2x4 matrixCompMult(mat2x4, mat2x4);mat3x2 matrixCompMult(mat3x2, mat3x2);mat3x4 matrixCompMult(mat3x4, mat3x4);mat4x2 matrixCompMult(mat4x2, mat4x2);mat4x3 matrixCompMult(mat4x3, mat4x3);
mat2 matrixCompMult(mat2 x, mat2 y);mat3 matrixCompMult(mat3 x, mat3 y);mat4 matrixCompMult(mat4 x, mat4 y);
mat_r11fg11fb10fDecrementCounterVulkan Mock Devi
material_ambient
material_diffuse
material_emissive
material_specular
material_specular_exponent
mathutil.cpp
matrix column component out of range
matrix component swizzle has too many components
matrix component swizzle missing
matrix constructed from matrix can only have one argument
matrix field selection out of range
matrix index out of range '%d'
matrix mult second child into first child
matrix of
matrix or packing qualifiers can only be used on a uniform or buffer
matrix row component out of range
matrix scale second child into first child
matrix swizzle
matrix type in buffer
matrix-multiply
matrix-scale
matrix-times-vector
matrixCompMult
matrixCompMult(50B50B
matrixCompMult(60B60B
matrixCompMult(70B70B
matrixCompMult(90B90B
matrixCompMult(A0BA0B
matrixCompMult(B0BB0B
matrixCompMult(D0BD0B
matrixCompMult(E0BE0B
matrixCompMult(F0BF0B
matrix_utils.cpp
max(00B00B
max(00C00C
max(00D00D
max(00E00E
max(10B00B
max(10B10B
max(10C00C
max(10C10C
max(10D00D
max(10D10D
max(10E00E
max(10E10E
max(20B00B
max(20B20B
max(20C00C
max(20C20C
max(20D00D
max(20D20D
max(20E00E
max(20E20E
max(30B00B
max(30B30B
max(30C00C
max(30C30C
max(30D00D
max(30D30D
max(30E00E
max(30E30E
max3
maxIndex
maxInvocations
maxInvocationsAMD
maxInvocationsExclusiveScan
maxInvocationsExclusiveScanAMD
maxInvocationsExclusiveScanNonUniform
maxInvocationsExclusiveScanNonUniformAMD
maxInvocationsInclusiveScan
maxInvocationsInclusiveScanAMD
maxInvocationsInclusiveScanNonUniform
maxInvocationsInclusiveScanNonUniformAMD
maxInvocationsNonUniform
maxInvocationsNonUniformAMD
max_3d_array_texture_size_1024
max_iterations
max_msaa_sample_count_4
max_primitives
max_primitives =
max_primitives*
max_texture_size_limit_4096
max_vertices
max_vertices =
max_vertices can only be declared in 'out' layout in a geometry shader
max_vertices contradicts to the earlier declaration
maximum nesting depth exceeded
maxmag
may not exceed
mbcnt
mbcntAMD
mbrtowc
mbsnrtowcs
mbsrtowcs
mbtowc
mcC
mediump
mediump precision qualifier
mediump vec2 unpackHalf2x16(highp uint);
mediump vec4 gl_FragCoord;        bool gl_FrontFacing;mediump vec4 gl_FragColor;mediump vec2 gl_PointCoord;
mediump vec4 gl_SecondaryFragColorEXT;mediump vec4 gl_SecondaryFragDataEXT[gl_MaxDualSourceDrawBuffersEXT];
mediump vec4 unpackSnorm4x8(highp uint);mediump vec4 unpackUnorm4x8(highp uint);
mem_pass.cpp
member cannot contradict block
member cannot contradict block (or what block inherited from global)
member of block cannot be or contain a cooperative matrix type
member of block cannot be or contain a sampler, image, or atomic_uint type
member of block cannot have a packing layout qualifier
member of nameless block was not redeclared
member of uniform or buffer block cannot have an auxiliary or interpolation qualifier
member storage qualifier cannot contradict block storage qualifier
member-function definition
members. Largest valid index is
memchr
memcmp
memcpy
memmove
memory access
memory exhausted
memory model
memory qualifiers cannot be used on this type
memory semantics ID
memory.cpp
memoryBarrier
memoryBarrier(
memoryBarrierAtomicCounter
memoryBarrierAtomicCounter(
memoryBarrierBuffer
memoryBarrierBuffer(
memoryBarrierImage
memoryBarrierImage(
memoryBarrierShared
memoryBarrierShared(
memset
merge block
merge-blocks
merge-return
merge_return_pass.cpp
mesh
mesh shaders
mesh view output array size must be gl_MaxMeshViewCountNV or implicitly sized
message controls must be EGL_TRUE or EGL_FALSE.
method does not accept any arguments
method takes no parameters
methods supported in GLSL ES 3.00 and above only
mid3
min(00B00B
min(00C00C
min(00D00D
min(00E00E
min(10B00B
min(10B10B
min(10C00C
min(10C10C
min(10D00D
min(10D10D
min(10E00E
min(10E10E
min(20B00B
min(20B20B
min(20C00C
min(20C20C
min(20D00D
min(20D20D
min(20E00E
min(20E20E
min(30B00B
min(30B30B
min(30C00C
min(30C30C
min(30D00D
min(30D30D
min(30E00E
min(30E30E
min10float
min10float1
min10float2
min10float3
min10float4
min12int
min12int1
min12int2
min12int3
min12int4
min16float
min16float1
min16float2
min16float3
min16float4
min16int
min16int1
min16int2
min16int3
min16int4
min16uint
min16uint1
min16uint2
min16uint3
min16uint4
min3
minInvocations
minInvocationsAMD
minInvocationsExclusiveScan
minInvocationsExclusiveScanAMD
minInvocationsExclusiveScanNonUniform
minInvocationsExclusiveScanNonUniformAMD
minInvocationsInclusiveScan
minInvocationsInclusiveScanAMD
minInvocationsInclusiveScanNonUniform
minInvocationsInclusiveScanNonUniformAMD
minInvocationsNonUniform
minInvocationsNonUniformAMD
min_iterations
minmag
mismatched statements
mismatching ternary operator operand types '
miss
missing #endif
missing input primitive declaration before calling length on gl_in
missing input primitive declaration before indexing gl_in.
missing parenthesis
missing perprimitiveNV qualifier to redeclared block member
missing perviewNV qualifier to redeclared block member
missing space after macro name
missing user function; linker needs to catch that
mix(00B00B00B
mix(00B00B00F
mix(00C00C00C
mix(00C00C00F
mix(00D00D00F
mix(00E00E00F
mix(00F00F00F
mix(10B10B00B
mix(10B10B10B
mix(10B10B10F
mix(10C10C00C
mix(10C10C10C
mix(10C10C10F
mix(10D10D10F
mix(10E10E10F
mix(10F10F10F
mix(20B20B00B
mix(20B20B20B
mix(20B20B20F
mix(20C20C00C
mix(20C20C20C
mix(20C20C20F
mix(20D20D20F
mix(20E20E20F
mix(20F20F20F
mix(30B30B00B
mix(30B30B30B
mix(30B30B30F
mix(30C30C00C
mix(30C30C30C
mix(30C30C30F
mix(30D30D30F
mix(30E30E30F
mix(30F30F30F
mod second child into first child
mod(00B00B
mod(00C00C
mod(10B00B
mod(10B10B
mod(10C00C
mod(10C10C
mod(20B00B
mod(20B20B
mod(20C00C
mod(20C20C
mod(30B00B
mod(30B30B
mod(30C00C
mod(30C30C
modf
modf(00B00B
modf(00C00C
modf(10B10B
modf(10C10C
modf(20B20B
modf(20C20C
modf(30B30B
modf(30C30C
modff
module.cpp
modulo
modulo second child into first child
money_get error
monotonicallyIncreasingTime
move second child to first child
msad4
msc is null
mul
mul() matrix size mismatch
multiple prototypes for same function
multiple times is not allowed.
multiplicative_expression
multiply second child into first child
multiply32x16
multisample count
multiviewBaseViewLayerIndex
must appear between section 9 (types, constants,
must be 0 for a floating-point type,
must be 0, 1, 2, or 3:
must be DebugTypeMember, DebugFunction, or DebugTypeInheritance
must be a compile-time constant:
must be a memory object declaration
must be a multiple of size of first component
must be a multiple of the member's alignment
must be a result id of a lexical scope
must be an OpLabel
must be explicitly laid out with ArrayStride decorations.
must be explicitly laid out with MatrixStride decorations.
must be explicitly laid out with Offset decorations.
must be followed by a header name
must be followed by macro name
must be followed by version number
must be greater than 0
must be greater than or equal to 1
must be in the range [0, 2]
must be less than or equal to
must be of type integer.
must be present.
must be qualified as flat
must by followed by an integral literal
must explicitly specify all locations when using multiple fragment outputs
must not use GLSLPacked decoration.
must not use GLSLShared decoration.
must occur first in shader
must specify 'location' to use 'component'
must use 'flat' interpolation here
mutable
mutex.cpp
mutex_destructor.cpp
mw7
m{7
m{T
n
n(>
n,5
n7
n8
nG
n_rects cannot be greater than zero when rects is NULL.
n_rects cannot be negative.
nal_even_spacing
name already defined
name is not a valid buffer.
name is not a valid framebuffer.
name is not a valid program pipeline.
name is not a valid query.
name is not a valid renderbuffer.
name is not a valid sampler.
name is not a valid transform feedback.
name is not a valid vertex array.
name is not valid.
name_mapper.cpp
nameless block contains a member that already has a name at global scope
names beginning with "GL_" can't be (un)defined:
names containing consecutive underscores are reserved, and an error if version < 300:
names containing consecutive underscores are reserved:
names is NULL.
namespace
namespace name
namespace or attribute identifier
native_cos
native_display should be a valid EGL device if platform equals EGL_PLATFORM_DEVICE_EXT
native_divide
native_exp
native_exp10
native_exp2
native_log
native_log10
native_log2
native_powr
native_recip
native_rsqrt
native_sin
native_sqrt
native_tan
near
need
need dictionary
needs a literal integer
negFlipXY
negation
new
new.cpp
newPresentSemaphore
newSharedFence
newlocale
nextSwapchainImage
nextafter
nh5
no binding specified
no declaration found for redeclaration
no longer supported in
no matching overloaded function found
no operation '%s' exists that takes a left-hand operand of type '%s' and a right operand of type '%s' (or there is no acceptable conversion)
no operation '%s' exists that takes an operand of type %s (or there is no acceptable conversion)
no qualifiers allowed for function return
no statement between the last label and the end of the switch statement
no such field in interface block
no such field in structure
noContraction
node is still EOpNull!
noinline
nointerpolation
noise
noise1
noise1(00B
noise1(10B
noise1(20B
noise1(30B
noise2
noise2(00B
noise2(10B
noise2(20B
noise2(30B
noise3
noise3(00B
noise3(10B
noise3(20B
noise3(30B
noise4
noise4(00B
noise4(10B
noise4(20B
noise4(30B
non-OpPhi instructions
non-built-in variables within a single structure). Structure id
non-constant global initializer (needs GL_EXT_shader_non_constant_global_initializers)
non-constant initializer
non-constant offset argument
non-literal layout-id value
non-matching or non-convertible constant type for const initializer
non-opaque uniform variables need a layout(location=L)
non-opaque uniforms outside a block
non-structure type in ConstantBuffer
non-uniform struct contains a sampler or image:
non-uniform struct contains an accelerationStructureNV:
non-uniform struct contains an atomic_uint:
non-virtual thunk to egl::Display::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to egl::Display::~Display()
non-virtual thunk to egl::ExternalImageSibling::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to egl::ExternalImageSibling::~ExternalImageSibling()
non-virtual thunk to egl::Image::getLabel() const
non-virtual thunk to egl::Image::setLabel(void*)
non-virtual thunk to egl::Image::~Image()
non-virtual thunk to egl::ImageSibling::~ImageSibling()
non-virtual thunk to egl::PbufferSurface::~PbufferSurface()
non-virtual thunk to egl::PixmapSurface::~PixmapSurface()
non-virtual thunk to egl::Surface::getAttachmentFormat(unsigned int, gl::ImageIndex const&) const
non-virtual thunk to egl::Surface::getAttachmentImpl() const
non-virtual thunk to egl::Surface::getAttachmentSamples(gl::ImageIndex const&) const
non-virtual thunk to egl::Surface::getAttachmentSize(gl::ImageIndex const&) const
non-virtual thunk to egl::Surface::getId() const
non-virtual thunk to egl::Surface::initState(gl::ImageIndex const&) const
non-virtual thunk to egl::Surface::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
non-virtual thunk to egl::Surface::onAttach(gl::Context const*)
non-virtual thunk to egl::Surface::onDetach(gl::Context const*)
non-virtual thunk to egl::Surface::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to egl::Surface::setInitState(gl::ImageIndex const&, gl::InitState)
non-virtual thunk to egl::Surface::~Surface()
non-virtual thunk to egl::Sync::getLabel() const
non-virtual thunk to egl::Sync::setLabel(void*)
non-virtual thunk to egl::Sync::~Sync()
non-virtual thunk to egl::WindowSurface::~WindowSurface()
non-virtual thunk to gl::Buffer::getLabel() const
non-virtual thunk to gl::Buffer::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to gl::Buffer::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::Buffer::~Buffer()
non-virtual thunk to gl::Context::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to gl::Context::~Context()
non-virtual thunk to gl::Framebuffer::getLabel() const
non-virtual thunk to gl::Framebuffer::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::Framebuffer::~Framebuffer()
non-virtual thunk to gl::FramebufferAttachmentObject::~FramebufferAttachmentObject()
non-virtual thunk to gl::ProgramPipeline::getLabel() const
non-virtual thunk to gl::ProgramPipeline::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::ProgramPipeline::~ProgramPipeline()
non-virtual thunk to gl::Query::getLabel() const
non-virtual thunk to gl::Query::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::Query::~Query()
non-virtual thunk to gl::Renderbuffer::getAttachmentFormat(unsigned int, gl::ImageIndex const&) const
non-virtual thunk to gl::Renderbuffer::getAttachmentImpl() const
non-virtual thunk to gl::Renderbuffer::getAttachmentSamples(gl::ImageIndex const&) const
non-virtual thunk to gl::Renderbuffer::getAttachmentSize(gl::ImageIndex const&) const
non-virtual thunk to gl::Renderbuffer::getId() const
non-virtual thunk to gl::Renderbuffer::getLabel() const
non-virtual thunk to gl::Renderbuffer::initState(gl::ImageIndex const&) const
non-virtual thunk to gl::Renderbuffer::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
non-virtual thunk to gl::Renderbuffer::onAttach(gl::Context const*)
non-virtual thunk to gl::Renderbuffer::onDetach(gl::Context const*)
non-virtual thunk to gl::Renderbuffer::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to gl::Renderbuffer::setInitState(gl::ImageIndex const&, gl::InitState)
non-virtual thunk to gl::Renderbuffer::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::Renderbuffer::~Renderbuffer()
non-virtual thunk to gl::Sampler::getLabel() const
non-virtual thunk to gl::Sampler::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::Sampler::~Sampler()
non-virtual thunk to gl::SubjectBindingPointer<gl::Buffer>::~SubjectBindingPointer()
non-virtual thunk to gl::Sync::getLabel() const
non-virtual thunk to gl::Sync::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::Sync::~Sync()
non-virtual thunk to gl::Texture::getAttachmentFormat(unsigned int, gl::ImageIndex const&) const
non-virtual thunk to gl::Texture::getAttachmentImpl() const
non-virtual thunk to gl::Texture::getAttachmentSamples(gl::ImageIndex const&) const
non-virtual thunk to gl::Texture::getAttachmentSize(gl::ImageIndex const&) const
non-virtual thunk to gl::Texture::getId() const
non-virtual thunk to gl::Texture::getLabel() const
non-virtual thunk to gl::Texture::initState(gl::ImageIndex const&) const
non-virtual thunk to gl::Texture::isRenderable(gl::Context const*, unsigned int, gl::ImageIndex const&) const
non-virtual thunk to gl::Texture::onAttach(gl::Context const*)
non-virtual thunk to gl::Texture::onDetach(gl::Context const*)
non-virtual thunk to gl::Texture::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to gl::Texture::setInitState(gl::ImageIndex const&, gl::InitState)
non-virtual thunk to gl::Texture::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::Texture::~Texture()
non-virtual thunk to gl::TransformFeedback::getLabel() const
non-virtual thunk to gl::TransformFeedback::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::TransformFeedback::~TransformFeedback()
non-virtual thunk to gl::VertexArray::getLabel() const
non-virtual thunk to gl::VertexArray::setLabel(gl::Context const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
non-virtual thunk to gl::VertexArray::~VertexArray()
non-virtual thunk to rx::ContextVk::handleError(VkResult, char const*, char const*, unsigned int)
non-virtual thunk to rx::ContextVk::isRobustResourceInitEnabled() const
non-virtual thunk to rx::ContextVk::~ContextVk()
non-virtual thunk to rx::DisplayEGL::~DisplayEGL()
non-virtual thunk to rx::DisplayGL::~DisplayGL()
non-virtual thunk to rx::DisplayGLX::~DisplayGLX()
non-virtual thunk to rx::DisplayImpl::~DisplayImpl()
non-virtual thunk to rx::DisplayNULL::~DisplayNULL()
non-virtual thunk to rx::DisplayVk::handleError(VkResult, char const*, char const*, unsigned int)
non-virtual thunk to rx::DisplayVk::isRobustResourceInitEnabled() const
non-virtual thunk to rx::DisplayVk::~DisplayVk()
non-virtual thunk to rx::DisplayVkXcb::~DisplayVkXcb()
non-virtual thunk to rx::OffscreenSurfaceVk::~OffscreenSurfaceVk()
non-virtual thunk to rx::RenderbufferVk::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to rx::RenderbufferVk::~RenderbufferVk()
non-virtual thunk to rx::SurfaceVk::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to rx::SurfaceVk::~SurfaceVk()
non-virtual thunk to rx::TextureVk::onSubjectStateChange(unsigned long, angle::SubjectMessage)
non-virtual thunk to rx::TextureVk::~TextureVk()
non-virtual thunk to rx::WindowSurfaceVk::~WindowSurfaceVk()
non-virtual thunk to rx::WindowSurfaceVkXcb::~WindowSurfaceVkXcb()
non-virtual thunk to rx::vk::ImageHelper::~ImageHelper()
non-virtual thunk to sh::TIntermAggregate::getSequence()
non-virtual thunk to sh::TIntermAggregate::getSequence() const
non-virtual thunk to sh::TIntermAggregate::~TIntermAggregate()
non-virtual thunk to sh::TIntermBlock::getSequence()
non-virtual thunk to sh::TIntermBlock::getSequence() const
non-virtual thunk to sh::TIntermBlock::~TIntermBlock()
non-virtual thunk to sh::TIntermDeclaration::getSequence()
non-virtual thunk to sh::TIntermDeclaration::getSequence() const
non-virtual thunk to sh::TIntermDeclaration::~TIntermDeclaration()
non-virtual thunk to std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()
non-virtual thunk to std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()
non-void function must return a value
non_uniform_qualifier
none
nonportable when expanded from macros for preprocessor expression
nonprivate
nonuniform
nonuniformEXT
noperspective
noperspective in
noperspective out
normalize(00B
normalize(00C
normalize(10B
normalize(10C
normalize(20B
normalize(20C
normalize(30B
normalize(30C
not allowed in nested scope
not allowed in this version
not allowed on block or structure members
not allowed to specify yuv qualifier when using depth or multiple color fragment outputs
not allowed when generating SPIR-V
not allowed when using GLSL for Vulkan
not enough data provided for construction
not satisfying alignment to
not supported for current targeted SPIR-V version
not supported for these tokens
not supported for this version or the enabled extensions
not supported in this stage:
not supported with this profile:
not(10F
not(20F
not(30F
notEqual
notEqual(10B10B
notEqual(10D10D
notEqual(10E10E
notEqual(10F10F
notEqual(20B20B
notEqual(20D20D
notEqual(20E20E
notEqual(20F20F
notEqual(30B30B
notEqual(30D30D
notEqual(30E30E
notEqual(30F30F
nt:
ntSecondaryColor
nterm
nuG
null pointer in arguments.
null_functions.cpp
numTimestamps must be at least 0.
numViews cannot be greater than GL_MAX_VIEWS_ANGLE.
numViews cannot be less than 1.
num_config cannot be null.
num_groups_x cannot be greater than MAX_COMPUTE_WORK_GROUP_COUNT[0]
num_groups_y cannot be greater than MAX_COMPUTE_WORK_GROUP_COUNT[1]
num_groups_z cannot be greater than MAX_COMPUTE_WORK_GROUP_COUNT[2]
num_views
num_views greater than the value of GL_MAX_VIEWS_OVR
number as Result Type
number of invocations must match between compilation units
numerator is null
numeric literal too big
numeric literal too long
numerical scalar type
n{7
n{Z
o
o&>
o1>
o7
o8
o:E
o<>
o[5
obC
oc5
octal and hex sequences not supported
octal literal digit too large
octal literal too big
oe5
of debug info extension must appear in a function
of function
of right matrix to be equal:
of struct ID <
of the left operand:
off
offset
offset %d in buffer %d
offset =
offset is too large:
offset must be a multiple of 4.
offset/align
offset/align can only be used on a uniform or buffer
offset=
offsets argument
oh,
oh5
oj7
on
onDestroy
onG
onal_odd_spacingV
ondaryPositionNV
one of the following storage classes: Output, Private, or
one or more arguments
only allowed at global scope
only allowed when generating SPIR-V
only allowed when using GLSL for Vulkan
only applies to block members, not blocks
only apply to images
only early_fragment_tests is allowed as layout qualifier when not declaring a variable
only one coherent/devicecoherent/queuefamilycoherent/workgroupcoherent/subgroupcoherent/shadercallcoherent qualifier allowed
only one precision qualifier allowed
only outermost dimension of an array of arrays can be a specialization constant
only outermost dimension of an array of arrays can be implicitly sized
only simple assignment to non-simple matrix swizzle is supported
only supported on image with format r32f
only supported on image with format r32i or r32ui
only supported on integer images
only uniform, buffer, in, or out blocks are supported
opaque types cannot be output parameters
opaque('
opcode.cpp
opcodes or together with Image Operand Grad
opencl_debuginfo_100_entries
opencl_entries
operand at word offset
operand index
operand of
operand of the result type.
operand.cpp
operation result is undefined for the values passed in
operator delete(void*)
operator delete(void*, std::align_val_t)
operator delete(void*, std::align_val_t, std::nothrow_t const&)
operator delete(void*, std::nothrow_t const&)
operator delete(void*, unsigned long)
operator delete(void*, unsigned long, std::align_val_t)
operator delete[](void*)
operator delete[](void*, std::align_val_t)
operator delete[](void*, std::align_val_t, std::nothrow_t const&)
operator delete[](void*, std::nothrow_t const&)
operator delete[](void*, unsigned long)
operator delete[](void*, unsigned long, std::align_val_t)
operator new(unsigned long)
operator new(unsigned long, std::align_val_t)
operator new(unsigned long, std::align_val_t, std::nothrow_t const&)
operator new(unsigned long, std::nothrow_t const&)
operator new[](unsigned long)
operator new[](unsigned long, std::align_val_t)
operator new[](unsigned long, std::align_val_t, std::nothrow_t const&)
operator new[](unsigned long, std::nothrow_t const&)
operator<<(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, sh::ImmutableString const&)
operator[] on a non-RW texture must be an r-value
optimize
optimize pragma syntax is incorrect
optimizer.cpp
optional.cpp
or 0 for an integer type with Signedness of 0,
or Op
or an array of one of these types.
or earlier
or scalar type:
or scalar:
or sign extended when Signedness is 1
or storage buffer
origin_upper_left
orphan
ossource.cpp
other message
out float gl_ClipDistance[];
out for stage outputs
out gl_MeshPerVertexNV {vec4 gl_Position;float gl_PointSize;float gl_ClipDistance[];float gl_CullDistance[];perviewNV vec4 gl_PositionPerViewNV[];perviewNV float gl_ClipDistancePerViewNV[][];perviewNV float gl_CullDistancePerViewNV[][];} gl_MeshVerticesNV[];
out gl_PerVertex {highp vec4  gl_Position;highp float gl_PointSize;};
out int  gl_ViewportMask[];out vec4 gl_SecondaryPositionNV;out int  gl_SecondaryViewportMaskNV[];out vec4 gl_PositionPerViewNV[];out int  gl_ViewportMaskPerViewNV[];
out int gl_FragStencilRefARB;
out int gl_ViewportIndex;
out int gl_ViewportIndex;out int gl_Layer;
out int gl_ViewportMask[];out int gl_SecondaryViewportMaskNV[];out vec4 gl_SecondaryPositionNV;out vec4 gl_PositionPerViewNV[];out int  gl_ViewportMaskPerViewNV[];
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yy_get_next_buffer()
out of dynamic memory in yyensure_buffer_stack()
out of memory
out of range:
out of range: binding must be non-negative
out of range: index layout qualifier can only be 0 or 1
out of range: invocations must be in the range of [1, MAX_GEOMETRY_SHADER_INVOCATIONS_OES]
out of range: location must be non-negative
out of range: max_vertices must be in the range of [0, gl_MaxGeometryOutputVertices]
out of range: num_views must be positive
out of range: offset must be non-negative
out type qualifier supported in GLSL ES 3.10 only
out uint gl_PrimitiveCountNV;out uint gl_PrimitiveIndicesNV[];in uint gl_MeshViewCountNV;in uint gl_MeshViewIndicesNV[4];const highp uvec3 gl_WorkGroupSize = uvec3(1,1,1);in highp uvec3 gl_WorkGroupID;in highp uvec3 gl_LocalInvocationID;in highp uvec3 gl_GlobalInvocationID;in highp uint gl_LocalInvocationIndex;
out uint gl_TaskCountNV;const highp uvec3 gl_WorkGroupSize = uvec3(1,1,1);in highp uvec3 gl_WorkGroupID;in highp uvec3 gl_LocalInvocationID;in highp uvec3 gl_GlobalInvocationID;in highp uint gl_LocalInvocationIndex;in uint gl_MeshViewCountNV;in uint gl_MeshViewIndicesNV[4];
out vec4 angle_SecondaryFragColor;
out vec4 angle_SecondaryFragData[
out vec4 gl_ClipVertex;
outer product
outerProduct
outerProduct(10B10B
outerProduct(10B20B
outerProduct(10B30B
outerProduct(20B10B
outerProduct(20B20B
outerProduct(20B30B
outerProduct(30B10B
outerProduct(30B20B
outerProduct(30B30B
output array locations would exceed MAX_DRAW_BUFFERS
output blocks cannot be used in a task shader
output location must be < MAX_DRAW_BUFFERS
output primitive =
output primitive geometry redefinition
outputCount
outputFloat
outputMask
outputUint
ov/
overlapping offsets at
overlapping use of location
overlaps previous member ending at offset
overloaded functions must have the same parameter precision qualifiers for argument
overloaded functions must have the same parameter storage qualifiers for argument
overloaded functions must have the same return type
overrideFeaturesMtl
overrideFeaturesVk
overrideWorkaroundsD3D
p
p >
p++
p,
p,W
p-5
p0.
p5
p6
p7
p8
p<<
p>
p>+
p?
p?F
pB[
pI0
pX5
paC
pack64
packDouble2x32(10E
packHalf2x16(10B
packSnorm2x16(10B
packSnorm4x8(30B
packUnorm2x16(10B
packUnorm4x8(30B
pack_overlapping_rows_separately_pack_buffer
packed
packoffset
pad_buffers_to_max_vertex_attrib_stride
param
param is negative.
parameter:
parameter_declaration
parameter_declarator
parameter_type_specifier
params
parenthesized array constructor not allowed
parseConst.cpp
parse_number.cpp
parsed_operand.cpp
partial_count
partition
pass.cpp
pass_manager.cpp
patch constant function not found
patch out highp vec4 gl_BoundingBox[2];
payload number
peel_count
per_frame_window_size_query
performance
permitted by WebGPU: got
perprimitiveNV
perprimitiveNV out gl_MeshPerPrimitiveNV {int gl_PrimitiveID;int gl_Layer;int gl_ViewportIndex;int gl_ViewportMask[];perviewNV int gl_LayerPerViewNV[];perviewNV int gl_ViewportMaskPerViewNV[][];} gl_MeshPrimitivesNV[];
persistently_mapped_buffers
perviewNV
pipe(
pixel_center_integer
pixel_center_intfARB
pixel_interlock_ordered
pixel_interlock_unordered
point_distance_attenuation
point_mode
point_rasterization
point_sprite_coord_replace
point_sprite_enabled
pointer definition.
pointsize
popcount
portability
pos
positiveMax
posix_memalign
possibly multi-word literal integer
possibly multi-word literal number
post depth coverage
postWorkerTask
post_coverage_coverage
post_depth_coverage requires early_fragment_tests
postfix_expression
pow
pow(00B00B
pow(10B10B
pow(20B20B
pow(30B30B
powf
pown
pp_create_buffer(_IO_FILE*, int, void*)
ppensure_buffer_stack(void*)
pperror((anonymous namespace)::Context*, char const*)
pplex(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, angle::pp::SourceLocation*, void*)
pplex_destroy(void*)
pppop_buffer_state(void*)
pprestart(_IO_FILE*, void*)
pragma
preRotation
pre_add_texel_fetch_offsets
precise
precise qualifier must appear first
precise_qualifier
precision highp float;
precision is not supported in fragment shader
precision qualifier must appear as last qualifier
precision statement
precision_qualifier
predefined macro redefined
predefined macro undefined
predefined names can't be (un)defined:
prefer_aggregate_barrier_calls
prefetch
premultiplyAlpha
preprocessor directive cannot be preceded by another token
preprocessor evaluation
preprocessor_lex_autogen.cpp
preprocessor_tab_autogen.cpp
primary_expression
primitive culling
primitive doesn't match earlier input primitive declaration
primitive doesn't match earlier output primitive declaration
print.cpp
printf
private_to_local_pass.cpp
private_typeinfo.cpp
proc_table_egl_autogen.cpp
process_lines_pass.cpp
programInterface must be set to GL_PROGRAM_OUTPUT.
propagate-lines
propagateNoContraction.cpp
propagator.cpp
protected
provided in OpGroupMemberDecorate for struct <id>
provided in OpMemberDecorate for struct <id>
ps7
ps:
pshufb_shf_table
pthread_cond_broadcast
pthread_cond_destroy
pthread_cond_signal
pthread_cond_timedwait
pthread_cond_wait
pthread_create
pthread_detach
pthread_getspecific
pthread_join
pthread_key_create
pthread_key_delete
pthread_mutex_destroy
pthread_mutex_init
pthread_mutex_lock
pthread_mutex_unlock
pthread_mutexattr_destroy
pthread_mutexattr_init
pthread_mutexattr_settype
pthread_once
pthread_self
pthread_setspecific
public
putProgram
puts
pv>
pygen_variable_AccessQualifierEntries
pygen_variable_AddressingModelEntries
pygen_variable_BuiltInEntries
pygen_variable_CLDEBUG100_DebugBaseTypeAttributeEncodingEntries
pygen_variable_CLDEBUG100_DebugCompositeTypeEntries
pygen_variable_CLDEBUG100_DebugImportedEntityEntries
pygen_variable_CLDEBUG100_DebugInfoFlagsEntries
pygen_variable_CLDEBUG100_DebugOperationEntries
pygen_variable_CLDEBUG100_DebugTypeQualifierEntries
pygen_variable_CapabilityEntries
pygen_variable_DebugBaseTypeAttributeEncodingEntries
pygen_variable_DebugCompositeTypeEntries
pygen_variable_DebugInfoFlagsEntries
pygen_variable_DebugOperationEntries
pygen_variable_DebugTypeQualifierEntries
pygen_variable_DecorationEntries
pygen_variable_DimEntries
pygen_variable_ExecutionModeEntries
pygen_variable_ExecutionModelEntries
pygen_variable_FPFastMathModeEntries
pygen_variable_FPRoundingModeEntries
pygen_variable_FunctionControlEntries
pygen_variable_FunctionParameterAttributeEntries
pygen_variable_GroupOperationEntries
pygen_variable_ImageChannelDataTypeEntries
pygen_variable_ImageChannelOrderEntries
pygen_variable_ImageFormatEntries
pygen_variable_ImageOperandsEntries
pygen_variable_KernelEnqueueFlagsEntries
pygen_variable_KernelProfilingInfoEntries
pygen_variable_LinkageTypeEntries
pygen_variable_LoopControlEntries
pygen_variable_MemoryAccessEntries
pygen_variable_MemoryModelEntries
pygen_variable_MemorySemanticsEntries
pygen_variable_OperandInfoTable
pygen_variable_RayFlagsEntries
pygen_variable_RayQueryCandidateIntersectionTypeEntries
pygen_variable_RayQueryCommittedIntersectionTypeEntries
pygen_variable_RayQueryIntersectionEntries
pygen_variable_SamplerAddressingModeEntries
pygen_variable_SamplerFilterModeEntries
pygen_variable_ScopeEntries
pygen_variable_SelectionControlEntries
pygen_variable_SourceLanguageEntries
pygen_variable_StorageClassEntries
pygen_variable_caps_Addresses
pygen_variable_caps_AtomicStorage
pygen_variable_caps_ClipDistance
pygen_variable_caps_ComputeDerivativeGroupLinearNV
pygen_variable_caps_ComputeDerivativeGroupQuadsNV
pygen_variable_caps_CullDistance
pygen_variable_caps_DenormFlushToZero
pygen_variable_caps_DenormPreserve
pygen_variable_caps_DeviceEnqueue
pygen_variable_caps_DeviceGroup
pygen_variable_caps_DrawParameters
pygen_variable_caps_DrawParametersMeshShadingNV
pygen_variable_caps_Float64
pygen_variable_caps_FragmentBarycentricNV
pygen_variable_caps_FragmentDensityEXTShadingRateNV
pygen_variable_caps_FragmentFullyCoveredEXT
pygen_variable_caps_FragmentShaderPixelInterlockEXT
pygen_variable_caps_FragmentShaderSampleInterlockEXT
pygen_variable_caps_FragmentShaderShadingRateInterlockEXT
pygen_variable_caps_GenericPointer
pygen_variable_caps_Geometry
pygen_variable_caps_GeometryMeshShadingNV
pygen_variable_caps_GeometryShaderLayerShaderViewportIndexLayerEXT
pygen_variable_caps_GeometryShaderPassthroughNV
pygen_variable_caps_GeometryStreams
pygen_variable_caps_GeometryTessellation
pygen_variable_caps_GeometryTessellationMeshShadingNV
pygen_variable_caps_GeometryTessellationRayTracingNVRayTracingProvisionalKHR
pygen_variable_caps_GroupNonUniform
pygen_variable_caps_GroupNonUniformClustered
pygen_variable_caps_GroupNonUniformPartitionedNV
pygen_variable_caps_ImageBasic
pygen_variable_caps_ImageBuffer
pygen_variable_caps_ImageBufferShaderNonUniform
pygen_variable_caps_ImageGatherExtended
pygen_variable_caps_InputAttachment
pygen_variable_caps_InputAttachmentShaderNonUniform
pygen_variable_caps_Int64
pygen_variable_caps_InterpolationFunction
pygen_variable_caps_Kernel
pygen_variable_caps_KernelGroupNonUniform
pygen_variable_caps_KernelGroupNonUniformArithmeticGroupNonUniformBallot
pygen_variable_caps_KernelGroupNonUniformSubgroupBallotKHR
pygen_variable_caps_Linkage
pygen_variable_caps_Matrix
pygen_variable_caps_MeshShadingNV
pygen_variable_caps_MinLod
pygen_variable_caps_MultiView
pygen_variable_caps_MultiViewport
pygen_variable_caps_MultiViewportShaderViewportIndexShaderViewportIndexLayerEXT
pygen_variable_caps_PerViewAttributesNVMeshShadingNV
pygen_variable_caps_PhysicalStorageBufferAddresses
pygen_variable_caps_Pipes
pygen_variable_caps_RayQueryProvisionalKHR
pygen_variable_caps_RayQueryProvisionalKHRRayTracingProvisionalKHR
pygen_variable_caps_RayTracingNVRayTracingProvisionalKHR
pygen_variable_caps_RayTracingProvisionalKHR
pygen_variable_caps_RayTraversalPrimitiveCullingProvisionalKHR
pygen_variable_caps_RoundingModeRTE
pygen_variable_caps_RoundingModeRTZ
pygen_variable_caps_SampleMaskOverrideCoverageNV
pygen_variable_caps_SampleMaskPostDepthCoverage
pygen_variable_caps_SampleRateShading
pygen_variable_caps_Sampled1D
pygen_variable_caps_Sampled1DImage1D
pygen_variable_caps_SampledBuffer
pygen_variable_caps_SampledBufferImageBuffer
pygen_variable_caps_SampledBufferShaderNonUniform
pygen_variable_caps_SampledCubeArray
pygen_variable_caps_SampledRect
pygen_variable_caps_SampledRectImageRect
pygen_variable_caps_Shader
pygen_variable_caps_ShaderImageCubeArray
pygen_variable_caps_ShaderKernel
pygen_variable_caps_ShaderKernelImageMSArray
pygen_variable_caps_ShaderNonUniform
pygen_variable_caps_ShaderSMBuiltinsNV
pygen_variable_caps_ShaderStereoViewNV
pygen_variable_caps_ShaderViewportIndexLayerNV
pygen_variable_caps_ShaderViewportMaskNV
pygen_variable_caps_ShaderViewportMaskNVMeshShadingNV
pygen_variable_caps_ShadingRateNVFragmentDensityEXT
pygen_variable_caps_SignedZeroInfNanPreserve
pygen_variable_caps_StencilExportEXT
pygen_variable_caps_StorageBuffer16BitAccessStorageUniformBufferBlock16
pygen_variable_caps_StorageBuffer8BitAccess
pygen_variable_caps_StorageImageExtendedFormats
pygen_variable_caps_SubgroupBallotKHRGroupNonUniformBallot
pygen_variable_caps_SubgroupDispatch
pygen_variable_caps_Tessellation
pygen_variable_caps_TransformFeedback
pygen_variable_caps_VariablePointersStorageBuffer
pygen_variable_caps_VulkanMemoryModel
pygen_variable_exts_SPV_AMD_gpu_shader_half_float_fetch
pygen_variable_exts_SPV_AMD_shader_ballot
pygen_variable_exts_SPV_AMD_shader_explicit_vertex_parameter
pygen_variable_exts_SPV_AMD_shader_fragment_mask
pygen_variable_exts_SPV_AMD_shader_image_load_store_lod
pygen_variable_exts_SPV_AMD_texture_gather_bias_lod
pygen_variable_exts_SPV_EXT_demote_to_helper_invocation
pygen_variable_exts_SPV_EXT_descriptor_indexing
pygen_variable_exts_SPV_EXT_fragment_fully_covered
pygen_variable_exts_SPV_EXT_fragment_invocation_densitySPV_NV_shading_rate
pygen_variable_exts_SPV_EXT_fragment_shader_interlock
pygen_variable_exts_SPV_EXT_physical_storage_bufferSPV_KHR_physical_storage_buffer
pygen_variable_exts_SPV_EXT_shader_stencil_export
pygen_variable_exts_SPV_EXT_shader_viewport_index_layerSPV_NV_viewport_array2
pygen_variable_exts_SPV_GOOGLE_hlsl_functionality1
pygen_variable_exts_SPV_GOOGLE_user_type
pygen_variable_exts_SPV_INTEL_device_side_avc_motion_estimation
pygen_variable_exts_SPV_INTEL_media_block_io
pygen_variable_exts_SPV_INTEL_shader_integer_functions2
pygen_variable_exts_SPV_INTEL_subgroups
pygen_variable_exts_SPV_KHR_16bit_storage
pygen_variable_exts_SPV_KHR_8bit_storage
pygen_variable_exts_SPV_KHR_device_group
pygen_variable_exts_SPV_KHR_float_controls
pygen_variable_exts_SPV_KHR_multiview
pygen_variable_exts_SPV_KHR_no_integer_wrap_decoration
pygen_variable_exts_SPV_KHR_post_depth_coverage
pygen_variable_exts_SPV_KHR_ray_query
pygen_variable_exts_SPV_KHR_ray_querySPV_KHR_ray_tracing
pygen_variable_exts_SPV_KHR_ray_tracing
pygen_variable_exts_SPV_KHR_ray_tracingSPV_NV_ray_tracing
pygen_variable_exts_SPV_KHR_shader_atomic_counter_ops
pygen_variable_exts_SPV_KHR_shader_ballot
pygen_variable_exts_SPV_KHR_shader_clock
pygen_variable_exts_SPV_KHR_shader_draw_parameters
pygen_variable_exts_SPV_KHR_shader_draw_parametersSPV_NV_mesh_shader
pygen_variable_exts_SPV_KHR_storage_buffer_storage_classSPV_KHR_variable_pointers
pygen_variable_exts_SPV_KHR_subgroup_vote
pygen_variable_exts_SPV_KHR_variable_pointers
pygen_variable_exts_SPV_KHR_vulkan_memory_model
pygen_variable_exts_SPV_NVX_multiview_per_view_attributes
pygen_variable_exts_SPV_NVX_multiview_per_view_attributesSPV_NV_mesh_shader
pygen_variable_exts_SPV_NV_compute_shader_derivatives
pygen_variable_exts_SPV_NV_cooperative_matrix
pygen_variable_exts_SPV_NV_fragment_shader_barycentric
pygen_variable_exts_SPV_NV_geometry_shader_passthrough
pygen_variable_exts_SPV_NV_mesh_shader
pygen_variable_exts_SPV_NV_mesh_shaderSPV_NV_viewport_array2
pygen_variable_exts_SPV_NV_ray_tracing
pygen_variable_exts_SPV_NV_sample_mask_override_coverage
pygen_variable_exts_SPV_NV_shader_image_footprint
pygen_variable_exts_SPV_NV_shader_sm_builtins
pygen_variable_exts_SPV_NV_shader_subgroup_partitioned
pygen_variable_exts_SPV_NV_stereo_view_rendering
pygen_variable_exts_SPV_NV_viewport_array2
p{7
p7
q
q)>
q+9
q0>
q2
q4>
q6E
q7
q8
q?>
qL-
q]5
q^T
qjG
qt7
quads
qualifier has no effect on non-output parameters
qualifier sequence
query_counter_bits_generates_errors
queryconversions.cpp
queryutils.cpp
queueSubmit
queueWaitIdle
queuefamilycoherent
q/
r
r#>
r#E
r11f_g11f_b10f
r16_snorm
r16f
r16i
r16ui
r2
r32i
r3W
r7
r8
r8_snorm
r8i
r8ui
r:
r<=
r>
rDB
rE.
rGE
rK+
radians
radians(00B
radians(10B
radians(20B
radians(30B
random.cpp
ray flags
ray query candidate intersection type
ray query committed intersection type
ray query intersection
ray-generation
rayPayloadEXT
rayPayloadInEXT
rayPayloadInNV
rayPayloadInNV block
rayPayloadNV
rayPayloadNV block
rayQueryConfirmIntersectionEXT
rayQueryGenerateIntersectionEXT
rayQueryGetIntersectionBarycentricsEXT
rayQueryGetIntersectionCandidateAABBOpaqueEXT
rayQueryGetIntersectionFrontFaceEXT
rayQueryGetIntersectionGeometryIndexEXT
rayQueryGetIntersectionInstanceCustomIndexEXT
rayQueryGetIntersectionInstanceIdEXT
rayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetEXT
rayQueryGetIntersectionObjectRayDirectionEXT
rayQueryGetIntersectionObjectRayOriginEXT
rayQueryGetIntersectionObjectToWorldEXT
rayQueryGetIntersectionPrimitiveIndexEXT
rayQueryGetIntersectionTEXT
rayQueryGetIntersectionTypeEXT
rayQueryGetIntersectionWorldToObjectEXT
rayQueryGetRayFlagsEXT
rayQueryGetRayTMinEXT
rayQueryGetWorldRayDirectionEXT
rayQueryGetWorldRayOriginEXT
rayQueryInitializeEXT
rayQueryProceedEXT
rayQueryProvisionalKHR
rayQueryTerminateEXT
rbC
rcp
reached non-composite type while indexes still remain to be traversed.
read storage image
readFirstInvocation
readFirstInvocationARB
readInvocation
readInvocationARB
readPixelsAllAtOnce
readPixelsForGetImage
readPixelsRowByRow
read_pixels_using_implementation_color_read_format
readlink
readonly
realloc
reapply_ubo_bindings_after_using_binary_program
recursive_mutex constructor failed
recursive_mutex lock failed
redeclaration of array with a different array dimensions or sizes
redeclaration of array with a different element type
redeclaration of array with size
redeclaration of gl_ClipDistance as an array of arrays
redeclaration of gl_ClipDistance with size > gl_MaxClipDistances
redeclaration of gl_LastFragData as an array of arrays
redeclaration of gl_LastFragData with size != gl_MaxDrawBuffers
redeclaration only allowed for override_coverage layout
redeclaration only allowed for viewport_relative or secondary_view_offset layout
redeclaring non-array as array
redefinition of a function
redefinition of a struct
redefinition of an interface block instance name
redefinition of an interface block member name
redefinition of an interface block name
redefinition of built-in function
reduce_load_size.cpp
redundancy-elimination
redundancy_elimination.cpp
reference conversion to uvec2
reflect
reflect(00B00B
reflect(00C00C
reflect(10B10B
reflect(10C10C
reflect(20B20B
reflect(20C20C
reflect(30B30B
reflect(30C30C
reflection.cpp
refract
refract(00B00B00B
refract(00C00C00B
refract(10B10B00B
refract(10C10C00B
refract(20B20B00B
refract(20C20C00B
refract(30B30B00B
refract(30C30C00B
regenerate_struct_names
regex.cpp
register number description
register_pressure.cpp
register_tm_clones
reinterpret_cast
relational_expression
relativeOffset cannot be greater than MAX_VERTEX_ATTRIB_RELATIVE_OFFSET.
relax_float_ops_pass.cpp
relaxed
releaseTexImageInternal
releaseToCommandBatch
remainder
remove_duplicates_pass.cpp
remove_dynamic_indexing_of_swizzled_vector
remove_invarient_and_centroid_for_essl3
remquo
renderer_utils.cpp
renderergl_utils.cpp
replace_invalid_opc.cpp
replicated qualifiers
reportIntersectionEXT
reportIntersectionNV
require
required extension not requested:
requires
requires Kernel capability
requires SPIR-V 1.3
requires Shader capability
requires a previous definition
requires a scalar
requires a type
requires a variable pointers capability
requires a view array dimension
requires an input_attachment_index layout qualifier
requires block, or sampler/image, or atomic-counter type
requires capability InterpolationFunction
requires local_size_x and local_size_y to be multiple of two
requires one of the following extensions:
requires one of these capabilities:
requires the Vector16 capability
requires total group size to be multiple of four
requires uniform or buffer storage qualifier
reserved built-in name
reset_teximage2d_base_level
reset_texture_generates_errors
resizeUniformBlockMemory
resolveCompile
resolveLinkImpl
restrict
result ID
result type (Op
return
return rounded;}
reversebits
rewrite_float_unary_minus_operator
rewrite_repeated_assign_to_swizzled
rewrite_row_major_matrices
rewrite_vector_scalar_arithmetic
rg16
rg16_snorm
rg16f
rg16i
rg16ui
rg32f
rg32i
rg32ui
rg8
rg8_snorm
rg8i
rg8ui
rgb10_a2
rgb_2_yuv
rgb_2_yuv(20B00H
rgb_dxt1_textures_sample_zero_alpha
rgba16
rgba16_snorm
rgba16f
rgba16i
rgba16ui
rgba32f
rgba32i
rgba32ui
rgba4_is_not_supported_for_color_rendering
rgba8_snorm
rgba8i
rgba8ui
right angle bracket
right shift second child into first child
right-shift
rootn
rotate
rotateXY
round(00B
round(00C
round(10B
round(10C
round(20B
round(20C
round(30B
round(30C
roundEven
roundEven(00B
roundEven(00C
roundEven(10B
roundEven(10C
roundEven(20B
roundEven(20C
roundEven(30B
roundEven(30C
rounded;
rounded[
roundf
row_major
rq
rules: A Block or BufferBlock cannot be nested within another Block or BufferBlock.
runtime-sized array of
rx::(anonymous namespace)::BindFramebufferAttachment(rx::FunctionsGL const*, unsigned int, gl::FramebufferAttachment const*)
rx::(anonymous namespace)::ClipChannelsAlpha(angle::Color<float>*)
rx::(anonymous namespace)::ClipChannelsLuminance(angle::Color<float>*)
rx::(anonymous namespace)::ClipChannelsNoOp(angle::Color<float>*)
rx::(anonymous namespace)::ClipChannelsR(angle::Color<float>*)
rx::(anonymous namespace)::ClipChannelsRG(angle::Color<float>*)
rx::(anonymous namespace)::ClipChannelsRGB(angle::Color<float>*)
rx::(anonymous namespace)::CopyColor(angle::Color<float>*)
rx::(anonymous namespace)::DebugReportCallback(unsigned int, VkDebugReportObjectTypeEXT, unsigned long, unsigned long, int, char const*, char const*, void*)
rx::(anonymous namespace)::DebugUtilsMessenger(VkDebugUtilsMessageSeverityFlagBitsEXT, unsigned int, VkDebugUtilsMessengerCallbackDataEXT const*, void*)
rx::(anonymous namespace)::FindAndAllocateCompatibleMemory(rx::vk::Context*, rx::vk::MemoryProperties const&, unsigned int, unsigned int*, VkMemoryRequirements const&, void const*, rx::vk::DeviceMemory*)
rx::(anonymous namespace)::HasValidationLayer(std::__1::vector<VkLayerProperties, std::__1::allocator<VkLayerProperties> > const&, char const*)
rx::(anonymous namespace)::IsIgnoredDebugMessage(char const*)
rx::(anonymous namespace)::PremultiplyAlpha(angle::Color<float>*)
rx::(anonymous namespace)::PrepareForClear(rx::StateManagerGL*, unsigned int, angle::FixedVector<unsigned int, 3ul, std::__1::array<unsigned int, 3ul> >*, angle::FixedVector<unsigned int, 3ul, std::__1::array<unsigned int, 3ul> >*, unsigned int*)
rx::(anonymous namespace)::RearrangeEXTTextureNorm16Pixels(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, gl::PixelPackState const&, unsigned char*, unsigned char*)
rx::(anonymous namespace)::RequiresMultiviewClear(gl::FramebufferState const&, bool)
rx::(anonymous namespace)::ScopedEXTTextureNorm16ReadbackWorkaround::Initialize(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)
rx::(anonymous namespace)::ScopedGLState::enter(gl::Context const*, gl::Rectangle, int)
rx::(anonymous namespace)::SetClearState(rx::StateManagerGL*, bool, bool, bool, unsigned int*)
rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory::makeEncoder()
rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory::~Std140BlockLayoutEncoderFactory()
rx::(anonymous namespace)::StrLess(char const*, char const*)
rx::(anonymous namespace)::SubstituteTransformFeedbackMarkers(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::(anonymous namespace)::UniformNameIsIndexZero(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)
rx::(anonymous namespace)::UnmultiplyAlpha(angle::Color<float>*)
rx::(anonymous namespace)::VerifyExtensionsPresent(angle::FixedVector<char const*, 200ul, std::__1::array<char const*, 200ul> > const&, angle::FixedVector<char const*, 200ul, std::__1::array<char const*, 200ul> > const&)
rx::(anonymous namespace)::VulkanDefaultBlockEncoder::advanceOffset(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, bool, int, int)
rx::(anonymous namespace)::VulkanDefaultBlockEncoder::~VulkanDefaultBlockEncoder()
rx::(anonymous namespace)::WriteFloatColor(angle::Color<float> const&, void (*)(unsigned char const*, unsigned char*), unsigned char*)
rx::(anonymous namespace)::WriteUintColor(angle::Color<float> const&, void (*)(unsigned char const*, unsigned char*), unsigned char*)
rx::(anonymous namespace)::kFragRotationMatrices
rx::(anonymous namespace)::kPipelineStageShaderMap
rx::(anonymous namespace)::kPreRotationMatrices
rx::(anonymous namespace)::kSamplePositions
rx::(anonymous namespace)::kShaderReadOnlyImageLayouts
rx::(anonymous namespace)::kShaderWriteImageLayouts
rx::(anonymous namespace)::kUninitializedClearValue
rx::(anonymous namespace)::kVkKhronosValidationLayerName
rx::(anonymous namespace)::kVkStandardValidationLayerName
rx::(anonymous namespace)::kVkValidationLayerNames
rx::(anonymous namespace)::kXfbBuiltInPrefix
rx::(anonymous namespace)::nativeEGLHandle
rx::AllocationTrackerNULL::AllocationTrackerNULL(unsigned long)
rx::AllocationTrackerNULL::updateMemoryAllocation(unsigned long, unsigned long)
rx::AllocationTrackerNULL::~AllocationTrackerNULL()
rx::ApplyFeatureOverrides(angle::FeatureSetBase*, egl::DisplayState const&)
rx::ApplySwizzle(gl::SwizzleState const&, gl::SwizzleState const&)
rx::BlitGL::BlitGL(rx::FunctionsGL const*, angle::FeaturesGL const&, rx::StateManagerGL*)
rx::BlitGL::blitColorBufferWithShader(gl::Context const*, gl::Framebuffer const*, gl::Framebuffer const*, gl::Rectangle const&, gl::Rectangle const&, unsigned int, bool)
rx::BlitGL::blitColorBufferWithShader(gl::Context const*, gl::Framebuffer const*, unsigned int, gl::Rectangle const&, gl::Rectangle const&, unsigned int, bool)
rx::BlitGL::blitColorBufferWithShader(gl::Context const*, gl::Framebuffer const*, unsigned int, gl::TextureTarget, unsigned long, gl::Rectangle const&, gl::Rectangle const&, unsigned int, bool)
rx::BlitGL::clearFramebuffer(gl::Context const*, rx::FramebufferGL*)
rx::BlitGL::clearRenderableTexture(gl::Context const*, rx::TextureGL*, unsigned int, int, gl::ImageIndex const&, bool*)
rx::BlitGL::clearRenderbuffer(gl::Context const*, rx::RenderbufferGL*, unsigned int)
rx::BlitGL::copyImageToLUMAWorkaroundTexture(gl::Context const*, unsigned int, gl::TextureType, gl::TextureTarget, unsigned int, unsigned long, gl::Rectangle const&, unsigned int, gl::Framebuffer*)
rx::BlitGL::copySubImageToLUMAWorkaroundTexture(gl::Context const*, unsigned int, gl::TextureType, gl::TextureTarget, unsigned int, unsigned long, gl::Offset const&, gl::Rectangle const&, gl::Framebuffer*)
rx::BlitGL::copySubTexture(gl::Context const*, rx::TextureGL*, unsigned long, unsigned int, unsigned int, gl::TextureTarget, unsigned long, unsigned int, gl::Extents const&, gl::Rectangle const&, gl::Offset const&, bool, unsigned int, bool, bool, bool, bool*)
rx::BlitGL::copySubTextureCPUReadback(gl::Context const*, rx::TextureGL*, unsigned long, unsigned int, rx::TextureGL*, gl::TextureTarget, unsigned long, unsigned int, unsigned int, gl::Extents const&, gl::Rectangle const&, gl::Offset const&, bool, unsigned int, bool, bool, bool)
rx::BlitGL::copyTexSubImage(gl::Context const*, rx::TextureGL*, unsigned long, rx::TextureGL*, gl::TextureTarget, unsigned long, gl::Rectangle const&, gl::Offset const&, bool*)
rx::BlitGL::generateSRGBMipmap(gl::Context const*, rx::TextureGL*, unsigned int, unsigned int, gl::Extents const&)
rx::BlitGL::getBlitProgram(gl::Context const*, gl::TextureType, unsigned int, unsigned int, rx::BlitGL::BlitProgram**)
rx::BlitGL::initializeResources(gl::Context const*)
rx::BlitGL::orphanScratchTextures(gl::Context const*)
rx::BlitGL::orphanScratchTextures(gl::Context const*)::swizzle
rx::BlitGL::~BlitGL()
rx::BufferGL::BufferGL(gl::BufferState const&, rx::FunctionsGL const*, rx::StateManagerGL*)
rx::BufferGL::copySubData(gl::Context const*, rx::BufferImpl*, long, long, long)
rx::BufferGL::getBufferID() const
rx::BufferGL::getIndexRange(gl::Context const*, gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange*)
rx::BufferGL::map(gl::Context const*, unsigned int, void**)
rx::BufferGL::mapRange(gl::Context const*, unsigned long, unsigned long, unsigned int, void**)
rx::BufferGL::setData(gl::Context const*, gl::BufferBinding, void const*, unsigned long, gl::BufferUsage)
rx::BufferGL::setSubData(gl::Context const*, gl::BufferBinding, void const*, unsigned long, unsigned long)
rx::BufferGL::unmap(gl::Context const*, unsigned char*)
rx::BufferGL::~BufferGL()
rx::BufferImpl::destroy(gl::Context const*)
rx::BufferImpl::getMemorySize() const
rx::BufferImpl::onDataChanged()
rx::BufferNULL::BufferNULL(gl::BufferState const&, rx::AllocationTrackerNULL*)
rx::BufferNULL::copySubData(gl::Context const*, rx::BufferImpl*, long, long, long)
rx::BufferNULL::getDataPtr()
rx::BufferNULL::getIndexRange(gl::Context const*, gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange*)
rx::BufferNULL::map(gl::Context const*, unsigned int, void**)
rx::BufferNULL::mapRange(gl::Context const*, unsigned long, unsigned long, unsigned int, void**)
rx::BufferNULL::setData(gl::Context const*, gl::BufferBinding, void const*, unsigned long, gl::BufferUsage)
rx::BufferNULL::setSubData(gl::Context const*, gl::BufferBinding, void const*, unsigned long, unsigned long)
rx::BufferNULL::unmap(gl::Context const*, unsigned char*)
rx::BufferNULL::~BufferNULL()
rx::BufferVk::BufferVk(gl::BufferState const&)
rx::BufferVk::acquireAndUpdate(rx::ContextVk*, unsigned char const*, unsigned long, unsigned long)
rx::BufferVk::copySubData(gl::Context const*, rx::BufferImpl*, long, long, long)
rx::BufferVk::copyToBufferImpl(rx::ContextVk*, rx::vk::BufferHelper*, unsigned int, VkBufferCopy const*)
rx::BufferVk::destroy(gl::Context const*)
rx::BufferVk::getIndexRange(gl::Context const*, gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange*)
rx::BufferVk::getIndexRange(gl::Context const*, gl::DrawElementsType, unsigned long, unsigned long, bool, gl::IndexRange*)::trace_event_unique_catstatic450
rx::BufferVk::getVertexConversionBuffer(rx::RendererVk*, angle::FormatID, unsigned int, unsigned long, bool)
rx::BufferVk::map(gl::Context const*, unsigned int, void**)
rx::BufferVk::mapImpl(rx::ContextVk*, void**)
rx::BufferVk::mapRange(gl::Context const*, unsigned long, unsigned long, unsigned int, void**)
rx::BufferVk::mapRange(gl::Context const*, unsigned long, unsigned long, unsigned int, void**)::trace_event_unique_catstatic347
rx::BufferVk::onDataChanged()
rx::BufferVk::setData(gl::Context const*, gl::BufferBinding, void const*, unsigned long, gl::BufferUsage)
rx::BufferVk::setDataImpl(rx::ContextVk*, unsigned char const*, unsigned long, unsigned long)
rx::BufferVk::setSubData(gl::Context const*, gl::BufferBinding, void const*, unsigned long, unsigned long)
rx::BufferVk::stagedUpdate(rx::ContextVk*, unsigned char const*, unsigned long, unsigned long)
rx::BufferVk::unmap(gl::Context const*, unsigned char*)
rx::BufferVk::unmapImpl(rx::ContextVk*)
rx::BufferVk::~BufferVk()
rx::CanMapBufferForRead(rx::FunctionsGL const*)
rx::CheckError(gl::Context const*, char const*, char const*, char const*, unsigned int)
rx::ClearErrors(gl::Context const*, char const*, char const*, unsigned int)
rx::ClearMultiviewGL::ClearMultiviewGL(rx::FunctionsGL const*, rx::StateManagerGL*)
rx::ClearMultiviewGL::attachTextures(gl::FramebufferState const&, int)
rx::ClearMultiviewGL::clearLayeredFBO(gl::FramebufferState const&, rx::ClearMultiviewGL::ClearCommandType, unsigned int, unsigned int, int, unsigned char const*, float, int)
rx::ClearMultiviewGL::clearMultiviewFBO(gl::FramebufferState const&, gl::Rectangle const&, rx::ClearMultiviewGL::ClearCommandType, unsigned int, unsigned int, int, unsigned char const*, float, int)
rx::ClearMultiviewGL::detachTextures(gl::FramebufferState const&)
rx::ClearMultiviewGL::~ClearMultiviewGL()
rx::ClipRectToScissor(gl::State const&, gl::Rectangle const&, bool)
rx::CommandProcessor::CommandProcessor()
rx::CommandProcessor::processCommandProcessorTasks()
rx::CommandProcessor::queueCommands(rx::vk::CommandProcessorTask const&)
rx::CommandProcessor::queueCommands(rx::vk::CommandProcessorTask const&)::trace_event_unique_catstatic20
rx::CommandProcessor::shutdown(std::__1::thread*)
rx::CommandProcessor::shutdown(std::__1::thread*)::endTask
rx::CommandProcessor::waitForWorkComplete()
rx::CommandProcessor::waitForWorkComplete()::trace_event_unique_catstatic60
rx::CommandProcessor::~CommandProcessor()
rx::CommandQueue::checkCompletedCommands(rx::vk::Context*)
rx::CommandQueue::checkCompletedCommands(rx::vk::Context*)::trace_event_unique_catstatic356
rx::CommandQueue::checkCompletedCommands(rx::vk::Context*)::trace_event_unique_catstatic374
rx::CommandQueue::finishToSerial(rx::vk::Context*, rx::Serial, unsigned long)
rx::CommandQueue::finishToSerial(rx::vk::Context*, rx::Serial, unsigned long)::trace_event_unique_catstatic499
rx::CommandQueue::handleDeviceLost(rx::RendererVk*)
rx::CommandQueue::submitFrame(rx::vk::Context*, egl::ContextPriority, VkSubmitInfo const&, rx::vk::Shared<rx::vk::Fence> const&, std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >*, rx::vk::CommandPool*, rx::vk::priv::CommandBuffer&&)
rx::CommandQueue::submitFrame(rx::vk::Context*, egl::ContextPriority, VkSubmitInfo const&, rx::vk::Shared<rx::vk::Fence> const&, std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >*, rx::vk::CommandPool*, rx::vk::priv::CommandBuffer&&)::trace_event_unique_catstatic540
rx::CompilerGL::CompilerGL(rx::FunctionsGL const*)
rx::CompilerGL::getTranslatorOutputType() const
rx::CompilerGL::~CompilerGL()
rx::CompilerImpl::~CompilerImpl()
rx::CompilerNULL::CompilerNULL()
rx::CompilerNULL::getTranslatorOutputType() const
rx::CompilerNULL::~CompilerNULL()
rx::CompilerVk::CompilerVk()
rx::CompilerVk::getTranslatorOutputType() const
rx::CompilerVk::~CompilerVk()
rx::ContextEGL::ContextEGL(gl::State const&, gl::ErrorSet*, std::__1::shared_ptr<rx::RendererEGL> const&)
rx::ContextEGL::getContext() const
rx::ContextEGL::~ContextEGL()
rx::ContextGL::ContextGL(gl::State const&, gl::ErrorSet*, std::__1::shared_ptr<rx::RendererGL> const&)
rx::ContextGL::createBuffer(gl::BufferState const&)
rx::ContextGL::createCompiler()
rx::ContextGL::createFenceNV()
rx::ContextGL::createFramebuffer(gl::FramebufferState const&)
rx::ContextGL::createMemoryObject()
rx::ContextGL::createOverlay(gl::OverlayState const&)
rx::ContextGL::createProgram(gl::ProgramState const&)
rx::ContextGL::createProgramPipeline(gl::ProgramPipelineState const&)
rx::ContextGL::createQuery(gl::QueryType)
rx::ContextGL::createRenderbuffer(gl::RenderbufferState const&)
rx::ContextGL::createSampler(gl::SamplerState const&)
rx::ContextGL::createSemaphore()
rx::ContextGL::createShader(gl::ShaderState const&)
rx::ContextGL::createSync()
rx::ContextGL::createTexture(gl::TextureState const&)
rx::ContextGL::createTransformFeedback(gl::TransformFeedbackState const&)
rx::ContextGL::createVertexArray(gl::VertexArrayState const&)
rx::ContextGL::dispatchCompute(gl::Context const*, unsigned int, unsigned int, unsigned int)
rx::ContextGL::dispatchComputeIndirect(gl::Context const*, long)
rx::ContextGL::drawArrays(gl::Context const*, gl::PrimitiveMode, int, int)
rx::ContextGL::drawArraysIndirect(gl::Context const*, gl::PrimitiveMode, void const*)
rx::ContextGL::drawArraysInstanced(gl::Context const*, gl::PrimitiveMode, int, int, int)
rx::ContextGL::drawArraysInstancedBaseInstance(gl::Context const*, gl::PrimitiveMode, int, int, int, unsigned int)
rx::ContextGL::drawElements(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*)
rx::ContextGL::drawElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
rx::ContextGL::drawElementsIndirect(gl::Context const*, gl::PrimitiveMode, gl::DrawElementsType, void const*)
rx::ContextGL::drawElementsInstanced(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
rx::ContextGL::drawElementsInstancedBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int)
rx::ContextGL::drawElementsInstancedBaseVertexBaseInstance(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int, unsigned int)
rx::ContextGL::drawRangeElements(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*)
rx::ContextGL::drawRangeElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*, int)
rx::ContextGL::finish(gl::Context const*)
rx::ContextGL::flush(gl::Context const*)
rx::ContextGL::flushIfNecessaryBeforeDeleteTextures()
rx::ContextGL::getBlitter() const
rx::ContextGL::getFeaturesGL() const
rx::ContextGL::getGPUDisjoint()
rx::ContextGL::getMultiviewClearer() const
rx::ContextGL::getNativeCaps() const
rx::ContextGL::getNativeExtensions() const
rx::ContextGL::getNativeLimitations() const
rx::ContextGL::getNativeTextureCaps() const
rx::ContextGL::getRendererDescription() const
rx::ContextGL::getResetStatus()
rx::ContextGL::getStateManager()
rx::ContextGL::getTimestamp()
rx::ContextGL::getVendorString() const
rx::ContextGL::initialize()
rx::ContextGL::insertEventMarker(int, char const*)
rx::ContextGL::invalidateTexture(gl::TextureType)
rx::ContextGL::memoryBarrier(gl::Context const*, unsigned int)
rx::ContextGL::memoryBarrierByRegion(gl::Context const*, unsigned int)
rx::ContextGL::onMakeCurrent(gl::Context const*)
rx::ContextGL::popDebugGroup(gl::Context const*)
rx::ContextGL::popGroupMarker()
rx::ContextGL::pushDebugGroup(gl::Context const*, unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::ContextGL::pushGroupMarker(int, char const*)
rx::ContextGL::resetUpdatedAttributes(angle::BitSetT<16ul, unsigned long, unsigned long>)
rx::ContextGL::setMaxShaderCompilerThreads(unsigned int)
rx::ContextGL::setNeedsFlushBeforeDeleteTextures()
rx::ContextGL::syncState(gl::Context const*, angle::BitSetT<62ul, unsigned long, unsigned long> const&, angle::BitSetT<62ul, unsigned long, unsigned long> const&)
rx::ContextGL::updateAttributesForBaseInstance(gl::Program const*, unsigned int)
rx::ContextGL::~ContextGL()
rx::ContextImpl::ContextImpl(gl::State const&, gl::ErrorSet*)
rx::ContextImpl::getContextPriority() const
rx::ContextImpl::handleError(unsigned int, char const*, char const*, char const*, unsigned int)
rx::ContextImpl::invalidateTexture(gl::TextureType)
rx::ContextImpl::onDestroy(gl::Context const*)
rx::ContextImpl::onUnMakeCurrent(gl::Context const*)
rx::ContextImpl::reacquireHighPowerGPU(gl::Context*)
rx::ContextImpl::releaseHighPowerGPU(gl::Context*)
rx::ContextImpl::setMaxShaderCompilerThreads(unsigned int)
rx::ContextImpl::setMemoryProgramCache(gl::MemoryProgramCache*)
rx::ContextImpl::~ContextImpl()
rx::ContextNULL::ContextNULL(gl::State const&, gl::ErrorSet*, rx::AllocationTrackerNULL*)
rx::ContextNULL::createBuffer(gl::BufferState const&)
rx::ContextNULL::createCompiler()
rx::ContextNULL::createFenceNV()
rx::ContextNULL::createFramebuffer(gl::FramebufferState const&)
rx::ContextNULL::createMemoryObject()
rx::ContextNULL::createOverlay(gl::OverlayState const&)
rx::ContextNULL::createProgram(gl::ProgramState const&)
rx::ContextNULL::createProgramPipeline(gl::ProgramPipelineState const&)
rx::ContextNULL::createQuery(gl::QueryType)
rx::ContextNULL::createRenderbuffer(gl::RenderbufferState const&)
rx::ContextNULL::createSampler(gl::SamplerState const&)
rx::ContextNULL::createSemaphore()
rx::ContextNULL::createShader(gl::ShaderState const&)
rx::ContextNULL::createSync()
rx::ContextNULL::createTexture(gl::TextureState const&)
rx::ContextNULL::createTransformFeedback(gl::TransformFeedbackState const&)
rx::ContextNULL::createVertexArray(gl::VertexArrayState const&)
rx::ContextNULL::dispatchCompute(gl::Context const*, unsigned int, unsigned int, unsigned int)
rx::ContextNULL::dispatchComputeIndirect(gl::Context const*, long)
rx::ContextNULL::drawArrays(gl::Context const*, gl::PrimitiveMode, int, int)
rx::ContextNULL::drawArraysIndirect(gl::Context const*, gl::PrimitiveMode, void const*)
rx::ContextNULL::drawArraysInstanced(gl::Context const*, gl::PrimitiveMode, int, int, int)
rx::ContextNULL::drawArraysInstancedBaseInstance(gl::Context const*, gl::PrimitiveMode, int, int, int, unsigned int)
rx::ContextNULL::drawElements(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*)
rx::ContextNULL::drawElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
rx::ContextNULL::drawElementsIndirect(gl::Context const*, gl::PrimitiveMode, gl::DrawElementsType, void const*)
rx::ContextNULL::drawElementsInstanced(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
rx::ContextNULL::drawElementsInstancedBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int)
rx::ContextNULL::drawElementsInstancedBaseVertexBaseInstance(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int, unsigned int)
rx::ContextNULL::drawRangeElements(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*)
rx::ContextNULL::drawRangeElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*, int)
rx::ContextNULL::finish(gl::Context const*)
rx::ContextNULL::flush(gl::Context const*)
rx::ContextNULL::getGPUDisjoint()
rx::ContextNULL::getNativeCaps() const
rx::ContextNULL::getNativeExtensions() const
rx::ContextNULL::getNativeLimitations() const
rx::ContextNULL::getNativeTextureCaps() const
rx::ContextNULL::getRendererDescription() const
rx::ContextNULL::getResetStatus()
rx::ContextNULL::getTimestamp()
rx::ContextNULL::getVendorString() const
rx::ContextNULL::handleError(unsigned int, char const*, char const*, char const*, unsigned int)
rx::ContextNULL::initialize()
rx::ContextNULL::insertEventMarker(int, char const*)
rx::ContextNULL::memoryBarrier(gl::Context const*, unsigned int)
rx::ContextNULL::memoryBarrierByRegion(gl::Context const*, unsigned int)
rx::ContextNULL::onMakeCurrent(gl::Context const*)
rx::ContextNULL::popDebugGroup(gl::Context const*)
rx::ContextNULL::popGroupMarker()
rx::ContextNULL::pushDebugGroup(gl::Context const*, unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::ContextNULL::pushGroupMarker(int, char const*)
rx::ContextNULL::syncState(gl::Context const*, angle::BitSetT<62ul, unsigned long, unsigned long> const&, angle::BitSetT<62ul, unsigned long, unsigned long> const&)
rx::ContextNULL::~ContextNULL()
rx::ContextVk::ContextVk(gl::State const&, gl::ErrorSet*, rx::RendererVk*)
rx::ContextVk::ContextVk(gl::State const&, gl::ErrorSet*, rx::RendererVk*)::trace_event_unique_catstatic634
rx::ContextVk::addWaitSemaphore(VkSemaphore_T*, unsigned int)
rx::ContextVk::allocBufferInfos(unsigned long)
rx::ContextVk::allocImageInfos(unsigned long)
rx::ContextVk::beginOcclusionQuery(rx::QueryVk*)
rx::ContextVk::checkCompletedCommands()
rx::ContextVk::checkCompletedGpuEvents()
rx::ContextVk::clearAllGarbage()
rx::ContextVk::clearAllGarbage()::trace_event_unique_catstatic1898
rx::ContextVk::createBuffer(gl::BufferState const&)
rx::ContextVk::createCompiler()
rx::ContextVk::createFenceNV()
rx::ContextVk::createFramebuffer(gl::FramebufferState const&)
rx::ContextVk::createMemoryObject()
rx::ContextVk::createOverlay(gl::OverlayState const&)
rx::ContextVk::createProgram(gl::ProgramState const&)
rx::ContextVk::createProgramPipeline(gl::ProgramPipelineState const&)
rx::ContextVk::createQuery(gl::QueryType)
rx::ContextVk::createRenderbuffer(gl::RenderbufferState const&)
rx::ContextVk::createSampler(gl::SamplerState const&)
rx::ContextVk::createSemaphore()
rx::ContextVk::createShader(gl::ShaderState const&)
rx::ContextVk::createSync()
rx::ContextVk::createTexture(gl::TextureState const&)
rx::ContextVk::createTransformFeedback(gl::TransformFeedbackState const&)
rx::ContextVk::createVertexArray(gl::VertexArrayState const&)
rx::ContextVk::dispatchCompute(gl::Context const*, unsigned int, unsigned int, unsigned int)
rx::ContextVk::dispatchComputeIndirect(gl::Context const*, long)
rx::ContextVk::drawArrays(gl::Context const*, gl::PrimitiveMode, int, int)
rx::ContextVk::drawArraysIndirect(gl::Context const*, gl::PrimitiveMode, void const*)
rx::ContextVk::drawArraysInstanced(gl::Context const*, gl::PrimitiveMode, int, int, int)
rx::ContextVk::drawArraysInstancedBaseInstance(gl::Context const*, gl::PrimitiveMode, int, int, int, unsigned int)
rx::ContextVk::drawElements(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*)
rx::ContextVk::drawElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
rx::ContextVk::drawElementsIndirect(gl::Context const*, gl::PrimitiveMode, gl::DrawElementsType, void const*)
rx::ContextVk::drawElementsInstanced(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int)
rx::ContextVk::drawElementsInstancedBaseVertex(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int)
rx::ContextVk::drawElementsInstancedBaseVertexBaseInstance(gl::Context const*, gl::PrimitiveMode, int, gl::DrawElementsType, void const*, int, int, unsigned int)
rx::ContextVk::drawRangeElements(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*)
rx::ContextVk::drawRangeElementsBaseVertex(gl::Context const*, gl::PrimitiveMode, unsigned int, unsigned int, int, gl::DrawElementsType, void const*, int)
rx::ContextVk::endOcclusionQuery(rx::QueryVk*)
rx::ContextVk::endRenderPass()
rx::ContextVk::finish(gl::Context const*)
rx::ContextVk::finishImpl()
rx::ContextVk::finishImpl()::trace_event_unique_catstatic3873
rx::ContextVk::finishToSerial(rx::Serial)
rx::ContextVk::flush(gl::Context const*)
rx::ContextVk::flushAndBeginRenderPass(rx::vk::Framebuffer const&, gl::Rectangle const&, rx::vk::RenderPassDesc const&, rx::vk::AttachmentOpsArray const&, rx::vk::ClearValuesArray const&, rx::vk::priv::SecondaryCommandBuffer**)
rx::ContextVk::flushGpuEvents(double, double)
rx::ContextVk::flushGpuEvents(double, double)::categoryEnabled
rx::ContextVk::flushGpuEvents(double, double)::eventId
rx::ContextVk::flushImpl(rx::vk::Semaphore const*)
rx::ContextVk::flushImpl(rx::vk::Semaphore const*)::trace_event_unique_catstatic3805
rx::ContextVk::getClearColorMask() const
rx::ContextVk::getClearColorValue() const
rx::ContextVk::getClearDepthStencilValue() const
rx::ContextVk::getCompatibleRenderPass(rx::vk::RenderPassDesc const&, rx::vk::RenderPass**)
rx::ContextVk::getContextPriority() const
rx::ContextVk::getDevice() const
rx::ContextVk::getDriverUniformsDescriptorSetDesc(unsigned int) const
rx::ContextVk::getGPUDisjoint()
rx::ContextVk::getLastSubmittedFence() const
rx::ContextVk::getNativeCaps() const
rx::ContextVk::getNativeExtensions() const
rx::ContextVk::getNativeLimitations() const
rx::ContextVk::getNativeTextureCaps() const
rx::ContextVk::getNextAvailableCommandBuffer(rx::vk::CommandBufferHelper**, bool)
rx::ContextVk::getNextAvailableCommandBuffer(rx::vk::CommandBufferHelper**, bool)::trace_event_unique_catstatic4328
rx::ContextVk::getNextSubmitFence(rx::vk::Shared<rx::vk::Fence>*)
rx::ContextVk::getQueryPool(gl::QueryType)
rx::ContextVk::getRendererDescription() const
rx::ContextVk::getResetStatus()
rx::ContextVk::getRotationDrawFramebuffer() const
rx::ContextVk::getRotationReadFramebuffer() const
rx::ContextVk::getTimestamp()
rx::ContextVk::getTimestamp(unsigned long*)
rx::ContextVk::getVendorString() const
rx::ContextVk::getVkIndexType(gl::DrawElementsType) const
rx::ContextVk::getVkIndexTypeSize(gl::DrawElementsType) const
rx::ContextVk::handleDirtyComputeDriverUniforms(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyComputeDriverUniformsBinding(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyComputePipeline(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyComputeShaderResources(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyComputeTextures(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyDescriptorSets(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyDriverUniformsBindingImpl(rx::vk::priv::SecondaryCommandBuffer*, VkPipelineBindPoint, rx::ContextVk::DriverUniformsDescriptorSet const&)
rx::ContextVk::handleDirtyGraphicsDefaultAttribs(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsDriverUniforms(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsDriverUniformsBinding(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsIndexBuffer(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsPipeline(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsShaderResources(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsTextures(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsTransformFeedbackBuffersEmulation(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsTransformFeedbackBuffersExtension(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsTransformFeedbackResume(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsTransformFeedbackState(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleDirtyGraphicsVertexBuffers(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ContextVk::handleError(VkResult, char const*, char const*, unsigned int)
rx::ContextVk::initialize()
rx::ContextVk::initialize()::trace_event_unique_catstatic784
rx::ContextVk::insertEventMarker(int, char const*)
rx::ContextVk::invalidateComputeDescriptorSet(unsigned int)
rx::ContextVk::invalidateCurrentTransformFeedbackBuffers()
rx::ContextVk::invalidateDefaultAttribute(unsigned long)
rx::ContextVk::invalidateGraphicsDescriptorSet(unsigned int)
rx::ContextVk::isRobustResourceInitEnabled() const
rx::ContextVk::isRotatedAspectRatioForDrawFBO() const
rx::ContextVk::isSerialInUse(rx::Serial) const
rx::ContextVk::isViewportFlipEnabledForDrawFBO() const
rx::ContextVk::isViewportFlipEnabledForReadFBO() const
rx::ContextVk::memoryBarrier(gl::Context const*, unsigned int)
rx::ContextVk::memoryBarrierByRegion(gl::Context const*, unsigned int)
rx::ContextVk::memoryBarrierImpl(unsigned int, unsigned int)
rx::ContextVk::onBeginTransformFeedback(unsigned long, std::__1::array<rx::vk::BufferHelper*, 4ul> const&)
rx::ContextVk::onBufferRead(unsigned int, rx::vk::PipelineStage, rx::vk::BufferHelper*)
rx::ContextVk::onBufferWrite(unsigned int, rx::vk::PipelineStage, rx::vk::BufferHelper*)
rx::ContextVk::onDestroy(gl::Context const*)
rx::ContextVk::onDrawFramebufferChange(rx::FramebufferVk*)
rx::ContextVk::onEndTransformFeedback()
rx::ContextVk::onImageRead(unsigned int, rx::vk::ImageLayout, rx::vk::ImageHelper*)
rx::ContextVk::onImageWrite(unsigned int, rx::vk::ImageLayout, rx::vk::ImageHelper*)
rx::ContextVk::onMakeCurrent(gl::Context const*)
rx::ContextVk::onPauseTransformFeedback()
rx::ContextVk::onRenderPassImageWrite(unsigned int, rx::vk::ImageLayout, rx::vk::ImageHelper*)
rx::ContextVk::onUnMakeCurrent(gl::Context const*)
rx::ContextVk::optimizeRenderPassForPresent(VkFramebuffer_T*)
rx::ContextVk::popDebugGroup(gl::Context const*)
rx::ContextVk::popGroupMarker()
rx::ContextVk::pushDebugGroup(gl::Context const*, unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::ContextVk::pushGroupMarker(int, char const*)
rx::ContextVk::recycleCommandBuffer(rx::vk::CommandBufferHelper*)
rx::ContextVk::recycleCommandBuffer(rx::vk::CommandBufferHelper*)::trace_event_unique_catstatic4342
rx::ContextVk::setupDispatch(gl::Context const*, rx::vk::priv::SecondaryCommandBuffer**)
rx::ContextVk::setupDraw(gl::Context const*, gl::PrimitiveMode, int, int, int, gl::DrawElementsType, void const*, angle::BitSetT<12ul, unsigned long, unsigned long>, rx::vk::priv::SecondaryCommandBuffer**)
rx::ContextVk::setupIndexedDraw(gl::Context const*, gl::PrimitiveMode, int, int, gl::DrawElementsType, void const*, rx::vk::priv::SecondaryCommandBuffer**)
rx::ContextVk::setupLineLoopIndexedIndirectDraw(gl::Context const*, gl::PrimitiveMode, gl::DrawElementsType, rx::vk::BufferHelper*, unsigned long, rx::vk::priv::SecondaryCommandBuffer**, rx::vk::BufferHelper**, unsigned long*)
rx::ContextVk::setupLineLoopIndirectDraw(gl::Context const*, gl::PrimitiveMode, rx::vk::BufferHelper*, unsigned long, rx::vk::priv::SecondaryCommandBuffer**, rx::vk::BufferHelper**, unsigned long*)
rx::ContextVk::shouldConvertUint8VkIndexType(gl::DrawElementsType) const
rx::ContextVk::startRenderPass(gl::Rectangle, rx::vk::priv::SecondaryCommandBuffer**)
rx::ContextVk::submitFrame(VkSubmitInfo const&, rx::vk::priv::CommandBuffer&&)
rx::ContextVk::syncExternalMemory()
rx::ContextVk::syncState(gl::Context const*, angle::BitSetT<62ul, unsigned long, unsigned long> const&, angle::BitSetT<62ul, unsigned long, unsigned long> const&)
rx::ContextVk::synchronizeCpuGpuTime()
rx::ContextVk::synchronizeCpuGpuTime()::trace_event_unique_catstatic1665
rx::ContextVk::updateActiveImages(gl::Context const*, rx::vk::CommandBufferHelper*)
rx::ContextVk::updateActiveTextures(gl::Context const*)
rx::ContextVk::updateColorMask(gl::BlendState const&)
rx::ContextVk::updateDefaultAttribute(unsigned long)
rx::ContextVk::updateDriverUniformsDescriptorSet(VkBuffer_T*, bool, unsigned long, rx::ContextVk::DriverUniformsDescriptorSet*)
rx::ContextVk::updateSampleMask(gl::State const&)
rx::ContextVk::updateScissor(gl::State const&)
rx::ContextVk::updateViewport(rx::FramebufferVk*, gl::Rectangle const&, float, float, bool)
rx::ContextVk::waitForSwapchainImageIfNecessary()
rx::ContextVk::~ContextVk()
rx::CopyImageCHROMIUM(unsigned char const*, unsigned long, unsigned long, unsigned long, void (*)(unsigned char const*, unsigned char*), unsigned char*, unsigned long, unsigned long, unsigned long, void (*)(unsigned char const*, unsigned char*), unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, bool, bool, bool)
rx::CreateVulkanXcbDisplay(egl::DisplayState const&)
rx::DefaultUniformBlock::DefaultUniformBlock()
rx::DefaultUniformBlock::~DefaultUniformBlock()
rx::DescriptorSetLayoutCache::DescriptorSetLayoutCache()
rx::DescriptorSetLayoutCache::destroy(VkDevice_T*)
rx::DescriptorSetLayoutCache::getDescriptorSetLayout(rx::vk::Context*, rx::vk::DescriptorSetLayoutDesc const&, rx::vk::BindingPointer<rx::vk::DescriptorSetLayout>*)
rx::DescriptorSetLayoutCache::~DescriptorSetLayoutCache()
rx::DeviceImpl::DeviceImpl()
rx::DeviceImpl::~DeviceImpl()
rx::DeviceNULL::DeviceNULL()
rx::DeviceNULL::generateExtensions(egl::DeviceExtensions*) const
rx::DeviceNULL::getAttribute(egl::Display const*, int, void**)
rx::DeviceNULL::getType()
rx::DeviceNULL::initialize()
rx::DeviceNULL::~DeviceNULL()
rx::DispatchTableGL::DispatchTableGL()
rx::DispatchTableGL::initProcsDesktopGL(gl::Version const&, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
rx::DispatchTableGL::initProcsDesktopGLNULL(gl::Version const&, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
rx::DispatchTableGL::initProcsGLES(gl::Version const&, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
rx::DispatchTableGL::initProcsGLESNULL(gl::Version const&, std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
rx::DispatchTableGL::initProcsSharedExtensions(std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
rx::DispatchTableGL::initProcsSharedExtensionsNULL(std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
rx::DispatchTableGL::~DispatchTableGL()
rx::DisplayEGL::DisplayEGL(egl::DisplayState const&)
rx::DisplayEGL::createContext(gl::State const&, gl::ErrorSet*, egl::Config const*, gl::Context const*, egl::AttributeMap const&)
rx::DisplayEGL::createDevice()
rx::DisplayEGL::createExternalImageSibling(gl::Context const*, unsigned int, void*, egl::AttributeMap const&)
rx::DisplayEGL::createImage(egl::ImageState const&, gl::Context const*, unsigned int, egl::AttributeMap const&)
rx::DisplayEGL::createPbufferFromClientBuffer(egl::SurfaceState const&, unsigned int, void*, egl::AttributeMap const&)
rx::DisplayEGL::createPbufferSurface(egl::SurfaceState const&, egl::AttributeMap const&)
rx::DisplayEGL::createPixmapSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayEGL::createRenderer(void*, std::__1::shared_ptr<rx::RendererEGL>*)
rx::DisplayEGL::createSync(egl::AttributeMap const&)
rx::DisplayEGL::createWindowSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayEGL::createWorkerContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, void*, std::__1::vector<int, std::__1::allocator<int> >)
rx::DisplayEGL::destroyNativeContext(void*)
rx::DisplayEGL::generateCaps(egl::Caps*) const
rx::DisplayEGL::generateConfigs()
rx::DisplayEGL::generateExtensions(egl::DisplayExtensions*) const
rx::DisplayEGL::getMaxSupportedESVersion() const
rx::DisplayEGL::getVendorString() const
rx::DisplayEGL::initialize(egl::Display*)
rx::DisplayEGL::initializeContext(void*, egl::AttributeMap const&, void**, std::__1::vector<int, std::__1::allocator<int> >*) const
rx::DisplayEGL::initializeFrontendFeatures(angle::FrontendFeatures*) const
rx::DisplayEGL::isValidNativeWindow(unsigned long) const
rx::DisplayEGL::makeCurrent(egl::Surface*, egl::Surface*, gl::Context*)
rx::DisplayEGL::makeCurrentSurfaceless(gl::Context*)
rx::DisplayEGL::populateFeatureList(std::__1::vector<angle::Feature const*, std::__1::allocator<angle::Feature const*> >*)
rx::DisplayEGL::restoreLostDevice(egl::Display const*)
rx::DisplayEGL::setBlobCacheFuncs(void (*)(void const*, long, void const*, long), long (*)(void const*, long, void*, long))
rx::DisplayEGL::terminate()
rx::DisplayEGL::testDeviceLost()
rx::DisplayEGL::validateImageClientBuffer(gl::Context const*, unsigned int, void*, egl::AttributeMap const&) const
rx::DisplayEGL::waitClient(gl::Context const*)
rx::DisplayEGL::waitNative(gl::Context const*, int)
rx::DisplayEGL::~DisplayEGL()
rx::DisplayGL::DisplayGL(egl::DisplayState const&)
rx::DisplayGL::createImage(egl::ImageState const&, gl::Context const*, unsigned int, egl::AttributeMap const&)
rx::DisplayGL::createShareGroup()
rx::DisplayGL::createStreamProducerD3DTexture(egl::Stream::ConsumerType, egl::AttributeMap const&)
rx::DisplayGL::generateExtensions(egl::DisplayExtensions*) const
rx::DisplayGL::getMaxConformantESVersion() const
rx::DisplayGL::initialize(egl::Display*)
rx::DisplayGL::makeCurrent(egl::Surface*, egl::Surface*, gl::Context*)
rx::DisplayGL::makeCurrentSurfaceless(gl::Context*)
rx::DisplayGL::terminate()
rx::DisplayGL::~DisplayGL()
rx::DisplayGLX::DisplayGLX(egl::DisplayState const&)
rx::DisplayGLX::createContext(gl::State const&, gl::ErrorSet*, egl::Config const*, gl::Context const*, egl::AttributeMap const&)
rx::DisplayGLX::createContextAttribs(void*, Optional<gl::Version> const&, int, void**)
rx::DisplayGLX::createDevice()
rx::DisplayGLX::createPbufferFromClientBuffer(egl::SurfaceState const&, unsigned int, void*, egl::AttributeMap const&)
rx::DisplayGLX::createPbufferSurface(egl::SurfaceState const&, egl::AttributeMap const&)
rx::DisplayGLX::createPixmapSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayGLX::createWindowSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayGLX::createWorkerContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::DisplayGLX::generateCaps(egl::Caps*) const
rx::DisplayGLX::generateConfigs()
rx::DisplayGLX::generateExtensions(egl::DisplayExtensions*) const
rx::DisplayGLX::getMaxSupportedESVersion() const
rx::DisplayGLX::getVendorString() const
rx::DisplayGLX::initialize(egl::Display*)
rx::DisplayGLX::initializeContext(void*, egl::AttributeMap const&, void**)
rx::DisplayGLX::initializeFrontendFeatures(angle::FrontendFeatures*) const
rx::DisplayGLX::isCompatibleVisualId(unsigned long) const
rx::DisplayGLX::isValidNativeWindow(unsigned long) const
rx::DisplayGLX::isValidWindowVisualId(unsigned long) const
rx::DisplayGLX::makeCurrent(egl::Surface*, egl::Surface*, gl::Context*)
rx::DisplayGLX::makeCurrentSurfaceless(gl::Context*)
rx::DisplayGLX::populateFeatureList(std::__1::vector<angle::Feature const*, std::__1::allocator<angle::Feature const*> >*)
rx::DisplayGLX::restoreLostDevice(egl::Display const*)
rx::DisplayGLX::setSwapInterval(unsigned long, rx::SwapControlData*)
rx::DisplayGLX::syncXCommands() const
rx::DisplayGLX::terminate()
rx::DisplayGLX::testDeviceLost()
rx::DisplayGLX::validatePixmap(egl::Config*, unsigned long, egl::AttributeMap const&) const
rx::DisplayGLX::waitClient(gl::Context const*)
rx::DisplayGLX::waitNative(gl::Context const*, int)
rx::DisplayGLX::~DisplayGLX()
rx::DisplayImpl::DisplayImpl(egl::DisplayState const&)
rx::DisplayImpl::getCaps() const
rx::DisplayImpl::getExtensions() const
rx::DisplayImpl::handleGPUSwitch()
rx::DisplayImpl::initializeFrontendFeatures(angle::FrontendFeatures*) const
rx::DisplayImpl::setBlobCacheFuncs(void (*)(void const*, long, void const*, long), long (*)(void const*, long, void*, long))
rx::DisplayImpl::validateClientBuffer(egl::Config const*, unsigned int, void*, egl::AttributeMap const&) const
rx::DisplayImpl::validateImageClientBuffer(gl::Context const*, unsigned int, void*, egl::AttributeMap const&) const
rx::DisplayImpl::validatePixmap(egl::Config*, unsigned long, egl::AttributeMap const&) const
rx::DisplayImpl::~DisplayImpl()
rx::DisplayNULL::DisplayNULL(egl::DisplayState const&)
rx::DisplayNULL::createContext(gl::State const&, gl::ErrorSet*, egl::Config const*, gl::Context const*, egl::AttributeMap const&)
rx::DisplayNULL::createDevice()
rx::DisplayNULL::createImage(egl::ImageState const&, gl::Context const*, unsigned int, egl::AttributeMap const&)
rx::DisplayNULL::createPbufferFromClientBuffer(egl::SurfaceState const&, unsigned int, void*, egl::AttributeMap const&)
rx::DisplayNULL::createPbufferSurface(egl::SurfaceState const&, egl::AttributeMap const&)
rx::DisplayNULL::createPixmapSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayNULL::createShareGroup()
rx::DisplayNULL::createStreamProducerD3DTexture(egl::Stream::ConsumerType, egl::AttributeMap const&)
rx::DisplayNULL::createWindowSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayNULL::generateCaps(egl::Caps*) const
rx::DisplayNULL::generateConfigs()
rx::DisplayNULL::generateExtensions(egl::DisplayExtensions*) const
rx::DisplayNULL::getMaxConformantESVersion() const
rx::DisplayNULL::getMaxSupportedESVersion() const
rx::DisplayNULL::getVendorString() const
rx::DisplayNULL::initialize(egl::Display*)
rx::DisplayNULL::isValidNativeWindow(unsigned long) const
rx::DisplayNULL::makeCurrent(egl::Surface*, egl::Surface*, gl::Context*)
rx::DisplayNULL::populateFeatureList(std::__1::vector<angle::Feature const*, std::__1::allocator<angle::Feature const*> >*)
rx::DisplayNULL::restoreLostDevice(egl::Display const*)
rx::DisplayNULL::terminate()
rx::DisplayNULL::testDeviceLost()
rx::DisplayNULL::waitClient(gl::Context const*)
rx::DisplayNULL::waitNative(gl::Context const*, int)
rx::DisplayNULL::~DisplayNULL()
rx::DisplayVk::DisplayVk(egl::DisplayState const&)
rx::DisplayVk::createContext(gl::State const&, gl::ErrorSet*, egl::Config const*, gl::Context const*, egl::AttributeMap const&)
rx::DisplayVk::createDevice()
rx::DisplayVk::createImage(egl::ImageState const&, gl::Context const*, unsigned int, egl::AttributeMap const&)
rx::DisplayVk::createPbufferFromClientBuffer(egl::SurfaceState const&, unsigned int, void*, egl::AttributeMap const&)
rx::DisplayVk::createPbufferSurface(egl::SurfaceState const&, egl::AttributeMap const&)
rx::DisplayVk::createPixmapSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayVk::createShareGroup()
rx::DisplayVk::createStreamProducerD3DTexture(egl::Stream::ConsumerType, egl::AttributeMap const&)
rx::DisplayVk::createSync(egl::AttributeMap const&)
rx::DisplayVk::createWindowSurface(egl::SurfaceState const&, unsigned long, egl::AttributeMap const&)
rx::DisplayVk::generateCaps(egl::Caps*) const
rx::DisplayVk::generateExtensions(egl::DisplayExtensions*) const
rx::DisplayVk::getEGLError(int)
rx::DisplayVk::getMaxConformantESVersion() const
rx::DisplayVk::getMaxSupportedESVersion() const
rx::DisplayVk::getScratchBuffer(unsigned long, angle::MemoryBuffer**) const
rx::DisplayVk::getVendorString() const
rx::DisplayVk::getWSILayer() const
rx::DisplayVk::handleError(VkResult, char const*, char const*, unsigned int)
rx::DisplayVk::initialize(egl::Display*)
rx::DisplayVk::isRobustResourceInitEnabled() const
rx::DisplayVk::makeCurrent(egl::Surface*, egl::Surface*, gl::Context*)
rx::DisplayVk::populateFeatureList(std::__1::vector<angle::Feature const*, std::__1::allocator<angle::Feature const*> >*)
rx::DisplayVk::restoreLostDevice(egl::Display const*)
rx::DisplayVk::terminate()
rx::DisplayVk::testDeviceLost()
rx::DisplayVk::waitClient(gl::Context const*)
rx::DisplayVk::waitClient(gl::Context const*)::trace_event_unique_catstatic91
rx::DisplayVk::waitNative(gl::Context const*, int)
rx::DisplayVk::waitNative(gl::Context const*, int)::trace_event_unique_catstatic98
rx::DisplayVk::waitNativeImpl()
rx::DisplayVk::~DisplayVk()
rx::DisplayVkXcb::checkConfigSupport(egl::Config*)
rx::DisplayVkXcb::createWindowSurfaceVk(egl::SurfaceState const&, unsigned long)
rx::DisplayVkXcb::generateConfigs()
rx::DisplayVkXcb::generateConfigs()::kColorFormats
rx::DisplayVkXcb::getWSIExtension() const
rx::DisplayVkXcb::initialize(egl::Display*)
rx::DisplayVkXcb::isValidNativeWindow(unsigned long) const
rx::DisplayVkXcb::terminate()
rx::DisplayVkXcb::waitNativeImpl()
rx::DisplayVkXcb::~DisplayVkXcb()
rx::DmaBufImageSiblingEGL::DmaBufImageSiblingEGL(egl::AttributeMap const&)
rx::DmaBufImageSiblingEGL::getBuffer() const
rx::DmaBufImageSiblingEGL::getFormat() const
rx::DmaBufImageSiblingEGL::getImageCreationAttributes(std::__1::vector<int, std::__1::allocator<int> >*) const
rx::DmaBufImageSiblingEGL::getSamples() const
rx::DmaBufImageSiblingEGL::getSize() const
rx::DmaBufImageSiblingEGL::initialize(egl::Display const*)
rx::DmaBufImageSiblingEGL::isRenderable(gl::Context const*) const
rx::DmaBufImageSiblingEGL::isTexturable(gl::Context const*) const
rx::DmaBufImageSiblingEGL::~DmaBufImageSiblingEGL()
rx::DummyCheckFramebufferStatus(unsigned int)
rx::DummyGetProgramiv(unsigned int, unsigned int, int*)
rx::DummyGetShaderiv(unsigned int, unsigned int, int*)
rx::EGLImplFactory::createExternalImageSibling(gl::Context const*, unsigned int, void*, egl::AttributeMap const&)
rx::EGLImplFactory::createSync(egl::AttributeMap const&)
rx::EGLImplFactory::~EGLImplFactory()
rx::EGLSyncVk::EGLSyncVk(egl::AttributeMap const&)
rx::EGLSyncVk::clientWait(egl::Display const*, gl::Context const*, int, unsigned long, int*)
rx::EGLSyncVk::dupNativeFenceFD(egl::Display const*, int*) const
rx::EGLSyncVk::getStatus(egl::Display const*, int*)
rx::EGLSyncVk::initialize(egl::Display const*, gl::Context const*, unsigned int)
rx::EGLSyncVk::onDestroy(egl::Display const*)
rx::EGLSyncVk::serverWait(egl::Display const*, gl::Context const*, int)
rx::EGLSyncVk::~EGLSyncVk()
rx::ExternalImageSiblingImpl::onDestroy(egl::Display const*)
rx::FenceNVGL::FenceNVGL(rx::FunctionsGL const*)
rx::FenceNVGL::Supported(rx::FunctionsGL const*)
rx::FenceNVGL::finish(gl::Context const*)
rx::FenceNVGL::onDestroy(gl::Context const*)
rx::FenceNVGL::set(gl::Context const*, unsigned int)
rx::FenceNVGL::test(gl::Context const*, unsigned char*)
rx::FenceNVGL::~FenceNVGL()
rx::FenceNVNULL::FenceNVNULL()
rx::FenceNVNULL::finish(gl::Context const*)
rx::FenceNVNULL::onDestroy(gl::Context const*)
rx::FenceNVNULL::set(gl::Context const*, unsigned int)
rx::FenceNVNULL::test(gl::Context const*, unsigned char*)
rx::FenceNVNULL::~FenceNVNULL()
rx::FenceNVSyncGL::FenceNVSyncGL(rx::FunctionsGL const*)
rx::FenceNVSyncGL::Supported(rx::FunctionsGL const*)
rx::FenceNVSyncGL::finish(gl::Context const*)
rx::FenceNVSyncGL::onDestroy(gl::Context const*)
rx::FenceNVSyncGL::set(gl::Context const*, unsigned int)
rx::FenceNVSyncGL::test(gl::Context const*, unsigned char*)
rx::FenceNVSyncGL::~FenceNVSyncGL()
rx::FenceNVVk::FenceNVVk()
rx::FenceNVVk::finish(gl::Context const*)
rx::FenceNVVk::onDestroy(gl::Context const*)
rx::FenceNVVk::set(gl::Context const*, unsigned int)
rx::FenceNVVk::test(gl::Context const*, unsigned char*)
rx::FenceNVVk::~FenceNVVk()
rx::FramebufferAttachmentObjectImpl::getAttachmentRenderTarget(gl::Context const*, unsigned int, gl::ImageIndex const&, int, rx::FramebufferAttachmentRenderTarget**)
rx::FramebufferAttachmentObjectImpl::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::FramebufferGL::FramebufferGL(gl::FramebufferState const&, unsigned int, bool, bool)
rx::FramebufferGL::adjustSrcDstRegion(gl::Context const*, gl::Rectangle const&, gl::Rectangle const&, gl::Rectangle*, gl::Rectangle*)
rx::FramebufferGL::blit(gl::Context const*, gl::Rectangle const&, gl::Rectangle const&, unsigned int, unsigned int)
rx::FramebufferGL::checkStatus(gl::Context const*) const
rx::FramebufferGL::clear(gl::Context const*, unsigned int)
rx::FramebufferGL::clearBufferfi(gl::Context const*, unsigned int, int, float, int)
rx::FramebufferGL::clearBufferfv(gl::Context const*, unsigned int, int, float const*)
rx::FramebufferGL::clearBufferiv(gl::Context const*, unsigned int, int, int const*)
rx::FramebufferGL::clearBufferuiv(gl::Context const*, unsigned int, int, unsigned int const*)
rx::FramebufferGL::clipSrcRegion(gl::Context const*, gl::Rectangle const&, gl::Rectangle const&, gl::Rectangle*, gl::Rectangle*)
rx::FramebufferGL::destroy(gl::Context const*)
rx::FramebufferGL::discard(gl::Context const*, unsigned long, unsigned int const*)
rx::FramebufferGL::getFramebufferID() const
rx::FramebufferGL::getSamplePosition(gl::Context const*, unsigned long, float*) const
rx::FramebufferGL::hasEmulatedAlphaChannelTextureAttachment() const
rx::FramebufferGL::invalidate(gl::Context const*, unsigned long, unsigned int const*)
rx::FramebufferGL::invalidateSub(gl::Context const*, unsigned long, unsigned int const*, gl::Rectangle const&)
rx::FramebufferGL::isDefault() const
rx::FramebufferGL::readPixels(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, void*)
rx::FramebufferGL::readPixelsAllAtOnce(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, unsigned int, gl::PixelPackState const&, unsigned char*, bool) const
rx::FramebufferGL::readPixelsRowByRow(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, unsigned int, gl::PixelPackState const&, unsigned char*) const
rx::FramebufferGL::shouldSyncStateBeforeCheckStatus() const
rx::FramebufferGL::syncClearBufferState(gl::Context const*, unsigned int, int)
rx::FramebufferGL::syncClearState(gl::Context const*, unsigned int)
rx::FramebufferGL::syncState(gl::Context const*, unsigned int, angle::BitSetT<31ul, unsigned long, unsigned long> const&)
rx::FramebufferGL::~FramebufferGL()
rx::FramebufferImpl::destroy(gl::Context const*)
rx::FramebufferImpl::getImplementationColorReadFormat(gl::Context const*) const
rx::FramebufferImpl::shouldSyncStateBeforeCheckStatus() const
rx::FramebufferNULL::FramebufferNULL(gl::FramebufferState const&)
rx::FramebufferNULL::blit(gl::Context const*, gl::Rectangle const&, gl::Rectangle const&, unsigned int, unsigned int)
rx::FramebufferNULL::checkStatus(gl::Context const*) const
rx::FramebufferNULL::clear(gl::Context const*, unsigned int)
rx::FramebufferNULL::clearBufferfi(gl::Context const*, unsigned int, int, float, int)
rx::FramebufferNULL::clearBufferfv(gl::Context const*, unsigned int, int, float const*)
rx::FramebufferNULL::clearBufferiv(gl::Context const*, unsigned int, int, int const*)
rx::FramebufferNULL::clearBufferuiv(gl::Context const*, unsigned int, int, unsigned int const*)
rx::FramebufferNULL::discard(gl::Context const*, unsigned long, unsigned int const*)
rx::FramebufferNULL::getSamplePosition(gl::Context const*, unsigned long, float*) const
rx::FramebufferNULL::invalidate(gl::Context const*, unsigned long, unsigned int const*)
rx::FramebufferNULL::invalidateSub(gl::Context const*, unsigned long, unsigned int const*, gl::Rectangle const&)
rx::FramebufferNULL::readPixels(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, void*)
rx::FramebufferNULL::syncState(gl::Context const*, unsigned int, angle::BitSetT<31ul, unsigned long, unsigned long> const&)
rx::FramebufferNULL::~FramebufferNULL()
rx::FramebufferVk::CreateDefaultFBO(rx::RendererVk*, gl::FramebufferState const&, rx::WindowSurfaceVk*)
rx::FramebufferVk::CreateUserFBO(rx::RendererVk*, gl::FramebufferState const&)
rx::FramebufferVk::blit(gl::Context const*, gl::Rectangle const&, gl::Rectangle const&, unsigned int, unsigned int)
rx::FramebufferVk::blitWithCommand(rx::ContextVk*, gl::Rectangle const&, gl::Rectangle const&, rx::RenderTargetVk*, rx::RenderTargetVk*, unsigned int, bool, bool, bool, bool, bool)
rx::FramebufferVk::checkStatus(gl::Context const*) const
rx::FramebufferVk::clear(gl::Context const*, unsigned int)
rx::FramebufferVk::clear(gl::Context const*, unsigned int)::trace_event_unique_catstatic243
rx::FramebufferVk::clearBufferfi(gl::Context const*, unsigned int, int, float, int)
rx::FramebufferVk::clearBufferfv(gl::Context const*, unsigned int, int, float const*)
rx::FramebufferVk::clearBufferiv(gl::Context const*, unsigned int, int, int const*)
rx::FramebufferVk::clearBufferuiv(gl::Context const*, unsigned int, int, unsigned int const*)
rx::FramebufferVk::clearCache(rx::ContextVk*)
rx::FramebufferVk::clearImmediatelyWithRenderPassOp(rx::ContextVk*, gl::Rectangle const&, angle::BitSetT<8ul, unsigned long, unsigned long>, bool, bool, VkClearColorValue const&, VkClearDepthStencilValue const&)
rx::FramebufferVk::clearImpl(gl::Context const*, angle::BitSetT<8ul, unsigned long, unsigned long>, bool, bool, VkClearColorValue const&, VkClearDepthStencilValue const&)
rx::FramebufferVk::clearWithDraw(rx::ContextVk*, gl::Rectangle const&, angle::BitSetT<8ul, unsigned long, unsigned long>, bool, bool, unsigned int, unsigned char, VkClearColorValue const&, VkClearDepthStencilValue const&)
rx::FramebufferVk::clearWithRenderPassOp(angle::BitSetT<8ul, unsigned long, unsigned long>, bool, bool, VkClearColorValue const&, VkClearDepthStencilValue const&)
rx::FramebufferVk::destroy(gl::Context const*)
rx::FramebufferVk::discard(gl::Context const*, unsigned long, unsigned int const*)
rx::FramebufferVk::getColorDrawRenderTarget(unsigned long) const
rx::FramebufferVk::getColorReadRenderTarget() const
rx::FramebufferVk::getCompleteRenderArea() const
rx::FramebufferVk::getDepthStencilRenderTarget() const
rx::FramebufferVk::getEmulatedAlphaAttachmentMask() const
rx::FramebufferVk::getFramebuffer(rx::ContextVk*, rx::vk::Framebuffer**)
rx::FramebufferVk::getImplementationColorReadFormat(gl::Context const*) const
rx::FramebufferVk::getReadImageExtents() const
rx::FramebufferVk::getSamplePosition(gl::Context const*, unsigned long, float*) const
rx::FramebufferVk::getSamples() const
rx::FramebufferVk::getScissoredRenderArea(rx::ContextVk*) const
rx::FramebufferVk::invalidate(gl::Context const*, unsigned long, unsigned int const*)
rx::FramebufferVk::invalidateSub(gl::Context const*, unsigned long, unsigned int const*, gl::Rectangle const&)
rx::FramebufferVk::readPixels(gl::Context const*, gl::Rectangle const&, unsigned int, unsigned int, void*)
rx::FramebufferVk::readPixelsImpl(rx::ContextVk*, gl::Rectangle const&, rx::PackPixelsParams const&, VkImageAspectFlagBits, rx::RenderTargetVk*, void*)
rx::FramebufferVk::readPixelsImpl(rx::ContextVk*, gl::Rectangle const&, rx::PackPixelsParams const&, VkImageAspectFlagBits, rx::RenderTargetVk*, void*)::trace_event_unique_catstatic1871
rx::FramebufferVk::resolveColorWithCommand(rx::ContextVk*, rx::UtilsVk::BlitResolveParameters const&, rx::vk::ImageHelper*)
rx::FramebufferVk::startNewRenderPass(rx::ContextVk*, gl::Rectangle const&, rx::vk::priv::SecondaryCommandBuffer**)
rx::FramebufferVk::syncState(gl::Context const*, unsigned int, angle::BitSetT<31ul, unsigned long, unsigned long> const&)
rx::FramebufferVk::updateColorAttachment(gl::Context const*, bool, unsigned int)
rx::FramebufferVk::updateDepthStencilAttachment(gl::Context const*, bool)
rx::FramebufferVk::updateRenderPassDesc()
rx::FramebufferVk::~FramebufferVk()
rx::FunctionsEGL::FunctionsEGL()
rx::FunctionsEGL::bindTexImage(void*, int) const
rx::FunctionsEGL::chooseConfig(int const*, void**, int, int*) const
rx::FunctionsEGL::clientWaitSyncKHR(void*, int, unsigned long) const
rx::FunctionsEGL::createContext(void*, void*, int const*) const
rx::FunctionsEGL::createImageKHR(void*, unsigned int, void*, int const*) const
rx::FunctionsEGL::createPbufferSurface(void*, int const*) const
rx::FunctionsEGL::createSyncKHR(unsigned int, int const*) const
rx::FunctionsEGL::createWindowSurface(void*, unsigned long, int const*) const
rx::FunctionsEGL::destroyContext(void*) const
rx::FunctionsEGL::destroyImageKHR(void*) const
rx::FunctionsEGL::destroySurface(void*) const
rx::FunctionsEGL::destroySyncKHR(void*) const
rx::FunctionsEGL::dupNativeFenceFDANDROID(void*) const
rx::FunctionsEGL::getCompositorTimingANDROID(void*, int, int const*, long*) const
rx::FunctionsEGL::getCompositorTimingSupportedANDROID(void*, int) const
rx::FunctionsEGL::getConfigAttrib(void*, int, int*) const
rx::FunctionsEGL::getError() const
rx::FunctionsEGL::getFrameTimestampSupportedANDROID(void*, int) const
rx::FunctionsEGL::getFrameTimestampsANDROID(void*, unsigned long, int, int const*, long*) const
rx::FunctionsEGL::getNextFrameIdANDROID(void*, unsigned long*) const
rx::FunctionsEGL::getSyncAttribKHR(void*, int, int*) const
rx::FunctionsEGL::hasExtension(char const*) const
rx::FunctionsEGL::initialize(_XDisplay*)
rx::FunctionsEGL::makeCurrent(void*, void*) const
rx::FunctionsEGL::makeFunctionsGL() const
rx::FunctionsEGL::presentationTimeANDROID(void*, long) const
rx::FunctionsEGL::queryString(int) const
rx::FunctionsEGL::querySurface(void*, int, int*) const
rx::FunctionsEGL::releaseTexImage(void*, int) const
rx::FunctionsEGL::setBlobCacheFuncsANDROID(void (*)(void const*, long, void const*, long), long (*)(void const*, long, void*, long)) const
rx::FunctionsEGL::surfaceAttrib(void*, int, int) const
rx::FunctionsEGL::swapBuffers(void*) const
rx::FunctionsEGL::swapBuffersWithDamageKHR(void*, int*, int) const
rx::FunctionsEGL::swapInterval(int) const
rx::FunctionsEGL::terminate()
rx::FunctionsEGL::waitSyncKHR(void*, int) const
rx::FunctionsEGL::~FunctionsEGL()
rx::FunctionsEGLDL::FunctionsEGLDL()
rx::FunctionsEGLDL::getProcAddress(char const*) const
rx::FunctionsEGLDL::initialize(_XDisplay*, char const*, void*)
rx::FunctionsEGLDL::~FunctionsEGLDL()
rx::FunctionsGL::FunctionsGL()
rx::FunctionsGL::hasExtension(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
rx::FunctionsGL::hasGLESExtension(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
rx::FunctionsGL::hasGLExtension(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
rx::FunctionsGL::initialize(egl::AttributeMap const&)
rx::FunctionsGL::initializeDummyFunctionsForNULLDriver(std::__1::set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
rx::FunctionsGL::isAtLeastGL(gl::Version const&) const
rx::FunctionsGL::isAtLeastGLES(gl::Version const&) const
rx::FunctionsGL::isAtMostGL(gl::Version const&) const
rx::FunctionsGL::~FunctionsGL()
rx::FunctionsGLEGL::loadProcAddress(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
rx::FunctionsGLEGL::~FunctionsGLEGL()
rx::FunctionsGLGLX::loadProcAddress(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
rx::FunctionsGLGLX::~FunctionsGLGLX()
rx::FunctionsGLX::FunctionsGLX()
rx::FunctionsGLX::bindTexImageEXT(unsigned long, int, int const*) const
rx::FunctionsGLX::chooseFBConfig(int const*, int*) const
rx::FunctionsGLX::createContext(XVisualInfo*, void*, bool) const
rx::FunctionsGLX::createContextAttribsARB(void*, void*, int, int const*) const
rx::FunctionsGLX::createPbuffer(void*, int const*) const
rx::FunctionsGLX::createPixmap(void*, unsigned long, int const*) const
rx::FunctionsGLX::createWindow(void*, unsigned long, int const*) const
rx::FunctionsGLX::destroyContext(void*) const
rx::FunctionsGLX::destroyPbuffer(unsigned long) const
rx::FunctionsGLX::destroyPixmap(unsigned long) const
rx::FunctionsGLX::destroyWindow(unsigned long) const
rx::FunctionsGLX::getClientString(int) const
rx::FunctionsGLX::getDisplay() const
rx::FunctionsGLX::getFBConfigAttrib(void*, int, int*) const
rx::FunctionsGLX::getMscRateOML(unsigned long, int*, int*) const
rx::FunctionsGLX::getSyncValuesOML(unsigned long, long*, long*, long*) const
rx::FunctionsGLX::getVisualFromFBConfig(void*) const
rx::FunctionsGLX::hasExtension(char const*) const
rx::FunctionsGLX::initialize(_XDisplay*, int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::FunctionsGLX::makeCurrent(unsigned long, void*) const
rx::FunctionsGLX::queryDrawable(unsigned long, int, unsigned int*) const
rx::FunctionsGLX::releaseTexImageEXT(unsigned long, int) const
rx::FunctionsGLX::sLibHandle
rx::FunctionsGLX::swapBuffers(unsigned long) const
rx::FunctionsGLX::swapIntervalEXT(unsigned long, int) const
rx::FunctionsGLX::swapIntervalMESA(int) const
rx::FunctionsGLX::swapIntervalSGI(int) const
rx::FunctionsGLX::terminate()
rx::FunctionsGLX::waitGL() const
rx::FunctionsGLX::waitX() const
rx::FunctionsGLX::~FunctionsGLX()
rx::GenerateContextCreationToTry(int, bool)
rx::GetAndroidSDKVersion()
rx::GetAvailableValidationLayers(std::__1::vector<VkLayerProperties, std::__1::allocator<VkLayerProperties> > const&, bool, angle::FixedVector<char const*, 20ul, std::__1::array<char const*, 20ul> >*)
rx::GetBlitGL(gl::Context const*)
rx::GetDeviceID(rx::FunctionsGL const*)
rx::GetDeviceID(rx::FunctionsGL const*)::kKnownDeviceIDs
rx::GetFeaturesGL(gl::Context const*)
rx::GetFormatFromFormatType(unsigned int, unsigned int)
rx::GetFormatSwizzle(rx::ContextVk const*, rx::vk::Format const&, bool)
rx::GetFunctionsGL(gl::Context const*)
rx::GetImageNameWithoutIndices(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::GetLinuxOSVersion()
rx::GetMappedSamplerNameOld(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::GetMatrixUniform(unsigned int, float*, float const*, bool)
rx::GetMultiviewClearer(gl::Context const*)
rx::GetSamplePosition(int, unsigned long, float*)
rx::GetStateManagerGL(gl::Context const*)
rx::GetVendorID(rx::FunctionsGL const*)
rx::GetVendorString(unsigned int)
rx::GetVertexRangeInfo(gl::Context const*, int, int, gl::DrawElementsType, void const*, int, int*, unsigned long*)
rx::GetXfbBufferName(unsigned int)
rx::GlslangAssignLocations(rx::GlslangSourceOptions&, gl::ProgramExecutable const&, gl::ShaderType, rx::GlslangProgramInterfaceInfo*, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul>*)
rx::GlslangGetMappedSamplerName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::GlslangGetShaderSource(rx::GlslangSourceOptions&, gl::ProgramState const&, gl::ProgramLinkedResources const&, rx::GlslangProgramInterfaceInfo*, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul>*, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul>*)
rx::GlslangGetShaderSpirvCode(std::__1::function<angle::Result (rx::GlslangError)> const&, angle::BitSetT<4ul, unsigned char, gl::ShaderType> const&, gl::Caps const&, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, 4ul>*)
rx::GlslangInitialize()
rx::GlslangRelease()
rx::GlslangTransformSpirvCode(std::__1::function<angle::Result (rx::GlslangError)> const&, gl::ShaderType, bool, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*)
rx::GlslangWrapperVk::CreateSourceOptions(angle::FeaturesVk const&)
rx::GlslangWrapperVk::GetShaderCode(rx::vk::Context*, angle::BitSetT<4ul, unsigned char, gl::ShaderType> const&, gl::Caps const&, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, 4ul>*)
rx::GlslangWrapperVk::GetShaderSource(angle::FeaturesVk const&, gl::ProgramState const&, gl::ProgramLinkedResources const&, rx::GlslangProgramInterfaceInfo*, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul>*, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul>*)
rx::GlslangWrapperVk::ResetGlslangProgramInterfaceInfo(rx::GlslangProgramInterfaceInfo*)
rx::GlslangWrapperVk::TransformSpirV(rx::vk::Context*, gl::ShaderType, bool, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*)
rx::GraphicsPipelineCache::GraphicsPipelineCache()
rx::GraphicsPipelineCache::destroy(VkDevice_T*)
rx::GraphicsPipelineCache::insertPipeline(rx::ContextVk*, rx::vk::PipelineCache const&, rx::vk::RenderPass const&, rx::vk::PipelineLayout const&, angle::BitSetT<16ul, unsigned long, unsigned long> const&, angle::BitSetT<32ul, unsigned long, unsigned long> const&, rx::vk::ShaderModule const*, rx::vk::ShaderModule const*, rx::vk::ShaderModule const*, angle::BitSetT<1ul, unsigned int, sh::vk::SpecializationConstantId>, rx::vk::GraphicsPipelineDesc const&, rx::vk::GraphicsPipelineDesc const**, rx::vk::PipelineHelper**)
rx::GraphicsPipelineCache::release(rx::ContextVk*)
rx::GraphicsPipelineCache::~GraphicsPipelineCache()
rx::HasFullTextureFormatSupport(rx::RendererVk*, VkFormat)
rx::HasNonFilterableTextureFormatSupport(rx::RendererVk*, VkFormat)
rx::HasNonRenderableTextureFormatSupport(rx::RendererVk*, VkFormat)
rx::IgnoreX11Errors(_XDisplay*, XErrorEvent*)
rx::ImageEGL::ImageEGL(egl::ImageState const&, gl::Context const*, unsigned int, egl::AttributeMap const&, rx::FunctionsEGL const*)
rx::ImageEGL::initialize(egl::Display const*)
rx::ImageEGL::orphan(gl::Context const*, egl::ImageSibling*)
rx::ImageEGL::setRenderbufferStorage(gl::Context const*, rx::RenderbufferGL*, unsigned int*)
rx::ImageEGL::setTexture2D(gl::Context const*, gl::TextureType, rx::TextureGL*, unsigned int*)
rx::ImageEGL::~ImageEGL()
rx::ImageGL::ImageGL(egl::ImageState const&)
rx::ImageGL::~ImageGL()
rx::ImageImpl::onDestroy(egl::Display const*)
rx::ImageNULL::ImageNULL(egl::ImageState const&)
rx::ImageNULL::initialize(egl::Display const*)
rx::ImageNULL::orphan(gl::Context const*, egl::ImageSibling*)
rx::ImageNULL::~ImageNULL()
rx::ImageVk::ImageVk(egl::ImageState const&, gl::Context const*)
rx::ImageVk::initialize(egl::Display const*)
rx::ImageVk::onDestroy(egl::Display const*)
rx::ImageVk::orphan(gl::Context const*, egl::ImageSibling*)
rx::ImageVk::~ImageVk()
rx::IncompleteTextureSet::IncompleteTextureSet()
rx::IncompleteTextureSet::getIncompleteTexture(gl::Context const*, gl::TextureType, rx::MultisampleTextureInitializer*, gl::Texture**)
rx::IncompleteTextureSet::getIncompleteTexture(gl::Context const*, gl::TextureType, rx::MultisampleTextureInitializer*, gl::Texture**)::color
rx::IncompleteTextureSet::onDestroy(gl::Context const*)
rx::IncompleteTextureSet::~IncompleteTextureSet()
rx::IsMesa(rx::FunctionsGL const*, std::__1::array<int, 3ul>*)
rx::IsVulkanXcbDisplayAvailable()
rx::LinkEvent::~LinkEvent()
rx::LinkEventDone::isLinking()
rx::LinkEventDone::wait(gl::Context const*)
rx::LinkEventDone::~LinkEventDone()
rx::MapBufferRangeWithFallback(rx::FunctionsGL const*, unsigned int, unsigned long, unsigned long, unsigned int)
rx::MemoryObjectGL::MemoryObjectGL(unsigned int)
rx::MemoryObjectGL::getMemoryObjectID() const
rx::MemoryObjectGL::importFd(gl::Context*, unsigned long, gl::HandleType, int)
rx::MemoryObjectGL::importZirconHandle(gl::Context*, unsigned long, gl::HandleType, unsigned int)
rx::MemoryObjectGL::onDestroy(gl::Context const*)
rx::MemoryObjectGL::setDedicatedMemory(gl::Context const*, bool)
rx::MemoryObjectGL::~MemoryObjectGL()
rx::MemoryObjectVk::MemoryObjectVk()
rx::MemoryObjectVk::createImage(rx::ContextVk*, gl::TextureType, unsigned long, unsigned int, gl::Extents const&, unsigned long, rx::vk::ImageHelper*)
rx::MemoryObjectVk::importFd(gl::Context*, unsigned long, gl::HandleType, int)
rx::MemoryObjectVk::importZirconHandle(gl::Context*, unsigned long, gl::HandleType, unsigned int)
rx::MemoryObjectVk::onDestroy(gl::Context const*)
rx::MemoryObjectVk::setDedicatedMemory(gl::Context const*, bool)
rx::MemoryObjectVk::~MemoryObjectVk()
rx::OSVersion::OSVersion(int, int, int)
rx::OffscreenSurfaceVk::OffscreenSurfaceVk(egl::SurfaceState const&)
rx::OffscreenSurfaceVk::bindTexImage(gl::Context const*, gl::Texture*, int)
rx::OffscreenSurfaceVk::createDefaultFramebuffer(gl::Context const*, gl::FramebufferState const&)
rx::OffscreenSurfaceVk::destroy(egl::Display const*)
rx::OffscreenSurfaceVk::getColorAttachmentImage()
rx::OffscreenSurfaceVk::getHeight() const
rx::OffscreenSurfaceVk::getMscRate(int*, int*)
rx::OffscreenSurfaceVk::getSwapBehavior() const
rx::OffscreenSurfaceVk::getSyncValues(unsigned long*, unsigned long*, unsigned long*)
rx::OffscreenSurfaceVk::getWidth() const
rx::OffscreenSurfaceVk::initialize(egl::Display const*)
rx::OffscreenSurfaceVk::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::OffscreenSurfaceVk::initializeImpl(rx::DisplayVk*)
rx::OffscreenSurfaceVk::isPostSubBufferSupported() const
rx::OffscreenSurfaceVk::postSubBuffer(gl::Context const*, int, int, int, int)
rx::OffscreenSurfaceVk::querySurfacePointerANGLE(int, void**)
rx::OffscreenSurfaceVk::releaseTexImage(gl::Context const*, int)
rx::OffscreenSurfaceVk::setSwapInterval(int)
rx::OffscreenSurfaceVk::swap(gl::Context const*)
rx::OffscreenSurfaceVk::~OffscreenSurfaceVk()
rx::OverlayImpl::init(gl::Context const*)
rx::OverlayImpl::onDestroy(gl::Context const*)
rx::OverlayImpl::~OverlayImpl()
rx::OverlayVk::OverlayVk(gl::OverlayState const&)
rx::OverlayVk::createFont(rx::ContextVk*)
rx::OverlayVk::init(gl::Context const*)
rx::OverlayVk::onDestroy(gl::Context const*)
rx::OverlayVk::~OverlayVk()
rx::PackPixels(rx::PackPixelsParams const&, angle::Format const&, int, unsigned char const*, unsigned char*)
rx::PackPixelsParams::PackPixelsParams()
rx::PackPixelsParams::PackPixelsParams(gl::Rectangle const&, angle::Format const&, unsigned int, bool, gl::Buffer*, long)
rx::ParseLinuxOSVersion(char const*, int*, int*, int*)
rx::PbufferSurfaceEGL::PbufferSurfaceEGL(egl::SurfaceState const&, rx::FunctionsEGL const*, void*)
rx::PbufferSurfaceEGL::initialize(egl::Display const*)
rx::PbufferSurfaceEGL::initialize(egl::Display const*)::kForwardedPBufferSurfaceAttributes
rx::PbufferSurfaceEGL::~PbufferSurfaceEGL()
rx::PbufferSurfaceGLX::PbufferSurfaceGLX(egl::SurfaceState const&, int, int, bool, rx::FunctionsGLX const&, void*)
rx::PbufferSurfaceGLX::bindTexImage(gl::Context const*, gl::Texture*, int)
rx::PbufferSurfaceGLX::checkForResize()
rx::PbufferSurfaceGLX::getDrawable() const
rx::PbufferSurfaceGLX::getHeight() const
rx::PbufferSurfaceGLX::getSwapBehavior() const
rx::PbufferSurfaceGLX::getWidth() const
rx::PbufferSurfaceGLX::initialize(egl::Display const*)
rx::PbufferSurfaceGLX::isPostSubBufferSupported() const
rx::PbufferSurfaceGLX::makeCurrent(gl::Context const*)
rx::PbufferSurfaceGLX::postSubBuffer(gl::Context const*, int, int, int, int)
rx::PbufferSurfaceGLX::querySurfacePointerANGLE(int, void**)
rx::PbufferSurfaceGLX::releaseTexImage(gl::Context const*, int)
rx::PbufferSurfaceGLX::setSwapInterval(int)
rx::PbufferSurfaceGLX::swap(gl::Context const*)
rx::PbufferSurfaceGLX::~PbufferSurfaceGLX()
rx::PipelineLayoutCache::PipelineLayoutCache()
rx::PipelineLayoutCache::destroy(VkDevice_T*)
rx::PipelineLayoutCache::getPipelineLayout(rx::vk::Context*, rx::vk::PipelineLayoutDesc const&, std::__1::array<rx::vk::BindingPointer<rx::vk::DescriptorSetLayout>, 4ul> const&, rx::vk::BindingPointer<rx::vk::PipelineLayout>*)
rx::PipelineLayoutCache::~PipelineLayoutCache()
rx::PixmapSurfaceGLX::PixmapSurfaceGLX(egl::SurfaceState const&, unsigned long, _XDisplay*, rx::FunctionsGLX const&, void*)
rx::PixmapSurfaceGLX::bindTexImage(gl::Context const*, gl::Texture*, int)
rx::PixmapSurfaceGLX::bindTexImage(gl::Context const*, gl::Texture*, int)::attribs
rx::PixmapSurfaceGLX::checkForResize()
rx::PixmapSurfaceGLX::getDrawable() const
rx::PixmapSurfaceGLX::getHeight() const
rx::PixmapSurfaceGLX::getSwapBehavior() const
rx::PixmapSurfaceGLX::getWidth() const
rx::PixmapSurfaceGLX::initialize(egl::Display const*)
rx::PixmapSurfaceGLX::isPostSubBufferSupported() const
rx::PixmapSurfaceGLX::makeCurrent(gl::Context const*)
rx::PixmapSurfaceGLX::postSubBuffer(gl::Context const*, int, int, int, int)
rx::PixmapSurfaceGLX::querySurfacePointerANGLE(int, void**)
rx::PixmapSurfaceGLX::releaseTexImage(gl::Context const*, int)
rx::PixmapSurfaceGLX::setSwapInterval(int)
rx::PixmapSurfaceGLX::swap(gl::Context const*)
rx::PixmapSurfaceGLX::~PixmapSurfaceGLX()
rx::ProgramExecutableVk::ProgramExecutableVk()
rx::ProgramExecutableVk::addAtomicCounterBufferDescriptorSetDesc(std::__1::vector<gl::ShaderVariableBuffer, std::__1::allocator<gl::ShaderVariableBuffer> > const&, gl::ShaderType, rx::vk::DescriptorSetLayoutDesc*)
rx::ProgramExecutableVk::addImageDescriptorSetDesc(gl::ProgramExecutable const&, rx::vk::DescriptorSetLayoutDesc*)
rx::ProgramExecutableVk::addInterfaceBlockDescriptorSetDesc(std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> > const&, gl::ShaderType, VkDescriptorType, rx::vk::DescriptorSetLayoutDesc*)
rx::ProgramExecutableVk::addTextureDescriptorSetDesc(gl::ProgramState const&, bool, rx::vk::DescriptorSetLayoutDesc*)
rx::ProgramExecutableVk::allocateDescriptorSet(rx::ContextVk*, unsigned int)
rx::ProgramExecutableVk::clearVariableInfoMap()
rx::ProgramExecutableVk::createPipelineLayout(gl::Context const*)
rx::ProgramExecutableVk::getComputePipeline(rx::ContextVk*, rx::vk::ObjectAndSerial<rx::vk::Pipeline>**)
rx::ProgramExecutableVk::getGraphicsPipeline(rx::ContextVk*, gl::PrimitiveMode, rx::vk::GraphicsPipelineDesc const&, angle::BitSetT<16ul, unsigned long, unsigned long> const&, rx::vk::GraphicsPipelineDesc const**, rx::vk::PipelineHelper**)
rx::ProgramExecutableVk::load(gl::BinaryInputStream*)
rx::ProgramExecutableVk::reset(rx::ContextVk*)
rx::ProgramExecutableVk::save(gl::BinaryOutputStream*)
rx::ProgramExecutableVk::updateAtomicCounterBuffersDescriptorSet(gl::ProgramState const&, gl::ShaderType, rx::ContextVk*, rx::vk::ResourceUseList*, rx::vk::CommandBufferHelper*)
rx::ProgramExecutableVk::updateBuffersDescriptorSet(rx::ContextVk*, gl::ShaderType, rx::vk::ResourceUseList*, rx::vk::CommandBufferHelper*, std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> > const&, VkDescriptorType)
rx::ProgramExecutableVk::updateDefaultUniformsDescriptorSet(gl::ShaderType, angle::PackedEnumMap<gl::ShaderType, rx::DefaultUniformBlock, 4ul>&, rx::ContextVk*)
rx::ProgramExecutableVk::updateDescriptorSets(rx::ContextVk*, rx::vk::priv::SecondaryCommandBuffer*)
rx::ProgramExecutableVk::updateEarlyFragmentTestsOptimization(rx::ContextVk*)
rx::ProgramExecutableVk::updateImagesDescriptorSet(gl::ProgramExecutable const&, gl::ShaderType, rx::ContextVk*)
rx::ProgramExecutableVk::updateShaderResourcesDescriptorSet(rx::ContextVk*, rx::vk::ResourceUseList*, rx::vk::CommandBufferHelper*)
rx::ProgramExecutableVk::updateTexturesDescriptorSet(rx::ContextVk*)
rx::ProgramExecutableVk::updateTransformFeedbackDescriptorSet(gl::ProgramState const&, angle::PackedEnumMap<gl::ShaderType, rx::DefaultUniformBlock, 4ul>&, rx::ContextVk*)
rx::ProgramExecutableVk::updateTransformFeedbackDescriptorSetImpl(gl::ProgramState const&, rx::ContextVk*)
rx::ProgramExecutableVk::~ProgramExecutableVk()
rx::ProgramGL::LinkEventGL::LinkEventGL(std::__1::shared_ptr<angle::WorkerThreadPool>, std::__1::shared_ptr<rx::ProgramGL::LinkTask>, std::__1::function<angle::Result (bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>&&)
rx::ProgramGL::LinkEventGL::isLinking()
rx::ProgramGL::LinkEventGL::wait(gl::Context const*)
rx::ProgramGL::LinkEventGL::wait(gl::Context const*)::trace_event_unique_catstatic208
rx::ProgramGL::LinkEventGL::~LinkEventGL()
rx::ProgramGL::LinkEventNativeParallel::isLinking()
rx::ProgramGL::LinkEventNativeParallel::wait(gl::Context const*)
rx::ProgramGL::LinkEventNativeParallel::wait(gl::Context const*)::trace_event_unique_catstatic169
rx::ProgramGL::LinkEventNativeParallel::~LinkEventNativeParallel()
rx::ProgramGL::LinkTask::operator()()
rx::ProgramGL::LinkTask::operator()()::trace_event_unique_catstatic142
rx::ProgramGL::LinkTask::~LinkTask()
rx::ProgramGL::ProgramGL(gl::ProgramState const&, rx::FunctionsGL const*, angle::FeaturesGL const&, rx::StateManagerGL*, std::__1::shared_ptr<rx::RendererGL> const&)
rx::ProgramGL::checkLinkStatus(gl::InfoLog&)
rx::ProgramGL::enableLayeredRenderingPath(int) const
rx::ProgramGL::getAtomicCounterBufferSizeMap(std::__1::map<int, unsigned int, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, unsigned int> > >*) const
rx::ProgramGL::getUniformBlockMemberInfo(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*) const
rx::ProgramGL::getUniformfv(gl::Context const*, int, float*) const
rx::ProgramGL::getUniformiv(gl::Context const*, int, int*) const
rx::ProgramGL::getUniformuiv(gl::Context const*, int, unsigned int*) const
rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)
rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::$_1::operator()(bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::trace_event_unique_catstatic226
rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)
rx::ProgramGL::load(gl::Context const*, gl::BinaryInputStream*, gl::InfoLog&)
rx::ProgramGL::load(gl::Context const*, gl::BinaryInputStream*, gl::InfoLog&)::trace_event_unique_catstatic63
rx::ProgramGL::markUnusedUniformLocations(std::__1::vector<gl::VariableLocation, std::__1::allocator<gl::VariableLocation> >*, std::__1::vector<gl::SamplerBinding, std::__1::allocator<gl::SamplerBinding> >*, std::__1::vector<gl::ImageBinding, std::__1::allocator<gl::ImageBinding> >*)
rx::ProgramGL::postLink()
rx::ProgramGL::save(gl::Context const*, gl::BinaryOutputStream*)
rx::ProgramGL::setBinaryRetrievableHint(bool)
rx::ProgramGL::setSeparable(bool)
rx::ProgramGL::setUniform1fv(int, int, float const*)
rx::ProgramGL::setUniform1iv(int, int, int const*)
rx::ProgramGL::setUniform1uiv(int, int, unsigned int const*)
rx::ProgramGL::setUniform2fv(int, int, float const*)
rx::ProgramGL::setUniform2iv(int, int, int const*)
rx::ProgramGL::setUniform2uiv(int, int, unsigned int const*)
rx::ProgramGL::setUniform3fv(int, int, float const*)
rx::ProgramGL::setUniform3iv(int, int, int const*)
rx::ProgramGL::setUniform3uiv(int, int, unsigned int const*)
rx::ProgramGL::setUniform4fv(int, int, float const*)
rx::ProgramGL::setUniform4iv(int, int, int const*)
rx::ProgramGL::setUniform4uiv(int, int, unsigned int const*)
rx::ProgramGL::setUniformBlockBinding(unsigned int, unsigned int)
rx::ProgramGL::setUniformMatrix2fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix2x3fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix2x4fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix3fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix3x2fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix3x4fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix4fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix4x2fv(int, int, unsigned char, float const*)
rx::ProgramGL::setUniformMatrix4x3fv(int, int, unsigned char, float const*)
rx::ProgramGL::syncState(gl::Context const*, angle::BitSetT<36ul, unsigned long, unsigned long> const&)
rx::ProgramGL::validate(gl::Caps const&, gl::InfoLog*)
rx::ProgramGL::~ProgramGL()
rx::ProgramImpl::destroy(gl::Context const*)
rx::ProgramImpl::markUnusedUniformLocations(std::__1::vector<gl::VariableLocation, std::__1::allocator<gl::VariableLocation> >*, std::__1::vector<gl::SamplerBinding, std::__1::allocator<gl::SamplerBinding> >*, std::__1::vector<gl::ImageBinding, std::__1::allocator<gl::ImageBinding> >*)
rx::ProgramImpl::syncState(gl::Context const*, angle::BitSetT<36ul, unsigned long, unsigned long> const&)
rx::ProgramInfo::initProgram(rx::ContextVk*, gl::ShaderType, rx::ShaderInfo const&, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul> const&, angle::BitSetT<2ul, unsigned char, rx::ProgramTransformOption>)
rx::ProgramInfo::release(rx::ContextVk*)
rx::ProgramNULL::ProgramNULL(gl::ProgramState const&)
rx::ProgramNULL::getUniformfv(gl::Context const*, int, float*) const
rx::ProgramNULL::getUniformiv(gl::Context const*, int, int*) const
rx::ProgramNULL::getUniformuiv(gl::Context const*, int, unsigned int*) const
rx::ProgramNULL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)
rx::ProgramNULL::load(gl::Context const*, gl::BinaryInputStream*, gl::InfoLog&)
rx::ProgramNULL::save(gl::Context const*, gl::BinaryOutputStream*)
rx::ProgramNULL::setBinaryRetrievableHint(bool)
rx::ProgramNULL::setSeparable(bool)
rx::ProgramNULL::setUniform1fv(int, int, float const*)
rx::ProgramNULL::setUniform1iv(int, int, int const*)
rx::ProgramNULL::setUniform1uiv(int, int, unsigned int const*)
rx::ProgramNULL::setUniform2fv(int, int, float const*)
rx::ProgramNULL::setUniform2iv(int, int, int const*)
rx::ProgramNULL::setUniform2uiv(int, int, unsigned int const*)
rx::ProgramNULL::setUniform3fv(int, int, float const*)
rx::ProgramNULL::setUniform3iv(int, int, int const*)
rx::ProgramNULL::setUniform3uiv(int, int, unsigned int const*)
rx::ProgramNULL::setUniform4fv(int, int, float const*)
rx::ProgramNULL::setUniform4iv(int, int, int const*)
rx::ProgramNULL::setUniform4uiv(int, int, unsigned int const*)
rx::ProgramNULL::setUniformMatrix2fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix2x3fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix2x4fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix3fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix3x2fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix3x4fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix4fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix4x2fv(int, int, unsigned char, float const*)
rx::ProgramNULL::setUniformMatrix4x3fv(int, int, unsigned char, float const*)
rx::ProgramNULL::validate(gl::Caps const&, gl::InfoLog*)
rx::ProgramNULL::~ProgramNULL()
rx::ProgramPipelineGL::ProgramPipelineGL(gl::ProgramPipelineState const&, rx::FunctionsGL const*)
rx::ProgramPipelineGL::~ProgramPipelineGL()
rx::ProgramPipelineImpl::destroy(gl::Context const*)
rx::ProgramPipelineImpl::link(gl::Context const*)
rx::ProgramPipelineNULL::ProgramPipelineNULL(gl::ProgramPipelineState const&)
rx::ProgramPipelineNULL::~ProgramPipelineNULL()
rx::ProgramPipelineVk::ProgramPipelineVk(gl::ProgramPipelineState const&)
rx::ProgramPipelineVk::destroy(gl::Context const*)
rx::ProgramPipelineVk::dirtyUniforms(gl::State const&)
rx::ProgramPipelineVk::fillProgramStateMap(rx::ContextVk const*, angle::PackedEnumMap<gl::ShaderType, gl::ProgramState const*, 4ul>*)
rx::ProgramPipelineVk::link(gl::Context const*)
rx::ProgramPipelineVk::transformShaderSpirV(gl::Context const*)
rx::ProgramPipelineVk::updateUniforms(rx::ContextVk*)
rx::ProgramPipelineVk::~ProgramPipelineVk()
rx::ProgramVk::ProgramVk(gl::ProgramState const&)
rx::ProgramVk::destroy(gl::Context const*)
rx::ProgramVk::fillProgramStateMap(angle::PackedEnumMap<gl::ShaderType, gl::ProgramState const*, 4ul>*)
rx::ProgramVk::generateUniformLayoutMapping(angle::PackedEnumMap<gl::ShaderType, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, sh::BlockMemberInfo> > >, 4ul>&, angle::PackedEnumMap<gl::ShaderType, unsigned long, 4ul>&)
rx::ProgramVk::getUniformfv(gl::Context const*, int, float*) const
rx::ProgramVk::getUniformiv(gl::Context const*, int, int*) const
rx::ProgramVk::getUniformuiv(gl::Context const*, int, unsigned int*) const
rx::ProgramVk::initDefaultUniformLayoutMapping(angle::PackedEnumMap<gl::ShaderType, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, sh::BlockMemberInfo> > >, 4ul>&)
rx::ProgramVk::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)
rx::ProgramVk::load(gl::Context const*, gl::BinaryInputStream*, gl::InfoLog&)
rx::ProgramVk::resizeUniformBlockMemory(rx::ContextVk*, angle::PackedEnumMap<gl::ShaderType, unsigned long, 4ul>&)
rx::ProgramVk::save(gl::Context const*, gl::BinaryOutputStream*)
rx::ProgramVk::setBinaryRetrievableHint(bool)
rx::ProgramVk::setSeparable(bool)
rx::ProgramVk::setUniform1fv(int, int, float const*)
rx::ProgramVk::setUniform1iv(int, int, int const*)
rx::ProgramVk::setUniform1uiv(int, int, unsigned int const*)
rx::ProgramVk::setUniform2fv(int, int, float const*)
rx::ProgramVk::setUniform2iv(int, int, int const*)
rx::ProgramVk::setUniform2uiv(int, int, unsigned int const*)
rx::ProgramVk::setUniform3fv(int, int, float const*)
rx::ProgramVk::setUniform3iv(int, int, int const*)
rx::ProgramVk::setUniform3uiv(int, int, unsigned int const*)
rx::ProgramVk::setUniform4fv(int, int, float const*)
rx::ProgramVk::setUniform4iv(int, int, int const*)
rx::ProgramVk::setUniform4uiv(int, int, unsigned int const*)
rx::ProgramVk::setUniformMatrix2fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix2x3fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix2x4fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix3fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix3x2fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix3x4fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix4fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix4x2fv(int, int, unsigned char, float const*)
rx::ProgramVk::setUniformMatrix4x3fv(int, int, unsigned char, float const*)
rx::ProgramVk::updateShaderUniforms(rx::ContextVk*, gl::ShaderType, unsigned int*, bool*)
rx::ProgramVk::updateUniforms(rx::ContextVk*)
rx::ProgramVk::validate(gl::Caps const&, gl::InfoLog*)
rx::ProgramVk::~ProgramVk()
rx::QueryImpl::onDestroy(gl::Context const*)
rx::QueryNULL::QueryNULL(gl::QueryType)
rx::QueryNULL::begin(gl::Context const*)
rx::QueryNULL::end(gl::Context const*)
rx::QueryNULL::getResult(gl::Context const*, int*)
rx::QueryNULL::getResult(gl::Context const*, long*)
rx::QueryNULL::getResult(gl::Context const*, unsigned int*)
rx::QueryNULL::getResult(gl::Context const*, unsigned long*)
rx::QueryNULL::isResultAvailable(gl::Context const*, bool*)
rx::QueryNULL::queryCounter(gl::Context const*)
rx::QueryNULL::~QueryNULL()
rx::QueryVk::QueryVk(gl::QueryType)
rx::QueryVk::begin(gl::Context const*)
rx::QueryVk::end(gl::Context const*)
rx::QueryVk::getResult(gl::Context const*, bool)
rx::QueryVk::getResult(gl::Context const*, int*)
rx::QueryVk::getResult(gl::Context const*, long*)
rx::QueryVk::getResult(gl::Context const*, unsigned int*)
rx::QueryVk::getResult(gl::Context const*, unsigned long*)
rx::QueryVk::isResultAvailable(gl::Context const*, bool*)
rx::QueryVk::onDestroy(gl::Context const*)
rx::QueryVk::onTransformFeedbackEnd(long)
rx::QueryVk::queryCounter(gl::Context const*)
rx::QueryVk::stashQueryHelper(rx::ContextVk*)
rx::QueryVk::~QueryVk()
rx::RenderPassCache::RenderPassCache()
rx::RenderPassCache::addRenderPass(rx::ContextVk*, rx::Serial, rx::vk::RenderPassDesc const&, rx::vk::RenderPass**)
rx::RenderPassCache::destroy(VkDevice_T*)
rx::RenderPassCache::getRenderPassWithOps(rx::vk::Context*, rx::Serial, rx::vk::RenderPassDesc const&, rx::vk::AttachmentOpsArray const&, rx::vk::RenderPass**)
rx::RenderPassCache::~RenderPassCache()
rx::RenderTargetCache<rx::RenderTargetVk>::update(gl::Context const*, gl::FramebufferState const&, angle::BitSetT<31ul, unsigned long, unsigned long> const&)
rx::RenderTargetCache<rx::RenderTargetVk>::updateColorRenderTarget(gl::Context const*, gl::FramebufferState const&, unsigned long)
rx::RenderTargetVk::RenderTargetVk()
rx::RenderTargetVk::RenderTargetVk(rx::RenderTargetVk&&)
rx::RenderTargetVk::flushStagedUpdates(rx::ContextVk*, rx::vk::ClearValuesArray*, unsigned int) const
rx::RenderTargetVk::getAndRetainCopyImageView(rx::ContextVk*, rx::vk::ImageView const**) const
rx::RenderTargetVk::getAssignImageViewSerial(rx::ContextVk*)
rx::RenderTargetVk::getExtents() const
rx::RenderTargetVk::getImage()
rx::RenderTargetVk::getImage() const
rx::RenderTargetVk::getImageForWrite(rx::ContextVk*) const
rx::RenderTargetVk::getImageFormat() const
rx::RenderTargetVk::getImageIndex() const
rx::RenderTargetVk::getImageView(rx::ContextVk*, rx::vk::ImageView const**) const
rx::RenderTargetVk::init(rx::vk::ImageHelper*, rx::vk::ImageViewHelper*, unsigned int, unsigned int)
rx::RenderTargetVk::onColorDraw(rx::ContextVk*)
rx::RenderTargetVk::onDepthStencilDraw(rx::ContextVk*)
rx::RenderTargetVk::retainImageViews(rx::ContextVk*) const
rx::RenderTargetVk::updateSwapchainImage(rx::vk::ImageHelper*, rx::vk::ImageViewHelper*)
rx::RenderTargetVk::~RenderTargetVk()
rx::RenderbufferGL::RenderbufferGL(gl::RenderbufferState const&, unsigned int)
rx::RenderbufferGL::getNativeInternalFormat() const
rx::RenderbufferGL::getRenderbufferID() const
rx::RenderbufferGL::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::RenderbufferGL::onDestroy(gl::Context const*)
rx::RenderbufferGL::setStorage(gl::Context const*, unsigned int, unsigned long, unsigned long)
rx::RenderbufferGL::setStorageEGLImageTarget(gl::Context const*, egl::Image*)
rx::RenderbufferGL::setStorageMultisample(gl::Context const*, unsigned long, unsigned int, unsigned long, unsigned long)
rx::RenderbufferGL::~RenderbufferGL()
rx::RenderbufferImpl::getColorReadFormat(gl::Context const*)
rx::RenderbufferImpl::getColorReadType(gl::Context const*)
rx::RenderbufferImpl::getMemorySize() const
rx::RenderbufferImpl::getRenderbufferImage(gl::Context const*, gl::PixelPackState const&, gl::Buffer*, unsigned int, unsigned int, void*)
rx::RenderbufferImpl::onDestroy(gl::Context const*)
rx::RenderbufferNULL::RenderbufferNULL(gl::RenderbufferState const&)
rx::RenderbufferNULL::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::RenderbufferNULL::setStorage(gl::Context const*, unsigned int, unsigned long, unsigned long)
rx::RenderbufferNULL::setStorageEGLImageTarget(gl::Context const*, egl::Image*)
rx::RenderbufferNULL::setStorageMultisample(gl::Context const*, unsigned long, unsigned int, unsigned long, unsigned long)
rx::RenderbufferNULL::~RenderbufferNULL()
rx::RenderbufferVk::RenderbufferVk(gl::RenderbufferState const&)
rx::RenderbufferVk::getAttachmentRenderTarget(gl::Context const*, unsigned int, gl::ImageIndex const&, int, rx::FramebufferAttachmentRenderTarget**)
rx::RenderbufferVk::getColorReadFormat(gl::Context const*)
rx::RenderbufferVk::getColorReadType(gl::Context const*)
rx::RenderbufferVk::getRenderbufferImage(gl::Context const*, gl::PixelPackState const&, gl::Buffer*, unsigned int, unsigned int, void*)
rx::RenderbufferVk::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::RenderbufferVk::onDestroy(gl::Context const*)
rx::RenderbufferVk::onSubjectStateChange(unsigned long, angle::SubjectMessage)
rx::RenderbufferVk::releaseAndDeleteImage(rx::ContextVk*)
rx::RenderbufferVk::releaseOwnershipOfImage(gl::Context const*)
rx::RenderbufferVk::setStorage(gl::Context const*, unsigned int, unsigned long, unsigned long)
rx::RenderbufferVk::setStorageEGLImageTarget(gl::Context const*, egl::Image*)
rx::RenderbufferVk::setStorageImpl(gl::Context const*, unsigned long, unsigned int, unsigned long, unsigned long)
rx::RenderbufferVk::setStorageMultisample(gl::Context const*, unsigned long, unsigned int, unsigned long, unsigned long)
rx::RenderbufferVk::~RenderbufferVk()
rx::RendererEGL::RendererEGL(std::__1::unique_ptr<rx::FunctionsGL, std::__1::default_delete<rx::FunctionsGL> >, egl::AttributeMap const&, rx::DisplayEGL*, void*, std::__1::vector<int, std::__1::allocator<int> >)
rx::RendererEGL::createWorkerContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::RendererEGL::getContext() const
rx::RendererEGL::~RendererEGL()
rx::RendererGL::RendererGL(std::__1::unique_ptr<rx::FunctionsGL, std::__1::default_delete<rx::FunctionsGL> >, egl::AttributeMap const&, rx::DisplayGL*)
rx::RendererGL::bindWorkerContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::RendererGL::dispatchCompute(gl::Context const*, unsigned int, unsigned int, unsigned int)
rx::RendererGL::dispatchComputeIndirect(gl::Context const*, long)
rx::RendererGL::finish()
rx::RendererGL::flush()
rx::RendererGL::flushIfNecessaryBeforeDeleteTextures()
rx::RendererGL::getGPUDisjoint()
rx::RendererGL::getMaxSupportedESVersion() const
rx::RendererGL::getMaxWorkerContexts()
rx::RendererGL::getMultiviewImplementationType() const
rx::RendererGL::getNativeCaps() const
rx::RendererGL::getNativeExtensions() const
rx::RendererGL::getNativeLimitations() const
rx::RendererGL::getNativeTextureCaps() const
rx::RendererGL::getRendererDescription() const
rx::RendererGL::getResetStatus()
rx::RendererGL::getTimestamp()
rx::RendererGL::getVendorString() const
rx::RendererGL::hasNativeParallelCompile()
rx::RendererGL::initializeFrontendFeatures(angle::FrontendFeatures*) const
rx::RendererGL::insertEventMarker(int, char const*)
rx::RendererGL::memoryBarrier(unsigned int)
rx::RendererGL::memoryBarrierByRegion(unsigned int)
rx::RendererGL::popDebugGroup()
rx::RendererGL::popGroupMarker()
rx::RendererGL::pushDebugGroup(unsigned int, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::RendererGL::pushGroupMarker(int, char const*)
rx::RendererGL::setMaxShaderCompilerThreads(unsigned int)
rx::RendererGL::setNeedsFlushBeforeDeleteTextures()
rx::RendererGL::unbindWorkerContext()
rx::RendererGL::~RendererGL()
rx::RendererGLX::RendererGLX(std::__1::unique_ptr<rx::FunctionsGL, std::__1::default_delete<rx::FunctionsGL> >, egl::AttributeMap const&, rx::DisplayGLX*)
rx::RendererGLX::createWorkerContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::RendererGLX::~RendererGLX()
rx::RendererVk::RendererVk()
rx::RendererVk::cleanupGarbage(bool)
rx::RendererVk::deviceWaitIdle(rx::vk::Context*)
rx::RendererVk::ensureCapsInitialized() const
rx::RendererVk::getCommandBufferOneOff(rx::vk::Context*, rx::vk::priv::CommandBuffer*)
rx::RendererVk::getDescriptorSetLayout(rx::vk::Context*, rx::vk::DescriptorSetLayoutDesc const&, rx::vk::BindingPointer<rx::vk::DescriptorSetLayout>*)
rx::RendererVk::getImageFormatFeatureBits(VkFormat, unsigned int)
rx::RendererVk::getMaxConformantESVersion() const
rx::RendererVk::getMaxFenceWaitTimeNs() const
rx::RendererVk::getMaxSupportedESVersion() const
rx::RendererVk::getNativeCaps() const
rx::RendererVk::getNativeExtensions() const
rx::RendererVk::getNativeLimitations() const
rx::RendererVk::getNativeTextureCaps() const
rx::RendererVk::getPipelineCache(rx::vk::PipelineCache**)
rx::RendererVk::getPipelineLayout(rx::vk::Context*, rx::vk::PipelineLayoutDesc const&, std::__1::array<rx::vk::BindingPointer<rx::vk::DescriptorSetLayout>, 4ul> const&, rx::vk::BindingPointer<rx::vk::PipelineLayout>*)
rx::RendererVk::getRendererDescription() const
rx::RendererVk::getVendorString() const
rx::RendererVk::hasBufferFormatFeatureBits(VkFormat, unsigned int)
rx::RendererVk::hasImageFormatFeatureBits(VkFormat, unsigned int)
rx::RendererVk::hasLinearImageFormatFeatureBits(VkFormat, unsigned int)
rx::RendererVk::initFeatures(rx::DisplayVk*, angle::FixedVector<char const*, 200ul, std::__1::array<char const*, 200ul> > const&)
rx::RendererVk::initPipelineCacheVkKey()
rx::RendererVk::initialize(rx::DisplayVk*, egl::Display*, char const*, char const*)
rx::RendererVk::initializeDevice(rx::DisplayVk*, unsigned int)
rx::RendererVk::initializeDevice(rx::DisplayVk*, unsigned int)::queuePriorities
rx::RendererVk::isDeviceLost() const
rx::RendererVk::issueShaderSerial()
rx::RendererVk::newSharedFence(rx::vk::Context*, rx::vk::Shared<rx::vk::Fence>*)
rx::RendererVk::notifyDeviceLost()
rx::RendererVk::onCompletedSerial(rx::Serial)
rx::RendererVk::onDestroy()
rx::RendererVk::queryDeviceExtensionFeatures(angle::FixedVector<char const*, 200ul, std::__1::array<char const*, 200ul> > const&)
rx::RendererVk::queuePresent(egl::ContextPriority, VkPresentInfoKHR const&)
rx::RendererVk::queuePresent(egl::ContextPriority, VkPresentInfoKHR const&)::trace_event_unique_catstatic2040
rx::RendererVk::queuePresent(egl::ContextPriority, VkPresentInfoKHR const&)::trace_event_unique_catstatic2052
rx::RendererVk::queueSubmit(rx::vk::Context*, egl::ContextPriority, VkSubmitInfo const&, rx::vk::Fence const*, rx::Serial*)
rx::RendererVk::queueSubmitOneOff(rx::vk::Context*, rx::vk::priv::CommandBuffer&&, egl::ContextPriority, rx::vk::Fence const*, rx::Serial*)
rx::RendererVk::queueWaitIdle(rx::vk::Context*, egl::ContextPriority)
rx::RendererVk::reloadVolkIfNeeded() const
rx::RendererVk::selectPresentQueueForSurface(rx::DisplayVk*, VkSurfaceKHR_T*, unsigned int*)
rx::RendererVk::syncPipelineCacheVk(rx::DisplayVk*)
rx::RendererVk::~RendererVk()
rx::RotateRectangle(rx::SurfaceRotation, bool, int, int, gl::Rectangle const&, gl::Rectangle*)
rx::SamplerCache::SamplerCache()
rx::SamplerCache::destroy(rx::RendererVk*)
rx::SamplerCache::getSampler(rx::ContextVk*, rx::vk::SamplerDesc const&, rx::vk::BindingPointer<rx::vk::Sampler>*)
rx::SamplerCache::~SamplerCache()
rx::SamplerGL::SamplerGL(gl::SamplerState const&, rx::FunctionsGL const*, rx::StateManagerGL*)
rx::SamplerGL::getSamplerID() const
rx::SamplerGL::syncState(gl::Context const*, bool)
rx::SamplerGL::~SamplerGL()
rx::SamplerImpl::onDestroy(gl::Context const*)
rx::SamplerNULL::SamplerNULL(gl::SamplerState const&)
rx::SamplerNULL::syncState(gl::Context const*, bool)
rx::SamplerNULL::~SamplerNULL()
rx::SamplerVk::SamplerVk(gl::SamplerState const&)
rx::SamplerVk::onDestroy(gl::Context const*)
rx::SamplerVk::syncState(gl::Context const*, bool)
rx::SamplerVk::~SamplerVk()
rx::ScopedWorkerContextGL::ScopedWorkerContextGL(rx::RendererGL*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::ScopedWorkerContextGL::operator()() const
rx::ScopedWorkerContextGL::~ScopedWorkerContextGL()
rx::SemaphoreGL::SemaphoreGL(unsigned int)
rx::SemaphoreGL::importFd(gl::Context*, gl::HandleType, int)
rx::SemaphoreGL::importZirconHandle(gl::Context*, gl::HandleType, unsigned int)
rx::SemaphoreGL::onDestroy(gl::Context const*)
rx::SemaphoreGL::signal(gl::Context*, angle::FastVector<gl::Buffer*, 16ul, std::__1::array<gl::Buffer*, 16ul> > const&, angle::FastVector<gl::TextureAndLayout, 16ul, std::__1::array<gl::TextureAndLayout, 16ul> > const&)
rx::SemaphoreGL::wait(gl::Context*, angle::FastVector<gl::Buffer*, 16ul, std::__1::array<gl::Buffer*, 16ul> > const&, angle::FastVector<gl::TextureAndLayout, 16ul, std::__1::array<gl::TextureAndLayout, 16ul> > const&)
rx::SemaphoreGL::~SemaphoreGL()
rx::SemaphoreVk::SemaphoreVk()
rx::SemaphoreVk::importFd(gl::Context*, gl::HandleType, int)
rx::SemaphoreVk::importZirconEvent(rx::ContextVk*, unsigned int)
rx::SemaphoreVk::importZirconEvent(rx::ContextVk*, unsigned int)::vkImportSemaphoreZirconHandleFUCHSIA
rx::SemaphoreVk::importZirconHandle(gl::Context*, gl::HandleType, unsigned int)
rx::SemaphoreVk::onDestroy(gl::Context const*)
rx::SemaphoreVk::signal(gl::Context*, angle::FastVector<gl::Buffer*, 16ul, std::__1::array<gl::Buffer*, 16ul> > const&, angle::FastVector<gl::TextureAndLayout, 16ul, std::__1::array<gl::TextureAndLayout, 16ul> > const&)
rx::SemaphoreVk::wait(gl::Context*, angle::FastVector<gl::Buffer*, 16ul, std::__1::array<gl::Buffer*, 16ul> > const&, angle::FastVector<gl::TextureAndLayout, 16ul, std::__1::array<gl::TextureAndLayout, 16ul> > const&)
rx::SemaphoreVk::~SemaphoreVk()
rx::SetFloatUniformMatrixGLSL<2, 2>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<2, 3>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<2, 4>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<3, 2>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<3, 3>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<3, 4>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<4, 2>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<4, 3>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::SetFloatUniformMatrixGLSL<4, 4>::Run(unsigned int, unsigned int, int, unsigned char, float const*, unsigned char*)
rx::ShaderGL::ShaderGL(gl::ShaderState const&, unsigned int, rx::MultiviewImplementationTypeGL, std::__1::shared_ptr<rx::RendererGL> const&)
rx::ShaderGL::checkShader()
rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)
rx::ShaderGL::compileAndCheckShaderInWorker(char const*)
rx::ShaderGL::destroy()
rx::ShaderGL::getDebugInfo() const
rx::ShaderGL::getShaderID() const
rx::ShaderGL::~ShaderGL()
rx::ShaderImpl::compileImpl(gl::Context const*, gl::ShCompilerInstance*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)
rx::ShaderImpl::destroy()
rx::ShaderInfo::ShaderInfo()
rx::ShaderInfo::initShaders(rx::ContextVk*, angle::BitSetT<4ul, unsigned char, gl::ShaderType> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul> const&)
rx::ShaderInfo::load(gl::BinaryInputStream*)
rx::ShaderInfo::release(rx::ContextVk*)
rx::ShaderInfo::save(gl::BinaryOutputStream*)
rx::ShaderInfo::~ShaderInfo()
rx::ShaderInterfaceVariableInfo::ShaderInterfaceVariableInfo()
rx::ShaderNULL::ShaderNULL(gl::ShaderState const&)
rx::ShaderNULL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)
rx::ShaderNULL::getDebugInfo() const
rx::ShaderNULL::~ShaderNULL()
rx::ShaderVk::ShaderVk(gl::ShaderState const&)
rx::ShaderVk::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)
rx::ShaderVk::getDebugInfo() const
rx::ShaderVk::~ShaderVk()
rx::ShareGroupGL::~ShareGroupGL()
rx::ShareGroupImpl::~ShareGroupImpl()
rx::ShareGroupNULL::~ShareGroupNULL()
rx::ShareGroupVk::~ShareGroupVk()
rx::ShouldApplyLastRowPaddingWorkaround(rx::ContextGL*, gl::Extents const&, gl::PixelStoreStateBase const&, gl::Buffer const*, unsigned int, unsigned int, bool, void const*, bool*)
rx::ShouldUseDebugLayers(egl::AttributeMap const&)
rx::StandardQueryGL::StandardQueryGL(gl::QueryType, rx::FunctionsGL const*, rx::StateManagerGL*)
rx::StandardQueryGL::begin(gl::Context const*)
rx::StandardQueryGL::end(gl::Context const*)
rx::StandardQueryGL::flush(gl::Context const*, bool)
rx::StandardQueryGL::getResult(gl::Context const*, int*)
rx::StandardQueryGL::getResult(gl::Context const*, long*)
rx::StandardQueryGL::getResult(gl::Context const*, unsigned int*)
rx::StandardQueryGL::getResult(gl::Context const*, unsigned long*)
rx::StandardQueryGL::isResultAvailable(gl::Context const*, bool*)
rx::StandardQueryGL::pause(gl::Context const*)
rx::StandardQueryGL::queryCounter(gl::Context const*)
rx::StandardQueryGL::resume(gl::Context const*)
rx::StandardQueryGL::~StandardQueryGL()
rx::StateManagerGL::StateManagerGL(rx::FunctionsGL const*, gl::Caps const&, gl::Extensions const&, angle::FeaturesGL const&)
rx::StateManagerGL::activeTexture(unsigned long)
rx::StateManagerGL::beginQuery(gl::QueryType, rx::QueryGL*, unsigned int)
rx::StateManagerGL::bindBuffer(gl::BufferBinding, unsigned int)
rx::StateManagerGL::bindFramebuffer(unsigned int, unsigned int)
rx::StateManagerGL::bindRenderbuffer(unsigned int, unsigned int)
rx::StateManagerGL::bindSampler(unsigned long, unsigned int)
rx::StateManagerGL::bindTexture(gl::TextureType, unsigned int)
rx::StateManagerGL::bindTransformFeedback(unsigned int, unsigned int)
rx::StateManagerGL::bindVertexArray(unsigned int, unsigned int)
rx::StateManagerGL::deleteBuffer(unsigned int)
rx::StateManagerGL::deleteFramebuffer(unsigned int)
rx::StateManagerGL::deleteProgram(unsigned int)
rx::StateManagerGL::deleteRenderbuffer(unsigned int)
rx::StateManagerGL::deleteSampler(unsigned int)
rx::StateManagerGL::deleteTexture(unsigned int)
rx::StateManagerGL::deleteTransformFeedback(unsigned int)
rx::StateManagerGL::deleteVertexArray(unsigned int)
rx::StateManagerGL::endQuery(gl::QueryType, rx::QueryGL*, unsigned int)
rx::StateManagerGL::forceUseProgram(unsigned int)
rx::StateManagerGL::invalidateTexture(gl::TextureType)
rx::StateManagerGL::onMakeCurrent(gl::Context const*)
rx::StateManagerGL::onTransformFeedbackStateChange()
rx::StateManagerGL::pauseAllQueries(gl::Context const*)
rx::StateManagerGL::pauseQuery(gl::Context const*, gl::QueryType)
rx::StateManagerGL::pauseTransformFeedback()
rx::StateManagerGL::resumeAllQueries(gl::Context const*)
rx::StateManagerGL::resumeQuery(gl::Context const*, gl::QueryType)
rx::StateManagerGL::setBlendEnabled(bool)
rx::StateManagerGL::setBlendEnabledIndexed(angle::BitSetT<8ul, unsigned long, unsigned long>)
rx::StateManagerGL::setBlendEquations(gl::BlendStateExt const&)
rx::StateManagerGL::setBlendFuncs(gl::BlendStateExt const&)
rx::StateManagerGL::setClearColor(angle::Color<float> const&)
rx::StateManagerGL::setClearDepth(float)
rx::StateManagerGL::setClearStencil(int)
rx::StateManagerGL::setColorMask(bool, bool, bool, bool)
rx::StateManagerGL::setColorMaskForFramebuffer(gl::BlendStateExt const&, bool)
rx::StateManagerGL::setCullFaceEnabled(bool)
rx::StateManagerGL::setDepthMask(bool)
rx::StateManagerGL::setDepthRange(float, float)
rx::StateManagerGL::setDepthTestEnabled(bool)
rx::StateManagerGL::setFramebufferSRGBEnabled(gl::Context const*, bool)
rx::StateManagerGL::setFramebufferSRGBEnabledForFramebuffer(gl::Context const*, bool, rx::FramebufferGL const*)
rx::StateManagerGL::setPixelPackBuffer(gl::Buffer const*)
rx::StateManagerGL::setPixelPackState(gl::PixelPackState const&)
rx::StateManagerGL::setPixelUnpackBuffer(gl::Buffer const*)
rx::StateManagerGL::setPixelUnpackState(gl::PixelUnpackState const&)
rx::StateManagerGL::setPolygonOffsetFillEnabled(bool)
rx::StateManagerGL::setPrimitiveRestartIndex(gl::Context const*, unsigned int)
rx::StateManagerGL::setRasterizerDiscardEnabled(bool)
rx::StateManagerGL::setSampleAlphaToCoverageEnabled(bool)
rx::StateManagerGL::setSampleCoverageEnabled(bool)
rx::StateManagerGL::setScissorTestEnabled(bool)
rx::StateManagerGL::setStencilTestEnabled(bool)
rx::StateManagerGL::setViewport(gl::Rectangle const&)
rx::StateManagerGL::syncSamplersState(gl::Context const*)
rx::StateManagerGL::syncState(gl::Context const*, angle::BitSetT<62ul, unsigned long, unsigned long> const&, angle::BitSetT<62ul, unsigned long, unsigned long> const&)
rx::StateManagerGL::syncTransformFeedbackState(gl::Context const*)
rx::StateManagerGL::updateMultiviewBaseViewLayerIndexUniformImpl(gl::Program const*, gl::FramebufferState const&) const
rx::StateManagerGL::updateProgramAtomicCounterBufferBindings(gl::Context const*)
rx::StateManagerGL::updateProgramImageBindings(gl::Context const*)
rx::StateManagerGL::updateProgramStorageBufferBindings(gl::Context const*)
rx::StateManagerGL::updateProgramTextureBindings(gl::Context const*)
rx::StateManagerGL::updateProgramUniformBufferBindings(gl::Context const*)
rx::StateManagerGL::useProgram(unsigned int)
rx::StateManagerGL::~StateManagerGL()
rx::SurfaceEGL::SurfaceEGL(egl::SurfaceState const&, rx::FunctionsEGL const*, void*)
rx::SurfaceEGL::bindTexImage(gl::Context const*, gl::Texture*, int)
rx::SurfaceEGL::getCompositorTiming(int, int const*, long*) const
rx::SurfaceEGL::getFrameTimestamps(unsigned long, int, int const*, long*) const
rx::SurfaceEGL::getHeight() const
rx::SurfaceEGL::getNextFrameId(unsigned long*) const
rx::SurfaceEGL::getSupportedCompositorTimings() const
rx::SurfaceEGL::getSupportedTimestamps() const
rx::SurfaceEGL::getSurface() const
rx::SurfaceEGL::getSwapBehavior() const
rx::SurfaceEGL::getWidth() const
rx::SurfaceEGL::isPostSubBufferSupported() const
rx::SurfaceEGL::makeCurrent(gl::Context const*)
rx::SurfaceEGL::postSubBuffer(gl::Context const*, int, int, int, int)
rx::SurfaceEGL::querySurfacePointerANGLE(int, void**)
rx::SurfaceEGL::releaseTexImage(gl::Context const*, int)
rx::SurfaceEGL::setPresentationTime(long)
rx::SurfaceEGL::setSwapInterval(int)
rx::SurfaceEGL::setTimestampsEnabled(bool)
rx::SurfaceEGL::swap(gl::Context const*)
rx::SurfaceEGL::swapWithDamage(gl::Context const*, int*, int)
rx::SurfaceEGL::~SurfaceEGL()
rx::SurfaceGL::SurfaceGL(egl::SurfaceState const&)
rx::SurfaceGL::createDefaultFramebuffer(gl::Context const*, gl::FramebufferState const&)
rx::SurfaceGL::getMscRate(int*, int*)
rx::SurfaceGL::getSyncValues(unsigned long*, unsigned long*, unsigned long*)
rx::SurfaceGL::hasEmulatedAlphaChannel() const
rx::SurfaceGL::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::SurfaceGL::~SurfaceGL()
rx::SurfaceImpl::SurfaceImpl(egl::SurfaceState const&)
rx::SurfaceImpl::destroy(egl::Display const*)
rx::SurfaceImpl::getCompositorTiming(int, int const*, long*) const
rx::SurfaceImpl::getD3DTextureColorFormat() const
rx::SurfaceImpl::getFrameTimestamps(unsigned long, int, int const*, long*) const
rx::SurfaceImpl::getNextFrameId(unsigned long*) const
rx::SurfaceImpl::getSupportedCompositorTimings() const
rx::SurfaceImpl::getSupportedTimestamps() const
rx::SurfaceImpl::getUserHeight(egl::Display const*, int*) const
rx::SurfaceImpl::getUserWidth(egl::Display const*, int*) const
rx::SurfaceImpl::makeCurrent(gl::Context const*)
rx::SurfaceImpl::setFixedHeight(int)
rx::SurfaceImpl::setFixedWidth(int)
rx::SurfaceImpl::setPresentationTime(long)
rx::SurfaceImpl::setTimestampsEnabled(bool)
rx::SurfaceImpl::swapWithDamage(gl::Context const*, int*, int)
rx::SurfaceImpl::swapWithFrameToken(gl::Context const*, unsigned long)
rx::SurfaceImpl::unMakeCurrent(gl::Context const*)
rx::SurfaceImpl::~SurfaceImpl()
rx::SurfaceNULL::SurfaceNULL(egl::SurfaceState const&)
rx::SurfaceNULL::bindTexImage(gl::Context const*, gl::Texture*, int)
rx::SurfaceNULL::createDefaultFramebuffer(gl::Context const*, gl::FramebufferState const&)
rx::SurfaceNULL::getHeight() const
rx::SurfaceNULL::getMscRate(int*, int*)
rx::SurfaceNULL::getSwapBehavior() const
rx::SurfaceNULL::getSyncValues(unsigned long*, unsigned long*, unsigned long*)
rx::SurfaceNULL::getWidth() const
rx::SurfaceNULL::initialize(egl::Display const*)
rx::SurfaceNULL::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::SurfaceNULL::isPostSubBufferSupported() const
rx::SurfaceNULL::postSubBuffer(gl::Context const*, int, int, int, int)
rx::SurfaceNULL::querySurfacePointerANGLE(int, void**)
rx::SurfaceNULL::releaseTexImage(gl::Context const*, int)
rx::SurfaceNULL::setSwapInterval(int)
rx::SurfaceNULL::swap(gl::Context const*)
rx::SurfaceNULL::~SurfaceNULL()
rx::SurfaceVk::getAttachmentRenderTarget(gl::Context const*, unsigned int, gl::ImageIndex const&, int, rx::FramebufferAttachmentRenderTarget**)
rx::SurfaceVk::onSubjectStateChange(unsigned long, angle::SubjectMessage)
rx::SurfaceVk::~SurfaceVk()
rx::SwapControlData::SwapControlData()
rx::SyncEGL::SyncEGL(egl::AttributeMap const&, rx::FunctionsEGL const*)
rx::SyncEGL::clientWait(egl::Display const*, gl::Context const*, int, unsigned long, int*)
rx::SyncEGL::dupNativeFenceFD(egl::Display const*, int*) const
rx::SyncEGL::getStatus(egl::Display const*, int*)
rx::SyncEGL::initialize(egl::Display const*, gl::Context const*, unsigned int)
rx::SyncEGL::onDestroy(egl::Display const*)
rx::SyncEGL::serverWait(egl::Display const*, gl::Context const*, int)
rx::SyncEGL::~SyncEGL()
rx::SyncGL::SyncGL(rx::FunctionsGL const*)
rx::SyncGL::clientWait(gl::Context const*, unsigned int, unsigned long, unsigned int*)
rx::SyncGL::getStatus(gl::Context const*, int*)
rx::SyncGL::onDestroy(gl::Context const*)
rx::SyncGL::serverWait(gl::Context const*, unsigned int, unsigned long)
rx::SyncGL::set(gl::Context const*, unsigned int, unsigned int)
rx::SyncGL::~SyncGL()
rx::SyncImpl::onDestroy(gl::Context const*)
rx::SyncNULL::SyncNULL()
rx::SyncNULL::clientWait(gl::Context const*, unsigned int, unsigned long, unsigned int*)
rx::SyncNULL::getStatus(gl::Context const*, int*)
rx::SyncNULL::serverWait(gl::Context const*, unsigned int, unsigned long)
rx::SyncNULL::set(gl::Context const*, unsigned int, unsigned int)
rx::SyncNULL::~SyncNULL()
rx::SyncProviderGL::init(gl::Context const*, gl::QueryType)
rx::SyncProviderGLQuery::flush(gl::Context const*, bool, bool*)
rx::SyncProviderGLQuery::init(gl::Context const*, gl::QueryType)
rx::SyncProviderGLQuery::~SyncProviderGLQuery()
rx::SyncProviderGLSync::flush(gl::Context const*, bool, bool*)
rx::SyncProviderGLSync::~SyncProviderGLSync()
rx::SyncQueryGL::IsSupported(rx::FunctionsGL const*)
rx::SyncQueryGL::SyncQueryGL(gl::QueryType, rx::FunctionsGL const*)
rx::SyncQueryGL::begin(gl::Context const*)
rx::SyncQueryGL::end(gl::Context const*)
rx::SyncQueryGL::getResult(gl::Context const*, int*)
rx::SyncQueryGL::getResult(gl::Context const*, long*)
rx::SyncQueryGL::getResult(gl::Context const*, unsigned int*)
rx::SyncQueryGL::getResult(gl::Context const*, unsigned long*)
rx::SyncQueryGL::isResultAvailable(gl::Context const*, bool*)
rx::SyncQueryGL::pause(gl::Context const*)
rx::SyncQueryGL::queryCounter(gl::Context const*)
rx::SyncQueryGL::resume(gl::Context const*)
rx::SyncQueryGL::~SyncQueryGL()
rx::SyncVk::SyncVk()
rx::SyncVk::clientWait(gl::Context const*, unsigned int, unsigned long, unsigned int*)
rx::SyncVk::getStatus(gl::Context const*, int*)
rx::SyncVk::onDestroy(gl::Context const*)
rx::SyncVk::serverWait(gl::Context const*, unsigned int, unsigned long)
rx::SyncVk::set(gl::Context const*, unsigned int, unsigned int)
rx::SyncVk::~SyncVk()
rx::TextureGL::TextureGL(gl::TextureState const&, unsigned int)
rx::TextureGL::bindTexImage(gl::Context const*, egl::Surface*)
rx::TextureGL::copyImage(gl::Context const*, gl::ImageIndex const&, gl::Rectangle const&, unsigned int, gl::Framebuffer*)
rx::TextureGL::copySubImage(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, gl::Rectangle const&, gl::Framebuffer*)
rx::TextureGL::copySubTexture(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, unsigned long, gl::Box const&, bool, bool, bool, gl::Texture const*)
rx::TextureGL::copySubTextureHelper(gl::Context const*, gl::TextureTarget, unsigned long, gl::Offset const&, unsigned long, gl::Rectangle const&, gl::InternalFormat const&, bool, bool, bool, gl::Texture const*)
rx::TextureGL::copyTexture(gl::Context const*, gl::ImageIndex const&, unsigned int, unsigned int, unsigned long, bool, bool, bool, gl::Texture const*)
rx::TextureGL::generateMipmap(gl::Context const*)
rx::TextureGL::getNativeID() const
rx::TextureGL::getNativeInternalFormat(gl::ImageIndex const&) const
rx::TextureGL::getType() const
rx::TextureGL::hasEmulatedAlphaChannel(gl::ImageIndex const&) const
rx::TextureGL::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::TextureGL::onDestroy(gl::Context const*)
rx::TextureGL::releaseTexImage(gl::Context const*)
rx::TextureGL::setBaseLevel(gl::Context const*, unsigned int)
rx::TextureGL::setCompressedImage(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, gl::PixelUnpackState const&, unsigned long, unsigned char const*)
rx::TextureGL::setCompressedSubImage(gl::Context const*, gl::ImageIndex const&, gl::Box const&, unsigned int, gl::PixelUnpackState const&, unsigned long, unsigned char const*)
rx::TextureGL::setEGLImageTarget(gl::Context const*, gl::TextureType, egl::Image*)
rx::TextureGL::setImage(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer*, unsigned char const*)
rx::TextureGL::setImageExternal(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, unsigned int, unsigned int)
rx::TextureGL::setImageExternal(gl::Context const*, gl::TextureType, egl::Stream*, egl::Stream::GLTextureDescription const&)
rx::TextureGL::setImageHelper(gl::Context const*, gl::TextureTarget, unsigned long, unsigned int, gl::Extents const&, unsigned int, unsigned int, unsigned char const*)
rx::TextureGL::setLevelInfo(gl::Context const*, gl::TextureType, unsigned long, unsigned long, rx::LevelInfoGL const&)
rx::TextureGL::setMagFilter(gl::Context const*, unsigned int)
rx::TextureGL::setMaxLevel(gl::Context const*, unsigned int)
rx::TextureGL::setMinFilter(gl::Context const*, unsigned int)
rx::TextureGL::setStorage(gl::Context const*, gl::TextureType, unsigned long, unsigned int, gl::Extents const&)
rx::TextureGL::setStorageExternalMemory(gl::Context const*, gl::TextureType, unsigned long, unsigned int, gl::Extents const&, gl::MemoryObject*, unsigned long)
rx::TextureGL::setStorageMultisample(gl::Context const*, gl::TextureType, int, int, gl::Extents const&, bool)
rx::TextureGL::setSubImage(gl::Context const*, gl::ImageIndex const&, gl::Box const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer*, unsigned char const*)
rx::TextureGL::setSubImagePaddingWorkaround(gl::Context const*, gl::TextureTarget, unsigned long, gl::Box const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer const*, unsigned char const*)
rx::TextureGL::setSubImageRowByRowWorkaround(gl::Context const*, gl::TextureTarget, unsigned long, gl::Box const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer const*, unsigned char const*)
rx::TextureGL::setSwizzle(gl::Context const*, int*)
rx::TextureGL::syncState(gl::Context const*, angle::BitSetT<24ul, unsigned long, unsigned long> const&, gl::TextureCommand)
rx::TextureGL::syncTextureStateSwizzle(gl::Context const*, rx::FunctionsGL const*, unsigned int, unsigned int, unsigned int*)
rx::TextureGL::~TextureGL()
rx::TextureImpl::TextureImpl(gl::TextureState const&)
rx::TextureImpl::copy3DSubTexture(gl::Context const*, gl::TextureTarget, gl::Offset const&, unsigned long, unsigned long, gl::Box const&, bool, bool, bool, gl::Texture const*)
rx::TextureImpl::copy3DTexture(gl::Context const*, gl::TextureTarget, unsigned int, unsigned int, unsigned long, unsigned long, bool, bool, bool, gl::Texture const*)
rx::TextureImpl::copyCompressedTexture(gl::Context const*, gl::Texture const*)
rx::TextureImpl::copySubTexture(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, unsigned long, gl::Box const&, bool, bool, bool, gl::Texture const*)
rx::TextureImpl::copyTexture(gl::Context const*, gl::ImageIndex const&, unsigned int, unsigned int, unsigned long, bool, bool, bool, gl::Texture const*)
rx::TextureImpl::getColorReadFormat(gl::Context const*)
rx::TextureImpl::getColorReadType(gl::Context const*)
rx::TextureImpl::getLevelMemorySize(gl::TextureTarget, int)
rx::TextureImpl::getMemorySize() const
rx::TextureImpl::getNativeID() const
rx::TextureImpl::getTexImage(gl::Context const*, gl::PixelPackState const&, gl::Buffer*, gl::TextureTarget, int, unsigned int, unsigned int, void*)
rx::TextureImpl::onDestroy(gl::Context const*)
rx::TextureImpl::setImageExternal(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, unsigned int, unsigned int)
rx::TextureImpl::~TextureImpl()
rx::TextureNULL::TextureNULL(gl::TextureState const&)
rx::TextureNULL::bindTexImage(gl::Context const*, egl::Surface*)
rx::TextureNULL::copyCompressedTexture(gl::Context const*, gl::Texture const*)
rx::TextureNULL::copyImage(gl::Context const*, gl::ImageIndex const&, gl::Rectangle const&, unsigned int, gl::Framebuffer*)
rx::TextureNULL::copySubImage(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, gl::Rectangle const&, gl::Framebuffer*)
rx::TextureNULL::copySubTexture(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, unsigned long, gl::Box const&, bool, bool, bool, gl::Texture const*)
rx::TextureNULL::copyTexture(gl::Context const*, gl::ImageIndex const&, unsigned int, unsigned int, unsigned long, bool, bool, bool, gl::Texture const*)
rx::TextureNULL::generateMipmap(gl::Context const*)
rx::TextureNULL::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::TextureNULL::releaseTexImage(gl::Context const*)
rx::TextureNULL::setBaseLevel(gl::Context const*, unsigned int)
rx::TextureNULL::setCompressedImage(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, gl::PixelUnpackState const&, unsigned long, unsigned char const*)
rx::TextureNULL::setCompressedSubImage(gl::Context const*, gl::ImageIndex const&, gl::Box const&, unsigned int, gl::PixelUnpackState const&, unsigned long, unsigned char const*)
rx::TextureNULL::setEGLImageTarget(gl::Context const*, gl::TextureType, egl::Image*)
rx::TextureNULL::setImage(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer*, unsigned char const*)
rx::TextureNULL::setImageExternal(gl::Context const*, gl::TextureType, egl::Stream*, egl::Stream::GLTextureDescription const&)
rx::TextureNULL::setStorage(gl::Context const*, gl::TextureType, unsigned long, unsigned int, gl::Extents const&)
rx::TextureNULL::setStorageExternalMemory(gl::Context const*, gl::TextureType, unsigned long, unsigned int, gl::Extents const&, gl::MemoryObject*, unsigned long)
rx::TextureNULL::setStorageMultisample(gl::Context const*, gl::TextureType, int, int, gl::Extents const&, bool)
rx::TextureNULL::setSubImage(gl::Context const*, gl::ImageIndex const&, gl::Box const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer*, unsigned char const*)
rx::TextureNULL::syncState(gl::Context const*, angle::BitSetT<24ul, unsigned long, unsigned long> const&, gl::TextureCommand)
rx::TextureNULL::~TextureNULL()
rx::TextureVk::TextureVk(gl::TextureState const&, rx::RendererVk*)
rx::TextureVk::bindTexImage(gl::Context const*, egl::Surface*)
rx::TextureVk::copyAndStageImageSubresource(rx::ContextVk*, gl::ImageDesc const&, bool, unsigned int, unsigned int, unsigned int)
rx::TextureVk::copyBufferDataToImage(rx::ContextVk*, rx::vk::BufferHelper*, gl::ImageIndex, unsigned int, unsigned int, gl::Box const&, unsigned long)
rx::TextureVk::copyBufferDataToImage(rx::ContextVk*, rx::vk::BufferHelper*, gl::ImageIndex, unsigned int, unsigned int, gl::Box const&, unsigned long)::trace_event_unique_catstatic1288
rx::TextureVk::copyCompressedTexture(gl::Context const*, gl::Texture const*)
rx::TextureVk::copyImage(gl::Context const*, gl::ImageIndex const&, gl::Rectangle const&, unsigned int, gl::Framebuffer*)
rx::TextureVk::copyImageDataToBufferAndGetData(rx::ContextVk*, unsigned long, unsigned int, gl::Box const&, unsigned char**)
rx::TextureVk::copyImageDataToBufferAndGetData(rx::ContextVk*, unsigned long, unsigned int, gl::Box const&, unsigned char**)::trace_event_unique_catstatic1249
rx::TextureVk::copySubImage(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, gl::Rectangle const&, gl::Framebuffer*)
rx::TextureVk::copySubImageImpl(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, gl::Rectangle const&, gl::InternalFormat const&, gl::Framebuffer*)
rx::TextureVk::copySubImageImplWithDraw(rx::ContextVk*, gl::ImageIndex const&, gl::Offset const&, rx::vk::Format const&, unsigned long, gl::Box const&, bool, bool, bool, bool, rx::vk::ImageHelper*, rx::vk::ImageView const*)
rx::TextureVk::copySubImageImplWithTransfer(rx::ContextVk*, gl::ImageIndex const&, gl::Offset const&, rx::vk::Format const&, unsigned long, unsigned long, gl::Box const&, rx::vk::ImageHelper*)
rx::TextureVk::copySubTexture(gl::Context const*, gl::ImageIndex const&, gl::Offset const&, unsigned long, gl::Box const&, bool, bool, bool, gl::Texture const*)
rx::TextureVk::copySubTextureImpl(rx::ContextVk*, gl::ImageIndex const&, gl::Offset const&, gl::InternalFormat const&, unsigned long, gl::Box const&, bool, bool, bool, rx::TextureVk*)
rx::TextureVk::copyTexture(gl::Context const*, gl::ImageIndex const&, unsigned int, unsigned int, unsigned long, bool, bool, bool, gl::Texture const*)
rx::TextureVk::ensureImageAllocated(rx::ContextVk*, rx::vk::Format const&)
rx::TextureVk::ensureImageInitialized(rx::ContextVk*, rx::ImageMipLevels)
rx::TextureVk::ensureImageInitializedImpl(rx::ContextVk*, gl::Extents const&, unsigned int, rx::vk::Format const&)
rx::TextureVk::generateMipmap(gl::Context const*)
rx::TextureVk::generateMipmapLevelsWithCPU(rx::ContextVk*, angle::Format const&, unsigned int, unsigned int, unsigned int, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*)
rx::TextureVk::generateMipmapsWithCPU(gl::Context const*)
rx::TextureVk::getAttachmentRenderTarget(gl::Context const*, unsigned int, gl::ImageIndex const&, int, rx::FramebufferAttachmentRenderTarget**)
rx::TextureVk::getColorReadFormat(gl::Context const*)
rx::TextureVk::getColorReadType(gl::Context const*)
rx::TextureVk::getFetchImageViewAndRecordUse(rx::ContextVk*) const
rx::TextureVk::getReadImageViewAndRecordUse(rx::ContextVk*) const
rx::TextureVk::getStorageImageView(rx::ContextVk*, gl::ImageUnit const&, rx::vk::ImageView const**)
rx::TextureVk::getTexImage(gl::Context const*, gl::PixelPackState const&, gl::Buffer*, gl::TextureTarget, int, unsigned int, unsigned int, void*)
rx::TextureVk::initImage(rx::ContextVk*, rx::vk::Format const&, bool, gl::Extents const&, unsigned int)
rx::TextureVk::initImageViews(rx::ContextVk*, rx::vk::Format const&, bool, unsigned int, unsigned int)
rx::TextureVk::initRenderTargets(rx::ContextVk*, unsigned int, unsigned int)
rx::TextureVk::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::TextureVk::onDestroy(gl::Context const*)
rx::TextureVk::onSubjectStateChange(unsigned long, angle::SubjectMessage)
rx::TextureVk::redefineLevel(gl::Context const*, gl::ImageIndex const&, rx::vk::Format const&, gl::Extents const&)
rx::TextureVk::releaseImage(rx::ContextVk*)
rx::TextureVk::releaseOwnershipOfImage(gl::Context const*)
rx::TextureVk::releaseTexImage(gl::Context const*)
rx::TextureVk::respecifyImageAttributesAndLevels(rx::ContextVk*, unsigned int, unsigned int, unsigned int)
rx::TextureVk::setBaseLevel(gl::Context const*, unsigned int)
rx::TextureVk::setCompressedImage(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, gl::PixelUnpackState const&, unsigned long, unsigned char const*)
rx::TextureVk::setCompressedSubImage(gl::Context const*, gl::ImageIndex const&, gl::Box const&, unsigned int, gl::PixelUnpackState const&, unsigned long, unsigned char const*)
rx::TextureVk::setEGLImageTarget(gl::Context const*, gl::TextureType, egl::Image*)
rx::TextureVk::setImage(gl::Context const*, gl::ImageIndex const&, unsigned int, gl::Extents const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer*, unsigned char const*)
rx::TextureVk::setImageExternal(gl::Context const*, gl::TextureType, egl::Stream*, egl::Stream::GLTextureDescription const&)
rx::TextureVk::setImageHelper(rx::ContextVk*, rx::vk::ImageHelper*, gl::TextureType, rx::vk::Format const&, unsigned int, unsigned int, unsigned int, bool)
rx::TextureVk::setStorage(gl::Context const*, gl::TextureType, unsigned long, unsigned int, gl::Extents const&)
rx::TextureVk::setStorageExternalMemory(gl::Context const*, gl::TextureType, unsigned long, unsigned int, gl::Extents const&, gl::MemoryObject*, unsigned long)
rx::TextureVk::setStorageMultisample(gl::Context const*, gl::TextureType, int, int, gl::Extents const&, bool)
rx::TextureVk::setSubImage(gl::Context const*, gl::ImageIndex const&, gl::Box const&, unsigned int, unsigned int, gl::PixelUnpackState const&, gl::Buffer*, unsigned char const*)
rx::TextureVk::setSubImageImpl(gl::Context const*, gl::ImageIndex const&, gl::Box const&, gl::InternalFormat const&, unsigned int, gl::PixelUnpackState const&, gl::Buffer*, unsigned char const*, rx::vk::Format const&)
rx::TextureVk::syncState(gl::Context const*, angle::BitSetT<24ul, unsigned long, unsigned long> const&, gl::TextureCommand)
rx::TextureVk::~TextureVk()
rx::TransformFeedbackGL::TransformFeedbackGL(gl::TransformFeedbackState const&, rx::FunctionsGL const*, rx::StateManagerGL*)
rx::TransformFeedbackGL::begin(gl::Context const*, gl::PrimitiveMode)
rx::TransformFeedbackGL::bindIndexedBuffer(gl::Context const*, unsigned long, gl::OffsetBindingPointer<gl::Buffer> const&)
rx::TransformFeedbackGL::end(gl::Context const*)
rx::TransformFeedbackGL::getTransformFeedbackID() const
rx::TransformFeedbackGL::pause(gl::Context const*)
rx::TransformFeedbackGL::resume(gl::Context const*)
rx::TransformFeedbackGL::syncActiveState(gl::Context const*, bool, gl::PrimitiveMode) const
rx::TransformFeedbackGL::syncPausedState(bool) const
rx::TransformFeedbackGL::~TransformFeedbackGL()
rx::TransformFeedbackImpl::onDestroy(gl::Context const*)
rx::TransformFeedbackNULL::TransformFeedbackNULL(gl::TransformFeedbackState const&)
rx::TransformFeedbackNULL::begin(gl::Context const*, gl::PrimitiveMode)
rx::TransformFeedbackNULL::bindIndexedBuffer(gl::Context const*, unsigned long, gl::OffsetBindingPointer<gl::Buffer> const&)
rx::TransformFeedbackNULL::end(gl::Context const*)
rx::TransformFeedbackNULL::pause(gl::Context const*)
rx::TransformFeedbackNULL::resume(gl::Context const*)
rx::TransformFeedbackNULL::~TransformFeedbackNULL()
rx::TransformFeedbackVk::TransformFeedbackVk(gl::TransformFeedbackState const&)
rx::TransformFeedbackVk::begin(gl::Context const*, gl::PrimitiveMode)
rx::TransformFeedbackVk::bindIndexedBuffer(gl::Context const*, unsigned long, gl::OffsetBindingPointer<gl::Buffer> const&)
rx::TransformFeedbackVk::end(gl::Context const*)
rx::TransformFeedbackVk::getBufferOffsets(rx::ContextVk*, int, int*, unsigned long) const
rx::TransformFeedbackVk::initDescriptorSet(rx::ContextVk*, unsigned long, rx::vk::BufferHelper*, VkDescriptorSet_T*) const
rx::TransformFeedbackVk::onDestroy(gl::Context const*)
rx::TransformFeedbackVk::pause(gl::Context const*)
rx::TransformFeedbackVk::resume(gl::Context const*)
rx::TransformFeedbackVk::updateDescriptorSet(rx::ContextVk*, gl::ProgramState const&, VkDescriptorSet_T*) const
rx::TransformFeedbackVk::updateDescriptorSetLayout(rx::ContextVk*, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >&, unsigned long, rx::vk::DescriptorSetLayoutDesc*) const
rx::TransformFeedbackVk::writeDescriptorSet(rx::ContextVk*, unsigned long, VkDescriptorBufferInfo*, VkDescriptorSet_T*) const
rx::TransformFeedbackVk::~TransformFeedbackVk()
rx::TranslateTask::operator()()
rx::TranslateTask::operator()()::trace_event_unique_catstatic50
rx::TranslateTask::~TranslateTask()
rx::TranslateTaskGL::operator()()
rx::TranslateTaskGL::operator()()::trace_event_unique_catstatic42
rx::TranslateTaskGL::~TranslateTaskGL()
rx::UtilsVk::ClearFramebufferParameters::ClearFramebufferParameters()
rx::UtilsVk::UtilsVk()
rx::UtilsVk::blitResolveImpl(rx::ContextVk*, rx::FramebufferVk*, rx::vk::ImageHelper*, rx::vk::ImageView const*, rx::vk::ImageView const*, rx::vk::ImageView const*, rx::UtilsVk::BlitResolveParameters const&)
rx::UtilsVk::clearFramebuffer(rx::ContextVk*, rx::FramebufferVk*, rx::UtilsVk::ClearFramebufferParameters const&)
rx::UtilsVk::colorBlitResolve(rx::ContextVk*, rx::FramebufferVk*, rx::vk::ImageHelper*, rx::vk::ImageView const*, rx::UtilsVk::BlitResolveParameters const&)
rx::UtilsVk::convertIndexBuffer(rx::ContextVk*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::UtilsVk::ConvertIndexParameters const&)
rx::UtilsVk::convertIndexIndirectBuffer(rx::ContextVk*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::UtilsVk::ConvertIndexIndirectParameters const&)
rx::UtilsVk::convertLineLoopArrayIndirectBuffer(rx::ContextVk*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::UtilsVk::ConvertLineLoopArrayIndirectParameters const&)
rx::UtilsVk::convertLineLoopIndexIndirectBuffer(rx::ContextVk*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::UtilsVk::ConvertLineLoopIndexIndirectParameters const&)
rx::UtilsVk::convertVertexBuffer(rx::ContextVk*, rx::vk::BufferHelper*, rx::vk::BufferHelper*, rx::UtilsVk::ConvertVertexParameters const&)
rx::UtilsVk::copyImage(rx::ContextVk*, rx::vk::ImageHelper*, rx::vk::ImageView const*, rx::vk::ImageHelper*, rx::vk::ImageView const*, rx::UtilsVk::CopyImageParameters const&)
rx::UtilsVk::depthStencilBlitResolve(rx::ContextVk*, rx::FramebufferVk*, rx::vk::ImageHelper*, rx::vk::ImageView const*, rx::vk::ImageView const*, rx::UtilsVk::BlitResolveParameters const&)
rx::UtilsVk::destroy(VkDevice_T*)
rx::UtilsVk::ensureResourcesInitialized(rx::ContextVk*, rx::UtilsVk::Function, VkDescriptorPoolSize*, unsigned long, unsigned long)
rx::UtilsVk::ensureSamplersInitialized(rx::ContextVk*)
rx::UtilsVk::setupProgram(rx::ContextVk*, rx::UtilsVk::Function, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >*, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >*, rx::vk::ShaderProgramHelper*, rx::vk::GraphicsPipelineDesc const*, VkDescriptorSet_T*, void const*, unsigned long, rx::vk::priv::SecondaryCommandBuffer*)
rx::UtilsVk::startRenderPass(rx::ContextVk*, rx::vk::ImageHelper*, rx::vk::ImageView const*, rx::vk::RenderPassDesc const&, gl::Rectangle const&, rx::vk::priv::SecondaryCommandBuffer**)
rx::UtilsVk::stencilBlitResolveNoShaderExport(rx::ContextVk*, rx::FramebufferVk*, rx::vk::ImageHelper*, rx::vk::ImageView const*, rx::UtilsVk::BlitResolveParameters const&)
rx::UtilsVk::~UtilsVk()
rx::VertexArrayGL::VertexArrayGL(gl::VertexArrayState const&, rx::FunctionsGL const*, rx::StateManagerGL*)
rx::VertexArrayGL::applyActiveAttribLocationsMask(angle::BitSetT<16ul, unsigned long, unsigned long> const&)
rx::VertexArrayGL::applyNumViewsToDivisor(int)
rx::VertexArrayGL::destroy(gl::Context const*)
rx::VertexArrayGL::getAppliedElementArrayBufferID() const
rx::VertexArrayGL::getVertexArrayID() const
rx::VertexArrayGL::streamAttributes(gl::Context const*, angle::BitSetT<16ul, unsigned long, unsigned long> const&, int, gl::IndexRange const&) const
rx::VertexArrayGL::syncClientSideData(gl::Context const*, angle::BitSetT<16ul, unsigned long, unsigned long> const&, int, int, int) const
rx::VertexArrayGL::syncDirtyAttrib(gl::Context const*, unsigned long, angle::BitSetT<5ul, unsigned long, unsigned long> const&)
rx::VertexArrayGL::syncDrawState(gl::Context const*, angle::BitSetT<16ul, unsigned long, unsigned long> const&, int, int, gl::DrawElementsType, void const*, int, bool, void const**) const
rx::VertexArrayGL::syncIndexData(gl::Context const*, int, gl::DrawElementsType, void const*, bool, bool, gl::IndexRange*, void const**) const
rx::VertexArrayGL::syncState(gl::Context const*, angle::BitSetT<50ul, unsigned long, unsigned long> const&, std::__1::array<angle::BitSetT<5ul, unsigned long, unsigned long>, 16ul>*, std::__1::array<angle::BitSetT<2ul, unsigned long, unsigned long>, 16ul>*)
rx::VertexArrayGL::updateAttribFormat(unsigned long)
rx::VertexArrayGL::updateAttribPointer(gl::Context const*, unsigned long)
rx::VertexArrayGL::updateBindingBuffer(gl::Context const*, unsigned long)
rx::VertexArrayGL::~VertexArrayGL()
rx::VertexArrayImpl::destroy(gl::Context const*)
rx::VertexArrayImpl::~VertexArrayImpl()
rx::VertexArrayNULL::VertexArrayNULL(gl::VertexArrayState const&)
rx::VertexArrayNULL::syncState(gl::Context const*, angle::BitSetT<50ul, unsigned long, unsigned long> const&, std::__1::array<angle::BitSetT<5ul, unsigned long, unsigned long>, 16ul>*, std::__1::array<angle::BitSetT<2ul, unsigned long, unsigned long>, 16ul>*)
rx::VertexArrayNULL::~VertexArrayNULL()
rx::VertexArrayVk::VertexArrayVk(rx::ContextVk*, gl::VertexArrayState const&)
rx::VertexArrayVk::convertIndexBufferCPU(rx::ContextVk*, gl::DrawElementsType, unsigned long, void const*)
rx::VertexArrayVk::convertIndexBufferGPU(rx::ContextVk*, rx::BufferVk*, void const*)
rx::VertexArrayVk::convertIndexBufferIndirectGPU(rx::ContextVk*, rx::vk::BufferHelper*, unsigned long, rx::vk::BufferHelper**, unsigned long*)
rx::VertexArrayVk::convertVertexBufferCPU(rx::ContextVk*, rx::BufferVk*, gl::VertexBinding const&, unsigned long, rx::vk::Format const&, rx::ConversionBuffer*, unsigned int)
rx::VertexArrayVk::convertVertexBufferCPU(rx::ContextVk*, rx::BufferVk*, gl::VertexBinding const&, unsigned long, rx::vk::Format const&, rx::ConversionBuffer*, unsigned int)::trace_event_unique_catstatic400
rx::VertexArrayVk::convertVertexBufferGPU(rx::ContextVk*, rx::BufferVk*, gl::VertexBinding const&, unsigned long, rx::vk::Format const&, rx::ConversionBuffer*, unsigned int)
rx::VertexArrayVk::destroy(gl::Context const*)
rx::VertexArrayVk::handleLineLoop(rx::ContextVk*, int, int, gl::DrawElementsType, void const*, unsigned int*)
rx::VertexArrayVk::handleLineLoopIndexIndirect(rx::ContextVk*, gl::DrawElementsType, rx::vk::BufferHelper*, unsigned long, rx::vk::BufferHelper**, unsigned long*)
rx::VertexArrayVk::handleLineLoopIndirectDraw(gl::Context const*, rx::vk::BufferHelper*, unsigned long, rx::vk::BufferHelper**, unsigned long*)
rx::VertexArrayVk::syncDirtyAttrib(rx::ContextVk*, gl::VertexAttribute const&, gl::VertexBinding const&, unsigned long, bool)
rx::VertexArrayVk::syncState(gl::Context const*, angle::BitSetT<50ul, unsigned long, unsigned long> const&, std::__1::array<angle::BitSetT<5ul, unsigned long, unsigned long>, 16ul>*, std::__1::array<angle::BitSetT<2ul, unsigned long, unsigned long>, 16ul>*)
rx::VertexArrayVk::updateActiveAttribInfo(rx::ContextVk*)
rx::VertexArrayVk::updateDefaultAttrib(rx::ContextVk*, unsigned long, VkBuffer_T*, rx::vk::BufferHelper*, unsigned int)
rx::VertexArrayVk::updateStreamedAttribs(gl::Context const*, int, int, int, gl::DrawElementsType, void const*)
rx::VertexArrayVk::~VertexArrayVk()
rx::VulkanResultString(VkResult)
rx::WaitableCompileEvent::WaitableCompileEvent(std::__1::shared_ptr<angle::WaitableEvent>)
rx::WaitableCompileEvent::getInfoLog()
rx::WaitableCompileEvent::isReady()
rx::WaitableCompileEvent::wait()
rx::WaitableCompileEvent::~WaitableCompileEvent()
rx::WaitableCompileEventDone::WaitableCompileEventDone(std::__1::function<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>&&, bool)
rx::WaitableCompileEventDone::getResult()
rx::WaitableCompileEventDone::postTranslate(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::WaitableCompileEventDone::~WaitableCompileEventDone()
rx::WaitableCompileEventImpl::getResult()
rx::WaitableCompileEventImpl::postTranslate(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::WaitableCompileEventImpl::~WaitableCompileEventImpl()
rx::WaitableCompileEventNativeParallel::getResult()
rx::WaitableCompileEventNativeParallel::isReady()
rx::WaitableCompileEventNativeParallel::postTranslate(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::WaitableCompileEventNativeParallel::wait()
rx::WaitableCompileEventNativeParallel::~WaitableCompileEventNativeParallel()
rx::WaitableCompileEventWorkerContext::getResult()
rx::WaitableCompileEventWorkerContext::postTranslate(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
rx::WaitableCompileEventWorkerContext::~WaitableCompileEventWorkerContext()
rx::WindowSurfaceEGL::WindowSurfaceEGL(egl::SurfaceState const&, rx::FunctionsEGL const*, void*, unsigned long)
rx::WindowSurfaceEGL::initialize(egl::Display const*)
rx::WindowSurfaceEGL::initialize(egl::Display const*)::kForwardedWindowSurfaceAttributes
rx::WindowSurfaceEGL::~WindowSurfaceEGL()
rx::WindowSurfaceGLX::WindowSurfaceGLX(egl::SurfaceState const&, rx::FunctionsGLX const&, rx::DisplayGLX*, unsigned long, _XDisplay*, void*)
rx::WindowSurfaceGLX::bindTexImage(gl::Context const*, gl::Texture*, int)
rx::WindowSurfaceGLX::checkForResize()
rx::WindowSurfaceGLX::getDrawable() const
rx::WindowSurfaceGLX::getHeight() const
rx::WindowSurfaceGLX::getMscRate(int*, int*)
rx::WindowSurfaceGLX::getSwapBehavior() const
rx::WindowSurfaceGLX::getSyncValues(unsigned long*, unsigned long*, unsigned long*)
rx::WindowSurfaceGLX::getWidth() const
rx::WindowSurfaceGLX::initialize(egl::Display const*)
rx::WindowSurfaceGLX::isPostSubBufferSupported() const
rx::WindowSurfaceGLX::makeCurrent(gl::Context const*)
rx::WindowSurfaceGLX::postSubBuffer(gl::Context const*, int, int, int, int)
rx::WindowSurfaceGLX::querySurfacePointerANGLE(int, void**)
rx::WindowSurfaceGLX::releaseTexImage(gl::Context const*, int)
rx::WindowSurfaceGLX::setSwapInterval(int)
rx::WindowSurfaceGLX::swap(gl::Context const*)
rx::WindowSurfaceGLX::~WindowSurfaceGLX()
rx::WindowSurfaceVk::WindowSurfaceVk(egl::SurfaceState const&, unsigned long)
rx::WindowSurfaceVk::bindTexImage(gl::Context const*, gl::Texture*, int)
rx::WindowSurfaceVk::checkForOutOfDateSwapchain(rx::ContextVk*, unsigned int, bool)
rx::WindowSurfaceVk::createDefaultFramebuffer(gl::Context const*, gl::FramebufferState const&)
rx::WindowSurfaceVk::createSwapChain(rx::vk::Context*, gl::Extents const&, VkSwapchainKHR_T*)
rx::WindowSurfaceVk::createSwapChain(rx::vk::Context*, gl::Extents const&, VkSwapchainKHR_T*)::trace_event_unique_catstatic841
rx::WindowSurfaceVk::destroy(egl::Display const*)
rx::WindowSurfaceVk::destroySwapChainImages(rx::DisplayVk*)
rx::WindowSurfaceVk::getAcquireImageSemaphore()
rx::WindowSurfaceVk::getCurrentFramebuffer(rx::ContextVk*, rx::vk::RenderPass const&, rx::vk::Framebuffer**)
rx::WindowSurfaceVk::getHeight() const
rx::WindowSurfaceVk::getMscRate(int*, int*)
rx::WindowSurfaceVk::getSwapBehavior() const
rx::WindowSurfaceVk::getSyncValues(unsigned long*, unsigned long*, unsigned long*)
rx::WindowSurfaceVk::getUserHeight(egl::Display const*, int*) const
rx::WindowSurfaceVk::getUserWidth(egl::Display const*, int*) const
rx::WindowSurfaceVk::getWidth() const
rx::WindowSurfaceVk::initialize(egl::Display const*)
rx::WindowSurfaceVk::initializeContents(gl::Context const*, gl::ImageIndex const&)
rx::WindowSurfaceVk::initializeImpl(rx::DisplayVk*)
rx::WindowSurfaceVk::isPostSubBufferSupported() const
rx::WindowSurfaceVk::nextSwapchainImage(rx::vk::Context*)
rx::WindowSurfaceVk::postSubBuffer(gl::Context const*, int, int, int, int)
rx::WindowSurfaceVk::present(rx::ContextVk*, int*, int, void const*, bool*)
rx::WindowSurfaceVk::present(rx::ContextVk*, int*, int, void const*, bool*)::trace_event_unique_catstatic1125
rx::WindowSurfaceVk::present(rx::ContextVk*, int*, int, void const*, bool*)::trace_event_unique_catstatic1130
rx::WindowSurfaceVk::querySurfacePointerANGLE(int, void**)
rx::WindowSurfaceVk::recreateSwapchain(rx::ContextVk*, gl::Extents const&, unsigned int)
rx::WindowSurfaceVk::releaseSwapchainImages(rx::ContextVk*)
rx::WindowSurfaceVk::releaseTexImage(gl::Context const*, int)
rx::WindowSurfaceVk::resizeSwapchainImages(rx::vk::Context*, unsigned int)
rx::WindowSurfaceVk::setSwapInterval(int)
rx::WindowSurfaceVk::swap(gl::Context const*)
rx::WindowSurfaceVk::swapImpl(gl::Context const*, int*, int, void const*)
rx::WindowSurfaceVk::swapImpl(gl::Context const*, int*, int, void const*)::trace_event_unique_catstatic1291
rx::WindowSurfaceVk::swapImpl(gl::Context const*, int*, int, void const*)::trace_event_unique_catstatic1307
rx::WindowSurfaceVk::swapWithDamage(gl::Context const*, int*, int)
rx::WindowSurfaceVk::~WindowSurfaceVk()
rx::WindowSurfaceVkXcb::WindowSurfaceVkXcb(egl::SurfaceState const&, unsigned long, xcb_connection_t*)
rx::WindowSurfaceVkXcb::createSurfaceVk(rx::vk::Context*, gl::Extents*)
rx::WindowSurfaceVkXcb::getCurrentWindowSize(rx::vk::Context*, gl::Extents*)
rx::WindowSurfaceVkXcb::~WindowSurfaceVkXcb()
rx::WorkerContextGLX::makeCurrent()
rx::WorkerContextGLX::unmakeCurrent()
rx::WorkerContextGLX::~WorkerContextGLX()
rx::egl_vk::GenerateConfigs(unsigned int const*, unsigned long, unsigned int const*, unsigned long, rx::DisplayVk*)
rx::egl_vk::kConfigDepthStencilFormats
rx::glActiveShaderProgramNULL(unsigned int, unsigned int)
rx::glActiveTextureNULL(unsigned int)
rx::glAttachShaderNULL(unsigned int, unsigned int)
rx::glBeginConditionalRenderNULL(unsigned int, unsigned int)
rx::glBeginQueryIndexedNULL(unsigned int, unsigned int, unsigned int)
rx::glBeginQueryNULL(unsigned int, unsigned int)
rx::glBeginTransformFeedbackNULL(unsigned int)
rx::glBindAttribLocationNULL(unsigned int, unsigned int, char const*)
rx::glBindBufferBaseNULL(unsigned int, unsigned int, unsigned int)
rx::glBindBufferNULL(unsigned int, unsigned int)
rx::glBindBufferRangeNULL(unsigned int, unsigned int, unsigned int, long, long)
rx::glBindBuffersBaseNULL(unsigned int, unsigned int, int, unsigned int const*)
rx::glBindBuffersRangeNULL(unsigned int, unsigned int, int, unsigned int const*, long const*, long const*)
rx::glBindFragDataLocationIndexedNULL(unsigned int, unsigned int, unsigned int, char const*)
rx::glBindFragDataLocationNULL(unsigned int, unsigned int, char const*)
rx::glBindFramebufferNULL(unsigned int, unsigned int)
rx::glBindImageTextureNULL(unsigned int, unsigned int, int, unsigned char, int, unsigned int, unsigned int)
rx::glBindImageTexturesNULL(unsigned int, int, unsigned int const*)
rx::glBindProgramPipelineNULL(unsigned int)
rx::glBindRenderbufferNULL(unsigned int, unsigned int)
rx::glBindSamplerNULL(unsigned int, unsigned int)
rx::glBindSamplersNULL(unsigned int, int, unsigned int const*)
rx::glBindTextureNULL(unsigned int, unsigned int)
rx::glBindTextureUnitNULL(unsigned int, unsigned int)
rx::glBindTexturesNULL(unsigned int, int, unsigned int const*)
rx::glBindTransformFeedbackNULL(unsigned int, unsigned int)
rx::glBindVertexArrayNULL(unsigned int)
rx::glBindVertexBufferNULL(unsigned int, unsigned int, long, int)
rx::glBindVertexBuffersNULL(unsigned int, int, unsigned int const*, long const*, int const*)
rx::glBlendBarrierNULL()
rx::glBlendColorNULL(float, float, float, float)
rx::glBlendEquationNULL(unsigned int)
rx::glBlendEquationSeparateNULL(unsigned int, unsigned int)
rx::glBlendEquationSeparateiNULL(unsigned int, unsigned int, unsigned int)
rx::glBlendEquationiNULL(unsigned int, unsigned int)
rx::glBlendFuncNULL(unsigned int, unsigned int)
rx::glBlendFuncSeparateNULL(unsigned int, unsigned int, unsigned int, unsigned int)
rx::glBlendFuncSeparateiNULL(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
rx::glBlendFunciNULL(unsigned int, unsigned int, unsigned int)
rx::glBlitFramebufferNULL(int, int, int, int, int, int, int, int, unsigned int, unsigned int)
rx::glBlitNamedFramebufferNULL(unsigned int, unsigned int, int, int, int, int, int, int, int, int, unsigned int, unsigned int)
rx::glBufferDataNULL(unsigned int, long, void const*, unsigned int)
rx::glBufferStorageMemEXTNULL(unsigned int, long, unsigned int, unsigned long)
rx::glBufferStorageNULL(unsigned int, long, void const*, unsigned int)
rx::glBufferSubDataNULL(unsigned int, long, long, void const*)
rx::glCheckFramebufferStatusNULL(unsigned int)
rx::glCheckNamedFramebufferStatusNULL(unsigned int, unsigned int)
rx::glClampColorNULL(unsigned int, unsigned int)
rx::glClearBufferDataNULL(unsigned int, unsigned int, unsigned int, unsigned int, void const*)
rx::glClearBufferSubDataNULL(unsigned int, unsigned int, long, long, unsigned int, unsigned int, void const*)
rx::glClearBufferfiNULL(unsigned int, int, float, int)
rx::glClearBufferfvNULL(unsigned int, int, float const*)
rx::glClearBufferivNULL(unsigned int, int, int const*)
rx::glClearBufferuivNULL(unsigned int, int, unsigned int const*)
rx::glClearColorNULL(float, float, float, float)
rx::glClearDepthNULL(double)
rx::glClearDepthfNULL(float)
rx::glClearNULL(unsigned int)
rx::glClearNamedBufferDataNULL(unsigned int, unsigned int, unsigned int, unsigned int, void const*)
rx::glClearNamedBufferSubDataNULL(unsigned int, unsigned int, long, long, unsigned int, unsigned int, void const*)
rx::glClearNamedFramebufferfiNULL(unsigned int, unsigned int, int, float, int)
rx::glClearNamedFramebufferfvNULL(unsigned int, unsigned int, int, float const*)
rx::glClearNamedFramebufferivNULL(unsigned int, unsigned int, int, int const*)
rx::glClearNamedFramebufferuivNULL(unsigned int, unsigned int, int, unsigned int const*)
rx::glClearStencilNULL(int)
rx::glClearTexImageNULL(unsigned int, int, unsigned int, unsigned int, void const*)
rx::glClearTexSubImageNULL(unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glClientWaitSyncNULL(__GLsync*, unsigned int, unsigned long)
rx::glClipControlNULL(unsigned int, unsigned int)
rx::glColorMaskNULL(unsigned char, unsigned char, unsigned char, unsigned char)
rx::glColorMaskiNULL(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
rx::glCompileShaderNULL(unsigned int)
rx::glCompressedTexImage1DNULL(unsigned int, int, unsigned int, int, int, int, void const*)
rx::glCompressedTexImage2DNULL(unsigned int, int, unsigned int, int, int, int, int, void const*)
rx::glCompressedTexImage3DNULL(unsigned int, int, unsigned int, int, int, int, int, int, void const*)
rx::glCompressedTexSubImage1DNULL(unsigned int, int, int, int, unsigned int, int, void const*)
rx::glCompressedTexSubImage2DNULL(unsigned int, int, int, int, int, int, unsigned int, int, void const*)
rx::glCompressedTexSubImage3DNULL(unsigned int, int, int, int, int, int, int, int, unsigned int, int, void const*)
rx::glCompressedTextureSubImage1DNULL(unsigned int, int, int, int, unsigned int, int, void const*)
rx::glCompressedTextureSubImage2DNULL(unsigned int, int, int, int, int, int, unsigned int, int, void const*)
rx::glCompressedTextureSubImage3DNULL(unsigned int, int, int, int, int, int, int, int, unsigned int, int, void const*)
rx::glCopyBufferSubDataNULL(unsigned int, unsigned int, long, long, long)
rx::glCopyImageSubDataNULL(unsigned int, unsigned int, int, int, int, int, unsigned int, unsigned int, int, int, int, int, int, int, int)
rx::glCopyNamedBufferSubDataNULL(unsigned int, unsigned int, long, long, long)
rx::glCopyTexImage1DNULL(unsigned int, int, unsigned int, int, int, int, int)
rx::glCopyTexImage2DNULL(unsigned int, int, unsigned int, int, int, int, int, int)
rx::glCopyTexSubImage1DNULL(unsigned int, int, int, int, int, int)
rx::glCopyTexSubImage2DNULL(unsigned int, int, int, int, int, int, int, int)
rx::glCopyTexSubImage3DNULL(unsigned int, int, int, int, int, int, int, int, int)
rx::glCopyTextureSubImage1DNULL(unsigned int, int, int, int, int, int)
rx::glCopyTextureSubImage2DNULL(unsigned int, int, int, int, int, int, int, int)
rx::glCopyTextureSubImage3DNULL(unsigned int, int, int, int, int, int, int, int, int)
rx::glCoverageModulationNVNULL(unsigned int)
rx::glCreateBuffersNULL(int, unsigned int*)
rx::glCreateFramebuffersNULL(int, unsigned int*)
rx::glCreateMemoryObjectsEXTNULL(int, unsigned int*)
rx::glCreateProgramNULL()
rx::glCreateProgramPipelinesNULL(int, unsigned int*)
rx::glCreateQueriesNULL(unsigned int, int, unsigned int*)
rx::glCreateRenderbuffersNULL(int, unsigned int*)
rx::glCreateSamplersNULL(int, unsigned int*)
rx::glCreateShaderNULL(unsigned int)
rx::glCreateShaderProgramvNULL(unsigned int, int, char const* const*)
rx::glCreateTexturesNULL(unsigned int, int, unsigned int*)
rx::glCreateTransformFeedbacksNULL(int, unsigned int*)
rx::glCreateVertexArraysNULL(int, unsigned int*)
rx::glCullFaceNULL(unsigned int)
rx::glDebugMessageCallbackNULL(void (*)(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*, void const*), void const*)
rx::glDebugMessageControlNULL(unsigned int, unsigned int, unsigned int, int, unsigned int const*, unsigned char)
rx::glDebugMessageInsertNULL(unsigned int, unsigned int, unsigned int, unsigned int, int, char const*)
rx::glDeleteBuffersNULL(int, unsigned int const*)
rx::glDeleteFencesNVNULL(int, unsigned int const*)
rx::glDeleteFramebuffersNULL(int, unsigned int const*)
rx::glDeleteMemoryObjectsEXTNULL(int, unsigned int const*)
rx::glDeleteProgramNULL(unsigned int)
rx::glDeleteProgramPipelinesNULL(int, unsigned int const*)
rx::glDeleteQueriesNULL(int, unsigned int const*)
rx::glDeleteRenderbuffersNULL(int, unsigned int const*)
rx::glDeleteSamplersNULL(int, unsigned int const*)
rx::glDeleteSemaphoresEXTNULL(int, unsigned int const*)
rx::glDeleteShaderNULL(unsigned int)
rx::glDeleteSyncNULL(__GLsync*)
rx::glDeleteTexturesNULL(int, unsigned int const*)
rx::glDeleteTransformFeedbacksNULL(int, unsigned int const*)
rx::glDeleteVertexArraysNULL(int, unsigned int const*)
rx::glDepthFuncNULL(unsigned int)
rx::glDepthMaskNULL(unsigned char)
rx::glDepthRangeArrayvNULL(unsigned int, int, double const*)
rx::glDepthRangeIndexedNULL(unsigned int, double, double)
rx::glDepthRangeNULL(double, double)
rx::glDepthRangefNULL(float, float)
rx::glDetachShaderNULL(unsigned int, unsigned int)
rx::glDisableNULL(unsigned int)
rx::glDisableVertexArrayAttribNULL(unsigned int, unsigned int)
rx::glDisableVertexAttribArrayNULL(unsigned int)
rx::glDisableiNULL(unsigned int, unsigned int)
rx::glDiscardFramebufferEXTNULL(unsigned int, int, unsigned int const*)
rx::glDispatchComputeIndirectNULL(long)
rx::glDispatchComputeNULL(unsigned int, unsigned int, unsigned int)
rx::glDrawArraysIndirectNULL(unsigned int, void const*)
rx::glDrawArraysInstancedBaseInstanceNULL(unsigned int, int, int, int, unsigned int)
rx::glDrawArraysInstancedNULL(unsigned int, int, int, int)
rx::glDrawArraysNULL(unsigned int, int, int)
rx::glDrawBufferNULL(unsigned int)
rx::glDrawBuffersNULL(int, unsigned int const*)
rx::glDrawElementsBaseVertexNULL(unsigned int, int, unsigned int, void const*, int)
rx::glDrawElementsIndirectNULL(unsigned int, unsigned int, void const*)
rx::glDrawElementsInstancedBaseInstanceNULL(unsigned int, int, unsigned int, void const*, int, unsigned int)
rx::glDrawElementsInstancedBaseVertexBaseInstanceNULL(unsigned int, int, unsigned int, void const*, int, int, unsigned int)
rx::glDrawElementsInstancedBaseVertexNULL(unsigned int, int, unsigned int, void const*, int, int)
rx::glDrawElementsInstancedNULL(unsigned int, int, unsigned int, void const*, int)
rx::glDrawElementsNULL(unsigned int, int, unsigned int, void const*)
rx::glDrawRangeElementsBaseVertexNULL(unsigned int, unsigned int, unsigned int, int, unsigned int, void const*, int)
rx::glDrawRangeElementsNULL(unsigned int, unsigned int, unsigned int, int, unsigned int, void const*)
rx::glDrawTransformFeedbackInstancedNULL(unsigned int, unsigned int, int)
rx::glDrawTransformFeedbackNULL(unsigned int, unsigned int)
rx::glDrawTransformFeedbackStreamInstancedNULL(unsigned int, unsigned int, unsigned int, int)
rx::glDrawTransformFeedbackStreamNULL(unsigned int, unsigned int, unsigned int)
rx::glEGLImageTargetRenderbufferStorageOESNULL(unsigned int, void*)
rx::glEGLImageTargetTexture2DOESNULL(unsigned int, void*)
rx::glEnableNULL(unsigned int)
rx::glEnableVertexArrayAttribNULL(unsigned int, unsigned int)
rx::glEnableVertexAttribArrayNULL(unsigned int)
rx::glEnableiNULL(unsigned int, unsigned int)
rx::glEndConditionalRenderNULL()
rx::glEndQueryIndexedNULL(unsigned int, unsigned int)
rx::glEndQueryNULL(unsigned int)
rx::glEndTransformFeedbackNULL()
rx::glFenceSyncNULL(unsigned int, unsigned int)
rx::glFinishFenceNVNULL(unsigned int)
rx::glFinishNULL()
rx::glFlushMappedBufferRangeNULL(unsigned int, long, long)
rx::glFlushMappedNamedBufferRangeNULL(unsigned int, long, long)
rx::glFlushNULL()
rx::glFramebufferParameteriNULL(unsigned int, unsigned int, int)
rx::glFramebufferRenderbufferNULL(unsigned int, unsigned int, unsigned int, unsigned int)
rx::glFramebufferTexture1DNULL(unsigned int, unsigned int, unsigned int, unsigned int, int)
rx::glFramebufferTexture2DNULL(unsigned int, unsigned int, unsigned int, unsigned int, int)
rx::glFramebufferTexture3DNULL(unsigned int, unsigned int, unsigned int, unsigned int, int, int)
rx::glFramebufferTextureLayerNULL(unsigned int, unsigned int, unsigned int, int, int)
rx::glFramebufferTextureMultiviewOVRNULL(unsigned int, unsigned int, unsigned int, int, int, int)
rx::glFramebufferTextureNULL(unsigned int, unsigned int, unsigned int, int)
rx::glFrontFaceNULL(unsigned int)
rx::glGenBuffersNULL(int, unsigned int*)
rx::glGenFencesNVNULL(int, unsigned int*)
rx::glGenFramebuffersNULL(int, unsigned int*)
rx::glGenProgramPipelinesNULL(int, unsigned int*)
rx::glGenQueriesNULL(int, unsigned int*)
rx::glGenRenderbuffersNULL(int, unsigned int*)
rx::glGenSamplersNULL(int, unsigned int*)
rx::glGenSemaphoresEXTNULL(int, unsigned int*)
rx::glGenTexturesNULL(int, unsigned int*)
rx::glGenTransformFeedbacksNULL(int, unsigned int*)
rx::glGenVertexArraysNULL(int, unsigned int*)
rx::glGenerateMipmapNULL(unsigned int)
rx::glGenerateTextureMipmapNULL(unsigned int)
rx::glGetActiveAtomicCounterBufferivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetActiveAttribNULL(unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
rx::glGetActiveSubroutineNameNULL(unsigned int, unsigned int, unsigned int, int, int*, char*)
rx::glGetActiveSubroutineUniformNameNULL(unsigned int, unsigned int, unsigned int, int, int*, char*)
rx::glGetActiveSubroutineUniformivNULL(unsigned int, unsigned int, unsigned int, unsigned int, int*)
rx::glGetActiveUniformBlockNameNULL(unsigned int, unsigned int, int, int*, char*)
rx::glGetActiveUniformBlockivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetActiveUniformNULL(unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
rx::glGetActiveUniformNameNULL(unsigned int, unsigned int, int, int*, char*)
rx::glGetActiveUniformsivNULL(unsigned int, int, unsigned int const*, unsigned int, int*)
rx::glGetAttachedShadersNULL(unsigned int, int, int*, unsigned int*)
rx::glGetAttribLocationNULL(unsigned int, char const*)
rx::glGetBooleani_vNULL(unsigned int, unsigned int, unsigned char*)
rx::glGetBooleanvNULL(unsigned int, unsigned char*)
rx::glGetBufferParameteri64vNULL(unsigned int, unsigned int, long*)
rx::glGetBufferParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetBufferPointervNULL(unsigned int, unsigned int, void**)
rx::glGetBufferSubDataNULL(unsigned int, long, long, void*)
rx::glGetCompressedTexImageNULL(unsigned int, int, void*)
rx::glGetCompressedTextureImageNULL(unsigned int, int, int, void*)
rx::glGetCompressedTextureSubImageNULL(unsigned int, int, int, int, int, int, int, int, int, void*)
rx::glGetDebugMessageLogNULL(unsigned int, int, unsigned int*, unsigned int*, unsigned int*, unsigned int*, int*, char*)
rx::glGetDoublei_vNULL(unsigned int, unsigned int, double*)
rx::glGetDoublevNULL(unsigned int, double*)
rx::glGetErrorNULL()
rx::glGetFenceivNVNULL(unsigned int, unsigned int, int*)
rx::glGetFloati_vNULL(unsigned int, unsigned int, float*)
rx::glGetFloatvNULL(unsigned int, float*)
rx::glGetFragDataIndexNULL(unsigned int, char const*)
rx::glGetFragDataLocationNULL(unsigned int, char const*)
rx::glGetFramebufferAttachmentParameterivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetFramebufferParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetGraphicsResetStatusNULL()
rx::glGetInteger64i_vNULL(unsigned int, unsigned int, long*)
rx::glGetInteger64vNULL(unsigned int, long*)
rx::glGetIntegeri_vNULL(unsigned int, unsigned int, int*)
rx::glGetIntegervNULL(unsigned int, int*)
rx::glGetInternalformatSampleivNVNULL(unsigned int, unsigned int, int, unsigned int, int, int*)
rx::glGetInternalformati64vNULL(unsigned int, unsigned int, unsigned int, int, long*)
rx::glGetInternalformativNULL(unsigned int, unsigned int, unsigned int, int, int*)
rx::glGetMemoryObjectParameterivEXTNULL(unsigned int, unsigned int, int*)
rx::glGetMultisamplefvNULL(unsigned int, unsigned int, float*)
rx::glGetNamedBufferParameteri64vNULL(unsigned int, unsigned int, long*)
rx::glGetNamedBufferParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetNamedBufferPointervNULL(unsigned int, unsigned int, void**)
rx::glGetNamedBufferSubDataNULL(unsigned int, long, long, void*)
rx::glGetNamedFramebufferAttachmentParameterivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetNamedFramebufferParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetNamedRenderbufferParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetObjectLabelNULL(unsigned int, unsigned int, int, int*, char*)
rx::glGetObjectPtrLabelNULL(void const*, int, int*, char*)
rx::glGetPointervNULL(unsigned int, void**)
rx::glGetProgramBinaryNULL(unsigned int, int, int*, unsigned int*, void*)
rx::glGetProgramInfoLogNULL(unsigned int, int, int*, char*)
rx::glGetProgramInterfaceivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetProgramPipelineInfoLogNULL(unsigned int, int, int*, char*)
rx::glGetProgramPipelineivNULL(unsigned int, unsigned int, int*)
rx::glGetProgramResourceIndexNULL(unsigned int, unsigned int, char const*)
rx::glGetProgramResourceLocationIndexNULL(unsigned int, unsigned int, char const*)
rx::glGetProgramResourceLocationNULL(unsigned int, unsigned int, char const*)
rx::glGetProgramResourceNameNULL(unsigned int, unsigned int, unsigned int, int, int*, char*)
rx::glGetProgramResourceivNULL(unsigned int, unsigned int, unsigned int, int, unsigned int const*, int, int*, int*)
rx::glGetProgramStageivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetProgramivNULL(unsigned int, unsigned int, int*)
rx::glGetQueryBufferObjecti64vNULL(unsigned int, unsigned int, unsigned int, long)
rx::glGetQueryBufferObjectivNULL(unsigned int, unsigned int, unsigned int, long)
rx::glGetQueryBufferObjectui64vNULL(unsigned int, unsigned int, unsigned int, long)
rx::glGetQueryBufferObjectuivNULL(unsigned int, unsigned int, unsigned int, long)
rx::glGetQueryIndexedivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetQueryObjecti64vNULL(unsigned int, unsigned int, long*)
rx::glGetQueryObjectivNULL(unsigned int, unsigned int, int*)
rx::glGetQueryObjectui64vNULL(unsigned int, unsigned int, unsigned long*)
rx::glGetQueryObjectuivNULL(unsigned int, unsigned int, unsigned int*)
rx::glGetQueryivNULL(unsigned int, unsigned int, int*)
rx::glGetRenderbufferParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetSamplerParameterIivNULL(unsigned int, unsigned int, int*)
rx::glGetSamplerParameterIuivNULL(unsigned int, unsigned int, unsigned int*)
rx::glGetSamplerParameterfvNULL(unsigned int, unsigned int, float*)
rx::glGetSamplerParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetSemaphoreParameterui64vEXTNULL(unsigned int, unsigned int, unsigned long*)
rx::glGetShaderInfoLogNULL(unsigned int, int, int*, char*)
rx::glGetShaderPrecisionFormatNULL(unsigned int, unsigned int, int*, int*)
rx::glGetShaderSourceNULL(unsigned int, int, int*, char*)
rx::glGetShaderivNULL(unsigned int, unsigned int, int*)
rx::glGetStringNULL(unsigned int)
rx::glGetStringiNULL(unsigned int, unsigned int)
rx::glGetSubroutineIndexNULL(unsigned int, unsigned int, char const*)
rx::glGetSubroutineUniformLocationNULL(unsigned int, unsigned int, char const*)
rx::glGetSyncivNULL(__GLsync*, unsigned int, int, int*, int*)
rx::glGetTexImageNULL(unsigned int, int, unsigned int, unsigned int, void*)
rx::glGetTexLevelParameterfvNULL(unsigned int, int, unsigned int, float*)
rx::glGetTexLevelParameterivNULL(unsigned int, int, unsigned int, int*)
rx::glGetTexParameterIivNULL(unsigned int, unsigned int, int*)
rx::glGetTexParameterIuivNULL(unsigned int, unsigned int, unsigned int*)
rx::glGetTexParameterfvNULL(unsigned int, unsigned int, float*)
rx::glGetTexParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetTextureImageNULL(unsigned int, int, unsigned int, unsigned int, int, void*)
rx::glGetTextureLevelParameterfvNULL(unsigned int, int, unsigned int, float*)
rx::glGetTextureLevelParameterivNULL(unsigned int, int, unsigned int, int*)
rx::glGetTextureParameterIivNULL(unsigned int, unsigned int, int*)
rx::glGetTextureParameterIuivNULL(unsigned int, unsigned int, unsigned int*)
rx::glGetTextureParameterfvNULL(unsigned int, unsigned int, float*)
rx::glGetTextureParameterivNULL(unsigned int, unsigned int, int*)
rx::glGetTextureSubImageNULL(unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, int, void*)
rx::glGetTransformFeedbackVaryingNULL(unsigned int, unsigned int, int, int*, int*, unsigned int*, char*)
rx::glGetTransformFeedbacki64_vNULL(unsigned int, unsigned int, unsigned int, long*)
rx::glGetTransformFeedbacki_vNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetTransformFeedbackivNULL(unsigned int, unsigned int, int*)
rx::glGetUniformBlockIndexNULL(unsigned int, char const*)
rx::glGetUniformIndicesNULL(unsigned int, int, char const* const*, unsigned int*)
rx::glGetUniformLocationNULL(unsigned int, char const*)
rx::glGetUniformSubroutineuivNULL(unsigned int, int, unsigned int*)
rx::glGetUniformdvNULL(unsigned int, int, double*)
rx::glGetUniformfvNULL(unsigned int, int, float*)
rx::glGetUniformivNULL(unsigned int, int, int*)
rx::glGetUniformuivNULL(unsigned int, int, unsigned int*)
rx::glGetUnsignedBytei_vEXTNULL(unsigned int, unsigned int, unsigned char*)
rx::glGetUnsignedBytevEXTNULL(unsigned int, unsigned char*)
rx::glGetVertexArrayIndexed64ivNULL(unsigned int, unsigned int, unsigned int, long*)
rx::glGetVertexArrayIndexedivNULL(unsigned int, unsigned int, unsigned int, int*)
rx::glGetVertexArrayivNULL(unsigned int, unsigned int, int*)
rx::glGetVertexAttribIivNULL(unsigned int, unsigned int, int*)
rx::glGetVertexAttribIuivNULL(unsigned int, unsigned int, unsigned int*)
rx::glGetVertexAttribLdvNULL(unsigned int, unsigned int, double*)
rx::glGetVertexAttribPointervNULL(unsigned int, unsigned int, void**)
rx::glGetVertexAttribdvNULL(unsigned int, unsigned int, double*)
rx::glGetVertexAttribfvNULL(unsigned int, unsigned int, float*)
rx::glGetVertexAttribivNULL(unsigned int, unsigned int, int*)
rx::glGetnCompressedTexImageNULL(unsigned int, int, int, void*)
rx::glGetnTexImageNULL(unsigned int, int, unsigned int, unsigned int, int, void*)
rx::glGetnUniformdvNULL(unsigned int, int, int, double*)
rx::glGetnUniformfvNULL(unsigned int, int, int, float*)
rx::glGetnUniformivNULL(unsigned int, int, int, int*)
rx::glGetnUniformuivNULL(unsigned int, int, int, unsigned int*)
rx::glHintNULL(unsigned int, unsigned int)
rx::glImportMemoryFdEXTNULL(unsigned int, unsigned long, unsigned int, int)
rx::glImportMemoryWin32HandleEXTNULL(unsigned int, unsigned long, unsigned int, void*)
rx::glImportMemoryWin32NameEXTNULL(unsigned int, unsigned long, unsigned int, void const*)
rx::glImportSemaphoreFdEXTNULL(unsigned int, unsigned int, int)
rx::glImportSemaphoreWin32HandleEXTNULL(unsigned int, unsigned int, void*)
rx::glImportSemaphoreWin32NameEXTNULL(unsigned int, unsigned int, void const*)
rx::glInsertEventMarkerEXTNULL(int, char const*)
rx::glInvalidateBufferDataNULL(unsigned int)
rx::glInvalidateBufferSubDataNULL(unsigned int, long, long)
rx::glInvalidateFramebufferNULL(unsigned int, int, unsigned int const*)
rx::glInvalidateNamedFramebufferDataNULL(unsigned int, int, unsigned int const*)
rx::glInvalidateNamedFramebufferSubDataNULL(unsigned int, int, unsigned int const*, int, int, int, int)
rx::glInvalidateSubFramebufferNULL(unsigned int, int, unsigned int const*, int, int, int, int)
rx::glInvalidateTexImageNULL(unsigned int, int)
rx::glInvalidateTexSubImageNULL(unsigned int, int, int, int, int, int, int, int)
rx::glIsBufferNULL(unsigned int)
rx::glIsEnabledNULL(unsigned int)
rx::glIsEnablediNULL(unsigned int, unsigned int)
rx::glIsFenceNVNULL(unsigned int)
rx::glIsFramebufferNULL(unsigned int)
rx::glIsMemoryObjectEXTNULL(unsigned int)
rx::glIsProgramNULL(unsigned int)
rx::glIsProgramPipelineNULL(unsigned int)
rx::glIsQueryNULL(unsigned int)
rx::glIsRenderbufferNULL(unsigned int)
rx::glIsSamplerNULL(unsigned int)
rx::glIsSemaphoreEXTNULL(unsigned int)
rx::glIsShaderNULL(unsigned int)
rx::glIsSyncNULL(__GLsync*)
rx::glIsTextureNULL(unsigned int)
rx::glIsTransformFeedbackNULL(unsigned int)
rx::glIsVertexArrayNULL(unsigned int)
rx::glLineWidthNULL(float)
rx::glLinkProgramNULL(unsigned int)
rx::glLogicOpNULL(unsigned int)
rx::glMapBufferNULL(unsigned int, unsigned int)
rx::glMapBufferRangeNULL(unsigned int, long, long, unsigned int)
rx::glMapNamedBufferNULL(unsigned int, unsigned int)
rx::glMapNamedBufferRangeNULL(unsigned int, long, long, unsigned int)
rx::glMaxShaderCompilerThreadsARBNULL(unsigned int)
rx::glMaxShaderCompilerThreadsKHRNULL(unsigned int)
rx::glMemoryBarrierByRegionNULL(unsigned int)
rx::glMemoryBarrierNULL(unsigned int)
rx::glMemoryObjectParameterivEXTNULL(unsigned int, unsigned int, int const*)
rx::glMinSampleShadingNULL(float)
rx::glMultiDrawArraysIndirectNULL(unsigned int, void const*, int, int)
rx::glMultiDrawArraysNULL(unsigned int, int const*, int const*, int)
rx::glMultiDrawElementsBaseVertexNULL(unsigned int, int const*, unsigned int, void const* const*, int, int const*)
rx::glMultiDrawElementsIndirectNULL(unsigned int, unsigned int, void const*, int, int)
rx::glMultiDrawElementsNULL(unsigned int, int const*, unsigned int, void const* const*, int)
rx::glNamedBufferDataNULL(unsigned int, long, void const*, unsigned int)
rx::glNamedBufferStorageMemEXTNULL(unsigned int, long, unsigned int, unsigned long)
rx::glNamedBufferStorageNULL(unsigned int, long, void const*, unsigned int)
rx::glNamedBufferSubDataNULL(unsigned int, long, long, void const*)
rx::glNamedFramebufferDrawBufferNULL(unsigned int, unsigned int)
rx::glNamedFramebufferDrawBuffersNULL(unsigned int, int, unsigned int const*)
rx::glNamedFramebufferParameteriNULL(unsigned int, unsigned int, int)
rx::glNamedFramebufferReadBufferNULL(unsigned int, unsigned int)
rx::glNamedFramebufferRenderbufferNULL(unsigned int, unsigned int, unsigned int, unsigned int)
rx::glNamedFramebufferTextureLayerNULL(unsigned int, unsigned int, unsigned int, int, int)
rx::glNamedFramebufferTextureNULL(unsigned int, unsigned int, unsigned int, int)
rx::glNamedRenderbufferStorageMultisampleNULL(unsigned int, int, unsigned int, int, int)
rx::glNamedRenderbufferStorageNULL(unsigned int, unsigned int, int, int)
rx::glObjectLabelNULL(unsigned int, unsigned int, int, char const*)
rx::glObjectPtrLabelNULL(void const*, int, char const*)
rx::glPatchParameterfvNULL(unsigned int, float const*)
rx::glPatchParameteriNULL(unsigned int, int)
rx::glPauseTransformFeedbackNULL()
rx::glPixelStorefNULL(unsigned int, float)
rx::glPixelStoreiNULL(unsigned int, int)
rx::glPointParameterfNULL(unsigned int, float)
rx::glPointParameterfvNULL(unsigned int, float const*)
rx::glPointParameteriNULL(unsigned int, int)
rx::glPointParameterivNULL(unsigned int, int const*)
rx::glPointSizeNULL(float)
rx::glPolygonModeNULL(unsigned int, unsigned int)
rx::glPolygonOffsetNULL(float, float)
rx::glPopDebugGroupNULL()
rx::glPopGroupMarkerEXTNULL()
rx::glPrimitiveBoundingBoxNULL(float, float, float, float, float, float, float, float)
rx::glPrimitiveRestartIndexNULL(unsigned int)
rx::glProgramBinaryNULL(unsigned int, unsigned int, void const*, int)
rx::glProgramParameteriNULL(unsigned int, unsigned int, int)
rx::glProgramUniform1dNULL(unsigned int, int, double)
rx::glProgramUniform1dvNULL(unsigned int, int, int, double const*)
rx::glProgramUniform1fNULL(unsigned int, int, float)
rx::glProgramUniform1fvNULL(unsigned int, int, int, float const*)
rx::glProgramUniform1iNULL(unsigned int, int, int)
rx::glProgramUniform1ivNULL(unsigned int, int, int, int const*)
rx::glProgramUniform1uiNULL(unsigned int, int, unsigned int)
rx::glProgramUniform1uivNULL(unsigned int, int, int, unsigned int const*)
rx::glProgramUniform2dNULL(unsigned int, int, double, double)
rx::glProgramUniform2dvNULL(unsigned int, int, int, double const*)
rx::glProgramUniform2fNULL(unsigned int, int, float, float)
rx::glProgramUniform2fvNULL(unsigned int, int, int, float const*)
rx::glProgramUniform2iNULL(unsigned int, int, int, int)
rx::glProgramUniform2ivNULL(unsigned int, int, int, int const*)
rx::glProgramUniform2uiNULL(unsigned int, int, unsigned int, unsigned int)
rx::glProgramUniform2uivNULL(unsigned int, int, int, unsigned int const*)
rx::glProgramUniform3dNULL(unsigned int, int, double, double, double)
rx::glProgramUniform3dvNULL(unsigned int, int, int, double const*)
rx::glProgramUniform3fNULL(unsigned int, int, float, float, float)
rx::glProgramUniform3fvNULL(unsigned int, int, int, float const*)
rx::glProgramUniform3iNULL(unsigned int, int, int, int, int)
rx::glProgramUniform3ivNULL(unsigned int, int, int, int const*)
rx::glProgramUniform3uiNULL(unsigned int, int, unsigned int, unsigned int, unsigned int)
rx::glProgramUniform3uivNULL(unsigned int, int, int, unsigned int const*)
rx::glProgramUniform4dNULL(unsigned int, int, double, double, double, double)
rx::glProgramUniform4dvNULL(unsigned int, int, int, double const*)
rx::glProgramUniform4fNULL(unsigned int, int, float, float, float, float)
rx::glProgramUniform4fvNULL(unsigned int, int, int, float const*)
rx::glProgramUniform4iNULL(unsigned int, int, int, int, int, int)
rx::glProgramUniform4ivNULL(unsigned int, int, int, int const*)
rx::glProgramUniform4uiNULL(unsigned int, int, unsigned int, unsigned int, unsigned int, unsigned int)
rx::glProgramUniform4uivNULL(unsigned int, int, int, unsigned int const*)
rx::glProgramUniformMatrix2dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix2fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix2x3dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix2x3fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix2x4dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix2x4fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix3dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix3fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix3x2dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix3x2fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix3x4dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix3x4fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix4dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix4fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix4x2dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix4x2fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProgramUniformMatrix4x3dvNULL(unsigned int, int, int, unsigned char, double const*)
rx::glProgramUniformMatrix4x3fvNULL(unsigned int, int, int, unsigned char, float const*)
rx::glProvokingVertexNULL(unsigned int)
rx::glPushDebugGroupNULL(unsigned int, unsigned int, int, char const*)
rx::glPushGroupMarkerEXTNULL(int, char const*)
rx::glQueryCounterNULL(unsigned int, unsigned int)
rx::glReadBufferNULL(unsigned int)
rx::glReadPixelsNULL(int, int, int, int, unsigned int, unsigned int, void*)
rx::glReadnPixelsNULL(int, int, int, int, unsigned int, unsigned int, int, void*)
rx::glReleaseShaderCompilerNULL()
rx::glRenderbufferStorageMultisampleNULL(unsigned int, int, unsigned int, int, int)
rx::glRenderbufferStorageNULL(unsigned int, unsigned int, int, int)
rx::glResumeTransformFeedbackNULL()
rx::glSampleCoverageNULL(float, unsigned char)
rx::glSampleMaskiNULL(unsigned int, unsigned int)
rx::glSamplerParameterIivNULL(unsigned int, unsigned int, int const*)
rx::glSamplerParameterIuivNULL(unsigned int, unsigned int, unsigned int const*)
rx::glSamplerParameterfNULL(unsigned int, unsigned int, float)
rx::glSamplerParameterfvNULL(unsigned int, unsigned int, float const*)
rx::glSamplerParameteriNULL(unsigned int, unsigned int, int)
rx::glSamplerParameterivNULL(unsigned int, unsigned int, int const*)
rx::glScissorArrayvNULL(unsigned int, int, int const*)
rx::glScissorIndexedNULL(unsigned int, int, int, int, int)
rx::glScissorIndexedvNULL(unsigned int, int const*)
rx::glScissorNULL(int, int, int, int)
rx::glSemaphoreParameterui64vEXTNULL(unsigned int, unsigned int, unsigned long const*)
rx::glSetFenceNVNULL(unsigned int, unsigned int)
rx::glShaderBinaryNULL(int, unsigned int const*, unsigned int, void const*, int)
rx::glShaderSourceNULL(unsigned int, int, char const* const*, int const*)
rx::glShaderStorageBlockBindingNULL(unsigned int, unsigned int, unsigned int)
rx::glSignalSemaphoreEXTNULL(unsigned int, unsigned int, unsigned int const*, unsigned int, unsigned int const*, unsigned int const*)
rx::glStencilFuncNULL(unsigned int, int, unsigned int)
rx::glStencilFuncSeparateNULL(unsigned int, unsigned int, int, unsigned int)
rx::glStencilMaskNULL(unsigned int)
rx::glStencilMaskSeparateNULL(unsigned int, unsigned int)
rx::glStencilOpNULL(unsigned int, unsigned int, unsigned int)
rx::glStencilOpSeparateNULL(unsigned int, unsigned int, unsigned int, unsigned int)
rx::glTestFenceNVNULL(unsigned int)
rx::glTexBufferNULL(unsigned int, unsigned int, unsigned int)
rx::glTexBufferRangeNULL(unsigned int, unsigned int, unsigned int, long, long)
rx::glTexImage1DNULL(unsigned int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTexImage2DMultisampleNULL(unsigned int, int, unsigned int, int, int, unsigned char)
rx::glTexImage2DNULL(unsigned int, int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTexImage3DMultisampleNULL(unsigned int, int, unsigned int, int, int, int, unsigned char)
rx::glTexImage3DNULL(unsigned int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTexParameterIivNULL(unsigned int, unsigned int, int const*)
rx::glTexParameterIuivNULL(unsigned int, unsigned int, unsigned int const*)
rx::glTexParameterfNULL(unsigned int, unsigned int, float)
rx::glTexParameterfvNULL(unsigned int, unsigned int, float const*)
rx::glTexParameteriNULL(unsigned int, unsigned int, int)
rx::glTexParameterivNULL(unsigned int, unsigned int, int const*)
rx::glTexStorage1DNULL(unsigned int, int, unsigned int, int)
rx::glTexStorage2DMultisampleNULL(unsigned int, int, unsigned int, int, int, unsigned char)
rx::glTexStorage2DNULL(unsigned int, int, unsigned int, int, int)
rx::glTexStorage3DMultisampleNULL(unsigned int, int, unsigned int, int, int, int, unsigned char)
rx::glTexStorage3DNULL(unsigned int, int, unsigned int, int, int, int)
rx::glTexStorageMem2DEXTNULL(unsigned int, int, unsigned int, int, int, unsigned int, unsigned long)
rx::glTexStorageMem2DMultisampleEXTNULL(unsigned int, int, unsigned int, int, int, unsigned char, unsigned int, unsigned long)
rx::glTexStorageMem3DEXTNULL(unsigned int, int, unsigned int, int, int, int, unsigned int, unsigned long)
rx::glTexStorageMem3DMultisampleEXTNULL(unsigned int, int, unsigned int, int, int, int, unsigned char, unsigned int, unsigned long)
rx::glTexSubImage1DNULL(unsigned int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTexSubImage2DNULL(unsigned int, int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTexSubImage3DNULL(unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTextureBarrierNULL()
rx::glTextureBufferNULL(unsigned int, unsigned int, unsigned int)
rx::glTextureBufferRangeNULL(unsigned int, unsigned int, unsigned int, long, long)
rx::glTextureParameterIivNULL(unsigned int, unsigned int, int const*)
rx::glTextureParameterIuivNULL(unsigned int, unsigned int, unsigned int const*)
rx::glTextureParameterfNULL(unsigned int, unsigned int, float)
rx::glTextureParameterfvNULL(unsigned int, unsigned int, float const*)
rx::glTextureParameteriNULL(unsigned int, unsigned int, int)
rx::glTextureParameterivNULL(unsigned int, unsigned int, int const*)
rx::glTextureStorage1DNULL(unsigned int, int, unsigned int, int)
rx::glTextureStorage2DMultisampleNULL(unsigned int, int, unsigned int, int, int, unsigned char)
rx::glTextureStorage2DNULL(unsigned int, int, unsigned int, int, int)
rx::glTextureStorage3DMultisampleNULL(unsigned int, int, unsigned int, int, int, int, unsigned char)
rx::glTextureStorage3DNULL(unsigned int, int, unsigned int, int, int, int)
rx::glTextureStorageMem2DEXTNULL(unsigned int, int, unsigned int, int, int, unsigned int, unsigned long)
rx::glTextureStorageMem2DMultisampleEXTNULL(unsigned int, int, unsigned int, int, int, unsigned char, unsigned int, unsigned long)
rx::glTextureStorageMem3DEXTNULL(unsigned int, int, unsigned int, int, int, int, unsigned int, unsigned long)
rx::glTextureStorageMem3DMultisampleEXTNULL(unsigned int, int, unsigned int, int, int, int, unsigned char, unsigned int, unsigned long)
rx::glTextureSubImage1DNULL(unsigned int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTextureSubImage2DNULL(unsigned int, int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTextureSubImage3DNULL(unsigned int, int, int, int, int, int, int, int, unsigned int, unsigned int, void const*)
rx::glTextureViewNULL(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
rx::glTransformFeedbackBufferBaseNULL(unsigned int, unsigned int, unsigned int)
rx::glTransformFeedbackBufferRangeNULL(unsigned int, unsigned int, unsigned int, long, long)
rx::glTransformFeedbackVaryingsNULL(unsigned int, int, char const* const*, unsigned int)
rx::glUniform1dNULL(int, double)
rx::glUniform1dvNULL(int, int, double const*)
rx::glUniform1fNULL(int, float)
rx::glUniform1fvNULL(int, int, float const*)
rx::glUniform1iNULL(int, int)
rx::glUniform1ivNULL(int, int, int const*)
rx::glUniform1uiNULL(int, unsigned int)
rx::glUniform1uivNULL(int, int, unsigned int const*)
rx::glUniform2dNULL(int, double, double)
rx::glUniform2dvNULL(int, int, double const*)
rx::glUniform2fNULL(int, float, float)
rx::glUniform2fvNULL(int, int, float const*)
rx::glUniform2iNULL(int, int, int)
rx::glUniform2ivNULL(int, int, int const*)
rx::glUniform2uiNULL(int, unsigned int, unsigned int)
rx::glUniform2uivNULL(int, int, unsigned int const*)
rx::glUniform3dNULL(int, double, double, double)
rx::glUniform3dvNULL(int, int, double const*)
rx::glUniform3fNULL(int, float, float, float)
rx::glUniform3fvNULL(int, int, float const*)
rx::glUniform3iNULL(int, int, int, int)
rx::glUniform3ivNULL(int, int, int const*)
rx::glUniform3uiNULL(int, unsigned int, unsigned int, unsigned int)
rx::glUniform3uivNULL(int, int, unsigned int const*)
rx::glUniform4dNULL(int, double, double, double, double)
rx::glUniform4dvNULL(int, int, double const*)
rx::glUniform4fNULL(int, float, float, float, float)
rx::glUniform4fvNULL(int, int, float const*)
rx::glUniform4iNULL(int, int, int, int, int)
rx::glUniform4ivNULL(int, int, int const*)
rx::glUniform4uiNULL(int, unsigned int, unsigned int, unsigned int, unsigned int)
rx::glUniform4uivNULL(int, int, unsigned int const*)
rx::glUniformBlockBindingNULL(unsigned int, unsigned int, unsigned int)
rx::glUniformMatrix2dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix2fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix2x3dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix2x3fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix2x4dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix2x4fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix3dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix3fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix3x2dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix3x2fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix3x4dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix3x4fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix4dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix4fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix4x2dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix4x2fvNULL(int, int, unsigned char, float const*)
rx::glUniformMatrix4x3dvNULL(int, int, unsigned char, double const*)
rx::glUniformMatrix4x3fvNULL(int, int, unsigned char, float const*)
rx::glUniformSubroutinesuivNULL(unsigned int, int, unsigned int const*)
rx::glUnmapBufferNULL(unsigned int)
rx::glUnmapNamedBufferNULL(unsigned int)
rx::glUseProgramNULL(unsigned int)
rx::glUseProgramStagesNULL(unsigned int, unsigned int, unsigned int)
rx::glValidateProgramNULL(unsigned int)
rx::glValidateProgramPipelineNULL(unsigned int)
rx::glVertexArrayAttribBindingNULL(unsigned int, unsigned int, unsigned int)
rx::glVertexArrayAttribFormatNULL(unsigned int, unsigned int, int, unsigned int, unsigned char, unsigned int)
rx::glVertexArrayAttribIFormatNULL(unsigned int, unsigned int, int, unsigned int, unsigned int)
rx::glVertexArrayAttribLFormatNULL(unsigned int, unsigned int, int, unsigned int, unsigned int)
rx::glVertexArrayBindingDivisorNULL(unsigned int, unsigned int, unsigned int)
rx::glVertexArrayElementBufferNULL(unsigned int, unsigned int)
rx::glVertexArrayVertexBufferNULL(unsigned int, unsigned int, unsigned int, long, int)
rx::glVertexArrayVertexBuffersNULL(unsigned int, unsigned int, int, unsigned int const*, long const*, int const*)
rx::glVertexAttrib1dNULL(unsigned int, double)
rx::glVertexAttrib1dvNULL(unsigned int, double const*)
rx::glVertexAttrib1fNULL(unsigned int, float)
rx::glVertexAttrib1fvNULL(unsigned int, float const*)
rx::glVertexAttrib1sNULL(unsigned int, short)
rx::glVertexAttrib1svNULL(unsigned int, short const*)
rx::glVertexAttrib2dNULL(unsigned int, double, double)
rx::glVertexAttrib2dvNULL(unsigned int, double const*)
rx::glVertexAttrib2fNULL(unsigned int, float, float)
rx::glVertexAttrib2fvNULL(unsigned int, float const*)
rx::glVertexAttrib2sNULL(unsigned int, short, short)
rx::glVertexAttrib2svNULL(unsigned int, short const*)
rx::glVertexAttrib3dNULL(unsigned int, double, double, double)
rx::glVertexAttrib3dvNULL(unsigned int, double const*)
rx::glVertexAttrib3fNULL(unsigned int, float, float, float)
rx::glVertexAttrib3fvNULL(unsigned int, float const*)
rx::glVertexAttrib3sNULL(unsigned int, short, short, short)
rx::glVertexAttrib3svNULL(unsigned int, short const*)
rx::glVertexAttrib4NbvNULL(unsigned int, signed char const*)
rx::glVertexAttrib4NivNULL(unsigned int, int const*)
rx::glVertexAttrib4NsvNULL(unsigned int, short const*)
rx::glVertexAttrib4NubNULL(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
rx::glVertexAttrib4NubvNULL(unsigned int, unsigned char const*)
rx::glVertexAttrib4NuivNULL(unsigned int, unsigned int const*)
rx::glVertexAttrib4NusvNULL(unsigned int, unsigned short const*)
rx::glVertexAttrib4bvNULL(unsigned int, signed char const*)
rx::glVertexAttrib4dNULL(unsigned int, double, double, double, double)
rx::glVertexAttrib4dvNULL(unsigned int, double const*)
rx::glVertexAttrib4fNULL(unsigned int, float, float, float, float)
rx::glVertexAttrib4fvNULL(unsigned int, float const*)
rx::glVertexAttrib4ivNULL(unsigned int, int const*)
rx::glVertexAttrib4sNULL(unsigned int, short, short, short, short)
rx::glVertexAttrib4svNULL(unsigned int, short const*)
rx::glVertexAttrib4ubvNULL(unsigned int, unsigned char const*)
rx::glVertexAttrib4uivNULL(unsigned int, unsigned int const*)
rx::glVertexAttrib4usvNULL(unsigned int, unsigned short const*)
rx::glVertexAttribBindingNULL(unsigned int, unsigned int)
rx::glVertexAttribDivisorNULL(unsigned int, unsigned int)
rx::glVertexAttribFormatNULL(unsigned int, int, unsigned int, unsigned char, unsigned int)
rx::glVertexAttribI1iNULL(unsigned int, int)
rx::glVertexAttribI1ivNULL(unsigned int, int const*)
rx::glVertexAttribI1uiNULL(unsigned int, unsigned int)
rx::glVertexAttribI1uivNULL(unsigned int, unsigned int const*)
rx::glVertexAttribI2iNULL(unsigned int, int, int)
rx::glVertexAttribI2ivNULL(unsigned int, int const*)
rx::glVertexAttribI2uiNULL(unsigned int, unsigned int, unsigned int)
rx::glVertexAttribI2uivNULL(unsigned int, unsigned int const*)
rx::glVertexAttribI3iNULL(unsigned int, int, int, int)
rx::glVertexAttribI3ivNULL(unsigned int, int const*)
rx::glVertexAttribI3uiNULL(unsigned int, unsigned int, unsigned int, unsigned int)
rx::glVertexAttribI3uivNULL(unsigned int, unsigned int const*)
rx::glVertexAttribI4bvNULL(unsigned int, signed char const*)
rx::glVertexAttribI4iNULL(unsigned int, int, int, int, int)
rx::glVertexAttribI4ivNULL(unsigned int, int const*)
rx::glVertexAttribI4svNULL(unsigned int, short const*)
rx::glVertexAttribI4ubvNULL(unsigned int, unsigned char const*)
rx::glVertexAttribI4uiNULL(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
rx::glVertexAttribI4uivNULL(unsigned int, unsigned int const*)
rx::glVertexAttribI4usvNULL(unsigned int, unsigned short const*)
rx::glVertexAttribIFormatNULL(unsigned int, int, unsigned int, unsigned int)
rx::glVertexAttribIPointerNULL(unsigned int, int, unsigned int, int, void const*)
rx::glVertexAttribL1dNULL(unsigned int, double)
rx::glVertexAttribL1dvNULL(unsigned int, double const*)
rx::glVertexAttribL2dNULL(unsigned int, double, double)
rx::glVertexAttribL2dvNULL(unsigned int, double const*)
rx::glVertexAttribL3dNULL(unsigned int, double, double, double)
rx::glVertexAttribL3dvNULL(unsigned int, double const*)
rx::glVertexAttribL4dNULL(unsigned int, double, double, double, double)
rx::glVertexAttribL4dvNULL(unsigned int, double const*)
rx::glVertexAttribLFormatNULL(unsigned int, int, unsigned int, unsigned int)
rx::glVertexAttribLPointerNULL(unsigned int, int, unsigned int, int, void const*)
rx::glVertexAttribP1uiNULL(unsigned int, unsigned int, unsigned char, unsigned int)
rx::glVertexAttribP1uivNULL(unsigned int, unsigned int, unsigned char, unsigned int const*)
rx::glVertexAttribP2uiNULL(unsigned int, unsigned int, unsigned char, unsigned int)
rx::glVertexAttribP2uivNULL(unsigned int, unsigned int, unsigned char, unsigned int const*)
rx::glVertexAttribP3uiNULL(unsigned int, unsigned int, unsigned char, unsigned int)
rx::glVertexAttribP3uivNULL(unsigned int, unsigned int, unsigned char, unsigned int const*)
rx::glVertexAttribP4uiNULL(unsigned int, unsigned int, unsigned char, unsigned int)
rx::glVertexAttribP4uivNULL(unsigned int, unsigned int, unsigned char, unsigned int const*)
rx::glVertexAttribPointerNULL(unsigned int, int, unsigned int, unsigned char, int, void const*)
rx::glVertexBindingDivisorNULL(unsigned int, unsigned int)
rx::glViewportArrayvNULL(unsigned int, int, float const*)
rx::glViewportIndexedfNULL(unsigned int, float, float, float, float)
rx::glViewportIndexedfvNULL(unsigned int, float const*)
rx::glViewportNULL(int, int, int, int)
rx::glWaitSemaphoreEXTNULL(unsigned int, unsigned int, unsigned int const*, unsigned int, unsigned int const*, unsigned int const*)
rx::glWaitSyncNULL(__GLsync*, unsigned int, unsigned long)
rx::gl_vk::GetColorComponentFlags(bool, bool, bool, bool)
rx::gl_vk::GetCompareOp(unsigned int)
rx::gl_vk::GetCullMode(gl::RasterizerState const&)
rx::gl_vk::GetExtent(gl::Extents const&, VkExtent3D*)
rx::gl_vk::GetExtentsAndLayerCount(gl::TextureType, gl::Extents const&, VkExtent3D*, unsigned int*)
rx::gl_vk::GetFilter(unsigned int)
rx::gl_vk::GetFrontFace(unsigned int, bool)
rx::gl_vk::GetImageType(gl::TextureType)
rx::gl_vk::GetImageViewType(gl::TextureType)
rx::gl_vk::GetOffset(gl::Offset const&, VkOffset3D*)
rx::gl_vk::GetPrimitiveTopology(gl::PrimitiveMode)
rx::gl_vk::GetRect(gl::Rectangle const&)
rx::gl_vk::GetSamplerAddressMode(unsigned int)
rx::gl_vk::GetSamplerMipmapMode(unsigned int)
rx::gl_vk::GetSamples(int)
rx::gl_vk::GetSwizzle(unsigned int)
rx::gl_vk::GetViewport(gl::Rectangle const&, float, float, bool, int, VkViewport*)
rx::gl_vk::kShaderStageMap
rx::kDefaultUniformNames
rx::native_egl::FinalizeAttributeVector(std::__1::vector<int, std::__1::allocator<int> >*)
rx::native_egl::TrimAttributeMap(egl::AttributeMap const&, int const*, unsigned long)
rx::nativegl::BuildInternalFormatInfoMap()
rx::nativegl::ExtsOnly(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::nativegl::ExtsOnly(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
rx::nativegl::GetCompressedSubTexImageFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int)
rx::nativegl::GetCompressedTexImageFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int)
rx::nativegl::GetCopyTexImageImageFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int, unsigned int)
rx::nativegl::GetInternalFormatInfo(unsigned int, rx::StandardGL)
rx::nativegl::GetInternalFormatInfo(unsigned int, rx::StandardGL)::defaultInternalFormat
rx::nativegl::GetInternalFormatMap()::formatMap
rx::nativegl::GetNativeFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int, unsigned int)
rx::nativegl::GetNativeInternalFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, gl::InternalFormat const&)
rx::nativegl::GetNativeTextureType(gl::TextureType)
rx::nativegl::GetNativeType(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int, unsigned int)
rx::nativegl::GetReadPixelsFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int, unsigned int, unsigned int)
rx::nativegl::GetRenderbufferFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int)
rx::nativegl::GetTexImageFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int, unsigned int, unsigned int)
rx::nativegl::GetTexStorageFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int)
rx::nativegl::GetTexSubImageFormat(rx::FunctionsGL const*, angle::FeaturesGL const&, unsigned int, unsigned int)
rx::nativegl::GetTextureBindingQuery(gl::TextureType)
rx::nativegl::GetTextureBindingTarget(gl::TextureTarget)
rx::nativegl::GetTextureBindingTarget(gl::TextureType)
rx::nativegl::InsertFormatMapping(std::__1::map<unsigned int, rx::nativegl::InternalFormatInfo, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, rx::nativegl::InternalFormatInfo> > >*, unsigned int, rx::nativegl::SupportRequirement const&, rx::nativegl::SupportRequirement const&, rx::nativegl::SupportRequirement const&, rx::nativegl::SupportRequirement const&, rx::nativegl::SupportRequirement const&, rx::nativegl::SupportRequirement const&, rx::nativegl::SupportRequirement const&)
rx::nativegl::SupportRequirement::SupportRequirement(rx::nativegl::SupportRequirement const&)
rx::nativegl::SupportRequirement::~SupportRequirement()
rx::nativegl::SupportsCompute(rx::FunctionsGL const*)
rx::nativegl::SupportsFenceSync(rx::FunctionsGL const*)
rx::nativegl::SupportsNativeRendering(rx::FunctionsGL const*, gl::TextureType, unsigned int)
rx::nativegl::SupportsOcclusionQueries(rx::FunctionsGL const*)
rx::nativegl::SupportsTexImage(gl::TextureType)
rx::nativegl::UseTexImage2D(gl::TextureType)
rx::nativegl::UseTexImage3D(gl::TextureType)
rx::nativegl_gl::GenerateCaps(rx::FunctionsGL const*, angle::FeaturesGL const&, gl::Caps*, gl::TextureCapsMap*, gl::Extensions*, gl::Version*, rx::MultiviewImplementationTypeGL*)
rx::nativegl_gl::InitializeFeatures(rx::FunctionsGL const*, angle::FeaturesGL*)
rx::nativegl_gl::InitializeFrontendFeatures(rx::FunctionsGL const*, angle::FrontendFeatures*)
rx::operator<(rx::OSVersion const&, rx::OSVersion const&)
rx::vk::(anonymous namespace)::kBlitResolveStencilNoExport_comp_00000000
rx::vk::(anonymous namespace)::kBlitResolveStencilNoExport_comp_00000001
rx::vk::(anonymous namespace)::kBlitResolveStencilNoExport_comp_00000002
rx::vk::(anonymous namespace)::kBlitResolveStencilNoExport_comp_00000003
rx::vk::(anonymous namespace)::kBlitResolveStencilNoExport_comp_shaders
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000000
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000001
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000002
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000003
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000004
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000005
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000006
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000007
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000008
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000009
rx::vk::(anonymous namespace)::kBlitResolve_frag_0000000A
rx::vk::(anonymous namespace)::kBlitResolve_frag_0000000B
rx::vk::(anonymous namespace)::kBlitResolve_frag_0000000C
rx::vk::(anonymous namespace)::kBlitResolve_frag_0000000D
rx::vk::(anonymous namespace)::kBlitResolve_frag_0000000E
rx::vk::(anonymous namespace)::kBlitResolve_frag_0000000F
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000010
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000011
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000012
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000013
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000014
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000015
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000016
rx::vk::(anonymous namespace)::kBlitResolve_frag_00000017
rx::vk::(anonymous namespace)::kBlitResolve_frag_shaders
rx::vk::(anonymous namespace)::kConvertIndexIndirectLineLoop_comp_00000000
rx::vk::(anonymous namespace)::kConvertIndexIndirectLineLoop_comp_00000001
rx::vk::(anonymous namespace)::kConvertIndexIndirectLineLoop_comp_00000002
rx::vk::(anonymous namespace)::kConvertIndexIndirectLineLoop_comp_shaders
rx::vk::(anonymous namespace)::kConvertIndex_comp_00000000
rx::vk::(anonymous namespace)::kConvertIndex_comp_00000001
rx::vk::(anonymous namespace)::kConvertIndex_comp_00000002
rx::vk::(anonymous namespace)::kConvertIndex_comp_00000003
rx::vk::(anonymous namespace)::kConvertIndex_comp_shaders
rx::vk::(anonymous namespace)::kConvertIndirectLineLoop_comp_00000000
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000000
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000001
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000002
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000003
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000004
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000005
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000006
rx::vk::(anonymous namespace)::kConvertVertex_comp_00000007
rx::vk::(anonymous namespace)::kConvertVertex_comp_shaders
rx::vk::(anonymous namespace)::kFormatProperties
rx::vk::(anonymous namespace)::kFullScreenQuad_vert_00000000
rx::vk::(anonymous namespace)::kImageClear_frag_00000000
rx::vk::(anonymous namespace)::kImageClear_frag_00000001
rx::vk::(anonymous namespace)::kImageClear_frag_00000002
rx::vk::(anonymous namespace)::kImageClear_frag_00000003
rx::vk::(anonymous namespace)::kImageClear_frag_00000004
rx::vk::(anonymous namespace)::kImageClear_frag_00000005
rx::vk::(anonymous namespace)::kImageClear_frag_00000006
rx::vk::(anonymous namespace)::kImageClear_frag_00000007
rx::vk::(anonymous namespace)::kImageClear_frag_00000008
rx::vk::(anonymous namespace)::kImageClear_frag_00000009
rx::vk::(anonymous namespace)::kImageClear_frag_0000000A
rx::vk::(anonymous namespace)::kImageClear_frag_0000000B
rx::vk::(anonymous namespace)::kImageClear_frag_0000000C
rx::vk::(anonymous namespace)::kImageClear_frag_0000000D
rx::vk::(anonymous namespace)::kImageClear_frag_0000000E
rx::vk::(anonymous namespace)::kImageClear_frag_0000000F
rx::vk::(anonymous namespace)::kImageClear_frag_00000010
rx::vk::(anonymous namespace)::kImageClear_frag_00000011
rx::vk::(anonymous namespace)::kImageClear_frag_00000012
rx::vk::(anonymous namespace)::kImageClear_frag_00000013
rx::vk::(anonymous namespace)::kImageClear_frag_00000014
rx::vk::(anonymous namespace)::kImageClear_frag_00000015
rx::vk::(anonymous namespace)::kImageClear_frag_00000016
rx::vk::(anonymous namespace)::kImageClear_frag_00000017
rx::vk::(anonymous namespace)::kImageClear_frag_shaders
rx::vk::(anonymous namespace)::kImageCopy_frag_00000000
rx::vk::(anonymous namespace)::kImageCopy_frag_00000001
rx::vk::(anonymous namespace)::kImageCopy_frag_00000002
rx::vk::(anonymous namespace)::kImageCopy_frag_00000004
rx::vk::(anonymous namespace)::kImageCopy_frag_00000005
rx::vk::(anonymous namespace)::kImageCopy_frag_00000006
rx::vk::(anonymous namespace)::kImageCopy_frag_00000008
rx::vk::(anonymous namespace)::kImageCopy_frag_00000009
rx::vk::(anonymous namespace)::kImageCopy_frag_0000000A
rx::vk::(anonymous namespace)::kImageCopy_frag_00000010
rx::vk::(anonymous namespace)::kImageCopy_frag_00000011
rx::vk::(anonymous namespace)::kImageCopy_frag_00000012
rx::vk::(anonymous namespace)::kImageCopy_frag_00000014
rx::vk::(anonymous namespace)::kImageCopy_frag_00000015
rx::vk::(anonymous namespace)::kImageCopy_frag_00000016
rx::vk::(anonymous namespace)::kImageCopy_frag_00000018
rx::vk::(anonymous namespace)::kImageCopy_frag_00000019
rx::vk::(anonymous namespace)::kImageCopy_frag_0000001A
rx::vk::(anonymous namespace)::kImageCopy_frag_00000020
rx::vk::(anonymous namespace)::kImageCopy_frag_00000021
rx::vk::(anonymous namespace)::kImageCopy_frag_00000022
rx::vk::(anonymous namespace)::kImageCopy_frag_00000024
rx::vk::(anonymous namespace)::kImageCopy_frag_00000025
rx::vk::(anonymous namespace)::kImageCopy_frag_00000026
rx::vk::(anonymous namespace)::kImageCopy_frag_00000028
rx::vk::(anonymous namespace)::kImageCopy_frag_00000029
rx::vk::(anonymous namespace)::kImageCopy_frag_0000002A
rx::vk::(anonymous namespace)::kImageCopy_frag_shaders
rx::vk::(anonymous namespace)::kImageMemoryBarrierData
rx::vk::(anonymous namespace)::kMismatchedComponentTypeMap
rx::vk::(anonymous namespace)::kPipelineStageFlagBitMap
rx::vk::ActiveHandleCounter::ActiveHandleCounter()
rx::vk::ActiveHandleCounter::~ActiveHandleCounter()
rx::vk::AllocateImageMemory(rx::vk::Context*, unsigned int, unsigned int*, void const*, rx::vk::Image*, rx::vk::DeviceMemory*, unsigned long*)
rx::vk::AllocateImageMemoryWithRequirements(rx::vk::Context*, unsigned int, VkMemoryRequirements const&, void const*, rx::vk::Image*, rx::vk::DeviceMemory*)
rx::vk::AttachmentOpsArray::AttachmentOpsArray()
rx::vk::AttachmentOpsArray::initWithLoadStore(unsigned long, rx::vk::ImageLayout, rx::vk::ImageLayout)
rx::vk::AttachmentOpsArray::operator=(rx::vk::AttachmentOpsArray const&)
rx::vk::AttachmentOpsArray::operator[](unsigned long)
rx::vk::AttachmentOpsArray::setLayouts(unsigned long, rx::vk::ImageLayout, rx::vk::ImageLayout)
rx::vk::AttachmentOpsArray::setOps(unsigned long, VkAttachmentLoadOp, VkAttachmentStoreOp)
rx::vk::AttachmentOpsArray::setStencilOps(unsigned long, VkAttachmentLoadOp, VkAttachmentStoreOp)
rx::vk::AttachmentOpsArray::~AttachmentOpsArray()
rx::vk::BufferHelper::BufferHelper()
rx::vk::BufferHelper::acquireFromExternal(rx::ContextVk*, unsigned int, unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::BufferHelper::canAccumulateRead(rx::ContextVk*, unsigned int)
rx::vk::BufferHelper::canAccumulateWrite(rx::ContextVk*, unsigned int)
rx::vk::BufferHelper::changeQueue(unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::BufferHelper::copyFromBuffer(rx::ContextVk*, rx::vk::BufferHelper*, unsigned int, VkBufferCopy const*)
rx::vk::BufferHelper::destroy(rx::RendererVk*)
rx::vk::BufferHelper::flush(rx::RendererVk*, unsigned long, unsigned long)
rx::vk::BufferHelper::init(rx::vk::Context*, VkBufferCreateInfo const&, unsigned int)
rx::vk::BufferHelper::initializeNonZeroMemory(rx::vk::Context*, unsigned long)
rx::vk::BufferHelper::invalidate(rx::RendererVk*, unsigned long, unsigned long)
rx::vk::BufferHelper::mapImpl(rx::ContextVk*)
rx::vk::BufferHelper::release(rx::RendererVk*)
rx::vk::BufferHelper::releaseToExternal(rx::ContextVk*, unsigned int, unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::BufferHelper::unmap(rx::RendererVk*)
rx::vk::BufferHelper::~BufferHelper()
rx::vk::CanSupportGPUShader5EXT(VkPhysicalDeviceFeatures const&)
rx::vk::ClearValuesArray::ClearValuesArray()
rx::vk::ClearValuesArray::operator=(rx::vk::ClearValuesArray const&)
rx::vk::ClearValuesArray::store(unsigned int, unsigned int, VkClearValue const&)
rx::vk::ClearValuesArray::~ClearValuesArray()
rx::vk::CommandBufferHelper::CommandBufferHelper()
rx::vk::CommandBufferHelper::beginRenderPass(rx::vk::Framebuffer const&, gl::Rectangle const&, rx::vk::RenderPassDesc const&, rx::vk::AttachmentOpsArray const&, rx::vk::ClearValuesArray const&, rx::vk::priv::SecondaryCommandBuffer**)
rx::vk::CommandBufferHelper::beginTransformFeedback(unsigned long, VkBuffer_T* const*, bool)
rx::vk::CommandBufferHelper::bufferRead(rx::vk::ResourceUseList*, unsigned int, rx::vk::PipelineStage, rx::vk::BufferHelper*)
rx::vk::CommandBufferHelper::bufferWrite(rx::vk::ResourceUseList*, unsigned int, rx::vk::PipelineStage, rx::vk::BufferHelper*)
rx::vk::CommandBufferHelper::endTransformFeedback()
rx::vk::CommandBufferHelper::executeBarriers(rx::vk::priv::CommandBuffer*)
rx::vk::CommandBufferHelper::flushToPrimary(rx::ContextVk*, rx::vk::priv::CommandBuffer*)
rx::vk::CommandBufferHelper::flushToPrimary(rx::ContextVk*, rx::vk::priv::CommandBuffer*)::trace_event_unique_catstatic680
rx::vk::CommandBufferHelper::imageRead(rx::vk::ResourceUseList*, unsigned int, rx::vk::ImageLayout, rx::vk::ImageHelper*)
rx::vk::CommandBufferHelper::imageWrite(rx::vk::ResourceUseList*, unsigned int, rx::vk::ImageLayout, rx::vk::ImageHelper*)
rx::vk::CommandBufferHelper::initialize(bool, bool)
rx::vk::CommandBufferHelper::pauseTransformFeedbackIfStarted()
rx::vk::CommandBufferHelper::releaseToContextQueue(rx::ContextVk*)
rx::vk::CommandBufferHelper::reset()
rx::vk::CommandBufferHelper::resumeTransformFeedbackIfStarted()
rx::vk::CommandBufferHelper::~CommandBufferHelper()
rx::vk::Context::Context(rx::RendererVk*)
rx::vk::Context::getDevice() const
rx::vk::Context::~Context()
rx::vk::ConvertImageLayoutToVkImageLayout(rx::vk::ImageLayout)
rx::vk::DescriptorSetLayoutDesc::DescriptorSetLayoutDesc()
rx::vk::DescriptorSetLayoutDesc::unpackBindings(angle::FixedVector<VkDescriptorSetLayoutBinding, 64ul, std::__1::array<VkDescriptorSetLayoutBinding, 64ul> >*, std::__1::vector<VkSampler_T*, std::__1::allocator<VkSampler_T*> >*) const
rx::vk::DescriptorSetLayoutDesc::update(unsigned int, VkDescriptorType, unsigned int, unsigned int, rx::vk::Sampler const*)
rx::vk::DescriptorSetLayoutDesc::~DescriptorSetLayoutDesc()
rx::vk::DeviceMemory::map(VkDevice_T*, unsigned long, unsigned long, unsigned int, unsigned char**) const::trace_event_unique_catstatic1363
rx::vk::DynamicBuffer::DynamicBuffer()
rx::vk::DynamicBuffer::DynamicBuffer(rx::vk::DynamicBuffer&&)
rx::vk::DynamicBuffer::allocate(rx::ContextVk*, unsigned long, unsigned char**, VkBuffer_T**, unsigned long*, bool*)
rx::vk::DynamicBuffer::allocateNewBuffer(rx::ContextVk*)
rx::vk::DynamicBuffer::destroy(rx::RendererVk*)
rx::vk::DynamicBuffer::destroyBufferList(rx::RendererVk*, std::__1::vector<rx::vk::BufferHelper*, std::__1::allocator<rx::vk::BufferHelper*> >*)
rx::vk::DynamicBuffer::flush(rx::ContextVk*)
rx::vk::DynamicBuffer::init(rx::RendererVk*, unsigned int, unsigned long, unsigned long, bool)
rx::vk::DynamicBuffer::initWithFlags(rx::RendererVk*, unsigned int, unsigned long, unsigned long, unsigned int)
rx::vk::DynamicBuffer::release(rx::RendererVk*)
rx::vk::DynamicBuffer::releaseInFlightBuffers(rx::ContextVk*)
rx::vk::DynamicBuffer::~DynamicBuffer()
rx::vk::DynamicDescriptorPool::DynamicDescriptorPool()
rx::vk::DynamicDescriptorPool::allocateNewPool(rx::ContextVk*)
rx::vk::DynamicDescriptorPool::allocateSetsAndGetInfo(rx::ContextVk*, VkDescriptorSetLayout_T* const*, unsigned int, rx::vk::BindingPointer<rx::vk::DescriptorPoolHelper>*, VkDescriptorSet_T**, bool*)
rx::vk::DynamicDescriptorPool::destroy(VkDevice_T*)
rx::vk::DynamicDescriptorPool::init(rx::ContextVk*, VkDescriptorPoolSize const*, unsigned int)
rx::vk::DynamicDescriptorPool::release(rx::ContextVk*)
rx::vk::DynamicDescriptorPool::~DynamicDescriptorPool()
rx::vk::DynamicQueryPool::DynamicQueryPool()
rx::vk::DynamicQueryPool::allocateNewPool(rx::ContextVk*)
rx::vk::DynamicQueryPool::allocateQuery(rx::ContextVk*, rx::vk::QueryHelper*)
rx::vk::DynamicQueryPool::destroy(VkDevice_T*)
rx::vk::DynamicQueryPool::freeQuery(rx::ContextVk*, rx::vk::QueryHelper*)
rx::vk::DynamicQueryPool::init(rx::ContextVk*, VkQueryType, unsigned int)
rx::vk::DynamicQueryPool::~DynamicQueryPool()
rx::vk::DynamicShadowBuffer::DynamicShadowBuffer()
rx::vk::DynamicShadowBuffer::allocate(unsigned long)
rx::vk::DynamicShadowBuffer::init(unsigned long)
rx::vk::DynamicShadowBuffer::release()
rx::vk::DynamicShadowBuffer::~DynamicShadowBuffer()
rx::vk::DynamicallyGrowingPool<rx::vk::QueryPool>::~DynamicallyGrowingPool()
rx::vk::Format::getImageCopyBufferAlignment() const
rx::vk::Format::hasEmulatedImageChannels() const
rx::vk::Format::initBufferFallback(rx::RendererVk*, rx::vk::BufferFormatInitInfo const*, int)
rx::vk::Format::initImageFallback(rx::RendererVk*, rx::vk::ImageFormatInitInfo const*, int)
rx::vk::Format::initialize(rx::RendererVk*, angle::Format const&)
rx::vk::Format::initialize(rx::RendererVk*, angle::Format const&)::kInfo
rx::vk::FormatTable::FormatTable()
rx::vk::FormatTable::initialize(rx::RendererVk*, gl::TextureCapsMap*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*)
rx::vk::FormatTable::~FormatTable()
rx::vk::FramebufferDesc::FramebufferDesc()
rx::vk::FramebufferDesc::FramebufferDesc(rx::vk::FramebufferDesc const&)
rx::vk::FramebufferDesc::hash() const
rx::vk::FramebufferDesc::operator==(rx::vk::FramebufferDesc const&) const
rx::vk::FramebufferDesc::reset()
rx::vk::FramebufferDesc::update(unsigned int, rx::Serial)
rx::vk::FramebufferDesc::~FramebufferDesc()
rx::vk::FramebufferHelper::FramebufferHelper()
rx::vk::FramebufferHelper::init(rx::ContextVk*, VkFramebufferCreateInfo const&)
rx::vk::FramebufferHelper::operator=(rx::vk::FramebufferHelper&&)
rx::vk::FramebufferHelper::release(rx::ContextVk*)
rx::vk::FramebufferHelper::~FramebufferHelper()
rx::vk::GarbageObject::GarbageObject(rx::vk::GarbageObject&&)
rx::vk::GarbageObject::GarbageObject(rx::vk::HandleType, rx::vk::GarbageHandle_T*)
rx::vk::GarbageObject::destroy(rx::RendererVk*)
rx::vk::GarbageObject::destroy(rx::RendererVk*)::trace_event_unique_catstatic607
rx::vk::Get2DTextureType(unsigned int, int)
rx::vk::GetDepthStencilAspectFlags(angle::Format const&)
rx::vk::GetFormatAspectFlags(angle::Format const&)
rx::vk::GetMandatoryFormatSupport(VkFormat)
rx::vk::GetMaximalImageUsageFlags(rx::RendererVk*, VkFormat)
rx::vk::GraphicsPipelineDesc::GraphicsPipelineDesc()
rx::vk::GraphicsPipelineDesc::getRasterizationSamples() const
rx::vk::GraphicsPipelineDesc::hash() const
rx::vk::GraphicsPipelineDesc::initDefaults()
rx::vk::GraphicsPipelineDesc::initializePipeline(rx::ContextVk*, rx::vk::PipelineCache const&, rx::vk::RenderPass const&, rx::vk::PipelineLayout const&, angle::BitSetT<16ul, unsigned long, unsigned long> const&, angle::BitSetT<32ul, unsigned long, unsigned long> const&, rx::vk::ShaderModule const*, rx::vk::ShaderModule const*, rx::vk::ShaderModule const*, angle::BitSetT<1ul, unsigned int, sh::vk::SpecializationConstantId>, rx::vk::Pipeline*) const
rx::vk::GraphicsPipelineDesc::operator delete(void*)
rx::vk::GraphicsPipelineDesc::operator new(unsigned long)
rx::vk::GraphicsPipelineDesc::operator==(rx::vk::GraphicsPipelineDesc const&) const
rx::vk::GraphicsPipelineDesc::setColorWriteMask(unsigned int, angle::BitSetT<8ul, unsigned long, unsigned long> const&)
rx::vk::GraphicsPipelineDesc::setCullMode(VkCullModeFlagBits)
rx::vk::GraphicsPipelineDesc::setDepthFunc(VkCompareOp)
rx::vk::GraphicsPipelineDesc::setDepthTestEnabled(bool)
rx::vk::GraphicsPipelineDesc::setDepthWriteEnabled(bool)
rx::vk::GraphicsPipelineDesc::setRasterizationSamples(unsigned int)
rx::vk::GraphicsPipelineDesc::setRenderPassDesc(rx::vk::RenderPassDesc const&)
rx::vk::GraphicsPipelineDesc::setScissor(VkRect2D const&)
rx::vk::GraphicsPipelineDesc::setSingleColorWriteMask(unsigned int, unsigned int)
rx::vk::GraphicsPipelineDesc::setStencilBackFuncs(unsigned char, VkCompareOp, unsigned char)
rx::vk::GraphicsPipelineDesc::setStencilBackOps(VkStencilOp, VkStencilOp, VkStencilOp)
rx::vk::GraphicsPipelineDesc::setStencilBackWriteMask(unsigned char)
rx::vk::GraphicsPipelineDesc::setStencilFrontFuncs(unsigned char, VkCompareOp, unsigned char)
rx::vk::GraphicsPipelineDesc::setStencilFrontOps(VkStencilOp, VkStencilOp, VkStencilOp)
rx::vk::GraphicsPipelineDesc::setStencilFrontWriteMask(unsigned char)
rx::vk::GraphicsPipelineDesc::setStencilTestEnabled(bool)
rx::vk::GraphicsPipelineDesc::setViewport(VkViewport const&)
rx::vk::GraphicsPipelineDesc::updateAlphaToCoverageEnable(angle::BitSetT<64ul, unsigned long, unsigned long>*, bool)
rx::vk::GraphicsPipelineDesc::updateAlphaToOneEnable(angle::BitSetT<64ul, unsigned long, unsigned long>*, bool)
rx::vk::GraphicsPipelineDesc::updateBlendColor(angle::BitSetT<64ul, unsigned long, unsigned long>*, angle::Color<float> const&)
rx::vk::GraphicsPipelineDesc::updateBlendEnabled(angle::BitSetT<64ul, unsigned long, unsigned long>*, bool)
rx::vk::GraphicsPipelineDesc::updateBlendEquations(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::BlendState const&)
rx::vk::GraphicsPipelineDesc::updateBlendFuncs(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::BlendState const&)
rx::vk::GraphicsPipelineDesc::updateColorWriteMask(angle::BitSetT<64ul, unsigned long, unsigned long>*, unsigned int, angle::BitSetT<8ul, unsigned long, unsigned long> const&)
rx::vk::GraphicsPipelineDesc::updateCullMode(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::RasterizerState const&)
rx::vk::GraphicsPipelineDesc::updateDepthFunc(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&)
rx::vk::GraphicsPipelineDesc::updateDepthRange(angle::BitSetT<64ul, unsigned long, unsigned long>*, float, float)
rx::vk::GraphicsPipelineDesc::updateDepthTestEnabled(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&, gl::Framebuffer const*)
rx::vk::GraphicsPipelineDesc::updateDepthWriteEnabled(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&, gl::Framebuffer const*)
rx::vk::GraphicsPipelineDesc::updateFrontFace(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::RasterizerState const&, bool)
rx::vk::GraphicsPipelineDesc::updateLineWidth(angle::BitSetT<64ul, unsigned long, unsigned long>*, float)
rx::vk::GraphicsPipelineDesc::updatePolygonOffset(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::RasterizerState const&)
rx::vk::GraphicsPipelineDesc::updatePolygonOffsetFillEnabled(angle::BitSetT<64ul, unsigned long, unsigned long>*, bool)
rx::vk::GraphicsPipelineDesc::updatePrimitiveRestartEnabled(angle::BitSetT<64ul, unsigned long, unsigned long>*, bool)
rx::vk::GraphicsPipelineDesc::updateRasterizationSamples(angle::BitSetT<64ul, unsigned long, unsigned long>*, unsigned int)
rx::vk::GraphicsPipelineDesc::updateRasterizerDiscardEnabled(angle::BitSetT<64ul, unsigned long, unsigned long>*, bool)
rx::vk::GraphicsPipelineDesc::updateRenderPassDesc(angle::BitSetT<64ul, unsigned long, unsigned long>*, rx::vk::RenderPassDesc const&)
rx::vk::GraphicsPipelineDesc::updateSampleMask(angle::BitSetT<64ul, unsigned long, unsigned long>*, unsigned int, unsigned int)
rx::vk::GraphicsPipelineDesc::updateScissor(angle::BitSetT<64ul, unsigned long, unsigned long>*, VkRect2D const&)
rx::vk::GraphicsPipelineDesc::updateStencilBackFuncs(angle::BitSetT<64ul, unsigned long, unsigned long>*, int, gl::DepthStencilState const&)
rx::vk::GraphicsPipelineDesc::updateStencilBackOps(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&)
rx::vk::GraphicsPipelineDesc::updateStencilBackWriteMask(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&, gl::Framebuffer const*)
rx::vk::GraphicsPipelineDesc::updateStencilFrontFuncs(angle::BitSetT<64ul, unsigned long, unsigned long>*, int, gl::DepthStencilState const&)
rx::vk::GraphicsPipelineDesc::updateStencilFrontOps(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&)
rx::vk::GraphicsPipelineDesc::updateStencilFrontWriteMask(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&, gl::Framebuffer const*)
rx::vk::GraphicsPipelineDesc::updateStencilTestEnabled(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::DepthStencilState const&, gl::Framebuffer const*)
rx::vk::GraphicsPipelineDesc::updateTopology(angle::BitSetT<64ul, unsigned long, unsigned long>*, gl::PrimitiveMode)
rx::vk::GraphicsPipelineDesc::updateVertexInput(angle::BitSetT<64ul, unsigned long, unsigned long>*, unsigned int, unsigned int, unsigned int, angle::FormatID, unsigned int)
rx::vk::GraphicsPipelineDesc::updateViewport(angle::BitSetT<64ul, unsigned long, unsigned long>*, VkViewport const&)
rx::vk::GraphicsPipelineDesc::~GraphicsPipelineDesc()
rx::vk::ImageHelper::CalculateBufferInfo(rx::ContextVk*, gl::Extents const&, gl::InternalFormat const&, gl::PixelUnpackState const&, unsigned int, bool, unsigned int*, unsigned int*, unsigned int*)
rx::vk::ImageHelper::Copy(rx::vk::ImageHelper*, rx::vk::ImageHelper*, gl::Offset const&, gl::Offset const&, gl::Extents const&, VkImageSubresourceLayers const&, VkImageSubresourceLayers const&, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::GetReadPixelsParams(rx::ContextVk*, gl::PixelPackState const&, gl::Buffer*, unsigned int, unsigned int, gl::Rectangle const&, gl::Rectangle const&, rx::PackPixelsParams*, unsigned int*)
rx::vk::ImageHelper::ImageHelper()
rx::vk::ImageHelper::ImageHelper(rx::vk::ImageHelper&&)
rx::vk::ImageHelper::SubresourceUpdate::release(rx::RendererVk*)
rx::vk::ImageHelper::acquireFromExternal(rx::ContextVk*, unsigned int, unsigned int, rx::vk::ImageLayout, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::changeLayoutAndQueue(unsigned int, rx::vk::ImageLayout, unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::clearColor(VkClearColorValue const&, unsigned int, unsigned int, unsigned int, unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::clearDepthStencil(unsigned int, VkClearDepthStencilValue const&, unsigned int, unsigned int, unsigned int, unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::copyImageDataToBuffer(rx::ContextVk*, unsigned long, unsigned int, unsigned int, gl::Box const&, rx::vk::BufferHelper**, unsigned long*, std::__1::array<unsigned long, 2ul>*, unsigned char**)
rx::vk::ImageHelper::copyImageDataToBuffer(rx::ContextVk*, unsigned long, unsigned int, unsigned int, gl::Box const&, rx::vk::BufferHelper**, unsigned long*, std::__1::array<unsigned long, 2ul>*, unsigned char**)::trace_event_unique_catstatic4238
rx::vk::ImageHelper::destroy(rx::RendererVk*)
rx::vk::ImageHelper::flushAllStagedUpdates(rx::ContextVk*)
rx::vk::ImageHelper::flushSingleSubresourceStagedUpdates(rx::ContextVk*, unsigned int, unsigned int, rx::vk::priv::SecondaryCommandBuffer*, rx::vk::ClearValuesArray*, unsigned int)
rx::vk::ImageHelper::flushStagedUpdates(rx::ContextVk*, unsigned int, unsigned int, unsigned int, unsigned int, angle::BitSetT<16ul, unsigned long, unsigned long>, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::generateMipmapsWithBlit(rx::ContextVk*, unsigned int)
rx::vk::ImageHelper::getAspectFlags() const
rx::vk::ImageHelper::getCurrentLayout() const
rx::vk::ImageHelper::getLevelExtents(unsigned int) const
rx::vk::ImageHelper::getLevelExtents2D(unsigned int) const
rx::vk::ImageHelper::init(rx::vk::Context*, gl::TextureType, VkExtent3D const&, rx::vk::Format const&, int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
rx::vk::ImageHelper::init2DStaging(rx::vk::Context*, rx::vk::MemoryProperties const&, gl::Extents const&, rx::vk::Format const&, unsigned int, unsigned int)
rx::vk::ImageHelper::init2DWeakReference(rx::vk::Context*, VkImage_T*, gl::Extents const&, rx::vk::Format const&, int)
rx::vk::ImageHelper::initExternal(rx::vk::Context*, gl::TextureType, VkExtent3D const&, rx::vk::Format const&, int, unsigned int, unsigned int, rx::vk::ImageLayout, void const*, unsigned int, unsigned int, unsigned int, unsigned int)
rx::vk::ImageHelper::initExternalMemory(rx::vk::Context*, rx::vk::MemoryProperties const&, VkMemoryRequirements const&, void const*, unsigned int, unsigned int)
rx::vk::ImageHelper::initImageView(rx::vk::Context*, gl::TextureType, unsigned int, gl::SwizzleState const&, rx::vk::ImageView*, unsigned int, unsigned int)
rx::vk::ImageHelper::initLayerImageView(rx::vk::Context*, gl::TextureType, unsigned int, gl::SwizzleState const&, rx::vk::ImageView*, unsigned int, unsigned int, unsigned int, unsigned int) const
rx::vk::ImageHelper::initLayerImageViewImpl(rx::vk::Context*, gl::TextureType, unsigned int, gl::SwizzleState const&, rx::vk::ImageView*, unsigned int, unsigned int, unsigned int, unsigned int, VkFormat, VkImageViewUsageCreateInfo const*) const
rx::vk::ImageHelper::initMemory(rx::vk::Context*, rx::vk::MemoryProperties const&, unsigned int)
rx::vk::ImageHelper::initStagingBuffer(rx::RendererVk*, unsigned long, unsigned int, unsigned long)
rx::vk::ImageHelper::initializeNonZeroMemory(rx::vk::Context*, unsigned long)
rx::vk::ImageHelper::isLayoutChangeNecessary(rx::vk::ImageLayout) const
rx::vk::ImageHelper::isUpdateStaged(unsigned int, unsigned int)
rx::vk::ImageHelper::readPixels(rx::ContextVk*, gl::Rectangle const&, rx::PackPixelsParams const&, VkImageAspectFlagBits, unsigned int, unsigned int, void*, rx::vk::DynamicBuffer*)
rx::vk::ImageHelper::readPixels(rx::ContextVk*, gl::Rectangle const&, rx::PackPixelsParams const&, VkImageAspectFlagBits, unsigned int, unsigned int, void*, rx::vk::DynamicBuffer*)::trace_event_unique_catstatic4443
rx::vk::ImageHelper::readPixelsForGetImage(rx::ContextVk*, gl::PixelPackState const&, gl::Buffer*, unsigned int, unsigned int, unsigned int, unsigned int, void*)
rx::vk::ImageHelper::releaseImage(rx::RendererVk*)
rx::vk::ImageHelper::releaseStagingBuffer(rx::RendererVk*)
rx::vk::ImageHelper::releaseToExternal(rx::ContextVk*, unsigned int, unsigned int, rx::vk::ImageLayout, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::removeSingleSubresourceStagedUpdates(rx::ContextVk*, unsigned int, unsigned int)
rx::vk::ImageHelper::removeStagedUpdates(rx::ContextVk*, unsigned int, unsigned int)
rx::vk::ImageHelper::resetImageWeakReference()
rx::vk::ImageHelper::resolve(rx::vk::ImageHelper*, VkImageResolve const&, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::ImageHelper::setBaseAndMaxLevels(unsigned int, unsigned int)
rx::vk::ImageHelper::stageClear(gl::ImageIndex const&, unsigned int, VkClearValue const&)
rx::vk::ImageHelper::stageClearIfEmulatedFormat(rx::vk::Context*)
rx::vk::ImageHelper::stageRobustResourceClear(gl::ImageIndex const&)
rx::vk::ImageHelper::stageRobustResourceClearWithFormat(rx::ContextVk*, gl::ImageIndex const&, gl::Extents const&, rx::vk::Format const&)
rx::vk::ImageHelper::stageSubresourceUpdate(rx::ContextVk*, gl::ImageIndex const&, gl::Extents const&, gl::Offset const&, gl::InternalFormat const&, gl::PixelUnpackState const&, unsigned int, unsigned char const*, rx::vk::Format const&)
rx::vk::ImageHelper::stageSubresourceUpdateAndGetData(rx::ContextVk*, unsigned long, gl::ImageIndex const&, gl::Extents const&, gl::Offset const&, unsigned char**)
rx::vk::ImageHelper::stageSubresourceUpdateFromBuffer(rx::ContextVk*, unsigned long, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, VkExtent3D const&, VkOffset3D const&, rx::vk::BufferHelper*, std::__1::array<unsigned long, 2ul>)
rx::vk::ImageHelper::stageSubresourceUpdateFromFramebuffer(gl::Context const*, gl::ImageIndex const&, gl::Rectangle const&, gl::Offset const&, gl::Extents const&, gl::InternalFormat const&, rx::FramebufferVk*)
rx::vk::ImageHelper::stageSubresourceUpdateFromImage(rx::vk::ImageHelper*, gl::ImageIndex const&, gl::Offset const&, gl::Extents const&, VkImageType)
rx::vk::ImageHelper::stageSubresourceUpdateImpl(rx::ContextVk*, gl::ImageIndex const&, gl::Extents const&, gl::Offset const&, gl::InternalFormat const&, gl::PixelUnpackState const&, unsigned int, unsigned char const*, rx::vk::Format const&, unsigned int, unsigned int, unsigned int)
rx::vk::ImageHelper::updateLayoutAndBarrier(unsigned int, rx::vk::ImageLayout, rx::vk::PipelineBarrier*)
rx::vk::ImageHelper::~ImageHelper()
rx::vk::ImageViewHelper::ImageViewHelper()
rx::vk::ImageViewHelper::ImageViewHelper(rx::vk::ImageViewHelper&&)
rx::vk::ImageViewHelper::destroy(VkDevice_T*)
rx::vk::ImageViewHelper::getAssignSerial(rx::ContextVk*, unsigned int, unsigned int)
rx::vk::ImageViewHelper::getLevelDrawImageView(rx::ContextVk*, gl::TextureType, rx::vk::ImageHelper const&, unsigned int, unsigned int, unsigned int, VkFormat, rx::vk::ImageView const**)
rx::vk::ImageViewHelper::getLevelLayerDrawImageView(rx::ContextVk*, rx::vk::ImageHelper const&, unsigned int, unsigned int, rx::vk::ImageView const**)
rx::vk::ImageViewHelper::initReadViews(rx::ContextVk*, gl::TextureType, rx::vk::ImageHelper const&, rx::vk::Format const&, gl::SwizzleState const&, gl::SwizzleState const&, unsigned int, unsigned int, unsigned int, unsigned int)
rx::vk::ImageViewHelper::initSRGBReadViews(rx::ContextVk*, gl::TextureType, rx::vk::ImageHelper const&, rx::vk::Format const&, gl::SwizzleState const&, gl::SwizzleState const&, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
rx::vk::ImageViewHelper::release(rx::RendererVk*)
rx::vk::ImageViewHelper::retain(rx::vk::ResourceUseList*) const
rx::vk::ImageViewHelper::~ImageViewHelper()
rx::vk::InitMappableAllocation(rx::vk::Context*, rx::vk::Allocator const&, rx::vk::Allocation*, unsigned long, int, unsigned int)
rx::vk::InitMappableDeviceMemory(rx::vk::Context*, rx::vk::DeviceMemory*, unsigned long, int, unsigned int)
rx::vk::InitShaderAndSerial(rx::vk::Context*, rx::vk::ObjectAndSerial<rx::vk::ShaderModule>*, unsigned int const*, unsigned long)
rx::vk::LineLoopHelper::Draw(unsigned int, unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::LineLoopHelper::LineLoopHelper(rx::RendererVk*)
rx::vk::LineLoopHelper::getIndexBufferForDrawArrays(rx::ContextVk*, unsigned int, int, rx::vk::BufferHelper**, unsigned long*)
rx::vk::LineLoopHelper::getIndexBufferForElementArrayBuffer(rx::ContextVk*, rx::BufferVk*, gl::DrawElementsType, int, long, rx::vk::BufferHelper**, unsigned long*, unsigned int*)
rx::vk::LineLoopHelper::getIndexBufferForElementArrayBuffer(rx::ContextVk*, rx::BufferVk*, gl::DrawElementsType, int, long, rx::vk::BufferHelper**, unsigned long*, unsigned int*)::trace_event_unique_catstatic1913
rx::vk::LineLoopHelper::release(rx::ContextVk*)
rx::vk::LineLoopHelper::streamArrayIndirect(rx::ContextVk*, unsigned long, rx::vk::BufferHelper*, unsigned long, rx::vk::BufferHelper**, unsigned long*, rx::vk::BufferHelper**, unsigned long*)
rx::vk::LineLoopHelper::streamIndices(rx::ContextVk*, gl::DrawElementsType, int, unsigned char const*, rx::vk::BufferHelper**, unsigned long*, unsigned int*)
rx::vk::LineLoopHelper::streamIndicesIndirect(rx::ContextVk*, gl::DrawElementsType, rx::vk::BufferHelper*, rx::vk::BufferHelper*, unsigned long, rx::vk::BufferHelper**, unsigned long*, rx::vk::BufferHelper**, unsigned long*)
rx::vk::LineLoopHelper::~LineLoopHelper()
rx::vk::MakeDebugUtilsLabel(unsigned int, char const*, VkDebugUtilsLabelEXT*)
rx::vk::MakeDebugUtilsLabel(unsigned int, char const*, VkDebugUtilsLabelEXT*)::kLabelColors
rx::vk::MemoryProperties::MemoryProperties()
rx::vk::MemoryProperties::destroy()
rx::vk::MemoryProperties::init(VkPhysicalDevice_T*)
rx::vk::PersistentCommandPool::PersistentCommandPool()
rx::vk::PersistentCommandPool::allocate(rx::vk::Context*, rx::vk::priv::CommandBuffer*)
rx::vk::PersistentCommandPool::allocateCommandBuffer(rx::vk::Context*)
rx::vk::PersistentCommandPool::collect(rx::vk::Context*, rx::vk::priv::CommandBuffer&&)
rx::vk::PersistentCommandPool::destroy(VkDevice_T*)
rx::vk::PersistentCommandPool::init(rx::vk::Context*, unsigned int)
rx::vk::PersistentCommandPool::~PersistentCommandPool()
rx::vk::PipelineHelper::addTransition(angle::BitSetT<64ul, unsigned long, unsigned long>, rx::vk::GraphicsPipelineDesc const*, rx::vk::PipelineHelper*)
rx::vk::PipelineLayoutDesc::PipelineLayoutDesc()
rx::vk::PipelineLayoutDesc::updateDescriptorSetLayout(unsigned int, rx::vk::DescriptorSetLayoutDesc const&)
rx::vk::PipelineLayoutDesc::updatePushConstantRange(gl::ShaderType, unsigned int, unsigned int)
rx::vk::PipelineLayoutDesc::~PipelineLayoutDesc()
rx::vk::QueryHelper::QueryHelper()
rx::vk::QueryHelper::beginOcclusionQuery(rx::ContextVk*, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::QueryHelper::beginQuery(rx::ContextVk*)
rx::vk::QueryHelper::deinit()
rx::vk::QueryHelper::endOcclusionQuery(rx::ContextVk*, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::QueryHelper::endQuery(rx::ContextVk*)
rx::vk::QueryHelper::flushAndWriteTimestamp(rx::ContextVk*)
rx::vk::QueryHelper::getUint64Result(rx::ContextVk*, unsigned long*)
rx::vk::QueryHelper::getUint64ResultNonBlocking(rx::ContextVk*, unsigned long*, bool*)
rx::vk::QueryHelper::hasPendingWork(rx::ContextVk*)
rx::vk::QueryHelper::writeTimestamp(rx::ContextVk*, rx::vk::priv::CommandBuffer*)
rx::vk::QueryHelper::writeTimestamp(rx::ContextVk*, rx::vk::priv::SecondaryCommandBuffer*)
rx::vk::QueryHelper::~QueryHelper()
rx::vk::Recycler<rx::vk::Semaphore>::recycle(rx::vk::Semaphore&&)
rx::vk::RenderPassDesc::RenderPassDesc()
rx::vk::RenderPassDesc::attachmentCount() const
rx::vk::RenderPassDesc::hash() const
rx::vk::RenderPassDesc::operator=(rx::vk::RenderPassDesc const&)
rx::vk::RenderPassDesc::packColorAttachment(unsigned long, angle::FormatID)
rx::vk::RenderPassDesc::packColorAttachmentGap(unsigned long)
rx::vk::RenderPassDesc::packDepthStencilAttachment(angle::FormatID)
rx::vk::RenderPassDesc::setSamples(int)
rx::vk::RenderPassDesc::~RenderPassDesc()
rx::vk::Resource::Resource()
rx::vk::Resource::finishRunningCommands(rx::ContextVk*)
rx::vk::Resource::waitForIdle(rx::ContextVk*)
rx::vk::Resource::~Resource()
rx::vk::ResourceUseList::ResourceUseList()
rx::vk::ResourceUseList::releaseResourceUses()
rx::vk::ResourceUseList::releaseResourceUsesAndUpdateSerials(rx::Serial)
rx::vk::ResourceUseList::~ResourceUseList()
rx::vk::SamplerDesc::SamplerDesc(gl::SamplerState const&, bool)
rx::vk::SamplerDesc::init(rx::ContextVk*, rx::vk::Sampler*) const
rx::vk::SamplerDesc::update(gl::SamplerState const&, bool)
rx::vk::SamplerDesc::~SamplerDesc()
rx::vk::ShaderLibrary::ShaderLibrary()
rx::vk::ShaderLibrary::destroy(VkDevice_T*)
rx::vk::ShaderLibrary::getBlitResolveStencilNoExport_comp(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getBlitResolve_frag(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getConvertIndexIndirectLineLoop_comp(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getConvertIndex_comp(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getConvertIndirectLineLoop_comp(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getConvertVertex_comp(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getFullScreenQuad_vert(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getImageClear_frag(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::getImageCopy_frag(rx::vk::Context*, unsigned int, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >**)
rx::vk::ShaderLibrary::~ShaderLibrary()
rx::vk::ShaderProgramHelper::ShaderProgramHelper()
rx::vk::ShaderProgramHelper::destroy(VkDevice_T*)
rx::vk::ShaderProgramHelper::enableSpecializationConstant(sh::vk::SpecializationConstantId)
rx::vk::ShaderProgramHelper::getComputePipeline(rx::vk::Context*, rx::vk::PipelineLayout const&, rx::vk::ObjectAndSerial<rx::vk::Pipeline>**)
rx::vk::ShaderProgramHelper::release(rx::ContextVk*)
rx::vk::ShaderProgramHelper::setShader(gl::ShaderType, rx::vk::RefCounted<rx::vk::ObjectAndSerial<rx::vk::ShaderModule> >*)
rx::vk::ShaderProgramHelper::valid(gl::ShaderType) const
rx::vk::ShaderProgramHelper::~ShaderProgramHelper()
rx::vk::SharedGarbage::SharedGarbage(rx::vk::SharedGarbage&&)
rx::vk::SharedGarbage::SharedGarbage(rx::vk::SharedResourceUse&&, std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >&&)
rx::vk::SharedGarbage::destroyIfComplete(rx::RendererVk*, rx::Serial)
rx::vk::SharedGarbage::operator=(rx::vk::SharedGarbage&&)
rx::vk::SharedGarbage::~SharedGarbage()
rx::vk::StagingBuffer::StagingBuffer()
rx::vk::StagingBuffer::collectGarbage(rx::RendererVk*, rx::Serial)
rx::vk::StagingBuffer::init(rx::vk::Context*, unsigned long, rx::vk::StagingUsage)
rx::vk::SyncHelper::SyncHelper()
rx::vk::SyncHelper::clientWait(rx::vk::Context*, rx::ContextVk*, bool, unsigned long, VkResult*)
rx::vk::SyncHelper::dupNativeFenceFD(rx::vk::Context*, int*) const
rx::vk::SyncHelper::getStatus(rx::vk::Context*, bool*) const
rx::vk::SyncHelper::initialize(rx::ContextVk*)
rx::vk::SyncHelper::releaseToRenderer(rx::RendererVk*)
rx::vk::SyncHelper::serverWait(rx::ContextVk*)
rx::vk::SyncHelper::~SyncHelper()
rx::vk::SyncHelperNativeFence::clientWait(rx::vk::Context*, rx::ContextVk*, bool, unsigned long, VkResult*)
rx::vk::SyncHelperNativeFence::dupNativeFenceFD(rx::vk::Context*, int*) const
rx::vk::SyncHelperNativeFence::getStatus(rx::vk::Context*, bool*) const
rx::vk::SyncHelperNativeFence::initializeWithFd(rx::ContextVk*, int)
rx::vk::SyncHelperNativeFence::releaseToRenderer(rx::RendererVk*)
rx::vk::SyncHelperNativeFence::serverWait(rx::ContextVk*)
rx::vk::SyncHelperNativeFence::~SyncHelperNativeFence()
rx::vk::TextureDescriptorDesc::TextureDescriptorDesc()
rx::vk::TextureDescriptorDesc::TextureDescriptorDesc(rx::vk::TextureDescriptorDesc const&)
rx::vk::TextureDescriptorDesc::hash() const
rx::vk::TextureDescriptorDesc::operator==(rx::vk::TextureDescriptorDesc const&) const
rx::vk::TextureDescriptorDesc::reset()
rx::vk::TextureDescriptorDesc::update(unsigned long, rx::Serial, rx::Serial)
rx::vk::TextureDescriptorDesc::~TextureDescriptorDesc()
rx::vk::operator==(rx::vk::Format const&, rx::vk::Format const&)
rx::vk::operator==(rx::vk::RenderPassDesc const&, rx::vk::RenderPassDesc const&)
rx::vk::priv::CommandBuffer::end()::trace_event_unique_catstatic723
rx::vk::priv::SecondaryCommandBuffer::executeCommands(VkCommandBuffer_T*)
rx::vk::priv::SecondaryCommandBuffer::executeCommands(VkCommandBuffer_T*)::trace_event_unique_catstatic148
rx::vk::priv::SecondaryCommandBuffer::executeQueuedResetQueryPoolCommands(VkCommandBuffer_T*)
rx::vk::priv::SecondaryCommandBuffer::initialize(angle::PoolAllocator*)
rx::vk_gl::AddSampleCounts(unsigned int, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >*)
rx::vk_gl::GetMaxSampleCount(unsigned int)
rx::x11::XErrorToString(_XDisplay*, int)
ryViewportMaskNVrm
r}7
s
s count exceeds
s must be uniform
s%p
s,>
s..
s0.
s2
s7
s7>
s8
sBGRA
sG
sR.
sRGB
sRGBA
sRGBToLinear(f1;
sRGBx
sW5
sX5
sY5
s\>
s_abs
s_abs_diff
s_add_sat
s_clamp
s_hadd
s_mad24
s_mad_hi
s_mad_sat
s_max
s_min
s_mul24
s_mul_hi
s_rhadd
s_sub_sat
s_upsample
saC
sample
sample mask override coverage
sample_interlock_ordered
sample_interlock_unordered
sampled_image(
sampler addressing mode
sampler binding greater than maximum texture units
sampler binding not less than gl_MaxCombinedTextureImageUnits
sampler constructor must appear at point of use
sampler filter mode
sampler-constructor cannot make an array of samplers
sampler-constructor first argument must be a *texture* type matching the dimensionality and sampled type of the constructor
sampler-constructor first argument must be a scalar *texture* type
sampler-constructor requires two arguments
sampler-constructor second argument must be a scalar sampler or samplerShadow
sampler/image
sampler/image types can only be used in uniform variables or function parameters:
sampler/texture/image requires layout(binding=X)
sampler3DRect
samplerCUBE
samplerExternalOES
samplerVideoWEBGL
sampler_state
samplers and atomic_uints cannot be output parameters
samples
saturate
saveBinary
says it has
sbc is null
scalar block layout
scalar expected one element:
scalar integer expression required
scalar or vector float type members
scalar swizzle
scalar, vector, or struct type
scalar-replacement=
scalarCopy
scalar_analysis.cpp
scalar_analysis_simplification.cpp
scalar_replacement_pass.cpp
scalarize_vec_and_mat_constructor_args
scope ID
secondary_view_offset
selectPresentQueueForSurface
selecting output stream
selection control
selection header
selection_rest_statement
selection_statement
selection_statement_nonattributed
semEqual and semUnequal must either both include gl_SemanticsVolatile or neither
semUnequal must not be gl_SemanticsRelease or gl_SemanticsAcquireRelease
semUnequal must not include multiple of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease
send_tree
sequence operator is not allowed for void, arrays, or structs containing arrays
serialize
serverWait
set is too large
set=
setCompressedImage
setData
setImageExternal
setImageHelper
setPresentationTime implementation missing.
setStorage
setStorageExternalMemory
setStorageMultisample
setSubImagePaddingWorkaround
setSubImageRowByRowWorkaround
setSwapInterval
setTimestampsEnabled
set_primitive_restart_fixed_index_for_draw_arrays
set_spec_constant_default_value_pass.cpp
setenv
sh::(anonymous namespace)::AddANGLEPositionVaryingDeclaration(sh::TIntermBlock*, sh::TSymbolTable*, sh::TQualifier)
sh::(anonymous namespace)::AddAndTrueToLoopConditionTraverser::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::(anonymous namespace)::AddAndTrueToLoopConditionTraverser::~AddAndTrueToLoopConditionTraverser()
sh::(anonymous namespace)::AddArrayZeroInitForLoop(sh::TIntermTyped const*, bool, sh::TVector<sh::TIntermNode*>*, sh::TSymbolTable*)
sh::(anonymous namespace)::AddArrayZeroInitStatementList(sh::TIntermTyped const*, bool, bool, sh::TVector<sh::TIntermNode*>*, sh::TSymbolTable*)
sh::(anonymous namespace)::AddBaseVertexToGLVertexIDTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::AddBaseVertexToGLVertexIDTraverser::~AddBaseVertexToGLVertexIDTraverser()
sh::(anonymous namespace)::AddNodeUseStatements(sh::TIntermTyped*, sh::TVector<sh::TIntermNode*>*)
sh::(anonymous namespace)::AddToNameMapIfNotMapped(sh::ImmutableString const&, sh::ImmutableString const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >*)
sh::(anonymous namespace)::AddZeroInitSequence(sh::TIntermTyped const*, bool, bool, sh::TVector<sh::TIntermNode*>*, sh::TSymbolTable*)
sh::(anonymous namespace)::ArrayBoundsClamperMarker::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::ArrayBoundsClamperMarker::~ArrayBoundsClamperMarker()
sh::(anonymous namespace)::ArrayTraverser::enterArray(sh::TType const&)
sh::(anonymous namespace)::BaseAlignmentVisitor::visitVariable(sh::ShaderVariable const&, bool)
sh::(anonymous namespace)::BaseAlignmentVisitor::~BaseAlignmentVisitor()
sh::(anonymous namespace)::BlockLayoutMapVisitor::encodeVariable(sh::ShaderVariable const&, sh::BlockMemberInfo const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
sh::(anonymous namespace)::BlockLayoutMapVisitor::~BlockLayoutMapVisitor()
sh::(anonymous namespace)::CheckEFTOptimizationTraverser::visitBranch(sh::Visit, sh::TIntermBranch*)
sh::(anonymous namespace)::CheckEFTOptimizationTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::CheckEFTOptimizationTraverser::~CheckEFTOptimizationTraverser()
sh::(anonymous namespace)::CollapseNameStack(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)
sh::(anonymous namespace)::CollectVariableRefCountsTraverser::incrementStructTypeRefCount(sh::TType const&)
sh::(anonymous namespace)::CollectVariableRefCountsTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::CollectVariableRefCountsTraverser::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::(anonymous namespace)::CollectVariableRefCountsTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::CollectVariableRefCountsTraverser::~CollectVariableRefCountsTraverser()
sh::(anonymous namespace)::CollectVariablesTraverser::getMappedName(sh::TSymbol const*) const
sh::(anonymous namespace)::CollectVariablesTraverser::recordInterfaceBlock(char const*, sh::TType const&, sh::InterfaceBlock*) const
sh::(anonymous namespace)::CollectVariablesTraverser::setCommonVariableProperties(sh::TType const&, sh::TVariable const&, sh::ShaderVariable*) const
sh::(anonymous namespace)::CollectVariablesTraverser::setFieldOrVariableProperties(sh::TType const&, bool, sh::ShaderVariable*) const
sh::(anonymous namespace)::CollectVariablesTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::CollectVariablesTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::CollectVariablesTraverser::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::(anonymous namespace)::CollectVariablesTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::CollectVariablesTraverser::visitSymbol(sh::TIntermSymbol*)::kDiffName
sh::(anonymous namespace)::CollectVariablesTraverser::visitSymbol(sh::TIntermSymbol*)::kFarName
sh::(anonymous namespace)::CollectVariablesTraverser::visitSymbol(sh::TIntermSymbol*)::kNearName
sh::(anonymous namespace)::CollectVariablesTraverser::~CollectVariablesTraverser()
sh::(anonymous namespace)::ContainsReturnTraverser::visitBranch(sh::Visit, sh::TIntermBranch*)
sh::(anonymous namespace)::ContainsReturnTraverser::~ContainsReturnTraverser()
sh::(anonymous namespace)::ContainsSampler(sh::TStructure const*)
sh::(anonymous namespace)::CreateDriverUniformRef(sh::TVariable const*, char const*)
sh::(anonymous namespace)::DeclareDefaultUniformsTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::DeclareDefaultUniformsTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::DeclareDefaultUniformsTraverser::~DeclareDefaultUniformsTraverser()
sh::(anonymous namespace)::DeclareStructTypesTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::DeclareStructTypesTraverser::~DeclareStructTypesTraverser()
sh::(anonymous namespace)::DerivativeQuotient(sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::DoWhileRewriter::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::(anonymous namespace)::DoWhileRewriter::~DoWhileRewriter()
sh::(anonymous namespace)::ExpandStructArrayVariable(sh::ShaderVariable const&, unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*)
sh::(anonymous namespace)::ExpandStructVariable(sh::ShaderVariable const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*)
sh::(anonymous namespace)::ExpandVariable(sh::ShaderVariable const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*)
sh::(anonymous namespace)::FindGLBaseInstanceTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::FindGLBaseInstanceTraverser::~FindGLBaseInstanceTraverser()
sh::(anonymous namespace)::FindGLBaseVertexTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::FindGLBaseVertexTraverser::~FindGLBaseVertexTraverser()
sh::(anonymous namespace)::FindGLDrawIDTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::FindGLDrawIDTraverser::~FindGLDrawIDTraverser()
sh::(anonymous namespace)::FindVariableInInterfaceBlock(sh::ImmutableString const&, sh::TInterfaceBlock const*, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >*)
sh::(anonymous namespace)::FoldExpressionsTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::FoldExpressionsTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::FoldExpressionsTraverser::visitSwizzle(sh::Visit, sh::TIntermSwizzle*)
sh::(anonymous namespace)::FoldExpressionsTraverser::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::(anonymous namespace)::FoldExpressionsTraverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::FoldExpressionsTraverser::~FoldExpressionsTraverser()
sh::(anonymous namespace)::GLClipDistanceReferenceTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::GLClipDistanceReferenceTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::GLClipDistanceReferenceTraverser::~GLClipDistanceReferenceTraverser()
sh::(anonymous namespace)::GLFragColorBroadcastTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::GLFragColorBroadcastTraverser::~GLFragColorBroadcastTraverser()
sh::(anonymous namespace)::GenerateArrayStrides(std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >*)
sh::(anonymous namespace)::GenerateFunctionFromArguments(sh::TFunction const*, sh::TVector<sh::TIntermNode*> const*, sh::TSymbolTable*, std::__1::map<sh::ImmutableString, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > >, std::__1::less<sh::ImmutableString>, std::__1::allocator<std::__1::pair<sh::ImmutableString const, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > > > > >*, std::__1::unordered_map<sh::TFunction const*, sh::TFunction const*, std::__1::hash<sh::TFunction const*>, std::__1::equal_to<sh::TFunction const*>, std::__1::allocator<std::__1::pair<sh::TFunction const* const, sh::TFunction const*> > >*, std::__1::map<sh::ImmutableString, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > >, std::__1::less<sh::ImmutableString>, std::__1::allocator<std::__1::pair<sh::ImmutableString const, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > > > > > const*)
sh::(anonymous namespace)::GetIndexExpressionFromTypedNode(sh::TIntermTyped*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, sh::TIntermTyped*)
sh::(anonymous namespace)::GetIndexFunctionDefinition(sh::TType const&, bool, sh::TFunction const&, sh::TSymbolTable*)
sh::(anonymous namespace)::GetIndexFunctionName(sh::TType const&, bool)
sh::(anonymous namespace)::GetMatrix(sh::TConstantUnion const*, unsigned int)
sh::(anonymous namespace)::GetMatrix(sh::TConstantUnion const*, unsigned int, unsigned int)
sh::(anonymous namespace)::GetParameterTypeQualifierFromSortedSequence(sh::TVector<sh::TQualifierWrapperBase const*> const&, sh::TDiagnostics*)
sh::(anonymous namespace)::GetStructSamplerParameterType(sh::TSymbolTable*, sh::TVariable const&)
sh::(anonymous namespace)::GetVariableTypeQualifierFromSortedSequence(sh::TVector<sh::TQualifierWrapperBase const*> const&, sh::TDiagnostics*)
sh::(anonymous namespace)::InitializeLocalsTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::InitializeLocalsTraverser::~InitializeLocalsTraverser()
sh::(anonymous namespace)::InsertUseCode(sh::InterfaceBlock const&, sh::TIntermTyped*, sh::TVector<sh::TIntermNode*>*)
sh::(anonymous namespace)::IsEmptyBlock(sh::TIntermNode*)
sh::(anonymous namespace)::MarkActive(sh::ShaderVariable*)
sh::(anonymous namespace)::MaxDepthTraverser::~MaxDepthTraverser()
sh::(anonymous namespace)::MonomorphizeTraverser::CollectNewInstantiationsTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::MonomorphizeTraverser::CollectNewInstantiationsTraverser::~CollectNewInstantiationsTraverser()
sh::(anonymous namespace)::MonomorphizeTraverser::ReplaceVariablesTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::MonomorphizeTraverser::ReplaceVariablesTraverser::~ReplaceVariablesTraverser()
sh::(anonymous namespace)::MonomorphizeTraverser::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::(anonymous namespace)::MonomorphizeTraverser::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::(anonymous namespace)::MonomorphizeTraverser::~MonomorphizeTraverser()
sh::(anonymous namespace)::PruneEmptyCasesTraverser::visitSwitch(sh::Visit, sh::TIntermSwitch*)
sh::(anonymous namespace)::PruneEmptyCasesTraverser::~PruneEmptyCasesTraverser()
sh::(anonymous namespace)::PruneNoOpsTraverser::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::(anonymous namespace)::PruneNoOpsTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::PruneNoOpsTraverser::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::(anonymous namespace)::PruneNoOpsTraverser::~PruneNoOpsTraverser()
sh::(anonymous namespace)::RecordConstantPrecisionTraverser::visitConstantUnion(sh::TIntermConstantUnion*)
sh::(anonymous namespace)::RecordConstantPrecisionTraverser::~RecordConstantPrecisionTraverser()
sh::(anonymous namespace)::RemoveArrayLengthTraverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::RemoveArrayLengthTraverser::~RemoveArrayLengthTraverser()
sh::(anonymous namespace)::RemoveAtomicCounterBuiltinsTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::RemoveAtomicCounterBuiltinsTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::RemoveAtomicCounterBuiltinsTraverser::~RemoveAtomicCounterBuiltinsTraverser()
sh::(anonymous namespace)::RemoveDynamicIndexingIf(std::__1::function<bool (sh::TIntermBinary*)>&&, sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable*, sh::PerformanceDiagnostics*)
sh::(anonymous namespace)::RemoveDynamicIndexingTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::RemoveDynamicIndexingTraverser::~RemoveDynamicIndexingTraverser()
sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser::~RemoveInactiveInterfaceVariablesTraverser()
sh::(anonymous namespace)::RemoveInvariantDeclarationTraverser::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::(anonymous namespace)::RemoveInvariantDeclarationTraverser::~RemoveInvariantDeclarationTraverser()
sh::(anonymous namespace)::RemovePowTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::RemovePowTraverser::~RemovePowTraverser()
sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser::decrementStructTypeRefCount(sh::TType const&)
sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser::traverseBlock(sh::TIntermBlock*)
sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser::traverseLoop(sh::TIntermLoop*)
sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser::~RemoveUnreferencedVariablesTraverser()
sh::(anonymous namespace)::ReplaceShadowingVariablesTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::ReplaceShadowingVariablesTraverser::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::(anonymous namespace)::ReplaceShadowingVariablesTraverser::~ReplaceShadowingVariablesTraverser()
sh::(anonymous namespace)::ReplaceVariableExceptOneTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ReplaceVariableExceptOneTraverser::~ReplaceVariableExceptOneTraverser()
sh::(anonymous namespace)::ReplaceVariableTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ReplaceVariableTraverser::~ReplaceVariableTraverser()
sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser::~RewriteAssignToSwizzledTraverser()
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::convertBuiltinFunction(sh::TIntermAggregate*)::kAtomicAddFunction
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::convertFunctionArgumentHelper(sh::TVector<unsigned int> const&, sh::TIntermTyped*, unsigned int, unsigned int*)
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::declareAtomicCounterType()
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::RewriteAtomicCountersTraverser::~RewriteAtomicCountersTraverser()
sh::(anonymous namespace)::RewriteCubeMapSamplersAs2DArrayTraverser::declareCoordTranslationFunction(bool, sh::ImmutableString const&, sh::TFunction**, sh::TIntermFunctionDefinition**)
sh::(anonymous namespace)::RewriteCubeMapSamplersAs2DArrayTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::RewriteCubeMapSamplersAs2DArrayTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::RewriteCubeMapSamplersAs2DArrayTraverser::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::(anonymous namespace)::RewriteCubeMapSamplersAs2DArrayTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::RewriteCubeMapSamplersAs2DArrayTraverser::~RewriteCubeMapSamplersAs2DArrayTraverser()
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::addFieldCopy(sh::TIntermBlock*, sh::TIntermTyped*, sh::TIntermTyped*, bool)
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::convertField(sh::TField const*, sh::TVector<sh::TIntermNode*>*)
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::declareStructCopy(sh::TStructure const*, sh::TStructure const*, bool)
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::transformReadExpression(sh::TIntermTyped*, sh::TIntermNode*, sh::TVector<sh::TIntermNode*>*, sh::TStructure const*, sh::TVector<sh::TIntermNode*>*)
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser::~RewriteRowMajorMatricesTraverser()
sh::(anonymous namespace)::RotateAndFlipBuiltinVariable(sh::TCompiler*, sh::TIntermBlock*, sh::TVector<sh::TIntermNode*>*, sh::TIntermTyped*, sh::TSymbolTable*, sh::TVariable const*, sh::ImmutableString const&, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::RoundingHelperWriter::writeCompoundAssignmentHelper(sh::TInfoSinkBase&, char const*, char const*, char const*, char const*)
sh::(anonymous namespace)::RoundingHelperWriter::~RoundingHelperWriter()
sh::(anonymous namespace)::RoundingHelperWriterESSL::getTypeString(char const*)
sh::(anonymous namespace)::RoundingHelperWriterESSL::~RoundingHelperWriterESSL()
sh::(anonymous namespace)::RoundingHelperWriterGLSL::getTypeString(char const*)
sh::(anonymous namespace)::RoundingHelperWriterGLSL::writeFloatRoundingHelpers(sh::TInfoSinkBase&)
sh::(anonymous namespace)::RoundingHelperWriterGLSL::writeMatrixRoundingHelper(sh::TInfoSinkBase&, unsigned int, unsigned int, char const*)
sh::(anonymous namespace)::RoundingHelperWriterGLSL::writeVectorRoundingHelpers(sh::TInfoSinkBase&, unsigned int)
sh::(anonymous namespace)::RoundingHelperWriterGLSL::~RoundingHelperWriterGLSL()
sh::(anonymous namespace)::RoundingHelperWriterHLSL::getTypeString(char const*)
sh::(anonymous namespace)::RoundingHelperWriterHLSL::writeFloatRoundingHelpers(sh::TInfoSinkBase&)
sh::(anonymous namespace)::RoundingHelperWriterHLSL::writeMatrixRoundingHelper(sh::TInfoSinkBase&, unsigned int, unsigned int, char const*)
sh::(anonymous namespace)::RoundingHelperWriterHLSL::writeVectorRoundingHelpers(sh::TInfoSinkBase&, unsigned int)
sh::(anonymous namespace)::RoundingHelperWriterHLSL::~RoundingHelperWriterHLSL()
sh::(anonymous namespace)::ScalarizeArgsTraverser::scalarizeArgs(sh::TIntermAggregate*, bool, bool)
sh::(anonymous namespace)::ScalarizeArgsTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::ScalarizeArgsTraverser::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::(anonymous namespace)::ScalarizeArgsTraverser::~ScalarizeArgsTraverser()
sh::(anonymous namespace)::SeparateDeclarationsTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::SeparateDeclarationsTraverser::~SeparateDeclarationsTraverser()
sh::(anonymous namespace)::SetUnionArrayFromMatrix(angle::Matrix<float> const&, sh::TConstantUnion*)
sh::(anonymous namespace)::SimplifyLoopConditionsTraverser::traverseLoop(sh::TIntermLoop*)
sh::(anonymous namespace)::SimplifyLoopConditionsTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::SimplifyLoopConditionsTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::SimplifyLoopConditionsTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::SimplifyLoopConditionsTraverser::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::(anonymous namespace)::SimplifyLoopConditionsTraverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::SimplifyLoopConditionsTraverser::~SimplifyLoopConditionsTraverser()
sh::(anonymous namespace)::SortSequence(sh::TVector<sh::TQualifierWrapperBase const*>&)
sh::(anonymous namespace)::SplitSequenceOperatorTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::SplitSequenceOperatorTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::SplitSequenceOperatorTraverser::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::(anonymous namespace)::SplitSequenceOperatorTraverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::SplitSequenceOperatorTraverser::~SplitSequenceOperatorTraverser()
sh::(anonymous namespace)::SymbolFinder::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::SymbolFinder::~SymbolFinder()
sh::(anonymous namespace)::TBuiltinsWorkaroundGLSL::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::TBuiltinsWorkaroundGLSL::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::TBuiltinsWorkaroundGLSL::~TBuiltinsWorkaroundGLSL()
sh::(anonymous namespace)::TOutputTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::TOutputTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::TOutputTraverser::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::(anonymous namespace)::TOutputTraverser::visitBranch(sh::Visit, sh::TIntermBranch*)
sh::(anonymous namespace)::TOutputTraverser::visitCase(sh::Visit, sh::TIntermCase*)
sh::(anonymous namespace)::TOutputTraverser::visitConstantUnion(sh::TIntermConstantUnion*)
sh::(anonymous namespace)::TOutputTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::TOutputTraverser::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::(anonymous namespace)::TOutputTraverser::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::(anonymous namespace)::TOutputTraverser::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::(anonymous namespace)::TOutputTraverser::visitIfElse(sh::Visit, sh::TIntermIfElse*)
sh::(anonymous namespace)::TOutputTraverser::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::(anonymous namespace)::TOutputTraverser::visitSwitch(sh::Visit, sh::TIntermSwitch*)
sh::(anonymous namespace)::TOutputTraverser::visitSwizzle(sh::Visit, sh::TIntermSwizzle*)
sh::(anonymous namespace)::TOutputTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::TOutputTraverser::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::(anonymous namespace)::TOutputTraverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::TOutputTraverser::~TOutputTraverser()
sh::(anonymous namespace)::TransformArrayHelper::constructReadTransformExpression()
sh::(anonymous namespace)::TransformArrayHelper::constructReadTransformExpressionHelper(sh::TVector<unsigned int> const&, sh::TVector<unsigned int> const&, sh::TType const&, unsigned long)
sh::(anonymous namespace)::TransformArrayHelper::getNextElement(sh::TIntermTyped*, sh::TIntermTyped**)
sh::(anonymous namespace)::TransformDerivativeXMajor(sh::TIntermBlock*, sh::TSymbolTable*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::TransformDerivativeYMajor(sh::TIntermBlock*, sh::TSymbolTable*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::TransformDerivativeZMajor(sh::TIntermBlock*, sh::TSymbolTable*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::TransformImplicitDerivativeXMajor(sh::TIntermBlock*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::TransformImplicitDerivativeYMajor(sh::TIntermBlock*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::TransformImplicitDerivativeZMajor(sh::TIntermBlock*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::(anonymous namespace)::TraverseArrayOfArraysVariable(sh::ShaderVariable const&, unsigned int, bool, sh::ShaderVariableVisitor*)
sh::(anonymous namespace)::TraverseStructArrayVariable(sh::ShaderVariable const&, bool, sh::ShaderVariableVisitor*)
sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor::getNameFromIndex(sh::TFunction const*, unsigned long)
sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor::traverse(sh::TFunction const*)
sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor::visitNonStructParam(sh::TFunction const*, unsigned long)
sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor::visitSamplerInStructParam(sh::ImmutableString const&, sh::TField const*)
sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor::visitSamplerInStructParam(sh::ImmutableString const&, sh::TType const*, unsigned long)
sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor::visitStructParam(sh::TFunction const*, unsigned long)
sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor::~CreateStructSamplerFunctionVisitor()
sh::(anonymous namespace)::Traverser::GetFieldName(sh::ImmutableString const&, sh::TField const*, unsigned int)
sh::(anonymous namespace)::Traverser::GetSamplerArgumentsVisitor::getNameFromIndex(sh::TFunction const*, unsigned long)
sh::(anonymous namespace)::Traverser::GetSamplerArgumentsVisitor::visitNonStructParam(sh::TFunction const*, unsigned long)
sh::(anonymous namespace)::Traverser::GetSamplerArgumentsVisitor::visitSamplerInStructParam(sh::ImmutableString const&, sh::TField const*)
sh::(anonymous namespace)::Traverser::GetSamplerArgumentsVisitor::visitSamplerInStructParam(sh::ImmutableString const&, sh::TType const*, unsigned long)
sh::(anonymous namespace)::Traverser::GetSamplerArgumentsVisitor::visitStructParam(sh::TFunction const*, unsigned long)
sh::(anonymous namespace)::Traverser::GetSamplerArgumentsVisitor::~GetSamplerArgumentsVisitor()
sh::(anonymous namespace)::Traverser::GetStructSamplerNameFromTypedNode(sh::TIntermTyped*)
sh::(anonymous namespace)::Traverser::StructSamplerFunctionVisitor::traverse(sh::TFunction const*)
sh::(anonymous namespace)::Traverser::StructSamplerFunctionVisitor::traverseLeafSampler(sh::ImmutableString const&, sh::TType const&, unsigned long)
sh::(anonymous namespace)::Traverser::StructSamplerFunctionVisitor::traverseStructContainingSamplers(sh::ImmutableString const&, sh::TType const&)
sh::(anonymous namespace)::Traverser::StructSamplerFunctionVisitor::traverseStructContainingSamplers(sh::ImmutableString const&, sh::TType const&, unsigned long)
sh::(anonymous namespace)::Traverser::StructSamplerFunctionVisitor::~StructSamplerFunctionVisitor()
sh::(anonymous namespace)::Traverser::extractFieldSamplers(sh::ImmutableString const&, sh::TField const*, sh::TType const&, sh::TVector<sh::TIntermNode*>*)
sh::(anonymous namespace)::Traverser::extractFieldSamplersImpl(sh::ImmutableString const&, sh::TField const*, sh::TVector<sh::TIntermNode*>*)
sh::(anonymous namespace)::Traverser::extractSampler(sh::ImmutableString const&, sh::SymbolType, sh::TType const&, sh::TVector<sh::TIntermNode*>*, unsigned long)
sh::(anonymous namespace)::Traverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::Traverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::Traverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::Traverser::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::(anonymous namespace)::Traverser::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::(anonymous namespace)::Traverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::Traverser::~Traverser()
sh::(anonymous namespace)::UnfoldShortCircuitASTTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::UnfoldShortCircuitASTTraverser::~UnfoldShortCircuitASTTraverser()
sh::(anonymous namespace)::ValidateAST::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::ValidateAST::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::ValidateAST::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::(anonymous namespace)::ValidateAST::visitBranch(sh::Visit, sh::TIntermBranch*)
sh::(anonymous namespace)::ValidateAST::visitCase(sh::Visit, sh::TIntermCase*)
sh::(anonymous namespace)::ValidateAST::visitConstantUnion(sh::TIntermConstantUnion*)
sh::(anonymous namespace)::ValidateAST::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::ValidateAST::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::(anonymous namespace)::ValidateAST::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::(anonymous namespace)::ValidateAST::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::(anonymous namespace)::ValidateAST::visitIfElse(sh::Visit, sh::TIntermIfElse*)
sh::(anonymous namespace)::ValidateAST::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::(anonymous namespace)::ValidateAST::visitNode(sh::Visit, sh::TIntermNode*)
sh::(anonymous namespace)::ValidateAST::visitPreprocessorDirective(sh::TIntermPreprocessorDirective*)
sh::(anonymous namespace)::ValidateAST::visitSwitch(sh::Visit, sh::TIntermSwitch*)
sh::(anonymous namespace)::ValidateAST::visitSwizzle(sh::Visit, sh::TIntermSwizzle*)
sh::(anonymous namespace)::ValidateAST::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ValidateAST::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::(anonymous namespace)::ValidateAST::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::ValidateAST::~ValidateAST()
sh::(anonymous namespace)::ValidateConstIndexExpr::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ValidateConstIndexExpr::~ValidateConstIndexExpr()
sh::(anonymous namespace)::ValidateGlobalInitializerTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::ValidateGlobalInitializerTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::ValidateGlobalInitializerTraverser::visitConstantUnion(sh::TIntermConstantUnion*)
sh::(anonymous namespace)::ValidateGlobalInitializerTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ValidateGlobalInitializerTraverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::ValidateGlobalInitializerTraverser::~ValidateGlobalInitializerTraverser()
sh::(anonymous namespace)::ValidateLimitationsTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::ValidateLimitationsTraverser::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::(anonymous namespace)::ValidateLimitationsTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ValidateLimitationsTraverser::~ValidateLimitationsTraverser()
sh::(anonymous namespace)::ValidateOutputsTraverser::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ValidateOutputsTraverser::~ValidateOutputsTraverser()
sh::(anonymous namespace)::ValidateShaderInterface(sh::TDiagnostics*, std::__1::vector<sh::TIntermSymbol const*, std::__1::allocator<sh::TIntermSymbol const*> >&, bool)
sh::(anonymous namespace)::ValidateSwitch::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::ValidateSwitch::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::ValidateSwitch::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::(anonymous namespace)::ValidateSwitch::visitBranch(sh::Visit, sh::TIntermBranch*)
sh::(anonymous namespace)::ValidateSwitch::visitCase(sh::Visit, sh::TIntermCase*)
sh::(anonymous namespace)::ValidateSwitch::visitConstantUnion(sh::TIntermConstantUnion*)
sh::(anonymous namespace)::ValidateSwitch::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::ValidateSwitch::visitIfElse(sh::Visit, sh::TIntermIfElse*)
sh::(anonymous namespace)::ValidateSwitch::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::(anonymous namespace)::ValidateSwitch::visitSwitch(sh::Visit, sh::TIntermSwitch*)
sh::(anonymous namespace)::ValidateSwitch::visitSwizzle(sh::Visit, sh::TIntermSwizzle*)
sh::(anonymous namespace)::ValidateSwitch::visitSymbol(sh::TIntermSymbol*)
sh::(anonymous namespace)::ValidateSwitch::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::(anonymous namespace)::ValidateSwitch::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::(anonymous namespace)::ValidateSwitch::~ValidateSwitch()
sh::(anonymous namespace)::ValidateVaryingLocationsTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::(anonymous namespace)::ValidateVaryingLocationsTraverser::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::(anonymous namespace)::ValidateVaryingLocationsTraverser::~ValidateVaryingLocationsTraverser()
sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser::~VectorizeVectorScalarArithmeticTraverser()
sh::(anonymous namespace)::isInitialized
sh::(anonymous namespace)::kAcbBufferOffsets
sh::(anonymous namespace)::kAngleFrlString
sh::(anonymous namespace)::kAngleFrmString
sh::(anonymous namespace)::kAtomicCounterFieldName
sh::(anonymous namespace)::kAtomicCounterTypeName
sh::(anonymous namespace)::kAtomicCountersVarName
sh::(anonymous namespace)::kBaseName
sh::(anonymous namespace)::kClipDistancesEnabled
sh::(anonymous namespace)::kCoordTransformFuncName
sh::(anonymous namespace)::kCoordTransformFuncNameImplicit
sh::(anonymous namespace)::kDefaultUniformNames
sh::(anonymous namespace)::kDepthRange
sh::(anonymous namespace)::kEmptyName
sh::(anonymous namespace)::kEmulatedDepthRangeParams
sh::(anonymous namespace)::kEmulatedGLBaseInstanceName
sh::(anonymous namespace)::kEmulatedGLBaseVertexName
sh::(anonymous namespace)::kEmulatedGLDrawIDName
sh::(anonymous namespace)::kFlipXY
sh::(anonymous namespace)::kFlippedFragCoordName
sh::(anonymous namespace)::kFlippedPointCoordName
sh::(anonymous namespace)::kFragRotation
sh::(anonymous namespace)::kGlFragDataString
sh::(anonymous namespace)::kGraphicsDriverUniformNames
sh::(anonymous namespace)::kHalfRenderArea
sh::(anonymous namespace)::kHashedNamePrefix
sh::(anonymous namespace)::kIndexName
sh::(anonymous namespace)::kInitGlobalsString
sh::(anonymous namespace)::kInstanceIDVariableName
sh::(anonymous namespace)::kLineRasterEmulationSpecConstVarName
sh::(anonymous namespace)::kMainString
sh::(anonymous namespace)::kMultiviewBaseViewLayerIndexVariableName
sh::(anonymous namespace)::kNegFlipXY
sh::(anonymous namespace)::kParamXName
sh::(anonymous namespace)::kParamYName
sh::(anonymous namespace)::kPreRotation
sh::(anonymous namespace)::kPrefix
sh::(anonymous namespace)::kSpecifiedMultipleTimes
sh::(anonymous namespace)::kValueName
sh::(anonymous namespace)::kViewIDVariableName
sh::(anonymous namespace)::kViewport
sh::(anonymous namespace)::kXfbActiveUnpaused
sh::(anonymous namespace)::kXfbBufferOffsets
sh::(anonymous namespace)::kXfbVerticesPerDraw
sh::AddAndTrueToLoopCondition(sh::TCompiler*, sh::TIntermNode*)
sh::ArrayBoundsClamper::ArrayBoundsClamper()
sh::ArrayBoundsClamper::MarkIndirectArrayBoundsForClamping(sh::TIntermNode*)
sh::ArrayBoundsClamper::OutputClampingFunctionDefinition(sh::TInfoSinkBase&) const
sh::ArrayBoundsClamper::SetClampingStrategy(ShArrayIndexClampingStrategy)
sh::ArrayString(sh::TType const&)
sh::BlockEncoderVisitor::BlockEncoderVisitor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockLayoutEncoder*)
sh::BlockEncoderVisitor::encodeVariable(sh::ShaderVariable const&, sh::BlockMemberInfo const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
sh::BlockEncoderVisitor::enterArrayElement(sh::ShaderVariable const&, unsigned int)
sh::BlockEncoderVisitor::enterStructAccess(sh::ShaderVariable const&, bool)
sh::BlockEncoderVisitor::exitArrayElement(sh::ShaderVariable const&, unsigned int)
sh::BlockEncoderVisitor::exitStructAccess(sh::ShaderVariable const&, bool)
sh::BlockEncoderVisitor::visitNamedVariable(sh::ShaderVariable const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
sh::BlockEncoderVisitor::~BlockEncoderVisitor()
sh::BlockLayoutEncoder::BlockLayoutEncoder()
sh::BlockLayoutEncoder::getShaderVariableSize(sh::ShaderVariable const&, bool)
sh::BlockLayoutEncoder::~BlockLayoutEncoder()
sh::BuiltInArray::kMangledNames
sh::BuiltInArray::kMangledOffsets
sh::BuiltInArray::kRules
sh::BuiltInArray::unmangled
sh::BuiltInFunctionEmulator::BuiltInFunctionEmulationMarker::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::BuiltInFunctionEmulator::BuiltInFunctionEmulationMarker::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::BuiltInFunctionEmulator::BuiltInFunctionEmulationMarker::~BuiltInFunctionEmulationMarker()
sh::BuiltInFunctionEmulator::BuiltInFunctionEmulator()
sh::BuiltInFunctionEmulator::WriteEmulatedFunctionName(sh::TInfoSinkBase&, char const*)
sh::BuiltInFunctionEmulator::addEmulatedFunction(sh::TSymbolUniqueId const&, char const*)
sh::BuiltInFunctionEmulator::addEmulatedFunctionWithDependency(sh::TSymbolUniqueId const&, sh::TSymbolUniqueId const&, char const*)
sh::BuiltInFunctionEmulator::cleanup()
sh::BuiltInFunctionEmulator::isOutputEmpty() const
sh::BuiltInFunctionEmulator::markBuiltInFunctionsForEmulation(sh::TIntermNode*)
sh::BuiltInFunctionEmulator::outputEmulatedFunctions(sh::TInfoSinkBase&) const
sh::BuiltInFunctionEmulator::setFunctionCalled(int)
sh::BuiltInId::abs_Int1
sh::BuiltInId::atan_Float1_Float1
sh::BuiltInId::gl_DepthRangeParameters
sh::BuiltInId::gl_PerVertex
sh::BuiltInId::gl_PerVertexOutBlock
sh::BuiltInId::isnan_Float1
sh::BuiltInId::isnan_Float2
sh::BuiltInId::isnan_Float3
sh::BuiltInId::isnan_Float4
sh::BuiltInId::packHalf2x16_Float2
sh::BuiltInId::packSnorm2x16_Float2
sh::BuiltInId::packUnorm2x16_Float2
sh::BuiltInId::unpackHalf2x16_UInt1
sh::BuiltInId::unpackSnorm2x16_UInt1
sh::BuiltInId::unpackUnorm2x16_UInt1
sh::BuiltInName::diff
sh::BuiltInName::far
sh::BuiltInName::gl_ClipDistance
sh::BuiltInName::gl_DepthRange
sh::BuiltInName::gl_DepthRangeParameters
sh::BuiltInName::gl_FragData
sh::BuiltInName::gl_FragDepthEXT
sh::BuiltInName::gl_LastFragData
sh::BuiltInName::gl_MaxAtomicCounterBindings
sh::BuiltInName::gl_MaxAtomicCounterBufferSize
sh::BuiltInName::gl_MaxClipDistances
sh::BuiltInName::gl_MaxCombinedAtomicCounterBuffers
sh::BuiltInName::gl_MaxCombinedAtomicCounters
sh::BuiltInName::gl_MaxCombinedImageUniforms
sh::BuiltInName::gl_MaxCombinedShaderOutputResources
sh::BuiltInName::gl_MaxCombinedTextureImageUnits
sh::BuiltInName::gl_MaxComputeAtomicCounterBuffers
sh::BuiltInName::gl_MaxComputeAtomicCounters
sh::BuiltInName::gl_MaxComputeImageUniforms
sh::BuiltInName::gl_MaxComputeTextureImageUnits
sh::BuiltInName::gl_MaxComputeUniformComponents
sh::BuiltInName::gl_MaxComputeWorkGroupCount
sh::BuiltInName::gl_MaxComputeWorkGroupSize
sh::BuiltInName::gl_MaxDrawBuffers
sh::BuiltInName::gl_MaxDualSourceDrawBuffersEXT
sh::BuiltInName::gl_MaxFragmentAtomicCounterBuffers
sh::BuiltInName::gl_MaxFragmentAtomicCounters
sh::BuiltInName::gl_MaxFragmentImageUniforms
sh::BuiltInName::gl_MaxFragmentInputVectors
sh::BuiltInName::gl_MaxFragmentUniformVectors
sh::BuiltInName::gl_MaxGeometryAtomicCounterBuffers
sh::BuiltInName::gl_MaxGeometryAtomicCounters
sh::BuiltInName::gl_MaxGeometryImageUniforms
sh::BuiltInName::gl_MaxGeometryInputComponents
sh::BuiltInName::gl_MaxGeometryOutputComponents
sh::BuiltInName::gl_MaxGeometryOutputVertices
sh::BuiltInName::gl_MaxGeometryTextureImageUnits
sh::BuiltInName::gl_MaxGeometryTotalOutputComponents
sh::BuiltInName::gl_MaxGeometryUniformComponents
sh::BuiltInName::gl_MaxImageUnits
sh::BuiltInName::gl_MaxProgramTexelOffset
sh::BuiltInName::gl_MaxTextureImageUnits
sh::BuiltInName::gl_MaxVaryingVectors
sh::BuiltInName::gl_MaxVertexAtomicCounterBuffers
sh::BuiltInName::gl_MaxVertexAtomicCounters
sh::BuiltInName::gl_MaxVertexAttribs
sh::BuiltInName::gl_MaxVertexImageUniforms
sh::BuiltInName::gl_MaxVertexOutputVectors
sh::BuiltInName::gl_MaxVertexTextureImageUnits
sh::BuiltInName::gl_MaxVertexUniformVectors
sh::BuiltInName::gl_MinProgramTexelOffset
sh::BuiltInName::gl_PerVertex
sh::BuiltInName::gl_Position
sh::BuiltInName::gl_SecondaryFragDataEXT
sh::BuiltInName::gl_in
sh::BuiltInName::near
sh::BuiltInParameters::p00B00B00B
sh::BuiltInParameters::p00B00B00F
sh::BuiltInParameters::p00B00B10B
sh::BuiltInParameters::p00B00B20B
sh::BuiltInParameters::p00B00B30B
sh::BuiltInParameters::p00B00D
sh::BuiltInParameters::p00B10B
sh::BuiltInParameters::p00B20B
sh::BuiltInParameters::p00B30B
sh::BuiltInParameters::p00B_o_00B
sh::BuiltInParameters::p00B_o_00D
sh::BuiltInParameters::p00C00C00B
sh::BuiltInParameters::p00C00C00C
sh::BuiltInParameters::p00C00C00F
sh::BuiltInParameters::p00C00C10C
sh::BuiltInParameters::p00C00C20C
sh::BuiltInParameters::p00C00C30C
sh::BuiltInParameters::p00C00D
sh::BuiltInParameters::p00C10C
sh::BuiltInParameters::p00C20C
sh::BuiltInParameters::p00C30C
sh::BuiltInParameters::p00C_o_00C
sh::BuiltInParameters::p00C_o_00D
sh::BuiltInParameters::p00D00D00D00D
sh::BuiltInParameters::p00D00D00F
sh::BuiltInParameters::p00D00D_o_00D_o_00D
sh::BuiltInParameters::p00E00D00D
sh::BuiltInParameters::p00E00E00D00D
sh::BuiltInParameters::p00E00E00E
sh::BuiltInParameters::p00E00E00F
sh::BuiltInParameters::p00E00E_o_00E_o_00E
sh::BuiltInParameters::p00F00F00F
sh::BuiltInParameters::p00G00E00E
sh::BuiltInParameters::p00I00B00B00B
sh::BuiltInParameters::p00I00D
sh::BuiltInParameters::p00I10B00B10D
sh::BuiltInParameters::p00I10B00D
sh::BuiltInParameters::p00I10B10B10B10D
sh::BuiltInParameters::p00I10B10D00B
sh::BuiltInParameters::p00I10B10D00D
sh::BuiltInParameters::p00I10B10Dx400D
sh::BuiltInParameters::p00I10D00D10D
sh::BuiltInParameters::p00I20B00B10D
sh::BuiltInParameters::p00I20B10B10B10D
sh::BuiltInParameters::p00I20B10D00B
sh::BuiltInParameters::p00I30B00B10D
sh::BuiltInParameters::p00I30B10B10B10D
sh::BuiltInParameters::p00I30B10D00B
sh::BuiltInParameters::p00J00D
sh::BuiltInParameters::p00J20B00B20D
sh::BuiltInParameters::p00J20B20B20B20D
sh::BuiltInParameters::p00J20B20D00B
sh::BuiltInParameters::p00J20D00D20D
sh::BuiltInParameters::p00J30B00B20D
sh::BuiltInParameters::p00J30B20B20B20D
sh::BuiltInParameters::p00J30B20D00B
sh::BuiltInParameters::p00K00D
sh::BuiltInParameters::p00K20B00B
sh::BuiltInParameters::p00K20B00D
sh::BuiltInParameters::p00K20B20B20B
sh::BuiltInParameters::p00L00D
sh::BuiltInParameters::p00L10B
sh::BuiltInParameters::p00L20B00B10D
sh::BuiltInParameters::p00L20B00D
sh::BuiltInParameters::p00L20B10B10B10D
sh::BuiltInParameters::p00L20B10D00B
sh::BuiltInParameters::p00L20B10D00D
sh::BuiltInParameters::p00L20B10Dx400D
sh::BuiltInParameters::p00L20D00D10D
sh::BuiltInParameters::p00M00D
sh::BuiltInParameters::p00M10B00B
sh::BuiltInParameters::p00M10D00D
sh::BuiltInParameters::p00M20B00B
sh::BuiltInParameters::p00M30B00B
sh::BuiltInParameters::p00N00D
sh::BuiltInParameters::p00N10B00B
sh::BuiltInParameters::p00N10D00D
sh::BuiltInParameters::p00N20B00B
sh::BuiltInParameters::p00N30B00B
sh::BuiltInParameters::p00O10B10B10B10D
sh::BuiltInParameters::p00O10B10D00D
sh::BuiltInParameters::p00O10B10Dx400D
sh::BuiltInParameters::p00O10D10D
sh::BuiltInParameters::p00O20B00D
sh::BuiltInParameters::p00O20B10B10B10D
sh::BuiltInParameters::p00O20B10D
sh::BuiltInParameters::p00O30B10B10B10D
sh::BuiltInParameters::p00O30B10D
sh::BuiltInParameters::p00P10D00D
sh::BuiltInParameters::p00Q20D00D
sh::BuiltInParameters::p00R00B00B00B
sh::BuiltInParameters::p00R00D
sh::BuiltInParameters::p00R10B00B10D
sh::BuiltInParameters::p00R10B00D
sh::BuiltInParameters::p00R10B10B10B10D
sh::BuiltInParameters::p00R10B10D00B
sh::BuiltInParameters::p00R10B10D00D
sh::BuiltInParameters::p00R10B10Dx400D
sh::BuiltInParameters::p00R10D00D10D
sh::BuiltInParameters::p00R20B00B10D
sh::BuiltInParameters::p00R20B10B10B10D
sh::BuiltInParameters::p00R20B10D00B
sh::BuiltInParameters::p00R30B00B10D
sh::BuiltInParameters::p00R30B10B10B10D
sh::BuiltInParameters::p00R30B10D00B
sh::BuiltInParameters::p00S00D
sh::BuiltInParameters::p00S20B00B20D
sh::BuiltInParameters::p00S20B20B20B20D
sh::BuiltInParameters::p00S20B20D00B
sh::BuiltInParameters::p00S20D00D20D
sh::BuiltInParameters::p00S30B00B20D
sh::BuiltInParameters::p00S30B20B20B20D
sh::BuiltInParameters::p00S30B20D00B
sh::BuiltInParameters::p00T00D
sh::BuiltInParameters::p00T20B00B
sh::BuiltInParameters::p00T20B00D
sh::BuiltInParameters::p00T20B20B20B
sh::BuiltInParameters::p00U00D
sh::BuiltInParameters::p00U10B
sh::BuiltInParameters::p00U20B00B10D
sh::BuiltInParameters::p00U20B00D
sh::BuiltInParameters::p00U20B10B10B10D
sh::BuiltInParameters::p00U20B10D00B
sh::BuiltInParameters::p00U20B10D00D
sh::BuiltInParameters::p00U20B10Dx400D
sh::BuiltInParameters::p00U20D00D10D
sh::BuiltInParameters::p00V10D00D
sh::BuiltInParameters::p00W20D00D
sh::BuiltInParameters::p00X00B00B00B
sh::BuiltInParameters::p00X00D
sh::BuiltInParameters::p00X10B00B10D
sh::BuiltInParameters::p00X10B00D
sh::BuiltInParameters::p00X10B10B10B10D
sh::BuiltInParameters::p00X10B10D00B
sh::BuiltInParameters::p00X10B10D00D
sh::BuiltInParameters::p00X10B10Dx400D
sh::BuiltInParameters::p00X10D00D10D
sh::BuiltInParameters::p00X20B00B10D
sh::BuiltInParameters::p00X20B10B10B10D
sh::BuiltInParameters::p00X20B10D00B
sh::BuiltInParameters::p00X30B00B10D
sh::BuiltInParameters::p00X30B10B10B10D
sh::BuiltInParameters::p00X30B10D00B
sh::BuiltInParameters::p00Y00D
sh::BuiltInParameters::p00Y20B00B20D
sh::BuiltInParameters::p00Y20B20B20B20D
sh::BuiltInParameters::p00Y20B20D00B
sh::BuiltInParameters::p00Y20D00D20D
sh::BuiltInParameters::p00Y30B00B20D
sh::BuiltInParameters::p00Y30B20B20B20D
sh::BuiltInParameters::p00Y30B20D00B
sh::BuiltInParameters::p00Z00D
sh::BuiltInParameters::p00Z20B00B
sh::BuiltInParameters::p00Z20B00D
sh::BuiltInParameters::p00Z20B20B20B
sh::BuiltInParameters::p00a00D
sh::BuiltInParameters::p00a10B
sh::BuiltInParameters::p00a20B00B10D
sh::BuiltInParameters::p00a20B00D
sh::BuiltInParameters::p00a20B10B10B10D
sh::BuiltInParameters::p00a20B10D00B
sh::BuiltInParameters::p00a20B10D00D
sh::BuiltInParameters::p00a20B10Dx400D
sh::BuiltInParameters::p00a20D00D10D
sh::BuiltInParameters::p00b10D00D
sh::BuiltInParameters::p00c20D00D
sh::BuiltInParameters::p00d00D
sh::BuiltInParameters::p00d10B00B10Dx4
sh::BuiltInParameters::p00d20B00B10D
sh::BuiltInParameters::p00d20B10B10B10D
sh::BuiltInParameters::p00d20B10D00B
sh::BuiltInParameters::p00d30B00B10D
sh::BuiltInParameters::p00d30B10B10B10D
sh::BuiltInParameters::p00d30B10D00B
sh::BuiltInParameters::p00e00D
sh::BuiltInParameters::p00e20B00B
sh::BuiltInParameters::p00e30B00B
sh::BuiltInParameters::p00e30B20B20B
sh::BuiltInParameters::p00f00D
sh::BuiltInParameters::p00f10B
sh::BuiltInParameters::p00f20B00B10Dx4
sh::BuiltInParameters::p00f30B00B
sh::BuiltInParameters::p00f30B10B10B10D
sh::BuiltInParameters::p00f30B10D
sh::BuiltInParameters::p00g00B00B00B00D
sh::BuiltInParameters::p00g00B00B00D
sh::BuiltInParameters::p00g00B00D00B
sh::BuiltInParameters::p00g00D00D00D
sh::BuiltInParameters::p00g10B00B00B00D
sh::BuiltInParameters::p00g10B00B00D
sh::BuiltInParameters::p00g10B00D00B
sh::BuiltInParameters::p00g30B00B00B00D
sh::BuiltInParameters::p00g30B00B00D
sh::BuiltInParameters::p00g30B00D00B
sh::BuiltInParameters::p00h00B
sh::BuiltInParameters::p00h00D
sh::BuiltInParameters::p00h10B00B00B00D
sh::BuiltInParameters::p00h10B00B00D
sh::BuiltInParameters::p00h10B00D00B
sh::BuiltInParameters::p00h10D00D00D
sh::BuiltInParameters::p00h20B00B
sh::BuiltInParameters::p00i00B
sh::BuiltInParameters::p00i00D
sh::BuiltInParameters::p00i20B00B00B00D
sh::BuiltInParameters::p00i20B00B00D
sh::BuiltInParameters::p00i20B00D00B
sh::BuiltInParameters::p00j00D
sh::BuiltInParameters::p00k00D
sh::BuiltInParameters::p00k20B
sh::BuiltInParameters::p00k30B00B
sh::BuiltInParameters::p00k30B00D
sh::BuiltInParameters::p00k30B20B20B
sh::BuiltInParameters::p00l00D
sh::BuiltInParameters::p00l20B
sh::BuiltInParameters::p00l30B00B
sh::BuiltInParameters::p00m00B
sh::BuiltInParameters::p00m00D
sh::BuiltInParameters::p00m20B00B00B00D
sh::BuiltInParameters::p00m20B00B00D
sh::BuiltInParameters::p00m20B00D00B
sh::BuiltInParameters::p00m30B00B00B00D
sh::BuiltInParameters::p00m30B00B00D
sh::BuiltInParameters::p00m30B00D00B
sh::BuiltInParameters::p00n10B00B10Dx4
sh::BuiltInParameters::p00n20B10B10B10D
sh::BuiltInParameters::p00n20B10D
sh::BuiltInParameters::p00n30B10B10B10D
sh::BuiltInParameters::p00n30B10D
sh::BuiltInParameters::p00o00B00B00B00D
sh::BuiltInParameters::p00o00B00B00D
sh::BuiltInParameters::p00o00B00D00B
sh::BuiltInParameters::p00o00D00D00D
sh::BuiltInParameters::p00o10B00B00B00D
sh::BuiltInParameters::p00o10B00B00D
sh::BuiltInParameters::p00o10B00D00B
sh::BuiltInParameters::p00o30B00B00B00D
sh::BuiltInParameters::p00o30B00B00D
sh::BuiltInParameters::p00o30B00D00B
sh::BuiltInParameters::p00p00B
sh::BuiltInParameters::p00p00D
sh::BuiltInParameters::p00p10B00B00B00D
sh::BuiltInParameters::p00p10B00B00D
sh::BuiltInParameters::p00p10B00D00B
sh::BuiltInParameters::p00p10D00D00D
sh::BuiltInParameters::p00p20B00B
sh::BuiltInParameters::p00q10B10B10B10D
sh::BuiltInParameters::p00q10B10D00D
sh::BuiltInParameters::p00q10B10Dx400D
sh::BuiltInParameters::p00q10D10D
sh::BuiltInParameters::p00q20B00D
sh::BuiltInParameters::p00q20B10B10B10D
sh::BuiltInParameters::p00q20B10D
sh::BuiltInParameters::p00q30B10B10B10D
sh::BuiltInParameters::p00q30B10D
sh::BuiltInParameters::p00r00D
sh::BuiltInParameters::p00s00D
sh::BuiltInParameters::p00s20B
sh::BuiltInParameters::p00s30B00B
sh::BuiltInParameters::p00s30B00D
sh::BuiltInParameters::p00s30B20B20B
sh::BuiltInParameters::p00t00B00B00B00D
sh::BuiltInParameters::p00t00B00B00D
sh::BuiltInParameters::p00t00B00D00B
sh::BuiltInParameters::p00t00D00D00D
sh::BuiltInParameters::p00t10B00B00B00D
sh::BuiltInParameters::p00t10B00B00D
sh::BuiltInParameters::p00t10B00D00B
sh::BuiltInParameters::p00t30B00B00B00D
sh::BuiltInParameters::p00t30B00B00D
sh::BuiltInParameters::p00t30B00D00B
sh::BuiltInParameters::p00u00B
sh::BuiltInParameters::p00u00D
sh::BuiltInParameters::p00u10B00B00B00D
sh::BuiltInParameters::p00u10B00B00D
sh::BuiltInParameters::p00u10B00D00B
sh::BuiltInParameters::p00u10D00D00D
sh::BuiltInParameters::p00u20B00B
sh::BuiltInParameters::p00v10B10B10B10D
sh::BuiltInParameters::p00v10B10D00D
sh::BuiltInParameters::p00v10B10Dx400D
sh::BuiltInParameters::p00v10D10D
sh::BuiltInParameters::p00v20B00D
sh::BuiltInParameters::p00v20B10B10B10D
sh::BuiltInParameters::p00v20B10D
sh::BuiltInParameters::p00v30B10B10B10D
sh::BuiltInParameters::p00v30B10D
sh::BuiltInParameters::p00w00D
sh::BuiltInParameters::p00x00D
sh::BuiltInParameters::p00x20B
sh::BuiltInParameters::p00x30B00B
sh::BuiltInParameters::p00x30B00D
sh::BuiltInParameters::p00x30B20B20B
sh::BuiltInParameters::p00y10B
sh::BuiltInParameters::p00z10D00B
sh::BuiltInParameters::p00z10D00D00D
sh::BuiltInParameters::p00z10D00E00E
sh::BuiltInParameters::p00z10D30B
sh::BuiltInParameters::p01A10D00B
sh::BuiltInParameters::p01A10D00D00D
sh::BuiltInParameters::p01A10D00E00E
sh::BuiltInParameters::p01A10D30D
sh::BuiltInParameters::p01B10D00B
sh::BuiltInParameters::p01B10D00D00D
sh::BuiltInParameters::p01B10D00E00E
sh::BuiltInParameters::p01B10D30E
sh::BuiltInParameters::p01C20D00B
sh::BuiltInParameters::p01C20D00D00D
sh::BuiltInParameters::p01C20D00E00E
sh::BuiltInParameters::p01C20D30B
sh::BuiltInParameters::p01D20D00B
sh::BuiltInParameters::p01D20D00D00D
sh::BuiltInParameters::p01D20D00E00E
sh::BuiltInParameters::p01D20D30D
sh::BuiltInParameters::p01E20D00B
sh::BuiltInParameters::p01E20D00D00D
sh::BuiltInParameters::p01E20D00E00E
sh::BuiltInParameters::p01E20D30E
sh::BuiltInParameters::p01F20D00B
sh::BuiltInParameters::p01F20D00D00D
sh::BuiltInParameters::p01F20D00E00E
sh::BuiltInParameters::p01F20D30B
sh::BuiltInParameters::p01G20D00B
sh::BuiltInParameters::p01G20D00D00D
sh::BuiltInParameters::p01G20D00E00E
sh::BuiltInParameters::p01G20D30D
sh::BuiltInParameters::p01H20D00B
sh::BuiltInParameters::p01H20D00D00D
sh::BuiltInParameters::p01H20D00E00E
sh::BuiltInParameters::p01H20D30E
sh::BuiltInParameters::p01I20D00B
sh::BuiltInParameters::p01I20D00D00D
sh::BuiltInParameters::p01I20D00E00E
sh::BuiltInParameters::p01I20D30B
sh::BuiltInParameters::p01J20D00B
sh::BuiltInParameters::p01J20D00D00D
sh::BuiltInParameters::p01J20D00E00E
sh::BuiltInParameters::p01J20D30D
sh::BuiltInParameters::p01K20D00B
sh::BuiltInParameters::p01K20D00D00D
sh::BuiltInParameters::p01K20D00E00E
sh::BuiltInParameters::p01K20D30E
sh::BuiltInParameters::p01L00D00B
sh::BuiltInParameters::p01L00D00D00D
sh::BuiltInParameters::p01L00D00E00E
sh::BuiltInParameters::p01L00D30B
sh::BuiltInParameters::p01M00D00B
sh::BuiltInParameters::p01M00D00D00D
sh::BuiltInParameters::p01M00D00E00E
sh::BuiltInParameters::p01M00D30D
sh::BuiltInParameters::p01N00D00B
sh::BuiltInParameters::p01N00D00D00D
sh::BuiltInParameters::p01N00D00E00E
sh::BuiltInParameters::p01N00D30E
sh::BuiltInParameters::p01O10D00B
sh::BuiltInParameters::p01O10D00D00D
sh::BuiltInParameters::p01O10D00E00E
sh::BuiltInParameters::p01O10D30B
sh::BuiltInParameters::p01P10D00B
sh::BuiltInParameters::p01P10D00D00D
sh::BuiltInParameters::p01P10D00E00E
sh::BuiltInParameters::p01P10D30D
sh::BuiltInParameters::p01Q10D00B
sh::BuiltInParameters::p01Q10D00D00D
sh::BuiltInParameters::p01Q10D00E00E
sh::BuiltInParameters::p01Q10D30E
sh::BuiltInParameters::p01R10D00D00B
sh::BuiltInParameters::p01R10D00D00D00D
sh::BuiltInParameters::p01R10D00D00E00E
sh::BuiltInParameters::p01R10D00D30B
sh::BuiltInParameters::p01S10D00D00B
sh::BuiltInParameters::p01S10D00D00D00D
sh::BuiltInParameters::p01S10D00D00E00E
sh::BuiltInParameters::p01S10D00D30D
sh::BuiltInParameters::p01T10D00D00B
sh::BuiltInParameters::p01T10D00D00D00D
sh::BuiltInParameters::p01T10D00D00E00E
sh::BuiltInParameters::p01T10D00D30E
sh::BuiltInParameters::p01U20D00D00B
sh::BuiltInParameters::p01U20D00D00D00D
sh::BuiltInParameters::p01U20D00D00E00E
sh::BuiltInParameters::p01U20D00D30B
sh::BuiltInParameters::p01V20D00D00B
sh::BuiltInParameters::p01V20D00D00D00D
sh::BuiltInParameters::p01V20D00D00E00E
sh::BuiltInParameters::p01V20D00D30D
sh::BuiltInParameters::p01W20D00D00B
sh::BuiltInParameters::p01W20D00D00D00D
sh::BuiltInParameters::p01W20D00D00E00E
sh::BuiltInParameters::p01W20D00D30E
sh::BuiltInParameters::p01X10D00B
sh::BuiltInParameters::p01X10D00D00D
sh::BuiltInParameters::p01X10D00E00E
sh::BuiltInParameters::p01X10D30B
sh::BuiltInParameters::p01Y10D00B
sh::BuiltInParameters::p01Y10D00D00D
sh::BuiltInParameters::p01Y10D00E00E
sh::BuiltInParameters::p01Y10D30D
sh::BuiltInParameters::p01Z10D00B
sh::BuiltInParameters::p01Z10D00D00D
sh::BuiltInParameters::p01Z10D00E00E
sh::BuiltInParameters::p01Z10D30E
sh::BuiltInParameters::p01a20D00B
sh::BuiltInParameters::p01a20D00D00D
sh::BuiltInParameters::p01a20D00E00E
sh::BuiltInParameters::p01a20D30B
sh::BuiltInParameters::p01b20D00B
sh::BuiltInParameters::p01b20D00D00D
sh::BuiltInParameters::p01b20D00E00E
sh::BuiltInParameters::p01b20D30D
sh::BuiltInParameters::p01c20D00B
sh::BuiltInParameters::p01c20D00D00D
sh::BuiltInParameters::p01c20D00E00E
sh::BuiltInParameters::p01c20D30E
sh::BuiltInParameters::p01d
sh::BuiltInParameters::p01e
sh::BuiltInParameters::p01f
sh::BuiltInParameters::p01g00D00B
sh::BuiltInParameters::p01g00D00D00D
sh::BuiltInParameters::p01g00D00E00E
sh::BuiltInParameters::p01g00D30B
sh::BuiltInParameters::p01h00D00B
sh::BuiltInParameters::p01h00D00D00D
sh::BuiltInParameters::p01h00D00E00E
sh::BuiltInParameters::p01h00D30D
sh::BuiltInParameters::p01i00D00B
sh::BuiltInParameters::p01i00D00D00D
sh::BuiltInParameters::p01i00D00E00E
sh::BuiltInParameters::p01i00D30E
sh::BuiltInParameters::p01j
sh::BuiltInParameters::p01k
sh::BuiltInParameters::p01l
sh::BuiltInParameters::p01m00D
sh::BuiltInParameters::p01n00D
sh::BuiltInParameters::p01o00D
sh::BuiltInParameters::p10B00B00B
sh::BuiltInParameters::p10B00D
sh::BuiltInParameters::p10B10B00B
sh::BuiltInParameters::p10B10B10B
sh::BuiltInParameters::p10B10B10F
sh::BuiltInParameters::p10B10D
sh::BuiltInParameters::p10B20B
sh::BuiltInParameters::p10B30B
sh::BuiltInParameters::p10B_o_10B
sh::BuiltInParameters::p10B_o_10D
sh::BuiltInParameters::p10C00C00C
sh::BuiltInParameters::p10C10C00B
sh::BuiltInParameters::p10C10C00C
sh::BuiltInParameters::p10C10C10C
sh::BuiltInParameters::p10C10C10F
sh::BuiltInParameters::p10C10D
sh::BuiltInParameters::p10C_o_10C
sh::BuiltInParameters::p10C_o_10D
sh::BuiltInParameters::p10D00D00D
sh::BuiltInParameters::p10D10D00D00D
sh::BuiltInParameters::p10D10D10D
sh::BuiltInParameters::p10D10D10F
sh::BuiltInParameters::p10D10D_o_10D_o_10D
sh::BuiltInParameters::p10E00D00D
sh::BuiltInParameters::p10E00E00E
sh::BuiltInParameters::p10E10E00D00D
sh::BuiltInParameters::p10E10E10E
sh::BuiltInParameters::p10E10E10F
sh::BuiltInParameters::p10E10E_o_10E_o_10E
sh::BuiltInParameters::p10F10F10F
sh::BuiltInParameters::p20B00B00B
sh::BuiltInParameters::p20B00D
sh::BuiltInParameters::p20B00H
sh::BuiltInParameters::p20B10B
sh::BuiltInParameters::p20B20B00B
sh::BuiltInParameters::p20B20B20B
sh::BuiltInParameters::p20B20B20F
sh::BuiltInParameters::p20B20D
sh::BuiltInParameters::p20B30B
sh::BuiltInParameters::p20B_o_20B
sh::BuiltInParameters::p20B_o_20D
sh::BuiltInParameters::p20C00C00C
sh::BuiltInParameters::p20C20C00B
sh::BuiltInParameters::p20C20C00C
sh::BuiltInParameters::p20C20C20C
sh::BuiltInParameters::p20C20C20F
sh::BuiltInParameters::p20C20D
sh::BuiltInParameters::p20C_o_20C
sh::BuiltInParameters::p20C_o_20D
sh::BuiltInParameters::p20D00D00D
sh::BuiltInParameters::p20D20D00D00D
sh::BuiltInParameters::p20D20D20D
sh::BuiltInParameters::p20D20D20F
sh::BuiltInParameters::p20D20D_o_20D_o_20D
sh::BuiltInParameters::p20E00D00D
sh::BuiltInParameters::p20E00E00E
sh::BuiltInParameters::p20E20E00D00D
sh::BuiltInParameters::p20E20E20E
sh::BuiltInParameters::p20E20E20F
sh::BuiltInParameters::p20E20E_o_20E_o_20E
sh::BuiltInParameters::p20F20F20F
sh::BuiltInParameters::p30B00B00B
sh::BuiltInParameters::p30B00D
sh::BuiltInParameters::p30B10B
sh::BuiltInParameters::p30B20B
sh::BuiltInParameters::p30B30B00B
sh::BuiltInParameters::p30B30B30B
sh::BuiltInParameters::p30B30B30F
sh::BuiltInParameters::p30B30D
sh::BuiltInParameters::p30B_o_30B
sh::BuiltInParameters::p30B_o_30D
sh::BuiltInParameters::p30C00C00C
sh::BuiltInParameters::p30C30C00B
sh::BuiltInParameters::p30C30C00C
sh::BuiltInParameters::p30C30C30C
sh::BuiltInParameters::p30C30C30F
sh::BuiltInParameters::p30C30D
sh::BuiltInParameters::p30C_o_30C
sh::BuiltInParameters::p30C_o_30D
sh::BuiltInParameters::p30D00D00D
sh::BuiltInParameters::p30D30D00D00D
sh::BuiltInParameters::p30D30D30D
sh::BuiltInParameters::p30D30D30F
sh::BuiltInParameters::p30D30D_o_30D_o_30D
sh::BuiltInParameters::p30E00D00D
sh::BuiltInParameters::p30E00E00E
sh::BuiltInParameters::p30E30E00D00D
sh::BuiltInParameters::p30E30E30E
sh::BuiltInParameters::p30E30E30F
sh::BuiltInParameters::p30E30E_o_30E_o_30E
sh::BuiltInParameters::p30F30F30F
sh::BuiltInParameters::p50B50B
sh::BuiltInParameters::p60B60B
sh::BuiltInParameters::p70B70B
sh::BuiltInParameters::p90B90B
sh::BuiltInParameters::pA0BA0B
sh::BuiltInParameters::pB0BB0B
sh::BuiltInParameters::pD0BD0B
sh::BuiltInParameters::pE0BE0B
sh::BuiltInParameters::pF0BF0B
sh::BuiltInParameters::p_io_00D00D00D
sh::BuiltInParameters::p_io_00E00E00E
sh::BuiltInVariable::angle_BaseInstance()
sh::BuiltInVariable::gl_BaseInstance()
sh::BuiltInVariable::gl_BaseVertex()
sh::BuiltInVariable::gl_DrawID()
sh::BuiltInVariable::gl_FragColor()
sh::BuiltInVariable::gl_FragCoord()
sh::BuiltInVariable::gl_FragDepth()
sh::BuiltInVariable::gl_InstanceID()
sh::BuiltInVariable::gl_InstanceIndex()
sh::BuiltInVariable::gl_LayerVS()
sh::BuiltInVariable::gl_PointCoord()
sh::BuiltInVariable::gl_PointSize()
sh::BuiltInVariable::gl_Position()
sh::BuiltInVariable::gl_SecondaryFragColorEXT()
sh::BuiltInVariable::gl_VertexID()
sh::BuiltInVariable::gl_VertexIndex()
sh::BuiltInVariable::gl_ViewID_OVR()
sh::BuiltInVariable::gl_ViewportIndex()
sh::BuiltInVariable::kArraySize4
sh::BuiltInVariable::kangle_BaseInstance
sh::BuiltInVariable::kangle_BaseVertex
sh::BuiltInVariable::kgl_BaseInstance
sh::BuiltInVariable::kgl_BaseVertex
sh::BuiltInVariable::kgl_DrawID
sh::BuiltInVariable::kgl_FragColor
sh::BuiltInVariable::kgl_FragCoord
sh::BuiltInVariable::kgl_FragDepth
sh::BuiltInVariable::kgl_FrontFacing
sh::BuiltInVariable::kgl_GlobalInvocationID
sh::BuiltInVariable::kgl_HelperInvocation
sh::BuiltInVariable::kgl_InstanceID
sh::BuiltInVariable::kgl_InstanceIndex
sh::BuiltInVariable::kgl_InvocationID
sh::BuiltInVariable::kgl_LastFragColor
sh::BuiltInVariable::kgl_LastFragColorARM
sh::BuiltInVariable::kgl_Layer
sh::BuiltInVariable::kgl_LayerGS
sh::BuiltInVariable::kgl_LayerVS
sh::BuiltInVariable::kgl_LocalInvocationID
sh::BuiltInVariable::kgl_LocalInvocationIndex
sh::BuiltInVariable::kgl_NumWorkGroups
sh::BuiltInVariable::kgl_PointCoord
sh::BuiltInVariable::kgl_PointSize
sh::BuiltInVariable::kgl_Position
sh::BuiltInVariable::kgl_PrimitiveID
sh::BuiltInVariable::kgl_PrimitiveIDGS
sh::BuiltInVariable::kgl_PrimitiveIDIn
sh::BuiltInVariable::kgl_SecondaryFragColorEXT
sh::BuiltInVariable::kgl_VertexID
sh::BuiltInVariable::kgl_VertexIndex
sh::BuiltInVariable::kgl_ViewID_OVR
sh::BuiltInVariable::kgl_ViewportIndex
sh::BuiltInVariable::kgl_WorkGroupID
sh::BuiltInVariable::kgl_WorkGroupSize
sh::BuiltInVariable::kpt00B
sh::BuiltInVariable::kpt00C
sh::BuiltInVariable::kpt00D
sh::BuiltInVariable::kpt00E
sh::BuiltInVariable::kpt00F
sh::BuiltInVariable::kpt00G
sh::BuiltInVariable::kpt00H
sh::BuiltInVariable::kpt00I
sh::BuiltInVariable::kpt00J
sh::BuiltInVariable::kpt00K
sh::BuiltInVariable::kpt00L
sh::BuiltInVariable::kpt00M
sh::BuiltInVariable::kpt00N
sh::BuiltInVariable::kpt00O
sh::BuiltInVariable::kpt00P
sh::BuiltInVariable::kpt00Q
sh::BuiltInVariable::kpt00R
sh::BuiltInVariable::kpt00S
sh::BuiltInVariable::kpt00T
sh::BuiltInVariable::kpt00U
sh::BuiltInVariable::kpt00V
sh::BuiltInVariable::kpt00W
sh::BuiltInVariable::kpt00X
sh::BuiltInVariable::kpt00Y
sh::BuiltInVariable::kpt00Z
sh::BuiltInVariable::kpt00a
sh::BuiltInVariable::kpt00b
sh::BuiltInVariable::kpt00c
sh::BuiltInVariable::kpt00d
sh::BuiltInVariable::kpt00e
sh::BuiltInVariable::kpt00f
sh::BuiltInVariable::kpt00g
sh::BuiltInVariable::kpt00h
sh::BuiltInVariable::kpt00i
sh::BuiltInVariable::kpt00j
sh::BuiltInVariable::kpt00k
sh::BuiltInVariable::kpt00l
sh::BuiltInVariable::kpt00m
sh::BuiltInVariable::kpt00n
sh::BuiltInVariable::kpt00o
sh::BuiltInVariable::kpt00p
sh::BuiltInVariable::kpt00q
sh::BuiltInVariable::kpt00r
sh::BuiltInVariable::kpt00s
sh::BuiltInVariable::kpt00t
sh::BuiltInVariable::kpt00u
sh::BuiltInVariable::kpt00v
sh::BuiltInVariable::kpt00w
sh::BuiltInVariable::kpt00x
sh::BuiltInVariable::kpt00y
sh::BuiltInVariable::kpt00z
sh::BuiltInVariable::kpt01A
sh::BuiltInVariable::kpt01B
sh::BuiltInVariable::kpt01C
sh::BuiltInVariable::kpt01D
sh::BuiltInVariable::kpt01E
sh::BuiltInVariable::kpt01F
sh::BuiltInVariable::kpt01G
sh::BuiltInVariable::kpt01H
sh::BuiltInVariable::kpt01I
sh::BuiltInVariable::kpt01J
sh::BuiltInVariable::kpt01K
sh::BuiltInVariable::kpt01L
sh::BuiltInVariable::kpt01M
sh::BuiltInVariable::kpt01N
sh::BuiltInVariable::kpt01O
sh::BuiltInVariable::kpt01P
sh::BuiltInVariable::kpt01Q
sh::BuiltInVariable::kpt01R
sh::BuiltInVariable::kpt01S
sh::BuiltInVariable::kpt01T
sh::BuiltInVariable::kpt01U
sh::BuiltInVariable::kpt01V
sh::BuiltInVariable::kpt01W
sh::BuiltInVariable::kpt01X
sh::BuiltInVariable::kpt01Y
sh::BuiltInVariable::kpt01Z
sh::BuiltInVariable::kpt01a
sh::BuiltInVariable::kpt01b
sh::BuiltInVariable::kpt01c
sh::BuiltInVariable::kpt01d
sh::BuiltInVariable::kpt01e
sh::BuiltInVariable::kpt01f
sh::BuiltInVariable::kpt01g
sh::BuiltInVariable::kpt01h
sh::BuiltInVariable::kpt01i
sh::BuiltInVariable::kpt01j
sh::BuiltInVariable::kpt01k
sh::BuiltInVariable::kpt01l
sh::BuiltInVariable::kpt01m
sh::BuiltInVariable::kpt01n
sh::BuiltInVariable::kpt01o
sh::BuiltInVariable::kpt10B
sh::BuiltInVariable::kpt10C
sh::BuiltInVariable::kpt10D
sh::BuiltInVariable::kpt10Dx4
sh::BuiltInVariable::kpt10E
sh::BuiltInVariable::kpt10F
sh::BuiltInVariable::kpt20B
sh::BuiltInVariable::kpt20C
sh::BuiltInVariable::kpt20D
sh::BuiltInVariable::kpt20E
sh::BuiltInVariable::kpt20F
sh::BuiltInVariable::kpt30B
sh::BuiltInVariable::kpt30C
sh::BuiltInVariable::kpt30D
sh::BuiltInVariable::kpt30E
sh::BuiltInVariable::kpt30F
sh::BuiltInVariable::kpt50B
sh::BuiltInVariable::kpt60B
sh::BuiltInVariable::kpt70B
sh::BuiltInVariable::kpt90B
sh::BuiltInVariable::kptA0B
sh::BuiltInVariable::kptB0B
sh::BuiltInVariable::kptD0B
sh::BuiltInVariable::kptE0B
sh::BuiltInVariable::kptF0B
sh::BuiltInVariable::kpt_io_00D
sh::BuiltInVariable::kpt_io_00E
sh::BuiltInVariable::kpt_o_00B
sh::BuiltInVariable::kpt_o_00C
sh::BuiltInVariable::kpt_o_00D
sh::BuiltInVariable::kpt_o_00E
sh::BuiltInVariable::kpt_o_10B
sh::BuiltInVariable::kpt_o_10C
sh::BuiltInVariable::kpt_o_10D
sh::BuiltInVariable::kpt_o_10E
sh::BuiltInVariable::kpt_o_20B
sh::BuiltInVariable::kpt_o_20C
sh::BuiltInVariable::kpt_o_20D
sh::BuiltInVariable::kpt_o_20E
sh::BuiltInVariable::kpt_o_30B
sh::BuiltInVariable::kpt_o_30C
sh::BuiltInVariable::kpt_o_30D
sh::BuiltInVariable::kpt_o_30E
sh::CalculateVaryingLocationCount(sh::TIntermSymbol*, unsigned int)
sh::CallDAG::CallDAG()
sh::CallDAG::CallDAGCreator::assignIndicesInternal(sh::CallDAG::CallDAGCreator::CreatorFunctionData*)
sh::CallDAG::CallDAGCreator::fillDataStructures(std::__1::vector<sh::CallDAG::Record, std::__1::allocator<sh::CallDAG::Record> >*, std::__1::map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, int> > >*)
sh::CallDAG::CallDAGCreator::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::CallDAG::CallDAGCreator::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::CallDAG::CallDAGCreator::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::CallDAG::CallDAGCreator::~CallDAGCreator()
sh::CallDAG::InvalidIndex
sh::CallDAG::clear()
sh::CallDAG::findIndex(sh::TSymbolUniqueId const&) const
sh::CallDAG::getRecordFromIndex(unsigned long) const
sh::CallDAG::init(sh::TIntermNode*, sh::TDiagnostics*)
sh::CallDAG::size() const
sh::CallDAG::~CallDAG()
sh::CanBeInvariantESSL1(sh::TQualifier)
sh::CanBeInvariantESSL3OrGreater(sh::TQualifier)
sh::CheckEarlyFragmentTestsFeasible(sh::TCompiler*, sh::TIntermNode*)
sh::CheckVariablesInPackingLimits(unsigned int, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&)
sh::ClampFragDepth(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*)
sh::ClampPointSize(sh::TCompiler*, sh::TIntermBlock*, float, sh::TSymbolTable*)
sh::CollectVariables(sh::TIntermBlock*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >*, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >*, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >*, unsigned long (*)(char const*, unsigned long), sh::TSymbolTable*, unsigned int, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > > const&)
sh::Compile(void*, char const* const*, unsigned long, unsigned long)
sh::ConstructCompiler(unsigned int, ShShaderSpec, ShShaderOutput)
sh::ConstructCompiler(unsigned int, ShShaderSpec, ShShaderOutput, ShBuiltInResources const*)
sh::CreateBoolNode(bool)
sh::CreateBuiltInFunctionCallNode(char const*, sh::TVector<sh::TIntermNode*>*, sh::TSymbolTable const&, int)
sh::CreateFloatNode(float)
sh::CreateIndexNode(int)
sh::CreateInitCode(sh::TIntermTyped const*, bool, bool, sh::TSymbolTable*)
sh::CreateInternalFunctionDefinitionNode(sh::TFunction const&, sh::TIntermBlock*)
sh::CreateInternalFunctionPrototypeNode(sh::TFunction const&)
sh::CreateTempAssignmentNode(sh::TVariable const*, sh::TIntermTyped*)
sh::CreateTempDeclarationNode(sh::TVariable const*)
sh::CreateTempInitDeclarationNode(sh::TVariable const*, sh::TIntermTyped*)
sh::CreateTempSymbolNode(sh::TVariable const*)
sh::CreateTempVariable(sh::TSymbolTable*, sh::TType const*)
sh::CreateTempVariable(sh::TSymbolTable*, sh::TType const*, sh::TQualifier)
sh::CreateUIntNode(unsigned int)
sh::CreateZeroNode(sh::TType const&)
sh::DeclareAndInitBuiltinsForInstancedMultiview(sh::TCompiler*, sh::TIntermBlock*, unsigned int, unsigned int, unsigned long, ShShaderOutput, sh::TSymbolTable*)
sh::DeclareGlobalVariable(sh::TIntermBlock*, sh::TVariable const*)
sh::DeclareInterfaceBlock(sh::TIntermBlock*, sh::TSymbolTable*, sh::TVector<sh::TField*>*, sh::TQualifier, sh::TMemoryQualifier const&, unsigned int, sh::ImmutableString const&, sh::ImmutableString const&)
sh::DeclareTempVariable(sh::TSymbolTable*, sh::TIntermTyped*, sh::TQualifier, sh::TIntermDeclaration**)
sh::DeferGlobalInitializers(sh::TCompiler*, sh::TIntermBlock*, bool, bool, bool, sh::TSymbolTable*)
sh::DeleteCompiler(sh::TCompiler*)
sh::Destruct(void*)
sh::DetachProcess()
sh::DummyBlockEncoder::advanceOffset(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, bool, int, int)
sh::DummyBlockEncoder::enterAggregateType(sh::ShaderVariable const&)
sh::DummyBlockEncoder::exitAggregateType(sh::ShaderVariable const&)
sh::DummyBlockEncoder::getBlockLayoutInfo(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, bool, int*, int*)
sh::DummyBlockEncoder::~DummyBlockEncoder()
sh::EmitEarlyFragmentTestsGLSL(sh::TCompiler const&, sh::TInfoSinkBase&)
sh::EmitMultiviewGLSL(sh::TCompiler const&, unsigned long const&, sh::TExtension, sh::TBehavior, sh::TInfoSinkBase&)
sh::EmitWorkGroupSizeGLSL(sh::TCompiler const&, sh::TInfoSinkBase&)
sh::EmulateGLBaseVertexBaseInstance(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, bool, bool)
sh::EmulateGLDrawID(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, bool)
sh::EmulateGLFragColorBroadcast(sh::TCompiler*, sh::TIntermBlock*, int, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >*, sh::TSymbolTable*, int)
sh::EmulatePrecision::EmulatePrecision(sh::TSymbolTable*)
sh::EmulatePrecision::SupportedInLanguage(ShShaderOutput)
sh::EmulatePrecision::createCompoundAssignmentFunctionCallNode(sh::TIntermTyped*, sh::TIntermTyped*, char const*)
sh::EmulatePrecision::createRoundingFunctionCallNode(sh::TIntermTyped*)
sh::EmulatePrecision::getInternalFunction(sh::ImmutableString const&, sh::TType const&, sh::TVector<sh::TIntermNode*>*, sh::TVector<sh::TVariable const*> const&, bool)
sh::EmulatePrecision::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::EmulatePrecision::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::EmulatePrecision::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::EmulatePrecision::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::EmulatePrecision::visitSymbol(sh::TIntermSymbol*)
sh::EmulatePrecision::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::EmulatePrecision::writeEmulationHelpers(sh::TInfoSinkBase&, int, ShShaderOutput)
sh::EmulatePrecision::~EmulatePrecision()
sh::EnsureBlock(sh::TIntermNode*)
sh::Finalize()
sh::FindFirstFunctionDefinitionIndex(sh::TIntermBlock*)
sh::FindMain(sh::TIntermBlock*)
sh::FindMainBody(sh::TIntermBlock*)
sh::FindMainIndex(sh::TIntermBlock*)
sh::FindMangledBuiltIn(ShShaderSpec, int, unsigned int, ShBuiltInResources const&, sh::TSymbolTableBase const&, sh::SymbolRule const*, unsigned short, unsigned short)
sh::FindSymbolNode(sh::TIntermNode*, sh::ImmutableString const&)
sh::FoldExpressions(sh::TCompiler*, sh::TIntermBlock*, sh::TDiagnostics*)
sh::Func::EmitStreamVertex_00D
sh::Func::EmitVertex_
sh::Func::EndPrimitive_
sh::Func::EndStreamPrimitive_00D
sh::Func::abs_00B
sh::Func::abs_00C
sh::Func::abs_00D
sh::Func::abs_10B
sh::Func::abs_10C
sh::Func::abs_10D
sh::Func::abs_20B
sh::Func::abs_20C
sh::Func::abs_20D
sh::Func::abs_30B
sh::Func::abs_30C
sh::Func::abs_30D
sh::Func::acos_00B
sh::Func::acos_10B
sh::Func::acos_20B
sh::Func::acos_30B
sh::Func::acosh_00B
sh::Func::acosh_10B
sh::Func::acosh_20B
sh::Func::acosh_30B
sh::Func::allInvocationsEqual_00F
sh::Func::allInvocations_00F
sh::Func::all_10F
sh::Func::all_20F
sh::Func::all_30F
sh::Func::anyInvocation_00F
sh::Func::any_10F
sh::Func::any_20F
sh::Func::any_30F
sh::Func::asin_00B
sh::Func::asin_10B
sh::Func::asin_20B
sh::Func::asin_30B
sh::Func::asinh_00B
sh::Func::asinh_10B
sh::Func::asinh_20B
sh::Func::asinh_30B
sh::Func::atan_00B
sh::Func::atan_00B00B
sh::Func::atan_10B
sh::Func::atan_10B10B
sh::Func::atan_20B
sh::Func::atan_20B20B
sh::Func::atan_30B
sh::Func::atan_30B30B
sh::Func::atanh_00B
sh::Func::atanh_10B
sh::Func::atanh_20B
sh::Func::atanh_30B
sh::Func::atomicAdd_00D00D
sh::Func::atomicAdd_00E00E
sh::Func::atomicAnd_00D00D
sh::Func::atomicAnd_00E00E
sh::Func::atomicCompSwap_00D00D00D
sh::Func::atomicCompSwap_00E00E00E
sh::Func::atomicCounterAdd_00G00E
sh::Func::atomicCounterAnd_00G00E
sh::Func::atomicCounterCompSwap_00G00E00E
sh::Func::atomicCounterDecrement_00G
sh::Func::atomicCounterExchange_00G00E
sh::Func::atomicCounterIncrement_00G
sh::Func::atomicCounterMax_00G00E
sh::Func::atomicCounterMin_00G00E
sh::Func::atomicCounterOr_00G00E
sh::Func::atomicCounterSubtract_00G00E
sh::Func::atomicCounterXor_00G00E
sh::Func::atomicCounter_00G
sh::Func::atomicExchange_00D00D
sh::Func::atomicExchange_00E00E
sh::Func::atomicMax_00D00D
sh::Func::atomicMax_00E00E
sh::Func::atomicMin_00D00D
sh::Func::atomicMin_00E00E
sh::Func::atomicOr_00D00D
sh::Func::atomicOr_00E00E
sh::Func::atomicXor_00D00D
sh::Func::atomicXor_00E00E
sh::Func::barrier_
sh::Func::bitCount_00D
sh::Func::bitCount_00E
sh::Func::bitCount_10D
sh::Func::bitCount_10E
sh::Func::bitCount_20D
sh::Func::bitCount_20E
sh::Func::bitCount_30D
sh::Func::bitCount_30E
sh::Func::bitfieldExtract_00D00D00D
sh::Func::bitfieldExtract_00E00D00D
sh::Func::bitfieldExtract_10D00D00D
sh::Func::bitfieldExtract_10E00D00D
sh::Func::bitfieldExtract_20D00D00D
sh::Func::bitfieldExtract_20E00D00D
sh::Func::bitfieldExtract_30D00D00D
sh::Func::bitfieldExtract_30E00D00D
sh::Func::bitfieldInsert_00D00D00D00D
sh::Func::bitfieldInsert_00E00E00D00D
sh::Func::bitfieldInsert_10D10D00D00D
sh::Func::bitfieldInsert_10E10E00D00D
sh::Func::bitfieldInsert_20D20D00D00D
sh::Func::bitfieldInsert_20E20E00D00D
sh::Func::bitfieldInsert_30D30D00D00D
sh::Func::bitfieldInsert_30E30E00D00D
sh::Func::bitfieldReverse_00D
sh::Func::bitfieldReverse_00E
sh::Func::bitfieldReverse_10D
sh::Func::bitfieldReverse_10E
sh::Func::bitfieldReverse_20D
sh::Func::bitfieldReverse_20E
sh::Func::bitfieldReverse_30D
sh::Func::bitfieldReverse_30E
sh::Func::ceil_00B
sh::Func::ceil_00C
sh::Func::ceil_10B
sh::Func::ceil_10C
sh::Func::ceil_20B
sh::Func::ceil_20C
sh::Func::ceil_30B
sh::Func::ceil_30C
sh::Func::clamp_00B00B00B
sh::Func::clamp_00C00C00C
sh::Func::clamp_00D00D00D
sh::Func::clamp_00E00E00E
sh::Func::clamp_10B00B00B
sh::Func::clamp_10B10B10B
sh::Func::clamp_10C00C00C
sh::Func::clamp_10C10C10C
sh::Func::clamp_10D00D00D
sh::Func::clamp_10D10D10D
sh::Func::clamp_10E00E00E
sh::Func::clamp_10E10E10E
sh::Func::clamp_20B00B00B
sh::Func::clamp_20B20B20B
sh::Func::clamp_20C00C00C
sh::Func::clamp_20C20C20C
sh::Func::clamp_20D00D00D
sh::Func::clamp_20D20D20D
sh::Func::clamp_20E00E00E
sh::Func::clamp_20E20E20E
sh::Func::clamp_30B00B00B
sh::Func::clamp_30B30B30B
sh::Func::clamp_30C00C00C
sh::Func::clamp_30C30C30C
sh::Func::clamp_30D00D00D
sh::Func::clamp_30D30D30D
sh::Func::clamp_30E00E00E
sh::Func::clamp_30E30E30E
sh::Func::cos_00B
sh::Func::cos_10B
sh::Func::cos_20B
sh::Func::cos_30B
sh::Func::cosh_00B
sh::Func::cosh_10B
sh::Func::cosh_20B
sh::Func::cosh_30B
sh::Func::cross_20B20B
sh::Func::cross_20C20C
sh::Func::dFdxCoarse_00B
sh::Func::dFdxCoarse_10B
sh::Func::dFdxCoarse_20B
sh::Func::dFdxCoarse_30B
sh::Func::dFdxExt_00B
sh::Func::dFdxExt_10B
sh::Func::dFdxExt_20B
sh::Func::dFdxExt_30B
sh::Func::dFdxFine_00B
sh::Func::dFdxFine_10B
sh::Func::dFdxFine_20B
sh::Func::dFdxFine_30B
sh::Func::dFdx_00B
sh::Func::dFdx_10B
sh::Func::dFdx_20B
sh::Func::dFdx_30B
sh::Func::dFdyCoarse_00B
sh::Func::dFdyCoarse_10B
sh::Func::dFdyCoarse_20B
sh::Func::dFdyCoarse_30B
sh::Func::dFdyExt_00B
sh::Func::dFdyExt_10B
sh::Func::dFdyExt_20B
sh::Func::dFdyExt_30B
sh::Func::dFdyFine_00B
sh::Func::dFdyFine_10B
sh::Func::dFdyFine_20B
sh::Func::dFdyFine_30B
sh::Func::dFdy_00B
sh::Func::dFdy_10B
sh::Func::dFdy_20B
sh::Func::dFdy_30B
sh::Func::degrees_00B
sh::Func::degrees_10B
sh::Func::degrees_20B
sh::Func::degrees_30B
sh::Func::determinant_50B
sh::Func::determinant_A0B
sh::Func::determinant_F0B
sh::Func::distance_00B00B
sh::Func::distance_00C00C
sh::Func::distance_10B10B
sh::Func::distance_10C10C
sh::Func::distance_20B20B
sh::Func::distance_20C20C
sh::Func::distance_30B30B
sh::Func::distance_30C30C
sh::Func::dot_00B00B
sh::Func::dot_00C00C
sh::Func::dot_10B10B
sh::Func::dot_10C10C
sh::Func::dot_20B20B
sh::Func::dot_20C20C
sh::Func::dot_30B30B
sh::Func::dot_30C30C
sh::Func::equal_10B10B
sh::Func::equal_10D10D
sh::Func::equal_10E10E
sh::Func::equal_10F10F
sh::Func::equal_20B20B
sh::Func::equal_20D20D
sh::Func::equal_20E20E
sh::Func::equal_20F20F
sh::Func::equal_30B30B
sh::Func::equal_30D30D
sh::Func::equal_30E30E
sh::Func::equal_30F30F
sh::Func::exp2_00B
sh::Func::exp2_10B
sh::Func::exp2_20B
sh::Func::exp2_30B
sh::Func::exp_00B
sh::Func::exp_10B
sh::Func::exp_20B
sh::Func::exp_30B
sh::Func::faceforward_00B00B00B
sh::Func::faceforward_00C00C00C
sh::Func::faceforward_10B10B10B
sh::Func::faceforward_10C10C10C
sh::Func::faceforward_20B20B20B
sh::Func::faceforward_20C20C20C
sh::Func::faceforward_30B30B30B
sh::Func::faceforward_30C30C30C
sh::Func::findLSB_00D
sh::Func::findLSB_00E
sh::Func::findLSB_10D
sh::Func::findLSB_10E
sh::Func::findLSB_20D
sh::Func::findLSB_20E
sh::Func::findLSB_30D
sh::Func::findLSB_30E
sh::Func::findMSB_00D
sh::Func::findMSB_00E
sh::Func::findMSB_10D
sh::Func::findMSB_10E
sh::Func::findMSB_20D
sh::Func::findMSB_20E
sh::Func::findMSB_30D
sh::Func::findMSB_30E
sh::Func::floatBitsToInt_00B
sh::Func::floatBitsToInt_10B
sh::Func::floatBitsToInt_20B
sh::Func::floatBitsToInt_30B
sh::Func::floatBitsToUint_00B
sh::Func::floatBitsToUint_10B
sh::Func::floatBitsToUint_20B
sh::Func::floatBitsToUint_30B
sh::Func::floor_00B
sh::Func::floor_00C
sh::Func::floor_10B
sh::Func::floor_10C
sh::Func::floor_20B
sh::Func::floor_20C
sh::Func::floor_30B
sh::Func::floor_30C
sh::Func::fmaExt_00B00B00B
sh::Func::fmaExt_10B10B10B
sh::Func::fmaExt_20B20B20B
sh::Func::fmaExt_30B30B30B
sh::Func::fma_00B00B00B
sh::Func::fma_00C00C00C
sh::Func::fma_10B10B10B
sh::Func::fma_10C10C10C
sh::Func::fma_20B20B20B
sh::Func::fma_20C20C20C
sh::Func::fma_30B30B30B
sh::Func::fma_30C30C30C
sh::Func::fract_00B
sh::Func::fract_00C
sh::Func::fract_10B
sh::Func::fract_10C
sh::Func::fract_20B
sh::Func::fract_20C
sh::Func::fract_30B
sh::Func::fract_30C
sh::Func::frexp_00B00D
sh::Func::frexp_00C00D
sh::Func::frexp_10B10D
sh::Func::frexp_10C10D
sh::Func::frexp_20B20D
sh::Func::frexp_20C20D
sh::Func::frexp_30B30D
sh::Func::frexp_30C30D
sh::Func::ftransform_
sh::Func::fwidthCoarse_00B
sh::Func::fwidthCoarse_10B
sh::Func::fwidthCoarse_20B
sh::Func::fwidthCoarse_30B
sh::Func::fwidthExt_00B
sh::Func::fwidthExt_10B
sh::Func::fwidthExt_20B
sh::Func::fwidthExt_30B
sh::Func::fwidthFine_00B
sh::Func::fwidthFine_10B
sh::Func::fwidthFine_20B
sh::Func::fwidthFine_30B
sh::Func::fwidth_00B
sh::Func::fwidth_10B
sh::Func::fwidth_20B
sh::Func::fwidth_30B
sh::Func::greaterThanEqual_10B10B
sh::Func::greaterThanEqual_10D10D
sh::Func::greaterThanEqual_10E10E
sh::Func::greaterThanEqual_20B20B
sh::Func::greaterThanEqual_20D20D
sh::Func::greaterThanEqual_20E20E
sh::Func::greaterThanEqual_30B30B
sh::Func::greaterThanEqual_30D30D
sh::Func::greaterThanEqual_30E30E
sh::Func::greaterThan_10B10B
sh::Func::greaterThan_10D10D
sh::Func::greaterThan_10E10E
sh::Func::greaterThan_20B20B
sh::Func::greaterThan_20D20D
sh::Func::greaterThan_20E20E
sh::Func::greaterThan_30B30B
sh::Func::greaterThan_30D30D
sh::Func::greaterThan_30E30E
sh::Func::groupMemoryBarrier_
sh::Func::imageAtomicAdd_00z10D00D
sh::Func::imageAtomicAdd_00z10D00E
sh::Func::imageAtomicAdd_01A10D00D
sh::Func::imageAtomicAdd_01A10D00E
sh::Func::imageAtomicAdd_01B10D00D
sh::Func::imageAtomicAdd_01B10D00E
sh::Func::imageAtomicAdd_01C20D00D
sh::Func::imageAtomicAdd_01C20D00E
sh::Func::imageAtomicAdd_01D20D00D
sh::Func::imageAtomicAdd_01D20D00E
sh::Func::imageAtomicAdd_01E20D00D
sh::Func::imageAtomicAdd_01E20D00E
sh::Func::imageAtomicAdd_01F20D00D
sh::Func::imageAtomicAdd_01F20D00E
sh::Func::imageAtomicAdd_01G20D00D
sh::Func::imageAtomicAdd_01G20D00E
sh::Func::imageAtomicAdd_01H20D00D
sh::Func::imageAtomicAdd_01H20D00E
sh::Func::imageAtomicAdd_01I20D00D
sh::Func::imageAtomicAdd_01I20D00E
sh::Func::imageAtomicAdd_01J20D00D
sh::Func::imageAtomicAdd_01J20D00E
sh::Func::imageAtomicAdd_01K20D00D
sh::Func::imageAtomicAdd_01K20D00E
sh::Func::imageAtomicAdd_01L00D00D
sh::Func::imageAtomicAdd_01L00D00E
sh::Func::imageAtomicAdd_01M00D00D
sh::Func::imageAtomicAdd_01M00D00E
sh::Func::imageAtomicAdd_01N00D00D
sh::Func::imageAtomicAdd_01N00D00E
sh::Func::imageAtomicAdd_01O10D00D
sh::Func::imageAtomicAdd_01O10D00E
sh::Func::imageAtomicAdd_01P10D00D
sh::Func::imageAtomicAdd_01P10D00E
sh::Func::imageAtomicAdd_01Q10D00D
sh::Func::imageAtomicAdd_01Q10D00E
sh::Func::imageAtomicAdd_01R10D00D00D
sh::Func::imageAtomicAdd_01R10D00D00E
sh::Func::imageAtomicAdd_01S10D00D00D
sh::Func::imageAtomicAdd_01S10D00D00E
sh::Func::imageAtomicAdd_01T10D00D00D
sh::Func::imageAtomicAdd_01T10D00D00E
sh::Func::imageAtomicAdd_01U20D00D00D
sh::Func::imageAtomicAdd_01U20D00D00E
sh::Func::imageAtomicAdd_01V20D00D00D
sh::Func::imageAtomicAdd_01V20D00D00E
sh::Func::imageAtomicAdd_01W20D00D00D
sh::Func::imageAtomicAdd_01W20D00D00E
sh::Func::imageAtomicAdd_01X10D00D
sh::Func::imageAtomicAdd_01X10D00E
sh::Func::imageAtomicAdd_01Y10D00D
sh::Func::imageAtomicAdd_01Y10D00E
sh::Func::imageAtomicAdd_01Z10D00D
sh::Func::imageAtomicAdd_01Z10D00E
sh::Func::imageAtomicAdd_01a20D00D
sh::Func::imageAtomicAdd_01a20D00E
sh::Func::imageAtomicAdd_01b20D00D
sh::Func::imageAtomicAdd_01b20D00E
sh::Func::imageAtomicAdd_01c20D00D
sh::Func::imageAtomicAdd_01c20D00E
sh::Func::imageAtomicAdd_01g00D00D
sh::Func::imageAtomicAdd_01g00D00E
sh::Func::imageAtomicAdd_01h00D00D
sh::Func::imageAtomicAdd_01h00D00E
sh::Func::imageAtomicAdd_01i00D00D
sh::Func::imageAtomicAdd_01i00D00E
sh::Func::imageAtomicAnd_00z10D00D
sh::Func::imageAtomicAnd_00z10D00E
sh::Func::imageAtomicAnd_01A10D00D
sh::Func::imageAtomicAnd_01A10D00E
sh::Func::imageAtomicAnd_01B10D00D
sh::Func::imageAtomicAnd_01B10D00E
sh::Func::imageAtomicAnd_01C20D00D
sh::Func::imageAtomicAnd_01C20D00E
sh::Func::imageAtomicAnd_01D20D00D
sh::Func::imageAtomicAnd_01D20D00E
sh::Func::imageAtomicAnd_01E20D00D
sh::Func::imageAtomicAnd_01E20D00E
sh::Func::imageAtomicAnd_01F20D00D
sh::Func::imageAtomicAnd_01F20D00E
sh::Func::imageAtomicAnd_01G20D00D
sh::Func::imageAtomicAnd_01G20D00E
sh::Func::imageAtomicAnd_01H20D00D
sh::Func::imageAtomicAnd_01H20D00E
sh::Func::imageAtomicAnd_01I20D00D
sh::Func::imageAtomicAnd_01I20D00E
sh::Func::imageAtomicAnd_01J20D00D
sh::Func::imageAtomicAnd_01J20D00E
sh::Func::imageAtomicAnd_01K20D00D
sh::Func::imageAtomicAnd_01K20D00E
sh::Func::imageAtomicAnd_01L00D00D
sh::Func::imageAtomicAnd_01L00D00E
sh::Func::imageAtomicAnd_01M00D00D
sh::Func::imageAtomicAnd_01M00D00E
sh::Func::imageAtomicAnd_01N00D00D
sh::Func::imageAtomicAnd_01N00D00E
sh::Func::imageAtomicAnd_01O10D00D
sh::Func::imageAtomicAnd_01O10D00E
sh::Func::imageAtomicAnd_01P10D00D
sh::Func::imageAtomicAnd_01P10D00E
sh::Func::imageAtomicAnd_01Q10D00D
sh::Func::imageAtomicAnd_01Q10D00E
sh::Func::imageAtomicAnd_01R10D00D00D
sh::Func::imageAtomicAnd_01R10D00D00E
sh::Func::imageAtomicAnd_01S10D00D00D
sh::Func::imageAtomicAnd_01S10D00D00E
sh::Func::imageAtomicAnd_01T10D00D00D
sh::Func::imageAtomicAnd_01T10D00D00E
sh::Func::imageAtomicAnd_01U20D00D00D
sh::Func::imageAtomicAnd_01U20D00D00E
sh::Func::imageAtomicAnd_01V20D00D00D
sh::Func::imageAtomicAnd_01V20D00D00E
sh::Func::imageAtomicAnd_01W20D00D00D
sh::Func::imageAtomicAnd_01W20D00D00E
sh::Func::imageAtomicAnd_01X10D00D
sh::Func::imageAtomicAnd_01X10D00E
sh::Func::imageAtomicAnd_01Y10D00D
sh::Func::imageAtomicAnd_01Y10D00E
sh::Func::imageAtomicAnd_01Z10D00D
sh::Func::imageAtomicAnd_01Z10D00E
sh::Func::imageAtomicAnd_01a20D00D
sh::Func::imageAtomicAnd_01a20D00E
sh::Func::imageAtomicAnd_01b20D00D
sh::Func::imageAtomicAnd_01b20D00E
sh::Func::imageAtomicAnd_01c20D00D
sh::Func::imageAtomicAnd_01c20D00E
sh::Func::imageAtomicAnd_01g00D00D
sh::Func::imageAtomicAnd_01g00D00E
sh::Func::imageAtomicAnd_01h00D00D
sh::Func::imageAtomicAnd_01h00D00E
sh::Func::imageAtomicAnd_01i00D00D
sh::Func::imageAtomicAnd_01i00D00E
sh::Func::imageAtomicCompSwap_00z10D00D00D
sh::Func::imageAtomicCompSwap_00z10D00E00E
sh::Func::imageAtomicCompSwap_01A10D00D00D
sh::Func::imageAtomicCompSwap_01A10D00E00E
sh::Func::imageAtomicCompSwap_01B10D00D00D
sh::Func::imageAtomicCompSwap_01B10D00E00E
sh::Func::imageAtomicCompSwap_01C20D00D00D
sh::Func::imageAtomicCompSwap_01C20D00E00E
sh::Func::imageAtomicCompSwap_01D20D00D00D
sh::Func::imageAtomicCompSwap_01D20D00E00E
sh::Func::imageAtomicCompSwap_01E20D00D00D
sh::Func::imageAtomicCompSwap_01E20D00E00E
sh::Func::imageAtomicCompSwap_01F20D00D00D
sh::Func::imageAtomicCompSwap_01F20D00E00E
sh::Func::imageAtomicCompSwap_01G20D00D00D
sh::Func::imageAtomicCompSwap_01G20D00E00E
sh::Func::imageAtomicCompSwap_01H20D00D00D
sh::Func::imageAtomicCompSwap_01H20D00E00E
sh::Func::imageAtomicCompSwap_01I20D00D00D
sh::Func::imageAtomicCompSwap_01I20D00E00E
sh::Func::imageAtomicCompSwap_01J20D00D00D
sh::Func::imageAtomicCompSwap_01J20D00E00E
sh::Func::imageAtomicCompSwap_01K20D00D00D
sh::Func::imageAtomicCompSwap_01K20D00E00E
sh::Func::imageAtomicCompSwap_01L00D00D00D
sh::Func::imageAtomicCompSwap_01L00D00E00E
sh::Func::imageAtomicCompSwap_01M00D00D00D
sh::Func::imageAtomicCompSwap_01M00D00E00E
sh::Func::imageAtomicCompSwap_01N00D00D00D
sh::Func::imageAtomicCompSwap_01N00D00E00E
sh::Func::imageAtomicCompSwap_01O10D00D00D
sh::Func::imageAtomicCompSwap_01O10D00E00E
sh::Func::imageAtomicCompSwap_01P10D00D00D
sh::Func::imageAtomicCompSwap_01P10D00E00E
sh::Func::imageAtomicCompSwap_01Q10D00D00D
sh::Func::imageAtomicCompSwap_01Q10D00E00E
sh::Func::imageAtomicCompSwap_01R10D00D00D00D
sh::Func::imageAtomicCompSwap_01R10D00D00E00E
sh::Func::imageAtomicCompSwap_01S10D00D00D00D
sh::Func::imageAtomicCompSwap_01S10D00D00E00E
sh::Func::imageAtomicCompSwap_01T10D00D00D00D
sh::Func::imageAtomicCompSwap_01T10D00D00E00E
sh::Func::imageAtomicCompSwap_01U20D00D00D00D
sh::Func::imageAtomicCompSwap_01U20D00D00E00E
sh::Func::imageAtomicCompSwap_01V20D00D00D00D
sh::Func::imageAtomicCompSwap_01V20D00D00E00E
sh::Func::imageAtomicCompSwap_01W20D00D00D00D
sh::Func::imageAtomicCompSwap_01W20D00D00E00E
sh::Func::imageAtomicCompSwap_01X10D00D00D
sh::Func::imageAtomicCompSwap_01X10D00E00E
sh::Func::imageAtomicCompSwap_01Y10D00D00D
sh::Func::imageAtomicCompSwap_01Y10D00E00E
sh::Func::imageAtomicCompSwap_01Z10D00D00D
sh::Func::imageAtomicCompSwap_01Z10D00E00E
sh::Func::imageAtomicCompSwap_01a20D00D00D
sh::Func::imageAtomicCompSwap_01a20D00E00E
sh::Func::imageAtomicCompSwap_01b20D00D00D
sh::Func::imageAtomicCompSwap_01b20D00E00E
sh::Func::imageAtomicCompSwap_01c20D00D00D
sh::Func::imageAtomicCompSwap_01c20D00E00E
sh::Func::imageAtomicCompSwap_01g00D00D00D
sh::Func::imageAtomicCompSwap_01g00D00E00E
sh::Func::imageAtomicCompSwap_01h00D00D00D
sh::Func::imageAtomicCompSwap_01h00D00E00E
sh::Func::imageAtomicCompSwap_01i00D00D00D
sh::Func::imageAtomicCompSwap_01i00D00E00E
sh::Func::imageAtomicExchange_00z10D00B
sh::Func::imageAtomicExchange_00z10D00D
sh::Func::imageAtomicExchange_00z10D00E
sh::Func::imageAtomicExchange_01A10D00B
sh::Func::imageAtomicExchange_01A10D00D
sh::Func::imageAtomicExchange_01A10D00E
sh::Func::imageAtomicExchange_01B10D00B
sh::Func::imageAtomicExchange_01B10D00D
sh::Func::imageAtomicExchange_01B10D00E
sh::Func::imageAtomicExchange_01C20D00B
sh::Func::imageAtomicExchange_01C20D00D
sh::Func::imageAtomicExchange_01C20D00E
sh::Func::imageAtomicExchange_01D20D00B
sh::Func::imageAtomicExchange_01D20D00D
sh::Func::imageAtomicExchange_01D20D00E
sh::Func::imageAtomicExchange_01E20D00B
sh::Func::imageAtomicExchange_01E20D00D
sh::Func::imageAtomicExchange_01E20D00E
sh::Func::imageAtomicExchange_01F20D00B
sh::Func::imageAtomicExchange_01F20D00D
sh::Func::imageAtomicExchange_01F20D00E
sh::Func::imageAtomicExchange_01G20D00B
sh::Func::imageAtomicExchange_01G20D00D
sh::Func::imageAtomicExchange_01G20D00E
sh::Func::imageAtomicExchange_01H20D00B
sh::Func::imageAtomicExchange_01H20D00D
sh::Func::imageAtomicExchange_01H20D00E
sh::Func::imageAtomicExchange_01I20D00B
sh::Func::imageAtomicExchange_01I20D00D
sh::Func::imageAtomicExchange_01I20D00E
sh::Func::imageAtomicExchange_01J20D00B
sh::Func::imageAtomicExchange_01J20D00D
sh::Func::imageAtomicExchange_01J20D00E
sh::Func::imageAtomicExchange_01K20D00B
sh::Func::imageAtomicExchange_01K20D00D
sh::Func::imageAtomicExchange_01K20D00E
sh::Func::imageAtomicExchange_01L00D00B
sh::Func::imageAtomicExchange_01L00D00D
sh::Func::imageAtomicExchange_01L00D00E
sh::Func::imageAtomicExchange_01M00D00B
sh::Func::imageAtomicExchange_01M00D00D
sh::Func::imageAtomicExchange_01M00D00E
sh::Func::imageAtomicExchange_01N00D00B
sh::Func::imageAtomicExchange_01N00D00D
sh::Func::imageAtomicExchange_01N00D00E
sh::Func::imageAtomicExchange_01O10D00B
sh::Func::imageAtomicExchange_01O10D00D
sh::Func::imageAtomicExchange_01O10D00E
sh::Func::imageAtomicExchange_01P10D00B
sh::Func::imageAtomicExchange_01P10D00D
sh::Func::imageAtomicExchange_01P10D00E
sh::Func::imageAtomicExchange_01Q10D00B
sh::Func::imageAtomicExchange_01Q10D00D
sh::Func::imageAtomicExchange_01Q10D00E
sh::Func::imageAtomicExchange_01R10D00D00B
sh::Func::imageAtomicExchange_01R10D00D00D
sh::Func::imageAtomicExchange_01R10D00D00E
sh::Func::imageAtomicExchange_01S10D00D00B
sh::Func::imageAtomicExchange_01S10D00D00D
sh::Func::imageAtomicExchange_01S10D00D00E
sh::Func::imageAtomicExchange_01T10D00D00B
sh::Func::imageAtomicExchange_01T10D00D00D
sh::Func::imageAtomicExchange_01T10D00D00E
sh::Func::imageAtomicExchange_01U20D00D00B
sh::Func::imageAtomicExchange_01U20D00D00D
sh::Func::imageAtomicExchange_01U20D00D00E
sh::Func::imageAtomicExchange_01V20D00D00B
sh::Func::imageAtomicExchange_01V20D00D00D
sh::Func::imageAtomicExchange_01V20D00D00E
sh::Func::imageAtomicExchange_01W20D00D00B
sh::Func::imageAtomicExchange_01W20D00D00D
sh::Func::imageAtomicExchange_01W20D00D00E
sh::Func::imageAtomicExchange_01X10D00B
sh::Func::imageAtomicExchange_01X10D00D
sh::Func::imageAtomicExchange_01X10D00E
sh::Func::imageAtomicExchange_01Y10D00B
sh::Func::imageAtomicExchange_01Y10D00D
sh::Func::imageAtomicExchange_01Y10D00E
sh::Func::imageAtomicExchange_01Z10D00B
sh::Func::imageAtomicExchange_01Z10D00D
sh::Func::imageAtomicExchange_01Z10D00E
sh::Func::imageAtomicExchange_01a20D00B
sh::Func::imageAtomicExchange_01a20D00D
sh::Func::imageAtomicExchange_01a20D00E
sh::Func::imageAtomicExchange_01b20D00B
sh::Func::imageAtomicExchange_01b20D00D
sh::Func::imageAtomicExchange_01b20D00E
sh::Func::imageAtomicExchange_01c20D00B
sh::Func::imageAtomicExchange_01c20D00D
sh::Func::imageAtomicExchange_01c20D00E
sh::Func::imageAtomicExchange_01g00D00B
sh::Func::imageAtomicExchange_01g00D00D
sh::Func::imageAtomicExchange_01g00D00E
sh::Func::imageAtomicExchange_01h00D00B
sh::Func::imageAtomicExchange_01h00D00D
sh::Func::imageAtomicExchange_01h00D00E
sh::Func::imageAtomicExchange_01i00D00B
sh::Func::imageAtomicExchange_01i00D00D
sh::Func::imageAtomicExchange_01i00D00E
sh::Func::imageAtomicMax_00z10D00D
sh::Func::imageAtomicMax_00z10D00E
sh::Func::imageAtomicMax_01A10D00D
sh::Func::imageAtomicMax_01A10D00E
sh::Func::imageAtomicMax_01B10D00D
sh::Func::imageAtomicMax_01B10D00E
sh::Func::imageAtomicMax_01C20D00D
sh::Func::imageAtomicMax_01C20D00E
sh::Func::imageAtomicMax_01D20D00D
sh::Func::imageAtomicMax_01D20D00E
sh::Func::imageAtomicMax_01E20D00D
sh::Func::imageAtomicMax_01E20D00E
sh::Func::imageAtomicMax_01F20D00D
sh::Func::imageAtomicMax_01F20D00E
sh::Func::imageAtomicMax_01G20D00D
sh::Func::imageAtomicMax_01G20D00E
sh::Func::imageAtomicMax_01H20D00D
sh::Func::imageAtomicMax_01H20D00E
sh::Func::imageAtomicMax_01I20D00D
sh::Func::imageAtomicMax_01I20D00E
sh::Func::imageAtomicMax_01J20D00D
sh::Func::imageAtomicMax_01J20D00E
sh::Func::imageAtomicMax_01K20D00D
sh::Func::imageAtomicMax_01K20D00E
sh::Func::imageAtomicMax_01L00D00D
sh::Func::imageAtomicMax_01L00D00E
sh::Func::imageAtomicMax_01M00D00D
sh::Func::imageAtomicMax_01M00D00E
sh::Func::imageAtomicMax_01N00D00D
sh::Func::imageAtomicMax_01N00D00E
sh::Func::imageAtomicMax_01O10D00D
sh::Func::imageAtomicMax_01O10D00E
sh::Func::imageAtomicMax_01P10D00D
sh::Func::imageAtomicMax_01P10D00E
sh::Func::imageAtomicMax_01Q10D00D
sh::Func::imageAtomicMax_01Q10D00E
sh::Func::imageAtomicMax_01R10D00D00D
sh::Func::imageAtomicMax_01R10D00D00E
sh::Func::imageAtomicMax_01S10D00D00D
sh::Func::imageAtomicMax_01S10D00D00E
sh::Func::imageAtomicMax_01T10D00D00D
sh::Func::imageAtomicMax_01T10D00D00E
sh::Func::imageAtomicMax_01U20D00D00D
sh::Func::imageAtomicMax_01U20D00D00E
sh::Func::imageAtomicMax_01V20D00D00D
sh::Func::imageAtomicMax_01V20D00D00E
sh::Func::imageAtomicMax_01W20D00D00D
sh::Func::imageAtomicMax_01W20D00D00E
sh::Func::imageAtomicMax_01X10D00D
sh::Func::imageAtomicMax_01X10D00E
sh::Func::imageAtomicMax_01Y10D00D
sh::Func::imageAtomicMax_01Y10D00E
sh::Func::imageAtomicMax_01Z10D00D
sh::Func::imageAtomicMax_01Z10D00E
sh::Func::imageAtomicMax_01a20D00D
sh::Func::imageAtomicMax_01a20D00E
sh::Func::imageAtomicMax_01b20D00D
sh::Func::imageAtomicMax_01b20D00E
sh::Func::imageAtomicMax_01c20D00D
sh::Func::imageAtomicMax_01c20D00E
sh::Func::imageAtomicMax_01g00D00D
sh::Func::imageAtomicMax_01g00D00E
sh::Func::imageAtomicMax_01h00D00D
sh::Func::imageAtomicMax_01h00D00E
sh::Func::imageAtomicMax_01i00D00D
sh::Func::imageAtomicMax_01i00D00E
sh::Func::imageAtomicMin_00z10D00D
sh::Func::imageAtomicMin_00z10D00E
sh::Func::imageAtomicMin_01A10D00D
sh::Func::imageAtomicMin_01A10D00E
sh::Func::imageAtomicMin_01B10D00D
sh::Func::imageAtomicMin_01B10D00E
sh::Func::imageAtomicMin_01C20D00D
sh::Func::imageAtomicMin_01C20D00E
sh::Func::imageAtomicMin_01D20D00D
sh::Func::imageAtomicMin_01D20D00E
sh::Func::imageAtomicMin_01E20D00D
sh::Func::imageAtomicMin_01E20D00E
sh::Func::imageAtomicMin_01F20D00D
sh::Func::imageAtomicMin_01F20D00E
sh::Func::imageAtomicMin_01G20D00D
sh::Func::imageAtomicMin_01G20D00E
sh::Func::imageAtomicMin_01H20D00D
sh::Func::imageAtomicMin_01H20D00E
sh::Func::imageAtomicMin_01I20D00D
sh::Func::imageAtomicMin_01I20D00E
sh::Func::imageAtomicMin_01J20D00D
sh::Func::imageAtomicMin_01J20D00E
sh::Func::imageAtomicMin_01K20D00D
sh::Func::imageAtomicMin_01K20D00E
sh::Func::imageAtomicMin_01L00D00D
sh::Func::imageAtomicMin_01L00D00E
sh::Func::imageAtomicMin_01M00D00D
sh::Func::imageAtomicMin_01M00D00E
sh::Func::imageAtomicMin_01N00D00D
sh::Func::imageAtomicMin_01N00D00E
sh::Func::imageAtomicMin_01O10D00D
sh::Func::imageAtomicMin_01O10D00E
sh::Func::imageAtomicMin_01P10D00D
sh::Func::imageAtomicMin_01P10D00E
sh::Func::imageAtomicMin_01Q10D00D
sh::Func::imageAtomicMin_01Q10D00E
sh::Func::imageAtomicMin_01R10D00D00D
sh::Func::imageAtomicMin_01R10D00D00E
sh::Func::imageAtomicMin_01S10D00D00D
sh::Func::imageAtomicMin_01S10D00D00E
sh::Func::imageAtomicMin_01T10D00D00D
sh::Func::imageAtomicMin_01T10D00D00E
sh::Func::imageAtomicMin_01U20D00D00D
sh::Func::imageAtomicMin_01U20D00D00E
sh::Func::imageAtomicMin_01V20D00D00D
sh::Func::imageAtomicMin_01V20D00D00E
sh::Func::imageAtomicMin_01W20D00D00D
sh::Func::imageAtomicMin_01W20D00D00E
sh::Func::imageAtomicMin_01X10D00D
sh::Func::imageAtomicMin_01X10D00E
sh::Func::imageAtomicMin_01Y10D00D
sh::Func::imageAtomicMin_01Y10D00E
sh::Func::imageAtomicMin_01Z10D00D
sh::Func::imageAtomicMin_01Z10D00E
sh::Func::imageAtomicMin_01a20D00D
sh::Func::imageAtomicMin_01a20D00E
sh::Func::imageAtomicMin_01b20D00D
sh::Func::imageAtomicMin_01b20D00E
sh::Func::imageAtomicMin_01c20D00D
sh::Func::imageAtomicMin_01c20D00E
sh::Func::imageAtomicMin_01g00D00D
sh::Func::imageAtomicMin_01g00D00E
sh::Func::imageAtomicMin_01h00D00D
sh::Func::imageAtomicMin_01h00D00E
sh::Func::imageAtomicMin_01i00D00D
sh::Func::imageAtomicMin_01i00D00E
sh::Func::imageAtomicOr_00z10D00D
sh::Func::imageAtomicOr_00z10D00E
sh::Func::imageAtomicOr_01A10D00D
sh::Func::imageAtomicOr_01A10D00E
sh::Func::imageAtomicOr_01B10D00D
sh::Func::imageAtomicOr_01B10D00E
sh::Func::imageAtomicOr_01C20D00D
sh::Func::imageAtomicOr_01C20D00E
sh::Func::imageAtomicOr_01D20D00D
sh::Func::imageAtomicOr_01D20D00E
sh::Func::imageAtomicOr_01E20D00D
sh::Func::imageAtomicOr_01E20D00E
sh::Func::imageAtomicOr_01F20D00D
sh::Func::imageAtomicOr_01F20D00E
sh::Func::imageAtomicOr_01G20D00D
sh::Func::imageAtomicOr_01G20D00E
sh::Func::imageAtomicOr_01H20D00D
sh::Func::imageAtomicOr_01H20D00E
sh::Func::imageAtomicOr_01I20D00D
sh::Func::imageAtomicOr_01I20D00E
sh::Func::imageAtomicOr_01J20D00D
sh::Func::imageAtomicOr_01J20D00E
sh::Func::imageAtomicOr_01K20D00D
sh::Func::imageAtomicOr_01K20D00E
sh::Func::imageAtomicOr_01L00D00D
sh::Func::imageAtomicOr_01L00D00E
sh::Func::imageAtomicOr_01M00D00D
sh::Func::imageAtomicOr_01M00D00E
sh::Func::imageAtomicOr_01N00D00D
sh::Func::imageAtomicOr_01N00D00E
sh::Func::imageAtomicOr_01O10D00D
sh::Func::imageAtomicOr_01O10D00E
sh::Func::imageAtomicOr_01P10D00D
sh::Func::imageAtomicOr_01P10D00E
sh::Func::imageAtomicOr_01Q10D00D
sh::Func::imageAtomicOr_01Q10D00E
sh::Func::imageAtomicOr_01R10D00D00D
sh::Func::imageAtomicOr_01R10D00D00E
sh::Func::imageAtomicOr_01S10D00D00D
sh::Func::imageAtomicOr_01S10D00D00E
sh::Func::imageAtomicOr_01T10D00D00D
sh::Func::imageAtomicOr_01T10D00D00E
sh::Func::imageAtomicOr_01U20D00D00D
sh::Func::imageAtomicOr_01U20D00D00E
sh::Func::imageAtomicOr_01V20D00D00D
sh::Func::imageAtomicOr_01V20D00D00E
sh::Func::imageAtomicOr_01W20D00D00D
sh::Func::imageAtomicOr_01W20D00D00E
sh::Func::imageAtomicOr_01X10D00D
sh::Func::imageAtomicOr_01X10D00E
sh::Func::imageAtomicOr_01Y10D00D
sh::Func::imageAtomicOr_01Y10D00E
sh::Func::imageAtomicOr_01Z10D00D
sh::Func::imageAtomicOr_01Z10D00E
sh::Func::imageAtomicOr_01a20D00D
sh::Func::imageAtomicOr_01a20D00E
sh::Func::imageAtomicOr_01b20D00D
sh::Func::imageAtomicOr_01b20D00E
sh::Func::imageAtomicOr_01c20D00D
sh::Func::imageAtomicOr_01c20D00E
sh::Func::imageAtomicOr_01g00D00D
sh::Func::imageAtomicOr_01g00D00E
sh::Func::imageAtomicOr_01h00D00D
sh::Func::imageAtomicOr_01h00D00E
sh::Func::imageAtomicOr_01i00D00D
sh::Func::imageAtomicOr_01i00D00E
sh::Func::imageAtomicXor_00z10D00D
sh::Func::imageAtomicXor_00z10D00E
sh::Func::imageAtomicXor_01A10D00D
sh::Func::imageAtomicXor_01A10D00E
sh::Func::imageAtomicXor_01B10D00D
sh::Func::imageAtomicXor_01B10D00E
sh::Func::imageAtomicXor_01C20D00D
sh::Func::imageAtomicXor_01C20D00E
sh::Func::imageAtomicXor_01D20D00D
sh::Func::imageAtomicXor_01D20D00E
sh::Func::imageAtomicXor_01E20D00D
sh::Func::imageAtomicXor_01E20D00E
sh::Func::imageAtomicXor_01F20D00D
sh::Func::imageAtomicXor_01F20D00E
sh::Func::imageAtomicXor_01G20D00D
sh::Func::imageAtomicXor_01G20D00E
sh::Func::imageAtomicXor_01H20D00D
sh::Func::imageAtomicXor_01H20D00E
sh::Func::imageAtomicXor_01I20D00D
sh::Func::imageAtomicXor_01I20D00E
sh::Func::imageAtomicXor_01J20D00D
sh::Func::imageAtomicXor_01J20D00E
sh::Func::imageAtomicXor_01K20D00D
sh::Func::imageAtomicXor_01K20D00E
sh::Func::imageAtomicXor_01L00D00D
sh::Func::imageAtomicXor_01L00D00E
sh::Func::imageAtomicXor_01M00D00D
sh::Func::imageAtomicXor_01M00D00E
sh::Func::imageAtomicXor_01N00D00D
sh::Func::imageAtomicXor_01N00D00E
sh::Func::imageAtomicXor_01O10D00D
sh::Func::imageAtomicXor_01O10D00E
sh::Func::imageAtomicXor_01P10D00D
sh::Func::imageAtomicXor_01P10D00E
sh::Func::imageAtomicXor_01Q10D00D
sh::Func::imageAtomicXor_01Q10D00E
sh::Func::imageAtomicXor_01R10D00D00D
sh::Func::imageAtomicXor_01R10D00D00E
sh::Func::imageAtomicXor_01S10D00D00D
sh::Func::imageAtomicXor_01S10D00D00E
sh::Func::imageAtomicXor_01T10D00D00D
sh::Func::imageAtomicXor_01T10D00D00E
sh::Func::imageAtomicXor_01U20D00D00D
sh::Func::imageAtomicXor_01U20D00D00E
sh::Func::imageAtomicXor_01V20D00D00D
sh::Func::imageAtomicXor_01V20D00D00E
sh::Func::imageAtomicXor_01W20D00D00D
sh::Func::imageAtomicXor_01W20D00D00E
sh::Func::imageAtomicXor_01X10D00D
sh::Func::imageAtomicXor_01X10D00E
sh::Func::imageAtomicXor_01Y10D00D
sh::Func::imageAtomicXor_01Y10D00E
sh::Func::imageAtomicXor_01Z10D00D
sh::Func::imageAtomicXor_01Z10D00E
sh::Func::imageAtomicXor_01a20D00D
sh::Func::imageAtomicXor_01a20D00E
sh::Func::imageAtomicXor_01b20D00D
sh::Func::imageAtomicXor_01b20D00E
sh::Func::imageAtomicXor_01c20D00D
sh::Func::imageAtomicXor_01c20D00E
sh::Func::imageAtomicXor_01g00D00D
sh::Func::imageAtomicXor_01g00D00E
sh::Func::imageAtomicXor_01h00D00D
sh::Func::imageAtomicXor_01h00D00E
sh::Func::imageAtomicXor_01i00D00D
sh::Func::imageAtomicXor_01i00D00E
sh::Func::imageLoad_00z10D
sh::Func::imageLoad_01A10D
sh::Func::imageLoad_01B10D
sh::Func::imageLoad_01C20D
sh::Func::imageLoad_01D20D
sh::Func::imageLoad_01E20D
sh::Func::imageLoad_01F20D
sh::Func::imageLoad_01G20D
sh::Func::imageLoad_01H20D
sh::Func::imageLoad_01I20D
sh::Func::imageLoad_01J20D
sh::Func::imageLoad_01K20D
sh::Func::imageLoad_01L00D
sh::Func::imageLoad_01M00D
sh::Func::imageLoad_01N00D
sh::Func::imageLoad_01O10D
sh::Func::imageLoad_01P10D
sh::Func::imageLoad_01Q10D
sh::Func::imageLoad_01R10D00D
sh::Func::imageLoad_01S10D00D
sh::Func::imageLoad_01T10D00D
sh::Func::imageLoad_01U20D00D
sh::Func::imageLoad_01V20D00D
sh::Func::imageLoad_01W20D00D
sh::Func::imageLoad_01X10D
sh::Func::imageLoad_01Y10D
sh::Func::imageLoad_01Z10D
sh::Func::imageLoad_01a20D
sh::Func::imageLoad_01b20D
sh::Func::imageLoad_01c20D
sh::Func::imageLoad_01g00D
sh::Func::imageLoad_01h00D
sh::Func::imageLoad_01i00D
sh::Func::imageSamples_01R
sh::Func::imageSamples_01S
sh::Func::imageSamples_01T
sh::Func::imageSamples_01U
sh::Func::imageSamples_01V
sh::Func::imageSamples_01W
sh::Func::imageSize_00z
sh::Func::imageSize_01A
sh::Func::imageSize_01B
sh::Func::imageSize_01C
sh::Func::imageSize_01D
sh::Func::imageSize_01E
sh::Func::imageSize_01F
sh::Func::imageSize_01G
sh::Func::imageSize_01H
sh::Func::imageSize_01I
sh::Func::imageSize_01J
sh::Func::imageSize_01K
sh::Func::imageSize_01L
sh::Func::imageSize_01M
sh::Func::imageSize_01N
sh::Func::imageSize_01O
sh::Func::imageSize_01P
sh::Func::imageSize_01Q
sh::Func::imageSize_01R
sh::Func::imageSize_01S
sh::Func::imageSize_01T
sh::Func::imageSize_01U
sh::Func::imageSize_01V
sh::Func::imageSize_01W
sh::Func::imageSize_01a
sh::Func::imageSize_01b
sh::Func::imageSize_01c
sh::Func::imageSize_01d
sh::Func::imageSize_01e
sh::Func::imageSize_01f
sh::Func::imageSize_01g
sh::Func::imageSize_01h
sh::Func::imageSize_01i
sh::Func::imageStore_00z10D30B
sh::Func::imageStore_01A10D30D
sh::Func::imageStore_01B10D30E
sh::Func::imageStore_01C20D30B
sh::Func::imageStore_01D20D30D
sh::Func::imageStore_01E20D30E
sh::Func::imageStore_01F20D30B
sh::Func::imageStore_01G20D30D
sh::Func::imageStore_01H20D30E
sh::Func::imageStore_01I20D30B
sh::Func::imageStore_01J20D30D
sh::Func::imageStore_01K20D30E
sh::Func::imageStore_01L00D30B
sh::Func::imageStore_01M00D30D
sh::Func::imageStore_01N00D30E
sh::Func::imageStore_01O10D30B
sh::Func::imageStore_01P10D30D
sh::Func::imageStore_01Q10D30E
sh::Func::imageStore_01R10D00D30B
sh::Func::imageStore_01S10D00D30D
sh::Func::imageStore_01T10D00D30E
sh::Func::imageStore_01U20D00D30B
sh::Func::imageStore_01V20D00D30D
sh::Func::imageStore_01W20D00D30E
sh::Func::imageStore_01X10D30B
sh::Func::imageStore_01Y10D30D
sh::Func::imageStore_01Z10D30E
sh::Func::imageStore_01a20D30B
sh::Func::imageStore_01b20D30D
sh::Func::imageStore_01c20D30E
sh::Func::imageStore_01g00D30B
sh::Func::imageStore_01h00D30D
sh::Func::imageStore_01i00D30E
sh::Func::imulExtended_00D00D00D00D
sh::Func::imulExtended_10D10D10D10D
sh::Func::imulExtended_20D20D20D20D
sh::Func::imulExtended_30D30D30D30D
sh::Func::intBitsToFloat_00D
sh::Func::intBitsToFloat_10D
sh::Func::intBitsToFloat_20D
sh::Func::intBitsToFloat_30D
sh::Func::interpolateAtCentroid_00B
sh::Func::interpolateAtCentroid_10B
sh::Func::interpolateAtCentroid_20B
sh::Func::interpolateAtCentroid_30B
sh::Func::interpolateAtOffset_00B10B
sh::Func::interpolateAtOffset_10B10B
sh::Func::interpolateAtOffset_20B10B
sh::Func::interpolateAtOffset_30B10B
sh::Func::interpolateAtSample_00B00D
sh::Func::interpolateAtSample_10B00D
sh::Func::interpolateAtSample_20B00D
sh::Func::interpolateAtSample_30B00D
sh::Func::inverse_50B
sh::Func::inverse_A0B
sh::Func::inverse_F0B
sh::Func::inversesqrt_00B
sh::Func::inversesqrt_00C
sh::Func::inversesqrt_10B
sh::Func::inversesqrt_10C
sh::Func::inversesqrt_20B
sh::Func::inversesqrt_20C
sh::Func::inversesqrt_30B
sh::Func::inversesqrt_30C
sh::Func::isinf_00B
sh::Func::isinf_00C
sh::Func::isinf_10B
sh::Func::isinf_10C
sh::Func::isinf_20B
sh::Func::isinf_20C
sh::Func::isinf_30B
sh::Func::isinf_30C
sh::Func::isnan_00B
sh::Func::isnan_00C
sh::Func::isnan_10B
sh::Func::isnan_10C
sh::Func::isnan_20B
sh::Func::isnan_20C
sh::Func::isnan_30B
sh::Func::isnan_30C
sh::Func::ldexp_00B00D
sh::Func::ldexp_00C00D
sh::Func::ldexp_10B10D
sh::Func::ldexp_10C10D
sh::Func::ldexp_20B20D
sh::Func::ldexp_20C20D
sh::Func::ldexp_30B30D
sh::Func::ldexp_30C30D
sh::Func::length_00B
sh::Func::length_00C
sh::Func::length_10B
sh::Func::length_10C
sh::Func::length_20B
sh::Func::length_20C
sh::Func::length_30B
sh::Func::length_30C
sh::Func::lessThanEqual_10B10B
sh::Func::lessThanEqual_10D10D
sh::Func::lessThanEqual_10E10E
sh::Func::lessThanEqual_20B20B
sh::Func::lessThanEqual_20D20D
sh::Func::lessThanEqual_20E20E
sh::Func::lessThanEqual_30B30B
sh::Func::lessThanEqual_30D30D
sh::Func::lessThanEqual_30E30E
sh::Func::lessThan_10B10B
sh::Func::lessThan_10D10D
sh::Func::lessThan_10E10E
sh::Func::lessThan_20B20B
sh::Func::lessThan_20D20D
sh::Func::lessThan_20E20E
sh::Func::lessThan_30B30B
sh::Func::lessThan_30D30D
sh::Func::lessThan_30E30E
sh::Func::log2_00B
sh::Func::log2_10B
sh::Func::log2_20B
sh::Func::log2_30B
sh::Func::log_00B
sh::Func::log_10B
sh::Func::log_20B
sh::Func::log_30B
sh::Func::matrixCompMult_50B50B
sh::Func::matrixCompMult_60B60B
sh::Func::matrixCompMult_70B70B
sh::Func::matrixCompMult_90B90B
sh::Func::matrixCompMult_A0BA0B
sh::Func::matrixCompMult_B0BB0B
sh::Func::matrixCompMult_D0BD0B
sh::Func::matrixCompMult_E0BE0B
sh::Func::matrixCompMult_F0BF0B
sh::Func::max_00B00B
sh::Func::max_00C00C
sh::Func::max_00D00D
sh::Func::max_00E00E
sh::Func::max_10B00B
sh::Func::max_10B10B
sh::Func::max_10C00C
sh::Func::max_10C10C
sh::Func::max_10D00D
sh::Func::max_10D10D
sh::Func::max_10E00E
sh::Func::max_10E10E
sh::Func::max_20B00B
sh::Func::max_20B20B
sh::Func::max_20C00C
sh::Func::max_20C20C
sh::Func::max_20D00D
sh::Func::max_20D20D
sh::Func::max_20E00E
sh::Func::max_20E20E
sh::Func::max_30B00B
sh::Func::max_30B30B
sh::Func::max_30C00C
sh::Func::max_30C30C
sh::Func::max_30D00D
sh::Func::max_30D30D
sh::Func::max_30E00E
sh::Func::max_30E30E
sh::Func::memoryBarrierAtomicCounter_
sh::Func::memoryBarrierBuffer_
sh::Func::memoryBarrierImage_
sh::Func::memoryBarrierShared_
sh::Func::memoryBarrier_
sh::Func::min_00B00B
sh::Func::min_00C00C
sh::Func::min_00D00D
sh::Func::min_00E00E
sh::Func::min_10B00B
sh::Func::min_10B10B
sh::Func::min_10C00C
sh::Func::min_10C10C
sh::Func::min_10D00D
sh::Func::min_10D10D
sh::Func::min_10E00E
sh::Func::min_10E10E
sh::Func::min_20B00B
sh::Func::min_20B20B
sh::Func::min_20C00C
sh::Func::min_20C20C
sh::Func::min_20D00D
sh::Func::min_20D20D
sh::Func::min_20E00E
sh::Func::min_20E20E
sh::Func::min_30B00B
sh::Func::min_30B30B
sh::Func::min_30C00C
sh::Func::min_30C30C
sh::Func::min_30D00D
sh::Func::min_30D30D
sh::Func::min_30E00E
sh::Func::min_30E30E
sh::Func::mix_00B00B00B
sh::Func::mix_00B00B00F
sh::Func::mix_00C00C00C
sh::Func::mix_00C00C00F
sh::Func::mix_00D00D00F
sh::Func::mix_00E00E00F
sh::Func::mix_00F00F00F
sh::Func::mix_10B10B00B
sh::Func::mix_10B10B10B
sh::Func::mix_10B10B10F
sh::Func::mix_10C10C00C
sh::Func::mix_10C10C10C
sh::Func::mix_10C10C10F
sh::Func::mix_10D10D10F
sh::Func::mix_10E10E10F
sh::Func::mix_10F10F10F
sh::Func::mix_20B20B00B
sh::Func::mix_20B20B20B
sh::Func::mix_20B20B20F
sh::Func::mix_20C20C00C
sh::Func::mix_20C20C20C
sh::Func::mix_20C20C20F
sh::Func::mix_20D20D20F
sh::Func::mix_20E20E20F
sh::Func::mix_20F20F20F
sh::Func::mix_30B30B00B
sh::Func::mix_30B30B30B
sh::Func::mix_30B30B30F
sh::Func::mix_30C30C00C
sh::Func::mix_30C30C30C
sh::Func::mix_30C30C30F
sh::Func::mix_30D30D30F
sh::Func::mix_30E30E30F
sh::Func::mix_30F30F30F
sh::Func::mod_00B00B
sh::Func::mod_00C00C
sh::Func::mod_10B00B
sh::Func::mod_10B10B
sh::Func::mod_10C00C
sh::Func::mod_10C10C
sh::Func::mod_20B00B
sh::Func::mod_20B20B
sh::Func::mod_20C00C
sh::Func::mod_20C20C
sh::Func::mod_30B00B
sh::Func::mod_30B30B
sh::Func::mod_30C00C
sh::Func::mod_30C30C
sh::Func::modf_00B00B
sh::Func::modf_00C00C
sh::Func::modf_10B10B
sh::Func::modf_10C10C
sh::Func::modf_20B20B
sh::Func::modf_20C20C
sh::Func::modf_30B30B
sh::Func::modf_30C30C
sh::Func::noise1_00B
sh::Func::noise1_10B
sh::Func::noise1_20B
sh::Func::noise1_30B
sh::Func::noise2_00B
sh::Func::noise2_10B
sh::Func::noise2_20B
sh::Func::noise2_30B
sh::Func::noise3_00B
sh::Func::noise3_10B
sh::Func::noise3_20B
sh::Func::noise3_30B
sh::Func::noise4_00B
sh::Func::noise4_10B
sh::Func::noise4_20B
sh::Func::noise4_30B
sh::Func::normalize_00B
sh::Func::normalize_00C
sh::Func::normalize_10B
sh::Func::normalize_10C
sh::Func::normalize_20B
sh::Func::normalize_20C
sh::Func::normalize_30B
sh::Func::normalize_30C
sh::Func::notEqual_10B10B
sh::Func::notEqual_10D10D
sh::Func::notEqual_10E10E
sh::Func::notEqual_10F10F
sh::Func::notEqual_20B20B
sh::Func::notEqual_20D20D
sh::Func::notEqual_20E20E
sh::Func::notEqual_20F20F
sh::Func::notEqual_30B30B
sh::Func::notEqual_30D30D
sh::Func::notEqual_30E30E
sh::Func::notEqual_30F30F
sh::Func::notFunc_10F
sh::Func::notFunc_20F
sh::Func::notFunc_30F
sh::Func::outerProduct_10B10B
sh::Func::outerProduct_10B20B
sh::Func::outerProduct_10B30B
sh::Func::outerProduct_20B10B
sh::Func::outerProduct_20B20B
sh::Func::outerProduct_20B30B
sh::Func::outerProduct_30B10B
sh::Func::outerProduct_30B20B
sh::Func::outerProduct_30B30B
sh::Func::packDouble2x32_10E
sh::Func::packHalf2x16_10B
sh::Func::packSnorm2x16_10B
sh::Func::packSnorm4x8_30B
sh::Func::packUnorm2x16_10B
sh::Func::packUnorm4x8_30B
sh::Func::pow_00B00B
sh::Func::pow_10B10B
sh::Func::pow_20B20B
sh::Func::pow_30B30B
sh::Func::radians_00B
sh::Func::radians_10B
sh::Func::radians_20B
sh::Func::radians_30B
sh::Func::reflect_00B00B
sh::Func::reflect_00C00C
sh::Func::reflect_10B10B
sh::Func::reflect_10C10C
sh::Func::reflect_20B20B
sh::Func::reflect_20C20C
sh::Func::reflect_30B30B
sh::Func::reflect_30C30C
sh::Func::refract_00B00B00B
sh::Func::refract_00C00C00B
sh::Func::refract_10B10B00B
sh::Func::refract_10C10C00B
sh::Func::refract_20B20B00B
sh::Func::refract_20C20C00B
sh::Func::refract_30B30B00B
sh::Func::refract_30C30C00B
sh::Func::rgb_2_yuv_20B00H
sh::Func::roundEven_00B
sh::Func::roundEven_00C
sh::Func::roundEven_10B
sh::Func::roundEven_10C
sh::Func::roundEven_20B
sh::Func::roundEven_20C
sh::Func::roundEven_30B
sh::Func::roundEven_30C
sh::Func::round_00B
sh::Func::round_00C
sh::Func::round_10B
sh::Func::round_10C
sh::Func::round_20B
sh::Func::round_20C
sh::Func::round_30B
sh::Func::round_30C
sh::Func::shadow1DLod_00m20B00B
sh::Func::shadow1DProjLod_00m30B00B
sh::Func::shadow1DProj_00m30B
sh::Func::shadow1DProj_00m30B00B
sh::Func::shadow1D_00m20B
sh::Func::shadow1D_00m20B00B
sh::Func::shadow2DLod_00d20B00B
sh::Func::shadow2DProjLod_00d30B00B
sh::Func::shadow2DProj_00d30B
sh::Func::shadow2DProj_00d30B00B
sh::Func::shadow2D_00d20B
sh::Func::shadow2D_00d20B00B
sh::Func::sign_00B
sh::Func::sign_00C
sh::Func::sign_00D
sh::Func::sign_10B
sh::Func::sign_10C
sh::Func::sign_10D
sh::Func::sign_20B
sh::Func::sign_20C
sh::Func::sign_20D
sh::Func::sign_30B
sh::Func::sign_30C
sh::Func::sign_30D
sh::Func::sin_00B
sh::Func::sin_10B
sh::Func::sin_20B
sh::Func::sin_30B
sh::Func::sinh_00B
sh::Func::sinh_10B
sh::Func::sinh_20B
sh::Func::sinh_30B
sh::Func::smoothstep_00B00B00B
sh::Func::smoothstep_00B00B10B
sh::Func::smoothstep_00B00B20B
sh::Func::smoothstep_00B00B30B
sh::Func::smoothstep_00C00C00C
sh::Func::smoothstep_00C00C10C
sh::Func::smoothstep_00C00C20C
sh::Func::smoothstep_00C00C30C
sh::Func::smoothstep_10B10B10B
sh::Func::smoothstep_10C10C10C
sh::Func::smoothstep_20B20B20B
sh::Func::smoothstep_20C20C20C
sh::Func::smoothstep_30B30B30B
sh::Func::smoothstep_30C30C30C
sh::Func::sqrt_00B
sh::Func::sqrt_00C
sh::Func::sqrt_10B
sh::Func::sqrt_10C
sh::Func::sqrt_20B
sh::Func::sqrt_20C
sh::Func::sqrt_30B
sh::Func::sqrt_30C
sh::Func::step_00B00B
sh::Func::step_00B10B
sh::Func::step_00B20B
sh::Func::step_00B30B
sh::Func::step_00C00C
sh::Func::step_00C10C
sh::Func::step_00C20C
sh::Func::step_00C30C
sh::Func::step_10B10B
sh::Func::step_10C10C
sh::Func::step_20B20B
sh::Func::step_20C20C
sh::Func::step_30B30B
sh::Func::step_30C30C
sh::Func::subpassLoad_01j
sh::Func::subpassLoad_01k
sh::Func::subpassLoad_01l
sh::Func::subpassLoad_01m00D
sh::Func::subpassLoad_01n00D
sh::Func::subpassLoad_01o00D
sh::Func::tan_00B
sh::Func::tan_10B
sh::Func::tan_20B
sh::Func::tan_30B
sh::Func::tanh_00B
sh::Func::tanh_10B
sh::Func::tanh_20B
sh::Func::tanh_30B
sh::Func::texelFetchExt_00P10D00D
sh::Func::texelFetchExt_00Q20D00D
sh::Func::texelFetchExt_00V10D00D
sh::Func::texelFetchExt_00W20D00D
sh::Func::texelFetchExt_00b10D00D
sh::Func::texelFetchExt_00c20D00D
sh::Func::texelFetchOffset_00I10D00D10D
sh::Func::texelFetchOffset_00J20D00D20D
sh::Func::texelFetchOffset_00L20D00D10D
sh::Func::texelFetchOffset_00O10D10D
sh::Func::texelFetchOffset_00R10D00D10D
sh::Func::texelFetchOffset_00S20D00D20D
sh::Func::texelFetchOffset_00U20D00D10D
sh::Func::texelFetchOffset_00X10D00D10D
sh::Func::texelFetchOffset_00Y20D00D20D
sh::Func::texelFetchOffset_00a20D00D10D
sh::Func::texelFetchOffset_00g00D00D00D
sh::Func::texelFetchOffset_00h10D00D00D
sh::Func::texelFetchOffset_00o00D00D00D
sh::Func::texelFetchOffset_00p10D00D00D
sh::Func::texelFetchOffset_00q10D10D
sh::Func::texelFetchOffset_00t00D00D00D
sh::Func::texelFetchOffset_00u10D00D00D
sh::Func::texelFetchOffset_00v10D10D
sh::Func::texelFetch_00I10D00D
sh::Func::texelFetch_00J20D00D
sh::Func::texelFetch_00L20D00D
sh::Func::texelFetch_00M10D00D
sh::Func::texelFetch_00N10D00D
sh::Func::texelFetch_00O10D
sh::Func::texelFetch_00P10D00D
sh::Func::texelFetch_00Q20D00D
sh::Func::texelFetch_00R10D00D
sh::Func::texelFetch_00S20D00D
sh::Func::texelFetch_00U20D00D
sh::Func::texelFetch_00V10D00D
sh::Func::texelFetch_00W20D00D
sh::Func::texelFetch_00X10D00D
sh::Func::texelFetch_00Y20D00D
sh::Func::texelFetch_00a20D00D
sh::Func::texelFetch_00b10D00D
sh::Func::texelFetch_00c20D00D
sh::Func::texelFetch_00g00D00D
sh::Func::texelFetch_00h10D00D
sh::Func::texelFetch_00j00D
sh::Func::texelFetch_00o00D00D
sh::Func::texelFetch_00p10D00D
sh::Func::texelFetch_00q10D
sh::Func::texelFetch_00r00D
sh::Func::texelFetch_00t00D00D
sh::Func::texelFetch_00u10D00D
sh::Func::texelFetch_00v10D
sh::Func::texelFetch_00w00D
sh::Func::texture1DLod_00g00B00B
sh::Func::texture1DProjLod_00g10B00B
sh::Func::texture1DProjLod_00g30B00B
sh::Func::texture1DProj_00g10B
sh::Func::texture1DProj_00g10B00B
sh::Func::texture1DProj_00g30B
sh::Func::texture1DProj_00g30B00B
sh::Func::texture1D_00g00B
sh::Func::texture1D_00g00B00B
sh::Func::texture2DGradEXT_00I10B10B10B
sh::Func::texture2DLodEXT_00I10B00B
sh::Func::texture2DLod_00I10B00B
sh::Func::texture2DProjGradEXT_00I20B10B10B
sh::Func::texture2DProjGradEXT_00I30B10B10B
sh::Func::texture2DProjLodEXT_00I20B00B
sh::Func::texture2DProjLodEXT_00I30B00B
sh::Func::texture2DProjLod_00I20B00B
sh::Func::texture2DProjLod_00I30B00B
sh::Func::texture2DProj_00I20B
sh::Func::texture2DProj_00I20B00B
sh::Func::texture2DProj_00I30B
sh::Func::texture2DProj_00I30B00B
sh::Func::texture2DProj_00M20B
sh::Func::texture2DProj_00M30B
sh::Func::texture2DRectProj_00O20B
sh::Func::texture2DRectProj_00O30B
sh::Func::texture2DRect_00O10B
sh::Func::texture2D_00I10B
sh::Func::texture2D_00I10B00B
sh::Func::texture2D_00M10B
sh::Func::texture3DLod_00J20B00B
sh::Func::texture3DProjLod_00J30B00B
sh::Func::texture3DProj_00J30B
sh::Func::texture3DProj_00J30B00B
sh::Func::texture3D_00J20B
sh::Func::texture3D_00J20B00B
sh::Func::textureCubeGradEXT_00K20B20B20B
sh::Func::textureCubeLodEXT_00K20B00B
sh::Func::textureCubeLod_00K20B00B
sh::Func::textureCube_00K20B
sh::Func::textureCube_00K20B00B
sh::Func::textureGatherOffset_00I10B10D
sh::Func::textureGatherOffset_00I10B10D00D
sh::Func::textureGatherOffset_00L20B10D
sh::Func::textureGatherOffset_00L20B10D00D
sh::Func::textureGatherOffset_00O10B10D
sh::Func::textureGatherOffset_00O10B10D00D
sh::Func::textureGatherOffset_00R10B10D
sh::Func::textureGatherOffset_00R10B10D00D
sh::Func::textureGatherOffset_00U20B10D
sh::Func::textureGatherOffset_00U20B10D00D
sh::Func::textureGatherOffset_00X10B10D
sh::Func::textureGatherOffset_00X10B10D00D
sh::Func::textureGatherOffset_00a20B10D
sh::Func::textureGatherOffset_00a20B10D00D
sh::Func::textureGatherOffset_00d10B00B10D
sh::Func::textureGatherOffset_00f20B00B10D
sh::Func::textureGatherOffset_00n10B00B10D
sh::Func::textureGatherOffset_00q10B10D
sh::Func::textureGatherOffset_00q10B10D00D
sh::Func::textureGatherOffset_00v10B10D
sh::Func::textureGatherOffset_00v10B10D00D
sh::Func::textureGatherOffsetsExt_00I10B10Dx4
sh::Func::textureGatherOffsetsExt_00I10B10Dx400D
sh::Func::textureGatherOffsetsExt_00L20B10Dx4
sh::Func::textureGatherOffsetsExt_00L20B10Dx400D
sh::Func::textureGatherOffsetsExt_00R10B10Dx4
sh::Func::textureGatherOffsetsExt_00R10B10Dx400D
sh::Func::textureGatherOffsetsExt_00U20B10Dx4
sh::Func::textureGatherOffsetsExt_00U20B10Dx400D
sh::Func::textureGatherOffsetsExt_00X10B10Dx4
sh::Func::textureGatherOffsetsExt_00X10B10Dx400D
sh::Func::textureGatherOffsetsExt_00a20B10Dx4
sh::Func::textureGatherOffsetsExt_00a20B10Dx400D
sh::Func::textureGatherOffsetsExt_00d10B00B10Dx4
sh::Func::textureGatherOffsetsExt_00f20B00B10Dx4
sh::Func::textureGatherOffsets_00I10B10Dx4
sh::Func::textureGatherOffsets_00I10B10Dx400D
sh::Func::textureGatherOffsets_00L20B10Dx4
sh::Func::textureGatherOffsets_00L20B10Dx400D
sh::Func::textureGatherOffsets_00O10B10Dx4
sh::Func::textureGatherOffsets_00O10B10Dx400D
sh::Func::textureGatherOffsets_00R10B10Dx4
sh::Func::textureGatherOffsets_00R10B10Dx400D
sh::Func::textureGatherOffsets_00U20B10Dx4
sh::Func::textureGatherOffsets_00U20B10Dx400D
sh::Func::textureGatherOffsets_00X10B10Dx4
sh::Func::textureGatherOffsets_00X10B10Dx400D
sh::Func::textureGatherOffsets_00a20B10Dx4
sh::Func::textureGatherOffsets_00a20B10Dx400D
sh::Func::textureGatherOffsets_00d10B00B10Dx4
sh::Func::textureGatherOffsets_00f20B00B10Dx4
sh::Func::textureGatherOffsets_00n10B00B10Dx4
sh::Func::textureGatherOffsets_00q10B10Dx4
sh::Func::textureGatherOffsets_00q10B10Dx400D
sh::Func::textureGatherOffsets_00v10B10Dx4
sh::Func::textureGatherOffsets_00v10B10Dx400D
sh::Func::textureGather_00I10B
sh::Func::textureGather_00I10B00D
sh::Func::textureGather_00K20B
sh::Func::textureGather_00K20B00D
sh::Func::textureGather_00L20B
sh::Func::textureGather_00L20B00D
sh::Func::textureGather_00O20B
sh::Func::textureGather_00O20B00D
sh::Func::textureGather_00R10B
sh::Func::textureGather_00R10B00D
sh::Func::textureGather_00T20B
sh::Func::textureGather_00T20B00D
sh::Func::textureGather_00U20B
sh::Func::textureGather_00U20B00D
sh::Func::textureGather_00X10B
sh::Func::textureGather_00X10B00D
sh::Func::textureGather_00Z20B
sh::Func::textureGather_00Z20B00D
sh::Func::textureGather_00a20B
sh::Func::textureGather_00a20B00D
sh::Func::textureGather_00d10B
sh::Func::textureGather_00d10B00B
sh::Func::textureGather_00e20B
sh::Func::textureGather_00e20B00B
sh::Func::textureGather_00f20B
sh::Func::textureGather_00f20B00B
sh::Func::textureGather_00k30B
sh::Func::textureGather_00k30B00D
sh::Func::textureGather_00l30B00B
sh::Func::textureGather_00n10B00B
sh::Func::textureGather_00q20B
sh::Func::textureGather_00q20B00D
sh::Func::textureGather_00s30B
sh::Func::textureGather_00s30B00D
sh::Func::textureGather_00v20B
sh::Func::textureGather_00v20B00D
sh::Func::textureGather_00x30B
sh::Func::textureGather_00x30B00D
sh::Func::textureGradOffset_00I10B10B10B10D
sh::Func::textureGradOffset_00J20B20B20B20D
sh::Func::textureGradOffset_00L20B10B10B10D
sh::Func::textureGradOffset_00O10B10B10B10D
sh::Func::textureGradOffset_00R10B10B10B10D
sh::Func::textureGradOffset_00S20B20B20B20D
sh::Func::textureGradOffset_00U20B10B10B10D
sh::Func::textureGradOffset_00X10B10B10B10D
sh::Func::textureGradOffset_00Y20B20B20B20D
sh::Func::textureGradOffset_00a20B10B10B10D
sh::Func::textureGradOffset_00d20B10B10B10D
sh::Func::textureGradOffset_00f30B10B10B10D
sh::Func::textureGradOffset_00g00B00B00B00D
sh::Func::textureGradOffset_00h10B00B00B00D
sh::Func::textureGradOffset_00i20B00B00B00D
sh::Func::textureGradOffset_00m20B00B00B00D
sh::Func::textureGradOffset_00n20B10B10B10D
sh::Func::textureGradOffset_00o00B00B00B00D
sh::Func::textureGradOffset_00p10B00B00B00D
sh::Func::textureGradOffset_00q10B10B10B10D
sh::Func::textureGradOffset_00t00B00B00B00D
sh::Func::textureGradOffset_00u10B00B00B00D
sh::Func::textureGradOffset_00v10B10B10B10D
sh::Func::textureGrad_00I00B00B00B
sh::Func::textureGrad_00I10B10B10B
sh::Func::textureGrad_00J20B20B20B
sh::Func::textureGrad_00K20B20B20B
sh::Func::textureGrad_00L20B10B10B
sh::Func::textureGrad_00O10B10B10B
sh::Func::textureGrad_00R00B00B00B
sh::Func::textureGrad_00R10B10B10B
sh::Func::textureGrad_00S20B20B20B
sh::Func::textureGrad_00T20B20B20B
sh::Func::textureGrad_00U20B10B10B
sh::Func::textureGrad_00X00B00B00B
sh::Func::textureGrad_00X10B10B10B
sh::Func::textureGrad_00Y20B20B20B
sh::Func::textureGrad_00Z20B20B20B
sh::Func::textureGrad_00a20B10B10B
sh::Func::textureGrad_00d20B10B10B
sh::Func::textureGrad_00e30B20B20B
sh::Func::textureGrad_00f30B10B10B
sh::Func::textureGrad_00h10B00B00B
sh::Func::textureGrad_00i20B00B00B
sh::Func::textureGrad_00k30B20B20B
sh::Func::textureGrad_00m20B00B00B
sh::Func::textureGrad_00n20B10B10B
sh::Func::textureGrad_00p10B00B00B
sh::Func::textureGrad_00q10B10B10B
sh::Func::textureGrad_00s30B20B20B
sh::Func::textureGrad_00u10B00B00B
sh::Func::textureGrad_00v10B10B10B
sh::Func::textureGrad_00x30B20B20B
sh::Func::textureLodOffset_00I10B00B10D
sh::Func::textureLodOffset_00J20B00B20D
sh::Func::textureLodOffset_00L20B00B10D
sh::Func::textureLodOffset_00R10B00B10D
sh::Func::textureLodOffset_00S20B00B20D
sh::Func::textureLodOffset_00U20B00B10D
sh::Func::textureLodOffset_00X10B00B10D
sh::Func::textureLodOffset_00Y20B00B20D
sh::Func::textureLodOffset_00a20B00B10D
sh::Func::textureLodOffset_00d20B00B10D
sh::Func::textureLodOffset_00g00B00B00D
sh::Func::textureLodOffset_00h10B00B00D
sh::Func::textureLodOffset_00i20B00B00D
sh::Func::textureLodOffset_00m20B00B00D
sh::Func::textureLodOffset_00o00B00B00D
sh::Func::textureLodOffset_00p10B00B00D
sh::Func::textureLodOffset_00t00B00B00D
sh::Func::textureLodOffset_00u10B00B00D
sh::Func::textureLod_00I10B00B
sh::Func::textureLod_00J20B00B
sh::Func::textureLod_00K20B00B
sh::Func::textureLod_00L20B00B
sh::Func::textureLod_00R10B00B
sh::Func::textureLod_00S20B00B
sh::Func::textureLod_00T20B00B
sh::Func::textureLod_00U20B00B
sh::Func::textureLod_00X10B00B
sh::Func::textureLod_00Y20B00B
sh::Func::textureLod_00Z20B00B
sh::Func::textureLod_00a20B00B
sh::Func::textureLod_00d20B00B
sh::Func::textureLod_00g00B00B
sh::Func::textureLod_00h10B00B
sh::Func::textureLod_00i20B00B
sh::Func::textureLod_00k30B00B
sh::Func::textureLod_00m20B00B
sh::Func::textureLod_00o00B00B
sh::Func::textureLod_00p10B00B
sh::Func::textureLod_00s30B00B
sh::Func::textureLod_00t00B00B
sh::Func::textureLod_00u10B00B
sh::Func::textureLod_00x30B00B
sh::Func::textureOffset_00I10B10D
sh::Func::textureOffset_00I10B10D00B
sh::Func::textureOffset_00J20B20D
sh::Func::textureOffset_00J20B20D00B
sh::Func::textureOffset_00L20B10D
sh::Func::textureOffset_00L20B10D00B
sh::Func::textureOffset_00O10B10D
sh::Func::textureOffset_00R10B10D
sh::Func::textureOffset_00R10B10D00B
sh::Func::textureOffset_00S20B20D
sh::Func::textureOffset_00S20B20D00B
sh::Func::textureOffset_00U20B10D
sh::Func::textureOffset_00U20B10D00B
sh::Func::textureOffset_00X10B10D
sh::Func::textureOffset_00X10B10D00B
sh::Func::textureOffset_00Y20B20D
sh::Func::textureOffset_00Y20B20D00B
sh::Func::textureOffset_00a20B10D
sh::Func::textureOffset_00a20B10D00B
sh::Func::textureOffset_00d20B10D
sh::Func::textureOffset_00d20B10D00B
sh::Func::textureOffset_00f30B10D
sh::Func::textureOffset_00g00B00D
sh::Func::textureOffset_00g00B00D00B
sh::Func::textureOffset_00h10B00D
sh::Func::textureOffset_00h10B00D00B
sh::Func::textureOffset_00i20B00D
sh::Func::textureOffset_00i20B00D00B
sh::Func::textureOffset_00m20B00D
sh::Func::textureOffset_00m20B00D00B
sh::Func::textureOffset_00n20B10D
sh::Func::textureOffset_00o00B00D
sh::Func::textureOffset_00o00B00D00B
sh::Func::textureOffset_00p10B00D
sh::Func::textureOffset_00p10B00D00B
sh::Func::textureOffset_00q10B10D
sh::Func::textureOffset_00t00B00D
sh::Func::textureOffset_00t00B00D00B
sh::Func::textureOffset_00u10B00D
sh::Func::textureOffset_00u10B00D00B
sh::Func::textureOffset_00v10B10D
sh::Func::textureProjGradOffset_00I20B10B10B10D
sh::Func::textureProjGradOffset_00I30B10B10B10D
sh::Func::textureProjGradOffset_00J30B20B20B20D
sh::Func::textureProjGradOffset_00O20B10B10B10D
sh::Func::textureProjGradOffset_00O30B10B10B10D
sh::Func::textureProjGradOffset_00R20B10B10B10D
sh::Func::textureProjGradOffset_00R30B10B10B10D
sh::Func::textureProjGradOffset_00S30B20B20B20D
sh::Func::textureProjGradOffset_00X20B10B10B10D
sh::Func::textureProjGradOffset_00X30B10B10B10D
sh::Func::textureProjGradOffset_00Y30B20B20B20D
sh::Func::textureProjGradOffset_00d30B10B10B10D
sh::Func::textureProjGradOffset_00g10B00B00B00D
sh::Func::textureProjGradOffset_00g30B00B00B00D
sh::Func::textureProjGradOffset_00m30B00B00B00D
sh::Func::textureProjGradOffset_00n30B10B10B10D
sh::Func::textureProjGradOffset_00o10B00B00B00D
sh::Func::textureProjGradOffset_00o30B00B00B00D
sh::Func::textureProjGradOffset_00q20B10B10B10D
sh::Func::textureProjGradOffset_00q30B10B10B10D
sh::Func::textureProjGradOffset_00t10B00B00B00D
sh::Func::textureProjGradOffset_00t30B00B00B00D
sh::Func::textureProjGradOffset_00v20B10B10B10D
sh::Func::textureProjGradOffset_00v30B10B10B10D
sh::Func::textureProjGrad_00I20B10B10B
sh::Func::textureProjGrad_00I30B10B10B
sh::Func::textureProjGrad_00J30B20B20B
sh::Func::textureProjGrad_00O20B10B10B
sh::Func::textureProjGrad_00O30B10B10B
sh::Func::textureProjGrad_00R20B10B10B
sh::Func::textureProjGrad_00R30B10B10B
sh::Func::textureProjGrad_00S30B20B20B
sh::Func::textureProjGrad_00X20B10B10B
sh::Func::textureProjGrad_00X30B10B10B
sh::Func::textureProjGrad_00Y30B20B20B
sh::Func::textureProjGrad_00d30B10B10B
sh::Func::textureProjGrad_00g10B00B00B
sh::Func::textureProjGrad_00g30B00B00B
sh::Func::textureProjGrad_00m30B00B00B
sh::Func::textureProjGrad_00n30B10B10B
sh::Func::textureProjGrad_00o10B00B00B
sh::Func::textureProjGrad_00o30B00B00B
sh::Func::textureProjGrad_00q20B10B10B
sh::Func::textureProjGrad_00q30B10B10B
sh::Func::textureProjGrad_00t10B00B00B
sh::Func::textureProjGrad_00t30B00B00B
sh::Func::textureProjGrad_00v20B10B10B
sh::Func::textureProjGrad_00v30B10B10B
sh::Func::textureProjLodOffset_00I20B00B10D
sh::Func::textureProjLodOffset_00I30B00B10D
sh::Func::textureProjLodOffset_00J30B00B20D
sh::Func::textureProjLodOffset_00R20B00B10D
sh::Func::textureProjLodOffset_00R30B00B10D
sh::Func::textureProjLodOffset_00S30B00B20D
sh::Func::textureProjLodOffset_00X20B00B10D
sh::Func::textureProjLodOffset_00X30B00B10D
sh::Func::textureProjLodOffset_00Y30B00B20D
sh::Func::textureProjLodOffset_00d30B00B10D
sh::Func::textureProjLodOffset_00g10B00B00D
sh::Func::textureProjLodOffset_00g30B00B00D
sh::Func::textureProjLodOffset_00m30B00B00D
sh::Func::textureProjLodOffset_00o10B00B00D
sh::Func::textureProjLodOffset_00o30B00B00D
sh::Func::textureProjLodOffset_00t10B00B00D
sh::Func::textureProjLodOffset_00t30B00B00D
sh::Func::textureProjLod_00I20B00B
sh::Func::textureProjLod_00I30B00B
sh::Func::textureProjLod_00J30B00B
sh::Func::textureProjLod_00R20B00B
sh::Func::textureProjLod_00R30B00B
sh::Func::textureProjLod_00S30B00B
sh::Func::textureProjLod_00X20B00B
sh::Func::textureProjLod_00X30B00B
sh::Func::textureProjLod_00Y30B00B
sh::Func::textureProjLod_00d30B00B
sh::Func::textureProjLod_00g10B00B
sh::Func::textureProjLod_00g30B00B
sh::Func::textureProjLod_00m30B00B
sh::Func::textureProjLod_00o10B00B
sh::Func::textureProjLod_00o30B00B
sh::Func::textureProjLod_00t10B00B
sh::Func::textureProjLod_00t30B00B
sh::Func::textureProjOffset_00I20B10D
sh::Func::textureProjOffset_00I20B10D00B
sh::Func::textureProjOffset_00I30B10D
sh::Func::textureProjOffset_00I30B10D00B
sh::Func::textureProjOffset_00J30B20D
sh::Func::textureProjOffset_00J30B20D00B
sh::Func::textureProjOffset_00O20B10D
sh::Func::textureProjOffset_00O30B10D
sh::Func::textureProjOffset_00R20B10D
sh::Func::textureProjOffset_00R20B10D00B
sh::Func::textureProjOffset_00R30B10D
sh::Func::textureProjOffset_00R30B10D00B
sh::Func::textureProjOffset_00S30B20D
sh::Func::textureProjOffset_00S30B20D00B
sh::Func::textureProjOffset_00X20B10D
sh::Func::textureProjOffset_00X20B10D00B
sh::Func::textureProjOffset_00X30B10D
sh::Func::textureProjOffset_00X30B10D00B
sh::Func::textureProjOffset_00Y30B20D
sh::Func::textureProjOffset_00Y30B20D00B
sh::Func::textureProjOffset_00d30B10D
sh::Func::textureProjOffset_00d30B10D00B
sh::Func::textureProjOffset_00g10B00D
sh::Func::textureProjOffset_00g10B00D00B
sh::Func::textureProjOffset_00g30B00D
sh::Func::textureProjOffset_00g30B00D00B
sh::Func::textureProjOffset_00m30B00D
sh::Func::textureProjOffset_00m30B00D00B
sh::Func::textureProjOffset_00n30B10D
sh::Func::textureProjOffset_00o10B00D
sh::Func::textureProjOffset_00o10B00D00B
sh::Func::textureProjOffset_00o30B00D
sh::Func::textureProjOffset_00o30B00D00B
sh::Func::textureProjOffset_00q20B10D
sh::Func::textureProjOffset_00q30B10D
sh::Func::textureProjOffset_00t10B00D
sh::Func::textureProjOffset_00t10B00D00B
sh::Func::textureProjOffset_00t30B00D
sh::Func::textureProjOffset_00t30B00D00B
sh::Func::textureProjOffset_00v20B10D
sh::Func::textureProjOffset_00v30B10D
sh::Func::textureProj_00I20B
sh::Func::textureProj_00I20B00B
sh::Func::textureProj_00I30B
sh::Func::textureProj_00I30B00B
sh::Func::textureProj_00J30B
sh::Func::textureProj_00J30B00B
sh::Func::textureProj_00M20B
sh::Func::textureProj_00M20B00B
sh::Func::textureProj_00M30B
sh::Func::textureProj_00M30B00B
sh::Func::textureProj_00N20B
sh::Func::textureProj_00N20B00B
sh::Func::textureProj_00N30B
sh::Func::textureProj_00N30B00B
sh::Func::textureProj_00O20B
sh::Func::textureProj_00O30B
sh::Func::textureProj_00R20B
sh::Func::textureProj_00R20B00B
sh::Func::textureProj_00R30B
sh::Func::textureProj_00R30B00B
sh::Func::textureProj_00S30B
sh::Func::textureProj_00S30B00B
sh::Func::textureProj_00X20B
sh::Func::textureProj_00X20B00B
sh::Func::textureProj_00X30B
sh::Func::textureProj_00X30B00B
sh::Func::textureProj_00Y30B
sh::Func::textureProj_00Y30B00B
sh::Func::textureProj_00d30B
sh::Func::textureProj_00d30B00B
sh::Func::textureProj_00g10B
sh::Func::textureProj_00g10B00B
sh::Func::textureProj_00g30B
sh::Func::textureProj_00g30B00B
sh::Func::textureProj_00m30B
sh::Func::textureProj_00m30B00B
sh::Func::textureProj_00n30B
sh::Func::textureProj_00o10B
sh::Func::textureProj_00o10B00B
sh::Func::textureProj_00o30B
sh::Func::textureProj_00o30B00B
sh::Func::textureProj_00q20B
sh::Func::textureProj_00q30B
sh::Func::textureProj_00t10B
sh::Func::textureProj_00t10B00B
sh::Func::textureProj_00t30B
sh::Func::textureProj_00t30B00B
sh::Func::textureProj_00v20B
sh::Func::textureProj_00v30B
sh::Func::textureQueryLevels_00I
sh::Func::textureQueryLevels_00J
sh::Func::textureQueryLevels_00K
sh::Func::textureQueryLevels_00L
sh::Func::textureQueryLevels_00R
sh::Func::textureQueryLevels_00S
sh::Func::textureQueryLevels_00T
sh::Func::textureQueryLevels_00U
sh::Func::textureQueryLevels_00X
sh::Func::textureQueryLevels_00Y
sh::Func::textureQueryLevels_00Z
sh::Func::textureQueryLevels_00a
sh::Func::textureQueryLevels_00d
sh::Func::textureQueryLevels_00e
sh::Func::textureQueryLevels_00f
sh::Func::textureQueryLevels_00g
sh::Func::textureQueryLevels_00h
sh::Func::textureQueryLevels_00i
sh::Func::textureQueryLevels_00k
sh::Func::textureQueryLevels_00l
sh::Func::textureQueryLevels_00m
sh::Func::textureQueryLevels_00o
sh::Func::textureQueryLevels_00p
sh::Func::textureQueryLevels_00s
sh::Func::textureQueryLevels_00t
sh::Func::textureQueryLevels_00u
sh::Func::textureQueryLevels_00x
sh::Func::textureQueryLod_00I10B
sh::Func::textureQueryLod_00J20B
sh::Func::textureQueryLod_00K20B
sh::Func::textureQueryLod_00L10B
sh::Func::textureQueryLod_00R10B
sh::Func::textureQueryLod_00S20B
sh::Func::textureQueryLod_00T20B
sh::Func::textureQueryLod_00U10B
sh::Func::textureQueryLod_00X10B
sh::Func::textureQueryLod_00Y20B
sh::Func::textureQueryLod_00Z20B
sh::Func::textureQueryLod_00a10B
sh::Func::textureQueryLod_00d10B
sh::Func::textureQueryLod_00e20B
sh::Func::textureQueryLod_00f10B
sh::Func::textureQueryLod_00g00B
sh::Func::textureQueryLod_00h00B
sh::Func::textureQueryLod_00i00B
sh::Func::textureQueryLod_00k20B
sh::Func::textureQueryLod_00l20B
sh::Func::textureQueryLod_00m00B
sh::Func::textureQueryLod_00o00B
sh::Func::textureQueryLod_00p00B
sh::Func::textureQueryLod_00s20B
sh::Func::textureQueryLod_00t00B
sh::Func::textureQueryLod_00u00B
sh::Func::textureQueryLod_00x20B
sh::Func::textureSamples_00P
sh::Func::textureSamples_00Q
sh::Func::textureSamples_00V
sh::Func::textureSamples_00W
sh::Func::textureSamples_00b
sh::Func::textureSamples_00c
sh::Func::textureSizeExt_00P
sh::Func::textureSizeExt_00Q
sh::Func::textureSizeExt_00V
sh::Func::textureSizeExt_00W
sh::Func::textureSizeExt_00b
sh::Func::textureSizeExt_00c
sh::Func::textureSize_00I00D
sh::Func::textureSize_00J00D
sh::Func::textureSize_00K00D
sh::Func::textureSize_00L00D
sh::Func::textureSize_00M00D
sh::Func::textureSize_00N00D
sh::Func::textureSize_00O
sh::Func::textureSize_00P
sh::Func::textureSize_00Q
sh::Func::textureSize_00R00D
sh::Func::textureSize_00S00D
sh::Func::textureSize_00T00D
sh::Func::textureSize_00U00D
sh::Func::textureSize_00V
sh::Func::textureSize_00W
sh::Func::textureSize_00X00D
sh::Func::textureSize_00Y00D
sh::Func::textureSize_00Z00D
sh::Func::textureSize_00a00D
sh::Func::textureSize_00b
sh::Func::textureSize_00c
sh::Func::textureSize_00d00D
sh::Func::textureSize_00e00D
sh::Func::textureSize_00f00D
sh::Func::textureSize_00g00D
sh::Func::textureSize_00h00D
sh::Func::textureSize_00i00D
sh::Func::textureSize_00j
sh::Func::textureSize_00k00D
sh::Func::textureSize_00l00D
sh::Func::textureSize_00m00D
sh::Func::textureSize_00n
sh::Func::textureSize_00o00D
sh::Func::textureSize_00p00D
sh::Func::textureSize_00q
sh::Func::textureSize_00r
sh::Func::textureSize_00s00D
sh::Func::textureSize_00t00D
sh::Func::textureSize_00u00D
sh::Func::textureSize_00v
sh::Func::textureSize_00w
sh::Func::textureSize_00x00D
sh::Func::textureVideoWEBGL_00y10B
sh::Func::texture_00I10B
sh::Func::texture_00I10B00B
sh::Func::texture_00J20B
sh::Func::texture_00J20B00B
sh::Func::texture_00K20B
sh::Func::texture_00K20B00B
sh::Func::texture_00L20B
sh::Func::texture_00L20B00B
sh::Func::texture_00M10B
sh::Func::texture_00M10B00B
sh::Func::texture_00N10B
sh::Func::texture_00N10B00B
sh::Func::texture_00O10B
sh::Func::texture_00R10B
sh::Func::texture_00R10B00B
sh::Func::texture_00S20B
sh::Func::texture_00S20B00B
sh::Func::texture_00T20B
sh::Func::texture_00T20B00B
sh::Func::texture_00U20B
sh::Func::texture_00U20B00B
sh::Func::texture_00X10B
sh::Func::texture_00X10B00B
sh::Func::texture_00Y20B
sh::Func::texture_00Y20B00B
sh::Func::texture_00Z20B
sh::Func::texture_00Z20B00B
sh::Func::texture_00a20B
sh::Func::texture_00a20B00B
sh::Func::texture_00d20B
sh::Func::texture_00d20B00B
sh::Func::texture_00e30B
sh::Func::texture_00e30B00B
sh::Func::texture_00f30B
sh::Func::texture_00f30B00B
sh::Func::texture_00g00B
sh::Func::texture_00g00B00B
sh::Func::texture_00h20B
sh::Func::texture_00h20B00B
sh::Func::texture_00i20B
sh::Func::texture_00i20B00B
sh::Func::texture_00k30B
sh::Func::texture_00k30B00B
sh::Func::texture_00l30B00B
sh::Func::texture_00m20B
sh::Func::texture_00m20B00B
sh::Func::texture_00n20B
sh::Func::texture_00o00B
sh::Func::texture_00o00B00B
sh::Func::texture_00p20B
sh::Func::texture_00p20B00B
sh::Func::texture_00q10B
sh::Func::texture_00s30B
sh::Func::texture_00s30B00B
sh::Func::texture_00t00B
sh::Func::texture_00t00B00B
sh::Func::texture_00u20B
sh::Func::texture_00u20B00B
sh::Func::texture_00v10B
sh::Func::texture_00x30B
sh::Func::texture_00x30B00B
sh::Func::texture_00y10B
sh::Func::transpose_50B
sh::Func::transpose_60B
sh::Func::transpose_70B
sh::Func::transpose_90B
sh::Func::transpose_A0B
sh::Func::transpose_B0B
sh::Func::transpose_D0B
sh::Func::transpose_E0B
sh::Func::transpose_F0B
sh::Func::trunc_00B
sh::Func::trunc_00C
sh::Func::trunc_10B
sh::Func::trunc_10C
sh::Func::trunc_20B
sh::Func::trunc_20C
sh::Func::trunc_30B
sh::Func::trunc_30C
sh::Func::uaddCarry_00E00E00E
sh::Func::uaddCarry_10E10E10E
sh::Func::uaddCarry_20E20E20E
sh::Func::uaddCarry_30E30E30E
sh::Func::uintBitsToFloat_00E
sh::Func::uintBitsToFloat_10E
sh::Func::uintBitsToFloat_20E
sh::Func::uintBitsToFloat_30E
sh::Func::umulExtended_00E00E00E00E
sh::Func::umulExtended_10E10E10E10E
sh::Func::umulExtended_20E20E20E20E
sh::Func::umulExtended_30E30E30E30E
sh::Func::unpackDouble2x32_00C
sh::Func::unpackHalf2x16_00E
sh::Func::unpackSnorm2x16_00E
sh::Func::unpackSnorm4x8_00E
sh::Func::unpackUnorm2x16_00E
sh::Func::unpackUnorm4x8_00E
sh::Func::usubBorrow_00E00E00E
sh::Func::usubBorrow_10E10E10E
sh::Func::usubBorrow_20E20E20E
sh::Func::usubBorrow_30E30E30E
sh::Func::yuv_2_rgb_20B00H
sh::GLVariablePrecision(sh::TType const&)
sh::GLVariableType(sh::TType const&)
sh::GetActiveUniformBlockInfo(std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockLayoutEncoder*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, sh::BlockMemberInfo> > >*)
sh::GetAttributes(void*)
sh::GetBehaviorString(sh::TBehavior)
sh::GetBuiltInResourcesString(void*)
sh::GetComputeShaderLocalGroupSize(void*)
sh::GetConversion(sh::TBasicType, sh::TBasicType)
sh::GetExtensionByName(char const*)
sh::GetExtensionNameString(sh::TExtension)
sh::GetGeometryShaderInputPrimitiveType(void*)
sh::GetGeometryShaderInvocations(void*)
sh::GetGeometryShaderMaxVertices(void*)
sh::GetGeometryShaderOutputPrimitiveType(void*)
sh::GetGlobalMaxTokenSize(ShShaderSpec)
sh::GetImageInternalFormatType(sh::TLayoutImageInternalFormat)
sh::GetInfoLog(void*)
sh::GetInputVaryings(void*)
sh::GetInterfaceBlockInfo(std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockLayoutEncoder*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, sh::BlockMemberInfo> > >*)
sh::GetInterpolationType(sh::TQualifier)
sh::GetMangledNames(char const*, sh::TVector<sh::TIntermNode*> const&)
sh::GetObjectCode(void*)
sh::GetOutputVariables(void*)
sh::GetOutputVaryings(void*)
sh::GetShaderSharedMemorySize(void*)
sh::GetShaderStorageBlocks(void*)
sh::GetShaderVersion(void*)
sh::GetTypeName(sh::TType const&, unsigned long (*)(char const*, unsigned long), std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >*)
sh::GetTypePackingComponentsPerRow(unsigned int)
sh::GetUniformBlocks(void*)
sh::GetUniforms(void*)
sh::GetVertexShaderNumViews(void*)
sh::HasEarlyFragmentTestsOptimization(void*)
sh::HasValidGeometryShaderInputPrimitiveType(void*)
sh::HasValidGeometryShaderMaxVertices(void*)
sh::HasValidGeometryShaderOutputPrimitiveType(void*)
sh::HashName(sh::ImmutableString const&, unsigned long (*)(char const*, unsigned long), std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >*)
sh::HashName(sh::TSymbol const*, unsigned long (*)(char const*, unsigned long), std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >*)
sh::ImmutableString::FowlerNollVoHash<8ul>::kFnvOffsetBasis
sh::ImmutableString::FowlerNollVoHash<8ul>::kFnvPrime
sh::ImmutableString::mangledNameHash() const
sh::ImmutableString::unmangledNameHash() const
sh::ImmutableStringBuilder::appendDecimal(unsigned int const&)
sh::ImmutableStringBuilder::operator sh::ImmutableString()
sh::ImmutableStringBuilder::operator<<(char const&)
sh::ImmutableStringBuilder::operator<<(char const*)
sh::ImmutableStringBuilder::operator<<(sh::ImmutableString const&)
sh::InitBuiltInAbsFunctionEmulatorForGLSLWorkarounds(sh::BuiltInFunctionEmulator*, unsigned int)
sh::InitBuiltInAtanFunctionEmulatorForGLSLWorkarounds(sh::BuiltInFunctionEmulator*)
sh::InitBuiltInAtanFunctionEmulatorForGLSLWorkarounds(sh::BuiltInFunctionEmulator*)::ids
sh::InitBuiltInFunctionEmulatorForGLSLMissingFunctions(sh::BuiltInFunctionEmulator*, unsigned int, int)
sh::InitBuiltInIsnanFunctionEmulatorForGLSLWorkarounds(sh::BuiltInFunctionEmulator*, int)
sh::InitBuiltInResources(ShBuiltInResources*)
sh::InitExtensionBehavior(ShBuiltInResources const&, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > >&)
sh::InitProcess()
sh::Initialize()
sh::InitializeUninitializedLocals(sh::TCompiler*, sh::TIntermBlock*, int, bool, bool, sh::TSymbolTable*)
sh::InitializeVariables(sh::TCompiler*, sh::TIntermBlock*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, sh::TSymbolTable*, int, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > > const&, bool, bool)
sh::InterfaceBlock::InterfaceBlock()
sh::InterfaceBlock::InterfaceBlock(sh::InterfaceBlock const&)
sh::InterfaceBlock::fieldMappedPrefix() const
sh::InterfaceBlock::fieldPrefix() const
sh::InterfaceBlock::isSameInterfaceBlockAtLinkTime(sh::InterfaceBlock const&) const
sh::InterfaceBlock::operator=(sh::InterfaceBlock const&)
sh::InterfaceBlock::~InterfaceBlock()
sh::IntermNodePatternMatcher::IntermNodePatternMatcher(unsigned int)
sh::IntermNodePatternMatcher::IsDynamicIndexingOfSwizzledVector(sh::TIntermBinary*)
sh::IntermNodePatternMatcher::match(sh::TIntermAggregate*, sh::TIntermNode*)
sh::IntermNodePatternMatcher::match(sh::TIntermBinary*, sh::TIntermNode*, bool)
sh::IntermNodePatternMatcher::match(sh::TIntermDeclaration*)
sh::IntermNodePatternMatcher::match(sh::TIntermTernary*)
sh::IntermNodePatternMatcher::match(sh::TIntermUnary*)
sh::InterpolationTypesMatch(sh::InterpolationType, sh::InterpolationType)
sh::IsASTDepthBelowLimit(sh::TIntermNode*, int)
sh::IsExtensionEnabled(std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > > const&, sh::TExtension)
sh::IsGLSL130OrNewer(ShShaderOutput)
sh::IsGLSL410OrOlder(ShShaderOutput)
sh::IsGeometryShaderInput(unsigned int, sh::TQualifier)
sh::IsOutputESSL(ShShaderOutput)
sh::IsOutputGLSL(ShShaderOutput)
sh::IsOutputHLSL(ShShaderOutput)
sh::IsOutputVulkan(ShShaderOutput)
sh::IsShaderOutput(sh::TQualifier)
sh::IsSpecWithFunctionBodyNewScope(ShShaderSpec, int)
sh::IsValidImplicitConversion(sh::ImplicitTypeConversion, TOperator)
sh::IsVarying(sh::TQualifier)
sh::IsVaryingIn(sh::TQualifier)
sh::IsVaryingOut(sh::TQualifier)
sh::JoinLayoutQualifiers(sh::TLayoutQualifier, sh::TLayoutQualifier, sh::TSourceLoc const&, sh::TDiagnostics*)
sh::NameEmbeddedStructUniforms(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*)
sh::NeedsToWriteLayoutQualifier(sh::TType const&)
sh::NumericLexFloat32OutOfRangeToInfinity(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
sh::OutputTree(sh::TIntermNode*, sh::TInfoSinkBase&)
sh::PaParseStrings(unsigned long, char const* const*, int const*, sh::TParseContext*)
sh::PerformanceDiagnostics::PerformanceDiagnostics(sh::TDiagnostics*)
sh::PerformanceDiagnostics::warning(sh::TSourceLoc const&, char const*, char const*)
sh::PruneEmptyCases(sh::TCompiler*, sh::TIntermBlock*)
sh::PruneNoOps(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*)
sh::RecordConstantPrecision(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable*)
sh::ReferenceBuiltInVariable(sh::ImmutableString const&, sh::TSymbolTable const&, int)
sh::ReferenceGlobalVariable(sh::ImmutableString const&, sh::TSymbolTable const&)
sh::RegenerateStructNames::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::RegenerateStructNames::visitSymbol(sh::TIntermSymbol*)
sh::RegenerateStructNames::~RegenerateStructNames()
sh::RemoveArrayLengthMethod(sh::TCompiler*, sh::TIntermBlock*)
sh::RemoveAtomicCounterBuiltins(sh::TCompiler*, sh::TIntermBlock*)
sh::RemoveDynamicIndexingOfSwizzledVector(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable*, sh::PerformanceDiagnostics*)
sh::RemoveInactiveInterfaceVariables(sh::TCompiler*, sh::TIntermBlock*, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> > const&)
sh::RemoveInvariant(unsigned int, int, ShShaderOutput, unsigned long)
sh::RemoveInvariantDeclaration(sh::TCompiler*, sh::TIntermNode*)
sh::RemovePow(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable*)
sh::RemoveUnreferencedVariables(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*)
sh::ReplaceClipDistanceAssignments(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, sh::TIntermTyped const*)
sh::ReplaceClipDistanceAssignments(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, sh::TIntermTyped const*)::$_0::operator()(unsigned int) const
sh::ReplaceShadowingVariables(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*)
sh::ReplaceVariable(sh::TCompiler*, sh::TIntermBlock*, sh::TVariable const*, sh::TVariable const*)
sh::ReplaceVariableWithTyped(sh::TCompiler*, sh::TIntermBlock*, sh::TVariable const*, sh::TIntermTyped const*)
sh::ResetExtensionBehavior(ShBuiltInResources const&, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > >&, unsigned long)
sh::RetypeOpaqueVariablesHelper::convertASTFunction(sh::TIntermAggregate*)
sh::RetypeOpaqueVariablesHelper::convertFunctionPrototype(sh::TSymbolTable*, sh::TFunction const*)
sh::RetypeOpaqueVariablesHelper::~RetypeOpaqueVariablesHelper()
sh::RewriteAtomicCounters(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, sh::TIntermTyped const*)
sh::RewriteCubeMapSamplersAs2DArray(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, bool)
sh::RewriteDfdy(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable const&, int, sh::TIntermBinary*, sh::TIntermTyped*)
sh::RewriteDoWhile(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable*)
sh::RewriteRepeatedAssignToSwizzled(sh::TCompiler*, sh::TIntermBlock*)
sh::RewriteRowMajorMatrices(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*)
sh::RewriteStructSamplers(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, int*)
sh::RewriteStructSamplersOld(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, int*)
sh::RewriteTexelFetchOffset(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable const&, int)
sh::RewriteUnaryMinusOperatorFloat(sh::TCompiler*, sh::TIntermNode*)
sh::RunAtTheEndOfShader(sh::TCompiler*, sh::TIntermBlock*, sh::TIntermNode*, sh::TSymbolTable*)
sh::ScalarizeVecAndMatConstructorArgs(sh::TCompiler*, sh::TIntermBlock*, unsigned int, bool, sh::TSymbolTable*)
sh::SeparateDeclarations(sh::TCompiler*, sh::TIntermNode*)
sh::ShaderBuiltinsWorkaround(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*, unsigned long)
sh::ShaderOutputTypeToGLSLVersion(ShShaderOutput)
sh::ShaderVariable::ShaderVariable()
sh::ShaderVariable::ShaderVariable(sh::ShaderVariable const&)
sh::ShaderVariable::ShaderVariable(unsigned int)
sh::ShaderVariable::findField(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*) const
sh::ShaderVariable::getArraySizeProduct() const
sh::ShaderVariable::getBasicTypeElementCount() const
sh::ShaderVariable::getExternalSize() const
sh::ShaderVariable::getInnerArraySizeProduct() const
sh::ShaderVariable::getNestedArraySize(unsigned int) const
sh::ShaderVariable::indexIntoArray(unsigned int)
sh::ShaderVariable::isBuiltIn() const
sh::ShaderVariable::isEmulatedBuiltIn() const
sh::ShaderVariable::isSameVariableAtLinkTime(sh::ShaderVariable const&, bool, bool) const
sh::ShaderVariable::operator=(sh::ShaderVariable const&)
sh::ShaderVariable::~ShaderVariable()
sh::ShaderVariableVisitor::enterArray(sh::ShaderVariable const&)
sh::ShaderVariableVisitor::enterArrayElement(sh::ShaderVariable const&, unsigned int)
sh::ShaderVariableVisitor::enterStruct(sh::ShaderVariable const&)
sh::ShaderVariableVisitor::enterStructAccess(sh::ShaderVariable const&, bool)
sh::ShaderVariableVisitor::exitArray(sh::ShaderVariable const&)
sh::ShaderVariableVisitor::exitArrayElement(sh::ShaderVariable const&, unsigned int)
sh::ShaderVariableVisitor::exitStruct(sh::ShaderVariable const&)
sh::ShaderVariableVisitor::exitStructAccess(sh::ShaderVariable const&, bool)
sh::ShaderVariableVisitor::visitSampler(sh::ShaderVariable const&)
sh::ShaderVariableVisitor::~ShaderVariableVisitor()
sh::SimplifyLoopConditions(sh::TCompiler*, sh::TIntermNode*, unsigned int, sh::TSymbolTable*)
sh::SplitSequenceOperator(sh::TCompiler*, sh::TIntermNode*, int, sh::TSymbolTable*)
sh::StaticType::Helpers::arrayInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1, &sh::BuiltInVariable::kArraySize4, 1ul>
sh::StaticType::Helpers::instance<(sh::TBasicType)0, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)2>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)3>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)4>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)2>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)3>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)4>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)2>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)3>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)4>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)19, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)23, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)25, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)27, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)31, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)36, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)3, (sh::TQualifier)18, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)1, (sh::TPrecision)3, (sh::TQualifier)29, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)10, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)11, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)12, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)13, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)14, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)15, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)16, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)17, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)18, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)19, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)20, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)21, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)22, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)23, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)24, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)25, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)26, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)27, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)28, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)29, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)14, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)2, (sh::TQualifier)0, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)2, (sh::TQualifier)2, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)0, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)12, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)16, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)17, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)2, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)20, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)21, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)22, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)34, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)6, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)66, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)67, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)68, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)69, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)30, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)31, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)32, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)33, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)34, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)35, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)36, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)37, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)38, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)39, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)14, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)52, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)53, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)54, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)55, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)56, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)57, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)4, (sh::TPrecision)3, (sh::TQualifier)33, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)40, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)41, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)42, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)43, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)44, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)45, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)46, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)47, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)48, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)49, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)0, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)24, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)26, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)50, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)51, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)52, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)53, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)54, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)55, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)56, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)57, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)58, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)59, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)6, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)60, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)61, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)62, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)63, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)64, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)65, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)66, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)67, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)68, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)69, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)7, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)70, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)71, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)72, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)73, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)74, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)75, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)76, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)77, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)78, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)79, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)8, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)80, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)81, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)82, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)83, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)84, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)85, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)86, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)87, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)88, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)89, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)9, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)90, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)91, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::instance<(sh::TBasicType)92, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameArrayInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1, &sh::BuiltInVariable::kArraySize4, 1ul>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)0, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)2>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)3>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)4>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)2>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)3>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)4>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)2>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)3>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)4>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)19, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)23, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)25, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)27, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)31, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)2, (sh::TQualifier)36, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)3, (sh::TQualifier)18, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)1, (sh::TPrecision)3, (sh::TQualifier)29, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)10, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)11, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)12, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)13, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)14, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)15, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)16, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)17, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)18, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)19, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)2, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)20, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)21, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)22, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)23, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)24, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)25, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)26, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)27, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)28, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)29, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)0, (sh::TQualifier)14, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)2, (sh::TQualifier)0, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)2, (sh::TQualifier)2, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)0, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)12, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)16, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)17, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)2, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)20, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)21, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)22, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)34, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)6, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)66, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)67, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)68, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)3, (sh::TPrecision)3, (sh::TQualifier)69, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)30, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)31, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)32, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)33, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)34, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)35, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)36, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)37, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)38, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)39, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)13, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)14, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)52, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)53, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)54, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)55, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)56, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)0, (sh::TQualifier)57, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)4, (sh::TPrecision)3, (sh::TQualifier)33, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)40, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)41, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)42, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)43, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)44, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)45, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)46, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)47, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)48, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)49, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)0, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)2, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)3, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)4, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)24, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)5, (sh::TPrecision)0, (sh::TQualifier)26, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)50, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)51, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)52, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)53, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)54, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)55, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)56, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)57, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)58, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)59, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)6, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)60, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)61, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)62, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)63, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)64, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)65, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)66, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)67, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)68, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)69, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)7, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)70, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)71, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)72, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)73, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)74, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)75, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)76, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)77, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)78, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)79, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)8, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)80, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)81, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)82, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)83, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)84, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)85, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)86, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)87, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)88, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)89, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)9, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)90, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)91, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::StaticType::Helpers::kMangledNameInstance<(sh::TBasicType)92, (sh::TPrecision)0, (sh::TQualifier)1, (unsigned char)1, (unsigned char)1>
sh::Std140BlockEncoder::Std140BlockEncoder()
sh::Std140BlockEncoder::advanceOffset(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, bool, int, int)
sh::Std140BlockEncoder::enterAggregateType(sh::ShaderVariable const&)
sh::Std140BlockEncoder::exitAggregateType(sh::ShaderVariable const&)
sh::Std140BlockEncoder::getBaseAlignment(sh::ShaderVariable const&) const
sh::Std140BlockEncoder::getBlockLayoutInfo(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, bool, int*, int*)
sh::Std140BlockEncoder::getTypeBaseAlignment(unsigned int, bool) const
sh::Std140BlockEncoder::~Std140BlockEncoder()
sh::Std430BlockEncoder::Std430BlockEncoder()
sh::Std430BlockEncoder::getBaseAlignment(sh::ShaderVariable const&) const
sh::Std430BlockEncoder::getTypeBaseAlignment(unsigned int, bool) const
sh::Std430BlockEncoder::~Std430BlockEncoder()
sh::TCompiler::Init(ShBuiltInResources const&)
sh::TCompiler::TCompiler(unsigned int, ShShaderSpec, ShShaderOutput)
sh::TCompiler::checkAndSimplifyAST(sh::TIntermBlock*, sh::TParseContext const&, unsigned long)
sh::TCompiler::checkCallDepth()
sh::TCompiler::checkShaderVersion(sh::TParseContext*)
sh::TCompiler::clearResults()
sh::TCompiler::compile(char const* const*, unsigned long, unsigned long)
sh::TCompiler::compileTreeImpl(char const* const*, unsigned long, unsigned long)
sh::TCompiler::emulatePrecisionIfNeeded(sh::TIntermBlock*, sh::TInfoSinkBase&, bool*, ShShaderOutput)
sh::TCompiler::getArrayBoundsClamper() const
sh::TCompiler::getArrayIndexClampingStrategy() const
sh::TCompiler::getAsCompiler()
sh::TCompiler::getBuiltInFunctionEmulator() const
sh::TCompiler::getExtensionBehavior() const
sh::TCompiler::getResources() const
sh::TCompiler::getSharedMemorySize() const
sh::TCompiler::initBuiltInFunctionEmulator(sh::BuiltInFunctionEmulator*, unsigned long)
sh::TCompiler::initializeGLPosition(sh::TIntermBlock*)
sh::TCompiler::initializeOutputVariables(sh::TIntermBlock*)
sh::TCompiler::internalTagUsedFunction(unsigned long)
sh::TCompiler::isVaryingDefined(char const*)
sh::TCompiler::setResourceString()
sh::TCompiler::shouldCollectVariables(unsigned long)
sh::TCompiler::useAllMembersInUnusedStandardAndSharedBlocks(sh::TIntermBlock*)
sh::TCompiler::validateAST(sh::TIntermNode*)
sh::TCompiler::writePragma(unsigned long)
sh::TCompiler::~TCompiler()
sh::TConstantUnion::TConstantUnion()
sh::TConstantUnion::add(sh::TConstantUnion const&, sh::TConstantUnion const&, sh::TDiagnostics*, sh::TSourceLoc const&)
sh::TConstantUnion::cast(sh::TBasicType, sh::TConstantUnion const&)
sh::TConstantUnion::getBConst() const
sh::TConstantUnion::getFConst() const
sh::TConstantUnion::getIConst() const
sh::TConstantUnion::getUConst() const
sh::TConstantUnion::getYuvCscStandardEXTConst() const
sh::TConstantUnion::isZero() const
sh::TConstantUnion::lshift(sh::TConstantUnion const&, sh::TConstantUnion const&, sh::TDiagnostics*, sh::TSourceLoc const&)
sh::TConstantUnion::mul(sh::TConstantUnion const&, sh::TConstantUnion const&, sh::TDiagnostics*, sh::TSourceLoc const&)
sh::TConstantUnion::operator!=(sh::TConstantUnion const&) const
sh::TConstantUnion::operator&&(sh::TConstantUnion const&) const
sh::TConstantUnion::operator&(sh::TConstantUnion const&) const
sh::TConstantUnion::operator<(sh::TConstantUnion const&) const
sh::TConstantUnion::operator==(int) const
sh::TConstantUnion::operator==(sh::TConstantUnion const&) const
sh::TConstantUnion::operator==(unsigned int) const
sh::TConstantUnion::operator>(sh::TConstantUnion const&) const
sh::TConstantUnion::operator^(sh::TConstantUnion const&) const
sh::TConstantUnion::operator|(sh::TConstantUnion const&) const
sh::TConstantUnion::operator||(sh::TConstantUnion const&) const
sh::TConstantUnion::rshift(sh::TConstantUnion const&, sh::TConstantUnion const&, sh::TDiagnostics*, sh::TSourceLoc const&)
sh::TConstantUnion::sub(sh::TConstantUnion const&, sh::TConstantUnion const&, sh::TDiagnostics*, sh::TSourceLoc const&)
sh::TDeclarator::TDeclarator(sh::ImmutableString const&, sh::TSourceLoc const&)
sh::TDeclarator::TDeclarator(sh::ImmutableString const&, sh::TVector<unsigned int> const*, sh::TSourceLoc const&)
sh::TDeclarator::isArray() const
sh::TDiagnostics::TDiagnostics(sh::TInfoSinkBase&)
sh::TDiagnostics::error(angle::pp::SourceLocation const&, char const*, char const*)
sh::TDiagnostics::error(sh::TSourceLoc const&, char const*, char const*)
sh::TDiagnostics::globalError(char const*)
sh::TDiagnostics::print(angle::pp::Diagnostics::ID, angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
sh::TDiagnostics::resetErrorCount()
sh::TDiagnostics::warning(angle::pp::SourceLocation const&, char const*, char const*)
sh::TDiagnostics::warning(sh::TSourceLoc const&, char const*, char const*)
sh::TDiagnostics::writeInfo(sh::Severity, angle::pp::SourceLocation const&, char const*, char const*)
sh::TDiagnostics::~TDiagnostics()
sh::TDirectiveHandler::TDirectiveHandler(std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > >&, sh::TDiagnostics&, int&, unsigned int, bool)
sh::TDirectiveHandler::handleError(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
sh::TDirectiveHandler::handleExtension(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
sh::TDirectiveHandler::handleExtension(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::kExtAll
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)::kAll
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)::kDebug
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)::kDebugShaderPrecision
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)::kInvariant
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)::kOff
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)::kOn
sh::TDirectiveHandler::handlePragma(angle::pp::SourceLocation const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool)::kOptimize
sh::TDirectiveHandler::handleVersion(angle::pp::SourceLocation const&, int, ShShaderSpec)
sh::TDirectiveHandler::~TDirectiveHandler()
sh::TExtensionGLSL::TExtensionGLSL(ShShaderOutput)
sh::TExtensionGLSL::checkOperator(sh::TIntermOperator*)
sh::TExtensionGLSL::getEnabledExtensions() const
sh::TExtensionGLSL::getRequiredExtensions() const
sh::TExtensionGLSL::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::TExtensionGLSL::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::TExtensionGLSL::~TExtensionGLSL()
sh::TFieldListCollection::TFieldListCollection(sh::TVector<sh::TField*> const*)
sh::TFieldListCollection::calculateObjectSize() const
sh::TFieldListCollection::containsMatrices() const
sh::TFunction::TFunction(sh::TSymbolTable*, sh::ImmutableString const&, sh::SymbolType, sh::TType const*, bool)
sh::TFunction::addParameter(sh::TVariable const*)
sh::TFunction::buildMangledName() const
sh::TFunction::hasSamplerInStructOrArrayOfArrayParams() const
sh::TFunction::hasSamplerInStructOrArrayParams() const
sh::TFunction::isAtomicCounterFunction() const
sh::TFunction::isMain() const
sh::TFunction::shareParameters(sh::TFunction const&)
sh::TFunctionLookup::CreateConstructor(sh::TType const*)
sh::TFunctionLookup::CreateFunctionCall(sh::ImmutableString const&, sh::TSymbol const*)
sh::TFunctionLookup::GetMangledName(char const*, sh::TVector<sh::TIntermNode*> const&)
sh::TFunctionLookup::addArgument(sh::TIntermTyped*)
sh::TFunctionLookup::arguments()
sh::TFunctionLookup::constructorType() const
sh::TFunctionLookup::getMangledName() const
sh::TFunctionLookup::getMangledNamesForImplicitConversions() const
sh::TFunctionLookup::isConstructor() const
sh::TFunctionLookup::name() const
sh::TFunctionLookup::setThisNode(sh::TIntermTyped*)
sh::TFunctionLookup::symbol() const
sh::TFunctionLookup::thisNode() const
sh::TInfoSinkBase& sh::TInfoSinkBase::operator<< <int>(int const&)
sh::TInfoSinkBase& sh::TInfoSinkBase::operator<< <unsigned int>(unsigned int const&)
sh::TInfoSinkBase::location(int, int)
sh::TInfoSinkBase::operator<<(float)
sh::TInfoSinkBase::operator<<(sh::ImmutableString const&)
sh::TInfoSinkBase::operator<<(sh::TType const&)
sh::TInfoSinkBase::prefix(sh::Severity)
sh::TInterfaceBlock::TInterfaceBlock(sh::TSymbolTable*, sh::ImmutableString const&, sh::TVector<sh::TField*> const*, sh::TLayoutQualifier const&, sh::SymbolType, sh::TExtension)
sh::TInterfaceBlock::TInterfaceBlock(sh::TSymbolUniqueId const&, sh::ImmutableString const&, sh::TExtension, sh::TVector<sh::TField*> const*)
sh::TIntermAggregate::CreateBuiltInFunctionCall(sh::TFunction const&, sh::TVector<sh::TIntermNode*>*)
sh::TIntermAggregate::CreateConstructor(sh::TType const&, sh::TVector<sh::TIntermNode*>*)
sh::TIntermAggregate::CreateFunctionCall(sh::TFunction const&, sh::TVector<sh::TIntermNode*>*)
sh::TIntermAggregate::CreateRawFunctionCall(sh::TFunction const&, sh::TVector<sh::TIntermNode*>*)
sh::TIntermAggregate::TIntermAggregate(sh::TIntermAggregate const&)
sh::TIntermAggregate::deepCopy() const
sh::TIntermAggregate::fold(sh::TDiagnostics*)
sh::TIntermAggregate::functionName() const
sh::TIntermAggregate::getAsAggregate()
sh::TIntermAggregate::getChildCount() const
sh::TIntermAggregate::getChildNode(unsigned long) const
sh::TIntermAggregate::getConstantValue() const
sh::TIntermAggregate::getSequence()
sh::TIntermAggregate::getSequence() const
sh::TIntermAggregate::hasConstantValue() const
sh::TIntermAggregate::hasSideEffects() const
sh::TIntermAggregate::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermAggregate::setPrecisionAndQualifier()
sh::TIntermAggregate::setPrecisionForSpecialBuiltInOp()
sh::TIntermAggregate::traverse(sh::TIntermTraverser*)
sh::TIntermAggregate::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermAggregate::~TIntermAggregate()
sh::TIntermAggregateBase::insertChildNodes(unsigned long, sh::TVector<sh::TIntermNode*> const&)
sh::TIntermAggregateBase::replaceChildNodeWithMultiple(sh::TIntermNode*, sh::TVector<sh::TIntermNode*> const&)
sh::TIntermBinary::CreateComma(sh::TIntermTyped*, sh::TIntermTyped*, int)
sh::TIntermBinary::GetMulAssignOpBasedOnOperands(sh::TType const&, sh::TType const&)
sh::TIntermBinary::GetMulOpBasedOnOperands(sh::TType const&, sh::TType const&)
sh::TIntermBinary::TIntermBinary(TOperator, sh::TIntermTyped*, sh::TIntermTyped*)
sh::TIntermBinary::deepCopy() const
sh::TIntermBinary::fold(sh::TDiagnostics*)
sh::TIntermBinary::getAsBinaryNode()
sh::TIntermBinary::getChildCount() const
sh::TIntermBinary::getChildNode(unsigned long) const
sh::TIntermBinary::getConstantValue() const
sh::TIntermBinary::getIndexStructFieldName() const
sh::TIntermBinary::hasConstantValue() const
sh::TIntermBinary::hasSideEffects() const
sh::TIntermBinary::promote()
sh::TIntermBinary::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermBinary::traverse(sh::TIntermTraverser*)
sh::TIntermBinary::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermBinary::~TIntermBinary()
sh::TIntermBlock::TIntermBlock(sh::TIntermBlock const&)
sh::TIntermBlock::appendStatement(sh::TIntermNode*)
sh::TIntermBlock::deepCopy() const
sh::TIntermBlock::getAsBlock()
sh::TIntermBlock::getChildCount() const
sh::TIntermBlock::getChildNode(unsigned long) const
sh::TIntermBlock::getSequence()
sh::TIntermBlock::getSequence() const
sh::TIntermBlock::insertStatement(unsigned long, sh::TIntermNode*)
sh::TIntermBlock::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermBlock::traverse(sh::TIntermTraverser*)
sh::TIntermBlock::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermBlock::~TIntermBlock()
sh::TIntermBranch::TIntermBranch(sh::TIntermBranch const&)
sh::TIntermBranch::deepCopy() const
sh::TIntermBranch::getAsBranchNode()
sh::TIntermBranch::getChildCount() const
sh::TIntermBranch::getChildNode(unsigned long) const
sh::TIntermBranch::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermBranch::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermBranch::~TIntermBranch()
sh::TIntermCase::TIntermCase(sh::TIntermCase const&)
sh::TIntermCase::deepCopy() const
sh::TIntermCase::getAsCaseNode()
sh::TIntermCase::getChildCount() const
sh::TIntermCase::getChildNode(unsigned long) const
sh::TIntermCase::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermCase::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermCase::~TIntermCase()
sh::TIntermConstantUnion::FoldAggregateBuiltIn(sh::TIntermAggregate*, sh::TDiagnostics*)
sh::TIntermConstantUnion::FoldBinary(TOperator, sh::TConstantUnion const*, sh::TType const&, sh::TConstantUnion const*, sh::TType const&, sh::TDiagnostics*, sh::TSourceLoc const&)
sh::TIntermConstantUnion::deepCopy() const
sh::TIntermConstantUnion::foldUnaryComponentWise(TOperator, sh::TDiagnostics*)
sh::TIntermConstantUnion::foldUnaryNonComponentWise(TOperator)
sh::TIntermConstantUnion::getAsConstantUnion()
sh::TIntermConstantUnion::getChildCount() const
sh::TIntermConstantUnion::getChildNode(unsigned long) const
sh::TIntermConstantUnion::getConstantValue() const
sh::TIntermConstantUnion::hasConstantValue() const
sh::TIntermConstantUnion::hasSideEffects() const
sh::TIntermConstantUnion::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermConstantUnion::traverse(sh::TIntermTraverser*)
sh::TIntermConstantUnion::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermConstantUnion::~TIntermConstantUnion()
sh::TIntermDeclaration::appendDeclarator(sh::TIntermTyped*)
sh::TIntermDeclaration::deepCopy() const
sh::TIntermDeclaration::getAsDeclarationNode()
sh::TIntermDeclaration::getChildCount() const
sh::TIntermDeclaration::getChildNode(unsigned long) const
sh::TIntermDeclaration::getSequence()
sh::TIntermDeclaration::getSequence() const
sh::TIntermDeclaration::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermDeclaration::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermDeclaration::~TIntermDeclaration()
sh::TIntermExpression::TIntermExpression(sh::TType const&)
sh::TIntermExpression::getType() const
sh::TIntermExpression::~TIntermExpression()
sh::TIntermFunctionDefinition::deepCopy() const
sh::TIntermFunctionDefinition::getAsFunctionDefinition()
sh::TIntermFunctionDefinition::getChildCount() const
sh::TIntermFunctionDefinition::getChildNode(unsigned long) const
sh::TIntermFunctionDefinition::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermFunctionDefinition::traverse(sh::TIntermTraverser*)
sh::TIntermFunctionDefinition::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermFunctionDefinition::~TIntermFunctionDefinition()
sh::TIntermFunctionPrototype::TIntermFunctionPrototype(sh::TFunction const*)
sh::TIntermFunctionPrototype::deepCopy() const
sh::TIntermFunctionPrototype::getAsFunctionPrototypeNode()
sh::TIntermFunctionPrototype::getChildCount() const
sh::TIntermFunctionPrototype::getChildNode(unsigned long) const
sh::TIntermFunctionPrototype::getType() const
sh::TIntermFunctionPrototype::hasSideEffects() const
sh::TIntermFunctionPrototype::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermFunctionPrototype::traverse(sh::TIntermTraverser*)
sh::TIntermFunctionPrototype::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermFunctionPrototype::~TIntermFunctionPrototype()
sh::TIntermGlobalQualifierDeclaration::TIntermGlobalQualifierDeclaration(sh::TIntermGlobalQualifierDeclaration const&)
sh::TIntermGlobalQualifierDeclaration::TIntermGlobalQualifierDeclaration(sh::TIntermSymbol*, bool, sh::TSourceLoc const&)
sh::TIntermGlobalQualifierDeclaration::deepCopy() const
sh::TIntermGlobalQualifierDeclaration::getAsGlobalQualifierDeclarationNode()
sh::TIntermGlobalQualifierDeclaration::getChildCount() const
sh::TIntermGlobalQualifierDeclaration::getChildNode(unsigned long) const
sh::TIntermGlobalQualifierDeclaration::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermGlobalQualifierDeclaration::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermGlobalQualifierDeclaration::~TIntermGlobalQualifierDeclaration()
sh::TIntermIfElse::TIntermIfElse(sh::TIntermIfElse const&)
sh::TIntermIfElse::TIntermIfElse(sh::TIntermTyped*, sh::TIntermBlock*, sh::TIntermBlock*)
sh::TIntermIfElse::deepCopy() const
sh::TIntermIfElse::getAsIfElseNode()
sh::TIntermIfElse::getChildCount() const
sh::TIntermIfElse::getChildNode(unsigned long) const
sh::TIntermIfElse::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermIfElse::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermIfElse::~TIntermIfElse()
sh::TIntermLoop::TIntermLoop(sh::TIntermLoop const&)
sh::TIntermLoop::TIntermLoop(sh::TLoopType, sh::TIntermNode*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermBlock*)
sh::TIntermLoop::deepCopy() const
sh::TIntermLoop::getAsLoopNode()
sh::TIntermLoop::getChildCount() const
sh::TIntermLoop::getChildNode(unsigned long) const
sh::TIntermLoop::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermLoop::traverse(sh::TIntermTraverser*)
sh::TIntermLoop::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermLoop::~TIntermLoop()
sh::TIntermNode::getAsAggregate()
sh::TIntermNode::getAsBinaryNode()
sh::TIntermNode::getAsBlock()
sh::TIntermNode::getAsBranchNode()
sh::TIntermNode::getAsCaseNode()
sh::TIntermNode::getAsConstantUnion()
sh::TIntermNode::getAsDeclarationNode()
sh::TIntermNode::getAsFunctionDefinition()
sh::TIntermNode::getAsFunctionPrototypeNode()
sh::TIntermNode::getAsGlobalQualifierDeclarationNode()
sh::TIntermNode::getAsIfElseNode()
sh::TIntermNode::getAsLoopNode()
sh::TIntermNode::getAsPreprocessorDirective()
sh::TIntermNode::getAsSwitchNode()
sh::TIntermNode::getAsSwizzleNode()
sh::TIntermNode::getAsSymbolNode()
sh::TIntermNode::getAsTernaryNode()
sh::TIntermNode::getAsTyped()
sh::TIntermNode::getAsUnaryNode()
sh::TIntermNode::traverse(sh::TIntermTraverser*)
sh::TIntermNode::~TIntermNode()
sh::TIntermOperator::hasSideEffects() const
sh::TIntermOperator::isAssignment() const
sh::TIntermOperator::isConstructor() const
sh::TIntermOperator::isFunctionCall() const
sh::TIntermOperator::~TIntermOperator()
sh::TIntermSwitch::TIntermSwitch(sh::TIntermSwitch const&)
sh::TIntermSwitch::TIntermSwitch(sh::TIntermTyped*, sh::TIntermBlock*)
sh::TIntermSwitch::deepCopy() const
sh::TIntermSwitch::getAsSwitchNode()
sh::TIntermSwitch::getChildCount() const
sh::TIntermSwitch::getChildNode(unsigned long) const
sh::TIntermSwitch::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermSwitch::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermSwitch::~TIntermSwitch()
sh::TIntermSwizzle::TIntermSwizzle(sh::TIntermSwizzle const&)
sh::TIntermSwizzle::TIntermSwizzle(sh::TIntermTyped*, sh::TVector<int> const&)
sh::TIntermSwizzle::deepCopy() const
sh::TIntermSwizzle::fold(sh::TDiagnostics*)
sh::TIntermSwizzle::getAsSwizzleNode()
sh::TIntermSwizzle::getChildCount() const
sh::TIntermSwizzle::getChildNode(unsigned long) const
sh::TIntermSwizzle::hasDuplicateOffsets() const
sh::TIntermSwizzle::hasSideEffects() const
sh::TIntermSwizzle::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermSwizzle::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermSwizzle::writeOffsetsAsXYZW(sh::TInfoSinkBase*) const
sh::TIntermSwizzle::~TIntermSwizzle()
sh::TIntermSymbol::TIntermSymbol(sh::TVariable const*)
sh::TIntermSymbol::deepCopy() const
sh::TIntermSymbol::getAsSymbolNode()
sh::TIntermSymbol::getChildCount() const
sh::TIntermSymbol::getChildNode(unsigned long) const
sh::TIntermSymbol::getConstantValue() const
sh::TIntermSymbol::getName() const
sh::TIntermSymbol::getType() const
sh::TIntermSymbol::hasConstantValue() const
sh::TIntermSymbol::hasSideEffects() const
sh::TIntermSymbol::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermSymbol::traverse(sh::TIntermTraverser*)
sh::TIntermSymbol::uniqueId() const
sh::TIntermSymbol::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermSymbol::~TIntermSymbol()
sh::TIntermTernary::TIntermTernary(sh::TIntermTernary const&)
sh::TIntermTernary::TIntermTernary(sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*)
sh::TIntermTernary::deepCopy() const
sh::TIntermTernary::fold(sh::TDiagnostics*)
sh::TIntermTernary::getAsTernaryNode()
sh::TIntermTernary::getChildCount() const
sh::TIntermTernary::getChildNode(unsigned long) const
sh::TIntermTernary::hasSideEffects() const
sh::TIntermTernary::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermTernary::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermTernary::~TIntermTernary()
sh::TIntermTraverser::CompareInsertion(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&)
sh::TIntermTraverser::NodeInsertMultipleEntry::NodeInsertMultipleEntry(sh::TIntermBlock*, unsigned long, sh::TVector<sh::TIntermNode*>, sh::TVector<sh::TIntermNode*>)
sh::TIntermTraverser::NodeInsertMultipleEntry::NodeInsertMultipleEntry(sh::TIntermTraverser::NodeInsertMultipleEntry const&)
sh::TIntermTraverser::TIntermTraverser(bool, bool, bool, sh::TSymbolTable*)
sh::TIntermTraverser::getParentBlock() const
sh::TIntermTraverser::incrementDepth(sh::TIntermNode*)
sh::TIntermTraverser::insertStatementInParentBlock(sh::TIntermNode*)
sh::TIntermTraverser::insertStatementsInParentBlock(sh::TVector<sh::TIntermNode*> const&)
sh::TIntermTraverser::insertStatementsInParentBlock(sh::TVector<sh::TIntermNode*> const&, sh::TVector<sh::TIntermNode*> const&)
sh::TIntermTraverser::pushParentBlock(sh::TIntermBlock*)
sh::TIntermTraverser::queueReplacement(sh::TIntermNode*, sh::TIntermTraverser::OriginalNode)
sh::TIntermTraverser::queueReplacementWithParent(sh::TIntermNode*, sh::TIntermNode*, sh::TIntermNode*, sh::TIntermTraverser::OriginalNode)
sh::TIntermTraverser::setMaxAllowedDepth(int)
sh::TIntermTraverser::traverseAggregate(sh::TIntermAggregate*)
sh::TIntermTraverser::traverseBinary(sh::TIntermBinary*)
sh::TIntermTraverser::traverseBlock(sh::TIntermBlock*)
sh::TIntermTraverser::traverseFunctionDefinition(sh::TIntermFunctionDefinition*)
sh::TIntermTraverser::traverseLoop(sh::TIntermLoop*)
sh::TIntermTraverser::traverseUnary(sh::TIntermUnary*)
sh::TIntermTraverser::updateTree(sh::TCompiler*, sh::TIntermNode*)
sh::TIntermTraverser::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::TIntermTraverser::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::TIntermTraverser::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::TIntermTraverser::visitBranch(sh::Visit, sh::TIntermBranch*)
sh::TIntermTraverser::visitCase(sh::Visit, sh::TIntermCase*)
sh::TIntermTraverser::visitConstantUnion(sh::TIntermConstantUnion*)
sh::TIntermTraverser::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::TIntermTraverser::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::TIntermTraverser::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::TIntermTraverser::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::TIntermTraverser::visitIfElse(sh::Visit, sh::TIntermIfElse*)
sh::TIntermTraverser::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::TIntermTraverser::visitPreprocessorDirective(sh::TIntermPreprocessorDirective*)
sh::TIntermTraverser::visitSwitch(sh::Visit, sh::TIntermSwitch*)
sh::TIntermTraverser::visitSwizzle(sh::Visit, sh::TIntermSwizzle*)
sh::TIntermTraverser::visitSymbol(sh::TIntermSymbol*)
sh::TIntermTraverser::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::TIntermTraverser::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::TIntermTraverser::~TIntermTraverser()
sh::TIntermTyped::fold(sh::TDiagnostics*)
sh::TIntermTyped::getAsTyped()
sh::TIntermTyped::getConstantValue() const
sh::TIntermTyped::hasConstantValue() const
sh::TIntermTyped::~TIntermTyped()
sh::TIntermUnary::TIntermUnary(TOperator, sh::TIntermTyped*, sh::TFunction const*)
sh::TIntermUnary::TIntermUnary(sh::TIntermUnary const&)
sh::TIntermUnary::deepCopy() const
sh::TIntermUnary::fold(sh::TDiagnostics*)
sh::TIntermUnary::getAsUnaryNode()
sh::TIntermUnary::getChildCount() const
sh::TIntermUnary::getChildNode(unsigned long) const
sh::TIntermUnary::hasSideEffects() const
sh::TIntermUnary::promote()
sh::TIntermUnary::replaceChildNode(sh::TIntermNode*, sh::TIntermNode*)
sh::TIntermUnary::traverse(sh::TIntermTraverser*)
sh::TIntermUnary::visit(sh::Visit, sh::TIntermTraverser*)
sh::TIntermUnary::~TIntermUnary()
sh::TInterpolationQualifierWrapper::getQualifierString() const
sh::TInterpolationQualifierWrapper::getRank() const
sh::TInterpolationQualifierWrapper::getType() const
sh::TInterpolationQualifierWrapper::~TInterpolationQualifierWrapper()
sh::TInvariantQualifierWrapper::getQualifierString() const
sh::TInvariantQualifierWrapper::getRank() const
sh::TInvariantQualifierWrapper::getType() const
sh::TInvariantQualifierWrapper::~TInvariantQualifierWrapper()
sh::TLValueTrackingTraverser::TLValueTrackingTraverser(bool, bool, bool, sh::TSymbolTable*)
sh::TLValueTrackingTraverser::traverseAggregate(sh::TIntermAggregate*)
sh::TLValueTrackingTraverser::traverseBinary(sh::TIntermBinary*)
sh::TLValueTrackingTraverser::traverseUnary(sh::TIntermUnary*)
sh::TLValueTrackingTraverser::~TLValueTrackingTraverser()
sh::TLayoutQualifierWrapper::getQualifierString() const
sh::TLayoutQualifierWrapper::getRank() const
sh::TLayoutQualifierWrapper::getType() const
sh::TLayoutQualifierWrapper::~TLayoutQualifierWrapper()
sh::TMemoryQualifierWrapper::getQualifierString() const
sh::TMemoryQualifierWrapper::getRank() const
sh::TMemoryQualifierWrapper::getType() const
sh::TMemoryQualifierWrapper::~TMemoryQualifierWrapper()
sh::TOutputESSL::TOutputESSL(sh::TInfoSinkBase&, ShArrayIndexClampingStrategy, unsigned long (*)(char const*, unsigned long), std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >&, sh::TSymbolTable*, unsigned int, int, bool, unsigned long)
sh::TOutputESSL::translateTextureFunction(sh::ImmutableString const&, unsigned long const&)
sh::TOutputESSL::writeVariablePrecision(sh::TPrecision)
sh::TOutputESSL::~TOutputESSL()
sh::TOutputGLSL::TOutputGLSL(sh::TInfoSinkBase&, ShArrayIndexClampingStrategy, unsigned long (*)(char const*, unsigned long), std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >&, sh::TSymbolTable*, unsigned int, int, ShShaderOutput, unsigned long)
sh::TOutputGLSL::translateTextureFunction(sh::ImmutableString const&, unsigned long const&)
sh::TOutputGLSL::translateTextureFunction(sh::ImmutableString const&, unsigned long const&)::legacyToCoreRename
sh::TOutputGLSL::translateTextureFunction(sh::ImmutableString const&, unsigned long const&)::simpleRename
sh::TOutputGLSL::visitSymbol(sh::TIntermSymbol*)
sh::TOutputGLSL::writeVariablePrecision(sh::TPrecision)
sh::TOutputGLSL::~TOutputGLSL()
sh::TOutputGLSLBase::TOutputGLSLBase(sh::TInfoSinkBase&, ShArrayIndexClampingStrategy, unsigned long (*)(char const*, unsigned long), std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >&, sh::TSymbolTable*, unsigned int, int, ShShaderOutput, unsigned long)
sh::TOutputGLSLBase::declareInterfaceBlock(sh::TInterfaceBlock const*)
sh::TOutputGLSLBase::declareInterfaceBlockLayout(sh::TInterfaceBlock const*)
sh::TOutputGLSLBase::declareStruct(sh::TStructure const*)
sh::TOutputGLSLBase::getCommonLayoutQualifiers(sh::TIntermTyped*)
sh::TOutputGLSLBase::getMemoryQualifiers(sh::TType const&)
sh::TOutputGLSLBase::structDeclared(sh::TStructure const*) const
sh::TOutputGLSLBase::translateTextureFunction(sh::ImmutableString const&, unsigned long const&)
sh::TOutputGLSLBase::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::TOutputGLSLBase::visitBinary(sh::Visit, sh::TIntermBinary*)
sh::TOutputGLSLBase::visitBlock(sh::Visit, sh::TIntermBlock*)
sh::TOutputGLSLBase::visitBranch(sh::Visit, sh::TIntermBranch*)
sh::TOutputGLSLBase::visitCase(sh::Visit, sh::TIntermCase*)
sh::TOutputGLSLBase::visitCodeBlock(sh::TIntermBlock*)
sh::TOutputGLSLBase::visitConstantUnion(sh::TIntermConstantUnion*)
sh::TOutputGLSLBase::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::TOutputGLSLBase::visitFunctionDefinition(sh::Visit, sh::TIntermFunctionDefinition*)
sh::TOutputGLSLBase::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::TOutputGLSLBase::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::TOutputGLSLBase::visitIfElse(sh::Visit, sh::TIntermIfElse*)
sh::TOutputGLSLBase::visitLoop(sh::Visit, sh::TIntermLoop*)
sh::TOutputGLSLBase::visitPreprocessorDirective(sh::TIntermPreprocessorDirective*)
sh::TOutputGLSLBase::visitSwitch(sh::Visit, sh::TIntermSwitch*)
sh::TOutputGLSLBase::visitSwizzle(sh::Visit, sh::TIntermSwizzle*)
sh::TOutputGLSLBase::visitSymbol(sh::TIntermSymbol*)
sh::TOutputGLSLBase::visitTernary(sh::Visit, sh::TIntermTernary*)
sh::TOutputGLSLBase::visitUnary(sh::Visit, sh::TIntermUnary*)
sh::TOutputGLSLBase::writeBuiltInFunctionTriplet(sh::Visit, TOperator, bool)
sh::TOutputGLSLBase::writeConstantUnion(sh::TType const&, sh::TConstantUnion const*)
sh::TOutputGLSLBase::writeConstructorTriplet(sh::Visit, sh::TType const&)
sh::TOutputGLSLBase::writeFieldLayoutQualifier(sh::TField const*)
sh::TOutputGLSLBase::writeFunctionParameters(sh::TFunction const*)
sh::TOutputGLSLBase::writeLayoutQualifier(sh::TIntermTyped*)
sh::TOutputGLSLBase::writeQualifier(sh::TQualifier, sh::TType const&, sh::TSymbol const*)
sh::TOutputGLSLBase::writeVariableType(sh::TType const&, sh::TSymbol const*, bool)
sh::TOutputGLSLBase::~TOutputGLSLBase()
sh::TOutputVulkanGLSL::TOutputVulkanGLSL(sh::TInfoSinkBase&, ShArrayIndexClampingStrategy, unsigned long (*)(char const*, unsigned long), std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >&, sh::TSymbolTable*, unsigned int, int, ShShaderOutput, bool, bool, unsigned long)
sh::TOutputVulkanGLSL::writeLayoutQualifier(sh::TIntermTyped*)
sh::TOutputVulkanGLSL::writeStructType(sh::TStructure const*)
sh::TOutputVulkanGLSL::writeVariablePrecision(sh::TPrecision)
sh::TOutputVulkanGLSL::writeVariableType(sh::TType const&, sh::TSymbol const*, bool)
sh::TOutputVulkanGLSL::~TOutputVulkanGLSL()
sh::TParseContext::AtomicCounterBindingState::insertSpan(int, unsigned long)
sh::TParseContext::TParseContext(sh::TSymbolTable&, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > >&, unsigned int, ShShaderSpec, unsigned long, bool, sh::TDiagnostics*, ShBuiltInResources const&, ShShaderOutput)
sh::TParseContext::addAssign(TOperator, sh::TIntermTyped*, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addBinaryMath(TOperator, sh::TIntermTyped*, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addBinaryMathBooleanResult(TOperator, sh::TIntermTyped*, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addBinaryMathInternal(TOperator, sh::TIntermTyped*, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addBranch(TOperator, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addBranch(TOperator, sh::TSourceLoc const&)
sh::TParseContext::addCase(sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addComma(sh::TIntermTyped*, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addConditionInitializer(sh::TPublicType const&, sh::ImmutableString const&, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addConstructor(sh::TFunctionLookup*, sh::TSourceLoc const&)
sh::TParseContext::addConstructorFunc(sh::TPublicType const&)
sh::TParseContext::addDefault(sh::TSourceLoc const&)
sh::TParseContext::addEmptyStatement(sh::TSourceLoc const&)
sh::TParseContext::addFieldSelectionExpression(sh::TIntermTyped*, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSourceLoc const&)
sh::TParseContext::addFullySpecifiedType(sh::TPublicType*)
sh::TParseContext::addFullySpecifiedType(sh::TTypeQualifierBuilder const&, sh::TPublicType const&)
sh::TParseContext::addFunctionCallOrMethod(sh::TFunctionLookup*, sh::TSourceLoc const&)
sh::TParseContext::addFunctionDefinition(sh::TIntermFunctionPrototype*, sh::TIntermBlock*, sh::TSourceLoc const&)
sh::TParseContext::addFunctionPrototypeDeclaration(sh::TFunction const&, sh::TSourceLoc const&)
sh::TParseContext::addIfElse(sh::TIntermTyped*, sh::TIntermNodePair, sh::TSourceLoc const&)
sh::TParseContext::addIndexExpression(sh::TIntermTyped*, sh::TSourceLoc const&, sh::TIntermTyped*)
sh::TParseContext::addInterfaceBlock(sh::TTypeQualifierBuilder const&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TVector<sh::TField*>*, sh::ImmutableString const&, sh::TSourceLoc const&, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addLoop(sh::TLoopType, sh::TIntermNode*, sh::TIntermNode*, sh::TIntermTyped*, sh::TIntermNode*, sh::TSourceLoc const&)
sh::TParseContext::addMethod(sh::TFunctionLookup*, sh::TSourceLoc const&)
sh::TParseContext::addNonConstructorFunc(sh::ImmutableString const&, sh::TSymbol const*)
sh::TParseContext::addNonConstructorFunctionCall(sh::TFunctionLookup*, sh::TSourceLoc const&)
sh::TParseContext::addScalarLiteral(sh::TConstantUnion const*, sh::TSourceLoc const&)
sh::TParseContext::addStructDeclaratorList(sh::TPublicType const&, sh::TVector<sh::TDeclarator*> const*)
sh::TParseContext::addStructDeclaratorListWithQualifiers(sh::TTypeQualifierBuilder const&, sh::TPublicType*, sh::TVector<sh::TDeclarator*> const*)
sh::TParseContext::addStructFieldList(sh::TVector<sh::TField*>*, sh::TSourceLoc const&)
sh::TParseContext::addStructure(sh::TSourceLoc const&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TVector<sh::TField*>*)
sh::TParseContext::addSwitch(sh::TIntermTyped*, sh::TIntermBlock*, sh::TSourceLoc const&)
sh::TParseContext::addTernarySelection(sh::TIntermTyped*, sh::TIntermTyped*, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addUnaryMath(TOperator, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::addUnaryMathLValue(TOperator, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::appendStatement(sh::TIntermBlock*, sh::TIntermNode*)
sh::TParseContext::assignError(sh::TSourceLoc const&, char const*, sh::TType const&, sh::TType const&)
sh::TParseContext::binaryOpCommonCheck(TOperator, sh::TIntermTyped*, sh::TIntermTyped*, sh::TSourceLoc const&)
sh::TParseContext::binaryOpError(sh::TSourceLoc const&, char const*, sh::TType const&, sh::TType const&)
sh::TParseContext::checkArrayElementIsNotArray(sh::TSourceLoc const&, sh::TPublicType const&)
sh::TParseContext::checkArrayOfArraysInOut(sh::TSourceLoc const&, sh::TPublicType const&, sh::TType const&)
sh::TParseContext::checkAtomicCounterOffsetDoesNotOverlap(bool, sh::TSourceLoc const&, sh::TType*)
sh::TParseContext::checkAtomicMemoryBuiltinFunctions(sh::TIntermAggregate*)
sh::TParseContext::checkBindingIsValid(sh::TSourceLoc const&, sh::TType const&)
sh::TParseContext::checkCanBeDeclaredWithoutInitializer(sh::TSourceLoc const&, sh::ImmutableString const&, sh::TType*)
sh::TParseContext::checkCanBeLValue(sh::TSourceLoc const&, char const*, sh::TIntermTyped*)
sh::TParseContext::checkCanUseExtension(sh::TSourceLoc const&, sh::TExtension)
sh::TParseContext::checkConstructorArguments(sh::TSourceLoc const&, sh::TVector<sh::TIntermNode*> const&, sh::TType const&)
sh::TParseContext::checkGeometryShaderInputAndSetArraySize(sh::TSourceLoc const&, sh::ImmutableString const&, sh::TType*)
sh::TParseContext::checkImageMemoryAccessForBuiltinFunctions(sh::TIntermAggregate*)
sh::TParseContext::checkImageMemoryAccessForUserDefinedFunctions(sh::TFunction const*, sh::TIntermAggregate const*)
sh::TParseContext::checkIndexLessThan(bool, sh::TSourceLoc const&, int, int, char const*)
sh::TParseContext::checkInputOutputTypeIsValidES3(sh::TQualifier, sh::TPublicType const&, sh::TSourceLoc const&)
sh::TParseContext::checkIsAtGlobalLevel(sh::TSourceLoc const&, char const*)
sh::TParseContext::checkIsBelowStructNestingLimit(sh::TSourceLoc const&, sh::TField const&)
sh::TParseContext::checkIsConst(sh::TIntermTyped*)
sh::TParseContext::checkIsNotOpaqueType(sh::TSourceLoc const&, sh::TTypeSpecifierNonArray const&, char const*)
sh::TParseContext::checkIsNotReserved(sh::TSourceLoc const&, sh::ImmutableString const&)
sh::TParseContext::checkIsParameterQualifierValid(sh::TSourceLoc const&, sh::TTypeQualifierBuilder const&, sh::TType*)
sh::TParseContext::checkIsScalarBool(sh::TSourceLoc const&, sh::TIntermTyped const*)
sh::TParseContext::checkIsScalarInteger(sh::TIntermTyped*, char const*)
sh::TParseContext::checkIsValidArraySize(sh::TSourceLoc const&, sh::TIntermTyped*)
sh::TParseContext::checkIsValidTypeAndQualifierForArray(sh::TSourceLoc const&, sh::TPublicType const&)
sh::TParseContext::checkLocalVariableConstStorageQualifier(sh::TQualifierWrapperBase const&)
sh::TParseContext::checkMemoryQualifierIsNotSpecified(sh::TMemoryQualifier const&, sh::TSourceLoc const&)
sh::TParseContext::checkPrecisionSpecified(sh::TSourceLoc const&, sh::TPrecision, sh::TBasicType)
sh::TParseContext::checkSingleTextureOffset(sh::TSourceLoc const&, sh::TConstantUnion const*, unsigned long, int, int)
sh::TParseContext::checkTextureGather(sh::TIntermAggregate*)
sh::TParseContext::checkTextureOffset(sh::TIntermAggregate*)
sh::TParseContext::checkUnsizedArrayConstructorArgumentDimensionality(sh::TVector<sh::TIntermNode*> const&, sh::TType, sh::TSourceLoc const&)
sh::TParseContext::combineStructFieldLists(sh::TVector<sh::TField*>*, sh::TVector<sh::TField*> const*, sh::TSourceLoc const&)
sh::TParseContext::createPrototypeNodeFromFunction(sh::TFunction const&, sh::TSourceLoc const&, bool)
sh::TParseContext::createTypeQualifierBuilder(sh::TSourceLoc const&)
sh::TParseContext::createUnaryMath(TOperator, sh::TIntermTyped*, sh::TSourceLoc const&, sh::TFunction const*)
sh::TParseContext::declarationQualifierErrorCheck(sh::TQualifier, sh::TLayoutQualifier const&, sh::TSourceLoc const&)
sh::TParseContext::declareVariable(sh::TSourceLoc const&, sh::ImmutableString const&, sh::TType const*, sh::TVariable**)
sh::TParseContext::enterStructDeclaration(sh::TSourceLoc const&, sh::ImmutableString const&)
sh::TParseContext::error(sh::TSourceLoc const&, char const*, char const*)
sh::TParseContext::error(sh::TSourceLoc const&, char const*, sh::ImmutableString const&)
sh::TParseContext::executeInitializer(sh::TSourceLoc const&, sh::ImmutableString const&, sh::TType*, sh::TIntermTyped*, sh::TIntermBinary**)
sh::TParseContext::functionCallRValueLValueErrorCheck(sh::TFunction const*, sh::TIntermAggregate*)
sh::TParseContext::getComputeShaderLocalSize() const
sh::TParseContext::getNamedVariable(sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSymbol const*)
sh::TParseContext::isExtensionEnabled(sh::TExtension) const
sh::TParseContext::isMultiplicationTypeCombinationValid(TOperator, sh::TType const&, sh::TType const&)
sh::TParseContext::joinLayoutQualifiers(sh::TLayoutQualifier, sh::TLayoutQualifier, sh::TSourceLoc const&)
sh::TParseContext::nonEmptyDeclarationErrorCheck(sh::TPublicType const&, sh::TSourceLoc const&)
sh::TParseContext::parseArrayDeclarator(sh::TPublicType&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSourceLoc const&, sh::TVector<unsigned int> const&, sh::TIntermDeclaration*)
sh::TParseContext::parseArrayInitDeclarator(sh::TPublicType const&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSourceLoc const&, sh::TVector<unsigned int> const&, sh::TSourceLoc const&, sh::TIntermTyped*, sh::TIntermDeclaration*)
sh::TParseContext::parseDeclarator(sh::TPublicType&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TIntermDeclaration*)
sh::TParseContext::parseDefaultPrecisionQualifier(sh::TPrecision, sh::TPublicType const&, sh::TSourceLoc const&)
sh::TParseContext::parseFunctionDeclarator(sh::TSourceLoc const&, sh::TFunction*)
sh::TParseContext::parseFunctionDefinitionHeader(sh::TSourceLoc const&, sh::TFunction const*, sh::TIntermFunctionPrototype**)
sh::TParseContext::parseFunctionHeader(sh::TPublicType const&, sh::ImmutableString const&, sh::TSourceLoc const&)
sh::TParseContext::parseGeometryShaderInputLayoutQualifier(sh::TTypeQualifier const&)
sh::TParseContext::parseGeometryShaderOutputLayoutQualifier(sh::TTypeQualifier const&)
sh::TParseContext::parseGlobalLayoutQualifier(sh::TTypeQualifierBuilder const&)
sh::TParseContext::parseGlobalQualifierDeclaration(sh::TTypeQualifierBuilder const&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSymbol const*)
sh::TParseContext::parseGlobalStorageQualifier(sh::TQualifier, sh::TSourceLoc const&)
sh::TParseContext::parseInOutQualifier(sh::TSourceLoc const&)
sh::TParseContext::parseInQualifier(sh::TSourceLoc const&)
sh::TParseContext::parseInitDeclarator(sh::TPublicType const&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSourceLoc const&, sh::TIntermTyped*, sh::TIntermDeclaration*)
sh::TParseContext::parseLayoutQualifier(sh::ImmutableString const&, sh::TSourceLoc const&)
sh::TParseContext::parseLayoutQualifier(sh::ImmutableString const&, sh::TSourceLoc const&, int, sh::TSourceLoc const&)
sh::TParseContext::parseLocalSize(sh::ImmutableString const&, sh::TSourceLoc const&, int, sh::TSourceLoc const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, sh::WorkGroupSize*)
sh::TParseContext::parseOutQualifier(sh::TSourceLoc const&)
sh::TParseContext::parseParameterArrayDeclarator(sh::ImmutableString const&, sh::TSourceLoc const&, sh::TVector<unsigned int> const&, sh::TSourceLoc const&, sh::TPublicType*)
sh::TParseContext::parseParameterDeclarator(sh::TPublicType const&, sh::ImmutableString const&, sh::TSourceLoc const&)
sh::TParseContext::parseParameterDeclarator(sh::TType*, sh::ImmutableString const&, sh::TSourceLoc const&)
sh::TParseContext::parseSingleArrayDeclaration(sh::TPublicType&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSourceLoc const&, sh::TVector<unsigned int> const&)
sh::TParseContext::parseSingleArrayInitDeclaration(sh::TPublicType&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSourceLoc const&, sh::TVector<unsigned int> const&, sh::TSourceLoc const&, sh::TIntermTyped*)
sh::TParseContext::parseSingleDeclaration(sh::TPublicType&, sh::TSourceLoc const&, sh::ImmutableString const&)
sh::TParseContext::parseSingleInitDeclaration(sh::TPublicType const&, sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSourceLoc const&, sh::TIntermTyped*)
sh::TParseContext::parseStructArrayDeclarator(sh::ImmutableString const&, sh::TSourceLoc const&, sh::TVector<unsigned int> const*)
sh::TParseContext::parseStructDeclarator(sh::ImmutableString const&, sh::TSourceLoc const&)
sh::TParseContext::parseVariableIdentifier(sh::TSourceLoc const&, sh::ImmutableString const&, sh::TSymbol const*)
sh::TParseContext::parseVaryingQualifier(sh::TSourceLoc const&)
sh::TParseContext::parseVectorFields(sh::TSourceLoc const&, sh::ImmutableString const&, int, sh::TVector<int>*)
sh::TParseContext::setAtomicCounterBindingDefaultOffset(sh::TPublicType const&, sh::TSourceLoc const&)
sh::TParseContext::unaryOpError(sh::TSourceLoc const&, char const*, sh::TType const&)
sh::TParseContext::warning(sh::TSourceLoc const&, char const*, char const*)
sh::TParseContext::~TParseContext()
sh::TPreciseQualifierWrapper::getQualifierString() const
sh::TPreciseQualifierWrapper::getRank() const
sh::TPreciseQualifierWrapper::getType() const
sh::TPreciseQualifierWrapper::~TPreciseQualifierWrapper()
sh::TPrecisionQualifierWrapper::getQualifierString() const
sh::TPrecisionQualifierWrapper::getRank() const
sh::TPrecisionQualifierWrapper::getType() const
sh::TPrecisionQualifierWrapper::~TPrecisionQualifierWrapper()
sh::TPublicType::clearArrayness()
sh::TPublicType::initialize(sh::TTypeSpecifierNonArray const&, sh::TQualifier)
sh::TPublicType::isAggregate() const
sh::TPublicType::isArray() const
sh::TPublicType::isStructureContainingArrays() const
sh::TPublicType::isStructureContainingType(sh::TBasicType) const
sh::TPublicType::setArraySizes(sh::TVector<unsigned int>*)
sh::TQualifierWrapperBase::~TQualifierWrapperBase()
sh::TShHandleBase::getAsCompiler()
sh::TShHandleBase::~TShHandleBase()
sh::TStorageQualifierWrapper::getQualifierString() const
sh::TStorageQualifierWrapper::getRank() const
sh::TStorageQualifierWrapper::getType() const
sh::TStorageQualifierWrapper::~TStorageQualifierWrapper()
sh::TStructure::TStructure(sh::TSymbolTable*, sh::ImmutableString const&, sh::TVector<sh::TField*> const*, sh::SymbolType)
sh::TStructure::TStructure(sh::TSymbolUniqueId const&, sh::ImmutableString const&, sh::TExtension, sh::TVector<sh::TField*> const*)
sh::TStructure::setName(sh::ImmutableString const&)
sh::TSymbol::getMangledName() const
sh::TSymbol::name() const
sh::TSymbolTable::TSymbolTable()
sh::TSymbolTable::addInvariantVarying(sh::TVariable const&)
sh::TSymbolTable::atGlobalLevel() const
sh::TSymbolTable::clearCompilationResults()
sh::TSymbolTable::declare(sh::TSymbol*)
sh::TSymbolTable::declareInternal(sh::TSymbol*)
sh::TSymbolTable::declareUserDefinedFunction(sh::TFunction*, bool)
sh::TSymbolTable::find(sh::ImmutableString const&, int) const
sh::TSymbolTable::findBuiltIn(sh::ImmutableString const&, int) const
sh::TSymbolTable::findBuiltInWithConversion(std::__1::vector<sh::ImmutableString, std::__1::allocator<sh::ImmutableString> > const&, int) const
sh::TSymbolTable::findGlobal(sh::ImmutableString const&) const
sh::TSymbolTable::findGlobalWithConversion(std::__1::vector<sh::ImmutableString, std::__1::allocator<sh::ImmutableString> > const&) const
sh::TSymbolTable::findUserDefined(sh::ImmutableString const&) const
sh::TSymbolTable::findUserDefinedFunction(sh::ImmutableString const&) const
sh::TSymbolTable::getDefaultPrecision(sh::TBasicType) const
sh::TSymbolTable::getGlInVariableWithArraySize() const
sh::TSymbolTable::getOrCreateVariableMetadata(sh::TVariable const&)
sh::TSymbolTable::gl_FragData() const
sh::TSymbolTable::gl_SecondaryFragDataEXT() const
sh::TSymbolTable::initializeBuiltInVariables(unsigned int, ShShaderSpec, ShBuiltInResources const&)
sh::TSymbolTable::initializeBuiltIns(unsigned int, ShShaderSpec, ShBuiltInResources const&)
sh::TSymbolTable::isEmpty() const
sh::TSymbolTable::isStaticallyUsed(sh::TVariable const&) const
sh::TSymbolTable::isUnmangledBuiltInName(sh::ImmutableString const&, int, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > > const&) const
sh::TSymbolTable::isVaryingInvariant(sh::TVariable const&) const
sh::TSymbolTable::kLastBuiltInId
sh::TSymbolTable::markFunctionHasPrototypeDeclaration(sh::ImmutableString const&, bool*) const
sh::TSymbolTable::markStaticRead(sh::TVariable const&)
sh::TSymbolTable::markStaticWrite(sh::TVariable const&)
sh::TSymbolTable::nextUniqueIdValue()
sh::TSymbolTable::pop()
sh::TSymbolTable::push()
sh::TSymbolTable::setDefaultPrecision(sh::TBasicType, sh::TPrecision)
sh::TSymbolTable::setFunctionParameterNamesFromDefinition(sh::TFunction const*, bool*) const
sh::TSymbolTable::setGlInArraySize(unsigned int)
sh::TSymbolTable::setGlobalInvariant(bool)
sh::TSymbolTable::~TSymbolTable()
sh::TSymbolUniqueId::TSymbolUniqueId(sh::TSymbolTable*)
sh::TType::TType()
sh::TType::TType(sh::TBasicType, sh::TPrecision, sh::TQualifier, unsigned char, unsigned char)
sh::TType::TType(sh::TBasicType, unsigned char, unsigned char)
sh::TType::TType(sh::TInterfaceBlock const*, sh::TQualifier, sh::TLayoutQualifier)
sh::TType::TType(sh::TPublicType const&)
sh::TType::TType(sh::TStructure const*, bool)
sh::TType::TType(sh::TType const&)
sh::TType::buildMangledName() const
sh::TType::canBeConstructed() const
sh::TType::canReplaceWithConstantUnion() const
sh::TType::getArraySizeProduct() const
sh::TType::getBuiltInTypeNameString() const
sh::TType::getDeepestStructNesting() const
sh::TType::getLocationCount() const
sh::TType::getMangledName() const
sh::TType::getObjectSize() const
sh::TType::isElementTypeOf(sh::TType const&) const
sh::TType::isNamelessStruct() const
sh::TType::isStructureContainingArrays() const
sh::TType::isStructureContainingMatrices() const
sh::TType::isStructureContainingSamplers() const
sh::TType::isStructureContainingType(sh::TBasicType) const
sh::TType::isUnsizedArray() const
sh::TType::makeArray(unsigned int)
sh::TType::makeArrays(sh::TSpan<unsigned int const> const&)
sh::TType::operator=(sh::TType const&)
sh::TType::realize()
sh::TType::setArraySize(unsigned long, unsigned int)
sh::TType::setBasicType(sh::TBasicType)
sh::TType::setInterfaceBlock(sh::TInterfaceBlock const*)
sh::TType::setPrimarySize(unsigned char)
sh::TType::setSecondarySize(unsigned char)
sh::TType::sizeOutermostUnsizedArray(unsigned int)
sh::TType::sizeUnsizedArrays(sh::TSpan<unsigned int const> const&)
sh::TType::toArrayBaseType()
sh::TType::toArrayElementType()
sh::TTypeQualifierBuilder::TTypeQualifierBuilder(sh::TStorageQualifierWrapper const*, int)
sh::TTypeQualifierBuilder::appendQualifier(sh::TQualifierWrapperBase const*)
sh::TTypeQualifierBuilder::checkSequenceIsValid(sh::TDiagnostics*) const
sh::TTypeQualifierBuilder::getParameterTypeQualifier(sh::TDiagnostics*) const
sh::TTypeQualifierBuilder::getVariableTypeQualifier(sh::TDiagnostics*) const
sh::TVariable::TVariable(sh::TSymbolTable*, sh::ImmutableString const&, sh::TType const*, sh::SymbolType, sh::TExtension)
sh::TVersionGLSL::TVersionGLSL(unsigned int, TPragma const&, ShShaderOutput)
sh::TVersionGLSL::visitAggregate(sh::Visit, sh::TIntermAggregate*)
sh::TVersionGLSL::visitDeclaration(sh::Visit, sh::TIntermDeclaration*)
sh::TVersionGLSL::visitFunctionPrototype(sh::TIntermFunctionPrototype*)
sh::TVersionGLSL::visitGlobalQualifierDeclaration(sh::Visit, sh::TIntermGlobalQualifierDeclaration*)
sh::TVersionGLSL::visitSymbol(sh::TIntermSymbol*)
sh::TVersionGLSL::~TVersionGLSL()
sh::TranslatorESSL::TranslatorESSL(unsigned int, ShShaderSpec)
sh::TranslatorESSL::initBuiltInFunctionEmulator(sh::BuiltInFunctionEmulator*, unsigned long)
sh::TranslatorESSL::shouldFlattenPragmaStdglInvariantAll()
sh::TranslatorESSL::translate(sh::TIntermBlock*, unsigned long, sh::PerformanceDiagnostics*)
sh::TranslatorESSL::writeExtensionBehavior(unsigned long)
sh::TranslatorESSL::~TranslatorESSL()
sh::TranslatorGLSL::TranslatorGLSL(unsigned int, ShShaderSpec, ShShaderOutput)
sh::TranslatorGLSL::initBuiltInFunctionEmulator(sh::BuiltInFunctionEmulator*, unsigned long)
sh::TranslatorGLSL::shouldCollectVariables(unsigned long)
sh::TranslatorGLSL::shouldFlattenPragmaStdglInvariantAll()
sh::TranslatorGLSL::translate(sh::TIntermBlock*, unsigned long, sh::PerformanceDiagnostics*)
sh::TranslatorGLSL::writeExtensionBehavior(sh::TIntermNode*, unsigned long)
sh::TranslatorGLSL::writeVersion(sh::TIntermNode*)
sh::TranslatorGLSL::~TranslatorGLSL()
sh::TranslatorVulkan::TranslatorVulkan(unsigned int, ShShaderSpec)
sh::TranslatorVulkan::shouldFlattenPragmaStdglInvariantAll()
sh::TranslatorVulkan::transformDepthBeforeCorrection(sh::TIntermBlock*, sh::TVariable const*)
sh::TranslatorVulkan::translate(sh::TIntermBlock*, unsigned long, sh::PerformanceDiagnostics*)
sh::TranslatorVulkan::translateImpl(sh::TIntermBlock*, unsigned long, sh::PerformanceDiagnostics*, sh::TVariable const**, sh::TOutputVulkanGLSL*)
sh::TranslatorVulkan::~TranslatorVulkan()
sh::TraverseShaderVariable(sh::ShaderVariable const&, bool, sh::ShaderVariableVisitor*)
sh::UnfoldShortCircuitAST(sh::TCompiler*, sh::TIntermBlock*)
sh::UnmangledEntry::matches(sh::ImmutableString const&, ShShaderSpec, int, unsigned int, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > > const&) const
sh::UseInterfaceBlockFields(sh::TCompiler*, sh::TIntermBlock*, std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> > const&, sh::TSymbolTable const&)
sh::ValidateAST(sh::TIntermNode*, sh::TDiagnostics*, sh::ValidateASTOptions const&)
sh::ValidateGlobalInitializer(sh::TIntermTyped*, int, bool, bool, bool*)
sh::ValidateLimitations(sh::TIntermNode*, unsigned int, sh::TSymbolTable*, sh::TDiagnostics*)
sh::ValidateMaxParameters(sh::TIntermBlock*, unsigned int)
sh::ValidateOutputs(sh::TIntermBlock*, std::__1::map<sh::TExtension, sh::TBehavior, std::__1::less<sh::TExtension>, std::__1::allocator<std::__1::pair<sh::TExtension const, sh::TBehavior> > > const&, int, sh::TDiagnostics*)
sh::ValidateSwitchStatementList(sh::TBasicType, sh::TDiagnostics*, sh::TIntermBlock*, sh::TSourceLoc const&)
sh::ValidateVaryingLocations(sh::TIntermBlock*, sh::TDiagnostics*, unsigned int)
sh::VariableNameVisitor::VariableNameVisitor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
sh::VariableNameVisitor::enterArray(sh::ShaderVariable const&)
sh::VariableNameVisitor::enterArrayElement(sh::ShaderVariable const&, unsigned int)
sh::VariableNameVisitor::enterStruct(sh::ShaderVariable const&)
sh::VariableNameVisitor::enterStructAccess(sh::ShaderVariable const&, bool)
sh::VariableNameVisitor::exitArray(sh::ShaderVariable const&)
sh::VariableNameVisitor::exitArrayElement(sh::ShaderVariable const&, unsigned int)
sh::VariableNameVisitor::exitStruct(sh::ShaderVariable const&)
sh::VariableNameVisitor::exitStructAccess(sh::ShaderVariable const&, bool)
sh::VariableNameVisitor::visitNamedSampler(sh::ShaderVariable const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
sh::VariableNameVisitor::visitSampler(sh::ShaderVariable const&)
sh::VariableNameVisitor::visitVariable(sh::ShaderVariable const&, bool)
sh::VariableNameVisitor::~VariableNameVisitor()
sh::VectorizeVectorScalarArithmetic(sh::TCompiler*, sh::TIntermBlock*, sh::TSymbolTable*)
sh::WorkGroupSize::fill(int)
sh::WorkGroupSize::isAnyValueSet() const
sh::WorkGroupSize::isDeclared() const
sh::WorkGroupSize::isWorkGroupSizeMatching(sh::WorkGroupSize const&) const
sh::WorkGroupSize::operator[](unsigned long)
sh::WorkGroupSize::operator[](unsigned long) const
sh::WorkGroupSize::size() const
sh::WriteGeometryShaderLayoutQualifiers(sh::TInfoSinkBase&, sh::TLayoutPrimitiveType, int, sh::TLayoutPrimitiveType, int)
sh::getBasicString(sh::TBasicType)
sh::getBehavior(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::kDisable
sh::getBehavior(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::kEnable
sh::getBehavior(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::kRequire
sh::getBehavior(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::kWarn
sh::getQualifierString(sh::TQualifier)
sh::kDefaultBlockMemberInfo
sh::kEmptyImmutableString
sh::kUserDefinedNamePrefix
sh::strtof_clamp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, float*)
sh::vk::kAtomicCountersBlockName
sh::vk::kDefaultUniformsNameCS
sh::vk::kDefaultUniformsNameFS
sh::vk::kDefaultUniformsNameGS
sh::vk::kDefaultUniformsNameVS
sh::vk::kDriverUniformsBlockName
sh::vk::kDriverUniformsVarName
sh::vk::kLineRasterEmulationPosition
sha1.cc
shade_model_flat
shader
shader input/output
shader record EXT
shader record NV
shader storage block
shader storage block binding greater than MAX_SHADER_STORAGE_BUFFER_BINDINGS
shadercallcoherent
shading_rate_interlock_ordered
shading_rate_interlock_unordered
shadow1D
shadow1D(00m20B
shadow1D(00m20B00B
shadow1DGradARB
shadow1DLod
shadow1DLod(00m20B00B
shadow1DProj
shadow1DProj(00m30B
shadow1DProj(00m30B00B
shadow1DProjGradARB
shadow1DProjLod
shadow1DProjLod(00m30B00B
shadow2D
shadow2D(00d20B
shadow2D(00d20B00B
shadow2DEXT
shadow2DGradARB
shadow2DLod
shadow2DLod(00d20B00B
shadow2DProj
shadow2DProj(00d30B
shadow2DProj(00d30B00B
shadow2DProjEXT
shadow2DProjGradARB
shadow2DProjLod
shadow2DProjLod(00d30B00B
shadow2DRect
shadow2DRectGradARB
shadow2DRectProj
shadow2DRectProjGradARB
shared_mutex.cpp
shift
shift exponent is negative or undefined
shift-UBO-binding
shift-image-binding
shift-sampler-binding
shift-ssbo-binding
shift-texture-binding
shift-uav-binding
shiftBits
shift_expression
short
shuffle2
sign(00B
sign(00C
sign(00D
sign(10B
sign(10C
sign(10D
sign(20B
sign(20C
sign(20D
sign(30B
sign(30C
sign(30D
signExtension
simple_statement
simplification_pass.cpp
simplify-instructions
sin
sincos
sinf
single_attribute
single_declaration
single_type_qualifier
sinhf
size=
sizeQueryTemp
sizeof
smooth
smooth centroid in
smooth centroid out
smooth in
smooth out
smoothstep
smoothstep(00B00B00B
smoothstep(00B00B10B
smoothstep(00B00B20B
smoothstep(00B00B30B
smoothstep(00C00C00C
smoothstep(00C00C10C
smoothstep(00C00C20C
smoothstep(00C00C30C
smoothstep(10B10B10B
smoothstep(10C10C10C
smoothstep(20B20B20B
smoothstep(20C20C20C
smoothstep(30B30B30B
smoothstep(30C30C30C
snprintf
so7
source-entrypoint
space identifier
sparseImageLoad
sparseImageLoadARB
sparseImageLoadLod
sparseImageLoadLodAMD
sparseTexel
sparseTexelFetch
sparseTexelFetchARB
sparseTexelFetchOffset
sparseTexelFetchOffsetARB
sparseTexelsResident
sparseTexelsResidentARB
sparseTexture
sparseTextureARB
sparseTextureClamp
sparseTextureClampARB
sparseTextureGather
sparseTextureGatherARB
sparseTextureGatherLod
sparseTextureGatherLodAMD
sparseTextureGatherLodOffset
sparseTextureGatherLodOffsetAMD
sparseTextureGatherLodOffsets
sparseTextureGatherLodOffsetsAMD
sparseTextureGatherOffset
sparseTextureGatherOffsetARB
sparseTextureGatherOffsets
sparseTextureGatherOffsetsARB
sparseTextureGrad
sparseTextureGradARB
sparseTextureGradClamp
sparseTextureGradClampARB
sparseTextureGradOffset
sparseTextureGradOffsetARB
sparseTextureGradOffsetClam
sparseTextureGradOffsetClampARB
sparseTextureLod
sparseTextureLodARB
sparseTextureLodOffset
sparseTextureLodOffsetARB
sparseTextureOffset
sparseTextureOffsetARB
sparseTextureOffsetClamp
sparseTextureOffsetClampARB
spec BuiltIn FragCoord variable needs to be a 4-component 32-bit float vector.
spec BuiltIn FragDepth variable needs to be a 32-bit float scalar.
spec BuiltIn FrontFacing variable needs to be a bool scalar.
spec BuiltIn InstanceIndex variable needs to be a 32-bit int scalar.
spec BuiltIn VertexIndex variable needs to be a 32-bit int scalar.
spec BuiltIn WorkgroupSize variable needs to be a 3-component 32-bit int vector.
spec allows BuiltIn FragCoord to be only used for variables with Input storage class.
spec allows BuiltIn FragCoord to be used only with Fragment execution model.
spec allows BuiltIn FragDepth to be only used for variables with Output storage class.
spec allows BuiltIn FragDepth to be used only with Fragment execution model.
spec allows BuiltIn FrontFacing to be only used for variables with Input storage class.
spec allows BuiltIn FrontFacing to be used only with Fragment execution model.
spec allows BuiltIn InstanceIndex to be only used for variables with Input storage class.
spec allows BuiltIn InstanceIndex to be used only with Vertex execution model.
spec allows BuiltIn VertexIndex to be only used for variables with Input storage class.
spec allows BuiltIn VertexIndex to be used only with Vertex execution model.
spec requires DepthReplacing execution mode to be declared when using BuiltIn FragDepth.
specialization-constant
specialization-constant id already used
specialization-constant id is too large
specific signature of builtin mix
specified multiple times
spirv_endian.cpp
spirv_optimizer_options.cpp
spirv_target_env.cpp
spirv_validator_options.cpp
split_invalid_unreachable_pass.cpp
sprintf
spv::Block::addPredecessor(spv::Block*)
spv::Block::dump(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const
spv::Block::rewriteAsCanonicalUnreachableContinue(spv::Block*)
spv::Block::rewriteAsCanonicalUnreachableMerge()
spv::Block::~Block()
spv::Builder::AccessChain::AccessChain(spv::Builder::AccessChain const&)
spv::Builder::Builder(unsigned int, unsigned int, spv::SpvBuildLogger*)
spv::Builder::If::If(unsigned int, unsigned int, spv::Builder&)
spv::Builder::If::makeBeginElse()
spv::Builder::If::makeEndIf()
spv::Builder::accessChainGetInferredType()
spv::Builder::accessChainGetLValue()
spv::Builder::accessChainLoad(spv::Decoration, spv::Decoration, unsigned int, spv::MemoryAccessMask, spv::Scope, unsigned int)
spv::Builder::accessChainPush(unsigned int, spv::Builder::AccessChain::CoherentFlags, unsigned int)
spv::Builder::accessChainPushSwizzle(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&, unsigned int, spv::Builder::AccessChain::CoherentFlags, unsigned int)
spv::Builder::accessChainStore(unsigned int, spv::MemoryAccessMask, spv::Scope, unsigned int)
spv::Builder::addDecoration(unsigned int, spv::Decoration, char const*)
spv::Builder::addDecoration(unsigned int, spv::Decoration, int)
spv::Builder::addDecorationId(unsigned int, spv::Decoration, unsigned int)
spv::Builder::addEntryPoint(spv::ExecutionModel, spv::Function*, char const*)
spv::Builder::addExecutionMode(spv::Function*, spv::ExecutionMode, int, int, int)
spv::Builder::addExtension(char const*)
spv::Builder::addInclude(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv::Builder::addLine(unsigned int, int, int)
spv::Builder::addMemberDecoration(unsigned int, unsigned int, spv::Decoration, char const*)
spv::Builder::addMemberDecoration(unsigned int, unsigned int, spv::Decoration, int)
spv::Builder::addMemberName(unsigned int, int, char const*)
spv::Builder::addName(unsigned int, char const*)
spv::Builder::addSourceExtension(char const*)
spv::Builder::addSwitchBreak()
spv::Builder::clearAccessChain()
spv::Builder::closeLoop()
spv::Builder::collapseAccessChain()
spv::Builder::containsPhysicalStorageBufferOrArray(unsigned int) const
spv::Builder::containsType(unsigned int, spv::Op, unsigned int) const
spv::Builder::createAccessChain(spv::StorageClass, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createAndSetNoPredecessorBlock(char const*)
spv::Builder::createArrayLength(unsigned int, unsigned int)
spv::Builder::createBinOp(spv::Op, unsigned int, unsigned int, unsigned int)
spv::Builder::createBranch(spv::Block*)
spv::Builder::createBuiltinCall(unsigned int, unsigned int, int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createCompositeCompare(spv::Decoration, unsigned int, unsigned int, bool)
spv::Builder::createCompositeConstruct(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createCompositeExtract(unsigned int, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createCompositeExtract(unsigned int, unsigned int, unsigned int)
spv::Builder::createCompositeInsert(unsigned int, unsigned int, unsigned int, unsigned int)
spv::Builder::createConditionalBranch(unsigned int, spv::Block*, spv::Block*)
spv::Builder::createConstructor(spv::Decoration, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, unsigned int)
spv::Builder::createControlBarrier(spv::Scope, spv::Scope, spv::MemorySemanticsMask)
spv::Builder::createCooperativeMatrixLength(unsigned int)
spv::Builder::createFunctionCall(spv::Function*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createLoad(unsigned int, spv::MemoryAccessMask, spv::Scope, unsigned int)
spv::Builder::createLoopContinue()
spv::Builder::createLoopExit()
spv::Builder::createLoopMerge(spv::Block*, spv::Block*, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createLvalueSwizzle(unsigned int, unsigned int, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createMatrixConstructor(spv::Decoration, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, unsigned int)
spv::Builder::createMemoryBarrier(unsigned int, unsigned int)
spv::Builder::createNoResultOp(spv::Op)
spv::Builder::createNoResultOp(spv::Op, std::__1::vector<spv::IdImmediate, std::__1::allocator<spv::IdImmediate> > const&)
spv::Builder::createNoResultOp(spv::Op, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createNoResultOp(spv::Op, unsigned int)
spv::Builder::createOp(spv::Op, unsigned int, std::__1::vector<spv::IdImmediate, std::__1::allocator<spv::IdImmediate> > const&)
spv::Builder::createOp(spv::Op, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createRvalueSwizzle(spv::Decoration, unsigned int, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createSelectionMerge(spv::Block*, unsigned int)
spv::Builder::createSpecConstantOp(spv::Op, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::createStore(unsigned int, unsigned int, spv::MemoryAccessMask, spv::Scope, unsigned int)
spv::Builder::createTextureCall(spv::Decoration, unsigned int, bool, bool, bool, bool, bool, spv::Builder::TextureParameters const&, spv::ImageOperandsMask)
spv::Builder::createTextureQueryCall(spv::Op, spv::Builder::TextureParameters const&, bool)
spv::Builder::createTriOp(spv::Op, unsigned int, unsigned int, unsigned int, unsigned int)
spv::Builder::createUnaryOp(spv::Op, unsigned int, unsigned int)
spv::Builder::createUndefined(unsigned int)
spv::Builder::createVariable(spv::StorageClass, unsigned int, char const*, unsigned int)
spv::Builder::createVectorExtractDynamic(unsigned int, unsigned int, unsigned int)
spv::Builder::dump(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const
spv::Builder::dumpModuleProcesses(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const
spv::Builder::dumpSourceInstructions(unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const
spv::Builder::endSwitch(std::__1::vector<spv::Block*, std::__1::allocator<spv::Block*> >&)
spv::Builder::findCompositeConstant(spv::Op, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::findScalarConstant(spv::Op, spv::Op, unsigned int, unsigned int)
spv::Builder::findScalarConstant(spv::Op, spv::Op, unsigned int, unsigned int, unsigned int)
spv::Builder::findStructConstant(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::getContainedTypeId(unsigned int) const
spv::Builder::getContainedTypeId(unsigned int, int) const
spv::Builder::getDerefTypeId(unsigned int) const
spv::Builder::getMostBasicTypeClass(unsigned int) const
spv::Builder::getNumTypeConstituents(unsigned int) const
spv::Builder::getScalarTypeId(unsigned int) const
spv::Builder::getStringId(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv::Builder::getTypeNumRows(unsigned int) const
spv::Builder::import(char const*)
spv::Builder::leaveFunction()
spv::Builder::makeAccelerationStructureType()
spv::Builder::makeArrayType(unsigned int, unsigned int, int)
spv::Builder::makeBoolConstant(bool, bool)
spv::Builder::makeBoolType()
spv::Builder::makeCompositeConstant(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, bool)
spv::Builder::makeCooperativeMatrixType(unsigned int, unsigned int, unsigned int, unsigned int)
spv::Builder::makeDiscard()
spv::Builder::makeDoubleConstant(double, bool)
spv::Builder::makeEntryPoint(char const*)
spv::Builder::makeFloat16Constant(float, bool)
spv::Builder::makeFloatConstant(float, bool)
spv::Builder::makeFloatType(int)
spv::Builder::makeForwardPointer(spv::StorageClass)
spv::Builder::makeFpConstant(unsigned int, double, bool)
spv::Builder::makeFunctionEntry(spv::Decoration, unsigned int, char const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::vector<std::__1::vector<spv::Decoration, std::__1::allocator<spv::Decoration> >, std::__1::allocator<std::__1::vector<spv::Decoration, std::__1::allocator<spv::Decoration> > > > const&, spv::Block**)
spv::Builder::makeFunctionType(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spv::Builder::makeImageType(unsigned int, spv::Dim, bool, bool, bool, unsigned int, spv::ImageFormat)
spv::Builder::makeInt64Constant(unsigned int, unsigned long long, bool)
spv::Builder::makeIntConstant(unsigned int, unsigned int, bool)
spv::Builder::makeIntegerType(int, bool)
spv::Builder::makeMatrixType(unsigned int, int, int)
spv::Builder::makeNewBlock()
spv::Builder::makeNewLoop()
spv::Builder::makePointer(spv::StorageClass, unsigned int)
spv::Builder::makePointerFromForwardPointer(spv::StorageClass, unsigned int, unsigned int)
spv::Builder::makeRayQueryType()
spv::Builder::makeReturn(bool, unsigned int)
spv::Builder::makeRuntimeArray(unsigned int)
spv::Builder::makeSampledImageType(unsigned int)
spv::Builder::makeSamplerType()
spv::Builder::makeStructResultType(unsigned int, unsigned int)
spv::Builder::makeStructType(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, char const*)
spv::Builder::makeSwitch(unsigned int, unsigned int, int, std::__1::vector<int, std::__1::allocator<int> > const&, std::__1::vector<int, std::__1::allocator<int> > const&, int, std::__1::vector<spv::Block*, std::__1::allocator<spv::Block*> >&)
spv::Builder::makeVectorType(unsigned int, int)
spv::Builder::makeVoidType()
spv::Builder::nextSwitchSegment(std::__1::vector<spv::Block*, std::__1::allocator<spv::Block*> >&, int)
spv::Builder::postProcess()
spv::Builder::postProcess(spv::Instruction&)
spv::Builder::postProcessCFG()
spv::Builder::postProcessFeatures()
spv::Builder::postProcessType(spv::Instruction const&, unsigned int)
spv::Builder::promoteScalar(spv::Decoration, unsigned int&, unsigned int&)
spv::Builder::remapDynamicSwizzle()
spv::Builder::removeExtension(char const*)
spv::Builder::setLine(int, char const*)
spv::Builder::smearScalar(spv::Decoration, unsigned int, unsigned int)
spv::Builder::transferAccessChainSwizzle(bool)
spv::Builder::~Builder()
spv::DecorationOperands
spv::DecorationParams
spv::ExecutionModeOperands
spv::ExecutionModeParams
spv::Function::Function(unsigned int, unsigned int, unsigned int, unsigned int, spv::Module&)
spv::Function::addBlock(spv::Block*)
spv::Function::dump(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const
spv::Function::~Function()
spv::FunctionControlParams
spv::ImageOperandsParams
spv::Instruction::addIdOperand(unsigned int)
spv::Instruction::addImmediateOperand(unsigned int)
spv::Instruction::dump(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const
spv::Instruction::~Instruction()
spv::InstructionDesc
spv::LoopControlParams
spv::MemoryAccessParams
spv::MemorySemanticsAllMemory
spv::Module::addFunction(spv::Function*)
spv::Module::~Module()
spv::OperandClassParams
spv::SelectionControlParams
spv::SpvBuildLogger::missingFunctionality(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv::SpvBuildLogger::~SpvBuildLogger()
spv::inReadableOrder(spv::Block*, std::__1::function<void (spv::Block*, spv::ReachReason, spv::Block*)>)
spv::spirvbin_t::$_0::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
spv::spirvbin_t::errorHandler
spv::spirvbin_t::logHandler
spvBinaryEndianness(spv_const_binary_t*, spv_endianness_t*)
spvBinaryHeaderGet(spv_const_binary_t*, spv_endianness_t, spv_header_t*)
spvBinaryParse
spvBinaryToText
spvContextCreate
spvContextDestroy
spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)
spvDiagnosticDestroy
spvDiagnosticPrint
spvExpandOperandSequenceOnce(spv_operand_type_t, std::__1::vector<spv_operand_type_t, std::__1::allocator<spv_operand_type_t> >*)
spvExtInstImportTypeGet(char const*)
spvExtInstIsDebugInfo(spv_ext_inst_type_t)
spvExtInstIsNonSemantic(spv_ext_inst_type_t)
spvExtInstTableGet(spv_ext_inst_table_t const**, spv_target_env)
spvExtInstTableValueLookup(spv_ext_inst_table_t const*, spv_ext_inst_type_t, unsigned int, spv_ext_inst_desc_t const**)
spvFixWord(unsigned int, spv_endianness_t)
spvGeneratorStr(unsigned int)
spvIsHostEndian(spv_endianness_t)
spvIsIdType(spv_operand_type_t)
spvIsInIdType(spv_operand_type_t)
spvIsOpenCLEnv(spv_target_env)
spvIsOpenGLEnv(spv_target_env)
spvIsVulkanEnv(spv_target_env)
spvIsVulkanOrWebGPUEnv(spv_target_env)
spvIsWebGPUEnv(spv_target_env)
spvLogStringForEnv(spv_target_env)
spvOpcodeGeneratesType(SpvOp_)
spvOpcodeIsAtomicOp(SpvOp_)
spvOpcodeIsAtomicWithLoad(SpvOp_)
spvOpcodeIsBaseOpaqueType(SpvOp_)
spvOpcodeIsBlockTerminator(SpvOp_)
spvOpcodeIsBranch(SpvOp_)
spvOpcodeIsComposite(SpvOp_)
spvOpcodeIsConstant(SpvOp_)
spvOpcodeIsConstantOrUndef(SpvOp_)
spvOpcodeIsDebug(SpvOp_)
spvOpcodeIsDecoration(SpvOp_)
spvOpcodeIsLoad(SpvOp_)
spvOpcodeIsNonUniformGroupOperation(SpvOp_)
spvOpcodeIsReturn(SpvOp_)
spvOpcodeIsScalarSpecConstant(SpvOp_)
spvOpcodeIsScalarType(SpvOp_)
spvOpcodeIsScalarizable(SpvOp_)
spvOpcodeIsSpecConstant(SpvOp_)
spvOpcodeReturnsLogicalPointer(SpvOp_)
spvOpcodeReturnsLogicalVariablePointer(SpvOp_)
spvOpcodeSplit(unsigned int, unsigned short*, unsigned short*)
spvOpcodeString
spvOpcodeTableGet(spv_opcode_table_t const**, spv_target_env)
spvOpcodeTableValueLookup(spv_target_env, spv_opcode_table_t const*, SpvOp_, spv_opcode_desc_t const**)
spvOperandCanBeForwardDeclaredFunction(SpvOp_)
spvOperandIsConcreteMask(spv_operand_type_t)
spvOperandIsOptional(spv_operand_type_t)
spvOperandTableGet(spv_operand_table_t const**, spv_target_env)
spvOperandTableValueLookup(spv_target_env, spv_operand_table_t const*, spv_operand_type_t, unsigned int, spv_operand_desc_t const**)
spvOperandTypeStr(spv_operand_type_t)
spvOptimizerOptionsCreate
spvOptimizerOptionsDestroy
spvOptimizerOptionsSetRunValidator
spvPushOperandTypes(spv_operand_type_t const*, std::__1::vector<spv_operand_type_t, std::__1::allocator<spv_operand_type_t> >*)
spvTakeFirstMatchableOperand(std::__1::vector<spv_operand_type_t, std::__1::allocator<spv_operand_type_t> >*)
spvTargetEnvDescription
spvTextDestroy
spvValidateWithOptions
spvValidatorOptionsCreate
spvValidatorOptionsDestroy
spvValidatorOptionsSetBeforeHlslLegalization
spvValidatorOptionsSetRelaxBlockLayout
spvVersionForTargetEnv(spv_target_env)
spv_amd_gcn_shader_entries
spv_amd_shader_ballot_entries
spv_amd_shader_explicit_vertex_parameter_entries
spv_amd_shader_trinary_minmax_entries
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [123], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [124], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [129], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [140], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [141], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [143], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [149], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [153], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [175], SpvExecutionModel_ const&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const*&, SpvExecutionModel_&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (spvtools::val::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::val::Instruction const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_0, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_1, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_2, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_31, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeShaderI32Vec3InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_30, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFragCoordAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_3, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFragDepthAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_4, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFrontFacingAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_5, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateHelperInvocationAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_6, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_32, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32Vec4InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_33, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateInstanceIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_8, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateInvocationIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_7, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_28, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_29, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLocalInvocationIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_27, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePatchVerticesAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_9, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointCoordAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_10, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_11, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_12, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_13, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_14, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_15, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_16, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_17, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePrimitiveIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_18, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePrimitiveIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_19, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSMBuiltinsAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_35, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSampleIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_20, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSampleMaskAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_21, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSamplePositionAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_22, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessCoordAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_23, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessLevelInnerAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_25, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessLevelOuterAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_24, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateVertexIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_26, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spv_result_t std::__1::__function::__policy_invoker<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateWorkgroupSizeAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_34, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spvtools::(anonymous namespace)::SetSpvHeader(void*, spv_endianness_t, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
spvtools::(anonymous namespace)::SetSpvInst(void*, spv_parsed_instruction_t const*)
spvtools::(anonymous namespace)::kOpSpecConstantOpcodes
spvtools::(anonymous namespace)::to_string(unsigned int)
spvtools::AssemblyGrammar::filterCapsAgainstTargetEnv(SpvCapability_ const*, unsigned int) const
spvtools::AssemblyGrammar::isValid() const
spvtools::AssemblyGrammar::lookupExtInst(spv_ext_inst_type_t, unsigned int, spv_ext_inst_desc_t const**) const
spvtools::AssemblyGrammar::lookupOpcode(SpvOp_, spv_opcode_desc_t const**) const
spvtools::AssemblyGrammar::lookupOperand(spv_operand_type_t, unsigned int, spv_operand_desc_t const**) const
spvtools::AssemblyGrammar::lookupSpecConstantOpcode(SpvOp_) const
spvtools::BuildModule(spv_target_env, std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>, unsigned int const*, unsigned long)
spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)
spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}::operator()(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&) const
spvtools::CFA<spvtools::opt::BasicBlock>::DepthFirstTraversal(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, std::__1::function<void (spvtools::opt::BasicBlock const*)>, std::__1::function<void (spvtools::opt::BasicBlock const*)>, std::__1::function<void (spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)>)
spvtools::CFA<spvtools::opt::DominatorTreeNode>::DepthFirstTraversal(spvtools::opt::DominatorTreeNode const*, std::__1::function<std::__1::vector<spvtools::opt::DominatorTreeNode*, std::__1::allocator<spvtools::opt::DominatorTreeNode*> > const* (spvtools::opt::DominatorTreeNode const*)>, std::__1::function<void (spvtools::opt::DominatorTreeNode const*)>, std::__1::function<void (spvtools::opt::DominatorTreeNode const*)>, std::__1::function<void (spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)>)
spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)
spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}::operator()(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&) const
spvtools::CFA<spvtools::val::BasicBlock>::ComputeAugmentedCFG(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> >&, spvtools::val::BasicBlock*, spvtools::val::BasicBlock*, std::__1::unordered_map<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> >, std::__1::hash<spvtools::val::BasicBlock const*>, std::__1::equal_to<spvtools::val::BasicBlock const*>, std::__1::allocator<std::__1::pair<spvtools::val::BasicBlock const* const, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >*, std::__1::unordered_map<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> >, std::__1::hash<spvtools::val::BasicBlock const*>, std::__1::equal_to<spvtools::val::BasicBlock const*>, std::__1::allocator<std::__1::pair<spvtools::val::BasicBlock const* const, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >*, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)
spvtools::CFA<spvtools::val::BasicBlock>::DepthFirstTraversal(spvtools::val::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<void (spvtools::val::BasicBlock const*)>, std::__1::function<void (spvtools::val::BasicBlock const*)>, std::__1::function<void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)>)
spvtools::CFA<spvtools::val::BasicBlock>::TraversalRoots(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)
spvtools::CreateAggressiveDCEPass()
spvtools::CreateBlockMergePass()
spvtools::CreateCFGCleanupPass()
spvtools::CreateDeadBranchElimPass()
spvtools::CreateDeadInsertElimPass()
spvtools::CreateEliminateDeadFunctionsPass()
spvtools::CreateIfConversionPass()
spvtools::CreateInlineExhaustivePass()
spvtools::CreateLocalAccessChainConvertPass()
spvtools::CreateLocalMultiStoreElimPass()
spvtools::CreateLocalSingleBlockLoadStoreElimPass()
spvtools::CreateLocalSingleStoreElimPass()
spvtools::CreateMergeReturnPass()
spvtools::CreatePropagateLineInfoPass()
spvtools::CreateRedundancyEliminationPass()
spvtools::CreateRedundantLineInfoElimPass()
spvtools::CreateScalarReplacementPass(unsigned int)
spvtools::CreateSimplificationPass()
spvtools::CreateStripDebugInfoPass()
spvtools::CreateVectorDCEPass()
spvtools::CreateWrapOpKillPass()
spvtools::DiagnosticStream::DiagnosticStream(spvtools::DiagnosticStream&&)
spvtools::DiagnosticStream::~DiagnosticStream()
spvtools::EmitNumericLiteral(std::__1::basic_ostream<char, std::__1::char_traits<char> >*, spv_parsed_instruction_t const&, spv_parsed_operand_t const&)
spvtools::EnumSet<SpvCapability_>::Add(SpvCapability_)
spvtools::EnumSet<SpvCapability_>::HasAnyOf(spvtools::EnumSet<SpvCapability_> const&) const
spvtools::EnumSet<spvtools::Extension>::EnumSet(unsigned int, spvtools::Extension const*)
spvtools::EnumSet<spvtools::Extension>::HasAnyOf(spvtools::EnumSet<spvtools::Extension> const&) const
spvtools::ExtensionSetToString(spvtools::EnumSet<spvtools::Extension> const&)
spvtools::ExtensionToString(spvtools::Extension)
spvtools::FriendlyNameMapper::FriendlyNameMapper(spv_context_t const*, unsigned int const*, unsigned long)
spvtools::FriendlyNameMapper::NameForEnumOperand(spv_operand_type_t, unsigned int)
spvtools::FriendlyNameMapper::NameForId(unsigned int)
spvtools::FriendlyNameMapper::ParseInstruction(spv_parsed_instruction_t const&)
spvtools::FriendlyNameMapper::ParseInstructionForwarder(void*, spv_parsed_instruction_t const*)
spvtools::FriendlyNameMapper::Sanitize(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spvtools::FriendlyNameMapper::SaveBuiltInName(unsigned int, unsigned int)
spvtools::FriendlyNameMapper::SaveName(unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spvtools::GetExtensionFromString(char const*, spvtools::Extension*)
spvtools::GetExtensionFromString(char const*, spvtools::Extension*)::known_ext_ids
spvtools::GetExtensionFromString(char const*, spvtools::Extension*)::known_ext_strs
spvtools::GetExtensionString(spv_parsed_instruction_t const*)
spvtools::GetTrivialNameMapper()
spvtools::Optimizer::Optimizer(spv_target_env)
spvtools::Optimizer::PassToken::~PassToken()
spvtools::Optimizer::RegisterPass(spvtools::Optimizer::PassToken&&)
spvtools::Optimizer::Run(unsigned int const*, unsigned long, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, spv_optimizer_options_t*) const
spvtools::Optimizer::SetMessageConsumer(std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
spvtools::Optimizer::SetTargetEnv(spv_target_env)
spvtools::Optimizer::~Optimizer()
spvtools::SetContextMessageConsumer(spv_context_t*, std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
spvtools::SpirvTools::Disassemble(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, unsigned int) const
spvtools::SpirvTools::Disassemble(unsigned int const*, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, unsigned int) const
spvtools::SpirvTools::SetMessageConsumer(std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
spvtools::SpirvTools::SpirvTools(spv_target_env)
spvtools::SpirvTools::Validate(unsigned int const*, unsigned long, spv_validator_options_t*) const
spvtools::SpirvTools::~SpirvTools()
spvtools::UseDiagnosticAsMessageConsumer(spv_context_t*, spv_diagnostic_t**)
spvtools::clr::blue::operator char const*()
spvtools::clr::green::operator char const*()
spvtools::clr::grey::operator char const*()
spvtools::clr::red::operator char const*()
spvtools::clr::reset::operator char const*()
spvtools::clr::yellow::operator char const*()
spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#1}::operator()(unsigned int) const
spvtools::opt::(anonymous namespace)::CompositeExtractFeedingConstruct(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::(anonymous namespace)::DecorationLess::operator()(spvtools::opt::Instruction const*, spvtools::opt::Instruction const*) const
spvtools::opt::(anonymous namespace)::FoldClamp1(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::(anonymous namespace)::FoldClamp2(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::(anonymous namespace)::FoldClamp3(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::(anonymous namespace)::FoldFPBinaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>, unsigned int, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&, spvtools::opt::IRContext*)
spvtools::opt::(anonymous namespace)::FoldMax(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::(anonymous namespace)::FoldMin(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::(anonymous namespace)::HasZero(spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::MergeGenericAddendSub(unsigned int, unsigned int, spvtools::opt::Instruction*)
spvtools::opt::(anonymous namespace)::NegateConstant(spvtools::opt::analysis::ConstantManager*, spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::NegateFloatingPointConstant(spvtools::opt::analysis::ConstantManager*, spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::NegateIntegerConstant(spvtools::opt::analysis::ConstantManager*, spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::NonConstInput(spvtools::opt::IRContext*, spvtools::opt::analysis::Constant const*, spvtools::opt::Instruction*)
spvtools::opt::(anonymous namespace)::PerformFloatingPointOperation(spvtools::opt::analysis::ConstantManager*, SpvOp_, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::PerformIntegerOperation(spvtools::opt::analysis::ConstantManager*, SpvOp_, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::PerformOperation(spvtools::opt::analysis::ConstantManager*, SpvOp_, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::Reciprocal(spvtools::opt::analysis::ConstantManager*, spvtools::opt::analysis::Constant const*)
spvtools::opt::(anonymous namespace)::getFloatConstantKind(spvtools::opt::analysis::Constant const*)
spvtools::opt::AggressiveDCEPass::AddBranch(unsigned int, spvtools::opt::BasicBlock*)
spvtools::opt::AggressiveDCEPass::AddBreaksAndContinuesToWorklist(spvtools::opt::Instruction*)
spvtools::opt::AggressiveDCEPass::AddStores(unsigned int)
spvtools::opt::AggressiveDCEPass::AddToWorklist(spvtools::opt::Instruction*)
spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)
spvtools::opt::AggressiveDCEPass::AggressiveDCEPass()
spvtools::opt::AggressiveDCEPass::AllExtensionsSupported() const
spvtools::opt::AggressiveDCEPass::ComputeBlock2HeaderMaps(std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >&)
spvtools::opt::AggressiveDCEPass::EliminateDeadFunctions()
spvtools::opt::AggressiveDCEPass::GetPreservedAnalyses()
spvtools::opt::AggressiveDCEPass::InitExtensions()
spvtools::opt::AggressiveDCEPass::InitializeModuleScopeLiveInstructions()
spvtools::opt::AggressiveDCEPass::IsTargetDead(spvtools::opt::Instruction*)
spvtools::opt::AggressiveDCEPass::IsVarOfStorage(unsigned int, unsigned int)
spvtools::opt::AggressiveDCEPass::Process()
spvtools::opt::AggressiveDCEPass::ProcessGlobalValues()
spvtools::opt::AggressiveDCEPass::ProcessImpl()
spvtools::opt::AggressiveDCEPass::ProcessLoad(unsigned int)
spvtools::opt::AggressiveDCEPass::name() const
spvtools::opt::AggressiveDCEPass::~AggressiveDCEPass()
spvtools::opt::BasicBlock::ContinueBlockIdIfAny() const
spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int)> const&) const
spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int*)> const&)
spvtools::opt::BasicBlock::ForMergeAndContinueLabel(std::__1::function<void (unsigned int)> const&)
spvtools::opt::BasicBlock::GetLoopMergeInst()
spvtools::opt::BasicBlock::GetMergeInst()
spvtools::opt::BasicBlock::IsSuccessor(spvtools::opt::BasicBlock const*) const
spvtools::opt::BasicBlock::KillAllInsts(bool)
spvtools::opt::BasicBlock::MergeBlockIdIfAny() const
spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)
spvtools::opt::BasicBlock::WhileEachSuccessorLabel(std::__1::function<bool (unsigned int)> const&) const
spvtools::opt::BlockMergePass::BlockMergePass()
spvtools::opt::BlockMergePass::GetPreservedAnalyses()
spvtools::opt::BlockMergePass::Process()
spvtools::opt::BlockMergePass::name() const
spvtools::opt::BlockMergePass::~BlockMergePass()
spvtools::opt::CFG::AddEdges(spvtools::opt::BasicBlock*)
spvtools::opt::CFG::CFG(spvtools::opt::Module*)
spvtools::opt::CFG::ComputePostOrderTraversal(spvtools::opt::BasicBlock*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)
spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)
spvtools::opt::CFG::ComputeStructuredSuccessors(spvtools::opt::Function*)
spvtools::opt::CFG::ForEachBlockInPostOrder(spvtools::opt::BasicBlock*, std::__1::function<void (spvtools::opt::BasicBlock*)> const&)
spvtools::opt::CFG::ForEachBlockInReversePostOrder(spvtools::opt::BasicBlock*, std::__1::function<void (spvtools::opt::BasicBlock*)> const&)
spvtools::opt::CFG::RegisterBlock(spvtools::opt::BasicBlock*)
spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)
spvtools::opt::CFG::WhileEachBlockInReversePostOrder(spvtools::opt::BasicBlock*, std::__1::function<bool (spvtools::opt::BasicBlock*)> const&)
spvtools::opt::CFG::~CFG()
spvtools::opt::CFGCleanupPass::GetPreservedAnalyses()
spvtools::opt::CFGCleanupPass::Process()
spvtools::opt::CFGCleanupPass::name() const
spvtools::opt::CFGCleanupPass::~CFGCleanupPass()
spvtools::opt::ComputeSameValue::operator()(spvtools::opt::Instruction const&, spvtools::opt::Instruction const&) const
spvtools::opt::ConstantFoldingRules::AddFoldingRules()
spvtools::opt::ConstantFoldingRules::GetRulesForInstruction(spvtools::opt::Instruction const*) const
spvtools::opt::ConstantFoldingRules::~ConstantFoldingRules()
spvtools::opt::DeadBranchElimPass::AddBlocksWithBackEdge(unsigned int, unsigned int, unsigned int, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)
spvtools::opt::DeadBranchElimPass::AddBranch(unsigned int, spvtools::opt::BasicBlock*)
spvtools::opt::DeadBranchElimPass::EliminateDeadBranches(spvtools::opt::Function*)
spvtools::opt::DeadBranchElimPass::EraseDeadBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> > const&, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> > const&, std::__1::unordered_map<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock* const, spvtools::opt::BasicBlock*> > > const&)
spvtools::opt::DeadBranchElimPass::FindFirstExitFromSelectionMerge(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
spvtools::opt::DeadBranchElimPass::FixBlockOrder()
spvtools::opt::DeadBranchElimPass::FixPhiNodesInLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> > const&, std::__1::unordered_map<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock* const, spvtools::opt::BasicBlock*> > > const&)
spvtools::opt::DeadBranchElimPass::GetConstCondition(unsigned int, bool*)
spvtools::opt::DeadBranchElimPass::GetConstInteger(unsigned int, unsigned int*)
spvtools::opt::DeadBranchElimPass::GetParentBlock(unsigned int)
spvtools::opt::DeadBranchElimPass::GetPreservedAnalyses()
spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)
spvtools::opt::DeadBranchElimPass::MarkUnreachableStructuredTargets(std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> > const&, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::unordered_map<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock* const, spvtools::opt::BasicBlock*> > >*)
spvtools::opt::DeadBranchElimPass::Process()
spvtools::opt::DeadBranchElimPass::SimplifyBranch(spvtools::opt::BasicBlock*, unsigned int)
spvtools::opt::DeadBranchElimPass::SwitchHasNestedBreak(unsigned int)
spvtools::opt::DeadBranchElimPass::name() const
spvtools::opt::DeadBranchElimPass::~DeadBranchElimPass()
spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::opt::Function*)
spvtools::opt::DeadInsertElimPass::GetPreservedAnalyses()
spvtools::opt::DeadInsertElimPass::MarkInsertChain(spvtools::opt::Instruction*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >*)
spvtools::opt::DeadInsertElimPass::NumComponents(spvtools::opt::Instruction*)
spvtools::opt::DeadInsertElimPass::Process()
spvtools::opt::DeadInsertElimPass::name() const
spvtools::opt::DeadInsertElimPass::~DeadInsertElimPass()
spvtools::opt::DebugScope::ToBinary(unsigned int, unsigned int, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*) const
spvtools::opt::DominatorAnalysisBase::CommonDominator(spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*) const
spvtools::opt::DominatorAnalysisBase::Dominates(spvtools::opt::Instruction*, spvtools::opt::Instruction*) const
spvtools::opt::DominatorTree::Dominates(spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*) const
spvtools::opt::DominatorTree::Dominates(spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*) const
spvtools::opt::DominatorTree::Dominates(unsigned int, unsigned int) const
spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)
spvtools::opt::DominatorTree::GetOrInsertNode(spvtools::opt::BasicBlock*)
spvtools::opt::DominatorTree::ImmediateDominator(spvtools::opt::BasicBlock const*) const
spvtools::opt::DominatorTree::InitializeTree(spvtools::opt::CFG const&, spvtools::opt::Function const*)
spvtools::opt::DominatorTree::ResetDFNumbering()
spvtools::opt::DominatorTree::begin()
spvtools::opt::EliminateDeadFunctionsPass::GetPreservedAnalyses()
spvtools::opt::EliminateDeadFunctionsPass::Process()
spvtools::opt::EliminateDeadFunctionsPass::name() const
spvtools::opt::EliminateDeadFunctionsPass::~EliminateDeadFunctionsPass()
spvtools::opt::ExtInsConflict(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, spvtools::opt::Instruction const*, unsigned int)
spvtools::opt::ExtInsMatch(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, spvtools::opt::Instruction const*, unsigned int)
spvtools::opt::FeatureManager::AddCapability(SpvCapability_)
spvtools::opt::FeatureManager::AddExtension(spvtools::opt::Instruction*)
spvtools::opt::FeatureManager::Analyze(spvtools::opt::Module*)
spvtools::opt::FoldingRules::AddFoldingRules()
spvtools::opt::FoldingRules::GetRulesForInstruction(spvtools::opt::Instruction*) const
spvtools::opt::FoldingRules::~FoldingRules()
spvtools::opt::Function::ForEachDebugInstructionsInHeader(std::__1::function<void (spvtools::opt::Instruction*)> const&)
spvtools::opt::Function::ForEachInst(std::__1::function<void (spvtools::opt::Instruction const*)> const&, bool) const
spvtools::opt::Function::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)
spvtools::opt::Function::ForEachParam(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)
spvtools::opt::Function::InsertBasicBlockAfter(std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >&&, spvtools::opt::BasicBlock*)
spvtools::opt::Function::IsRecursive() const
spvtools::opt::Function::MoveBasicBlockToAfter(unsigned int, spvtools::opt::BasicBlock*)
spvtools::opt::Function::WhileEachInst(std::__1::function<bool (spvtools::opt::Instruction const*)> const&, bool) const
spvtools::opt::Function::WhileEachInst(std::__1::function<bool (spvtools::opt::Instruction*)> const&, bool)
spvtools::opt::Function::~Function()
spvtools::opt::IRContext::AddCalls(spvtools::opt::Function const*, std::__1::queue<unsigned int, std::__1::deque<unsigned int, std::__1::allocator<unsigned int> > >*)
spvtools::opt::IRContext::AddCombinatorsForExtension(spvtools::opt::Instruction*)
spvtools::opt::IRContext::AnalyzeUses(spvtools::opt::Instruction*)
spvtools::opt::IRContext::BuildIdToFuncMapping()
spvtools::opt::IRContext::BuildIdToNameMap()
spvtools::opt::IRContext::BuildInstrToBlockMapping()
spvtools::opt::IRContext::BuildInvalidAnalyses(spvtools::opt::IRContext::Analysis)
spvtools::opt::IRContext::BuildStructuredCFGAnalysis()
spvtools::opt::IRContext::ForgetUses(spvtools::opt::Instruction*)
spvtools::opt::IRContext::GetDominatorAnalysis(spvtools::opt::Function const*)
spvtools::opt::IRContext::GetLoopDescriptor(spvtools::opt::Function const*)
spvtools::opt::IRContext::IRContext(spv_target_env, std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>)
spvtools::opt::IRContext::InitializeCombinators()
spvtools::opt::IRContext::InvalidateAnalyses(spvtools::opt::IRContext::Analysis)
spvtools::opt::IRContext::InvalidateAnalysesExceptFor(spvtools::opt::IRContext::Analysis)
spvtools::opt::IRContext::IsCombinatorInstruction(spvtools::opt::Instruction const*)
spvtools::opt::IRContext::KillDebugDeclareInsts(spvtools::opt::Function*)
spvtools::opt::IRContext::KillInst(spvtools::opt::Instruction*)
spvtools::opt::IRContext::KillNamesAndDecorates(spvtools::opt::Instruction*)
spvtools::opt::IRContext::KillNamesAndDecorates(unsigned int)
spvtools::opt::IRContext::KillOperandFromDebugInstructions(spvtools::opt::Instruction*)
spvtools::opt::IRContext::ProcessCallTreeFromRoots(std::__1::function<bool (spvtools::opt::Function*)>&, std::__1::queue<unsigned int, std::__1::deque<unsigned int, std::__1::allocator<unsigned int> > >*)
spvtools::opt::IRContext::ProcessEntryPointCallTree(std::__1::function<bool (spvtools::opt::Function*)>&)
spvtools::opt::IRContext::ProcessReachableCallTree(std::__1::function<bool (spvtools::opt::Function*)>&)
spvtools::opt::IRContext::RemoveFromIdToName(spvtools::opt::Instruction const*)
spvtools::opt::IRContext::ReplaceAllUsesWith(unsigned int, unsigned int)
spvtools::opt::IRContext::ReplaceAllUsesWithPredicate(unsigned int, unsigned int, std::__1::function<bool (spvtools::opt::Instruction*, unsigned int)> const&)
spvtools::opt::IRContext::get_instr_block(spvtools::opt::Instruction*)
spvtools::opt::IRContext::get_instr_block(unsigned int)
spvtools::opt::IRContext::get_instruction_folder()
spvtools::opt::IRContext::~IRContext()
spvtools::opt::IfConversion::CanHoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)
spvtools::opt::IfConversion::CheckBlock(spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*, spvtools::opt::BasicBlock**)
spvtools::opt::IfConversion::CheckPhiUsers(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*)
spvtools::opt::IfConversion::CheckType(unsigned int)
spvtools::opt::IfConversion::GetBlock(unsigned int)
spvtools::opt::IfConversion::GetIncomingValue(spvtools::opt::Instruction*, unsigned int)
spvtools::opt::IfConversion::GetPreservedAnalyses()
spvtools::opt::IfConversion::HoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)
spvtools::opt::IfConversion::Process()
spvtools::opt::IfConversion::SplatCondition(spvtools::opt::analysis::Vector*, unsigned int, spvtools::opt::InstructionBuilder*)
spvtools::opt::IfConversion::name() const
spvtools::opt::IfConversion::~IfConversion()
spvtools::opt::InlineExhaustivePass::InlineExhaustive(spvtools::opt::Function*)
spvtools::opt::InlineExhaustivePass::InlineExhaustivePass()
spvtools::opt::InlineExhaustivePass::Process()
spvtools::opt::InlineExhaustivePass::name() const
spvtools::opt::InlineExhaustivePass::~InlineExhaustivePass()
spvtools::opt::InlinePass::AddBranch(unsigned int, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*)
spvtools::opt::InlinePass::AddGuardBlock(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, unsigned int)
spvtools::opt::InlinePass::AddLoad(unsigned int, unsigned int, unsigned int, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*, spvtools::opt::Instruction const*, spvtools::opt::DebugScope const&)
spvtools::opt::InlinePass::AddPointerToType(unsigned int, SpvStorageClass_)
spvtools::opt::InlinePass::AddStore(unsigned int, unsigned int, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*, spvtools::opt::Instruction const*, spvtools::opt::DebugScope const&)
spvtools::opt::InlinePass::AddStoresForVariableInitializers(std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > const&, spvtools::opt::analysis::DebugInlinedAtContext*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)
spvtools::opt::InlinePass::AnalyzeReturns(spvtools::opt::Function*)
spvtools::opt::InlinePass::CloneAndMapLocals(spvtools::opt::Function*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*, spvtools::opt::analysis::DebugInlinedAtContext*)
spvtools::opt::InlinePass::CreateReturnVar(spvtools::opt::Function*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*)
spvtools::opt::InlinePass::GenInlineCode(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)
spvtools::opt::InlinePass::HasNoReturnInLoop(spvtools::opt::Function*)
spvtools::opt::InlinePass::InitializeInline()
spvtools::opt::InlinePass::InlineBasicBlocks(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > const&, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, spvtools::opt::analysis::DebugInlinedAtContext*, spvtools::opt::Function*)
spvtools::opt::InlinePass::InlineEntryBlock(std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > const&, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>, spvtools::opt::analysis::DebugInlinedAtContext*)
spvtools::opt::InlinePass::InlinePass()
spvtools::opt::InlinePass::InlineReturn(std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > const&, std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, spvtools::opt::analysis::DebugInlinedAtContext*, spvtools::opt::Function*, spvtools::opt::Instruction const*, unsigned int)
spvtools::opt::InlinePass::InlineSingleInstruction(std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > const&, spvtools::opt::BasicBlock*, spvtools::opt::Instruction const*, unsigned int)
spvtools::opt::InlinePass::IsInlinableFunction(spvtools::opt::Function*)
spvtools::opt::InlinePass::IsInlinableFunctionCall(spvtools::opt::Instruction const*)
spvtools::opt::InlinePass::MoveCallerInstsAfterFunctionCall(std::__1::unordered_map<unsigned int, spvtools::opt::Instruction*, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::opt::Instruction*> > >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*, spvtools::opt::InstructionList::iterator, bool)
spvtools::opt::InlinePass::MoveInstsBeforeEntryBlock(std::__1::unordered_map<unsigned int, spvtools::opt::Instruction*, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::opt::Instruction*> > >*, spvtools::opt::BasicBlock*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)
spvtools::opt::InlinePass::NewLabel(unsigned int)
spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)
spvtools::opt::InlinePass::~InlinePass()
spvtools::opt::Instruction* spvtools::opt::InstructionBuilder::GetIntConstant<unsigned int>(unsigned int, bool)
spvtools::opt::Instruction::Clone(spvtools::opt::IRContext*) const
spvtools::opt::Instruction::GetBaseAddress() const
spvtools::opt::Instruction::GetOpenCL100DebugOpcode() const
spvtools::opt::Instruction::GetSingleWordOperand(unsigned int) const
spvtools::opt::Instruction::InsertBefore(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >&&)
spvtools::opt::Instruction::InsertBefore(std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >&&)
spvtools::opt::Instruction::Instruction(spvtools::opt::IRContext*, SpvOp_)
spvtools::opt::Instruction::Instruction(spvtools::opt::IRContext*, SpvOp_, unsigned int, unsigned int, std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> > const&)
spvtools::opt::Instruction::Instruction(spvtools::opt::IRContext*, spv_parsed_instruction_t const&, spvtools::opt::DebugScope const&)
spvtools::opt::Instruction::Instruction(spvtools::opt::IRContext*, spv_parsed_instruction_t const&, std::__1::vector<spvtools::opt::Instruction, std::__1::allocator<spvtools::opt::Instruction> >&&)
spvtools::opt::Instruction::Instruction(spvtools::opt::Instruction const&)
spvtools::opt::Instruction::Instruction(spvtools::opt::Instruction&&)
spvtools::opt::Instruction::IsFloatingPointFoldingAllowed() const
spvtools::opt::Instruction::IsFoldableByFoldScalar() const
spvtools::opt::Instruction::IsOpcodeCodeMotionSafe() const
spvtools::opt::Instruction::IsOpcodeSafeToDelete() const
spvtools::opt::Instruction::IsReadOnlyLoad() const
spvtools::opt::Instruction::IsReadOnlyPointerKernel() const
spvtools::opt::Instruction::IsReadOnlyPointerShaders() const
spvtools::opt::Instruction::IsScalarizable() const
spvtools::opt::Instruction::IsVulkanStorageBuffer() const
spvtools::opt::Instruction::IsVulkanStorageImage() const
spvtools::opt::Instruction::IsVulkanStorageTexelBuffer() const
spvtools::opt::Instruction::NumInOperandWords() const
spvtools::opt::Instruction::PrettyPrint(unsigned int) const
spvtools::opt::Instruction::RemoveInOperand(unsigned int)
spvtools::opt::Instruction::ReplaceOperands(std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> > const&)
spvtools::opt::Instruction::ToBinaryWithoutAttachedDebugInsts(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*) const
spvtools::opt::Instruction::operator=(spvtools::opt::Instruction&&)
spvtools::opt::Instruction::~Instruction()
spvtools::opt::InstructionBuilder::AddBinaryOp(unsigned int, SpvOp_, unsigned int, unsigned int)
spvtools::opt::InstructionBuilder::AddCompositeConstruct(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spvtools::opt::InstructionBuilder::AddConditionalBranch(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
spvtools::opt::InstructionBuilder::AddFunctionCall(unsigned int, unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spvtools::opt::InstructionBuilder::AddInstruction(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >&&)
spvtools::opt::InstructionBuilder::AddLoad(unsigned int, unsigned int)
spvtools::opt::InstructionBuilder::AddNaryOp(unsigned int, SpvOp_, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, unsigned int)
spvtools::opt::InstructionBuilder::AddNullaryOp(unsigned int, SpvOp_)
spvtools::opt::InstructionBuilder::AddSelect(unsigned int, unsigned int, unsigned int, unsigned int)
spvtools::opt::InstructionBuilder::AddSelectionMerge(unsigned int, unsigned int)
spvtools::opt::InstructionBuilder::AddSwitch(unsigned int, unsigned int, std::__1::vector<std::__1::pair<spvtools::utils::SmallVector<unsigned int, 2ul>, unsigned int>, std::__1::allocator<std::__1::pair<spvtools::utils::SmallVector<unsigned int, 2ul>, unsigned int> > > const&, unsigned int, unsigned int)
spvtools::opt::InstructionBuilder::AddUnaryOp(unsigned int, SpvOp_, unsigned int)
spvtools::opt::InstructionFolder::BinaryOperate(SpvOp_, unsigned int, unsigned int) const
spvtools::opt::InstructionFolder::FoldBinaryBooleanOpToConstant(spvtools::opt::Instruction*, std::__1::function<unsigned int (unsigned int)> const&, unsigned int*) const
spvtools::opt::InstructionFolder::FoldBinaryIntegerOpToConstant(spvtools::opt::Instruction*, std::__1::function<unsigned int (unsigned int)> const&, unsigned int*) const
spvtools::opt::InstructionFolder::FoldInstruction(spvtools::opt::Instruction*) const
spvtools::opt::InstructionFolder::FoldInstructionInternal(spvtools::opt::Instruction*) const
spvtools::opt::InstructionFolder::FoldInstructionToConstant(spvtools::opt::Instruction*, std::__1::function<unsigned int (unsigned int)>) const
spvtools::opt::InstructionFolder::FoldScalars(SpvOp_, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const
spvtools::opt::InstructionFolder::IsFoldableOpcode(SpvOp_) const
spvtools::opt::InstructionFolder::IsFoldableType(spvtools::opt::Instruction*) const
spvtools::opt::InstructionList::iterator::InsertBefore(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >&&)
spvtools::opt::InstructionList::iterator::InsertBefore(std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >&&)
spvtools::opt::InstructionList::~InstructionList()
spvtools::opt::IrLoader::AddInstruction(spv_parsed_instruction_t const*)
spvtools::opt::IrLoader::EndModule()
spvtools::opt::IrLoader::IrLoader(std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)> const&, spvtools::opt::Module*)
spvtools::opt::LocalAccessChainConvertPass::AllExtensionsSupported() const
spvtools::opt::LocalAccessChainConvertPass::AppendConstantOperands(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >*)
spvtools::opt::LocalAccessChainConvertPass::BuildAndAppendInst(SpvOp_, unsigned int, unsigned int, std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> > const&, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*)
spvtools::opt::LocalAccessChainConvertPass::BuildAndAppendVarLoad(spvtools::opt::Instruction const*, unsigned int*, unsigned int*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*)
spvtools::opt::LocalAccessChainConvertPass::ConvertLocalAccessChains(spvtools::opt::Function*)
spvtools::opt::LocalAccessChainConvertPass::FindTargetVars(spvtools::opt::Function*)
spvtools::opt::LocalAccessChainConvertPass::GenAccessChainStoreReplacement(spvtools::opt::Instruction const*, unsigned int, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*)
spvtools::opt::LocalAccessChainConvertPass::GetPreservedAnalyses()
spvtools::opt::LocalAccessChainConvertPass::HasOnlySupportedRefs(unsigned int)
spvtools::opt::LocalAccessChainConvertPass::InitExtensions()
spvtools::opt::LocalAccessChainConvertPass::Initialize()
spvtools::opt::LocalAccessChainConvertPass::LocalAccessChainConvertPass()
spvtools::opt::LocalAccessChainConvertPass::Process()
spvtools::opt::LocalAccessChainConvertPass::ProcessImpl()
spvtools::opt::LocalAccessChainConvertPass::ReplaceAccessChainLoad(spvtools::opt::Instruction const*, spvtools::opt::Instruction*)
spvtools::opt::LocalAccessChainConvertPass::name() const
spvtools::opt::LocalAccessChainConvertPass::~LocalAccessChainConvertPass()
spvtools::opt::LocalRedundancyEliminationPass::EliminateRedundanciesInBB(spvtools::opt::BasicBlock*, spvtools::opt::ValueNumberTable const&, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)
spvtools::opt::LocalRedundancyEliminationPass::EliminateRedundanciesInBB(spvtools::opt::BasicBlock*, spvtools::opt::ValueNumberTable const&, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0::operator()(spvtools::opt::Instruction*) const
spvtools::opt::LocalRedundancyEliminationPass::GetPreservedAnalyses()
spvtools::opt::LocalSingleBlockLoadStoreElimPass::AllExtensionsSupported() const
spvtools::opt::LocalSingleBlockLoadStoreElimPass::GetPreservedAnalyses()
spvtools::opt::LocalSingleBlockLoadStoreElimPass::HasOnlySupportedRefs(unsigned int)
spvtools::opt::LocalSingleBlockLoadStoreElimPass::InitExtensions()
spvtools::opt::LocalSingleBlockLoadStoreElimPass::Initialize()
spvtools::opt::LocalSingleBlockLoadStoreElimPass::LocalSingleBlockLoadStoreElim(spvtools::opt::Function*)
spvtools::opt::LocalSingleBlockLoadStoreElimPass::LocalSingleBlockLoadStoreElimPass()
spvtools::opt::LocalSingleBlockLoadStoreElimPass::Process()
spvtools::opt::LocalSingleBlockLoadStoreElimPass::ProcessImpl()
spvtools::opt::LocalSingleBlockLoadStoreElimPass::name() const
spvtools::opt::LocalSingleBlockLoadStoreElimPass::~LocalSingleBlockLoadStoreElimPass()
spvtools::opt::LocalSingleStoreElimPass::AllExtensionsSupported() const
spvtools::opt::LocalSingleStoreElimPass::FeedsAStore(spvtools::opt::Instruction*) const
spvtools::opt::LocalSingleStoreElimPass::FindSingleStoreAndCheckUses(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&) const
spvtools::opt::LocalSingleStoreElimPass::FindUses(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*) const
spvtools::opt::LocalSingleStoreElimPass::GetPreservedAnalyses()
spvtools::opt::LocalSingleStoreElimPass::InitExtensionAllowList()
spvtools::opt::LocalSingleStoreElimPass::LocalSingleStoreElim(spvtools::opt::Function*)
spvtools::opt::LocalSingleStoreElimPass::LocalSingleStoreElimPass()
spvtools::opt::LocalSingleStoreElimPass::Process()
spvtools::opt::LocalSingleStoreElimPass::ProcessImpl()
spvtools::opt::LocalSingleStoreElimPass::RewriteLoads(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&)
spvtools::opt::LocalSingleStoreElimPass::name() const
spvtools::opt::LocalSingleStoreElimPass::~LocalSingleStoreElimPass()
spvtools::opt::Loop::FindLatchBlock()
spvtools::opt::Loop::FindLoopPreheader(spvtools::opt::DominatorAnalysis*)
spvtools::opt::Loop::SetPreHeaderBlock(spvtools::opt::BasicBlock*)
spvtools::opt::LoopDescriptor::ClearLoops()
spvtools::opt::LoopDescriptor::LoopDescriptor(spvtools::opt::IRContext*, spvtools::opt::Function const*)
spvtools::opt::LoopDescriptor::LoopDescriptor(spvtools::opt::LoopDescriptor&&)
spvtools::opt::LoopDescriptor::PopulateList(spvtools::opt::IRContext*, spvtools::opt::Function const*)
spvtools::opt::LoopDescriptor::~LoopDescriptor()
spvtools::opt::MemPass::AddStores(unsigned int, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)
spvtools::opt::MemPass::CFGCleanup(spvtools::opt::Function*)
spvtools::opt::MemPass::CollectTargetVars(spvtools::opt::Function*)
spvtools::opt::MemPass::DCEInst(spvtools::opt::Instruction*, std::__1::function<void (spvtools::opt::Instruction*)> const&)
spvtools::opt::MemPass::GetPtr(spvtools::opt::Instruction*, unsigned int*)
spvtools::opt::MemPass::GetPtr(unsigned int, unsigned int*)
spvtools::opt::MemPass::GetUndefVal(unsigned int)
spvtools::opt::MemPass::HasLoads(unsigned int) const
spvtools::opt::MemPass::HasOnlyNamesAndDecorates(unsigned int) const
spvtools::opt::MemPass::HasOnlySupportedRefs(unsigned int)
spvtools::opt::MemPass::IsLiveVar(unsigned int) const
spvtools::opt::MemPass::IsNonPtrAccessChain(SpvOp_) const
spvtools::opt::MemPass::IsPtr(unsigned int)
spvtools::opt::MemPass::IsTargetType(spvtools::opt::Instruction const*) const
spvtools::opt::MemPass::IsTargetVar(unsigned int)
spvtools::opt::MemPass::KillAllInsts(spvtools::opt::BasicBlock*, bool)
spvtools::opt::MemPass::MemPass()
spvtools::opt::MemPass::RemoveBlock(spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>*)
spvtools::opt::MemPass::RemovePhiOperands(spvtools::opt::Instruction*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> > const&)
spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::opt::Function*)
spvtools::opt::MemPass::Type2Undef(unsigned int)
spvtools::opt::MemPass::~MemPass()
spvtools::opt::MergeReturnPass::AddDummySwitchAroundFunction()
spvtools::opt::MergeReturnPass::AddNewPhiNodes()
spvtools::opt::MergeReturnPass::AddNewPhiNodes(spvtools::opt::BasicBlock*)
spvtools::opt::MergeReturnPass::AddReturnFlag()
spvtools::opt::MergeReturnPass::AddReturnValue()
spvtools::opt::MergeReturnPass::BranchToBlock(spvtools::opt::BasicBlock*, unsigned int)
spvtools::opt::MergeReturnPass::BreakFromConstruct(spvtools::opt::BasicBlock*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*, spvtools::opt::Instruction*)
spvtools::opt::MergeReturnPass::CollectReturnBlocks(spvtools::opt::Function*)
spvtools::opt::MergeReturnPass::CreateDummySwitch(spvtools::opt::BasicBlock*)
spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::opt::BasicBlock*, spvtools::opt::Instruction&)
spvtools::opt::MergeReturnPass::CreateReturn(spvtools::opt::BasicBlock*)
spvtools::opt::MergeReturnPass::CreateReturnBlock()
spvtools::opt::MergeReturnPass::GenerateState(spvtools::opt::BasicBlock*)
spvtools::opt::MergeReturnPass::GetPreservedAnalyses()
spvtools::opt::MergeReturnPass::HasNontrivialUnreachableBlocks(spvtools::opt::Function*)
spvtools::opt::MergeReturnPass::MergeReturnBlocks(spvtools::opt::Function*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const&)
spvtools::opt::MergeReturnPass::PredicateBlocks(spvtools::opt::BasicBlock*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)
spvtools::opt::MergeReturnPass::Process()
spvtools::opt::MergeReturnPass::ProcessStructured(spvtools::opt::Function*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const&)
spvtools::opt::MergeReturnPass::ProcessStructuredBlock(spvtools::opt::BasicBlock*)
spvtools::opt::MergeReturnPass::RecordImmediateDominators(spvtools::opt::Function*)
spvtools::opt::MergeReturnPass::RecordReturnValue(spvtools::opt::BasicBlock*)
spvtools::opt::MergeReturnPass::RecordReturned(spvtools::opt::BasicBlock*)
spvtools::opt::MergeReturnPass::name() const
spvtools::opt::MergeReturnPass::~MergeReturnPass()
spvtools::opt::Module::ComputeIdBound() const
spvtools::opt::Module::ForEachInst(std::__1::function<void (spvtools::opt::Instruction const*)> const&, bool) const
spvtools::opt::Module::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)
spvtools::opt::Module::GetConstants()
spvtools::opt::Module::GetConstants() const
spvtools::opt::Module::GetExtInstImportId(char const*)
spvtools::opt::Module::GetTypes() const
spvtools::opt::Module::Module()
spvtools::opt::Module::TakeNextIdBound()
spvtools::opt::Module::ToBinary(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, bool) const
spvtools::opt::Module::~Module()
spvtools::opt::Pass::GetPointeeTypeId(spvtools::opt::Instruction const*) const
spvtools::opt::Pass::GetPreservedAnalyses()
spvtools::opt::Pass::Pass()
spvtools::opt::Pass::Run(spvtools::opt::IRContext*)
spvtools::opt::Pass::~Pass()
spvtools::opt::PassManager::Run(spvtools::opt::IRContext*)
spvtools::opt::PassManager::Run(spvtools::opt::IRContext*)::$_0::operator()(char const*, spvtools::opt::Pass*) const
spvtools::opt::PostOrderTreeDFIterator<spvtools::opt::DominatorTreeNode>::MoveToNextNode()
spvtools::opt::ProcessLinesPass::EliminateDeadLines(spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)
spvtools::opt::ProcessLinesPass::GetPreservedAnalyses()
spvtools::opt::ProcessLinesPass::Process()
spvtools::opt::ProcessLinesPass::ProcessLines()
spvtools::opt::ProcessLinesPass::ProcessLinesPass(unsigned int)
spvtools::opt::ProcessLinesPass::PropagateLine(spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)
spvtools::opt::ProcessLinesPass::name() const
spvtools::opt::ProcessLinesPass::~ProcessLinesPass()
spvtools::opt::RedundancyEliminationPass::EliminateRedundanciesFrom(spvtools::opt::DominatorTreeNode*, spvtools::opt::ValueNumberTable const&, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >)
spvtools::opt::RedundancyEliminationPass::Process()
spvtools::opt::RedundancyEliminationPass::name() const
spvtools::opt::RedundancyEliminationPass::~RedundancyEliminationPass()
spvtools::opt::SECantCompute::AsSECantCompute()
spvtools::opt::SECantCompute::AsSECantCompute() const
spvtools::opt::SECantCompute::GetType() const
spvtools::opt::SECantCompute::~SECantCompute()
spvtools::opt::SENode::AddChild(spvtools::opt::SENode*)
spvtools::opt::SENode::AsSEAddNode()
spvtools::opt::SENode::AsSEAddNode() const
spvtools::opt::SENode::AsSECantCompute()
spvtools::opt::SENode::AsSECantCompute() const
spvtools::opt::SENode::AsSEConstantNode()
spvtools::opt::SENode::AsSEConstantNode() const
spvtools::opt::SENode::AsSEMultiplyNode()
spvtools::opt::SENode::AsSEMultiplyNode() const
spvtools::opt::SENode::AsSENegative()
spvtools::opt::SENode::AsSENegative() const
spvtools::opt::SENode::AsSERecurrentNode()
spvtools::opt::SENode::AsSERecurrentNode() const
spvtools::opt::SENode::AsSEValueUnknown()
spvtools::opt::SENode::AsSEValueUnknown() const
spvtools::opt::SENode::NumberOfNodes
spvtools::opt::SENode::operator==(spvtools::opt::SENode const&) const
spvtools::opt::SENode::~SENode()
spvtools::opt::SENodeHash::operator()(spvtools::opt::SENode const*) const
spvtools::opt::SSARewritePass::Process()
spvtools::opt::SSARewritePass::name() const
spvtools::opt::SSARewritePass::~SSARewritePass()
spvtools::opt::SSARewriter::AddPhiOperands(spvtools::opt::SSARewriter::PhiCandidate*)
spvtools::opt::SSARewriter::ApplyReplacements()
spvtools::opt::SSARewriter::CreatePhiCandidate(unsigned int, spvtools::opt::BasicBlock*)
spvtools::opt::SSARewriter::FinalizePhiCandidate(spvtools::opt::SSARewriter::PhiCandidate*)
spvtools::opt::SSARewriter::GetReachingDef(unsigned int, spvtools::opt::BasicBlock*)
spvtools::opt::SSARewriter::GetReplacement(std::__1::pair<unsigned int, unsigned int>)
spvtools::opt::SSARewriter::PhiCandidate::AddUser(unsigned int)
spvtools::opt::SSARewriter::ProcessLoad(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*)
spvtools::opt::SSARewriter::ProcessStore(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*)
spvtools::opt::SSARewriter::ReplacePhiUsersWith(spvtools::opt::SSARewriter::PhiCandidate const&, unsigned int)
spvtools::opt::SSARewriter::RewriteFunctionIntoSSA(spvtools::opt::Function*)
spvtools::opt::SSARewriter::WriteVariable(unsigned int, spvtools::opt::BasicBlock*, unsigned int)
spvtools::opt::SSARewriter::~SSARewriter()
spvtools::opt::ScalarEvolutionAnalysis::GetCachedOrAdd(std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> >)
spvtools::opt::ScalarEvolutionAnalysis::ScalarEvolutionAnalysis(spvtools::opt::IRContext*)
spvtools::opt::ScalarReplacementPass::CanReplaceVariable(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::CheckAnnotations(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::CheckType(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::CheckTypeAnnotations(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::CheckUses(spvtools::opt::Instruction const*, spvtools::opt::ScalarReplacementPass::VariableStats*) const
spvtools::opt::ScalarReplacementPass::CheckUsesRelaxed(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::CreateNullConstant(unsigned int)
spvtools::opt::ScalarReplacementPass::CreateReplacementVariables(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)
spvtools::opt::ScalarReplacementPass::CreateVariable(unsigned int, spvtools::opt::Instruction*, unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)
spvtools::opt::ScalarReplacementPass::GetArrayLength(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::GetMaxLegalIndex(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::GetOrCreateInitialValue(spvtools::opt::Instruction*, unsigned int, spvtools::opt::Instruction*)
spvtools::opt::ScalarReplacementPass::GetOrCreatePointerType(unsigned int)
spvtools::opt::ScalarReplacementPass::GetPreservedAnalyses()
spvtools::opt::ScalarReplacementPass::GetStorageType(spvtools::opt::Instruction const*) const
spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::opt::Instruction*)
spvtools::opt::ScalarReplacementPass::IsSpecConstant(unsigned int) const
spvtools::opt::ScalarReplacementPass::Process()
spvtools::opt::ScalarReplacementPass::ProcessFunction(spvtools::opt::Function*)
spvtools::opt::ScalarReplacementPass::ReplaceAccessChain(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&)
spvtools::opt::ScalarReplacementPass::ReplaceVariable(spvtools::opt::Instruction*, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)
spvtools::opt::ScalarReplacementPass::ReplaceWholeLoad(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&)
spvtools::opt::ScalarReplacementPass::ReplaceWholeStore(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&)
spvtools::opt::ScalarReplacementPass::TransferAnnotations(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)
spvtools::opt::ScalarReplacementPass::name() const
spvtools::opt::ScalarReplacementPass::~ScalarReplacementPass()
spvtools::opt::SimplificationPass::AddNewOperands(spvtools::opt::Instruction*, std::__1::unordered_set<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)
spvtools::opt::SimplificationPass::GetPreservedAnalyses()
spvtools::opt::SimplificationPass::Process()
spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)
spvtools::opt::SimplificationPass::name() const
spvtools::opt::SimplificationPass::~SimplificationPass()
spvtools::opt::StripDebugInfoPass::Process()
spvtools::opt::StripDebugInfoPass::name() const
spvtools::opt::StripDebugInfoPass::~StripDebugInfoPass()
spvtools::opt::StructuredCFGAnalysis::AddBlocksInFunction(spvtools::opt::Function*)
spvtools::opt::StructuredCFGAnalysis::ContainingConstruct(spvtools::opt::Instruction*)
spvtools::opt::StructuredCFGAnalysis::FindFuncsCalledFromContinue()
spvtools::opt::StructuredCFGAnalysis::IsContinueBlock(unsigned int)
spvtools::opt::StructuredCFGAnalysis::IsMergeBlock(unsigned int)
spvtools::opt::StructuredCFGAnalysis::LoopContinueBlock(unsigned int)
spvtools::opt::StructuredCFGAnalysis::LoopMergeBlock(unsigned int)
spvtools::opt::StructuredCFGAnalysis::StructuredCFGAnalysis(spvtools::opt::IRContext*)
spvtools::opt::StructuredCFGAnalysis::SwitchMergeBlock(unsigned int)
spvtools::opt::TreeDFIterator<spvtools::opt::DominatorTreeNode>::MoveToNextNode()
spvtools::opt::ValueNumberTable::AssignValueNumber(spvtools::opt::Instruction*)
spvtools::opt::ValueNumberTable::BuildDominatorTreeValueNumberTable()
spvtools::opt::ValueNumberTable::GetValueNumber(spvtools::opt::Instruction*) const
spvtools::opt::ValueNumberTable::GetValueNumber(unsigned int) const
spvtools::opt::ValueTableHash::operator()(spvtools::opt::Instruction const&) const
spvtools::opt::VectorDCE::AddItemToWorkListIfNeeded(spvtools::opt::VectorDCE::WorkListItem, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
spvtools::opt::VectorDCE::FindLiveComponents(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*)
spvtools::opt::VectorDCE::GetPreservedAnalyses()
spvtools::opt::VectorDCE::HasScalarResult(spvtools::opt::Instruction const*) const
spvtools::opt::VectorDCE::HasVectorResult(spvtools::opt::Instruction const*) const
spvtools::opt::VectorDCE::MarkCompositeContructUsesAsLive(spvtools::opt::VectorDCE::WorkListItem, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
spvtools::opt::VectorDCE::MarkExtractUseAsLive(spvtools::opt::Instruction const*, spvtools::utils::BitVector const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
spvtools::opt::VectorDCE::MarkInsertUsesAsLive(spvtools::opt::VectorDCE::WorkListItem const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
spvtools::opt::VectorDCE::MarkUsesAsLive(spvtools::opt::Instruction*, spvtools::utils::BitVector const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
spvtools::opt::VectorDCE::MarkVectorShuffleUsesAsLive(spvtools::opt::VectorDCE::WorkListItem const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)
spvtools::opt::VectorDCE::Process()
spvtools::opt::VectorDCE::RewriteInsertInstruction(spvtools::opt::Instruction*, spvtools::utils::BitVector const&)
spvtools::opt::VectorDCE::RewriteInstructions(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > > const&)
spvtools::opt::VectorDCE::VectorDCE()
spvtools::opt::VectorDCE::VectorDCEFunction(spvtools::opt::Function*)
spvtools::opt::VectorDCE::name() const
spvtools::opt::VectorDCE::~VectorDCE()
spvtools::opt::WrapOpKill::GetOpKillFuncId()
spvtools::opt::WrapOpKill::GetPreservedAnalyses()
spvtools::opt::WrapOpKill::GetVoidFunctionTypeId()
spvtools::opt::WrapOpKill::GetVoidTypeId()
spvtools::opt::WrapOpKill::Process()
spvtools::opt::WrapOpKill::ReplaceWithFunctionCall(spvtools::opt::Instruction*)
spvtools::opt::WrapOpKill::name() const
spvtools::opt::WrapOpKill::~WrapOpKill()
spvtools::opt::analysis::(anonymous namespace)::CompareTwoVectors(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >)
spvtools::opt::analysis::(anonymous namespace)::SetInlinedOperand(spvtools::opt::Instruction*, unsigned int)
spvtools::opt::analysis::AccelerationStructureNV::AsAccelerationStructureNV()
spvtools::opt::analysis::AccelerationStructureNV::AsAccelerationStructureNV() const
spvtools::opt::analysis::AccelerationStructureNV::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::AccelerationStructureNV::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::AccelerationStructureNV::str() const
spvtools::opt::analysis::AccelerationStructureNV::~AccelerationStructureNV()
spvtools::opt::analysis::Array::Array(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Array::LengthInfo const&)
spvtools::opt::analysis::Array::AsArray()
spvtools::opt::analysis::Array::AsArray() const
spvtools::opt::analysis::Array::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Array::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Array::ReplaceElementType(spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::Array::str() const
spvtools::opt::analysis::Array::~Array()
spvtools::opt::analysis::ArrayConstant::AsArrayConstant()
spvtools::opt::analysis::ArrayConstant::AsArrayConstant() const
spvtools::opt::analysis::ArrayConstant::Copy() const
spvtools::opt::analysis::ArrayConstant::~ArrayConstant()
spvtools::opt::analysis::Bool::AsBool()
spvtools::opt::analysis::Bool::AsBool() const
spvtools::opt::analysis::Bool::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Bool::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Bool::str() const
spvtools::opt::analysis::Bool::~Bool()
spvtools::opt::analysis::BoolConstant::AsBoolConstant()
spvtools::opt::analysis::BoolConstant::AsBoolConstant() const
spvtools::opt::analysis::BoolConstant::Copy() const
spvtools::opt::analysis::BoolConstant::~BoolConstant()
spvtools::opt::analysis::CompositeConstant::AsCompositeConstant()
spvtools::opt::analysis::CompositeConstant::AsCompositeConstant() const
spvtools::opt::analysis::CompositeConstant::GetComponents() const
spvtools::opt::analysis::CompositeConstant::IsZero() const
spvtools::opt::analysis::CompositeConstant::~CompositeConstant()
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldCompositeWithConstants()::$_3, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldExtractWithConstants()::$_0, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFClampFeedingCompare(unsigned int)::$_27, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPBinaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_5, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPUnaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_4, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldOpDotWithConstants()::$_25, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldVectorShuffleWithConstants()::$_1, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldVectorTimesScalar()::$_2, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::Constant const* (*)(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&), spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFAdd()::$_10, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFDiv()::$_12, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#1}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#2}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#3}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#4}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMul()::$_11, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdEqual()::$_13, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdGreaterThan()::$_19, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdGreaterThanEqual()::$_23, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdLessThan()::$_17, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdLessThanEqual()::$_21, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdNotEqual()::$_15, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFSub()::$_9, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFTranscendentalBinary(double (*)(double, double))::$_30, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordEqual()::$_14, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordGreaterThan()::$_20, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordGreaterThanEqual()::$_24, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordLessThan()::$_18, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordLessThanEqual()::$_22, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordNotEqual()::$_16, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::Constant const* (*)(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*), spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFNegateOp()::$_26, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFToIOp()::$_6, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFTranscendentalUnary(double (*)(double))::$_29, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldIToFOp()::$_7, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant const* std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldQuantizeToF16Scalar()::$_8, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)
spvtools::opt::analysis::Constant::AsArrayConstant()
spvtools::opt::analysis::Constant::AsArrayConstant() const
spvtools::opt::analysis::Constant::AsBoolConstant()
spvtools::opt::analysis::Constant::AsBoolConstant() const
spvtools::opt::analysis::Constant::AsCompositeConstant()
spvtools::opt::analysis::Constant::AsCompositeConstant() const
spvtools::opt::analysis::Constant::AsFloatConstant()
spvtools::opt::analysis::Constant::AsFloatConstant() const
spvtools::opt::analysis::Constant::AsIntConstant()
spvtools::opt::analysis::Constant::AsIntConstant() const
spvtools::opt::analysis::Constant::AsMatrixConstant()
spvtools::opt::analysis::Constant::AsMatrixConstant() const
spvtools::opt::analysis::Constant::AsNullConstant()
spvtools::opt::analysis::Constant::AsNullConstant() const
spvtools::opt::analysis::Constant::AsScalarConstant()
spvtools::opt::analysis::Constant::AsScalarConstant() const
spvtools::opt::analysis::Constant::AsStructConstant()
spvtools::opt::analysis::Constant::AsStructConstant() const
spvtools::opt::analysis::Constant::AsVectorConstant()
spvtools::opt::analysis::Constant::AsVectorConstant() const
spvtools::opt::analysis::Constant::GetDouble() const
spvtools::opt::analysis::Constant::GetFloat() const
spvtools::opt::analysis::Constant::GetS32() const
spvtools::opt::analysis::Constant::GetS64() const
spvtools::opt::analysis::Constant::GetSignExtendedValue() const
spvtools::opt::analysis::Constant::GetU32() const
spvtools::opt::analysis::Constant::GetU64() const
spvtools::opt::analysis::Constant::GetValueAsDouble() const
spvtools::opt::analysis::Constant::GetVectorComponents(spvtools::opt::analysis::ConstantManager*) const
spvtools::opt::analysis::Constant::GetZeroExtendedValue() const
spvtools::opt::analysis::Constant::~Constant()
spvtools::opt::analysis::ConstantEqual::operator()(spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*) const
spvtools::opt::analysis::ConstantHash::add_pointer(std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >*, void const*) const
spvtools::opt::analysis::ConstantHash::operator()(spvtools::opt::analysis::Constant const*) const
spvtools::opt::analysis::ConstantManager::BuildInstructionAndAddToModule(spvtools::opt::analysis::Constant const*, spvtools::opt::InstructionList::iterator*, unsigned int)
spvtools::opt::analysis::ConstantManager::ConstantManager(spvtools::opt::IRContext*)
spvtools::opt::analysis::ConstantManager::CreateCompositeInstruction(unsigned int, spvtools::opt::analysis::CompositeConstant const*, unsigned int) const
spvtools::opt::analysis::ConstantManager::CreateConstant(spvtools::opt::analysis::Type const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&) const
spvtools::opt::analysis::ConstantManager::CreateInstruction(unsigned int, spvtools::opt::analysis::Constant const*, unsigned int) const
spvtools::opt::analysis::ConstantManager::FindDeclaredConstant(spvtools::opt::analysis::Constant const*, unsigned int) const
spvtools::opt::analysis::ConstantManager::GetConstant(spvtools::opt::analysis::Type const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&)
spvtools::opt::analysis::ConstantManager::GetConstantFromInst(spvtools::opt::Instruction const*)
spvtools::opt::analysis::ConstantManager::GetConstantsFromIds(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&) const
spvtools::opt::analysis::ConstantManager::GetDefiningInstruction(spvtools::opt::analysis::Constant const*, unsigned int, spvtools::opt::InstructionList::iterator*)
spvtools::opt::analysis::ConstantManager::GetOperandConstants(spvtools::opt::Instruction const*) const
spvtools::opt::analysis::ConstantManager::GetType(spvtools::opt::Instruction const*) const
spvtools::opt::analysis::ConstantManager::MapConstantToInst(spvtools::opt::analysis::Constant const*, spvtools::opt::Instruction*)
spvtools::opt::analysis::ConstantManager::RemoveId(unsigned int)
spvtools::opt::analysis::ConstantManager::~ConstantManager()
spvtools::opt::analysis::CooperativeMatrixNV::AsCooperativeMatrixNV()
spvtools::opt::analysis::CooperativeMatrixNV::AsCooperativeMatrixNV() const
spvtools::opt::analysis::CooperativeMatrixNV::CooperativeMatrixNV(spvtools::opt::analysis::Type const*, unsigned int, unsigned int, unsigned int)
spvtools::opt::analysis::CooperativeMatrixNV::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::CooperativeMatrixNV::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::CooperativeMatrixNV::str() const
spvtools::opt::analysis::CooperativeMatrixNV::~CooperativeMatrixNV()
spvtools::opt::analysis::DebugInfoManager::AddDebugValue(spvtools::opt::Instruction*, unsigned int, unsigned int, spvtools::opt::Instruction*)
spvtools::opt::analysis::DebugInfoManager::AnalyzeDebugInst(spvtools::opt::Instruction*)
spvtools::opt::analysis::DebugInfoManager::AnalyzeDebugInsts(spvtools::opt::Module&)
spvtools::opt::analysis::DebugInfoManager::BuildDebugInlinedAtChain(unsigned int, spvtools::opt::analysis::DebugInlinedAtContext*)
spvtools::opt::analysis::DebugInfoManager::BuildDebugScope(spvtools::opt::DebugScope const&, spvtools::opt::analysis::DebugInlinedAtContext*)
spvtools::opt::analysis::DebugInfoManager::ClearDebugInfo(spvtools::opt::Instruction*)
spvtools::opt::analysis::DebugInfoManager::CloneDebugInlinedAt(unsigned int, spvtools::opt::Instruction*)
spvtools::opt::analysis::DebugInfoManager::CreateDebugInlinedAt(spvtools::opt::Instruction const*, spvtools::opt::DebugScope const&)
spvtools::opt::analysis::DebugInfoManager::DebugInfoManager(spvtools::opt::IRContext*)
spvtools::opt::analysis::DebugInfoManager::GetDebugInfoNone()
spvtools::opt::analysis::DebugInfoManager::GetEmptyDebugExpression()
spvtools::opt::analysis::DebugInfoManager::GetParentScope(unsigned int)
spvtools::opt::analysis::DebugInfoManager::GetVariableIdOfDebugValueUsedForDeclare(spvtools::opt::Instruction*)
spvtools::opt::analysis::DebugInfoManager::RegisterDbgDeclare(unsigned int, spvtools::opt::Instruction*)
spvtools::opt::analysis::DebugInfoManager::~DebugInfoManager()
spvtools::opt::analysis::DecorationManager::AddDecoration(spvtools::opt::Instruction*)
spvtools::opt::analysis::DecorationManager::AnalyzeDecorations()
spvtools::opt::analysis::DecorationManager::CloneDecorations(unsigned int, unsigned int)
spvtools::opt::analysis::DecorationManager::CloneDecorations(unsigned int, unsigned int, std::__1::vector<SpvDecoration_, std::__1::allocator<SpvDecoration_> > const&)
spvtools::opt::analysis::DecorationManager::ForEachDecoration(unsigned int, unsigned int, std::__1::function<void (spvtools::opt::Instruction const&)>)
spvtools::opt::analysis::DecorationManager::GetDecorationsFor(unsigned int, bool)
spvtools::opt::analysis::DecorationManager::HaveSubsetOfDecorations(unsigned int, unsigned int) const
spvtools::opt::analysis::DecorationManager::HaveSubsetOfDecorations(unsigned int, unsigned int) const::$_2::operator()(std::__1::vector<spvtools::opt::Instruction const*, std::__1::allocator<spvtools::opt::Instruction const*> > const&, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*) const
spvtools::opt::analysis::DecorationManager::HaveTheSameDecorations(unsigned int, unsigned int) const
spvtools::opt::analysis::DecorationManager::HaveTheSameDecorations(unsigned int, unsigned int) const::$_1::operator()(std::__1::vector<spvtools::opt::Instruction const*, std::__1::allocator<spvtools::opt::Instruction const*> > const&, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*, std::__1::set<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >*) const
spvtools::opt::analysis::DecorationManager::InternalGetDecorationsFor<spvtools::opt::Instruction const*>(unsigned int, bool)::{lambda(std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&)#1}::operator()(std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&) const
spvtools::opt::analysis::DecorationManager::InternalGetDecorationsFor<spvtools::opt::Instruction*>(unsigned int, bool)::{lambda(std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&)#1}::operator()(std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > const&) const
spvtools::opt::analysis::DecorationManager::RemoveDecoration(spvtools::opt::Instruction*)
spvtools::opt::analysis::DecorationManager::RemoveDecorationsFrom(unsigned int, std::__1::function<bool (spvtools::opt::Instruction const&)>)
spvtools::opt::analysis::DecorationManager::WhileEachDecoration(unsigned int, unsigned int, std::__1::function<bool (spvtools::opt::Instruction const&)>)
spvtools::opt::analysis::DefUseManager::AnalyzeDefUse(spvtools::opt::Module*)
spvtools::opt::analysis::DefUseManager::AnalyzeInstDef(spvtools::opt::Instruction*)
spvtools::opt::analysis::DefUseManager::AnalyzeInstDefUse(spvtools::opt::Instruction*)
spvtools::opt::analysis::DefUseManager::AnalyzeInstUse(spvtools::opt::Instruction*)
spvtools::opt::analysis::DefUseManager::ClearInst(spvtools::opt::Instruction*)
spvtools::opt::analysis::DefUseManager::EraseUseRecordsOfOperandIds(spvtools::opt::Instruction const*)
spvtools::opt::analysis::DefUseManager::ForEachUse(spvtools::opt::Instruction const*, std::__1::function<void (spvtools::opt::Instruction*, unsigned int)> const&) const
spvtools::opt::analysis::DefUseManager::ForEachUse(unsigned int, std::__1::function<void (spvtools::opt::Instruction*, unsigned int)> const&) const
spvtools::opt::analysis::DefUseManager::ForEachUser(spvtools::opt::Instruction const*, std::__1::function<void (spvtools::opt::Instruction*)> const&) const
spvtools::opt::analysis::DefUseManager::ForEachUser(unsigned int, std::__1::function<void (spvtools::opt::Instruction*)> const&) const
spvtools::opt::analysis::DefUseManager::GetDef(unsigned int)
spvtools::opt::analysis::DefUseManager::NumUsers(spvtools::opt::Instruction const*) const
spvtools::opt::analysis::DefUseManager::NumUses(spvtools::opt::Instruction const*) const
spvtools::opt::analysis::DefUseManager::UpdateDefUse(spvtools::opt::Instruction*)
spvtools::opt::analysis::DefUseManager::WhileEachUse(spvtools::opt::Instruction const*, std::__1::function<bool (spvtools::opt::Instruction*, unsigned int)> const&) const
spvtools::opt::analysis::DefUseManager::WhileEachUse(unsigned int, std::__1::function<bool (spvtools::opt::Instruction*, unsigned int)> const&) const
spvtools::opt::analysis::DefUseManager::WhileEachUser(spvtools::opt::Instruction const*, std::__1::function<bool (spvtools::opt::Instruction*)> const&) const
spvtools::opt::analysis::DefUseManager::WhileEachUser(unsigned int, std::__1::function<bool (spvtools::opt::Instruction*)> const&) const
spvtools::opt::analysis::DeviceEvent::AsDeviceEvent()
spvtools::opt::analysis::DeviceEvent::AsDeviceEvent() const
spvtools::opt::analysis::DeviceEvent::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::DeviceEvent::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::DeviceEvent::str() const
spvtools::opt::analysis::DeviceEvent::~DeviceEvent()
spvtools::opt::analysis::Event::AsEvent()
spvtools::opt::analysis::Event::AsEvent() const
spvtools::opt::analysis::Event::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Event::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Event::str() const
spvtools::opt::analysis::Event::~Event()
spvtools::opt::analysis::Float::AsFloat()
spvtools::opt::analysis::Float::AsFloat() const
spvtools::opt::analysis::Float::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Float::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Float::str() const
spvtools::opt::analysis::Float::~Float()
spvtools::opt::analysis::FloatConstant::AsFloatConstant()
spvtools::opt::analysis::FloatConstant::AsFloatConstant() const
spvtools::opt::analysis::FloatConstant::Copy() const
spvtools::opt::analysis::FloatConstant::~FloatConstant()
spvtools::opt::analysis::ForwardPointer::AsForwardPointer()
spvtools::opt::analysis::ForwardPointer::AsForwardPointer() const
spvtools::opt::analysis::ForwardPointer::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::ForwardPointer::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::ForwardPointer::str() const
spvtools::opt::analysis::ForwardPointer::~ForwardPointer()
spvtools::opt::analysis::Function::AsFunction()
spvtools::opt::analysis::Function::AsFunction() const
spvtools::opt::analysis::Function::Function(spvtools::opt::analysis::Type const*, std::__1::vector<spvtools::opt::analysis::Type const*, std::__1::allocator<spvtools::opt::analysis::Type const*> > const&)
spvtools::opt::analysis::Function::Function(spvtools::opt::analysis::Type const*, std::__1::vector<spvtools::opt::analysis::Type const*, std::__1::allocator<spvtools::opt::analysis::Type const*> >&)
spvtools::opt::analysis::Function::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Function::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Function::SetReturnType(spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::Function::str() const
spvtools::opt::analysis::Function::~Function()
spvtools::opt::analysis::Image::AsImage()
spvtools::opt::analysis::Image::AsImage() const
spvtools::opt::analysis::Image::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Image::Image(spvtools::opt::analysis::Type*, SpvDim_, unsigned int, bool, bool, unsigned int, SpvImageFormat_, SpvAccessQualifier_)
spvtools::opt::analysis::Image::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Image::str() const
spvtools::opt::analysis::Image::~Image()
spvtools::opt::analysis::IntConstant::AsIntConstant()
spvtools::opt::analysis::IntConstant::AsIntConstant() const
spvtools::opt::analysis::IntConstant::Copy() const
spvtools::opt::analysis::IntConstant::~IntConstant()
spvtools::opt::analysis::Integer::AsInteger()
spvtools::opt::analysis::Integer::AsInteger() const
spvtools::opt::analysis::Integer::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Integer::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Integer::str() const
spvtools::opt::analysis::Integer::~Integer()
spvtools::opt::analysis::Matrix::AsMatrix()
spvtools::opt::analysis::Matrix::AsMatrix() const
spvtools::opt::analysis::Matrix::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Matrix::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Matrix::Matrix(spvtools::opt::analysis::Type const*, unsigned int)
spvtools::opt::analysis::Matrix::str() const
spvtools::opt::analysis::Matrix::~Matrix()
spvtools::opt::analysis::MatrixConstant::AsMatrixConstant()
spvtools::opt::analysis::MatrixConstant::AsMatrixConstant() const
spvtools::opt::analysis::MatrixConstant::Copy() const
spvtools::opt::analysis::MatrixConstant::~MatrixConstant()
spvtools::opt::analysis::NamedBarrier::AsNamedBarrier()
spvtools::opt::analysis::NamedBarrier::AsNamedBarrier() const
spvtools::opt::analysis::NamedBarrier::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::NamedBarrier::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::NamedBarrier::str() const
spvtools::opt::analysis::NamedBarrier::~NamedBarrier()
spvtools::opt::analysis::NullConstant::AsNullConstant()
spvtools::opt::analysis::NullConstant::AsNullConstant() const
spvtools::opt::analysis::NullConstant::Copy() const
spvtools::opt::analysis::NullConstant::IsZero() const
spvtools::opt::analysis::NullConstant::~NullConstant()
spvtools::opt::analysis::Opaque::AsOpaque()
spvtools::opt::analysis::Opaque::AsOpaque() const
spvtools::opt::analysis::Opaque::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Opaque::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Opaque::str() const
spvtools::opt::analysis::Opaque::~Opaque()
spvtools::opt::analysis::Pipe::AsPipe()
spvtools::opt::analysis::Pipe::AsPipe() const
spvtools::opt::analysis::Pipe::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Pipe::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Pipe::str() const
spvtools::opt::analysis::Pipe::~Pipe()
spvtools::opt::analysis::PipeStorage::AsPipeStorage()
spvtools::opt::analysis::PipeStorage::AsPipeStorage() const
spvtools::opt::analysis::PipeStorage::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::PipeStorage::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::PipeStorage::str() const
spvtools::opt::analysis::PipeStorage::~PipeStorage()
spvtools::opt::analysis::Pointer::AsPointer()
spvtools::opt::analysis::Pointer::AsPointer() const
spvtools::opt::analysis::Pointer::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Pointer::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Pointer::Pointer(spvtools::opt::analysis::Type const*, SpvStorageClass_)
spvtools::opt::analysis::Pointer::SetPointeeType(spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::Pointer::str() const
spvtools::opt::analysis::Pointer::~Pointer()
spvtools::opt::analysis::Queue::AsQueue()
spvtools::opt::analysis::Queue::AsQueue() const
spvtools::opt::analysis::Queue::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Queue::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Queue::str() const
spvtools::opt::analysis::Queue::~Queue()
spvtools::opt::analysis::RayQueryProvisionalKHR::AsRayQueryProvisionalKHR()
spvtools::opt::analysis::RayQueryProvisionalKHR::AsRayQueryProvisionalKHR() const
spvtools::opt::analysis::RayQueryProvisionalKHR::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::RayQueryProvisionalKHR::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::RayQueryProvisionalKHR::str() const
spvtools::opt::analysis::RayQueryProvisionalKHR::~RayQueryProvisionalKHR()
spvtools::opt::analysis::ReserveId::AsReserveId()
spvtools::opt::analysis::ReserveId::AsReserveId() const
spvtools::opt::analysis::ReserveId::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::ReserveId::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::ReserveId::str() const
spvtools::opt::analysis::ReserveId::~ReserveId()
spvtools::opt::analysis::RuntimeArray::AsRuntimeArray()
spvtools::opt::analysis::RuntimeArray::AsRuntimeArray() const
spvtools::opt::analysis::RuntimeArray::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::RuntimeArray::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::RuntimeArray::ReplaceElementType(spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::RuntimeArray::RuntimeArray(spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::RuntimeArray::str() const
spvtools::opt::analysis::RuntimeArray::~RuntimeArray()
spvtools::opt::analysis::SampledImage::AsSampledImage()
spvtools::opt::analysis::SampledImage::AsSampledImage() const
spvtools::opt::analysis::SampledImage::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::SampledImage::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::SampledImage::str() const
spvtools::opt::analysis::SampledImage::~SampledImage()
spvtools::opt::analysis::Sampler::AsSampler()
spvtools::opt::analysis::Sampler::AsSampler() const
spvtools::opt::analysis::Sampler::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Sampler::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Sampler::str() const
spvtools::opt::analysis::Sampler::~Sampler()
spvtools::opt::analysis::ScalarConstant::AsScalarConstant()
spvtools::opt::analysis::ScalarConstant::AsScalarConstant() const
spvtools::opt::analysis::ScalarConstant::IsZero() const
spvtools::opt::analysis::ScalarConstant::words() const
spvtools::opt::analysis::ScalarConstant::~ScalarConstant()
spvtools::opt::analysis::Struct::AddMemberDecoration(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&&)
spvtools::opt::analysis::Struct::AsStruct()
spvtools::opt::analysis::Struct::AsStruct() const
spvtools::opt::analysis::Struct::ClearDecorations()
spvtools::opt::analysis::Struct::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Struct::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Struct::Struct(spvtools::opt::analysis::Struct const&)
spvtools::opt::analysis::Struct::Struct(std::__1::vector<spvtools::opt::analysis::Type const*, std::__1::allocator<spvtools::opt::analysis::Type const*> > const&)
spvtools::opt::analysis::Struct::decoration_empty() const
spvtools::opt::analysis::Struct::str() const
spvtools::opt::analysis::Struct::~Struct()
spvtools::opt::analysis::StructConstant::AsStructConstant()
spvtools::opt::analysis::StructConstant::AsStructConstant() const
spvtools::opt::analysis::StructConstant::Copy() const
spvtools::opt::analysis::StructConstant::~StructConstant()
spvtools::opt::analysis::Type::AsAccelerationStructureNV()
spvtools::opt::analysis::Type::AsAccelerationStructureNV() const
spvtools::opt::analysis::Type::AsArray()
spvtools::opt::analysis::Type::AsArray() const
spvtools::opt::analysis::Type::AsBool()
spvtools::opt::analysis::Type::AsBool() const
spvtools::opt::analysis::Type::AsCooperativeMatrixNV()
spvtools::opt::analysis::Type::AsCooperativeMatrixNV() const
spvtools::opt::analysis::Type::AsDeviceEvent()
spvtools::opt::analysis::Type::AsDeviceEvent() const
spvtools::opt::analysis::Type::AsEvent()
spvtools::opt::analysis::Type::AsEvent() const
spvtools::opt::analysis::Type::AsFloat()
spvtools::opt::analysis::Type::AsFloat() const
spvtools::opt::analysis::Type::AsForwardPointer()
spvtools::opt::analysis::Type::AsForwardPointer() const
spvtools::opt::analysis::Type::AsFunction()
spvtools::opt::analysis::Type::AsFunction() const
spvtools::opt::analysis::Type::AsImage()
spvtools::opt::analysis::Type::AsImage() const
spvtools::opt::analysis::Type::AsInteger()
spvtools::opt::analysis::Type::AsInteger() const
spvtools::opt::analysis::Type::AsMatrix()
spvtools::opt::analysis::Type::AsMatrix() const
spvtools::opt::analysis::Type::AsNamedBarrier()
spvtools::opt::analysis::Type::AsNamedBarrier() const
spvtools::opt::analysis::Type::AsOpaque()
spvtools::opt::analysis::Type::AsOpaque() const
spvtools::opt::analysis::Type::AsPipe()
spvtools::opt::analysis::Type::AsPipe() const
spvtools::opt::analysis::Type::AsPipeStorage()
spvtools::opt::analysis::Type::AsPipeStorage() const
spvtools::opt::analysis::Type::AsPointer()
spvtools::opt::analysis::Type::AsPointer() const
spvtools::opt::analysis::Type::AsQueue()
spvtools::opt::analysis::Type::AsQueue() const
spvtools::opt::analysis::Type::AsRayQueryProvisionalKHR()
spvtools::opt::analysis::Type::AsRayQueryProvisionalKHR() const
spvtools::opt::analysis::Type::AsReserveId()
spvtools::opt::analysis::Type::AsReserveId() const
spvtools::opt::analysis::Type::AsRuntimeArray()
spvtools::opt::analysis::Type::AsRuntimeArray() const
spvtools::opt::analysis::Type::AsSampledImage()
spvtools::opt::analysis::Type::AsSampledImage() const
spvtools::opt::analysis::Type::AsSampler()
spvtools::opt::analysis::Type::AsSampler() const
spvtools::opt::analysis::Type::AsStruct()
spvtools::opt::analysis::Type::AsStruct() const
spvtools::opt::analysis::Type::AsVector()
spvtools::opt::analysis::Type::AsVector() const
spvtools::opt::analysis::Type::AsVoid()
spvtools::opt::analysis::Type::AsVoid() const
spvtools::opt::analysis::Type::ClearDecorations()
spvtools::opt::analysis::Type::Clone() const
spvtools::opt::analysis::Type::GetHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Type::HasSameDecorations(spvtools::opt::analysis::Type const*) const
spvtools::opt::analysis::Type::HashValue() const
spvtools::opt::analysis::Type::IsUniqueType(bool) const
spvtools::opt::analysis::Type::decoration_empty() const
spvtools::opt::analysis::Type::operator==(spvtools::opt::analysis::Type const&) const
spvtools::opt::analysis::Type::~Type()
spvtools::opt::analysis::TypeManager::AnalyzeTypes(spvtools::opt::Module const&)
spvtools::opt::analysis::TypeManager::AttachDecoration(spvtools::opt::Instruction const&, spvtools::opt::analysis::Type*)
spvtools::opt::analysis::TypeManager::AttachDecorations(unsigned int, spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::TypeManager::CreateDecoration(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, unsigned int)
spvtools::opt::analysis::TypeManager::FindPointerToType(unsigned int, SpvStorageClass_)
spvtools::opt::analysis::TypeManager::GetId(spvtools::opt::analysis::Type const*) const
spvtools::opt::analysis::TypeManager::GetRegisteredType(spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::TypeManager::GetType(unsigned int) const
spvtools::opt::analysis::TypeManager::GetTypeAndPointerType(unsigned int, SpvStorageClass_) const
spvtools::opt::analysis::TypeManager::GetTypeInstruction(spvtools::opt::analysis::Type const*)
spvtools::opt::analysis::TypeManager::RebuildType(spvtools::opt::analysis::Type const&)
spvtools::opt::analysis::TypeManager::RecordIfTypeDefinition(spvtools::opt::Instruction const&)
spvtools::opt::analysis::TypeManager::RegisterType(unsigned int, spvtools::opt::analysis::Type const&)
spvtools::opt::analysis::TypeManager::RemoveId(unsigned int)
spvtools::opt::analysis::TypeManager::ReplaceForwardPointers(spvtools::opt::analysis::Type*)
spvtools::opt::analysis::TypeManager::ReplaceType(spvtools::opt::analysis::Type*, spvtools::opt::analysis::Type*)
spvtools::opt::analysis::TypeManager::TypeManager(std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)> const&, spvtools::opt::IRContext*)
spvtools::opt::analysis::TypeManager::~TypeManager()
spvtools::opt::analysis::Vector::AsVector()
spvtools::opt::analysis::Vector::AsVector() const
spvtools::opt::analysis::Vector::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Vector::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Vector::Vector(spvtools::opt::analysis::Type const*, unsigned int)
spvtools::opt::analysis::Vector::str() const
spvtools::opt::analysis::Vector::~Vector()
spvtools::opt::analysis::VectorConstant::AsVectorConstant()
spvtools::opt::analysis::VectorConstant::AsVectorConstant() const
spvtools::opt::analysis::VectorConstant::Copy() const
spvtools::opt::analysis::VectorConstant::~VectorConstant()
spvtools::opt::analysis::Void::AsVoid()
spvtools::opt::analysis::Void::AsVoid() const
spvtools::opt::analysis::Void::GetExtraHashWords(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, std::__1::unordered_set<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >*) const
spvtools::opt::analysis::Void::IsSameImpl(spvtools::opt::analysis::Type const*, std::__1::set<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >*) const
spvtools::opt::analysis::Void::str() const
spvtools::opt::analysis::Void::~Void()
spvtools::opt::blockmergeutil::(anonymous namespace)::IsMerge(spvtools::opt::IRContext*, unsigned int)
spvtools::opt::blockmergeutil::CanMergeWithSuccessor(spvtools::opt::IRContext*, spvtools::opt::BasicBlock*)
spvtools::opt::blockmergeutil::MergeWithSuccessor(spvtools::opt::IRContext*, spvtools::opt::Function*, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)
spvtools::opt::eliminatedeadfunctionsutil::EliminateFunction(spvtools::opt::IRContext*, spvtools::opt::UptrVectorIterator<spvtools::opt::Function, false>*)
spvtools::spvInstructionBinaryToText(spv_target_env, unsigned int const*, unsigned long, unsigned int const*, unsigned long, unsigned int)
spvtools::utils::BitVector::Or(spvtools::utils::BitVector const&)
spvtools::utils::BitVector::Set(unsigned int)
spvtools::utils::CardinalToOrdinal(unsigned long)
spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > > >(spvtools::utils::round_direction, bool*)::first_rounded_bit
spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > > >(spvtools::utils::round_direction, bool*)::last_significant_bit
spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > >::uint_type spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > > >(spvtools::utils::round_direction, bool*)
spvtools::utils::IntrusiveList<spvtools::opt::Instruction>::~IntrusiveList()
spvtools::utils::IntrusiveNodeBase<spvtools::opt::Instruction>::~IntrusiveNodeBase()
spvtools::utils::SmallVector<unsigned int, 2ul>::operator=(spvtools::utils::SmallVector<unsigned int, 2ul> const&)
spvtools::utils::SmallVector<unsigned int, 2ul>::operator=(spvtools::utils::SmallVector<unsigned int, 2ul>&&)
spvtools::utils::SmallVector<unsigned int, 2ul>::~SmallVector()
spvtools::val::(anonymous namespace)::AreLayoutCompatibleStructs(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, spvtools::val::Instruction const*)
spvtools::val::(anonymous namespace)::BuiltInsValidator::GetDefinitionDesc(spvtools::val::Decoration const&, spvtools::val::Instruction const&) const
spvtools::val::(anonymous namespace)::BuiltInsValidator::GetReferenceDesc(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, SpvExecutionModel_) const
spvtools::val::(anonymous namespace)::BuiltInsValidator::GetStorageClassDesc(spvtools::val::Instruction const&) const
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateBool(spvtools::val::Decoration const&, spvtools::val::Instruction const&, std::__1::function<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateBuiltInsAtDefinition()
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeI32InputAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeShaderI32Vec3InputAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateF32ArrHelper(spvtools::val::Decoration const&, spvtools::val::Instruction const&, unsigned int, std::__1::function<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> const&, unsigned int)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateF32Helper(spvtools::val::Decoration const&, spvtools::val::Instruction const&, std::__1::function<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> const&, unsigned int)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateF32VecHelper(spvtools::val::Decoration const&, spvtools::val::Instruction const&, unsigned int, std::__1::function<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> const&, unsigned int)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFragCoordAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFragDepthAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFrontFacingAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateHelperInvocationAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32Helper(spvtools::val::Decoration const&, spvtools::val::Instruction const&, std::__1::function<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> const&, unsigned int)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32Vec(spvtools::val::Decoration const&, spvtools::val::Instruction const&, unsigned int, std::__1::function<spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateInstanceIdAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateInstanceIndexAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateInvocationIdAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLocalInvocationIndexAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateNotCalledWithExecutionModel(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePatchVerticesAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointCoordAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePrimitiveIdAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSMBuiltinsAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSampleIdAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSampleMaskAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSamplePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessCoordAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessLevelAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateVertexIndexAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateWorkgroupSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::CalculateNamesForEntryPoint(spvtools::val::ValidationState_t&, unsigned int)
spvtools::val::(anonymous namespace)::CheckBuiltInVariable(unsigned int, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::CheckMemoryAccess(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)
spvtools::val::(anonymous namespace)::CheckRequiredCapabilities(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned long, spv_parsed_operand_t const&, unsigned int)
spvtools::val::(anonymous namespace)::ComputeMemberConstraintsForArray(std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >*, unsigned int, spvtools::val::(anonymous namespace)::LayoutConstraints const&, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::ComputeMemberConstraintsForStruct(std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >*, unsigned int, spvtools::val::(anonymous namespace)::LayoutConstraints const&, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::ContainsCooperativeMatrix(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::(anonymous namespace)::ContainsInvalidBool(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, bool)
spvtools::val::(anonymous namespace)::ContainsOpaqueType(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::(anonymous namespace)::CountInstructions(void*, spv_parsed_instruction_t const*)
spvtools::val::(anonymous namespace)::GetActualResultType(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int*)
spvtools::val::(anonymous namespace)::GetExtractInsertValueType(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int*)
spvtools::val::(anonymous namespace)::GetIdDesc(spvtools::val::Instruction const&)
spvtools::val::(anonymous namespace)::GetUnderlyingType(spvtools::val::ValidationState_t&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, unsigned int*)
spvtools::val::(anonymous namespace)::IsSupportOptionalVulkan_1_1(unsigned int)
spvtools::val::(anonymous namespace)::IsTypeNullable(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, spvtools::val::ValidationState_t const&)
spvtools::val::(anonymous namespace)::ProcessExtensions(void*, spv_parsed_instruction_t const*)
spvtools::val::(anonymous namespace)::ProcessInstruction(void*, spv_parsed_instruction_t const*)
spvtools::val::(anonymous namespace)::ToString(spvtools::EnumSet<SpvCapability_> const&, spvtools::AssemblyGrammar const&)
spvtools::val::(anonymous namespace)::ValidateAccessChain(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::(anonymous namespace)::ValidateBinaryUsingContextAndValidationState(spv_context_t const&, unsigned int const*, unsigned long, spv_diagnostic_t**, spvtools::val::ValidationState_t*)
spvtools::val::(anonymous namespace)::ValidateDebugInfoOperand(spvtools::val::ValidationState_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, OpenCLDebugInfo100Instructions, spvtools::val::Instruction const*, unsigned int, std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> const&)
spvtools::val::(anonymous namespace)::ValidateImageCommon(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, spvtools::val::(anonymous namespace)::ImageTypeInfo const&)
spvtools::val::(anonymous namespace)::ValidateImageOperands(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, spvtools::val::(anonymous namespace)::ImageTypeInfo const&, unsigned int, unsigned int)
spvtools::val::(anonymous namespace)::ValidateImageOperands(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, spvtools::val::(anonymous namespace)::ImageTypeInfo const&, unsigned int, unsigned int)::kAllImageOperandsHandled
spvtools::val::(anonymous namespace)::ValidateOperandDebugType(spvtools::val::ValidationState_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, spvtools::val::Instruction const*, unsigned int, std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> const&)
spvtools::val::(anonymous namespace)::ValidateOperandForDebugInfo(spvtools::val::ValidationState_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, SpvOp_, spvtools::val::Instruction const*, unsigned int, std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> const&)
spvtools::val::(anonymous namespace)::ValidateOperandLexicalScope(spvtools::val::ValidationState_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, spvtools::val::Instruction const*, unsigned int, std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> const&)
spvtools::val::(anonymous namespace)::ValidateVariable(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::(anonymous namespace)::checkForRequiredDecoration(unsigned int, SpvDecoration_, SpvOp_, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::$_5::operator()(unsigned int) const
spvtools::val::(anonymous namespace)::getBaseAlignment(unsigned int, bool, spvtools::val::(anonymous namespace)::LayoutConstraints const&, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::getScalarAlignment(unsigned int, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::getSize(unsigned int, spvtools::val::(anonymous namespace)::LayoutConstraints const&, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::getStructMembers(unsigned int, SpvOp_, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::hasDecoration(unsigned int, SpvDecoration_, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::hasImportLinkageAttribute(unsigned int, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::isMissingOffsetInStruct(unsigned int, spvtools::val::ValidationState_t&)
spvtools::val::(anonymous namespace)::setHeader(void*, spv_endianness_t, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
spvtools::val::AnnotationPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ArithmeticsPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::AtomicsPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::BarriersPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::BasicBlock const* std::__1::__function::__policy_invoker<spvtools::val::BasicBlock const* (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::BasicBlock::dom_begin() const::$_0, spvtools::val::BasicBlock const* (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
spvtools::val::BasicBlock const* std::__1::__function::__policy_invoker<spvtools::val::BasicBlock const* (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::BasicBlock::pdom_begin() const::$_2, spvtools::val::BasicBlock const* (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
spvtools::val::BasicBlock::BasicBlock(unsigned int)
spvtools::val::BasicBlock::RegisterBranchInstruction(SpvOp_)
spvtools::val::BasicBlock::RegisterSuccessors(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&)
spvtools::val::BasicBlock::SetImmediateDominator(spvtools::val::BasicBlock*)
spvtools::val::BasicBlock::SetImmediatePostDominator(spvtools::val::BasicBlock*)
spvtools::val::BasicBlock::dominates(spvtools::val::BasicBlock const&) const
spvtools::val::BasicBlock::immediate_dominator()
spvtools::val::BasicBlock::immediate_dominator() const
spvtools::val::BasicBlock::postdominates(spvtools::val::BasicBlock const&) const
spvtools::val::BitwisePass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::CapabilityPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::CfgPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::CheckIdDefinitionDominateUse(spvtools::val::ValidationState_t&)
spvtools::val::CompositesPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ConstantPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::Construct::Construct(spvtools::val::ConstructType, spvtools::val::BasicBlock*, spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::Construct*, std::__1::allocator<spvtools::val::Construct*> >)
spvtools::val::Construct::IsStructuredExit(spvtools::val::ValidationState_t&, spvtools::val::BasicBlock*) const
spvtools::val::Construct::blocks(spvtools::val::Function*) const
spvtools::val::Construct::corresponding_constructs()
spvtools::val::Construct::entry_block()
spvtools::val::Construct::entry_block() const
spvtools::val::Construct::exit_block() const
spvtools::val::Construct::set_corresponding_constructs(std::__1::vector<spvtools::val::Construct*, std::__1::allocator<spvtools::val::Construct*> >)
spvtools::val::Construct::set_exit(spvtools::val::BasicBlock*)
spvtools::val::Construct::type() const
spvtools::val::ConstructErrorString(spvtools::val::Construct const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spvtools::val::ConstructNames(spvtools::val::ConstructType)
spvtools::val::ControlFlowPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ConversionPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::DebugPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::DerivativesPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ExtensionPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::FindCaseFallThrough(spvtools::val::ValidationState_t&, spvtools::val::BasicBlock*, unsigned int*, spvtools::val::BasicBlock const*, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > const&, spvtools::val::Function*)
spvtools::val::FirstBlockAssert(spvtools::val::ValidationState_t&, unsigned int)
spvtools::val::Function::AddConstruct(spvtools::val::Construct const&)
spvtools::val::Function::AugmentedCFGPredecessorsFunction() const
spvtools::val::Function::AugmentedCFGSuccessorsFunction() const
spvtools::val::Function::AugmentedCFGSuccessorsFunctionIncludingHeaderToContinueEdge() const
spvtools::val::Function::CheckLimitations(spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) const
spvtools::val::Function::Function(spvtools::val::Function&&)
spvtools::val::Function::Function(unsigned int, unsigned int, SpvFunctionControlMask_, unsigned int)
spvtools::val::Function::GetBlock(unsigned int)
spvtools::val::Function::GetBlock(unsigned int) const
spvtools::val::Function::GetBlockDepth(spvtools::val::BasicBlock*)
spvtools::val::Function::GetContinueHeaders(spvtools::val::BasicBlock*)
spvtools::val::Function::IsBlockType(unsigned int, spvtools::val::BlockType) const
spvtools::val::Function::IsCompatibleWithExecutionModel(SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*) const
spvtools::val::Function::IsFirstBlock(unsigned int) const
spvtools::val::Function::RegisterBlock(unsigned int, bool)
spvtools::val::Function::RegisterBlockEnd(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, SpvOp_)
spvtools::val::Function::RegisterExecutionModelLimitation(SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
spvtools::val::Function::RegisterFunctionEnd()
spvtools::val::Function::RegisterFunctionParameter(unsigned int, unsigned int)
spvtools::val::Function::RegisterLoopMerge(unsigned int, unsigned int)
spvtools::val::Function::RegisterSelectionMerge(unsigned int)
spvtools::val::Function::RegisterSetFunctionDeclType(spvtools::val::FunctionDecl)
spvtools::val::Function::block_count() const
spvtools::val::Function::constructs()
spvtools::val::Function::current_block()
spvtools::val::Function::current_block() const
spvtools::val::Function::first_block()
spvtools::val::Function::ordered_blocks()
spvtools::val::Function::undefined_block_count() const
spvtools::val::Function::~Function()
spvtools::val::FunctionPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::IdPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction*)
spvtools::val::ImagePass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::Instruction::Instruction(spv_parsed_instruction_t const*)
spvtools::val::Instruction::Instruction(spvtools::val::Instruction const&)
spvtools::val::Instruction::Instruction(spvtools::val::Instruction&&)
spvtools::val::Instruction::RegisterUse(spvtools::val::Instruction const*, unsigned int)
spvtools::val::InstructionPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::LiteralsPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::LogicalsPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::MemoryPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::MergeBlockAssert(spvtools::val::ValidationState_t&, unsigned int)
spvtools::val::MiscPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ModeSettingPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ModuleLayoutPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::NonUniformPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)
spvtools::val::PerformWebGPUCfgChecks(spvtools::val::ValidationState_t&, spvtools::val::Function*)
spvtools::val::PrimitivesPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::StructuredControlFlowChecks(spvtools::val::ValidationState_t&, spvtools::val::Function*, std::__1::vector<std::__1::pair<unsigned int, unsigned int>, std::__1::allocator<std::__1::pair<unsigned int, unsigned int> > > const&, std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&)
spvtools::val::StructuredSwitchChecks(spvtools::val::ValidationState_t&, spvtools::val::Function*, spvtools::val::Instruction const*, spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)
spvtools::val::TypePass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::UpdateContinueConstructExitBlocks(spvtools::val::Function&, std::__1::vector<std::__1::pair<unsigned int, unsigned int>, std::__1::allocator<std::__1::pair<unsigned int, unsigned int> > > const&)
spvtools::val::UpdateIdUse(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ValidateAdjacency(spvtools::val::ValidationState_t&)
spvtools::val::ValidateBuiltIns(spvtools::val::ValidationState_t&)
spvtools::val::ValidateDecorations(spvtools::val::ValidationState_t&)
spvtools::val::ValidateExecutionLimitations(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ValidateExecutionScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)
spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0::operator()() const
spvtools::val::ValidateExtInstImport(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ValidateExtension(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ValidateInterfaces(spvtools::val::ValidationState_t&)
spvtools::val::ValidateMemoryScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)
spvtools::val::ValidateMemorySemantics(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)
spvtools::val::ValidateScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)
spvtools::val::ValidateSmallTypeUses(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)
spvtools::val::ValidateStructuredSelections(spvtools::val::ValidationState_t&, std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&)
spvtools::val::ValidationState_t::AddFunctionCallTarget(unsigned int)
spvtools::val::ValidationState_t::AddOrderedInstruction(spv_parsed_instruction_t const*)
spvtools::val::ValidationState_t::ComputeFunctionToEntryPointMapping()
spvtools::val::ValidationState_t::ComputeRecursiveEntryPoints()
spvtools::val::ValidationState_t::ContainsLimitedUseIntOrFloatType(unsigned int) const
spvtools::val::ValidationState_t::ContainsSizedIntOrFloatType(unsigned int, SpvOp_, unsigned int) const
spvtools::val::ValidationState_t::CooperativeMatrixShapesMatch(spvtools::val::Instruction const*, unsigned int, unsigned int)
spvtools::val::ValidationState_t::Disassemble(spvtools::val::Instruction const&) const
spvtools::val::ValidationState_t::EntryPointReferences(unsigned int) const
spvtools::val::ValidationState_t::EvalInt32IfConst(unsigned int) const
spvtools::val::ValidationState_t::FindDef(unsigned int)
spvtools::val::ValidationState_t::FindDef(unsigned int) const
spvtools::val::ValidationState_t::ForwardDeclareId(unsigned int)
spvtools::val::ValidationState_t::FunctionEntryPoints(unsigned int) const
spvtools::val::ValidationState_t::GetBitWidth(unsigned int) const
spvtools::val::ValidationState_t::GetComponentType(unsigned int) const
spvtools::val::ValidationState_t::GetConstantValUint64(unsigned int, unsigned long*) const
spvtools::val::ValidationState_t::GetDimension(unsigned int) const
spvtools::val::ValidationState_t::GetIdOpcode(unsigned int) const
spvtools::val::ValidationState_t::GetMatrixTypeInfo(unsigned int, unsigned int*, unsigned int*, unsigned int*, unsigned int*) const
spvtools::val::ValidationState_t::GetOperandTypeId(spvtools::val::Instruction const*, unsigned long) const
spvtools::val::ValidationState_t::GetPointerTypeInfo(unsigned int, unsigned int*, unsigned int*) const
spvtools::val::ValidationState_t::GetStructMemberTypes(unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*) const
spvtools::val::ValidationState_t::GetTypeId(unsigned int) const
spvtools::val::ValidationState_t::HasAnyOfCapabilities(spvtools::EnumSet<SpvCapability_> const&) const
spvtools::val::ValidationState_t::HasAnyOfExtensions(spvtools::EnumSet<spvtools::Extension> const&) const
spvtools::val::ValidationState_t::IsBoolScalarType(unsigned int) const
spvtools::val::ValidationState_t::IsBoolVectorType(unsigned int) const
spvtools::val::ValidationState_t::IsCooperativeMatrixType(unsigned int) const
spvtools::val::ValidationState_t::IsDefinedId(unsigned int) const
spvtools::val::ValidationState_t::IsFloatCooperativeMatrixType(unsigned int) const
spvtools::val::ValidationState_t::IsFloatMatrixType(unsigned int) const
spvtools::val::ValidationState_t::IsFloatScalarOrVectorType(unsigned int) const
spvtools::val::ValidationState_t::IsFloatScalarType(unsigned int) const
spvtools::val::ValidationState_t::IsFloatVectorType(unsigned int) const
spvtools::val::ValidationState_t::IsForwardPointer(unsigned int) const
spvtools::val::ValidationState_t::IsIntCooperativeMatrixType(unsigned int) const
spvtools::val::ValidationState_t::IsIntScalarOrVectorType(unsigned int) const
spvtools::val::ValidationState_t::IsIntScalarType(unsigned int) const
spvtools::val::ValidationState_t::IsIntVectorType(unsigned int) const
spvtools::val::ValidationState_t::IsOpcodeInCurrentLayoutSection(SpvOp_)
spvtools::val::ValidationState_t::IsPointerType(unsigned int) const
spvtools::val::ValidationState_t::IsUnsignedIntCooperativeMatrixType(unsigned int) const
spvtools::val::ValidationState_t::IsUnsignedIntScalarType(unsigned int) const
spvtools::val::ValidationState_t::IsUnsignedIntVectorType(unsigned int) const
spvtools::val::ValidationState_t::IsValidStorageClass(SpvStorageClass_) const
spvtools::val::ValidationState_t::IsVoidType(unsigned int) const
spvtools::val::ValidationState_t::LogicallyMatch(spvtools::val::Instruction const*, spvtools::val::Instruction const*, bool)
spvtools::val::ValidationState_t::ProgressToNextLayoutSectionOrder()
spvtools::val::ValidationState_t::RegisterCapability(SpvCapability_)
spvtools::val::ValidationState_t::RegisterDebugInstruction(spvtools::val::Instruction const*)
spvtools::val::ValidationState_t::RegisterDecorationForId(unsigned int, spvtools::val::Decoration const&)
spvtools::val::ValidationState_t::RegisterEntryPoint(unsigned int, SpvExecutionModel_, spvtools::val::ValidationState_t::EntryPointDescription&&)
spvtools::val::ValidationState_t::RegisterExecutionModeForEntryPoint(unsigned int, SpvExecutionMode_)
spvtools::val::ValidationState_t::RegisterExtension(spvtools::Extension)
spvtools::val::ValidationState_t::RegisterForwardPointer(unsigned int)
spvtools::val::ValidationState_t::RegisterFunction(unsigned int, unsigned int, SpvFunctionControlMask_, unsigned int)
spvtools::val::ValidationState_t::RegisterFunctionEnd()
spvtools::val::ValidationState_t::RegisterInstruction(spvtools::val::Instruction*)
spvtools::val::ValidationState_t::RegisterSampledImageConsumer(unsigned int, spvtools::val::Instruction*)
spvtools::val::ValidationState_t::RegisterUniqueTypeDeclaration(spvtools::val::Instruction const*)
spvtools::val::ValidationState_t::RemoveIfForwardDeclared(unsigned int)
spvtools::val::ValidationState_t::TracePointer(spvtools::val::Instruction const*) const
spvtools::val::ValidationState_t::UnresolvedForwardIds() const
spvtools::val::ValidationState_t::ValidationState_t(spv_context_t const*, spv_validator_options_t const*, unsigned int const*, unsigned long, unsigned int)
spvtools::val::ValidationState_t::addressing_model() const
spvtools::val::ValidationState_t::current_function()
spvtools::val::ValidationState_t::current_layout_section() const
spvtools::val::ValidationState_t::diag(spv_result_t, spvtools::val::Instruction const*)
spvtools::val::ValidationState_t::function(unsigned int)
spvtools::val::ValidationState_t::functions()
spvtools::val::ValidationState_t::getIdBound() const
spvtools::val::ValidationState_t::getIdName(unsigned int) const
spvtools::val::ValidationState_t::getSampledImageConsumers(unsigned int) const
spvtools::val::ValidationState_t::in_block() const
spvtools::val::ValidationState_t::in_function_body() const
spvtools::val::ValidationState_t::memory_model() const
spvtools::val::ValidationState_t::set_addressing_model(SpvAddressingModel_)
spvtools::val::ValidationState_t::set_memory_model(SpvMemoryModel_)
spvtools::val::ValidationState_t::unresolved_forward_id_count() const
spvtools::val::ValidationState_t::~ValidationState_t()
spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > >(spvutils::round_direction, bool*)::first_rounded_bit
spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > >(spvutils::round_direction, bool*)::last_significant_bit
spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > >::uint_type spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >::getRoundedNormalizedSignificand<spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > >(spvutils::round_direction, bool*)
sqrt
sqrtf
src
srcData
srcIndexBuf
srcIndexOffset
srcIndirect
srcIndirectBuf
srcIndirectOffsetDiv4
srcIsSRGB
srcLayer
srcMip
srcOffset
srcSubImageCoords
srcValue
srcWidth
ssa-rewrite
ssa_rewrite_pass.cpp
stage:
stageRobustResourceClearWithFormat
stageSubresourceUpdateFromFramebuffer
stageSubresourceUpdateImpl
stages must match when linking into a single stage
standard
start of group
startPrimaryCommandBuffer
startRenderPass
starting at word
statement before the first label
statement_scoped
static
static_bl_desc
static_cast
static_d_desc
static_dtree
static_l_desc
static_ltree
statically used per shader entry point.
std140
std430
std430 requires the buffer storage qualifier
std::__1::(anonymous namespace)::indices
std::__1::(anonymous namespace)::make<std::__1::codecvt<char, char, __mbstate_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::codecvt<char16_t, char, __mbstate_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::codecvt<char32_t, char, __mbstate_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::codecvt<wchar_t, char, __mbstate_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::collate<char>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::collate<wchar_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::ctype<char>, decltype(nullptr), bool, unsigned int>(decltype(nullptr), bool, unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::ctype<wchar_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::locale::__imp, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::messages<char>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::messages<wchar_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::moneypunct<char, false>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::moneypunct<char, true>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::moneypunct<wchar_t, false>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::moneypunct<wchar_t, true>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::numpunct<char>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::numpunct<wchar_t>, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::make<std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >, unsigned int>(unsigned int)::buf
std::__1::(anonymous namespace)::small_primes
std::__1::DoIOSInit::DoIOSInit()
std::__1::DoIOSInit::~DoIOSInit()
std::__1::__assoc_sub_state::__execute()
std::__1::__assoc_sub_state::__make_ready()
std::__1::__assoc_sub_state::__on_zero_shared()
std::__1::__assoc_sub_state::set_value()
std::__1::__assoc_sub_state::wait()
std::__1::__assoc_sub_state::~__assoc_sub_state()
std::__1::__async_assoc_state<void, std::__1::__async_func<angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1> >::__execute()
std::__1::__async_assoc_state<void, std::__1::__async_func<angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1> >::__on_zero_shared()
std::__1::__async_assoc_state<void, std::__1::__async_func<angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1> >::~__async_assoc_state()
std::__1::__async_func<angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1>::operator()()
std::__1::__basic_string_common<true>::__throw_length_error() const
std::__1::__basic_string_common<true>::__throw_out_of_range() const
std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0> std::__1::__copy_aligned<std::__1::vector<bool, std::__1::allocator<bool> >, false>(std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0>, std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0>, std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0>)
std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0> std::__1::__copy_unaligned<std::__1::vector<bool, std::__1::allocator<bool> >, false>(std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0>, std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0>, std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0>)
std::__1::__call_once(unsigned long volatile&, void*, void (*)(void*))
std::__1::__cerr
std::__1::__cin
std::__1::__cloc()::result
std::__1::__compressed_pair_elem<rx::WaitableCompileEventImpl, 1, false>::__compressed_pair_elem<std::__1::shared_ptr<angle::WaitableEvent>&&, std::__1::shared_ptr<rx::TranslateTask>&, 0ul, 1ul>(std::__1::piecewise_construct_t, std::__1::tuple<std::__1::shared_ptr<angle::WaitableEvent>&&, std::__1::shared_ptr<rx::TranslateTask>&>, std::__1::__tuple_indices<0ul, 1ul>)
std::__1::__cout
std::__1::__deque_base<gl::Debug::Message, std::__1::allocator<gl::Debug::Message> >::clear()
std::__1::__deque_base<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >::~__deque_base()
std::__1::__deque_base<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> > > >::clear()
std::__1::__deque_base<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > > > >::clear()
std::__1::__do_message::message(int) const
std::__1::__do_nothing(void*)
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_0, bool (VkPhysicalDeviceProperties const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_1, bool (VkPhysicalDeviceProperties const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_2, bool (VkPhysicalDeviceProperties const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<bool (*)(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&), bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_0, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_1, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_2, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<gl::ProgramLinkedResourcesLinker::linkResources(gl::ProgramState const&, gl::ProgramLinkedResources const&) const::$_3, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<gl::Shader::resolveCompile()::$_0, void ()> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction&, bool&, int&, glslang::TIntermTyped*&)::$_31, bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::findFunction(glslang::TSourceLoc const&, glslang::TFunction&, bool&, int&, glslang::TIntermTyped*&)::$_32, bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::handleAssign(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)::$_17, void (glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::shareStructBufferType(glslang::TType&)::$_29, bool (glslang::TType&, glslang::TType&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunction400(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_0, bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunction400(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_1, bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunctionExplicitTypes(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_2, bool (glslang::TType const&, glslang::TType const&, glslang::TOperator, int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<glslang::TParseContext::findFunctionExplicitTypes(glslang::TSourceLoc const&, glslang::TFunction const&, bool&)::$_3, bool (glslang::TType const&, glslang::TType const&, glslang::TType const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::GlslangWrapperVk::GetShaderCode(rx::vk::Context*, angle::BitSetT<4ul, unsigned char, gl::ShaderType> const&, gl::Caps const&, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul> const&, angle::PackedEnumMap<gl::ShaderType, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, 4ul>*)::$_1, angle::Result (rx::GlslangError)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::GlslangWrapperVk::TransformSpirV(rx::vk::Context*, gl::ShaderType, bool, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*)::$_2, angle::Result (rx::GlslangError)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::$_0, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::$_1, angle::Result (bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_2, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_3, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_4, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ProgramGL::linkResources(gl::ProgramLinkedResources const&)::$_5, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, sh::BlockMemberInfo*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_0, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_1, void ()> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_2, bool ()> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_3, bool (char const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_4, void (char const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_5, bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<sh::RemoveDynamicIndexingOfSwizzledVector(sh::TCompiler*, sh::TIntermNode*, sh::TSymbolTable*, sh::PerformanceDiagnostics*)::$_1, bool (sh::TIntermBinary*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spv::Builder::postProcessCFG()::$_2, void (spv::Block*, spv::ReachReason, spv::Block*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spv::Function::dump(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const::{lambda(spv::Block const*, spv::ReachReason, spv::Block*)#1}, void (spv::Block*, spv::ReachReason, spv::Block*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spv::spirvbin_t::$_0, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spv::spirvbin_t::$_1, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_11, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_12, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_13, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_14, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_15, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvDbgInfoExtOperandCanBeForwardDeclaredFunction(spv_ext_inst_type_t, unsigned int)::$_16, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_1, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_10, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_2, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_3, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_4, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_5, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_6, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_7, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_8, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvOperandCanBeForwardDeclaredFunction(SpvOp_)::$_9, bool (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::CFA<spvtools::val::BasicBlock>::TraversalRoots(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(spvtools::val::BasicBlock const*)#1}, void (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::CFA<spvtools::val::BasicBlock>::TraversalRoots(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(spvtools::val::BasicBlock const*)#2}, void (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::CFA<spvtools::val::BasicBlock>::TraversalRoots(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)#1}, void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::ExtensionSetToString(spvtools::EnumSet<spvtools::Extension> const&)::$_0, void (spvtools::Extension)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::FriendlyNameMapper::GetNameMapper()::{lambda(unsigned int)#1}, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::UseDiagnosticAsMessageConsumer(spv_context_t*, spv_diagnostic_t**)::$_0, void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#2}, void (unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#3}, void (unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::GetPredFunctor()::{lambda(spvtools::opt::BasicBlock const*)#1}, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<std::__1::vector> > const* (spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::GetSuccessorFunctor()::{lambda(spvtools::opt::BasicBlock const*)#1}, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<std::__1::vector> > const* (spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::CompositeConstructFeedingExtract()::$_19, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DepthFirstSearch<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::(anonymous namespace)::DepthFirstSearchPostOrder<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*)#1}, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::(anonymous namespace)::DepthFirstSearchPostOrder<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*)#1}, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)#1}, void (spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DepthFirstSearch<spvtools::opt::DominatorTreeNode, spvtools::opt::DominatorTree::ResetDFNumbering()::$_1, spvtools::opt::DominatorTree::ResetDFNumbering()::$_2, spvtools::opt::DominatorTree::ResetDFNumbering()::$_3>(spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTree::ResetDFNumbering()::$_1, spvtools::opt::DominatorTree::ResetDFNumbering()::$_2, spvtools::opt::DominatorTree::ResetDFNumbering()::$_3)::{lambda(spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)#1}, void (spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DepthFirstSearchPostOrder<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*)#1}, void (spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DotProductDoingExtract()::$_31, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FMixFeedingExtract()::$_22, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FactorAddMuls()::$_17, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldCompositeWithConstants()::$_3, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldExtractWithConstants()::$_0, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFAdd()::$_10, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFClampFeedingCompare(unsigned int)::$_27, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFDiv()::$_12, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#1}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#2}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#3}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMix()::$_28::operator()(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&) const::{lambda(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)#4}, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFMul()::$_11, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFNegateOp()::$_26, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdEqual()::$_13, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdGreaterThan()::$_19, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdGreaterThanEqual()::$_23, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdLessThan()::$_17, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdLessThanEqual()::$_21, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFOrdNotEqual()::$_15, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPBinaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_5, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPUnaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_4, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFSub()::$_9, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFToIOp()::$_6, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFTranscendentalBinary(double (*)(double, double))::$_30, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFTranscendentalUnary(double (*)(double))::$_29, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordEqual()::$_14, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordGreaterThan()::$_20, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordGreaterThanEqual()::$_24, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordLessThan()::$_18, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordLessThanEqual()::$_22, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFUnordNotEqual()::$_16, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldIToFOp()::$_7, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldOpDotWithConstants()::$_25, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldQuantizeToF16Scalar()::$_8, spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldVectorShuffleWithConstants()::$_1, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldVectorTimesScalar()::$_2, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::InsertFeedingExtract()::$_20, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::IntMultipleBy1()::$_18, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeAddAddArithmetic()::$_12, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeAddNegateArithmetic()::$_10, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeAddSubArithmetic()::$_13, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeDivDivArithmetic()::$_7, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeDivMulArithmetic()::$_8, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeDivNegateArithmetic()::$_9, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeGenericAddSubArithmetic()::$_16, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeMulDivArithmetic()::$_5, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeMulMulArithmetic()::$_4, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeMulNegateArithmetic()::$_6, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeNegateAddSubArithmetic()::$_3, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeNegateArithmetic()::$_1, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeNegateMulDivArithmetic()::$_2, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeSubAddArithmetic()::$_14, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeSubNegateArithmetic()::$_11, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::MergeSubSubArithmetic()::$_15, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::ReciprocalFDiv()::$_0, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFAdd()::$_25, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFDiv()::$_28, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFMix()::$_29, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFMul()::$_27, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantFSub()::$_26, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantIAdd()::$_30, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantPhi()::$_23, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RedundantSelect()::$_24, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::RemoveRedundantOperands()::$_34, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::StoringUndef()::$_32, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::UpdateImageOperands()::$_35, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::VectorShuffleFeedingExtract()::$_21, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::VectorShuffleFeedingShuffle()::$_33, bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AddBreaksAndContinuesToWorklist(spvtools::opt::Instruction*)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AddBreaksAndContinuesToWorklist(spvtools::opt::Instruction*)::$_3, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AddStores(unsigned int)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_4, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_5, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_6, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_7, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::EliminateDeadFunctions()::$_10, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::EliminateFunction(spvtools::opt::Function*)::$_11, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::IsTargetDead(spvtools::opt::Instruction*)::$_1, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::ProcessImpl()::$_8, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::ProcessImpl()::$_9, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachPhiInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int)> const&) const::$_1, bool (unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int*)> const&)::$_3, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForMergeAndContinueLabel(std::__1::function<void (unsigned int)> const&)::$_5, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::IsSuccessor(spvtools::opt::BasicBlock const*) const::$_4, void (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::KillAllInsts(bool)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7, void (unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_8, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::WhileEachSuccessorLabel(std::__1::function<bool (unsigned int)> const&) const::$_2, bool (unsigned int const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::BlockMergePass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::AddEdges(spvtools::opt::BasicBlock*)::$_0, void (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputePostOrderTraversal(spvtools::opt::BasicBlock*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_8, bool (unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_2, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_3, void (spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_4, void (spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_5, void (spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredSuccessors(spvtools::opt::Function*)::$_7, void (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ForEachBlockInReversePostOrder(spvtools::opt::BasicBlock*, std::__1::function<void (spvtools::opt::BasicBlock*)> const&)::$_6, bool (spvtools::opt::BasicBlock*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::RemoveSuccessorEdges(spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#1}, void (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_10, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_11, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_12, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::CFGCleanupPass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::AddBlocksWithBackEdge(unsigned int, unsigned int, unsigned int, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_5, void (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::FixBlockOrder()::$_2, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::FixBlockOrder()::$_3, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_0, bool (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_1, void (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::Process()::$_4, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::SwitchHasNestedBreak(unsigned int)::$_6, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::opt::Function*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::opt::Function*)::$_0::operator()(spvtools::opt::Instruction*) const::{lambda(unsigned int const*)#1}, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::opt::Function*)::$_1, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::Process()::$_2, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0, void (spvtools::opt::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::ResetDFNumbering()::$_1, std::__1::vector<spvtools::opt::DominatorTreeNode*, std::__1::allocator<spvtools::opt::DominatorTreeNode*> > const* (spvtools::opt::DominatorTreeNode const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::ResetDFNumbering()::$_2, void (spvtools::opt::DominatorTreeNode const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::ResetDFNumbering()::$_3, void (spvtools::opt::DominatorTreeNode const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::EliminateDeadFunctionsPass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::FeatureManager::AddCapability(SpvCapability_)::$_0, void (SpvCapability_)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Function::ForEachInst(std::__1::function<void (spvtools::opt::Instruction const*)> const&, bool) const::$_2, bool (spvtools::opt::Instruction const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Function::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::$_1, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Function::IsRecursive() const::$_3, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::BuildInstrToBlockMapping()::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::InitializeCombinators()::$_3, void (SpvCapability_)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::KillDebugDeclareInsts(spvtools::opt::Function*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::ReplaceAllUsesWith(unsigned int, unsigned int)::$_1, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::ReplaceAllUsesWithPredicate(unsigned int, unsigned int, std::__1::function<bool (spvtools::opt::Instruction*, unsigned int)> const&)::$_2, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::CanHoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_3, bool (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::CheckPhiUsers(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*)::$_1, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::HoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_2, void (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::Process()::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlineExhaustivePass::ProcessImpl()::$_0, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::CloneSameBlockOps(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*, std::__1::unordered_map<unsigned int, spvtools::opt::Instruction*, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::opt::Instruction*> > >*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*)::$_1, bool (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::ContainsKill(spvtools::opt::Function*) const::$_6, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::GenInlineCode(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)::$_3, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::GenInlineCode(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)::$_4, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::InlineSingleInstruction(std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > const&, spvtools::opt::BasicBlock*, spvtools::opt::Instruction const*, unsigned int)::$_2, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::MapParams(spvtools::opt::Function*, spvtools::opt::InstructionList::iterator, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5, void (unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}::operator()(spvtools::opt::Instruction*) const::{lambda(unsigned int*)#1}, void ({lambda(spvtools::opt::Instruction*)#1})> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInId(std::__1::function<void (unsigned int const*)> const&) const::{lambda(unsigned int const*)#1}, bool (unsigned int const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInId(std::__1::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}, bool (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInOperand(std::__1::function<void (unsigned int*)> const&)::{lambda(unsigned int*)#1}, bool (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInst(std::__1::function<void (spvtools::opt::Instruction const*)> const&, bool) const::{lambda(spvtools::opt::Instruction const*)#1}, bool (spvtools::opt::Instruction const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::ForEachInst(std::__1::function<void (spvtools::opt::Instruction*)> const&, bool)::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsFloatingPointFoldingAllowed() const::$_6, bool (spvtools::opt::Instruction const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsFoldableByFoldScalar() const::$_5, bool (unsigned int const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsReadOnlyPointerShaders() const::$_3, void (spvtools::opt::Instruction const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsVulkanStorageBuffer() const::$_0, void (spvtools::opt::Instruction const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsVulkanStorageBuffer() const::$_1, void (spvtools::opt::Instruction const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InstructionFolder::FoldInstructionInternal(spvtools::opt::Instruction*) const::$_0, unsigned int (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::InstructionFolder::FoldInstructionToConstant(spvtools::opt::Instruction*, std::__1::function<unsigned int (unsigned int)>) const::$_1, void (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::AppendConstantOperands(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >*)::$_0, void (unsigned int const*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::ConvertLocalAccessChains(spvtools::opt::Function*)::$_3, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::HasOnlySupportedRefs(unsigned int)::$_2, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::IsConstantIndexAccessChain(spvtools::opt::Instruction const*) const::$_1, bool (unsigned int const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalRedundancyEliminationPass::EliminateRedundanciesInBB(spvtools::opt::BasicBlock*, spvtools::opt::ValueNumberTable const&, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleBlockLoadStoreElimPass::HasOnlySupportedRefs(unsigned int)::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleBlockLoadStoreElimPass::ProcessImpl()::$_1, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleStoreElimPass::FeedsAStore(spvtools::opt::Instruction*) const::$_2, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleStoreElimPass::FindUses(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*) const::$_1, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleStoreElimPass::ProcessImpl()::$_0, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Loop::FindLoopPreheader(spvtools::opt::DominatorAnalysis*)::$_0, void (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::AddStores(unsigned int, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)::$_3, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::DCEInst(spvtools::opt::Instruction*, std::__1::function<void (spvtools::opt::Instruction*)> const&)::$_4, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::HasLoads(unsigned int) const::$_2, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::HasOnlyNamesAndDecorates(unsigned int) const::$_1, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::HasOnlySupportedRefs(unsigned int)::$_5, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::IsTargetType(spvtools::opt::Instruction const*) const::$_0, bool (unsigned int const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveBlock(spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>*)::$_6, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::opt::Function*)::$_7, void (unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::opt::Function*)::$_8, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::opt::BasicBlock*, spvtools::opt::Instruction&)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::opt::BasicBlock*, spvtools::opt::Instruction&)::$_3, void (unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::HasNontrivialUnreachableBlocks(spvtools::opt::Function*)::$_5, void (spvtools::opt::BasicBlock*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::PredicateBlocks(spvtools::opt::BasicBlock*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_4, void (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::Process()::$_0, bool (spvtools::opt::Function*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::UpdatePhiNodes(spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*)::$_1, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Module::ComputeIdBound() const::$_1, void (spvtools::opt::Instruction const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::Module::ToBinary(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, bool) const::$_0, void (spvtools::opt::Instruction const*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLines()::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLinesPass(unsigned int)::$_1, bool (spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLinesPass(unsigned int)::$_2, bool (spvtools::opt::Instruction*, unsigned int*, unsigned int*, unsigned int*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::SSARewriter::RewriteFunctionIntoSSA(spvtools::opt::Function*)::$_0, bool (spvtools::opt::BasicBlock*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CheckUses(spvtools::opt::Instruction const*, spvtools::opt::ScalarReplacementPass::VariableStats*) const::$_2, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CheckUsesRelaxed(spvtools::opt::Instruction const*) const::$_3, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CreateReplacementVariables(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_1, void (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::opt::Instruction*)::$_4, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::opt::Instruction*)::$_4::operator()(spvtools::opt::Instruction*) const::{lambda(spvtools::opt::Instruction*)#1}, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::ReplaceVariable(spvtools::opt::Instruction*, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::AddNewOperands(spvtools::opt::Instruction*, std::__1::unordered_set<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_0, void (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1, void (spvtools::opt::BasicBlock*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1::operator()(spvtools::opt::BasicBlock*) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1::operator()(spvtools::opt::BasicBlock*) const::{lambda(spvtools::opt::Instruction*, unsigned int)#1}, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_3, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::StripDebugInfoPass::Process()::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::StripDebugInfoPass::Process()::$_2, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::FindLiveComponents(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::MarkUsesAsLive(spvtools::opt::Instruction*, spvtools::utils::BitVector const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)::$_1, void (unsigned int*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::RewriteInstructions(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > > const&)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::WrapOpKill::GetOpKillFuncId()::$_1, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::WrapOpKill::Process()::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::Constant const* (*)(spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&), spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::Constant const* (*)(spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*), spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DebugInfoManager::AnalyzeDebugInsts(spvtools::opt::Module&)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DecorationManager::ForEachDecoration(unsigned int, unsigned int, std::__1::function<void (spvtools::opt::Instruction const&)>)::$_3, bool (spvtools::opt::Instruction const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DecorationManager::RemoveDecorationsFrom(unsigned int, std::__1::function<bool (spvtools::opt::Instruction const&)>)::{default arg#1}::{lambda(spvtools::opt::Instruction const&)#1}, bool (spvtools::opt::Instruction const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::ForEachUse(spvtools::opt::Instruction const*, std::__1::function<void (spvtools::opt::Instruction*, unsigned int)> const&) const::$_1, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::ForEachUser(spvtools::opt::Instruction const*, std::__1::function<void (spvtools::opt::Instruction*)> const&) const::$_0, bool (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::NumUsers(spvtools::opt::Instruction const*) const::$_2, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::NumUses(spvtools::opt::Instruction const*) const::$_3, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::TypeManager::RecordIfTypeDefinition(spvtools::opt::Instruction const&)::$_0, void (spvtools::opt::Instruction const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::blockmergeutil::(anonymous namespace)::EliminateOpPhiInstructions(spvtools::opt::IRContext*, spvtools::opt::BasicBlock*)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::blockmergeutil::(anonymous namespace)::IsContinue(spvtools::opt::IRContext*, unsigned int)::$_1, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::blockmergeutil::(anonymous namespace)::IsMerge(spvtools::opt::IRContext*, unsigned int)::$_0, bool (spvtools::opt::Instruction*, unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::opt::eliminatedeadfunctionsutil::EliminateFunction(spvtools::opt::IRContext*, spvtools::opt::UptrVectorIterator<spvtools::opt::Function, false>*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_0, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_1, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_2, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_31, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeShaderI32Vec3InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_30, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFragCoordAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_3, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFragDepthAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_4, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateFrontFacingAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_5, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateHelperInvocationAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_6, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_32, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32Vec4InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_33, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateInstanceIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_8, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateInvocationIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_7, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_28, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_29, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLocalInvocationIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_27, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePatchVerticesAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_9, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointCoordAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_10, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_11, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_12, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePointSizeAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_13, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_14, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_15, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_16, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePositionAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_17, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePrimitiveIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_18, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidatePrimitiveIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_19, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSMBuiltinsAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_35, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSampleIdAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_20, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSampleMaskAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_21, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSamplePositionAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_22, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessCoordAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_23, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessLevelInnerAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_25, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateTessLevelOuterAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_24, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateVertexIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_26, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateWorkgroupSizeAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_34, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ToString(spvtools::EnumSet<SpvCapability_> const&, spvtools::AssemblyGrammar const&)::$_0, void (SpvCapability_)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ValidateBinaryUsingContextAndValidationState(spv_context_t const&, unsigned int const*, unsigned long, spv_diagnostic_t**, spvtools::val::ValidationState_t*)::$_0, void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ValidateImageQueryLod(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_2, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ValidateImageQueryLod(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_3, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::BarriersPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::BasicBlock::dom_begin() const::$_0, spvtools::val::BasicBlock const* (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::BasicBlock::pdom_begin() const::$_2, spvtools::val::BasicBlock const* (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::DerivativesPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::DerivativesPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_1, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::Function::AugmentedCFGPredecessorsFunction() const::$_2, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::Function::AugmentedCFGSuccessorsFunction() const::$_0, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::Function::AugmentedCFGSuccessorsFunctionIncludingHeaderToContinueEdge() const::$_1, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::Function::ComputeAugmentedCFG()::$_3, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::Function::ComputeAugmentedCFG()::$_4, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::Function::RegisterExecutionModelLimitation(SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::$_5, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ImagePass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ImagePass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_1, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::MiscPass(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, bool (spvtools::val::ValidationState_t const&, spvtools::val::Function const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_2, void (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_3, void (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_4, void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_5, void (spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_6, void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExecutionScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_0, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExecutionScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_1, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_1, bool (OpenCLDebugInfo100Instructions)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_3, bool (OpenCLDebugInfo100Instructions)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateMemoryScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_2, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateMemoryScope(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*, unsigned int)::$_3, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidationState_t::RegisterCapability(SpvCapability_)::$_1, void (SpvCapability_)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<spvtools::val::ValidationState_t::ValidationState_t(spv_context_t const*, spv_validator_options_t const*, unsigned int const*, unsigned long, unsigned int)::$_0, void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [123], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [124], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [129], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [140], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [141], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [143], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [149], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [153], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [175], SpvExecutionModel_ const&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const*&, SpvExecutionModel_&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::__bind<void (spvtools::opt::analysis::DefUseManager::*)(spvtools::opt::Instruction*), spvtools::opt::analysis::DefUseManager*, std::__1::placeholders::__ph<1> const&>, void (spvtools::opt::Instruction*)> >(std::__1::integral_constant<bool, false>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (*)(unsigned int), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__choose_policy<std::__1::__function::__default_alloc_func<void (*)(spv_message_level_t, char const*, spv_position_t const&, char const*), void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::integral_constant<bool, true>)::__policy_
std::__1::__function::__policy::__create_empty()::__policy_
std::__1::__function::__policy_invoker<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_empty(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
std::__1::__function::__policy_invoker<bool (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)>::__call_empty(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)
std::__1::__function::__policy_invoker<bool (unsigned int)>::__call_empty(std::__1::__function::__policy_storage const*, unsigned int)
std::__1::__function::__policy_invoker<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>::__call_empty(std::__1::__function::__policy_storage const*, spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)
std::__1::__function::__policy_invoker<spvtools::val::BasicBlock const* (spvtools::val::BasicBlock const*)>::__call_empty(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
std::__1::__function::__policy_invoker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)>::__call_empty(std::__1::__function::__policy_storage const*, unsigned int)
std::__1::__function::__policy_invoker<void (int, char const*)>::__call_empty(std::__1::__function::__policy_storage const*, int, char const*)
std::__1::__function::__policy_invoker<void (int, char const*, char const*)>::__call_empty(std::__1::__function::__policy_storage const*, int, char const*, char const*)
std::__1::__function::__policy_invoker<void (int, glslang::TVector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&)>::__call_empty(std::__1::__function::__policy_storage const*, int, glslang::TVector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&)
std::__1::__function::__policy_invoker<void (int, int, bool, int, char const*)>::__call_empty(std::__1::__function::__policy_storage const*, int, int, bool, int, char const*)
std::__1::__function::__policy_invoker<void (int, int, char const*)>::__call_empty(std::__1::__function::__policy_storage const*, int, int, char const*)
std::__1::__function::__policy_invoker<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>::__call_empty(std::__1::__function::__policy_storage const*, spv_message_level_t, char const*, spv_position_t const&, char const*)
std::__1::__future_error_category::message(int) const
std::__1::__future_error_category::name() const
std::__1::__future_error_category::~__future_error_category()
std::__1::__generic_error_category::message(int) const
std::__1::__generic_error_category::name() const
std::__1::__generic_error_category::~__generic_error_category()
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::__unordered_map_hasher<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, sh::ImmutableString::FowlerNollVoHash<8ul>, true>, std::__1::__unordered_map_equal<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::equal_to<sh::ImmutableString>, true>, pool_allocator<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*> > >::find<sh::ImmutableString>(sh::ImmutableString const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::HashTypePointer, true>, std::__1::__unordered_map_equal<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::CompareTypePointers, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int> > >::find<spvtools::opt::analysis::Type const*>(spvtools::opt::analysis::Type const* const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*> std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::HashTypePointer, true>, std::__1::__unordered_map_equal<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::CompareTypePointers, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int> > >::find<spvtools::opt::analysis::Type const*>(spvtools::opt::analysis::Type const* const&)
std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__hash_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*> std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__hash_table<char const*, (anonymous namespace)::str_hash, (anonymous namespace)::str_eq, std::__1::allocator<char const*> >::__rehash(unsigned long)
std::__1::__hash_table<glslang::TIntermBranch*, std::__1::hash<glslang::TIntermBranch*>, std::__1::equal_to<glslang::TIntermBranch*>, std::__1::allocator<glslang::TIntermBranch*> >::__rehash(unsigned long)
std::__1::__hash_table<glslang::TIntermBranch*, std::__1::hash<glslang::TIntermBranch*>, std::__1::equal_to<glslang::TIntermBranch*>, std::__1::allocator<glslang::TIntermBranch*> >::rehash(unsigned long)
std::__1::__hash_table<glslang::TIntermBranch*, std::__1::hash<glslang::TIntermBranch*>, std::__1::equal_to<glslang::TIntermBranch*>, std::__1::allocator<glslang::TIntermBranch*> >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<glslang::TIntermBranch*, void*>*>)
std::__1::__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >::__rehash(unsigned long)
std::__1::__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >::rehash(unsigned long)
std::__1::__hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >::__node_insert_unique_prepare(unsigned long, long&)
std::__1::__hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >::__rehash(unsigned long)
std::__1::__hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >::rehash(unsigned long)
std::__1::__hash_table<rx::vk::BufferHelper const*, std::__1::hash<rx::vk::BufferHelper const*>, std::__1::equal_to<rx::vk::BufferHelper const*>, std::__1::allocator<rx::vk::BufferHelper const*> >::__rehash(unsigned long)
std::__1::__hash_table<rx::vk::BufferHelper const*, std::__1::hash<rx::vk::BufferHelper const*>, std::__1::equal_to<rx::vk::BufferHelper const*>, std::__1::allocator<rx::vk::BufferHelper const*> >::rehash(unsigned long)
std::__1::__hash_table<spv::Block const*, std::__1::hash<spv::Block const*>, std::__1::equal_to<spv::Block const*>, std::__1::allocator<spv::Block const*> >::__rehash(unsigned long)
std::__1::__hash_table<spv::Block const*, std::__1::hash<spv::Block const*>, std::__1::equal_to<spv::Block const*>, std::__1::allocator<spv::Block const*> >::rehash(unsigned long)
std::__1::__hash_table<spv::Block*, std::__1::hash<spv::Block*>, std::__1::equal_to<spv::Block*>, std::__1::allocator<spv::Block*> >::__rehash(unsigned long)
std::__1::__hash_table<spv::Block*, std::__1::hash<spv::Block*>, std::__1::equal_to<spv::Block*>, std::__1::allocator<spv::Block*> >::rehash(unsigned long)
std::__1::__hash_table<spv::Block*, std::__1::hash<spv::Block*>, std::__1::equal_to<spv::Block*>, std::__1::allocator<spv::Block*> >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<spv::Block*, void*>*>)
std::__1::__hash_table<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::Function const*, std::__1::hash<spvtools::opt::Function const*>, std::__1::equal_to<spvtools::opt::Function const*>, std::__1::allocator<spvtools::opt::Function const*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::Function const*, std::__1::hash<spvtools::opt::Function const*>, std::__1::equal_to<spvtools::opt::Function const*>, std::__1::allocator<spvtools::opt::Function const*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::Instruction const*, std::__1::hash<spvtools::opt::Instruction const*>, std::__1::equal_to<spvtools::opt::Instruction const*>, std::__1::allocator<spvtools::opt::Instruction const*> >::__node_insert_unique(std::__1::__hash_node<spvtools::opt::Instruction const*, void*>*)
std::__1::__hash_table<spvtools::opt::Instruction const*, std::__1::hash<spvtools::opt::Instruction const*>, std::__1::equal_to<spvtools::opt::Instruction const*>, std::__1::allocator<spvtools::opt::Instruction const*> >::__node_insert_unique_prepare(unsigned long, spvtools::opt::Instruction const*&)
std::__1::__hash_table<spvtools::opt::Instruction const*, std::__1::hash<spvtools::opt::Instruction const*>, std::__1::equal_to<spvtools::opt::Instruction const*>, std::__1::allocator<spvtools::opt::Instruction const*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::Instruction const*, std::__1::hash<spvtools::opt::Instruction const*>, std::__1::equal_to<spvtools::opt::Instruction const*>, std::__1::allocator<spvtools::opt::Instruction const*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<spvtools::opt::Instruction*, void*>*>)
std::__1::__hash_table<spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantHash, spvtools::opt::analysis::ConstantEqual, std::__1::allocator<spvtools::opt::analysis::Constant const*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantHash, spvtools::opt::analysis::ConstantEqual, std::__1::allocator<spvtools::opt::analysis::Constant const*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<spvtools::opt::analysis::Type const*, void*>*>)
std::__1::__hash_table<spvtools::val::BasicBlock const*, std::__1::hash<spvtools::val::BasicBlock const*>, std::__1::equal_to<spvtools::val::BasicBlock const*>, std::__1::allocator<spvtools::val::BasicBlock const*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::val::BasicBlock const*, std::__1::hash<spvtools::val::BasicBlock const*>, std::__1::equal_to<spvtools::val::BasicBlock const*>, std::__1::allocator<spvtools::val::BasicBlock const*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::val::BasicBlock*, std::__1::hash<spvtools::val::BasicBlock*>, std::__1::equal_to<spvtools::val::BasicBlock*>, std::__1::allocator<spvtools::val::BasicBlock*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::val::BasicBlock*, std::__1::hash<spvtools::val::BasicBlock*>, std::__1::equal_to<spvtools::val::BasicBlock*>, std::__1::allocator<spvtools::val::BasicBlock*> >::rehash(unsigned long)
std::__1::__hash_table<spvtools::val::Instruction*, std::__1::hash<spvtools::val::Instruction*>, std::__1::equal_to<spvtools::val::Instruction*>, std::__1::allocator<spvtools::val::Instruction*> >::__rehash(unsigned long)
std::__1::__hash_table<spvtools::val::Instruction*, std::__1::hash<spvtools::val::Instruction*>, std::__1::equal_to<spvtools::val::Instruction*>, std::__1::allocator<spvtools::val::Instruction*> >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<char const*, glslang::EHlslTokenClass>, std::__1::__unordered_map_hasher<char const*, std::__1::__hash_value_type<char const*, glslang::EHlslTokenClass>, (anonymous namespace)::str_hash, true>, std::__1::__unordered_map_equal<char const*, std::__1::__hash_value_type<char const*, glslang::EHlslTokenClass>, (anonymous namespace)::str_eq, true>, std::__1::allocator<std::__1::__hash_value_type<char const*, glslang::EHlslTokenClass> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<char const*, glslang::TBuiltInVariable>, std::__1::__unordered_map_hasher<char const*, std::__1::__hash_value_type<char const*, glslang::TBuiltInVariable>, (anonymous namespace)::str_hash, true>, std::__1::__unordered_map_equal<char const*, std::__1::__hash_value_type<char const*, glslang::TBuiltInVariable>, (anonymous namespace)::str_eq, true>, std::__1::allocator<std::__1::__hash_value_type<char const*, glslang::TBuiltInVariable> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<char const*, int>, std::__1::__unordered_map_hasher<char const*, std::__1::__hash_value_type<char const*, int>, (anonymous namespace)::str_hash, true>, std::__1::__unordered_map_equal<char const*, std::__1::__hash_value_type<char const*, int>, (anonymous namespace)::str_eq, true>, std::__1::allocator<std::__1::__hash_value_type<char const*, int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<char const*, unsigned int>, std::__1::__unordered_map_hasher<char const*, std::__1::__hash_value_type<char const*, unsigned int>, std::__1::hash<char const*>, true>, std::__1::__unordered_map_equal<char const*, std::__1::__hash_value_type<char const*, unsigned int>, std::__1::equal_to<char const*>, true>, std::__1::allocator<std::__1::__hash_value_type<char const*, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<char const*, unsigned int>, std::__1::__unordered_map_hasher<char const*, std::__1::__hash_value_type<char const*, unsigned int>, std::__1::hash<char const*>, true>, std::__1::__unordered_map_equal<char const*, std::__1::__hash_value_type<char const*, unsigned int>, std::__1::equal_to<char const*>, true>, std::__1::allocator<std::__1::__hash_value_type<char const*, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<glslang::TIntermTyped*, std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<glslang::TIntermTyped*>, true>, std::__1::__unordered_map_equal<glslang::TIntermTyped*, std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<glslang::TIntermTyped*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<glslang::TIntermTyped*, std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<glslang::TIntermTyped*>, true>, std::__1::__unordered_map_equal<glslang::TIntermTyped*, std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<glslang::TIntermTyped*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::__unordered_map_hasher<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::hash<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::__unordered_map_equal<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::__unordered_map_hasher<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::hash<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::__unordered_map_equal<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::__unordered_map_hasher<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::hash<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::__unordered_map_equal<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::__unordered_map_hasher<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::hash<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::__unordered_map_equal<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<int, unsigned int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<int, unsigned int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::__unordered_map_hasher<rx::vk::AttachmentOpsArray, std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::hash<rx::vk::AttachmentOpsArray>, true>, std::__1::__unordered_map_equal<rx::vk::AttachmentOpsArray, std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::equal_to<rx::vk::AttachmentOpsArray>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::__unordered_map_hasher<rx::vk::AttachmentOpsArray, std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::hash<rx::vk::AttachmentOpsArray>, true>, std::__1::__unordered_map_equal<rx::vk::AttachmentOpsArray, std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::equal_to<rx::vk::AttachmentOpsArray>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::__unordered_map_hasher<rx::vk::DescriptorSetLayoutDesc, std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::hash<rx::vk::DescriptorSetLayoutDesc>, true>, std::__1::__unordered_map_equal<rx::vk::DescriptorSetLayoutDesc, std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::equal_to<rx::vk::DescriptorSetLayoutDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::__unordered_map_hasher<rx::vk::DescriptorSetLayoutDesc, std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::hash<rx::vk::DescriptorSetLayoutDesc>, true>, std::__1::__unordered_map_equal<rx::vk::DescriptorSetLayoutDesc, std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::equal_to<rx::vk::DescriptorSetLayoutDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::__unordered_map_hasher<rx::vk::FramebufferDesc, std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::hash<rx::vk::FramebufferDesc>, true>, std::__1::__unordered_map_equal<rx::vk::FramebufferDesc, std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::equal_to<rx::vk::FramebufferDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::__unordered_map_hasher<rx::vk::FramebufferDesc, std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::hash<rx::vk::FramebufferDesc>, true>, std::__1::__unordered_map_equal<rx::vk::FramebufferDesc, std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::equal_to<rx::vk::FramebufferDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::__unordered_map_hasher<rx::vk::GraphicsPipelineDesc, std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::hash<rx::vk::GraphicsPipelineDesc>, true>, std::__1::__unordered_map_equal<rx::vk::GraphicsPipelineDesc, std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::equal_to<rx::vk::GraphicsPipelineDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::__unordered_map_hasher<rx::vk::GraphicsPipelineDesc, std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::hash<rx::vk::GraphicsPipelineDesc>, true>, std::__1::__unordered_map_equal<rx::vk::GraphicsPipelineDesc, std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::equal_to<rx::vk::GraphicsPipelineDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::__unordered_map_hasher<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::hash<rx::vk::LayerLevel>, true>, std::__1::__unordered_map_equal<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::equal_to<rx::vk::LayerLevel>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::__unordered_map_hasher<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::hash<rx::vk::LayerLevel>, true>, std::__1::__unordered_map_equal<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::equal_to<rx::vk::LayerLevel>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::__unordered_map_hasher<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::hash<rx::vk::LayerLevel>, true>, std::__1::__unordered_map_equal<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::equal_to<rx::vk::LayerLevel>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial> > >::swap(std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::__unordered_map_hasher<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::hash<rx::vk::LayerLevel>, true>, std::__1::__unordered_map_equal<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::equal_to<rx::vk::LayerLevel>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial> > >&)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::__unordered_map_hasher<rx::vk::PipelineLayoutDesc, std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::hash<rx::vk::PipelineLayoutDesc>, true>, std::__1::__unordered_map_equal<rx::vk::PipelineLayoutDesc, std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::equal_to<rx::vk::PipelineLayoutDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::__unordered_map_hasher<rx::vk::PipelineLayoutDesc, std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::hash<rx::vk::PipelineLayoutDesc>, true>, std::__1::__unordered_map_equal<rx::vk::PipelineLayoutDesc, std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::equal_to<rx::vk::PipelineLayoutDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::__unordered_map_hasher<rx::vk::RenderPassDesc, std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::hash<rx::vk::RenderPassDesc>, true>, std::__1::__unordered_map_equal<rx::vk::RenderPassDesc, std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::equal_to<rx::vk::RenderPassDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::__unordered_map_hasher<rx::vk::RenderPassDesc, std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::hash<rx::vk::RenderPassDesc>, true>, std::__1::__unordered_map_equal<rx::vk::RenderPassDesc, std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::equal_to<rx::vk::RenderPassDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::__unordered_map_hasher<rx::vk::SamplerDesc, std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::hash<rx::vk::SamplerDesc>, true>, std::__1::__unordered_map_equal<rx::vk::SamplerDesc, std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::equal_to<rx::vk::SamplerDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::__unordered_map_hasher<rx::vk::SamplerDesc, std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::hash<rx::vk::SamplerDesc>, true>, std::__1::__unordered_map_equal<rx::vk::SamplerDesc, std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::equal_to<rx::vk::SamplerDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::__unordered_map_hasher<rx::vk::TextureDescriptorDesc, std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::hash<rx::vk::TextureDescriptorDesc>, true>, std::__1::__unordered_map_equal<rx::vk::TextureDescriptorDesc, std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::equal_to<rx::vk::TextureDescriptorDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::__unordered_map_hasher<rx::vk::TextureDescriptorDesc, std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::hash<rx::vk::TextureDescriptorDesc>, true>, std::__1::__unordered_map_equal<rx::vk::TextureDescriptorDesc, std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::equal_to<rx::vk::TextureDescriptorDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::__unordered_map_hasher<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, sh::ImmutableString::FowlerNollVoHash<8ul>, true>, std::__1::__unordered_map_equal<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::equal_to<sh::ImmutableString>, true>, pool_allocator<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::__unordered_map_hasher<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, sh::ImmutableString::FowlerNollVoHash<8ul>, true>, std::__1::__unordered_map_equal<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::equal_to<sh::ImmutableString>, true>, pool_allocator<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::__unordered_map_hasher<sh::TField const*, std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::hash<sh::TField const*>, true>, std::__1::__unordered_map_equal<sh::TField const*, std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::equal_to<sh::TField const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TField const*, bool> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::__unordered_map_hasher<sh::TField const*, std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::hash<sh::TField const*>, true>, std::__1::__unordered_map_equal<sh::TField const*, std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::equal_to<sh::TField const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TField const*, bool> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::__unordered_map_hasher<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::hash<sh::TFunction const*>, true>, std::__1::__unordered_map_equal<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::equal_to<sh::TFunction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::__unordered_map_hasher<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::hash<sh::TFunction const*>, true>, std::__1::__unordered_map_equal<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::equal_to<sh::TFunction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::__unordered_map_hasher<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::hash<sh::TFunction const*>, true>, std::__1::__unordered_map_equal<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::equal_to<sh::TFunction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::__unordered_map_hasher<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::hash<sh::TFunction const*>, true>, std::__1::__unordered_map_equal<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::equal_to<sh::TFunction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::__unordered_map_hasher<sh::TIntermNode const*, std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::hash<sh::TIntermNode const*>, true>, std::__1::__unordered_map_equal<sh::TIntermNode const*, std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::equal_to<sh::TIntermNode const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::__unordered_map_hasher<sh::TIntermNode const*, std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::hash<sh::TIntermNode const*>, true>, std::__1::__unordered_map_equal<sh::TIntermNode const*, std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::equal_to<sh::TIntermNode const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TStructure const*, sh::(anonymous namespace)::StructConversionData>, std::__1::__unordered_map_hasher<sh::TStructure const*, std::__1::__hash_value_type<sh::TStructure const*, sh::(anonymous namespace)::StructConversionData>, std::__1::hash<sh::TStructure const*>, true>, std::__1::__unordered_map_equal<sh::TStructure const*, std::__1::__hash_value_type<sh::TStructure const*, sh::(anonymous namespace)::StructConversionData>, std::__1::equal_to<sh::TStructure const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TStructure const*, sh::(anonymous namespace)::StructConversionData> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::__unordered_map_hasher<spv::Block*, std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::hash<spv::Block*>, true>, std::__1::__unordered_map_equal<spv::Block*, std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::equal_to<spv::Block*>, true>, std::__1::allocator<std::__1::__hash_value_type<spv::Block*, spv::Block*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::__unordered_map_hasher<spv::Block*, std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::hash<spv::Block*>, true>, std::__1::__unordered_map_equal<spv::Block*, std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::equal_to<spv::Block*>, true>, std::__1::allocator<std::__1::__hash_value_type<spv::Block*, spv::Block*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::hash<spvtools::opt::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::equal_to<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::hash<spvtools::opt::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::equal_to<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::hash<spvtools::opt::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::equal_to<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::hash<spvtools::opt::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::equal_to<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::__unordered_map_hasher<spvtools::opt::Function const*, std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::hash<spvtools::opt::Function const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Function const*, std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::equal_to<spvtools::opt::Function const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::__unordered_map_hasher<spvtools::opt::Function const*, std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::hash<spvtools::opt::Function const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Function const*, std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::equal_to<spvtools::opt::Function const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::Instruction const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::Instruction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::Instruction const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::Instruction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::Instruction const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::Instruction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::hash<spvtools::opt::Instruction*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::Instruction*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::hash<spvtools::opt::Instruction*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::Instruction*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::hash<spvtools::opt::Instruction*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::Instruction*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::hash<spvtools::opt::Instruction*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::hash<spvtools::opt::Instruction*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction, std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, spvtools::opt::ValueTableHash, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction, std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, spvtools::opt::ComputeSameValue, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction, std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, spvtools::opt::ValueTableHash, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction, std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, spvtools::opt::ComputeSameValue, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::HashTypePointer, true>, std::__1::__unordered_map_equal<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::CompareTypePointers, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::HashTypePointer, true>, std::__1::__unordered_map_equal<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::CompareTypePointers, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::HashTypePointer, true>, std::__1::__unordered_map_equal<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::CompareTypePointers, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::hash<spvtools::val::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::equal_to<spvtools::val::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::hash<spvtools::val::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::equal_to<spvtools::val::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::hash<spvtools::val::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::equal_to<spvtools::val::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::hash<spvtools::val::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::equal_to<spvtools::val::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::__unordered_map_hasher<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::hash<std::__1::__thread_id>, true>, std::__1::__unordered_map_equal<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::equal_to<std::__1::__thread_id>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::__unordered_map_hasher<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::hash<std::__1::__thread_id>, true>, std::__1::__unordered_map_equal<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::equal_to<std::__1::__thread_id>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::__unordered_map_hasher<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::hash<std::__1::__thread_id>, true>, std::__1::__unordered_map_equal<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::equal_to<std::__1::__thread_id>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > > > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::__unordered_map_hasher<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::hash<std::__1::array<unsigned char, 20ul> >, true>, std::__1::__unordered_map_equal<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::equal_to<std::__1::array<unsigned char, 20ul> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::__unordered_map_hasher<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::hash<std::__1::array<unsigned char, 20ul> >, true>, std::__1::__unordered_map_equal<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::equal_to<std::__1::array<unsigned char, 20ul> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::__unordered_map_hasher<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::hash<std::__1::array<unsigned char, 20ul> >, true>, std::__1::__unordered_map_equal<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::equal_to<std::__1::array<unsigned char, 20ul> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> > > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*> > >::__node_insert_multi(std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, void*>*)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*> > >::__node_insert_multi_prepare(unsigned long, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>&)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, std::__1::__unordered_map_hasher<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, spvtools::val::bb_constr_type_pair_hash, true>, std::__1::__unordered_map_equal<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, std::__1::equal_to<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, std::__1::__unordered_map_hasher<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, spvtools::val::bb_constr_type_pair_hash, true>, std::__1::__unordered_map_equal<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, std::__1::equal_to<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints>, std::__1::__unordered_map_hasher<std::__1::pair<unsigned int, unsigned int>, std::__1::__hash_value_type<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints>, spvtools::val::(anonymous namespace)::PairHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned int, unsigned int>, std::__1::__hash_value_type<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints>, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*>, std::__1::__unordered_map_hasher<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*>, sh::(anonymous namespace)::InstantiationHash, true>, std::__1::__unordered_map_equal<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*>, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*>, std::__1::__unordered_map_hasher<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*>, sh::(anonymous namespace)::InstantiationHash, true>, std::__1::__unordered_map_equal<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*>, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, (anonymous namespace)::Parser::NumberType>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, (anonymous namespace)::Parser::NumberType>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, (anonymous namespace)::Parser::NumberType>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, (anonymous namespace)::Parser::NumberType> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, bool>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, bool> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, bool>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, bool> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Buffer*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Buffer*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Buffer*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Buffer*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::FenceNV*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::FenceNV*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::FenceNV*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::InternalFormat> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::InternalFormat> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Program*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Program*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Program*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Program*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Query*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Query*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Query*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Query*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sampler*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sampler*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sampler*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Sampler*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Semaphore*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Semaphore*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Semaphore*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Shader*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Shader*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Shader*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Shader*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sync*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sync*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sync*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Sync*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Texture*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Texture*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Texture*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Texture*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::VertexArray*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::VertexArray*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::VertexArray*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t> > >::__move_assign(std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t> > >&, std::__1::integral_constant<bool, true>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*> > >::__move_assign(std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*> > >&, std::__1::integral_constant<bool, true>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData> > >::erase(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*> > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::Function*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::Function*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > > > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, void*>*>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >::__move_assign(std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >&, std::__1::integral_constant<bool, true>)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>)
std::__1::__hash_table<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> >, spvtools::opt::SENodeHash, spvtools::opt::ScalarEvolutionAnalysis::NodePointersEquality, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> >, spvtools::opt::SENodeHash, spvtools::opt::ScalarEvolutionAnalysis::NodePointersEquality, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> > > >::rehash(unsigned long)
std::__1::__hash_table<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> >, spvtools::opt::analysis::HashTypeUniquePointer, spvtools::opt::analysis::CompareTypeUniquePointers, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> > > >::__rehash(unsigned long)
std::__1::__hash_table<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> >, spvtools::opt::analysis::HashTypeUniquePointer, spvtools::opt::analysis::CompareTypeUniquePointers, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> > > >::rehash(unsigned long)
std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__move_assign(std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >&, std::__1::integral_constant<bool, true>)
std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__node_insert_unique_prepare(unsigned long, unsigned int&)
std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__rehash(unsigned long)
std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::rehash(unsigned long)
std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::remove(std::__1::__hash_const_iterator<std::__1::__hash_node<unsigned int, void*>*>)
std::__1::__iostream_category::message(int) const
std::__1::__iostream_category::name() const
std::__1::__iostream_category::~__iostream_category()
std::__1::__itoa::__pow10_32
std::__1::__itoa::__pow10_64
std::__1::__itoa::__u32toa(unsigned int, char*)
std::__1::__itoa::__u64toa(unsigned long, char*)
std::__1::__itoa::cDigitsLut
std::__1::__libcpp_asprintf_l(char**, __locale_struct*, char const*, ...)
std::__1::__libcpp_snprintf_l(char*, unsigned long, __locale_struct*, char const*, ...)
std::__1::__libcpp_sscanf_l(char const*, __locale_struct*, char const*, ...)
std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> angle::base::MRUCacheBase<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> >, angle::base::MRUCacheHashMap>::Put<angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>(std::__1::array<unsigned char, 20ul> const&, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize&&)
std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>::operator()(std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> const&) const
std::__1::__money_get<char>::__gather_info(bool, std::__1::locale const&, std::__1::money_base::pattern&, char&, char&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, int&)
std::__1::__money_get<wchar_t>::__gather_info(bool, std::__1::locale const&, std::__1::money_base::pattern&, wchar_t&, wchar_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, int&)
std::__1::__money_put<char>::__format(char*, char*&, char*&, unsigned int, char const*, char const*, std::__1::ctype<char> const&, bool, std::__1::money_base::pattern const&, char, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)
std::__1::__money_put<char>::__gather_info(bool, bool, std::__1::locale const&, std::__1::money_base::pattern&, char&, char&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, int&)
std::__1::__money_put<wchar_t>::__format(wchar_t*, wchar_t*&, wchar_t*&, unsigned int, wchar_t const*, wchar_t const*, std::__1::ctype<wchar_t> const&, bool, std::__1::money_base::pattern const&, wchar_t, wchar_t, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&, int)
std::__1::__money_put<wchar_t>::__gather_info(bool, bool, std::__1::locale const&, std::__1::money_base::pattern&, wchar_t&, wchar_t&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&, int&)
std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::__hash_len_0_to_16(char const*, unsigned long)
std::__1::__murmur2_or_cityhash<unsigned long, 64ul>::operator()(void const*, unsigned long)
std::__1::__narrow_to_utf8<16ul>::~__narrow_to_utf8()
std::__1::__narrow_to_utf8<32ul>::~__narrow_to_utf8()
std::__1::__next_prime(unsigned long)
std::__1::__num_get<char>::__stage2_float_loop(char, bool&, char&, char*, char*&, char, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, unsigned int&, char*)
std::__1::__num_get<char>::__stage2_float_prep(std::__1::ios_base&, char*, char&, char&)
std::__1::__num_get<char>::__stage2_int_loop(char, int, char*, char*&, unsigned int&, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, char const*)
std::__1::__num_get<char>::__stage2_int_prep(std::__1::ios_base&, char&)
std::__1::__num_get<wchar_t>::__stage2_float_loop(wchar_t, bool&, char&, char*, char*&, wchar_t, wchar_t, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, unsigned int&, wchar_t*)
std::__1::__num_get<wchar_t>::__stage2_float_prep(std::__1::ios_base&, wchar_t*, wchar_t&, wchar_t&)
std::__1::__num_get<wchar_t>::__stage2_int_loop(wchar_t, int, char*, char*&, unsigned int&, wchar_t, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned int*, unsigned int*&, wchar_t const*)
std::__1::__num_get<wchar_t>::__stage2_int_prep(std::__1::ios_base&, wchar_t&)
std::__1::__num_get_base::__src
std::__1::__num_put<char>::__widen_and_group_float(char*, char*, char*, char*, char*&, char*&, std::__1::locale const&)
std::__1::__num_put<char>::__widen_and_group_int(char*, char*, char*, char*, char*&, char*&, std::__1::locale const&)
std::__1::__num_put<wchar_t>::__widen_and_group_float(char*, char*, char*, wchar_t*, wchar_t*&, wchar_t*&, std::__1::locale const&)
std::__1::__num_put<wchar_t>::__widen_and_group_int(char*, char*, char*, wchar_t*, wchar_t*&, wchar_t*&, std::__1::locale const&)
std::__1::__shared_count::~__shared_count()
std::__1::__shared_ptr_emplace<angle::AsyncWaitableEvent, std::__1::allocator<angle::AsyncWaitableEvent> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<angle::AsyncWaitableEvent, std::__1::allocator<angle::AsyncWaitableEvent> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<angle::AsyncWaitableEvent, std::__1::allocator<angle::AsyncWaitableEvent> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<angle::DelegateWaitableEvent, std::__1::allocator<angle::DelegateWaitableEvent> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<angle::DelegateWaitableEvent, std::__1::allocator<angle::DelegateWaitableEvent> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<angle::DelegateWaitableEvent, std::__1::allocator<angle::DelegateWaitableEvent> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<angle::SingleThreadedWaitableEvent, std::__1::allocator<angle::SingleThreadedWaitableEvent> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<angle::SingleThreadedWaitableEvent, std::__1::allocator<angle::SingleThreadedWaitableEvent> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<angle::SingleThreadedWaitableEvent, std::__1::allocator<angle::SingleThreadedWaitableEvent> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<angle::WaitableEventDone, std::__1::allocator<angle::WaitableEventDone> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<angle::WaitableEventDone, std::__1::allocator<angle::WaitableEventDone> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<angle::WaitableEventDone, std::__1::allocator<angle::WaitableEventDone> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<angle::pp::Macro, std::__1::allocator<angle::pp::Macro> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<angle::pp::Macro, std::__1::allocator<angle::pp::Macro> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<angle::pp::Macro, std::__1::allocator<angle::pp::Macro> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<rx::ProgramGL::LinkTask, std::__1::allocator<rx::ProgramGL::LinkTask> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<rx::ProgramGL::LinkTask, std::__1::allocator<rx::ProgramGL::LinkTask> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<rx::ProgramGL::LinkTask, std::__1::allocator<rx::ProgramGL::LinkTask> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<rx::TranslateTask, std::__1::allocator<rx::TranslateTask> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<rx::TranslateTask, std::__1::allocator<rx::TranslateTask> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<rx::TranslateTask, std::__1::allocator<rx::TranslateTask> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<rx::TranslateTaskGL, std::__1::allocator<rx::TranslateTaskGL> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<rx::TranslateTaskGL, std::__1::allocator<rx::TranslateTaskGL> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<rx::TranslateTaskGL, std::__1::allocator<rx::TranslateTaskGL> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventDone, std::__1::allocator<rx::WaitableCompileEventDone> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventDone, std::__1::allocator<rx::WaitableCompileEventDone> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventDone, std::__1::allocator<rx::WaitableCompileEventDone> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventImpl, std::__1::allocator<rx::WaitableCompileEventImpl> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventImpl, std::__1::allocator<rx::WaitableCompileEventImpl> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventImpl, std::__1::allocator<rx::WaitableCompileEventImpl> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventNativeParallel, std::__1::allocator<rx::WaitableCompileEventNativeParallel> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventNativeParallel, std::__1::allocator<rx::WaitableCompileEventNativeParallel> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventNativeParallel, std::__1::allocator<rx::WaitableCompileEventNativeParallel> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventWorkerContext, std::__1::allocator<rx::WaitableCompileEventWorkerContext> >::__on_zero_shared()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventWorkerContext, std::__1::allocator<rx::WaitableCompileEventWorkerContext> >::__on_zero_shared_weak()
std::__1::__shared_ptr_emplace<rx::WaitableCompileEventWorkerContext, std::__1::allocator<rx::WaitableCompileEventWorkerContext> >::~__shared_ptr_emplace()
std::__1::__shared_ptr_pointer<angle::AsyncWorkerPool*, std::__1::default_delete<angle::AsyncWorkerPool>, std::__1::allocator<angle::AsyncWorkerPool> >::__on_zero_shared()
std::__1::__shared_ptr_pointer<angle::AsyncWorkerPool*, std::__1::default_delete<angle::AsyncWorkerPool>, std::__1::allocator<angle::AsyncWorkerPool> >::__on_zero_shared_weak()
std::__1::__shared_ptr_pointer<angle::AsyncWorkerPool*, std::__1::default_delete<angle::AsyncWorkerPool>, std::__1::allocator<angle::AsyncWorkerPool> >::~__shared_ptr_pointer()
std::__1::__shared_ptr_pointer<angle::DelegateWorkerPool*, std::__1::default_delete<angle::DelegateWorkerPool>, std::__1::allocator<angle::DelegateWorkerPool> >::__on_zero_shared()
std::__1::__shared_ptr_pointer<angle::DelegateWorkerPool*, std::__1::default_delete<angle::DelegateWorkerPool>, std::__1::allocator<angle::DelegateWorkerPool> >::__on_zero_shared_weak()
std::__1::__shared_ptr_pointer<angle::DelegateWorkerPool*, std::__1::default_delete<angle::DelegateWorkerPool>, std::__1::allocator<angle::DelegateWorkerPool> >::~__shared_ptr_pointer()
std::__1::__shared_ptr_pointer<angle::SingleThreadedWorkerPool*, std::__1::default_delete<angle::SingleThreadedWorkerPool>, std::__1::allocator<angle::SingleThreadedWorkerPool> >::__on_zero_shared()
std::__1::__shared_ptr_pointer<angle::SingleThreadedWorkerPool*, std::__1::default_delete<angle::SingleThreadedWorkerPool>, std::__1::allocator<angle::SingleThreadedWorkerPool> >::__on_zero_shared_weak()
std::__1::__shared_ptr_pointer<angle::SingleThreadedWorkerPool*, std::__1::default_delete<angle::SingleThreadedWorkerPool>, std::__1::allocator<angle::SingleThreadedWorkerPool> >::~__shared_ptr_pointer()
std::__1::__shared_ptr_pointer<gl::ProgramExecutable*, std::__1::default_delete<gl::ProgramExecutable>, std::__1::allocator<gl::ProgramExecutable> >::__on_zero_shared()
std::__1::__shared_ptr_pointer<gl::ProgramExecutable*, std::__1::default_delete<gl::ProgramExecutable>, std::__1::allocator<gl::ProgramExecutable> >::__on_zero_shared_weak()
std::__1::__shared_ptr_pointer<gl::ProgramExecutable*, std::__1::default_delete<gl::ProgramExecutable>, std::__1::allocator<gl::ProgramExecutable> >::~__shared_ptr_pointer()
std::__1::__shared_ptr_pointer<rx::RendererEGL*, std::__1::default_delete<rx::RendererEGL>, std::__1::allocator<rx::RendererEGL> >::__on_zero_shared()
std::__1::__shared_ptr_pointer<rx::RendererEGL*, std::__1::default_delete<rx::RendererEGL>, std::__1::allocator<rx::RendererEGL> >::__on_zero_shared_weak()
std::__1::__shared_ptr_pointer<rx::RendererEGL*, std::__1::default_delete<rx::RendererEGL>, std::__1::allocator<rx::RendererEGL> >::~__shared_ptr_pointer()
std::__1::__shared_ptr_pointer<rx::RendererGLX*, std::__1::default_delete<rx::RendererGLX>, std::__1::allocator<rx::RendererGLX> >::__on_zero_shared()
std::__1::__shared_ptr_pointer<rx::RendererGLX*, std::__1::default_delete<rx::RendererGLX>, std::__1::allocator<rx::RendererGLX> >::__on_zero_shared_weak()
std::__1::__shared_ptr_pointer<rx::RendererGLX*, std::__1::default_delete<rx::RendererGLX>, std::__1::allocator<rx::RendererGLX> >::~__shared_ptr_pointer()
std::__1::__shared_weak_count::__get_deleter(std::type_info const&) const
std::__1::__shared_weak_count::__release_weak()
std::__1::__shared_weak_count::~__shared_weak_count()
std::__1::__split_buffer<bool*, std::__1::allocator<bool*> >::push_back(bool*&&)
std::__1::__split_buffer<bool*, std::__1::allocator<bool*> >::push_front(bool*&&)
std::__1::__split_buffer<bool*, std::__1::allocator<bool*>&>::push_front(bool* const&)
std::__1::__split_buffer<gl::Debug::Message*, std::__1::allocator<gl::Debug::Message*> >::push_back(gl::Debug::Message* const&)
std::__1::__split_buffer<gl::Debug::Message*, std::__1::allocator<gl::Debug::Message*> >::push_back(gl::Debug::Message*&&)
std::__1::__split_buffer<gl::Debug::Message*, std::__1::allocator<gl::Debug::Message*> >::push_front(gl::Debug::Message*&&)
std::__1::__split_buffer<gl::Debug::Message*, std::__1::allocator<gl::Debug::Message*>&>::push_back(gl::Debug::Message*&&)
std::__1::__split_buffer<gl::Debug::Message*, std::__1::allocator<gl::Debug::Message*>&>::push_front(gl::Debug::Message* const&)
std::__1::__split_buffer<gl::HandleAllocator::HandleRange, std::__1::allocator<gl::HandleAllocator::HandleRange>&>::push_back(gl::HandleAllocator::HandleRange&&)
std::__1::__split_buffer<glslang::TShader::Includer::IncludeResult**, std::__1::allocator<glslang::TShader::Includer::IncludeResult**> >::push_back(glslang::TShader::Includer::IncludeResult**&&)
std::__1::__split_buffer<glslang::TShader::Includer::IncludeResult**, std::__1::allocator<glslang::TShader::Includer::IncludeResult**> >::push_front(glslang::TShader::Includer::IncludeResult**&&)
std::__1::__split_buffer<glslang::TShader::Includer::IncludeResult**, std::__1::allocator<glslang::TShader::Includer::IncludeResult**>&>::push_front(glslang::TShader::Includer::IncludeResult** const&)
std::__1::__split_buffer<rx::RendererVk::PendingOneOffCommands*, std::__1::allocator<rx::RendererVk::PendingOneOffCommands*> >::push_back(rx::RendererVk::PendingOneOffCommands* const&)
std::__1::__split_buffer<rx::RendererVk::PendingOneOffCommands*, std::__1::allocator<rx::RendererVk::PendingOneOffCommands*> >::push_back(rx::RendererVk::PendingOneOffCommands*&&)
std::__1::__split_buffer<rx::RendererVk::PendingOneOffCommands*, std::__1::allocator<rx::RendererVk::PendingOneOffCommands*> >::push_front(rx::RendererVk::PendingOneOffCommands*&&)
std::__1::__split_buffer<rx::RendererVk::PendingOneOffCommands*, std::__1::allocator<rx::RendererVk::PendingOneOffCommands*>&>::push_back(rx::RendererVk::PendingOneOffCommands*&&)
std::__1::__split_buffer<rx::RendererVk::PendingOneOffCommands*, std::__1::allocator<rx::RendererVk::PendingOneOffCommands*>&>::push_front(rx::RendererVk::PendingOneOffCommands* const&)
std::__1::__split_buffer<rx::vk::CommandBufferHelper**, std::__1::allocator<rx::vk::CommandBufferHelper**> >::push_back(rx::vk::CommandBufferHelper** const&)
std::__1::__split_buffer<rx::vk::CommandBufferHelper**, std::__1::allocator<rx::vk::CommandBufferHelper**> >::push_back(rx::vk::CommandBufferHelper**&&)
std::__1::__split_buffer<rx::vk::CommandBufferHelper**, std::__1::allocator<rx::vk::CommandBufferHelper**> >::push_front(rx::vk::CommandBufferHelper**&&)
std::__1::__split_buffer<rx::vk::CommandBufferHelper**, std::__1::allocator<rx::vk::CommandBufferHelper**>&>::push_back(rx::vk::CommandBufferHelper**&&)
std::__1::__split_buffer<rx::vk::CommandBufferHelper**, std::__1::allocator<rx::vk::CommandBufferHelper**>&>::push_front(rx::vk::CommandBufferHelper** const&)
std::__1::__split_buffer<rx::vk::CommandProcessorTask*, std::__1::allocator<rx::vk::CommandProcessorTask*> >::push_back(rx::vk::CommandProcessorTask* const&)
std::__1::__split_buffer<rx::vk::CommandProcessorTask*, std::__1::allocator<rx::vk::CommandProcessorTask*> >::push_back(rx::vk::CommandProcessorTask*&&)
std::__1::__split_buffer<rx::vk::CommandProcessorTask*, std::__1::allocator<rx::vk::CommandProcessorTask*> >::push_front(rx::vk::CommandProcessorTask*&&)
std::__1::__split_buffer<rx::vk::CommandProcessorTask*, std::__1::allocator<rx::vk::CommandProcessorTask*>&>::push_back(rx::vk::CommandProcessorTask*&&)
std::__1::__split_buffer<rx::vk::CommandProcessorTask*, std::__1::allocator<rx::vk::CommandProcessorTask*>&>::push_front(rx::vk::CommandProcessorTask* const&)
std::__1::__split_buffer<rx::vk::ImageHelper::SubresourceUpdate, std::__1::allocator<rx::vk::ImageHelper::SubresourceUpdate>&>::push_back(rx::vk::ImageHelper::SubresourceUpdate&&)
std::__1::__split_buffer<spv::Block**, std::__1::allocator<spv::Block**> >::push_back(spv::Block**&&)
std::__1::__split_buffer<spv::Block**, std::__1::allocator<spv::Block**> >::push_front(spv::Block**&&)
std::__1::__split_buffer<spv::Block**, std::__1::allocator<spv::Block**>&>::push_front(spv::Block** const&)
std::__1::__split_buffer<spv::Builder::LoopBlocks*, std::__1::allocator<spv::Builder::LoopBlocks*> >::push_back(spv::Builder::LoopBlocks*&&)
std::__1::__split_buffer<spv::Builder::LoopBlocks*, std::__1::allocator<spv::Builder::LoopBlocks*> >::push_front(spv::Builder::LoopBlocks*&&)
std::__1::__split_buffer<spv::Builder::LoopBlocks*, std::__1::allocator<spv::Builder::LoopBlocks*>&>::push_front(spv::Builder::LoopBlocks* const&)
std::__1::__split_buffer<spvtools::opt::BasicBlock**, std::__1::allocator<spvtools::opt::BasicBlock**> >::push_back(spvtools::opt::BasicBlock**&&)
std::__1::__split_buffer<spvtools::opt::BasicBlock**, std::__1::allocator<spvtools::opt::BasicBlock**> >::push_front(spvtools::opt::BasicBlock**&&)
std::__1::__split_buffer<spvtools::opt::BasicBlock**, std::__1::allocator<spvtools::opt::BasicBlock**>&>::push_front(spvtools::opt::BasicBlock** const&)
std::__1::__split_buffer<spvtools::opt::Instruction**, std::__1::allocator<spvtools::opt::Instruction**> >::push_back(spvtools::opt::Instruction**&&)
std::__1::__split_buffer<spvtools::opt::Instruction**, std::__1::allocator<spvtools::opt::Instruction**> >::push_front(spvtools::opt::Instruction**&&)
std::__1::__split_buffer<spvtools::opt::Instruction**, std::__1::allocator<spvtools::opt::Instruction**>&>::push_front(spvtools::opt::Instruction** const&)
std::__1::__split_buffer<spvtools::opt::SSARewriter::PhiCandidate**, std::__1::allocator<spvtools::opt::SSARewriter::PhiCandidate**> >::push_back(spvtools::opt::SSARewriter::PhiCandidate**&&)
std::__1::__split_buffer<spvtools::opt::SSARewriter::PhiCandidate**, std::__1::allocator<spvtools::opt::SSARewriter::PhiCandidate**> >::push_front(spvtools::opt::SSARewriter::PhiCandidate**&&)
std::__1::__split_buffer<spvtools::opt::SSARewriter::PhiCandidate**, std::__1::allocator<spvtools::opt::SSARewriter::PhiCandidate**>&>::push_front(spvtools::opt::SSARewriter::PhiCandidate** const&)
std::__1::__split_buffer<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*, std::__1::allocator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*> >::push_back(std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*&&)
std::__1::__split_buffer<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*, std::__1::allocator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*> >::push_front(std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*&&)
std::__1::__split_buffer<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*, std::__1::allocator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >*>&>::push_front(std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >* const&)
std::__1::__split_buffer<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*> >::push_back(std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >* const&)
std::__1::__split_buffer<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*> >::push_back(std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*&&)
std::__1::__split_buffer<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*> >::push_front(std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*&&)
std::__1::__split_buffer<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*>&>::push_back(std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*&&)
std::__1::__split_buffer<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >*>&>::push_front(std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >* const&)
std::__1::__split_buffer<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > >&>::push_back(std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >&&)
std::__1::__split_buffer<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*> >::push_back(std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >* const&)
std::__1::__split_buffer<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*> >::push_back(std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*&&)
std::__1::__split_buffer<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*> >::push_front(std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*&&)
std::__1::__split_buffer<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*>&>::push_back(std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*&&)
std::__1::__split_buffer<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >*>&>::push_front(std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >* const&)
std::__1::__split_buffer<unsigned int*, std::__1::allocator<unsigned int*> >::push_back(unsigned int* const&)
std::__1::__split_buffer<unsigned int*, std::__1::allocator<unsigned int*> >::push_back(unsigned int*&&)
std::__1::__split_buffer<unsigned int*, std::__1::allocator<unsigned int*> >::push_front(unsigned int*&&)
std::__1::__split_buffer<unsigned int*, std::__1::allocator<unsigned int*>&>::push_back(unsigned int*&&)
std::__1::__split_buffer<unsigned int*, std::__1::allocator<unsigned int*>&>::push_front(unsigned int* const&)
std::__1::__stdinbuf<char>::__getchar(bool)
std::__1::__stdinbuf<char>::imbue(std::__1::locale const&)
std::__1::__stdinbuf<char>::pbackfail(int)
std::__1::__stdinbuf<char>::uflow()
std::__1::__stdinbuf<char>::underflow()
std::__1::__stdinbuf<char>::~__stdinbuf()
std::__1::__stdinbuf<wchar_t>::__getchar(bool)
std::__1::__stdinbuf<wchar_t>::imbue(std::__1::locale const&)
std::__1::__stdinbuf<wchar_t>::pbackfail(unsigned int)
std::__1::__stdinbuf<wchar_t>::uflow()
std::__1::__stdinbuf<wchar_t>::underflow()
std::__1::__stdinbuf<wchar_t>::~__stdinbuf()
std::__1::__stdoutbuf<char>::__stdoutbuf(_IO_FILE*, __mbstate_t*)
std::__1::__stdoutbuf<char>::imbue(std::__1::locale const&)
std::__1::__stdoutbuf<char>::overflow(int)
std::__1::__stdoutbuf<char>::sync()
std::__1::__stdoutbuf<char>::xsputn(char const*, long)
std::__1::__stdoutbuf<char>::~__stdoutbuf()
std::__1::__stdoutbuf<wchar_t>::__stdoutbuf(_IO_FILE*, __mbstate_t*)
std::__1::__stdoutbuf<wchar_t>::imbue(std::__1::locale const&)
std::__1::__stdoutbuf<wchar_t>::overflow(unsigned int)
std::__1::__stdoutbuf<wchar_t>::sync()
std::__1::__stdoutbuf<wchar_t>::xsputn(wchar_t const*, long)
std::__1::__stdoutbuf<wchar_t>::~__stdoutbuf()
std::__1::__system_error_category::default_error_condition(int) const
std::__1::__system_error_category::message(int) const
std::__1::__system_error_category::name() const
std::__1::__system_error_category::~__system_error_category()
std::__1::__thread_local_data()
std::__1::__thread_local_data()::__p
std::__1::__thread_specific_ptr<std::__1::__thread_struct>::__at_thread_exit(void*)
std::__1::__thread_struct::__thread_struct()
std::__1::__thread_struct::~__thread_struct()
std::__1::__thread_struct_imp::~__thread_struct_imp()
std::__1::__throw_bad_cast()
std::__1::__throw_bad_function_call()
std::__1::__throw_failure(char const*)
std::__1::__throw_future_error(std::__1::future_errc)
std::__1::__throw_length_error(char const*)
std::__1::__throw_out_of_range(char const*)
std::__1::__throw_overflow_error(char const*)
std::__1::__throw_runtime_error(char const*)
std::__1::__throw_system_error(int, char const*)
std::__1::__time_get_c_storage<char>::__X() const
std::__1::__time_get_c_storage<char>::__X() const::s
std::__1::__time_get_c_storage<char>::__am_pm() const
std::__1::__time_get_c_storage<char>::__am_pm() const::am_pm
std::__1::__time_get_c_storage<char>::__c() const
std::__1::__time_get_c_storage<char>::__c() const::s
std::__1::__time_get_c_storage<char>::__months() const
std::__1::__time_get_c_storage<char>::__months() const::months
std::__1::__time_get_c_storage<char>::__r() const
std::__1::__time_get_c_storage<char>::__r() const::s
std::__1::__time_get_c_storage<char>::__weeks() const
std::__1::__time_get_c_storage<char>::__weeks() const::weeks
std::__1::__time_get_c_storage<char>::__x() const
std::__1::__time_get_c_storage<char>::__x() const::s
std::__1::__time_get_c_storage<wchar_t>::__X() const
std::__1::__time_get_c_storage<wchar_t>::__X() const::s
std::__1::__time_get_c_storage<wchar_t>::__am_pm() const
std::__1::__time_get_c_storage<wchar_t>::__am_pm() const::am_pm
std::__1::__time_get_c_storage<wchar_t>::__c() const
std::__1::__time_get_c_storage<wchar_t>::__c() const::s
std::__1::__time_get_c_storage<wchar_t>::__months() const
std::__1::__time_get_c_storage<wchar_t>::__months() const::months
std::__1::__time_get_c_storage<wchar_t>::__r() const
std::__1::__time_get_c_storage<wchar_t>::__r() const::s
std::__1::__time_get_c_storage<wchar_t>::__weeks() const
std::__1::__time_get_c_storage<wchar_t>::__weeks() const::weeks
std::__1::__time_get_c_storage<wchar_t>::__x() const
std::__1::__time_get_c_storage<wchar_t>::__x() const::s
std::__1::__time_put::__do_put(wchar_t*, wchar_t*&, tm const*, char, char) const
std::__1::__tree<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> >::destroy(std::__1::__tree_node<SpvExecutionMode_, void*>*)
std::__1::__tree<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> >::destroy(std::__1::__tree_node<SpvExecutionModel_, void*>*)
std::__1::__tree<egl::Image*, std::__1::less<egl::Image*>, std::__1::allocator<egl::Image*> >::destroy(std::__1::__tree_node<egl::Image*, void*>*)
std::__1::__tree<egl::ImageSibling*, std::__1::less<egl::ImageSibling*>, std::__1::allocator<egl::ImageSibling*> >::destroy(std::__1::__tree_node<egl::ImageSibling*, void*>*)
std::__1::__tree<egl::Stream*, std::__1::less<egl::Stream*>, std::__1::allocator<egl::Stream*> >::destroy(std::__1::__tree_node<egl::Stream*, void*>*)
std::__1::__tree<egl::Surface*, std::__1::less<egl::Surface*>, std::__1::allocator<egl::Surface*> >::destroy(std::__1::__tree_node<egl::Surface*, void*>*)
std::__1::__tree<egl::Sync*, std::__1::less<egl::Sync*>, std::__1::allocator<egl::Sync*> >::destroy(std::__1::__tree_node<egl::Sync*, void*>*)
std::__1::__tree<gl::BufferID, std::__1::less<gl::BufferID>, std::__1::allocator<gl::BufferID> >::destroy(std::__1::__tree_node<gl::BufferID, void*>*)
std::__1::__tree<gl::Context*, std::__1::less<gl::Context*>, std::__1::allocator<gl::Context*> >::destroy(std::__1::__tree_node<gl::Context*, void*>*)
std::__1::__tree<gl::Texture*, std::__1::less<gl::Texture*>, std::__1::allocator<gl::Texture*> >::destroy(std::__1::__tree_node<gl::Texture*, void*>*)
std::__1::__tree<glslang::HlslParseContext::tInterstageIoData, std::__1::less<glslang::HlslParseContext::tInterstageIoData>, std::__1::allocator<glslang::HlslParseContext::tInterstageIoData> >::destroy(std::__1::__tree_node<glslang::HlslParseContext::tInterstageIoData, void*>*)
std::__1::__tree<int, std::__1::less<int>, std::__1::allocator<int> >::destroy(std::__1::__tree_node<int, void*>*)
std::__1::__tree<rx::vk::ImageHelper*, std::__1::less<rx::vk::ImageHelper*>, std::__1::allocator<rx::vk::ImageHelper*> >::destroy(std::__1::__tree_node<rx::vk::ImageHelper*, void*>*)
std::__1::__tree<sh::CallDAG::CallDAGCreator::CreatorFunctionData*, std::__1::less<sh::CallDAG::CallDAGCreator::CreatorFunctionData*>, std::__1::allocator<sh::CallDAG::CallDAGCreator::CreatorFunctionData*> >::destroy(std::__1::__tree_node<sh::CallDAG::CallDAGCreator::CreatorFunctionData*, void*>*)
std::__1::__tree<sh::EmulatePrecision::TypePair, sh::EmulatePrecision::TypePairComparator, std::__1::allocator<sh::EmulatePrecision::TypePair> >::destroy(std::__1::__tree_node<sh::EmulatePrecision::TypePair, void*>*)
std::__1::__tree<sh::ImmutableString, std::__1::less<sh::ImmutableString>, std::__1::allocator<sh::ImmutableString> >::destroy(std::__1::__tree_node<sh::ImmutableString, void*>*)
std::__1::__tree<sh::TIntermBlock const*, std::__1::less<sh::TIntermBlock const*>, std::__1::allocator<sh::TIntermBlock const*> >::destroy(std::__1::__tree_node<sh::TIntermBlock const*, void*>*)
std::__1::__tree<spv::Capability, std::__1::less<spv::Capability>, std::__1::allocator<spv::Capability> >::destroy(std::__1::__tree_node<spv::Capability, void*>*)
std::__1::__tree<spvtools::val::BasicBlock*, spvtools::val::less_than_id, std::__1::allocator<spvtools::val::BasicBlock*> >::destroy(std::__1::__tree_node<spvtools::val::BasicBlock*, void*>*)
std::__1::__tree<std::__1::__value_type<gl::BufferID, bool>, std::__1::__map_value_compare<gl::BufferID, std::__1::__value_type<gl::BufferID, bool>, std::__1::less<gl::BufferID>, true>, std::__1::allocator<std::__1::__value_type<gl::BufferID, bool> > >::destroy(std::__1::__tree_node<std::__1::__value_type<gl::BufferID, bool>, void*>*)
std::__1::__tree<std::__1::__value_type<gl::BufferID, std::__1::pair<long, long> >, std::__1::__map_value_compare<gl::BufferID, std::__1::__value_type<gl::BufferID, std::__1::pair<long, long> >, std::__1::less<gl::BufferID>, true>, std::__1::allocator<std::__1::__value_type<gl::BufferID, std::__1::pair<long, long> > > >::destroy(std::__1::__tree_node<std::__1::__value_type<gl::BufferID, std::__1::pair<long, long> >, void*>*)
std::__1::__tree<std::__1::__value_type<gl::BufferID, std::__1::vector<angle::CallCapture, std::__1::allocator<angle::CallCapture> > >, std::__1::__map_value_compare<gl::BufferID, std::__1::__value_type<gl::BufferID, std::__1::vector<angle::CallCapture, std::__1::allocator<angle::CallCapture> > >, std::__1::less<gl::BufferID>, true>, std::__1::allocator<std::__1::__value_type<gl::BufferID, std::__1::vector<angle::CallCapture, std::__1::allocator<angle::CallCapture> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<gl::BufferID, std::__1::vector<angle::CallCapture, std::__1::allocator<angle::CallCapture> > >, void*>*)
std::__1::__tree<std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange>, std::__1::__map_value_compare<gl::IndexRangeCache::IndexRangeKey, std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange>, std::__1::less<gl::IndexRangeCache::IndexRangeKey>, true>, std::__1::allocator<std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange> > >::destroy(std::__1::__tree_node<std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange>, void*>*)
std::__1::__tree<std::__1::__value_type<gl::ShaderProgramID, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> >, std::__1::__map_value_compare<gl::ShaderProgramID, std::__1::__value_type<gl::ShaderProgramID, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> >, std::__1::less<gl::ShaderProgramID>, true>, std::__1::allocator<std::__1::__value_type<gl::ShaderProgramID, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> > > >::destroy(std::__1::__tree_node<std::__1::__value_type<gl::ShaderProgramID, angle::PackedEnumMap<gl::ShaderType, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, 4ul> >, void*>*)
std::__1::__tree<std::__1::__value_type<gl::ShaderProgramID, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__map_value_compare<gl::ShaderProgramID, std::__1::__value_type<gl::ShaderProgramID, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::less<gl::ShaderProgramID>, true>, std::__1::allocator<std::__1::__value_type<gl::ShaderProgramID, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<gl::ShaderProgramID, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*)
std::__1::__tree<std::__1::__value_type<gl::TextureID, std::__1::map<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > > >, std::__1::__map_value_compare<gl::TextureID, std::__1::__value_type<gl::TextureID, std::__1::map<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > > >, std::__1::less<gl::TextureID>, true>, std::__1::allocator<std::__1::__value_type<gl::TextureID, std::__1::map<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<gl::TextureID, std::__1::map<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > > >, void*>*)
std::__1::__tree<std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*>, std::__1::__map_value_compare<glslang::HlslParseContext::tInterstageIoData, std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*>, std::__1::less<glslang::HlslParseContext::tInterstageIoData>, true>, glslang::pool_allocator<std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*>, void*>*)
std::__1::__tree<std::__1::__value_type<glslang::TBuiltInVariable, glslang::TSymbol*>, std::__1::__map_value_compare<glslang::TBuiltInVariable, std::__1::__value_type<glslang::TBuiltInVariable, glslang::TSymbol*>, std::__1::less<glslang::TBuiltInVariable>, true>, glslang::pool_allocator<std::__1::__value_type<glslang::TBuiltInVariable, glslang::TSymbol*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<glslang::TBuiltInVariable, glslang::TSymbol*>, void*>*)
std::__1::__tree<std::__1::__value_type<glslang::TType const*, unsigned int>, std::__1::__map_value_compare<glslang::TType const*, std::__1::__value_type<glslang::TType const*, unsigned int>, std::__1::less<glslang::TType const*>, true>, std::__1::allocator<std::__1::__value_type<glslang::TType const*, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<glslang::TType const*, unsigned int>, void*>*)
std::__1::__tree<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, glslang::HlslParseContext::tIoKinds>, std::__1::__map_value_compare<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, glslang::HlslParseContext::tIoKinds>, std::__1::less<glslang::TVector<glslang::TTypeLoc> const*>, true>, glslang::pool_allocator<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, glslang::HlslParseContext::tIoKinds> > >::destroy(std::__1::__tree_node<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, glslang::HlslParseContext::tIoKinds>, void*>*)
std::__1::__tree<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, std::__1::map<unsigned long, glslang::TVector<glslang::TTypeLoc> const*, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<unsigned long const, glslang::TVector<glslang::TTypeLoc> const*> > > >, std::__1::__map_value_compare<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, std::__1::map<unsigned long, glslang::TVector<glslang::TTypeLoc> const*, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<unsigned long const, glslang::TVector<glslang::TTypeLoc> const*> > > >, std::__1::less<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, std::__1::map<unsigned long, glslang::TVector<glslang::TTypeLoc> const*, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<unsigned long const, glslang::TVector<glslang::TTypeLoc> const*> > > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc> const*, std::__1::map<unsigned long, glslang::TVector<glslang::TTypeLoc> const*, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<unsigned long const, glslang::TVector<glslang::TTypeLoc> const*> > > >, void*>*)
std::__1::__tree<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*>, std::__1::__map_value_compare<glslang::TVector<glslang::TTypeLoc>*, std::__1::__value_type<glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*>, std::__1::less<glslang::TVector<glslang::TTypeLoc>*>, true>, glslang::pool_allocator<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<glslang::TVector<glslang::TTypeLoc>*, glslang::TVector<glslang::TTypeLoc>*>, void*>*)
std::__1::__tree<std::__1::__value_type<int, egl::Config>, std::__1::__map_value_compare<int, std::__1::__value_type<int, egl::Config>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, egl::Config> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, egl::Config>, void*>*)
std::__1::__tree<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::less<int>, true>, glslang::pool_allocator<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, void*>*)
std::__1::__tree<std::__1::__value_type<int, glslang::HlslParseContext::tShadowTextureSymbols*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, glslang::HlslParseContext::tShadowTextureSymbols*>, std::__1::less<int>, true>, glslang::pool_allocator<std::__1::__value_type<int, glslang::HlslParseContext::tShadowTextureSymbols*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, glslang::HlslParseContext::tShadowTextureSymbols*>, void*>*)
std::__1::__tree<std::__1::__value_type<int, glslang::TPpContext::MacroSymbol>, std::__1::__map_value_compare<int, std::__1::__value_type<int, glslang::TPpContext::MacroSymbol>, std::__1::less<int>, true>, glslang::pool_allocator<std::__1::__value_type<int, glslang::TPpContext::MacroSymbol> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, glslang::TPpContext::MacroSymbol>, void*>*)
std::__1::__tree<std::__1::__value_type<int, glslang::TVariable*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, glslang::TVariable*>, std::__1::less<int>, true>, glslang::pool_allocator<std::__1::__value_type<int, glslang::TVariable*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, glslang::TVariable*>, void*>*)
std::__1::__tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, int>, void*>*)
std::__1::__tree<std::__1::__value_type<int, sh::CallDAG::CallDAGCreator::CreatorFunctionData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, sh::CallDAG::CallDAGCreator::CreatorFunctionData>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, sh::CallDAG::CallDAGCreator::CreatorFunctionData> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, sh::CallDAG::CallDAGCreator::CreatorFunctionData>, void*>*)
std::__1::__tree<std::__1::__value_type<int, sh::TIntermSymbol const*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, sh::TIntermSymbol const*>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, sh::TIntermSymbol const*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, sh::TIntermSymbol const*>, void*>*)
std::__1::__tree<std::__1::__value_type<int, sh::TParseContext::AtomicCounterBindingState>, std::__1::__map_value_compare<int, std::__1::__value_type<int, sh::TParseContext::AtomicCounterBindingState>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, sh::TParseContext::AtomicCounterBindingState> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, sh::TParseContext::AtomicCounterBindingState>, void*>*)
std::__1::__tree<std::__1::__value_type<int, sh::TSymbolTable::VariableMetadata>, std::__1::__map_value_compare<int, std::__1::__value_type<int, sh::TSymbolTable::VariableMetadata>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, sh::TSymbolTable::VariableMetadata> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, sh::TSymbolTable::VariableMetadata>, void*>*)
std::__1::__tree<std::__1::__value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*)
std::__1::__tree<std::__1::__value_type<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > >, void*>*)
std::__1::__tree<std::__1::__value_type<int, unsigned int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, unsigned int>, void*>*)
std::__1::__tree<std::__1::__value_type<int, unsigned long>, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned long>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, unsigned long> > >::__insert_node_at(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
std::__1::__tree<std::__1::__value_type<int, unsigned long>, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned long>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, unsigned long> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, unsigned long>, void*>*)
std::__1::__tree<std::__1::__value_type<int, void*>, std::__1::__map_value_compare<int, std::__1::__value_type<int, void*>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, void*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<int, void*>, void*>*)
std::__1::__tree<std::__1::__value_type<long, long>, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, long> > >::__insert_node_at(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
std::__1::__tree<std::__1::__value_type<long, long>, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, long> > >::destroy(std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*)
std::__1::__tree<std::__1::__value_type<sh::ImmutableString, sh::TFunction const*>, std::__1::__map_value_compare<sh::ImmutableString, std::__1::__value_type<sh::ImmutableString, sh::TFunction const*>, std::__1::less<sh::ImmutableString>, true>, pool_allocator<std::__1::__value_type<sh::ImmutableString, sh::TFunction const*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<sh::ImmutableString, sh::TFunction const*>, void*>*)
std::__1::__tree<std::__1::__value_type<sh::ImmutableString, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > > >, std::__1::__map_value_compare<sh::ImmutableString, std::__1::__value_type<sh::ImmutableString, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > > >, std::__1::less<sh::ImmutableString>, true>, std::__1::allocator<std::__1::__value_type<sh::ImmutableString, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<sh::ImmutableString, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > > >, void*>*)
std::__1::__tree<std::__1::__value_type<sh::TBasicType, sh::TPrecision>, std::__1::__map_value_compare<sh::TBasicType, std::__1::__value_type<sh::TBasicType, sh::TPrecision>, std::__1::less<sh::TBasicType>, true>, pool_allocator<std::__1::__value_type<sh::TBasicType, sh::TPrecision> > >::destroy(std::__1::__tree_node<std::__1::__value_type<sh::TBasicType, sh::TPrecision>, void*>*)
std::__1::__tree<std::__1::__value_type<sh::TExtension, sh::TBehavior>, std::__1::__map_value_compare<sh::TExtension, std::__1::__value_type<sh::TExtension, sh::TBehavior>, std::__1::less<sh::TExtension>, true>, std::__1::allocator<std::__1::__value_type<sh::TExtension, sh::TBehavior> > >::destroy(std::__1::__tree_node<std::__1::__value_type<sh::TExtension, sh::TBehavior>, void*>*)
std::__1::__tree<std::__1::__value_type<sh::TIntermNode*, sh::TIntermNode*>, std::__1::__map_value_compare<sh::TIntermNode*, std::__1::__value_type<sh::TIntermNode*, sh::TIntermNode*>, std::__1::less<sh::TIntermNode*>, true>, std::__1::allocator<std::__1::__value_type<sh::TIntermNode*, sh::TIntermNode*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<sh::TIntermNode*, sh::TIntermNode*>, void*>*)
std::__1::__tree<std::__1::__value_type<sh::TType, sh::TFunction*>, std::__1::__map_value_compare<sh::TType, std::__1::__value_type<sh::TType, sh::TFunction*>, std::__1::less<sh::TType>, true>, std::__1::allocator<std::__1::__value_type<sh::TType, sh::TFunction*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<sh::TType, sh::TFunction*>, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::__map_value_compare<spvtools::opt::BasicBlock const*, std::__1::__value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::less<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > > > >::__insert_node_at(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::__map_value_compare<spvtools::opt::BasicBlock const*, std::__1::__value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::less<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::ConstantFoldingRules::Key, spvtools::opt::ConstantFoldingRules::Value>, std::__1::__map_value_compare<spvtools::opt::ConstantFoldingRules::Key, std::__1::__value_type<spvtools::opt::ConstantFoldingRules::Key, spvtools::opt::ConstantFoldingRules::Value>, std::__1::less<spvtools::opt::ConstantFoldingRules::Key>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::ConstantFoldingRules::Key, spvtools::opt::ConstantFoldingRules::Value> > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::ConstantFoldingRules::Key, spvtools::opt::ConstantFoldingRules::Value>, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::FoldingRules::Key, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::__map_value_compare<spvtools::opt::FoldingRules::Key, std::__1::__value_type<spvtools::opt::FoldingRules::Key, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::less<spvtools::opt::FoldingRules::Key>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::FoldingRules::Key, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::FoldingRules::Key, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis>, std::__1::__map_value_compare<spvtools::opt::Function const*, std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis>, std::__1::less<spvtools::opt::Function const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis> > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis>, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis>, std::__1::__map_value_compare<spvtools::opt::Function const*, std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis>, std::__1::less<spvtools::opt::Function const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis> > >::erase(std::__1::__tree_const_iterator<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis>, std::__1::__tree_node<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::DominatorAnalysis>, void*>*, long>)
std::__1::__tree<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::PostDominatorAnalysis>, std::__1::__map_value_compare<spvtools::opt::Function const*, std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::PostDominatorAnalysis>, std::__1::less<spvtools::opt::Function const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::PostDominatorAnalysis> > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::Function const*, spvtools::opt::PostDominatorAnalysis>, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::Instruction const*, spvtools::opt::SENode*>, std::__1::__map_value_compare<spvtools::opt::Instruction const*, std::__1::__value_type<spvtools::opt::Instruction const*, spvtools::opt::SENode*>, std::__1::less<spvtools::opt::Instruction const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::Instruction const*, spvtools::opt::SENode*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::Instruction const*, spvtools::opt::SENode*>, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::Loop const*, spvtools::opt::Loop const*>, std::__1::__map_value_compare<spvtools::opt::Loop const*, std::__1::__value_type<spvtools::opt::Loop const*, spvtools::opt::Loop const*>, std::__1::less<spvtools::opt::Loop const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::Loop const*, spvtools::opt::Loop const*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::Loop const*, spvtools::opt::Loop const*>, void*>*)
std::__1::__tree<std::__1::__value_type<spvtools::opt::analysis::Constant const*, unsigned int>, std::__1::__map_value_compare<spvtools::opt::analysis::Constant const*, std::__1::__value_type<spvtools::opt::analysis::Constant const*, unsigned int>, std::__1::less<spvtools::opt::analysis::Constant const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::analysis::Constant const*, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<spvtools::opt::analysis::Constant const*, unsigned int>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable*>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> > > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> > > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> > > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> > > >::erase(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, void*>*, long>)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > >::__insert_node_at(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*)
std::__1::__tree<std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram>, std::__1::__map_value_compare<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram>, std::__1::less<std::__1::tuple<gl::TextureType, unsigned int, unsigned int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, gl::VariableLocation>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, gl::VariableLocation>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, gl::VariableLocation> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, gl::VariableLocation>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, spvtools::opt::BasicBlock*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, spvtools::opt::BasicBlock*>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, spvtools::opt::Instruction*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, spvtools::opt::Instruction*>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, std::__1::list<std::__1::function<spv_result_t (spvtools::val::Instruction const&)>, std::__1::allocator<std::__1::function<spv_result_t (spvtools::val::Instruction const&)> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::list<std::__1::function<spv_result_t (spvtools::val::Instruction const&)>, std::__1::allocator<std::__1::function<spv_result_t (spvtools::val::Instruction const&)> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::list<std::__1::function<spv_result_t (spvtools::val::Instruction const&)>, std::__1::allocator<std::__1::function<spv_result_t (spvtools::val::Instruction const&)> > > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::list<std::__1::function<spv_result_t (spvtools::val::Instruction const&)>, std::__1::allocator<std::__1::function<spv_result_t (spvtools::val::Instruction const&)> > > >, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, std::__1::vector<spvtools::val::Decoration, std::__1::allocator<spvtools::val::Decoration> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<spvtools::val::Decoration, std::__1::allocator<spvtools::val::Decoration> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<spvtools::val::Decoration, std::__1::allocator<spvtools::val::Decoration> > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<spvtools::val::Decoration, std::__1::allocator<spvtools::val::Decoration> > >, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > > > >::__insert_node_at(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > > > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void*>*)
std::__1::__tree<std::__1::__value_type<unsigned long, glslang::TVector<glslang::TTypeLoc> const*>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, glslang::TVector<glslang::TTypeLoc> const*>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, glslang::TVector<glslang::TTypeLoc> const*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<unsigned long, glslang::TVector<glslang::TTypeLoc> const*>, void*>*)
std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, void*>*)
std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__insert_node_at(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__insert_unique(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*)
std::__1::__tree<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >::destroy(std::__1::__tree_node<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, void*>*)
std::__1::__tree<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, spvtools::opt::analysis::UserEntryLess, std::__1::allocator<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*> > >::destroy(std::__1::__tree_node<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, void*>*)
std::__1::__tree<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, std::__1::less<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> >, std::__1::allocator<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*> > >::destroy(std::__1::__tree_node<std::__1::pair<spvtools::opt::analysis::Pointer const*, spvtools::opt::analysis::Pointer const*>, void*>*)
std::__1::__tree<std::__1::tuple<SpvDecoration_, unsigned int, unsigned int>, std::__1::less<std::__1::tuple<SpvDecoration_, unsigned int, unsigned int> >, std::__1::allocator<std::__1::tuple<SpvDecoration_, unsigned int, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::tuple<SpvDecoration_, unsigned int, unsigned int>, void*>*)
std::__1::__tree<std::__1::tuple<SpvDecoration_, unsigned int>, std::__1::less<std::__1::tuple<SpvDecoration_, unsigned int> >, std::__1::allocator<std::__1::tuple<SpvDecoration_, unsigned int> > >::destroy(std::__1::__tree_node<std::__1::tuple<SpvDecoration_, unsigned int>, void*>*)
std::__1::__tree<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::less<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >::destroy(std::__1::__tree_node<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, void*>*)
std::__1::__tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::__insert_node_at(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*)
std::__1::__tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::destroy(std::__1::__tree_node<unsigned int, void*>*)
std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, void*>*, long> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
std::__1::__tree_iterator<std::__1::__value_type<sh::TType, sh::TFunction*>, std::__1::__tree_node<std::__1::__value_type<sh::TType, sh::TFunction*>, void*>*, long> std::__1::__tree<std::__1::__value_type<sh::TType, sh::TFunction*>, std::__1::__map_value_compare<sh::TType, std::__1::__value_type<sh::TType, sh::TFunction*>, std::__1::less<sh::TType>, true>, std::__1::allocator<std::__1::__value_type<sh::TType, sh::TFunction*> > >::find<sh::TType>(sh::TType const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > > >::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, glslang::TExtensionBehavior> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, glslang::TExtensionBehavior> const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, glslang::TExtensionBehavior> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, glslang::TExtensionBehavior> const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, void*>*, long> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&>(std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*, long> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<int, unsigned long>, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned long>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, unsigned long> > >::__find_equal<int>(std::__1::__tree_const_iterator<std::__1::__value_type<int, unsigned long>, std::__1::__tree_node<std::__1::__value_type<int, unsigned long>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, int const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<long, long>, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, long> > >::__find_equal<long>(std::__1::__tree_const_iterator<std::__1::__value_type<long, long>, std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, long const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<sh::TType, sh::TFunction*>, std::__1::__map_value_compare<sh::TType, std::__1::__value_type<sh::TType, sh::TFunction*>, std::__1::less<sh::TType>, true>, std::__1::allocator<std::__1::__value_type<sh::TType, sh::TFunction*> > >::__find_equal<sh::TType>(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, sh::TType const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TExtensionBehavior> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, unsigned int> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, angle::Feature*> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ExtensionInfo> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::__find_equal<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<angle::pp::Macro> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > > > >::__find_equal<unsigned int>(std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, unsigned int const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned int> > >::__find_equal<unsigned int>(std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, unsigned int const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::__tree_const_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::__tree_node_base<void*>*& std::__1::__tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::__find_equal<unsigned int>(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, unsigned int const&)
std::__1::__tuple_impl<std::__1::__tuple_indices<0ul, 1ul, 2ul, 3ul>, std::__1::unordered_multimap<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, glslang::TIntermOperator*> > >, std::__1::unordered_map<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<glslang::TIntermTyped*>, std::__1::equal_to<glslang::TIntermTyped*>, std::__1::allocator<std::__1::pair<glslang::TIntermTyped* const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, std::__1::unordered_set<glslang::TIntermBranch*, std::__1::hash<glslang::TIntermBranch*>, std::__1::equal_to<glslang::TIntermBranch*>, std::__1::allocator<glslang::TIntermBranch*> > >::~__tuple_impl()
std::__1::__vector_base<std::__1::pair<spvtools::opt::Loop*, std::__1::unique_ptr<spvtools::opt::Loop, std::__1::default_delete<spvtools::opt::Loop> > >, std::__1::allocator<std::__1::pair<spvtools::opt::Loop*, std::__1::unique_ptr<spvtools::opt::Loop, std::__1::default_delete<spvtools::opt::Loop> > > > >::clear()
std::__1::__vector_base_common<true>::__throw_length_error() const
std::__1::__vector_base_common<true>::__throw_out_of_range() const
std::__1::__wcerr
std::__1::__wcin
std::__1::__wcout
std::__1::__widen_from_utf8<16ul>::~__widen_from_utf8()
std::__1::__widen_from_utf8<32ul>::~__widen_from_utf8()
std::__1::__wrap_iter<sh::TIntermNode**> std::__1::remove_if<std::__1::__wrap_iter<sh::TIntermNode**>, sh::TCompiler::UnusedPredicate>(std::__1::__wrap_iter<sh::TIntermNode**>, std::__1::__wrap_iter<sh::TIntermNode**>, sh::TCompiler::UnusedPredicate)
std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> std::__1::__rotate_forward<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>)
std::__1::align(unsigned long, unsigned long, void*&, unsigned long&)
std::__1::allocator_traits<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<sh::TStructure const*, sh::(anonymous namespace)::StructConversionData>, void*>*>*> >::allocate(std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<sh::TStructure const*, sh::(anonymous namespace)::StructConversionData>, void*>*>*>&, unsigned long)
std::__1::array<angle::Mat4, 16ul>::array()
std::__1::array<angle::Mat4, 16ul>::~array()
std::__1::array<rx::impl::ImagePresentHistory, 3ul>::~array()
std::__1::array<rx::vk::BindingPointer<rx::vk::PipelineLayout>, 12ul>::~array()
std::__1::array<rx::vk::DynamicBuffer, 16ul>::array()
std::__1::array<rx::vk::DynamicBuffer, 16ul>::~array()
std::__1::array<rx::vk::PipelineBarrier, 14ul>::~array()
std::__1::array<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul>::array(std::__1::array<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul> const&)
std::__1::array<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> > >, 4ul>::~array()
std::__1::array<std::__1::vector<rx::StateManagerGL::IndexedBufferBinding, std::__1::allocator<rx::StateManagerGL::IndexedBufferBinding> >, 12ul>::~array()
std::__1::array<std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >, 4ul>::~array()
std::__1::array<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, 4ul>::~array()
std::__1::back_insert_iterator<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > > std::__1::__widen_from_utf8<32ul>::operator()<std::__1::back_insert_iterator<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > > >(std::__1::back_insert_iterator<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > >, char const*, char const*) const
std::__1::back_insert_iterator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >::operator=(unsigned int&&)
std::__1::basic_ios<char, std::__1::char_traits<char> >::~basic_ios()
std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ios()
std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()
std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<double, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, double&)
std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic<unsigned int, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, unsigned int&)
std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::__input_arithmetic_with_numeric_limits<int, char, std::__1::char_traits<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, int&)
std::__1::basic_istream<char, std::__1::char_traits<char> >& std::__1::getline<char, std::__1::char_traits<char>, std::__1::allocator<char> >(std::__1::basic_istream<char, std::__1::char_traits<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, char)
std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(double&)
std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(int&)
std::__1::basic_istream<char, std::__1::char_traits<char> >::operator>>(unsigned int&)
std::__1::basic_istream<char, std::__1::char_traits<char> >::sentry::sentry(std::__1::basic_istream<char, std::__1::char_traits<char> >&, bool)
std::__1::basic_istream<char, std::__1::char_traits<char> >::~basic_istream()
std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_istream()
std::__1::basic_istringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_istringstream()
std::__1::basic_ostream<char, std::__1::char_traits<char> >& gl::priv::FmtHex<8, int>(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, int)
std::__1::basic_ostream<char, std::__1::char_traits<char> >& gl::priv::FmtHex<8, unsigned int>(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, unsigned int)
std::__1::basic_ostream<char, std::__1::char_traits<char> >& spvtools::utils::operator<< <spvtools::utils::FloatProxy<double>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<double> > >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, spvtools::utils::HexFloat<spvtools::utils::FloatProxy<double>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<double> > > const&)
std::__1::basic_ostream<char, std::__1::char_traits<char> >& spvtools::utils::operator<< <spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > > const&)
std::__1::basic_ostream<char, std::__1::char_traits<char> >& spvtools::utils::operator<< <spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > > const&)
std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::flush()
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(bool)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(double)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(float)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(int)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(long)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(short)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(unsigned int)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(unsigned long)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::operator<<(unsigned short)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::put(char)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry::sentry(std::__1::basic_ostream<char, std::__1::char_traits<char> >&)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry::~sentry()
std::__1::basic_ostream<char, std::__1::char_traits<char> >::write(char const*, long)
std::__1::basic_ostream<char, std::__1::char_traits<char> >::~basic_ostream()
std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::flush()
std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::sentry::~sentry()
std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ostream()
std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > sh::InitializeStream<std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > >()
std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_ostringstream()
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::basic_streambuf()
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::imbue(std::__1::locale const&)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::overflow(int)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::pbackfail(int)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::seekoff(long long, std::__1::ios_base::seekdir, unsigned int)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::setbuf(char*, long)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::showmanyc()
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sync()
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::uflow()
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::underflow()
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::xsgetn(char*, long)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::xsputn(char const*, long)
std::__1::basic_streambuf<char, std::__1::char_traits<char> >::~basic_streambuf()
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::basic_streambuf()
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::imbue(std::__1::locale const&)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::overflow(unsigned int)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::pbackfail(unsigned int)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::seekoff(long long, std::__1::ios_base::seekdir, unsigned int)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::setbuf(wchar_t*, long)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::showmanyc()
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::sync()
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::uflow()
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::underflow()
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::xsgetn(wchar_t*, long)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::xsputn(wchar_t const*, long)
std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >::~basic_streambuf()
std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > glslang::TIntermediate::addCounterBufferName<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&) const
std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > std::__1::operator+<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > std::__1::operator+<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, char)
std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::append(char const*, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::assign(char const*, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >::insert(unsigned long, char const*, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, char const*)
std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::append(char const*)
std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::operator+=(std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> > const&)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ToString<int>(int const&)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const* std::__1::__scan_keyword<std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*, std::__1::ctype<char> >(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*, std::__1::ctype<char> const&, unsigned int&, bool)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > glslang::TIntermediate::addCounterBufferName<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > spvtools::utils::ToString<unsigned long>(unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::__function::__policy_invoker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> >(std::__1::__function::__policy_storage const*)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::__function::__policy_invoker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::FriendlyNameMapper::GetNameMapper()::{lambda(unsigned int)#1}, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::__function::__policy_invoker<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (*)(unsigned int), std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > std::__1::operator+<char, std::__1::char_traits<char>, std::__1::allocator<char> >(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >& std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__append_forward_unsafe<char const*>(char const*, char const*)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >& std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__append_forward_unsafe<char*>(char*, char*)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init(unsigned long, char)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append(char const*)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append(char const*, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append(unsigned long, char)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::assign(char const*)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::assign(char const*, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::assign(unsigned long, char)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long, unsigned long, std::__1::allocator<char> const&)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::compare(char const*) const
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::compare(unsigned long, unsigned long, char const*) const
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::compare(unsigned long, unsigned long, char const*, unsigned long) const
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::erase(unsigned long, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::find(char, unsigned long) const
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::insert(unsigned long, char const*)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::insert(unsigned long, char const*, unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator=(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::push_back(char)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::reserve(unsigned long)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::resize(unsigned long, char)
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::rfind(char, unsigned long) const
std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_string()
std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const* std::__1::__scan_keyword<std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const*, std::__1::ctype<wchar_t> >(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const*, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const*, std::__1::ctype<wchar_t> const&, unsigned int&, bool)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >& std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__append_forward_unsafe<wchar_t*>(wchar_t*, wchar_t*)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__grow_by_and_replace(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, wchar_t const*)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::append(wchar_t const*, unsigned long)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::assign(wchar_t const*)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::basic_string<decltype(nullptr)>(wchar_t const*)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::push_back(wchar_t)
std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::~basic_string()
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::overflow(int)
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::pbackfail(int)
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::seekoff(long long, std::__1::ios_base::seekdir, unsigned int)
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::seekpos(std::__1::fpos<__mbstate_t>, unsigned int)
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::str() const
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::str(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::underflow()
std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringbuf()
std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > sh::InitializeStream<std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > >()
std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()
std::__1::cerr
std::__1::chrono::steady_clock::now()
std::__1::chrono::system_clock::now()
std::__1::cin
std::__1::clog
std::__1::codecvt<char, char, __mbstate_t>::do_always_noconv() const
std::__1::codecvt<char, char, __mbstate_t>::do_encoding() const
std::__1::codecvt<char, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const
std::__1::codecvt<char, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
std::__1::codecvt<char, char, __mbstate_t>::do_max_length() const
std::__1::codecvt<char, char, __mbstate_t>::do_out(__mbstate_t&, char const*, char const*, char const*&, char*, char*, char*&) const
std::__1::codecvt<char, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
std::__1::codecvt<char, char, __mbstate_t>::id
std::__1::codecvt<char, char, __mbstate_t>::~codecvt()
std::__1::codecvt<char16_t, char, __mbstate_t>::do_always_noconv() const
std::__1::codecvt<char16_t, char, __mbstate_t>::do_encoding() const
std::__1::codecvt<char16_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char16_t*, char16_t*, char16_t*&) const
std::__1::codecvt<char16_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
std::__1::codecvt<char16_t, char, __mbstate_t>::do_max_length() const
std::__1::codecvt<char16_t, char, __mbstate_t>::do_out(__mbstate_t&, char16_t const*, char16_t const*, char16_t const*&, char*, char*, char*&) const
std::__1::codecvt<char16_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
std::__1::codecvt<char16_t, char, __mbstate_t>::id
std::__1::codecvt<char16_t, char, __mbstate_t>::~codecvt()
std::__1::codecvt<char32_t, char, __mbstate_t>::do_always_noconv() const
std::__1::codecvt<char32_t, char, __mbstate_t>::do_encoding() const
std::__1::codecvt<char32_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const
std::__1::codecvt<char32_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
std::__1::codecvt<char32_t, char, __mbstate_t>::do_max_length() const
std::__1::codecvt<char32_t, char, __mbstate_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const
std::__1::codecvt<char32_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
std::__1::codecvt<char32_t, char, __mbstate_t>::id
std::__1::codecvt<char32_t, char, __mbstate_t>::~codecvt()
std::__1::codecvt<wchar_t, char, __mbstate_t>::do_always_noconv() const
std::__1::codecvt<wchar_t, char, __mbstate_t>::do_encoding() const
std::__1::codecvt<wchar_t, char, __mbstate_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
std::__1::codecvt<wchar_t, char, __mbstate_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
std::__1::codecvt<wchar_t, char, __mbstate_t>::do_max_length() const
std::__1::codecvt<wchar_t, char, __mbstate_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
std::__1::codecvt<wchar_t, char, __mbstate_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
std::__1::codecvt<wchar_t, char, __mbstate_t>::id
std::__1::codecvt<wchar_t, char, __mbstate_t>::~codecvt()
std::__1::collate<char>::do_compare(char const*, char const*, char const*, char const*) const
std::__1::collate<char>::do_hash(char const*, char const*) const
std::__1::collate<char>::do_transform(char const*, char const*) const
std::__1::collate<char>::id
std::__1::collate<char>::~collate()
std::__1::collate<wchar_t>::do_compare(wchar_t const*, wchar_t const*, wchar_t const*, wchar_t const*) const
std::__1::collate<wchar_t>::do_hash(wchar_t const*, wchar_t const*) const
std::__1::collate<wchar_t>::do_transform(wchar_t const*, wchar_t const*) const
std::__1::collate<wchar_t>::id
std::__1::collate<wchar_t>::~collate()
std::__1::condition_variable::__do_timed_wait(std::__1::unique_lock<std::__1::mutex>&, std::__1::chrono::time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000000l> > >)
std::__1::condition_variable::notify_all()
std::__1::condition_variable::notify_one()
std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&)
std::__1::condition_variable::~condition_variable()
std::__1::cout
std::__1::ctype<char>::do_narrow(char const*, char const*, char, char*) const
std::__1::ctype<char>::do_narrow(char, char) const
std::__1::ctype<char>::do_tolower(char) const
std::__1::ctype<char>::do_tolower(char*, char const*) const
std::__1::ctype<char>::do_toupper(char) const
std::__1::ctype<char>::do_toupper(char*, char const*) const
std::__1::ctype<char>::do_widen(char const*, char const*, char*) const
std::__1::ctype<char>::do_widen(char) const
std::__1::ctype<char>::id
std::__1::ctype<char>::~ctype()
std::__1::ctype<wchar_t>::do_is(unsigned short, wchar_t) const
std::__1::ctype<wchar_t>::do_is(wchar_t const*, wchar_t const*, unsigned short*) const
std::__1::ctype<wchar_t>::do_narrow(wchar_t const*, wchar_t const*, char, char*) const
std::__1::ctype<wchar_t>::do_narrow(wchar_t, char) const
std::__1::ctype<wchar_t>::do_scan_is(unsigned short, wchar_t const*, wchar_t const*) const
std::__1::ctype<wchar_t>::do_scan_not(unsigned short, wchar_t const*, wchar_t const*) const
std::__1::ctype<wchar_t>::do_tolower(wchar_t) const
std::__1::ctype<wchar_t>::do_tolower(wchar_t*, wchar_t const*) const
std::__1::ctype<wchar_t>::do_toupper(wchar_t) const
std::__1::ctype<wchar_t>::do_toupper(wchar_t*, wchar_t const*) const
std::__1::ctype<wchar_t>::do_widen(char const*, char const*, wchar_t*) const
std::__1::ctype<wchar_t>::do_widen(char) const
std::__1::ctype<wchar_t>::id
std::__1::ctype<wchar_t>::~ctype()
std::__1::cv
std::__1::cv_status std::__1::condition_variable::wait_for<long long, std::__1::ratio<1l, 1000000000l> >(std::__1::unique_lock<std::__1::mutex>&, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000000l> > const&)
std::__1::default_delete<spvtools::opt::BasicBlock>::operator()(spvtools::opt::BasicBlock*) const
std::__1::default_delete<spvtools::opt::LivenessAnalysis>::operator()(spvtools::opt::LivenessAnalysis*) const
std::__1::default_delete<spvtools::opt::ScalarEvolutionAnalysis>::operator()(spvtools::opt::ScalarEvolutionAnalysis*) const
std::__1::default_delete<spvtools::opt::ValueNumberTable>::operator()(spvtools::opt::ValueNumberTable*) const
std::__1::default_delete<spvtools::opt::analysis::DecorationManager>::operator()(spvtools::opt::analysis::DecorationManager*) const
std::__1::default_delete<spvtools::opt::analysis::DefUseManager>::operator()(spvtools::opt::analysis::DefUseManager*) const
std::__1::deque<bool, std::__1::allocator<bool> >::__add_back_capacity()
std::__1::deque<gl::Debug::Message, std::__1::allocator<gl::Debug::Message> >::__add_back_capacity()
std::__1::deque<glslang::TShader::Includer::IncludeResult*, std::__1::allocator<glslang::TShader::Includer::IncludeResult*> >::__add_back_capacity()
std::__1::deque<rx::RendererVk::PendingOneOffCommands, std::__1::allocator<rx::RendererVk::PendingOneOffCommands> >::__add_back_capacity()
std::__1::deque<rx::vk::CommandBufferHelper*, std::__1::allocator<rx::vk::CommandBufferHelper*> >::__add_back_capacity()
std::__1::deque<rx::vk::CommandProcessorTask, std::__1::allocator<rx::vk::CommandProcessorTask> >::__add_back_capacity()
std::__1::deque<spv::Block*, std::__1::allocator<spv::Block*> >::__add_back_capacity()
std::__1::deque<spv::Builder::LoopBlocks, std::__1::allocator<spv::Builder::LoopBlocks> >::__add_back_capacity()
std::__1::deque<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >::__add_back_capacity()
std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >::__add_back_capacity()
std::__1::deque<spvtools::opt::SSARewriter::PhiCandidate*, std::__1::allocator<spvtools::opt::SSARewriter::PhiCandidate*> >::__add_back_capacity()
std::__1::deque<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >, std::__1::allocator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > > >::__add_back_capacity()
std::__1::deque<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >, std::__1::allocator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > > >::__add_back_capacity(unsigned long)
std::__1::deque<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> > > >::__add_back_capacity()
std::__1::deque<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> >, std::__1::allocator<std::__1::pair<std::__1::shared_ptr<angle::AsyncWaitableEvent>, std::__1::shared_ptr<angle::Closure> > > >::pop_front()
std::__1::deque<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > > > >::__add_back_capacity()
std::__1::deque<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > >, std::__1::allocator<std::__1::unordered_map<sh::TIntermNode const*, sh::TIntermTyped*, std::__1::hash<sh::TIntermNode const*>, std::__1::equal_to<sh::TIntermNode const*>, std::__1::allocator<std::__1::pair<sh::TIntermNode const* const, sh::TIntermTyped*> > > > >::pop_back()
std::__1::deque<unsigned int, std::__1::allocator<unsigned int> >::__add_back_capacity()
std::__1::enable_if<!(false), spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false> >::type spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>::InsertBefore<false>(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*)
std::__1::enable_if<__is_forward_iterator<TIntermNode**>::value&&is_constructible<TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::assign<TIntermNode**>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<VkDescriptorPoolSize const*>::value&&is_constructible<VkDescriptorPoolSize, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<VkDescriptorPoolSize, std::__1::allocator<VkDescriptorPoolSize> >::assign<VkDescriptorPoolSize const*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<char const*>::value&&is_constructible<char, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<char*> >::type std::__1::vector<char, std::__1::allocator<char> >::insert<char const*>(std::__1::iterator_traits<char const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<char*>::value, void>::type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__init<char*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<float*>::value&&is_constructible<float, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<float, std::__1::allocator<float> >::assign<float*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<gl::TransformFeedbackVarying*>::value&&is_constructible<gl::TransformFeedbackVarying, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<gl::TransformFeedbackVarying, std::__1::allocator<gl::TransformFeedbackVarying> >::assign<gl::TransformFeedbackVarying*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<glslang::TArraySize*>::value&&is_constructible<glslang::TArraySize, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> >::assign<glslang::TArraySize*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<glslang::TPpContext::TokenStream::Token*>::value&&is_constructible<glslang::TPpContext::TokenStream::Token, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<glslang::TPpContext::TokenStream::Token, glslang::pool_allocator<glslang::TPpContext::TokenStream::Token> >::assign<glslang::TPpContext::TokenStream::Token*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<int*>::value&&is_constructible<int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<int, glslang::pool_allocator<int> >::assign<int*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<int*>::value&&is_constructible<int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<int, pool_allocator<int> >::assign<int*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<int*>::value&&is_constructible<int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<int, std::__1::allocator<int> >::assign<int*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<sh::InterfaceBlock*>::value&&is_constructible<sh::InterfaceBlock, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >::assign<sh::InterfaceBlock*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<sh::ShaderVariable*>::value&&is_constructible<sh::ShaderVariable, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >::assign<sh::ShaderVariable*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<sh::TIntermNode**>::value&&is_constructible<sh::TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<sh::TIntermNode**> >::type std::__1::vector<sh::TIntermNode*, pool_allocator<sh::TIntermNode*> >::insert<sh::TIntermNode**>(std::__1::iterator_traits<sh::TIntermNode* const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<sh::TIntermNode**>::value&&is_constructible<sh::TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<sh::TIntermNode*, pool_allocator<sh::TIntermNode*> >::assign<sh::TIntermNode**>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::opt::Instruction* const*>::value&&is_constructible<spvtools::opt::Instruction*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >::assign<spvtools::opt::Instruction* const*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::opt::Instruction*>::value&&is_constructible<spvtools::opt::Instruction, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::opt::Instruction, std::__1::allocator<spvtools::opt::Instruction> >::assign<spvtools::opt::Instruction*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::opt::Operand*>::value&&is_constructible<spvtools::opt::Operand, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::assign<spvtools::opt::Operand*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::opt::analysis::Constant const**>::value&&is_constructible<spvtools::opt::analysis::Constant const*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> >::assign<spvtools::opt::analysis::Constant const**>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::val::BasicBlock* const*>::value&&is_constructible<spvtools::val::BasicBlock*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> >::assign<spvtools::val::BasicBlock* const*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::val::BasicBlock**>::value&&is_constructible<spvtools::val::BasicBlock*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> >::assign<spvtools::val::BasicBlock**>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::val::Construct**>::value&&is_constructible<spvtools::val::Construct*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::val::Construct*, std::__1::allocator<spvtools::val::Construct*> >::assign<spvtools::val::Construct**>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<spvtools::val::Instruction**>::value&&is_constructible<spvtools::val::Instruction*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> >::assign<spvtools::val::Instruction**>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0ul> >::value, void>::type std::__1::vector<bool, std::__1::allocator<bool> >::__construct_at_end<std::__1::__bit_iterator<std::__1::vector<bool, std::__1::allocator<bool> >, false, 0ul> >(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<TIntermNode* const*> >::value&&is_constructible<TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<TIntermNode**> >::type std::__1::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::insert<std::__1::__wrap_iter<TIntermNode* const*> >(std::__1::__wrap_iter<TIntermNode* const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<VkImageMemoryBarrier*> >::value&&is_constructible<VkImageMemoryBarrier, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<VkImageMemoryBarrier*> >::type std::__1::vector<VkImageMemoryBarrier, std::__1::allocator<VkImageMemoryBarrier> >::insert<std::__1::__wrap_iter<VkImageMemoryBarrier*> >(std::__1::__wrap_iter<VkImageMemoryBarrier const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<angle::pp::Token const*> >::value&&is_constructible<angle::pp::Token, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<angle::pp::Token*> >::type std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >::insert<std::__1::__wrap_iter<angle::pp::Token const*> >(std::__1::__wrap_iter<angle::pp::Token const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<angle::pp::Token const*> >::value&&is_constructible<angle::pp::Token, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >::assign<std::__1::__wrap_iter<angle::pp::Token const*> >(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<gl::LinkedUniform*> >::value&&is_constructible<gl::LinkedUniform, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<gl::LinkedUniform*> >::type std::__1::vector<gl::LinkedUniform, std::__1::allocator<gl::LinkedUniform> >::insert<std::__1::__wrap_iter<gl::LinkedUniform*> >(std::__1::__wrap_iter<gl::LinkedUniform const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<gl::UnusedUniform*> >::value&&is_constructible<gl::UnusedUniform, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<gl::UnusedUniform*> >::type std::__1::vector<gl::UnusedUniform, std::__1::allocator<gl::UnusedUniform> >::insert<std::__1::__wrap_iter<gl::UnusedUniform*> >(std::__1::__wrap_iter<gl::UnusedUniform const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<glslang::TArraySize*> >::value&&is_constructible<glslang::TArraySize, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<glslang::TArraySize*> >::type std::__1::vector<glslang::TArraySize, glslang::pool_allocator<glslang::TArraySize> >::insert<std::__1::__wrap_iter<glslang::TArraySize*> >(std::__1::__wrap_iter<glslang::TArraySize const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<glslang::TIntermTyped* const*> >::value&&is_constructible<TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<TIntermNode**> >::type std::__1::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::insert<std::__1::__wrap_iter<glslang::TIntermTyped* const*> >(std::__1::__wrap_iter<TIntermNode* const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<sh::InterfaceBlock*> >::value&&is_constructible<sh::InterfaceBlock, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<sh::InterfaceBlock*> >::type std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >::insert<std::__1::__wrap_iter<sh::InterfaceBlock*> >(std::__1::__wrap_iter<sh::InterfaceBlock const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<sh::TIntermNode* const*> >::value&&is_constructible<sh::TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<sh::TIntermNode**> >::type std::__1::vector<sh::TIntermNode*, pool_allocator<sh::TIntermNode*> >::insert<std::__1::__wrap_iter<sh::TIntermNode* const*> >(std::__1::__wrap_iter<sh::TIntermNode* const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<sh::TIntermNode**> >::value&&is_constructible<sh::TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<sh::TIntermNode**> >::type std::__1::vector<sh::TIntermNode*, pool_allocator<sh::TIntermNode*> >::insert<std::__1::__wrap_iter<sh::TIntermNode**> >(std::__1::__wrap_iter<sh::TIntermNode* const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<spv::IdImmediate*> >::value&&is_constructible<spv::IdImmediate, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<spv::IdImmediate*> >::type std::__1::vector<spv::IdImmediate, std::__1::allocator<spv::IdImmediate> >::insert<std::__1::__wrap_iter<spv::IdImmediate*> >(std::__1::__wrap_iter<spv::IdImmediate const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<spvtools::opt::Instruction*> >::value&&is_constructible<spvtools::opt::Instruction, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<spvtools::opt::Instruction*> >::type std::__1::vector<spvtools::opt::Instruction, std::__1::allocator<spvtools::opt::Instruction> >::insert<std::__1::__wrap_iter<spvtools::opt::Instruction*> >(std::__1::__wrap_iter<spvtools::opt::Instruction const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<spvtools::opt::Operand const*> >::value&&is_constructible<spvtools::opt::Operand, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<spvtools::opt::Operand*> >::type std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::insert<std::__1::__wrap_iter<spvtools::opt::Operand const*> >(std::__1::__wrap_iter<spvtools::opt::Operand const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<spvtools::opt::Operand*> >::value&&is_constructible<spvtools::opt::Operand, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<spvtools::opt::Operand*> >::type std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::insert<std::__1::__wrap_iter<spvtools::opt::Operand*> >(std::__1::__wrap_iter<spvtools::opt::Operand const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<spvtools::opt::analysis::Constant const* const*> >::value&&is_constructible<spvtools::opt::analysis::Constant const*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<spvtools::opt::analysis::Constant const**> >::type std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> >::insert<std::__1::__wrap_iter<spvtools::opt::analysis::Constant const* const*> >(std::__1::__wrap_iter<spvtools::opt::analysis::Constant const* const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<spvtools::val::BasicBlock* const*> >::value&&is_constructible<spvtools::val::BasicBlock*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<spvtools::val::BasicBlock**> >::type std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> >::insert<std::__1::__wrap_iter<spvtools::val::BasicBlock* const*> >(std::__1::__wrap_iter<spvtools::val::BasicBlock* const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<spvtools::val::Decoration*> >::value&&is_constructible<spvtools::val::Decoration, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<spvtools::val::Decoration*> >::type std::__1::vector<spvtools::val::Decoration, std::__1::allocator<spvtools::val::Decoration> >::insert<std::__1::__wrap_iter<spvtools::val::Decoration*> >(std::__1::__wrap_iter<spvtools::val::Decoration const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*> >::value&&is_constructible<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*> >::type std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::insert<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*> >(std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<unsigned int const*> >::value&&is_constructible<unsigned int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<unsigned int*> >::type std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::insert<std::__1::__wrap_iter<unsigned int const*> >(std::__1::__wrap_iter<unsigned int const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<unsigned int const*> >::value&&is_constructible<unsigned int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::assign<std::__1::__wrap_iter<unsigned int const*> >(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<unsigned int*> >::value&&is_constructible<unsigned int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<unsigned int*> >::type std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::insert<std::__1::__wrap_iter<unsigned int*> >(std::__1::__wrap_iter<unsigned int const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::__wrap_iter<unsigned long const*> >::value&&is_constructible<unsigned long, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<unsigned long*> >::type std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >::insert<std::__1::__wrap_iter<unsigned long const*> >(std::__1::__wrap_iter<unsigned long const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>::value&&is_constructible<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::assign<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::move_iterator<std::__1::__wrap_iter<TIntermNode**> > >::value&&is_constructible<TIntermNode*, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::assign<std::__1::move_iterator<std::__1::__wrap_iter<TIntermNode**> > >(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>*>::value&&is_constructible<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > >::assign<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*>::value&&is_constructible<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, std::__1::allocator<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > > >::assign<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<unsigned int const*>::value&&is_constructible<unsigned int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<unsigned int*> >::type std::__1::vector<unsigned int, pool_allocator<unsigned int> >::insert<unsigned int const*>(std::__1::iterator_traits<unsigned int const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<unsigned int const*>::value&&is_constructible<unsigned int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, std::__1::__wrap_iter<unsigned int*> >::type std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::insert<unsigned int const*>(std::__1::iterator_traits<unsigned int const*>, __is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<unsigned int const*>::value&&is_constructible<unsigned int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::assign<unsigned int const*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<unsigned int*>::value&&is_constructible<unsigned int, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::assign<unsigned int*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__is_forward_iterator<unsigned long*>::value&&is_constructible<unsigned long, std::__1::iterator_traits<__is_forward_iterator>::reference>::value, void>::type std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >::assign<unsigned long*>(__is_forward_iterator, __is_forward_iterator)
std::__1::enable_if<__tuple_assignable<std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&> >::value, std::__1::__tuple_impl<std::__1::__tuple_indices<0ul, 1ul, 2ul>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&>&>::type std::__1::__tuple_impl<std::__1::__tuple_indices<0ul, 1ul, 2ul>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&>::operator=<std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >(__tuple_assignable&&)
std::__1::enable_if<is_move_constructible<gl::PackedVarying>::value&&is_move_assignable<is_move_constructible>::value, void>::type std::__1::swap<gl::PackedVarying>(is_move_constructible&, is_move_assignable)
std::__1::error_category::default_error_condition(int) const
std::__1::error_category::equivalent(int, std::__1::error_condition const&) const
std::__1::error_category::equivalent(std::__1::error_code const&, int) const
std::__1::error_category::~error_category()
std::__1::error_code::message() const
std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::~function()
std::__1::future<void>::future(std::__1::__assoc_sub_state*)
std::__1::future<void>::~future()
std::__1::future_category()::__f
std::__1::future_error::future_error(std::__1::error_code)
std::__1::future_error::~future_error()
std::__1::future_status std::__1::__assoc_sub_state::wait_until<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000000l> > >(std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1l, 1000000000l> > > const&) const
std::__1::generic_category()::s
std::__1::init_am_pm()::am_pm
std::__1::init_months()::months
std::__1::init_wam_pm()::am_pm
std::__1::init_weeks()::weeks
std::__1::init_wmonths()::months
std::__1::init_wweeks()::weeks
std::__1::insert_iterator<std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > > std::__1::__set_intersection<std::__1::__less<unsigned int, unsigned int>&, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::insert_iterator<std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > > >(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::insert_iterator<std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__less<unsigned int, unsigned int>&)
std::__1::insert_iterator<std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >::operator=(unsigned int const&)
std::__1::ios_base::Init::Init()::init_the_streams
std::__1::ios_base::clear(unsigned int)
std::__1::ios_base::failure::~failure()
std::__1::ios_base::getloc() const
std::__1::ios_base::imbue(std::__1::locale const&)
std::__1::ios_base::init(void*)
std::__1::ios_base::~ios_base()
std::__1::iostream_category()::s
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_floating_point<double>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, double&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_floating_point<float>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, float&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_floating_point<long double>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long double&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_signed<long long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long long&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_signed<long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned int>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned int&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned long long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned long>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long&) const
std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get_unsigned<unsigned short>(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned short&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_floating_point<double>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, double&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_floating_point<float>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, float&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_floating_point<long double>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long double&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_signed<long long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long long&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_signed<long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned int>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned int&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned long long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned long>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long&) const
std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get_unsigned<unsigned short>(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned short&) const
std::__1::locale::__global()
std::__1::locale::__global()::g
std::__1::locale::__imp::__imp(unsigned long)
std::__1::locale::__imp::make_classic()::buf
std::__1::locale::__imp::make_global()::buf
std::__1::locale::__imp::~__imp()
std::__1::locale::classic()
std::__1::locale::classic()::c
std::__1::locale::facet::__on_zero_shared()
std::__1::locale::facet::~facet()
std::__1::locale::id::__init()
std::__1::locale::id::__next_id
std::__1::locale::locale()
std::__1::locale::locale(std::__1::locale const&)
std::__1::locale::operator=(std::__1::locale const&)
std::__1::locale::use_facet(std::__1::locale::id&) const
std::__1::locale::~locale()
std::__1::map<sh::ImmutableString, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > >, std::__1::less<sh::ImmutableString>, std::__1::allocator<std::__1::pair<sh::ImmutableString const, std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > > > > >::operator[](sh::ImmutableString&&)
std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::pair<gl::ShaderType, sh::InterfaceBlock const*> > > >::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::pair<gl::ShaderType, sh::ShaderVariable const*> > > >::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::mb_cerr
std::__1::mb_cin
std::__1::mb_cout
std::__1::mb_wcerr
std::__1::mb_wcin
std::__1::mb_wcout
std::__1::messages<char>::do_close(long) const
std::__1::messages<char>::do_get(long, int, int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::messages<char>::do_open(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::locale const&) const
std::__1::messages<char>::id
std::__1::messages<char>::~messages()
std::__1::messages<wchar_t>::do_close(long) const
std::__1::messages<wchar_t>::do_get(long, int, int, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&) const
std::__1::messages<wchar_t>::do_open(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::locale const&) const
std::__1::messages<wchar_t>::id
std::__1::messages<wchar_t>::~messages()
std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::locale const&, unsigned int, unsigned int&, bool&, std::__1::ctype<char> const&, std::__1::unique_ptr<char, void (*)(void*)>&, char*&, char*)
std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, unsigned int&, long double&) const
std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, unsigned int&, long double&) const::__src
std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, unsigned int&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&) const
std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::id
std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~money_get()
std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::locale const&, unsigned int, unsigned int&, bool&, std::__1::ctype<wchar_t> const&, std::__1::unique_ptr<wchar_t, void (*)(void*)>&, wchar_t*&, wchar_t*)
std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, unsigned int&, long double&) const
std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, unsigned int&, long double&) const::__src
std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, unsigned int&, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >&) const
std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::id
std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~money_get()
std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, char, long double) const
std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, bool, std::__1::ios_base&, char, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::id
std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~money_put()
std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, wchar_t, long double) const
std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, bool, std::__1::ios_base&, wchar_t, std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > const&) const
std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::id
std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~money_put()
std::__1::moneypunct<char, false>::do_curr_symbol() const
std::__1::moneypunct<char, false>::do_decimal_point() const
std::__1::moneypunct<char, false>::do_frac_digits() const
std::__1::moneypunct<char, false>::do_grouping() const
std::__1::moneypunct<char, false>::do_neg_format() const
std::__1::moneypunct<char, false>::do_negative_sign() const
std::__1::moneypunct<char, false>::do_pos_format() const
std::__1::moneypunct<char, false>::do_positive_sign() const
std::__1::moneypunct<char, false>::do_thousands_sep() const
std::__1::moneypunct<char, false>::id
std::__1::moneypunct<char, false>::~moneypunct()
std::__1::moneypunct<char, true>::do_curr_symbol() const
std::__1::moneypunct<char, true>::do_decimal_point() const
std::__1::moneypunct<char, true>::do_frac_digits() const
std::__1::moneypunct<char, true>::do_grouping() const
std::__1::moneypunct<char, true>::do_neg_format() const
std::__1::moneypunct<char, true>::do_negative_sign() const
std::__1::moneypunct<char, true>::do_pos_format() const
std::__1::moneypunct<char, true>::do_positive_sign() const
std::__1::moneypunct<char, true>::do_thousands_sep() const
std::__1::moneypunct<char, true>::id
std::__1::moneypunct<char, true>::~moneypunct()
std::__1::moneypunct<wchar_t, false>::do_curr_symbol() const
std::__1::moneypunct<wchar_t, false>::do_decimal_point() const
std::__1::moneypunct<wchar_t, false>::do_frac_digits() const
std::__1::moneypunct<wchar_t, false>::do_grouping() const
std::__1::moneypunct<wchar_t, false>::do_neg_format() const
std::__1::moneypunct<wchar_t, false>::do_negative_sign() const
std::__1::moneypunct<wchar_t, false>::do_pos_format() const
std::__1::moneypunct<wchar_t, false>::do_positive_sign() const
std::__1::moneypunct<wchar_t, false>::do_thousands_sep() const
std::__1::moneypunct<wchar_t, false>::id
std::__1::moneypunct<wchar_t, false>::~moneypunct()
std::__1::moneypunct<wchar_t, true>::do_curr_symbol() const
std::__1::moneypunct<wchar_t, true>::do_decimal_point() const
std::__1::moneypunct<wchar_t, true>::do_frac_digits() const
std::__1::moneypunct<wchar_t, true>::do_grouping() const
std::__1::moneypunct<wchar_t, true>::do_neg_format() const
std::__1::moneypunct<wchar_t, true>::do_negative_sign() const
std::__1::moneypunct<wchar_t, true>::do_pos_format() const
std::__1::moneypunct<wchar_t, true>::do_positive_sign() const
std::__1::moneypunct<wchar_t, true>::do_thousands_sep() const
std::__1::moneypunct<wchar_t, true>::id
std::__1::moneypunct<wchar_t, true>::~moneypunct()
std::__1::mut
std::__1::mutex::lock()
std::__1::mutex::unlock()
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, bool&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, double&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, float&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long double&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long long&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, long&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned int&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned long&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, unsigned short&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, void*&) const
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::id
std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~num_get()
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, bool&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, double&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, float&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long double&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long long&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, long&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned int&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long long&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned long&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, unsigned short&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, void*&) const
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::id
std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~num_get()
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, bool) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, double) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, long double) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, long long) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, long) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, unsigned long long) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, unsigned long) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, void const*) const
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::id
std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~num_put()
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, bool) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, double) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, long double) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, long long) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, long) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, unsigned long long) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, unsigned long) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, void const*) const
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::id
std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~num_put()
std::__1::numpunct<char>::do_decimal_point() const
std::__1::numpunct<char>::do_falsename() const
std::__1::numpunct<char>::do_grouping() const
std::__1::numpunct<char>::do_thousands_sep() const
std::__1::numpunct<char>::do_truename() const
std::__1::numpunct<char>::id
std::__1::numpunct<char>::~numpunct()
std::__1::numpunct<wchar_t>::do_decimal_point() const
std::__1::numpunct<wchar_t>::do_falsename() const
std::__1::numpunct<wchar_t>::do_grouping() const
std::__1::numpunct<wchar_t>::do_thousands_sep() const
std::__1::numpunct<wchar_t>::do_truename() const
std::__1::numpunct<wchar_t>::id
std::__1::numpunct<wchar_t>::~numpunct()
std::__1::numpunct_byname<char>::~numpunct_byname()
std::__1::numpunct_byname<wchar_t>::~numpunct_byname()
std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > std::__1::__pad_and_output<char, std::__1::char_traits<char> >(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, char const*, char const*, char const*, std::__1::ios_base&, char)
std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > std::__1::__pad_and_output<wchar_t, std::__1::char_traits<wchar_t> >(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, wchar_t const*, wchar_t const*, wchar_t const*, std::__1::ios_base&, wchar_t)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<glslang::TIntermBranch*, void*>*>, bool> std::__1::__hash_table<glslang::TIntermBranch*, std::__1::hash<glslang::TIntermBranch*>, std::__1::equal_to<glslang::TIntermBranch*>, std::__1::allocator<glslang::TIntermBranch*> >::__emplace_unique_key_args<glslang::TIntermBranch*, glslang::TIntermBranch* const&>(glslang::TIntermBranch* const&, glslang::TIntermBranch* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<int, void*>*>, bool> std::__1::__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >::__emplace_unique_key_args<int, int const&>(int const&, int const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<int, void*>*>, bool> std::__1::__hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<int> >::__emplace_unique_key_args<int, int>(int const&, int&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<long, void*>*>, bool> std::__1::__hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >::__emplace_unique_impl<unsigned int&>(unsigned int&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<long, void*>*>, bool> std::__1::__hash_table<long, std::__1::hash<long>, std::__1::equal_to<long>, std::__1::allocator<long> >::__emplace_unique_key_args<long, long>(long const&, long&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<rx::vk::BufferHelper const*, void*>*>, bool> std::__1::__hash_table<rx::vk::BufferHelper const*, std::__1::hash<rx::vk::BufferHelper const*>, std::__1::equal_to<rx::vk::BufferHelper const*>, std::__1::allocator<rx::vk::BufferHelper const*> >::__emplace_unique_key_args<rx::vk::BufferHelper const*, rx::vk::BufferHelper const* const&>(rx::vk::BufferHelper const* const&, rx::vk::BufferHelper const* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spv::Block const*, void*>*>, bool> std::__1::__hash_table<spv::Block const*, std::__1::hash<spv::Block const*>, std::__1::equal_to<spv::Block const*>, std::__1::allocator<spv::Block const*> >::__emplace_unique_key_args<spv::Block const*, spv::Block const* const&>(spv::Block const* const&, spv::Block const* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spv::Block*, void*>*>, bool> std::__1::__hash_table<spv::Block*, std::__1::hash<spv::Block*>, std::__1::equal_to<spv::Block*>, std::__1::allocator<spv::Block*> >::__emplace_unique_key_args<spv::Block*, spv::Block* const&>(spv::Block* const&, spv::Block* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::opt::BasicBlock*, void*>*>, bool> std::__1::__hash_table<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock* const&>(spvtools::opt::BasicBlock* const&, spvtools::opt::BasicBlock* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::opt::BasicBlock*, void*>*>, bool> std::__1::__hash_table<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>(spvtools::opt::BasicBlock* const&, spvtools::opt::BasicBlock*&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::opt::Function const*, void*>*>, bool> std::__1::__hash_table<spvtools::opt::Function const*, std::__1::hash<spvtools::opt::Function const*>, std::__1::equal_to<spvtools::opt::Function const*>, std::__1::allocator<spvtools::opt::Function const*> >::__emplace_unique_key_args<spvtools::opt::Function const*, spvtools::opt::Function const* const&>(spvtools::opt::Function const* const&, spvtools::opt::Function const* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::opt::Instruction*, void*>*>, bool> std::__1::__hash_table<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >::__emplace_unique_key_args<spvtools::opt::Instruction*, spvtools::opt::Instruction* const&>(spvtools::opt::Instruction* const&, spvtools::opt::Instruction* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::opt::analysis::Constant const*, void*>*>, bool> std::__1::__hash_table<spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantHash, spvtools::opt::analysis::ConstantEqual, std::__1::allocator<spvtools::opt::analysis::Constant const*> >::__emplace_unique_key_args<spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*>(spvtools::opt::analysis::Constant const* const&, spvtools::opt::analysis::Constant const*&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::opt::analysis::Type const*, void*>*>, bool> std::__1::__hash_table<spvtools::opt::analysis::Type const*, std::__1::hash<spvtools::opt::analysis::Type const*>, std::__1::equal_to<spvtools::opt::analysis::Type const*>, std::__1::allocator<spvtools::opt::analysis::Type const*> >::__emplace_unique_key_args<spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Type const*>(spvtools::opt::analysis::Type const* const&, spvtools::opt::analysis::Type const*&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::val::BasicBlock const*, void*>*>, bool> std::__1::__hash_table<spvtools::val::BasicBlock const*, std::__1::hash<spvtools::val::BasicBlock const*>, std::__1::equal_to<spvtools::val::BasicBlock const*>, std::__1::allocator<spvtools::val::BasicBlock const*> >::__emplace_unique_key_args<spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const* const&>(spvtools::val::BasicBlock const* const&, spvtools::val::BasicBlock const* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::val::BasicBlock*, void*>*>, bool> std::__1::__hash_table<spvtools::val::BasicBlock*, std::__1::hash<spvtools::val::BasicBlock*>, std::__1::equal_to<spvtools::val::BasicBlock*>, std::__1::allocator<spvtools::val::BasicBlock*> >::__emplace_unique_key_args<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>(spvtools::val::BasicBlock* const&, spvtools::val::BasicBlock*&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<spvtools::val::Instruction*, void*>*>, bool> std::__1::__hash_table<spvtools::val::Instruction*, std::__1::hash<spvtools::val::Instruction*>, std::__1::equal_to<spvtools::val::Instruction*>, std::__1::allocator<spvtools::val::Instruction*> >::__emplace_unique_key_args<spvtools::val::Instruction*, spvtools::val::Instruction* const&>(spvtools::val::Instruction* const&, spvtools::val::Instruction* const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<char const*, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<char const*, unsigned int>, std::__1::__unordered_map_hasher<char const*, std::__1::__hash_value_type<char const*, unsigned int>, std::__1::hash<char const*>, true>, std::__1::__unordered_map_equal<char const*, std::__1::__hash_value_type<char const*, unsigned int>, std::__1::equal_to<char const*>, true>, std::__1::allocator<std::__1::__hash_value_type<char const*, unsigned int> > >::__emplace_unique_key_args<char const*, std::__1::piecewise_construct_t const&, std::__1::tuple<char const* const&>, std::__1::tuple<> >(char const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<char const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<glslang::TIntermTyped*, std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<glslang::TIntermTyped*>, true>, std::__1::__unordered_map_equal<glslang::TIntermTyped*, std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<glslang::TIntermTyped*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::__emplace_unique_key_args<glslang::TIntermTyped*, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TIntermTyped*&&>, std::__1::tuple<> >(glslang::TIntermTyped* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TIntermTyped*&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::__unordered_map_hasher<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::hash<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::__unordered_map_equal<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int> > >::__emplace_unique_key_args<glslang::TVector<glslang::TTypeLoc> const*, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TVector<glslang::TTypeLoc> const* const&>, std::__1::tuple<> >(glslang::TVector<glslang::TTypeLoc> const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TVector<glslang::TTypeLoc> const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::__unordered_map_hasher<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::hash<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::__unordered_map_equal<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int>, std::__1::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, int> > >::__emplace_unique_key_args<glslang::TVector<glslang::TTypeLoc> const*, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TVector<glslang::TTypeLoc> const*&&>, std::__1::tuple<> >(glslang::TVector<glslang::TTypeLoc> const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TVector<glslang::TTypeLoc> const*&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::__unordered_map_hasher<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::hash<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::__unordered_map_equal<glslang::TVector<glslang::TTypeLoc> const*, std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int>, std::__1::equal_to<glslang::TVector<glslang::TTypeLoc> const*>, true>, std::__1::allocator<std::__1::__hash_value_type<glslang::TVector<glslang::TTypeLoc> const*, unsigned int> > >::__emplace_unique_key_args<glslang::TVector<glslang::TTypeLoc> const*, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TVector<glslang::TTypeLoc> const* const&>, std::__1::tuple<> >(glslang::TVector<glslang::TTypeLoc> const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::TVector<glslang::TTypeLoc> const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::__emplace_unique_key_args<int, std::__1::piecewise_construct_t const&, std::__1::tuple<int&&>, std::__1::tuple<> >(int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, std::__1::vector<int, std::__1::allocator<int> > > > >::__emplace_unique_key_args<int, std::__1::piecewise_construct_t const&, std::__1::tuple<int const&>, std::__1::tuple<> >(int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<int, unsigned int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned int> > >::__emplace_unique_key_args<int, std::__1::piecewise_construct_t const&, std::__1::tuple<int const&>, std::__1::tuple<> >(int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<int, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<int, unsigned int>, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, unsigned int>, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, unsigned int> > >::__emplace_unique_key_args<int, std::__1::piecewise_construct_t const&, std::__1::tuple<int&&>, std::__1::tuple<> >(int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::__unordered_map_hasher<rx::vk::AttachmentOpsArray, std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::hash<rx::vk::AttachmentOpsArray>, true>, std::__1::__unordered_map_equal<rx::vk::AttachmentOpsArray, std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >, std::__1::equal_to<rx::vk::AttachmentOpsArray>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > >::__emplace_unique_key_args<rx::vk::AttachmentOpsArray, rx::vk::AttachmentOpsArray const&, rx::vk::ObjectAndSerial<rx::vk::RenderPass> >(rx::vk::AttachmentOpsArray const&, rx::vk::AttachmentOpsArray const&, rx::vk::ObjectAndSerial<rx::vk::RenderPass>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::__unordered_map_hasher<rx::vk::DescriptorSetLayoutDesc, std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::hash<rx::vk::DescriptorSetLayoutDesc>, true>, std::__1::__unordered_map_equal<rx::vk::DescriptorSetLayoutDesc, std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >, std::__1::equal_to<rx::vk::DescriptorSetLayoutDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::DescriptorSetLayoutDesc, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> > > >::__emplace_unique_key_args<rx::vk::DescriptorSetLayoutDesc, rx::vk::DescriptorSetLayoutDesc const&, rx::vk::RefCounted<rx::vk::DescriptorSetLayout> >(rx::vk::DescriptorSetLayoutDesc const&, rx::vk::DescriptorSetLayoutDesc const&, rx::vk::RefCounted<rx::vk::DescriptorSetLayout>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::__unordered_map_hasher<rx::vk::FramebufferDesc, std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::hash<rx::vk::FramebufferDesc>, true>, std::__1::__unordered_map_equal<rx::vk::FramebufferDesc, std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper>, std::__1::equal_to<rx::vk::FramebufferDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::FramebufferDesc, rx::vk::FramebufferHelper> > >::__emplace_unique_key_args<rx::vk::FramebufferDesc, std::__1::piecewise_construct_t const&, std::__1::tuple<rx::vk::FramebufferDesc const&>, std::__1::tuple<> >(rx::vk::FramebufferDesc const&, std::__1::piecewise_construct_t const&, std::__1::tuple<rx::vk::FramebufferDesc const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::__unordered_map_hasher<rx::vk::GraphicsPipelineDesc, std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::hash<rx::vk::GraphicsPipelineDesc>, true>, std::__1::__unordered_map_equal<rx::vk::GraphicsPipelineDesc, std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper>, std::__1::equal_to<rx::vk::GraphicsPipelineDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::GraphicsPipelineDesc, rx::vk::PipelineHelper> > >::__emplace_unique_key_args<rx::vk::GraphicsPipelineDesc, rx::vk::GraphicsPipelineDesc const&, rx::vk::Pipeline>(rx::vk::GraphicsPipelineDesc const&, rx::vk::GraphicsPipelineDesc const&, rx::vk::Pipeline&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::__unordered_map_hasher<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::hash<rx::vk::LayerLevel>, true>, std::__1::__unordered_map_equal<rx::vk::LayerLevel, std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial>, std::__1::equal_to<rx::vk::LayerLevel>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::LayerLevel, rx::Serial> > >::__emplace_unique_key_args<rx::vk::LayerLevel, std::__1::piecewise_construct_t const&, std::__1::tuple<rx::vk::LayerLevel const&>, std::__1::tuple<> >(rx::vk::LayerLevel const&, std::__1::piecewise_construct_t const&, std::__1::tuple<rx::vk::LayerLevel const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::__unordered_map_hasher<rx::vk::PipelineLayoutDesc, std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::hash<rx::vk::PipelineLayoutDesc>, true>, std::__1::__unordered_map_equal<rx::vk::PipelineLayoutDesc, std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> >, std::__1::equal_to<rx::vk::PipelineLayoutDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::PipelineLayoutDesc, rx::vk::RefCounted<rx::vk::PipelineLayout> > > >::__emplace_unique_key_args<rx::vk::PipelineLayoutDesc, rx::vk::PipelineLayoutDesc const&, rx::vk::RefCounted<rx::vk::PipelineLayout> >(rx::vk::PipelineLayoutDesc const&, rx::vk::PipelineLayoutDesc const&, rx::vk::RefCounted<rx::vk::PipelineLayout>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::__unordered_map_hasher<rx::vk::RenderPassDesc, std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::hash<rx::vk::RenderPassDesc>, true>, std::__1::__unordered_map_equal<rx::vk::RenderPassDesc, std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >, std::__1::equal_to<rx::vk::RenderPassDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::RenderPassDesc, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > > > >::__emplace_unique_key_args<rx::vk::RenderPassDesc, rx::vk::RenderPassDesc const&, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > > >(rx::vk::RenderPassDesc const&, rx::vk::RenderPassDesc const&, std::__1::unordered_map<rx::vk::AttachmentOpsArray, rx::vk::ObjectAndSerial<rx::vk::RenderPass>, std::__1::hash<rx::vk::AttachmentOpsArray>, std::__1::equal_to<rx::vk::AttachmentOpsArray>, std::__1::allocator<std::__1::pair<rx::vk::AttachmentOpsArray const, rx::vk::ObjectAndSerial<rx::vk::RenderPass> > > >&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::__unordered_map_hasher<rx::vk::SamplerDesc, std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::hash<rx::vk::SamplerDesc>, true>, std::__1::__unordered_map_equal<rx::vk::SamplerDesc, std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> >, std::__1::equal_to<rx::vk::SamplerDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::SamplerDesc, rx::vk::RefCounted<rx::vk::Sampler> > > >::__emplace_unique_key_args<rx::vk::SamplerDesc, rx::vk::SamplerDesc const&, rx::vk::RefCounted<rx::vk::Sampler> >(rx::vk::SamplerDesc const&, rx::vk::SamplerDesc const&, rx::vk::RefCounted<rx::vk::Sampler>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::__unordered_map_hasher<rx::vk::TextureDescriptorDesc, std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::hash<rx::vk::TextureDescriptorDesc>, true>, std::__1::__unordered_map_equal<rx::vk::TextureDescriptorDesc, std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*>, std::__1::equal_to<rx::vk::TextureDescriptorDesc>, true>, std::__1::allocator<std::__1::__hash_value_type<rx::vk::TextureDescriptorDesc, VkDescriptorSet_T*> > >::__emplace_unique_key_args<rx::vk::TextureDescriptorDesc, rx::vk::TextureDescriptorDesc const&, VkDescriptorSet_T*&>(rx::vk::TextureDescriptorDesc const&, rx::vk::TextureDescriptorDesc const&, VkDescriptorSet_T*&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::__unordered_map_hasher<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, sh::ImmutableString::FowlerNollVoHash<8ul>, true>, std::__1::__unordered_map_equal<sh::ImmutableString, std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*>, std::__1::equal_to<sh::ImmutableString>, true>, pool_allocator<std::__1::__hash_value_type<sh::ImmutableString, sh::TSymbol*> > >::__emplace_unique_key_args<sh::ImmutableString, std::__1::pair<sh::ImmutableString const, sh::TSymbol*> const&>(sh::ImmutableString const&, std::__1::pair<sh::ImmutableString const, sh::TSymbol*> const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::TField const*, bool>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::__unordered_map_hasher<sh::TField const*, std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::hash<sh::TField const*>, true>, std::__1::__unordered_map_equal<sh::TField const*, std::__1::__hash_value_type<sh::TField const*, bool>, std::__1::equal_to<sh::TField const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TField const*, bool> > >::__emplace_unique_key_args<sh::TField const*, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TField const* const&>, std::__1::tuple<> >(sh::TField const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TField const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::__unordered_map_hasher<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::hash<sh::TFunction const*>, true>, std::__1::__unordered_map_equal<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*>, std::__1::equal_to<sh::TFunction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction const*> > >::__emplace_unique_key_args<sh::TFunction const*, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TFunction const* const&>, std::__1::tuple<> >(sh::TFunction const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TFunction const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::__unordered_map_hasher<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::hash<sh::TFunction const*>, true>, std::__1::__unordered_map_equal<sh::TFunction const*, std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*>, std::__1::equal_to<sh::TFunction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TFunction const*, sh::TFunction*> > >::__emplace_unique_key_args<sh::TFunction const*, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TFunction const* const&>, std::__1::tuple<> >(sh::TFunction const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TFunction const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::__unordered_map_hasher<sh::TIntermNode const*, std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::hash<sh::TIntermNode const*>, true>, std::__1::__unordered_map_equal<sh::TIntermNode const*, std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*>, std::__1::equal_to<sh::TIntermNode const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TIntermNode const*, sh::TIntermTyped*> > >::__emplace_unique_key_args<sh::TIntermNode const*, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TIntermNode const* const&>, std::__1::tuple<> >(sh::TIntermNode const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TIntermNode const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*>, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable const*> > >::__emplace_unique_key_args<sh::TVariable const*, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TVariable const* const&>, std::__1::tuple<> >(sh::TVariable const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TVariable const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*>, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, sh::TVariable*> > >::__emplace_unique_key_args<sh::TVariable const*, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TVariable const* const&>, std::__1::tuple<> >(sh::TVariable const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TVariable const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::__unordered_map_hasher<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::hash<sh::TVariable const*>, true>, std::__1::__unordered_map_equal<sh::TVariable const*, std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::equal_to<sh::TVariable const*>, true>, std::__1::allocator<std::__1::__hash_value_type<sh::TVariable const*, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > > > >::__emplace_unique_key_args<sh::TVariable const*, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TVariable const* const&>, std::__1::tuple<> >(sh::TVariable const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TVariable const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spv::Block*, spv::Block*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::__unordered_map_hasher<spv::Block*, std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::hash<spv::Block*>, true>, std::__1::__unordered_map_equal<spv::Block*, std::__1::__hash_value_type<spv::Block*, spv::Block*>, std::__1::equal_to<spv::Block*>, true>, std::__1::allocator<std::__1::__hash_value_type<spv::Block*, spv::Block*> > >::__emplace_unique_key_args<spv::Block*, std::__1::piecewise_construct_t const&, std::__1::tuple<spv::Block* const&>, std::__1::tuple<> >(spv::Block* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spv::Block* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::hash<spvtools::opt::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail>, std::__1::equal_to<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::block_detail> > >::__emplace_unique_key_args<spvtools::opt::BasicBlock const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock const* const&>, std::__1::tuple<> >(spvtools::opt::BasicBlock const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::hash<spvtools::opt::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::equal_to<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > > > >::__emplace_unique_key_args<spvtools::opt::BasicBlock const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock const* const&>, std::__1::tuple<> >(spvtools::opt::BasicBlock const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::hash<spvtools::opt::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock const*, std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > >, std::__1::equal_to<spvtools::opt::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock const*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > > > >::__emplace_unique_key_args<spvtools::opt::BasicBlock const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock const*&&>, std::__1::tuple<> >(spvtools::opt::BasicBlock const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock const*&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>, std::__1::tuple<> >(spvtools::opt::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*> > >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>, std::__1::tuple<> >(spvtools::opt::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, spvtools::opt::Instruction*> > >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock*&&>, std::__1::tuple<> >(spvtools::opt::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock*&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> > > > >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>, std::__1::tuple<> >(spvtools::opt::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > >, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > > > >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>, std::__1::tuple<> >(spvtools::opt::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::hash<spvtools::opt::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::opt::BasicBlock*, std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int>, std::__1::equal_to<spvtools::opt::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::BasicBlock*, unsigned int> > >::__emplace_unique_key_args<spvtools::opt::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>, std::__1::tuple<> >(spvtools::opt::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::__unordered_map_hasher<spvtools::opt::Function const*, std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::hash<spvtools::opt::Function const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Function const*, std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>, std::__1::equal_to<spvtools::opt::Function const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor> > >::__emplace_unique_key_args<spvtools::opt::Function const*, std::__1::pair<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor> >(spvtools::opt::Function const* const&, std::__1::pair<spvtools::opt::Function const*, spvtools::opt::LoopDescriptor>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::Instruction const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::Instruction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::__emplace_unique_key_args<spvtools::opt::Instruction const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction const* const&>, std::__1::tuple<> >(spvtools::opt::Instruction const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::hash<spvtools::opt::Instruction*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::Instruction*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::BasicBlock*> > >::__emplace_unique_key_args<spvtools::opt::Instruction*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction* const&>, std::__1::tuple<> >(spvtools::opt::Instruction* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::hash<spvtools::opt::Instruction*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction*, std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction*, spvtools::opt::Instruction*> > >::__emplace_unique_key_args<spvtools::opt::Instruction*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction* const&>, std::__1::tuple<> >(spvtools::opt::Instruction* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::Instruction, std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, spvtools::opt::ValueTableHash, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction, std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int>, spvtools::opt::ComputeSameValue, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction, unsigned int> > >::__emplace_unique_key_args<spvtools::opt::Instruction, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction const&>, std::__1::tuple<> >(spvtools::opt::Instruction const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::Instruction const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::HashTypePointer, true>, std::__1::__unordered_map_equal<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::CompareTypePointers, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int> > >::__emplace_unique_key_args<spvtools::opt::analysis::Type const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::analysis::Type const* const&>, std::__1::tuple<> >(spvtools::opt::analysis::Type const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::analysis::Type const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, std::__1::__unordered_map_hasher<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::HashTypePointer, true>, std::__1::__unordered_map_equal<spvtools::opt::analysis::Type const*, std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int>, spvtools::opt::analysis::CompareTypePointers, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::analysis::Type const*, unsigned int> > >::__emplace_unique_key_args<spvtools::opt::analysis::Type const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::analysis::Type const*&&>, std::__1::tuple<> >(spvtools::opt::analysis::Type const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::opt::analysis::Type const*&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::hash<spvtools::val::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail>, std::__1::equal_to<spvtools::val::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::block_detail> > >::__emplace_unique_key_args<spvtools::val::BasicBlock const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock const* const&>, std::__1::tuple<> >(spvtools::val::BasicBlock const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::hash<spvtools::val::BasicBlock const*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock const*, std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::equal_to<spvtools::val::BasicBlock const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock const*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >::__emplace_unique_key_args<spvtools::val::BasicBlock const*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock const* const&>, std::__1::tuple<> >(spvtools::val::BasicBlock const* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock const* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, int>, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, int> > >::__emplace_unique_key_args<spvtools::val::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock* const&>, std::__1::tuple<> >(spvtools::val::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> > >::__emplace_unique_key_args<spvtools::val::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock* const&>, std::__1::tuple<> >(spvtools::val::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> > >::__emplace_unique_key_args<spvtools::val::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock*&&>, std::__1::tuple<> >(spvtools::val::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock*&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >::__emplace_unique_key_args<spvtools::val::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock* const&>, std::__1::tuple<> >(spvtools::val::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock* const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::__unordered_map_hasher<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::hash<spvtools::val::BasicBlock*>, true>, std::__1::__unordered_map_equal<spvtools::val::BasicBlock*, std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > >, std::__1::equal_to<spvtools::val::BasicBlock*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::val::BasicBlock*, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > > > >::__emplace_unique_key_args<spvtools::val::BasicBlock*, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock*&&>, std::__1::tuple<> >(spvtools::val::BasicBlock* const&, std::__1::piecewise_construct_t const&, std::__1::tuple<spvtools::val::BasicBlock*&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::__unordered_map_hasher<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::hash<std::__1::__thread_id>, true>, std::__1::__unordered_map_equal<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > >, std::__1::equal_to<std::__1::__thread_id>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::__thread_id, std::__1::unique_ptr<rx::WorkerContext, std::__1::default_delete<rx::WorkerContext> > > > >::__emplace_unique_key_args<std::__1::__thread_id, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::__thread_id const&>, std::__1::tuple<> >(std::__1::__thread_id const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::__thread_id const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::__unordered_map_hasher<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::hash<std::__1::array<unsigned char, 20ul> >, true>, std::__1::__unordered_map_equal<std::__1::array<unsigned char, 20ul>, std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >, std::__1::equal_to<std::__1::array<unsigned char, 20ul> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::array<unsigned char, 20ul>, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> > > >::__emplace_unique_key_args<std::__1::array<unsigned char, 20ul>, std::__1::array<unsigned char, 20ul> const&, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*> >(std::__1::array<unsigned char, 20ul> const&, std::__1::array<unsigned char, 20ul> const&, std::__1::__list_iterator<std::__1::pair<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize>, void*>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, gl::ProgramBinding> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, void*>*>, std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, void*>*> > std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermOperator*> > >::__equal_range_multi<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TIntermSymbol const*> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, rx::ShaderInterfaceVariableInfo> const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, rx::ShaderInterfaceVariableInfo> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::ShaderVariable const*> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, spv::Function*> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::vector<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*>, std::__1::allocator<std::__1::pair<sh::InterfaceBlock const*, sh::ShaderVariable const*> > > > > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned int> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, std::__1::__unordered_map_hasher<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, spvtools::val::bb_constr_type_pair_hash, true>, std::__1::__unordered_map_equal<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*>, std::__1::equal_to<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, spvtools::val::Construct*> > >::__emplace_unique_key_args<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>&&>, std::__1::tuple<> >(std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::pair<spvtools::val::BasicBlock const*, spvtools::val::ConstructType>&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, bool>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, bool>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, bool>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, bool> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Buffer*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Buffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Buffer*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::FenceNV*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::FenceNV*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Framebuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Framebuffer*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::InternalFormat> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::InternalFormat>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::InternalFormat> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::MemoryObject*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::MemoryObject*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Program*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Program*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Program*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::ProgramPipeline*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Query*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Query*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Query*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Renderbuffer*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Sampler*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sampler*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sampler*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Semaphore*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Semaphore*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Shader*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Shader*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Shader*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Sync*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Sync*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Sync*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::Texture*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::Texture*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::Texture*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::TransformFeedback*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, gl::VertexArray*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, gl::VertexArray*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spv_ext_inst_type_t> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::BasicBlock*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::ConstantFoldingRules::Value> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Function*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction const*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int, spvtools::opt::Loop*> >(unsigned int const&, std::__1::pair<unsigned int, spvtools::opt::Loop*>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Loop*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::SSARewriter::PhiCandidate> > >::__emplace_unique_key_args<unsigned int, unsigned int&, spvtools::opt::SSARewriter::PhiCandidate>(unsigned int const&, unsigned int&, spvtools::opt::SSARewriter::PhiCandidate&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo> >(unsigned int const&, std::__1::pair<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::StructuredCFGAnalysis::ConstructInfo> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Constant const*> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int const, spvtools::opt::analysis::Constant const*> >(unsigned int const&, std::__1::pair<unsigned int const, spvtools::opt::analysis::Constant const*>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::DecorationManager::TargetData> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int const, spvtools::utils::BitVector> const&>(unsigned int const&, std::__1::pair<unsigned int const, spvtools::utils::BitVector> const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::utils::BitVector> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int, spvtools::utils::BitVector> >(unsigned int const&, std::__1::pair<unsigned int, spvtools::utils::BitVector>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::BasicBlock> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int const, spvtools::val::BasicBlock> >(unsigned int const&, std::__1::pair<unsigned int const, spvtools::val::BasicBlock>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Function*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::Function*> > >::__emplace_unique_key_args<unsigned int, unsigned int&, spvtools::val::Function*>(unsigned int const&, unsigned int&, spvtools::val::Function*&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::val::Instruction*> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int, spvtools::val::Instruction*> >(unsigned int const&, std::__1::pair<unsigned int, spvtools::val::Instruction*>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionMode_, std::__1::less<SpvExecutionMode_>, std::__1::allocator<SpvExecutionMode_> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::set<SpvExecutionModel_, std::__1::less<SpvExecutionModel_>, std::__1::allocator<SpvExecutionModel_> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_map<unsigned int, gl::InternalFormat, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, gl::InternalFormat> > > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unordered_set<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::Instruction*, std::__1::allocator<spvtools::val::Instruction*> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int, unsigned int> >(unsigned int const&, std::__1::pair<unsigned int, unsigned int>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >::__emplace_unique_key_args<unsigned int, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>, std::__1::tuple<> >(unsigned int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<unsigned int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>, bool> std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void*>*>, bool> std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> >, void*>*>, bool> std::__1::__hash_table<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> >, spvtools::opt::SENodeHash, spvtools::opt::ScalarEvolutionAnalysis::NodePointersEquality, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> > > >::__emplace_unique_key_args<std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> >, std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> > >(std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> > const&, std::__1::unique_ptr<spvtools::opt::SENode, std::__1::default_delete<spvtools::opt::SENode> >&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> >, void*>*>, bool> std::__1::__hash_table<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> >, spvtools::opt::analysis::HashTypeUniquePointer, spvtools::opt::analysis::CompareTypeUniquePointers, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> > > >::__emplace_unique_key_args<std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> >, std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> > >(std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> > const&, std::__1::unique_ptr<spvtools::opt::analysis::Type, std::__1::default_delete<spvtools::opt::analysis::Type> >&&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<unsigned int, void*>*>, bool> std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__emplace_unique_key_args<unsigned int, unsigned int const&>(unsigned int const&, unsigned int const&)
std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<unsigned int, void*>*>, bool> std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__emplace_unique_key_args<unsigned int, unsigned int>(unsigned int const&, unsigned int&&)
std::__1::pair<std::__1::__tree_iterator<glslang::HlslParseContext::tInterstageIoData, std::__1::__tree_node<glslang::HlslParseContext::tInterstageIoData, void*>*, long>, bool> std::__1::__tree<glslang::HlslParseContext::tInterstageIoData, std::__1::less<glslang::HlslParseContext::tInterstageIoData>, std::__1::allocator<glslang::HlslParseContext::tInterstageIoData> >::__emplace_unique_key_args<glslang::HlslParseContext::tInterstageIoData, glslang::HlslParseContext::tInterstageIoData>(glslang::HlslParseContext::tInterstageIoData const&, glslang::HlslParseContext::tInterstageIoData&&)
std::__1::pair<std::__1::__tree_iterator<sh::EmulatePrecision::TypePair, std::__1::__tree_node<sh::EmulatePrecision::TypePair, void*>*, long>, bool> std::__1::__tree<sh::EmulatePrecision::TypePair, sh::EmulatePrecision::TypePairComparator, std::__1::allocator<sh::EmulatePrecision::TypePair> >::__emplace_unique_key_args<sh::EmulatePrecision::TypePair, sh::EmulatePrecision::TypePair>(sh::EmulatePrecision::TypePair const&, sh::EmulatePrecision::TypePair&&)
std::__1::pair<std::__1::__tree_iterator<sh::ImmutableString, std::__1::__tree_node<sh::ImmutableString, void*>*, long>, bool> std::__1::__tree<sh::ImmutableString, std::__1::less<sh::ImmutableString>, std::__1::allocator<sh::ImmutableString> >::__emplace_unique_key_args<sh::ImmutableString, sh::ImmutableString>(sh::ImmutableString const&, sh::ImmutableString&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange>, std::__1::__tree_node<std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange>, std::__1::__map_value_compare<gl::IndexRangeCache::IndexRangeKey, std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange>, std::__1::less<gl::IndexRangeCache::IndexRangeKey>, true>, std::__1::allocator<std::__1::__value_type<gl::IndexRangeCache::IndexRangeKey, gl::IndexRange> > >::__emplace_unique_key_args<gl::IndexRangeCache::IndexRangeKey, std::__1::piecewise_construct_t const&, std::__1::tuple<gl::IndexRangeCache::IndexRangeKey&&>, std::__1::tuple<> >(gl::IndexRangeCache::IndexRangeKey const&, std::__1::piecewise_construct_t const&, std::__1::tuple<gl::IndexRangeCache::IndexRangeKey&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*>, std::__1::__tree_node<std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*>, std::__1::__map_value_compare<glslang::HlslParseContext::tInterstageIoData, std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*>, std::__1::less<glslang::HlslParseContext::tInterstageIoData>, true>, glslang::pool_allocator<std::__1::__value_type<glslang::HlslParseContext::tInterstageIoData, glslang::TVariable*> > >::__emplace_unique_key_args<glslang::HlslParseContext::tInterstageIoData, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::HlslParseContext::tInterstageIoData&&>, std::__1::tuple<> >(glslang::HlslParseContext::tInterstageIoData const&, std::__1::piecewise_construct_t const&, std::__1::tuple<glslang::HlslParseContext::tInterstageIoData&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::__tree_node<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::less<int>, true>, glslang::pool_allocator<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData> > >::__emplace_unique_key_args<int, std::__1::pair<int, glslang::HlslParseContext::TFlattenData> >(int const&, std::__1::pair<int, glslang::HlslParseContext::TFlattenData>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::__tree_node<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData>, std::__1::less<int>, true>, glslang::pool_allocator<std::__1::__value_type<int, glslang::HlslParseContext::TFlattenData> > >::__emplace_unique_key_args<int, std::__1::piecewise_construct_t const&, std::__1::tuple<int&&>, std::__1::tuple<> >(int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<int&&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<int, glslang::TPpContext::MacroSymbol>, std::__1::__tree_node<std::__1::__value_type<int, glslang::TPpContext::MacroSymbol>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<int, glslang::TPpContext::MacroSymbol>, std::__1::__map_value_compare<int, std::__1::__value_type<int, glslang::TPpContext::MacroSymbol>, std::__1::less<int>, true>, glslang::pool_allocator<std::__1::__value_type<int, glslang::TPpContext::MacroSymbol> > >::__emplace_unique_key_args<int, std::__1::piecewise_construct_t const&, std::__1::tuple<int const&>, std::__1::tuple<> >(int const&, std::__1::piecewise_construct_t const&, std::__1::tuple<int const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<sh::ImmutableString, sh::TFunction const*>, std::__1::__tree_node<std::__1::__value_type<sh::ImmutableString, sh::TFunction const*>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<sh::ImmutableString, sh::TFunction const*>, std::__1::__map_value_compare<sh::ImmutableString, std::__1::__value_type<sh::ImmutableString, sh::TFunction const*>, std::__1::less<sh::ImmutableString>, true>, pool_allocator<std::__1::__value_type<sh::ImmutableString, sh::TFunction const*> > >::__emplace_unique_key_args<sh::ImmutableString, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::ImmutableString const&>, std::__1::tuple<> >(sh::ImmutableString const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::ImmutableString const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<sh::TBasicType, sh::TPrecision>, std::__1::__tree_node<std::__1::__value_type<sh::TBasicType, sh::TPrecision>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<sh::TBasicType, sh::TPrecision>, std::__1::__map_value_compare<sh::TBasicType, std::__1::__value_type<sh::TBasicType, sh::TPrecision>, std::__1::less<sh::TBasicType>, true>, pool_allocator<std::__1::__value_type<sh::TBasicType, sh::TPrecision> > >::__emplace_unique_key_args<sh::TBasicType, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TBasicType const&>, std::__1::tuple<> >(sh::TBasicType const&, std::__1::piecewise_construct_t const&, std::__1::tuple<sh::TBasicType const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, bool> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::TSymbol*> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const, glslang::TSymbol*> const&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, int> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::__emplace_unique_impl<std::__1::pair<char const*, glslang::TExtensionBehavior> >(std::__1::pair<char const*, glslang::TExtensionBehavior>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, sh::BlockMemberInfo> > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>, std::__1::tuple<> >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram>, std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram>, std::__1::__map_value_compare<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram>, std::__1::less<std::__1::tuple<gl::TextureType, unsigned int, unsigned int> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, rx::BlitGL::BlitProgram> > >::__emplace_unique_key_args<std::__1::tuple<gl::TextureType, unsigned int, unsigned int>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::tuple<gl::TextureType, unsigned int, unsigned int> const&>, std::__1::tuple<> >(std::__1::tuple<gl::TextureType, unsigned int, unsigned int> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::tuple<gl::TextureType, unsigned int, unsigned int> const&>&&, std::__1::tuple<>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo>, std::__1::__tree_node<std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, rx::nativegl::InternalFormatInfo> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int, rx::nativegl::InternalFormatInfo> >(unsigned int const&, std::__1::pair<unsigned int, rx::nativegl::InternalFormatInfo>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode>, std::__1::__tree_node<std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, spvtools::opt::DominatorTreeNode> > >::__emplace_unique_key_args<unsigned int, std::__1::pair<unsigned int, spvtools::opt::DominatorTreeNode> >(unsigned int const&, std::__1::pair<unsigned int, spvtools::opt::DominatorTreeNode>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&>(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::__tree_node<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::less<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >, std::__1::allocator<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > > >::__emplace_unique_key_args<std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >, std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > >(std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> > const&, std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::__tree_node<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, void*>*, long>, bool> std::__1::__tree<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, spvtools::opt::analysis::UserEntryLess, std::__1::allocator<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*> > >::__emplace_unique_key_args<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*> >(std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*> const&, std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>&&)
std::__1::pair<std::__1::__tree_iterator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::__tree_node<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, void*>*, long>, bool> std::__1::__tree<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::less<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >::__emplace_unique_key_args<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&&)
std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >::pair(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > const&)
std::__1::piecewise_construct
std::__1::recursive_mutex::lock()
std::__1::recursive_mutex::recursive_mutex()
std::__1::recursive_mutex::unlock()
std::__1::recursive_mutex::~recursive_mutex()
std::__1::system_category()::s
std::__1::system_error::__init(std::__1::error_code const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
std::__1::system_error::system_error(std::__1::error_code, char const*)
std::__1::system_error::~system_error()
std::__1::thread::detach()
std::__1::thread::hardware_concurrency()
std::__1::thread::join()
std::__1::thread::~thread()
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_percent(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::__get_white_space(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >&, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, unsigned int&, std::__1::ctype<char> const&) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_date_order() const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*, char, char) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*, char, char) const::__fm
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_date(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_monthname(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_time(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_time(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const::__fmt
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_weekday(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::do_get_year(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::get(std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, unsigned int&, tm*, char const*, char const*) const
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::id
std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >::~time_get()
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_percent(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::__get_white_space(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >&, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, unsigned int&, std::__1::ctype<wchar_t> const&) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_date_order() const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*, char, char) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*, char, char) const::__fm
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_date(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_monthname(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_time(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_time(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const::__fmt
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_weekday(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_get_year(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::get(std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, unsigned int&, tm*, wchar_t const*, wchar_t const*) const
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::id
std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_get()
std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::do_put(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >, std::__1::ios_base&, char, tm const*, char, char) const
std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::id
std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >::~time_put()
std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::do_put(std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> >, std::__1::ios_base&, wchar_t, tm const*, char, char) const
std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::id
std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >::~time_put()
std::__1::to_string(int)
std::__1::to_string(long long)
std::__1::to_string(unsigned int)
std::__1::tuple<spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const*, SpvExecutionModel_, spvtools::val::Decoration, spvtools::val::Instruction, spvtools::val::Instruction, std::__1::placeholders::__ph<1> >::tuple(std::__1::tuple<spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const*, SpvExecutionModel_, spvtools::val::Decoration, spvtools::val::Instruction, spvtools::val::Instruction, std::__1::placeholders::__ph<1> > const&)
std::__1::tuple<spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const*, SpvExecutionModel_, spvtools::val::Decoration, spvtools::val::Instruction, spvtools::val::Instruction, std::__1::placeholders::__ph<1> >::~tuple()
std::__1::unique_ptr<gl::Program::LinkingState, std::__1::default_delete<gl::Program::LinkingState> >::reset(gl::Program::LinkingState*)
std::__1::unique_ptr<spvtools::FriendlyNameMapper, std::__1::default_delete<spvtools::FriendlyNameMapper> >::reset(spvtools::FriendlyNameMapper*)
std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > spvtools::MakeUnique<spvtools::opt::Instruction, spvtools::opt::IRContext*&, SpvOp_, int, int, std::initializer_list<spvtools::opt::Operand> >(spvtools::opt::IRContext*&, SpvOp_&&, int&&, int&&, std::initializer_list<spvtools::opt::Operand>&&)
std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > spvtools::MakeUnique<spvtools::opt::Instruction, spvtools::opt::IRContext*&, SpvOp_, int, unsigned int&, std::initializer_list<spvtools::opt::Operand> >(spvtools::opt::IRContext*&, SpvOp_&&, int&&, unsigned int&, std::initializer_list<spvtools::opt::Operand>&&)
std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > spvtools::MakeUnique<spvtools::opt::Instruction, spvtools::opt::IRContext*, SpvOp_, int, int, std::initializer_list<spvtools::opt::Operand> >(spvtools::opt::IRContext*&&, SpvOp_&&, int&&, int&&, std::initializer_list<spvtools::opt::Operand>&&)
std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > spvtools::MakeUnique<spvtools::opt::Instruction, spvtools::opt::IRContext*, SpvOp_, int, unsigned int&, std::initializer_list<spvtools::opt::Operand> >(spvtools::opt::IRContext*&&, SpvOp_&&, int&&, unsigned int&, std::initializer_list<spvtools::opt::Operand>&&)
std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > spvtools::MakeUnique<spvtools::opt::Instruction, spvtools::opt::IRContext*, SpvOp_, unsigned int&, unsigned int&, std::initializer_list<spvtools::opt::Operand> >(spvtools::opt::IRContext*&&, SpvOp_&&, unsigned int&, unsigned int&, std::initializer_list<spvtools::opt::Operand>&&)
std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > spvtools::MakeUnique<spvtools::opt::Instruction, spvtools::opt::IRContext*, SpvOp_, unsigned int, unsigned int&, std::initializer_list<spvtools::opt::Operand> >(spvtools::opt::IRContext*&&, SpvOp_&&, unsigned int&&, unsigned int&, std::initializer_list<spvtools::opt::Operand>&&)
std::__1::unique_ptr<spvtools::opt::analysis::Array, std::__1::default_delete<spvtools::opt::analysis::Array> > spvtools::MakeUnique<spvtools::opt::analysis::Array, spvtools::opt::analysis::Array const&>(spvtools::opt::analysis::Array const&)
std::__1::unordered_map<char const*, glslang::EHlslTokenClass, (anonymous namespace)::str_hash, (anonymous namespace)::str_eq, std::__1::allocator<std::__1::pair<char const* const, glslang::EHlslTokenClass> > >::operator[](char const*&&)
std::__1::unordered_map<char const*, glslang::TBuiltInVariable, (anonymous namespace)::str_hash, (anonymous namespace)::str_eq, std::__1::allocator<std::__1::pair<char const* const, glslang::TBuiltInVariable> > >::operator[](char const*&&)
std::__1::unordered_map<char const*, int, (anonymous namespace)::str_hash, (anonymous namespace)::str_eq, std::__1::allocator<std::__1::pair<char const* const, int> > >::operator[](char const*&&)
std::__1::unordered_map<glslang::TIntermTyped*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<glslang::TIntermTyped*>, std::__1::equal_to<glslang::TIntermTyped*>, std::__1::allocator<std::__1::pair<glslang::TIntermTyped* const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::at(glslang::TIntermTyped* const&) const
std::__1::unordered_map<sh::TField const*, bool, std::__1::hash<sh::TField const*>, std::__1::equal_to<sh::TField const*>, std::__1::allocator<std::__1::pair<sh::TField const* const, bool> > >::at(sh::TField const* const&) const
std::__1::unordered_map<sh::TStructure const*, sh::(anonymous namespace)::StructConversionData, std::__1::hash<sh::TStructure const*>, std::__1::equal_to<sh::TStructure const*>, std::__1::allocator<std::__1::pair<sh::TStructure const* const, sh::(anonymous namespace)::StructConversionData> > >::operator[](sh::TStructure const* const&)
std::__1::unordered_map<sh::TVariable const*, sh::TVariable*, std::__1::hash<sh::TVariable const*>, std::__1::equal_to<sh::TVariable const*>, std::__1::allocator<std::__1::pair<sh::TVariable const* const, sh::TVariable*> > >::at(sh::TVariable const* const&) const
std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >::operator[](std::__1::pair<unsigned int, unsigned int>&&)
std::__1::unordered_map<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >, sh::TFunction*, sh::(anonymous namespace)::InstantiationHash, std::__1::equal_to<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const, sh::TFunction*> > >::operator[](std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&)
std::__1::unordered_map<unsigned int, spvtools::opt::ConstantFoldingRules::Value, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::opt::ConstantFoldingRules::Value> > >::~unordered_map()
std::__1::unordered_map<unsigned int, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > >, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > > > > >::~unordered_map()
std::__1::unordered_set<char const*, (anonymous namespace)::str_hash, (anonymous namespace)::str_eq, std::__1::allocator<char const*> >::insert(char const*&&)
std::__1::unordered_set<spv::Block*, std::__1::hash<spv::Block*>, std::__1::equal_to<spv::Block*>, std::__1::allocator<spv::Block*> >::erase(spv::Block* const&)
std::__1::utf16_to_utf8(unsigned short const*, unsigned short const*, unsigned short const*&, unsigned char*, unsigned char*, unsigned char*&, unsigned long, std::__1::codecvt_mode)
std::__1::utf8_to_ucs4(unsigned char const*, unsigned char const*, unsigned char const*&, unsigned int*, unsigned int*, unsigned int*&, unsigned long, std::__1::codecvt_mode)
std::__1::utf8_to_ucs4_length(unsigned char const*, unsigned char const*, unsigned long, unsigned long, std::__1::codecvt_mode)
std::__1::utf8_to_utf16(unsigned char const*, unsigned char const*, unsigned char const*&, unsigned short*, unsigned short*, unsigned short*&, unsigned long, std::__1::codecvt_mode)
std::__1::utf8_to_utf16_length(unsigned char const*, unsigned char const*, unsigned long, unsigned long, std::__1::codecvt_mode)
std::__1::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::__append(unsigned long)
std::__1::vector<TIntermNode*, glslang::pool_allocator<TIntermNode*> >::insert(std::__1::__wrap_iter<TIntermNode* const*>, TIntermNode*&&)
std::__1::vector<VkDescriptorBufferInfo, std::__1::allocator<VkDescriptorBufferInfo> >::__append(unsigned long)
std::__1::vector<VkDescriptorBufferInfo, std::__1::allocator<VkDescriptorBufferInfo> >::reserve(unsigned long)
std::__1::vector<VkDescriptorImageInfo, std::__1::allocator<VkDescriptorImageInfo> >::__append(unsigned long)
std::__1::vector<VkDescriptorImageInfo, std::__1::allocator<VkDescriptorImageInfo> >::reserve(unsigned long)
std::__1::vector<VkDescriptorSet_T*, std::__1::allocator<VkDescriptorSet_T*> >::__append(unsigned long, VkDescriptorSet_T* const&)
std::__1::vector<VkExtensionProperties, std::__1::allocator<VkExtensionProperties> >::__append(unsigned long)
std::__1::vector<VkPresentModeKHR, std::__1::allocator<VkPresentModeKHR> >::__append(unsigned long)
std::__1::vector<VkQueueFamilyProperties, std::__1::allocator<VkQueueFamilyProperties> >::__append(unsigned long)
std::__1::vector<VkRectLayerKHR, std::__1::allocator<VkRectLayerKHR> >::__append(unsigned long)
std::__1::vector<VkWriteDescriptorSet, std::__1::allocator<VkWriteDescriptorSet> >::__append(unsigned long)
std::__1::vector<angle::BitSetT<10ul, unsigned int, gl::TextureType>, std::__1::allocator<angle::BitSetT<10ul, unsigned int, gl::TextureType> > >::__append(unsigned long)
std::__1::vector<angle::FixedVector<angle::Mat4, 16ul, std::__1::array<angle::Mat4, 16ul> >, std::__1::allocator<angle::FixedVector<angle::Mat4, 16ul, std::__1::array<angle::Mat4, 16ul> > > >::__append(unsigned long)
std::__1::vector<angle::ObserverBinding, std::__1::allocator<angle::ObserverBinding> >::reserve(unsigned long)
std::__1::vector<bool, std::__1::allocator<bool> >::reserve(unsigned long)
std::__1::vector<bool, std::__1::allocator<bool> >::resize(unsigned long, bool)
std::__1::vector<bool, std::__1::allocator<bool> >::vector(unsigned long, bool const&)
std::__1::vector<char const*, std::__1::allocator<char const*> >::__append(unsigned long, char const* const&)
std::__1::vector<gl::BindingPointer<gl::Sampler>, std::__1::allocator<gl::BindingPointer<gl::Sampler> > >::__append(unsigned long)
std::__1::vector<gl::BindingPointer<gl::Texture>, std::__1::allocator<gl::BindingPointer<gl::Texture> > >::__append(unsigned long)
std::__1::vector<gl::ClipPlaneParameters, std::__1::allocator<gl::ClipPlaneParameters> >::__append(unsigned long, gl::ClipPlaneParameters const&)
std::__1::vector<gl::Debug::Control, std::__1::allocator<gl::Debug::Control> >::__swap_out_circular_buffer(std::__1::__split_buffer<gl::Debug::Control, std::__1::allocator<gl::Debug::Control>&>&)
std::__1::vector<gl::HandleAllocator::HandleRange, std::__1::allocator<gl::HandleAllocator::HandleRange> >::insert(std::__1::__wrap_iter<gl::HandleAllocator::HandleRange const*>, gl::HandleAllocator::HandleRange&&)
std::__1::vector<gl::ImageBinding, std::__1::allocator<gl::ImageBinding> >::__swap_out_circular_buffer(std::__1::__split_buffer<gl::ImageBinding, std::__1::allocator<gl::ImageBinding>&>&)
std::__1::vector<gl::ImageUnit, std::__1::allocator<gl::ImageUnit> >::__append(unsigned long)
std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> >::vector(std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> > const&)
std::__1::vector<gl::LightParameters, std::__1::allocator<gl::LightParameters> >::__append(unsigned long)
std::__1::vector<gl::OffsetBindingPointer<gl::Buffer>, std::__1::allocator<gl::OffsetBindingPointer<gl::Buffer> > >::__append(unsigned long)
std::__1::vector<gl::PackedVaryingRegister, std::__1::allocator<gl::PackedVaryingRegister> >::push_back(gl::PackedVaryingRegister const&)
std::__1::vector<gl::ProgramVaryingRef, std::__1::allocator<gl::ProgramVaryingRef> >::push_back(gl::ProgramVaryingRef&&)
std::__1::vector<gl::SamplerBinding, std::__1::allocator<gl::SamplerBinding> >::__swap_out_circular_buffer(std::__1::__split_buffer<gl::SamplerBinding, std::__1::allocator<gl::SamplerBinding>&>&)
std::__1::vector<gl::TextureCoordF, std::__1::allocator<gl::TextureCoordF> >::__append(unsigned long)
std::__1::vector<gl::TextureEnvironmentParameters, std::__1::allocator<gl::TextureEnvironmentParameters> >::__append(unsigned long)
std::__1::vector<gl::VariableLocation, std::__1::allocator<gl::VariableLocation> >::__append(unsigned long)
std::__1::vector<gl::VariableLocation, std::__1::allocator<gl::VariableLocation> >::push_back(gl::VariableLocation const&)
std::__1::vector<gl::VertexAttribCurrentValueData, std::__1::allocator<gl::VertexAttribCurrentValueData> >::__append(unsigned long)
std::__1::vector<glslang::TFunctionDeclarator, glslang::pool_allocator<glslang::TFunctionDeclarator> >::__append(unsigned long)
std::__1::vector<glslang::TParameter, glslang::pool_allocator<glslang::TParameter> >::insert(std::__1::__wrap_iter<glslang::TParameter const*>, glslang::TParameter const&)
std::__1::vector<glslang::TPpContext::TokenStream*, glslang::pool_allocator<glslang::TPpContext::TokenStream*> >::__append(unsigned long)
std::__1::vector<glslang::TPpContext::TokenStream::Token, glslang::pool_allocator<glslang::TPpContext::TokenStream::Token> >::__swap_out_circular_buffer(std::__1::__split_buffer<glslang::TPpContext::TokenStream::Token, glslang::pool_allocator<glslang::TPpContext::TokenStream::Token>&>&)
std::__1::vector<glslang::TStorageQualifier, glslang::pool_allocator<glslang::TStorageQualifier> >::__append(unsigned long)
std::__1::vector<glslang::TVector<char const*>, glslang::pool_allocator<glslang::TVector<char const*> > >::__append(unsigned long)
std::__1::vector<glslang::TXfbBuffer, std::__1::allocator<glslang::TXfbBuffer> >::__append(unsigned long)
std::__1::vector<int, glslang::pool_allocator<int> >::__append(unsigned long, int const&)
std::__1::vector<int, pool_allocator<int> >::__append(unsigned long)
std::__1::vector<int, std::__1::allocator<int> >::__append(unsigned long)
std::__1::vector<int, std::__1::allocator<int> >::__append(unsigned long, int const&)
std::__1::vector<rx::LevelInfoGL, std::__1::allocator<rx::LevelInfoGL> >::__append(unsigned long)
std::__1::vector<rx::RenderTargetVk, std::__1::allocator<rx::RenderTargetVk> >::__append(unsigned long)
std::__1::vector<rx::ShaderInterfaceVariableInfo const*, std::__1::allocator<rx::ShaderInterfaceVariableInfo const*> >::__append(unsigned long, rx::ShaderInterfaceVariableInfo const* const&)
std::__1::vector<rx::StateManagerGL::IndexedBufferBinding, std::__1::allocator<rx::StateManagerGL::IndexedBufferBinding> >::__append(unsigned long)
std::__1::vector<rx::impl::SwapchainImage, std::__1::allocator<rx::impl::SwapchainImage> >::__append(unsigned long)
std::__1::vector<rx::vk::ImageHelper::SubresourceUpdate, std::__1::allocator<rx::vk::ImageHelper::SubresourceUpdate> >::insert(std::__1::__wrap_iter<rx::vk::ImageHelper::SubresourceUpdate const*>, rx::vk::ImageHelper::SubresourceUpdate&&)
std::__1::vector<rx::vk::ImageView, std::__1::allocator<rx::vk::ImageView> >::__append(unsigned long)
std::__1::vector<sh::BlockMemberInfo, std::__1::allocator<sh::BlockMemberInfo> >::push_back(sh::BlockMemberInfo const&)
std::__1::vector<sh::CallDAG::Record, std::__1::allocator<sh::CallDAG::Record> >::__append(unsigned long)
std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >::reserve(unsigned long)
std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >::vector(std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> > const&)
std::__1::vector<sh::TCompiler::FunctionMetadata, std::__1::allocator<sh::TCompiler::FunctionMetadata> >::__append(unsigned long)
std::__1::vector<sh::TIntermNode*, pool_allocator<sh::TIntermNode*> >::insert(std::__1::__wrap_iter<sh::TIntermNode* const*>, sh::TIntermNode* const&)
std::__1::vector<sh::TIntermNode*, pool_allocator<sh::TIntermNode*> >::insert(std::__1::__wrap_iter<sh::TIntermNode* const*>, sh::TIntermNode*&&)
std::__1::vector<spv::Instruction*, std::__1::allocator<spv::Instruction*> >::__append(unsigned long)
std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::GetPredFunctor()::{lambda(spvtools::opt::BasicBlock const*)#1}, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*)
std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::GetSuccessorFunctor()::{lambda(spvtools::opt::BasicBlock const*)#1}, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*)
std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_2, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*)
std::__1::vector<spvtools::opt::DominatorTreeNode*, std::__1::allocator<spvtools::opt::DominatorTreeNode*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::opt::DominatorTreeNode*, std::__1::allocator<spvtools::opt::DominatorTreeNode*> > const* (spvtools::opt::DominatorTreeNode const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::ResetDFNumbering()::$_1, std::__1::vector<spvtools::opt::DominatorTreeNode*, std::__1::allocator<spvtools::opt::DominatorTreeNode*> > const* (spvtools::opt::DominatorTreeNode const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::DominatorTreeNode const*)
std::__1::vector<spvtools::opt::Instruction const*, std::__1::allocator<spvtools::opt::Instruction const*> > spvtools::opt::analysis::DecorationManager::InternalGetDecorationsFor<spvtools::opt::Instruction const*>(unsigned int, bool)
std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > spvtools::opt::analysis::DecorationManager::InternalGetDecorationsFor<spvtools::opt::Instruction*>(unsigned int, bool)
std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >::__recommend(unsigned long) const
std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::__append(unsigned long, spvtools::opt::Operand const&)
std::__1::vector<spvtools::opt::SENode*, std::__1::allocator<spvtools::opt::SENode*> >::insert(std::__1::__wrap_iter<spvtools::opt::SENode* const*>, spvtools::opt::SENode* const&)
std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> >::__append(unsigned long, spvtools::opt::analysis::Constant const* const&)
std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::Function::AugmentedCFGPredecessorsFunction() const::$_2, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::Function::AugmentedCFGSuccessorsFunction() const::$_0, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::Function::AugmentedCFGSuccessorsFunctionIncludingHeaderToContinueEdge() const::$_1, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::Function::ComputeAugmentedCFG()::$_3, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* std::__1::__function::__policy_invoker<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::Function::ComputeAugmentedCFG()::$_4, std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> >::__append(unsigned long)
std::__1::vector<spvtools::val::Function, std::__1::allocator<spvtools::val::Function> >::reserve(unsigned long)
std::__1::vector<spvtools::val::Instruction, std::__1::allocator<spvtools::val::Instruction> >::reserve(unsigned long)
std::__1::vector<std::__1::__assoc_sub_state*, std::__1::__hidden_allocator<std::__1::__assoc_sub_state*> >::~vector()
std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*, glslang::pool_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const*> >::__append(unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const* const&)
std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::__swap_out_circular_buffer(std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >&>&)
std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::vector(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > > const&)
std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__append(unsigned long)
std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::reserve(unsigned long)
std::__1::vector<std::__1::locale::facet*, std::__1::__sso_allocator<std::__1::locale::facet*, 28ul> >::__append(unsigned long)
std::__1::vector<std::__1::pair<std::__1::condition_variable*, std::__1::mutex*>, std::__1::__hidden_allocator<std::__1::pair<std::__1::condition_variable*, std::__1::mutex*> > >::~vector()
std::__1::vector<std::__1::unique_ptr<spv::Instruction, std::__1::default_delete<spv::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spv::Instruction, std::__1::default_delete<spv::Instruction> > > >::__append(unsigned long)
std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >::__append(unsigned long)
std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >::insert(std::__1::__wrap_iter<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > const*>, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >&&)
std::__1::vector<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >, std::__1::allocator<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> > > >::reserve(unsigned long)
std::__1::vector<std::__1::vector<rx::RenderTargetVk, std::__1::allocator<rx::RenderTargetVk> >, std::__1::allocator<std::__1::vector<rx::RenderTargetVk, std::__1::allocator<rx::RenderTargetVk> > > >::__append(unsigned long)
std::__1::vector<std::__1::vector<rx::vk::ImageView, std::__1::allocator<rx::vk::ImageView> >, std::__1::allocator<std::__1::vector<rx::vk::ImageView, std::__1::allocator<rx::vk::ImageView> > > >::__append(unsigned long)
std::__1::vector<std::__1::vector<spv::Decoration, std::__1::allocator<spv::Decoration> >, std::__1::allocator<std::__1::vector<spv::Decoration, std::__1::allocator<spv::Decoration> > > >::__append(unsigned long)
std::__1::vector<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >, std::__1::allocator<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > > >::__append(unsigned long)
std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >::vector(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > const&)
std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__append(unsigned long, unsigned char const&)
std::__1::vector<unsigned int, pool_allocator<unsigned int> >::__append(unsigned long)
std::__1::vector<unsigned int, pool_allocator<unsigned int> >::insert(std::__1::__wrap_iter<unsigned int const*>, unsigned int const&)
std::__1::vector<unsigned int, pool_allocator<unsigned int> >::insert(std::__1::__wrap_iter<unsigned int const*>, unsigned int&&)
std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::__append(unsigned long)
std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::__append(unsigned long, unsigned int const&)
std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >::__swap_out_circular_buffer(std::__1::__split_buffer<unsigned int, std::__1::allocator<unsigned int>&>&)
std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >::__append(unsigned long)
std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >::__append(unsigned long, unsigned long const&)
std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >::__swap_out_circular_buffer(std::__1::__split_buffer<unsigned long, std::__1::allocator<unsigned long>&>&)
std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >::reserve(unsigned long)
std::__1::wcerr
std::__1::wcin
std::__1::wclog
std::__1::wcout
std::__libcpp_tls_set failure in __cxa_get_globals()
std::__terminate(void (*)())
std::__throw_bad_alloc()
std::__unexpected(void (*)())
std::bad_alloc
std::bad_alloc::bad_alloc()
std::bad_alloc::what() const
std::bad_alloc::~bad_alloc()
std::bad_array_new_length::~bad_array_new_length()
std::bad_exception
std::bad_exception::what() const
std::bad_exception::~bad_exception()
std::domain_error::~domain_error()
std::exception::~exception()
std::exception_ptr::~exception_ptr()
std::get_new_handler()
std::get_terminate()
std::get_unexpected()
std::invalid_argument::~invalid_argument()
std::length_error::length_error(char const*)
std::length_error::~length_error()
std::logic_error::logic_error(char const*)
std::logic_error::logic_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::logic_error::what() const
std::logic_error::~logic_error()
std::nothrow
std::out_of_range::out_of_range(char const*)
std::out_of_range::~out_of_range()
std::overflow_error::overflow_error(char const*)
std::overflow_error::~overflow_error()
std::range_error::~range_error()
std::runtime_error::runtime_error(char const*)
std::runtime_error::runtime_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
std::runtime_error::what() const
std::runtime_error::~runtime_error()
std::terminate()
std::type_info::~type_info()
std::uncaught_exception()
std::underflow_error::~underflow_error()
stderr
stdexcept.cpp
stdin
stdlib_exception.cpp
stdlib_stdexcept.cpp
stdlib_typeinfo.cpp
stdout
stencil
step(00B00B
step(00B10B
step(00B20B
step(00B30B
step(00C00C
step(00C10C
step(00C20C
step(00C30C
step(10B10B
step(10C10C
step(20B20B
step(20C20C
step(30B30B
step(30C30C
stereo view rendering
storage buffer, or variable in Private or Function storage class
storage class for pointer type <id> '
storage class must follow
storage class requires an additional capability
storage classes
storage classes.
storage qualifier isn't supported in compute shaders
storage qualifier not allowed on function parameter
storage qualifier supported in GLSL ES 3.00 and above only
storage qualifier supported in GLSL ES 3.10 only
storage_qualifier
storeDestinationComponents(u1;
storeTemp
storeTempPost
storeTempPre
stpcpy
strcmp
stream end
stream error
stream output type
stream=
streamAttributes
strength_reduction_pass.cpp
strerror_r
stretch
strftime_l
string literal
string.cpp
string_utils.cpp
strip-debug
strip_atomic_counter_memory_pass.cpp
strip_debug_info_pass.cpp
strip_reflect_info_pass.cpp
strlen
strncmp
strncpy
strstr
strstream.cpp
strtod_l
strtof_l
strtol
strtold_l
strtoll_l
strtoul
strtoull_l
struct gl_DepthRangeParameters {
struct gl_TextureFootprint2DNV {uvec2 anchor;uvec2 offset;uvec2 mask;uint lod;uint granularity;};struct gl_TextureFootprint3DNV {uvec3 anchor;uvec3 offset;uvec2 mask;uint lod;uint granularity;};bool textureFootprintNV(sampler2D, vec2, int, bool, out gl_TextureFootprint2DNV);bool textureFootprintNV(sampler3D, vec3, int, bool, out gl_TextureFootprint3DNV);bool textureFootprintNV(sampler2D, vec2, int, bool, out gl_TextureFootprint2DNV, float);bool textureFootprintNV(sampler3D, vec3, int, bool, out gl_TextureFootprint3DNV, float);bool textureFootprintClampNV(sampler2D, vec2, float, int, bool, out gl_TextureFootprint2DNV);bool textureFootprintClampNV(sampler3D, vec3, float, int, bool, out gl_TextureFootprint3DNV);bool textureFootprintClampNV(sampler2D, vec2, float, int, bool, out gl_TextureFootprint2DNV, float);bool textureFootprintClampNV(sampler3D, vec3, float, int, bool, out gl_TextureFootprint3DNV, float);bool textureFootprintLodNV(sampler2D, vec2, float, int, bool, out gl_TextureFootprint2DNV);bool textureFootprintLodNV(sampler3D, vec3, float, int, bool, out gl_TextureFootprint3DNV);bool textureFootprintGradNV(sampler2D, vec2, vec2, vec2, int, bool, out gl_TextureFootprint2DNV);bool textureFootprintGradClampNV(sampler2D, vec2, vec2, vec2, float, int, bool, out gl_TextureFootprint2DNV);
struct member declarations
struct-
struct-member initializers ignored
struct_cfg_analysis.cpp
struct_declaration
struct_declaration_list
struct_declarator
struct_declarator_list
struct_specifier
structure
structure has no fields
structure may not be contained as a member of another
structures containing arrays can't be function return values
structures containing arrays may not be declared constant since they cannot be initialized
sub
subgroup op
subgroupAdd
subgroupAll
subgroupAllEqual
subgroupAnd
subgroupAny
subgroupBallot
subgroupBallotBitCount
subgroupBallotBitExtract
subgroupBallotExclusiveBitCount
subgroupBallotFindLSB
subgroupBallotFindMSB
subgroupBallotInclusiveBitCount
subgroupBarrier
subgroupBroadcast
subgroupBroadcastFirst
subgroupClusteredAdd
subgroupClusteredAnd
subgroupClusteredMax
subgroupClusteredMin
subgroupClusteredMul
subgroupClusteredOr
subgroupClusteredXor
subgroupElect
subgroupExclusiveAdd
subgroupExclusiveAnd
subgroupExclusiveMax
subgroupExclusiveMin
subgroupExclusiveMul
subgroupExclusiveOr
subgroupExclusiveXor
subgroupInclusiveAdd
subgroupInclusiveAnd
subgroupInclusiveMax
subgroupInclusiveMin
subgroupInclusiveMul
subgroupInclusiveOr
subgroupInclusiveXor
subgroupInverseBallot
subgroupMax
subgroupMemoryBarrier
subgroupMemoryBarrierBuffer
subgroupMemoryBarrierImage
subgroupMemoryBarrierShared
subgroupMin
subgroupMul
subgroupOr
subgroupPartitionNV
subgroupPartitionedAddNV
subgroupPartitionedAndNV
subgroupPartitionedExclusiveAddNV
subgroupPartitionedExclusiveAndNV
subgroupPartitionedExclusiveMaxNV
subgroupPartitionedExclusiveMinNV
subgroupPartitionedExclusiveMulNV
subgroupPartitionedExclusiveOrNV
subgroupPartitionedExclusiveXorNV
subgroupPartitionedInclusiveAddNV
subgroupPartitionedInclusiveAndNV
subgroupPartitionedInclusiveMaxNV
subgroupPartitionedInclusiveMinNV
subgroupPartitionedInclusiveMulNV
subgroupPartitionedInclusiveOrNV
subgroupPartitionedInclusiveXorNV
subgroupPartitionedMaxNV
subgroupPartitionedMinNV
subgroupPartitionedMulNV
subgroupPartitionedOrNV
subgroupPartitionedXorNV
subgroupQuadBroadcast
subgroupQuadSwapDiagonal
subgroupQuadSwapHorizontal
subgroupQuadSwapVertical
subgroupShuffle
subgroupShuffleDown
subgroupShuffleUp
subgroupShuffleXor
subgroupXor
subgroupcoherent
subpassLoad(01j
subpassLoad(01k
subpassLoad(01l
subpassLoad(01m00D
subpassLoad(01n00D
subpassLoad(01o00D
subpassLoadMS
substituting 'mediump'
subtract
subtract second child into first child
subtractSaturate
superp
support_depth_stencil_rendering_feedback_loops
supported in GLSL ES 1.00 only
supported in compute shaders only
supported in vertex shaders only
supports_android_hardware_buffer
supports_android_native_fence_sync
supports_external_fence_capabilities
supports_external_fence_fd
supports_external_memory_fd
supports_external_memory_fuchsia
supports_external_memory_host
supports_external_semaphore_capabilities
supports_external_semaphore_fd
supports_external_semaphore_fuchsia
supports_filtering_precision_google
supports_ggp_frame_token
supports_incremental_present
supports_index_type_uint8
supports_shader_stencil_export
supports_swapchain_colorspace
supports_transform_feedback_extension
suppress-warnings
swapWithDamage implementation missing.
switch (
switch_statement
switch_statement_list
switch_statement_nonattributed
swizzle or member
swizzleInvocations
swizzleInvocationsAMD
swizzleInvocationsMasked
swizzleInvocationsMaskedAMD
swizzleInvocationsWithPatternAMD
swizzleTemp
sync object is not valid.
syncControlCHROMIUM extension not active
syncControlRateANGLE extension not active
syncPipelineCacheVk
syncState
sync_framebuffer_bindings_on_tex_image
syntax error
syntax error, unexpected %s
syntax error, unexpected %s, expecting %s
syntax error, unexpected %s, expecting %s or %s
syntax error, unexpected %s, expecting %s or %s or %s
syntax error, unexpected %s, expecting %s or %s or %s or %s
sysconf
system
system_error.cpp
system_utils.cpp
system_utils_linux.cpp
system_utils_posix.cpp
t
t&>
t+>
t/
t2
t6
t7
t8
tFB
tG
t_depth_coverageendency_infinite
t`@
table.cpp
tan
tanf
tanhf
target 2D texture does not have a valid size at specified level.
target 3D texture does not have a valid size at specified level.
target 3D texture does not have enough layers for the specified Z offset at the specified level.
target cubemap texture does not have a valid size at specified level and face.
target is not a 2D texture.
target is not a 3D texture.
target is not a cubemap texture.
target is not a renderbuffer.
target renderbuffer cannot be multisampled.
target-env opengl
target-env spirv1.1
target-env spirv1.2
target-env spirv1.3
target-env spirv1.4
target-env spirv1.5
target-env spirvUnknown
target-env vulkan1.0
target-env vulkan1.1
target-env vulkan1.2
target-env vulkanUnknown
task
task shaders
taskNV
taskNV variables can be declared only as blocks
tbuffer
temp
tempArg
tempReturn
template
terminate
terminateRayEXT
terminateRayNV
terminate_handler unexpectedly returned
terminate_handler unexpectedly threw an exception
terminator instruction outside basic block
terminator instruction outside function
ternary operator is not allowed for interface blocks
ternary operator is not allowed for opaque types
ternary operator is not allowed for structures or arrays
ternary operator is not allowed for variables with writeonly
ternary operator is not allowed for void
tessellation control
tessellation control barrier() cannot be placed after a return from main()
tessellation control barrier() cannot be placed within flow control
tessellation control barrier() must be in main()
tessellation evaluation
tessellation input array size must be gl_MaxPatchVertices or implicitly sized
tessellation patch type
tessellation shaders
tessellation-control per-vertex output l-value must be indexed with gl_InvocationID
tested first
tex1D
tex1Dbias
tex1Dgrad
tex1Dlod
tex1Dproj
tex2D
tex2Dbias
tex2Dgrad
tex2Dlod
tex2Dproj
tex3D
tex3Dbias
tex3Dgrad
tex3Dlod
tex3Dproj
texCUBE
texCUBEbias
texCUBEgrad
texCUBElod
texCUBEproj
tex_cube_sampler
tex_sampler
texcoord
texel offset
texelFetch
texelFetch(00I10D00D
texelFetch(00J20D00D
texelFetch(00L20D00D
texelFetch(00M10D00D
texelFetch(00N10D00D
texelFetch(00O10D
texelFetch(00P10D00D
texelFetch(00Q20D00D
texelFetch(00R10D00D
texelFetch(00S20D00D
texelFetch(00U20D00D
texelFetch(00V10D00D
texelFetch(00W20D00D
texelFetch(00X10D00D
texelFetch(00Y20D00D
texelFetch(00a20D00D
texelFetch(00b10D00D
texelFetch(00c20D00D
texelFetch(00g00D00D
texelFetch(00h10D00D
texelFetch(00j00D
texelFetch(00o00D00D
texelFetch(00p10D00D
texelFetch(00q10D
texelFetch(00r00D
texelFetch(00t00D00D
texelFetch(00u10D00D
texelFetch(00v10D
texelFetch(00w00D
texelFetchOffset
texelFetchOffset(00I10D00D10D
texelFetchOffset(00J20D00D20D
texelFetchOffset(00L20D00D10D
texelFetchOffset(00O10D10D
texelFetchOffset(00R10D00D10D
texelFetchOffset(00S20D00D20D
texelFetchOffset(00U20D00D10D
texelFetchOffset(00X10D00D10D
texelFetchOffset(00Y20D00D20D
texelFetchOffset(00a20D00D10D
texelFetchOffset(00g00D00D00D
texelFetchOffset(00h10D00D00D
texelFetchOffset(00o00D00D00D
texelFetchOffset(00p10D00D00D
texelFetchOffset(00q10D10D
texelFetchOffset(00t00D00D00D
texelFetchOffset(00u10D00D00D
texelFetchOffset(00v10D10D
text.cpp
text_handler.cpp
texture address mode
texture has a surface bound to it.
texture image unit
texture is not the name of an existing texture object.
texture must be complete if level is non-zero.
texture state
texture type for multisample
texture(00I10B
texture(00I10B00B
texture(00J20B
texture(00J20B00B
texture(00K20B
texture(00K20B00B
texture(00L20B
texture(00L20B00B
texture(00M10B
texture(00M10B00B
texture(00N10B
texture(00N10B00B
texture(00O10B
texture(00R10B
texture(00R10B00B
texture(00S20B
texture(00S20B00B
texture(00T20B
texture(00T20B00B
texture(00U20B
texture(00U20B00B
texture(00X10B
texture(00X10B00B
texture(00Y20B
texture(00Y20B00B
texture(00Z20B
texture(00Z20B00B
texture(00a20B
texture(00a20B00B
texture(00d20B
texture(00d20B00B
texture(00e30B
texture(00e30B00B
texture(00f30B
texture(00f30B00B
texture(00g00B
texture(00g00B00B
texture(00h20B
texture(00h20B00B
texture(00i20B
texture(00i20B00B
texture(00k30B
texture(00k30B00B
texture(00l30B00B
texture(00m20B
texture(00m20B00B
texture(00n20B
texture(00o00B
texture(00o00B00B
texture(00p20B
texture(00p20B00B
texture(00q10B
texture(00s30B
texture(00s30B00B
texture(00t00B
texture(00t00B00B
texture(00u20B
texture(00u20B00B
texture(00v10B
texture(00x30B
texture(00x30B00B
texture(00y10B
texture-rectangle sampler keyword
texture1D(00g00B
texture1D(00g00B00B
texture1DGradARB
texture1DLod
texture1DLod(00g00B00B
texture1DProj
texture1DProj(00g10B
texture1DProj(00g10B00B
texture1DProj(00g30B
texture1DProj(00g30B00B
texture1DProjGradARB
texture1DProjLod
texture1DProjLod(00g10B00B
texture1DProjLod(00g30B00B
texture2D(00I10B
texture2D(00I10B00B
texture2D(00M10B
texture2DGradARB
texture2DGradEXT
texture2DGradEXT(00I10B10B10B
texture2DLod
texture2DLod(00I10B00B
texture2DLodEXT
texture2DLodEXT(00I10B00B
texture2DProj
texture2DProj(00I20B
texture2DProj(00I20B00B
texture2DProj(00I30B
texture2DProj(00I30B00B
texture2DProj(00M20B
texture2DProj(00M30B
texture2DProjGradARB
texture2DProjGradEXT
texture2DProjGradEXT(00I20B10B10B
texture2DProjGradEXT(00I30B10B10B
texture2DProjLod
texture2DProjLod(00I20B00B
texture2DProjLod(00I30B00B
texture2DProjLodEXT
texture2DProjLodEXT(00I20B00B
texture2DProjLodEXT(00I30B00B
texture2DRect(00O10B
texture2DRectGradARB
texture2DRectProj
texture2DRectProj(00O20B
texture2DRectProj(00O30B
texture2DRectProjGradARB
texture3D(00J20B
texture3D(00J20B00B
texture3DGradARB
texture3DLod
texture3DLod(00J20B00B
texture3DProj
texture3DProj(00J30B
texture3DProj(00J30B00B
texture3DProjGradARB
texture3DProjLod
texture3DProjLod(00J30B00B
textureClamp
textureClampARB
textureCube(00K20B
textureCube(00K20B00B
textureCubeGrad
textureCubeGradARB
textureCubeGradEXT
textureCubeGradEXT(00K20B20B20B
textureCubeLod
textureCubeLod(00K20B00B
textureCubeLodEXT
textureCubeLodEXT(00K20B00B
textureFetch
textureFetchOffset
textureFootprintClampNV
textureFootprintGradClampNV
textureFootprintGradNV
textureFootprintLodNV
textureFootprintNV
textureGather
textureGather(00I10B
textureGather(00I10B00D
textureGather(00K20B
textureGather(00K20B00D
textureGather(00L20B
textureGather(00L20B00D
textureGather(00O20B
textureGather(00O20B00D
textureGather(00R10B
textureGather(00R10B00D
textureGather(00T20B
textureGather(00T20B00D
textureGather(00U20B
textureGather(00U20B00D
textureGather(00X10B
textureGather(00X10B00D
textureGather(00Z20B
textureGather(00Z20B00D
textureGather(00a20B
textureGather(00a20B00D
textureGather(00d10B
textureGather(00d10B00B
textureGather(00e20B
textureGather(00e20B00B
textureGather(00f20B
textureGather(00f20B00B
textureGather(00k30B
textureGather(00k30B00D
textureGather(00l30B00B
textureGather(00n10B00B
textureGather(00q20B
textureGather(00q20B00D
textureGather(00s30B
textureGather(00s30B00D
textureGather(00v20B
textureGather(00v20B00D
textureGather(00x30B
textureGather(00x30B00D
textureGatherLod
textureGatherLodAMD
textureGatherLodOffset
textureGatherLodOffsetAMD
textureGatherLodOffsets
textureGatherLodOffsetsAMD
textureGatherOffset
textureGatherOffset(00I10B10D
textureGatherOffset(00I10B10D00D
textureGatherOffset(00L20B10D
textureGatherOffset(00L20B10D00D
textureGatherOffset(00O10B10D
textureGatherOffset(00O10B10D00D
textureGatherOffset(00R10B10D
textureGatherOffset(00R10B10D00D
textureGatherOffset(00U20B10D
textureGatherOffset(00U20B10D00D
textureGatherOffset(00X10B10D
textureGatherOffset(00X10B10D00D
textureGatherOffset(00a20B10D
textureGatherOffset(00a20B10D00D
textureGatherOffset(00d10B00B10D
textureGatherOffset(00f20B00B10D
textureGatherOffset(00n10B00B10D
textureGatherOffset(00q10B10D
textureGatherOffset(00q10B10D00D
textureGatherOffset(00v10B10D
textureGatherOffset(00v10B10D00D
textureGatherOffsets
textureGatherOffsets(00I10B10Dx4
textureGatherOffsets(00I10B10Dx400D
textureGatherOffsets(00L20B10Dx4
textureGatherOffsets(00L20B10Dx400D
textureGatherOffsets(00O10B10Dx4
textureGatherOffsets(00O10B10Dx400D
textureGatherOffsets(00R10B10Dx4
textureGatherOffsets(00R10B10Dx400D
textureGatherOffsets(00U20B10Dx4
textureGatherOffsets(00U20B10Dx400D
textureGatherOffsets(00X10B10Dx4
textureGatherOffsets(00X10B10Dx400D
textureGatherOffsets(00a20B10Dx4
textureGatherOffsets(00a20B10Dx400D
textureGatherOffsets(00d10B00B10Dx4
textureGatherOffsets(00f20B00B10Dx4
textureGatherOffsets(00n10B00B10Dx4
textureGatherOffsets(00q10B10Dx4
textureGatherOffsets(00q10B10Dx400D
textureGatherOffsets(00v10B10Dx4
textureGatherOffsets(00v10B10Dx400D
textureGrad
textureGrad(00I00B00B00B
textureGrad(00I10B10B10B
textureGrad(00J20B20B20B
textureGrad(00K20B20B20B
textureGrad(00L20B10B10B
textureGrad(00O10B10B10B
textureGrad(00R00B00B00B
textureGrad(00R10B10B10B
textureGrad(00S20B20B20B
textureGrad(00T20B20B20B
textureGrad(00U20B10B10B
textureGrad(00X00B00B00B
textureGrad(00X10B10B10B
textureGrad(00Y20B20B20B
textureGrad(00Z20B20B20B
textureGrad(00a20B10B10B
textureGrad(00d20B10B10B
textureGrad(00e30B20B20B
textureGrad(00f30B10B10B
textureGrad(00h10B00B00B
textureGrad(00i20B00B00B
textureGrad(00k30B20B20B
textureGrad(00m20B00B00B
textureGrad(00n20B10B10B
textureGrad(00p10B00B00B
textureGrad(00q10B10B10B
textureGrad(00s30B20B20B
textureGrad(00u10B00B00B
textureGrad(00v10B10B10B
textureGrad(00x30B20B20B
textureGradClamp
textureGradClampARB
textureGradOffset
textureGradOffset(00I10B10B10B10D
textureGradOffset(00J20B20B20B20D
textureGradOffset(00L20B10B10B10D
textureGradOffset(00O10B10B10B10D
textureGradOffset(00R10B10B10B10D
textureGradOffset(00S20B20B20B20D
textureGradOffset(00U20B10B10B10D
textureGradOffset(00X10B10B10B10D
textureGradOffset(00Y20B20B20B20D
textureGradOffset(00a20B10B10B10D
textureGradOffset(00d20B10B10B10D
textureGradOffset(00f30B10B10B10D
textureGradOffset(00g00B00B00B00D
textureGradOffset(00h10B00B00B00D
textureGradOffset(00i20B00B00B00D
textureGradOffset(00m20B00B00B00D
textureGradOffset(00n20B10B10B10D
textureGradOffset(00o00B00B00B00D
textureGradOffset(00p10B00B00B00D
textureGradOffset(00q10B10B10B10D
textureGradOffset(00t00B00B00B00D
textureGradOffset(00u10B00B00B00D
textureGradOffset(00v10B10B10B10D
textureGradOffsetClamp
textureGradOffsetClampARB
textureLod
textureLod(00I10B00B
textureLod(00J20B00B
textureLod(00K20B00B
textureLod(00L20B00B
textureLod(00R10B00B
textureLod(00S20B00B
textureLod(00T20B00B
textureLod(00U20B00B
textureLod(00X10B00B
textureLod(00Y20B00B
textureLod(00Z20B00B
textureLod(00a20B00B
textureLod(00d20B00B
textureLod(00g00B00B
textureLod(00h10B00B
textureLod(00i20B00B
textureLod(00k30B00B
textureLod(00m20B00B
textureLod(00o00B00B
textureLod(00p10B00B
textureLod(00s30B00B
textureLod(00t00B00B
textureLod(00u10B00B
textureLod(00x30B00B
textureLodOffset
textureLodOffset(00I10B00B10D
textureLodOffset(00J20B00B20D
textureLodOffset(00L20B00B10D
textureLodOffset(00R10B00B10D
textureLodOffset(00S20B00B20D
textureLodOffset(00U20B00B10D
textureLodOffset(00X10B00B10D
textureLodOffset(00Y20B00B20D
textureLodOffset(00a20B00B10D
textureLodOffset(00d20B00B10D
textureLodOffset(00g00B00B00D
textureLodOffset(00h10B00B00D
textureLodOffset(00i20B00B00D
textureLodOffset(00m20B00B00D
textureLodOffset(00o00B00B00D
textureLodOffset(00p10B00B00D
textureLodOffset(00t00B00B00D
textureLodOffset(00u10B00B00D
textureOffset
textureOffset(00I10B10D
textureOffset(00I10B10D00B
textureOffset(00J20B20D
textureOffset(00J20B20D00B
textureOffset(00L20B10D
textureOffset(00L20B10D00B
textureOffset(00O10B10D
textureOffset(00R10B10D
textureOffset(00R10B10D00B
textureOffset(00S20B20D
textureOffset(00S20B20D00B
textureOffset(00U20B10D
textureOffset(00U20B10D00B
textureOffset(00X10B10D
textureOffset(00X10B10D00B
textureOffset(00Y20B20D
textureOffset(00Y20B20D00B
textureOffset(00a20B10D
textureOffset(00a20B10D00B
textureOffset(00d20B10D
textureOffset(00d20B10D00B
textureOffset(00f30B10D
textureOffset(00g00B00D
textureOffset(00g00B00D00B
textureOffset(00h10B00D
textureOffset(00h10B00D00B
textureOffset(00i20B00D
textureOffset(00i20B00D00B
textureOffset(00m20B00D
textureOffset(00m20B00D00B
textureOffset(00n20B10D
textureOffset(00o00B00D
textureOffset(00o00B00D00B
textureOffset(00p10B00D
textureOffset(00p10B00D00B
textureOffset(00q10B10D
textureOffset(00t00B00D
textureOffset(00t00B00D00B
textureOffset(00u10B00D
textureOffset(00u10B00D00B
textureOffset(00v10B10D
textureOffsetClamp
textureOffsetClampARB
textureProj
textureProj(00I20B
textureProj(00I20B00B
textureProj(00I30B
textureProj(00I30B00B
textureProj(00J30B
textureProj(00J30B00B
textureProj(00M20B
textureProj(00M20B00B
textureProj(00M30B
textureProj(00M30B00B
textureProj(00N20B
textureProj(00N20B00B
textureProj(00N30B
textureProj(00N30B00B
textureProj(00O20B
textureProj(00O30B
textureProj(00R20B
textureProj(00R20B00B
textureProj(00R30B
textureProj(00R30B00B
textureProj(00S30B
textureProj(00S30B00B
textureProj(00X20B
textureProj(00X20B00B
textureProj(00X30B
textureProj(00X30B00B
textureProj(00Y30B
textureProj(00Y30B00B
textureProj(00d30B
textureProj(00d30B00B
textureProj(00g10B
textureProj(00g10B00B
textureProj(00g30B
textureProj(00g30B00B
textureProj(00m30B
textureProj(00m30B00B
textureProj(00n30B
textureProj(00o10B
textureProj(00o10B00B
textureProj(00o30B
textureProj(00o30B00B
textureProj(00q20B
textureProj(00q30B
textureProj(00t10B
textureProj(00t10B00B
textureProj(00t30B
textureProj(00t30B00B
textureProj(00v20B
textureProj(00v30B
textureProjGrad
textureProjGrad(00I20B10B10B
textureProjGrad(00I30B10B10B
textureProjGrad(00J30B20B20B
textureProjGrad(00O20B10B10B
textureProjGrad(00O30B10B10B
textureProjGrad(00R20B10B10B
textureProjGrad(00R30B10B10B
textureProjGrad(00S30B20B20B
textureProjGrad(00X20B10B10B
textureProjGrad(00X30B10B10B
textureProjGrad(00Y30B20B20B
textureProjGrad(00d30B10B10B
textureProjGrad(00g10B00B00B
textureProjGrad(00g30B00B00B
textureProjGrad(00m30B00B00B
textureProjGrad(00n30B10B10B
textureProjGrad(00o10B00B00B
textureProjGrad(00o30B00B00B
textureProjGrad(00q20B10B10B
textureProjGrad(00q30B10B10B
textureProjGrad(00t10B00B00B
textureProjGrad(00t30B00B00B
textureProjGrad(00v20B10B10B
textureProjGrad(00v30B10B10B
textureProjGradOffset
textureProjGradOffset(00I20B10B10B10D
textureProjGradOffset(00I30B10B10B10D
textureProjGradOffset(00J30B20B20B20D
textureProjGradOffset(00O20B10B10B10D
textureProjGradOffset(00O30B10B10B10D
textureProjGradOffset(00R20B10B10B10D
textureProjGradOffset(00R30B10B10B10D
textureProjGradOffset(00S30B20B20B20D
textureProjGradOffset(00X20B10B10B10D
textureProjGradOffset(00X30B10B10B10D
textureProjGradOffset(00Y30B20B20B20D
textureProjGradOffset(00d30B10B10B10D
textureProjGradOffset(00g10B00B00B00D
textureProjGradOffset(00g30B00B00B00D
textureProjGradOffset(00m30B00B00B00D
textureProjGradOffset(00n30B10B10B10D
textureProjGradOffset(00o10B00B00B00D
textureProjGradOffset(00o30B00B00B00D
textureProjGradOffset(00q20B10B10B10D
textureProjGradOffset(00q30B10B10B10D
textureProjGradOffset(00t10B00B00B00D
textureProjGradOffset(00t30B00B00B00D
textureProjGradOffset(00v20B10B10B10D
textureProjGradOffset(00v30B10B10B10D
textureProjLod
textureProjLod(00I20B00B
textureProjLod(00I30B00B
textureProjLod(00J30B00B
textureProjLod(00R20B00B
textureProjLod(00R30B00B
textureProjLod(00S30B00B
textureProjLod(00X20B00B
textureProjLod(00X30B00B
textureProjLod(00Y30B00B
textureProjLod(00d30B00B
textureProjLod(00g10B00B
textureProjLod(00g30B00B
textureProjLod(00m30B00B
textureProjLod(00o10B00B
textureProjLod(00o30B00B
textureProjLod(00t10B00B
textureProjLod(00t30B00B
textureProjLodOffset
textureProjLodOffset(00I20B00B10D
textureProjLodOffset(00I30B00B10D
textureProjLodOffset(00J30B00B20D
textureProjLodOffset(00R20B00B10D
textureProjLodOffset(00R30B00B10D
textureProjLodOffset(00S30B00B20D
textureProjLodOffset(00X20B00B10D
textureProjLodOffset(00X30B00B10D
textureProjLodOffset(00Y30B00B20D
textureProjLodOffset(00d30B00B10D
textureProjLodOffset(00g10B00B00D
textureProjLodOffset(00g30B00B00D
textureProjLodOffset(00m30B00B00D
textureProjLodOffset(00o10B00B00D
textureProjLodOffset(00o30B00B00D
textureProjLodOffset(00t10B00B00D
textureProjLodOffset(00t30B00B00D
textureProjOffset
textureProjOffset(00I20B10D
textureProjOffset(00I20B10D00B
textureProjOffset(00I30B10D
textureProjOffset(00I30B10D00B
textureProjOffset(00J30B20D
textureProjOffset(00J30B20D00B
textureProjOffset(00O20B10D
textureProjOffset(00O30B10D
textureProjOffset(00R20B10D
textureProjOffset(00R20B10D00B
textureProjOffset(00R30B10D
textureProjOffset(00R30B10D00B
textureProjOffset(00S30B20D
textureProjOffset(00S30B20D00B
textureProjOffset(00X20B10D
textureProjOffset(00X20B10D00B
textureProjOffset(00X30B10D
textureProjOffset(00X30B10D00B
textureProjOffset(00Y30B20D
textureProjOffset(00Y30B20D00B
textureProjOffset(00d30B10D
textureProjOffset(00d30B10D00B
textureProjOffset(00g10B00D
textureProjOffset(00g10B00D00B
textureProjOffset(00g30B00D
textureProjOffset(00g30B00D00B
textureProjOffset(00m30B00D
textureProjOffset(00m30B00D00B
textureProjOffset(00n30B10D
textureProjOffset(00o10B00D
textureProjOffset(00o10B00D00B
textureProjOffset(00o30B00D
textureProjOffset(00o30B00D00B
textureProjOffset(00q20B10D
textureProjOffset(00q30B10D
textureProjOffset(00t10B00D
textureProjOffset(00t10B00D00B
textureProjOffset(00t30B00D
textureProjOffset(00t30B00D00B
textureProjOffset(00v20B10D
textureProjOffset(00v30B10D
textureQueryLevels
textureQueryLevels(00I
textureQueryLevels(00J
textureQueryLevels(00K
textureQueryLevels(00L
textureQueryLevels(00R
textureQueryLevels(00S
textureQueryLevels(00T
textureQueryLevels(00U
textureQueryLevels(00X
textureQueryLevels(00Y
textureQueryLevels(00Z
textureQueryLevels(00a
textureQueryLevels(00d
textureQueryLevels(00e
textureQueryLevels(00f
textureQueryLevels(00g
textureQueryLevels(00h
textureQueryLevels(00i
textureQueryLevels(00k
textureQueryLevels(00l
textureQueryLevels(00m
textureQueryLevels(00o
textureQueryLevels(00p
textureQueryLevels(00s
textureQueryLevels(00t
textureQueryLevels(00u
textureQueryLevels(00x
textureQueryLod
textureQueryLod(00I10B
textureQueryLod(00J20B
textureQueryLod(00K20B
textureQueryLod(00L10B
textureQueryLod(00R10B
textureQueryLod(00S20B
textureQueryLod(00T20B
textureQueryLod(00U10B
textureQueryLod(00X10B
textureQueryLod(00Y20B
textureQueryLod(00Z20B
textureQueryLod(00a10B
textureQueryLod(00d10B
textureQueryLod(00e20B
textureQueryLod(00f10B
textureQueryLod(00g00B
textureQueryLod(00h00B
textureQueryLod(00i00B
textureQueryLod(00k20B
textureQueryLod(00l20B
textureQueryLod(00m00B
textureQueryLod(00o00B
textureQueryLod(00p00B
textureQueryLod(00s20B
textureQueryLod(00t00B
textureQueryLod(00u00B
textureQueryLod(00x20B
textureSamples
textureSamples and imageSamples
textureSamples(
textureSamples(00P
textureSamples(00Q
textureSamples(00V
textureSamples(00W
textureSamples(00b
textureSamples(00c
textureSize
textureSize(
textureSize(00I00D
textureSize(00J00D
textureSize(00K00D
textureSize(00L00D
textureSize(00M00D
textureSize(00N00D
textureSize(00O
textureSize(00P
textureSize(00Q
textureSize(00R00D
textureSize(00S00D
textureSize(00T00D
textureSize(00U00D
textureSize(00V
textureSize(00W
textureSize(00X00D
textureSize(00Y00D
textureSize(00Z00D
textureSize(00a00D
textureSize(00b
textureSize(00c
textureSize(00d00D
textureSize(00e00D
textureSize(00f00D
textureSize(00g00D
textureSize(00h00D
textureSize(00i00D
textureSize(00j
textureSize(00k00D
textureSize(00l00D
textureSize(00m00D
textureSize(00n
textureSize(00o00D
textureSize(00p00D
textureSize(00q
textureSize(00r
textureSize(00s00D
textureSize(00t00D
textureSize(00u00D
textureSize(00v
textureSize(00w
textureSize(00x00D
textureVideoWEBGL
textureVideoWEBGL(00y10B
texture_env_alpha_scale
texture_env_color
texture_env_mode
texture_env_rgb_scale
tgamma
that allocate pointers must be in Function or Private
that is not a scalar or vector
the 'engine' parameter has an unrecognized value
the list of attributes contains EGL_DMA_BUF_PLANE*_MODIFIER_LO_EXT but not EGL_DMA_BUF_PLANE*_MODIFIER_HI_EXT or vice versa.
the same type as Result Type components
then statement
there is no such layout identifier for this stage taking an assigned value
this instruction is currently limited to 32-bit width
thread constructor failed
thread.cpp
thread::detach failed
thread::join failed
throw
timeAMD
timer.cpp
timestamp collection is not enabled for this surface.
timestamp not supported by surface.
timestamps is NULL.
tk&
tls.cpp
to Device, Workgroup, Invocation, and ShaderCall
to be int or float scalar or vector type
to be int or float vector type
to be the reverse of those of Result Type
to be used only with Fragment, Vertex, TessellationControl, TessellationEvaluation or Geometry execution models.
to be used only with Vertex, TessellationEvaluation, Geometry, or Fragment execution models.
to have 4 components
to index into a structure must be an OpConstant.
to storage image
to the number of columns of Result Type matrix
to the number of elements of Result Type array
to the number of members of Result Type struct
to the size of Result Type vector
together
token pasting (##)
token too long
too complex expressions inside a switch statement
too large for fragment output
too large, must be less than gl_MaxGeometryOutputVertices
too large, must be less than gl_MaxMeshOutputPrimitivesNV
too large, must be less than gl_MaxMeshOutputVerticesNV
too large; see gl_MaxComputeWorkGroupSize
too large; see gl_MaxMeshWorkGroupSizeNV
too large; see gl_MaxTaskWorkGroupSizeNV
too many arguments
too many length or distance symbols
too many storage qualifiers
too many uniforms
tp7
traceNV
traceRayEXT
transform feedback qualifier
translation_unit
transpose
transpose(50B
transpose(60B
transpose(70B
transpose(90B
transpose(A0B
transpose(B0B
transpose(D0B
transpose(E0B
transpose(F0B
trees.c
triangle
triangle order =
triangle_strip
triangleadj
triangles
triangles_adjacency
true
true case
true case is null
trunc
trunc(00B
trunc(00C
trunc(10B
trunc(10C
trunc(20B
trunc(20C
trunc(30B
trunc(30C
truncf
tu:
txG
type ID
type Result Type array
type Result Type matrix
type cannot have precision qualifier
type contains double or 64-bit integer; xfb_offset must be a multiple of 8
type contains half float or 16-bit integer; xfb_offset must be a multiple of 2
type conversion on return values was not explicitly allowed until version 420
type does not match, or is not convertible to, the function's return type
type for RWTexture/RWBuffer
type must be an array:
type of the matrix operand:
type of the vector operand:
type overflows the available 4 components
type requires declaration of default precision qualifier
type requires the Float16 or Float16Buffer capability, or an extension that explicitly enables 16-bit floating point.
type requires the Float64 capability.
type that can be constructed
type. Structure <id>
type_manager.cpp
type_name_list
type_parameter_specifier
type_parameter_specifier_list
type_parameter_specifier_opt
type_specifier_nonarray
typeinfo for __cxxabiv1::__class_type_info
typeinfo for __cxxabiv1::__shim_type_info
typeinfo for __cxxabiv1::__si_class_type_info
typeinfo for __cxxabiv1::__vmi_class_type_info
typeinfo for std::__1::__assoc_sub_state
typeinfo for std::__1::__do_message
typeinfo for std::__1::__future_error_category
typeinfo for std::__1::__generic_error_category
typeinfo for std::__1::__iostream_category
typeinfo for std::__1::__money_get<char>
typeinfo for std::__1::__money_get<wchar_t>
typeinfo for std::__1::__money_put<char>
typeinfo for std::__1::__money_put<wchar_t>
typeinfo for std::__1::__narrow_to_utf8<32ul>
typeinfo for std::__1::__num_get<char>
typeinfo for std::__1::__num_get<wchar_t>
typeinfo for std::__1::__num_get_base
typeinfo for std::__1::__num_put<char>
typeinfo for std::__1::__num_put<wchar_t>
typeinfo for std::__1::__num_put_base
typeinfo for std::__1::__shared_count
typeinfo for std::__1::__stdinbuf<char>
typeinfo for std::__1::__stdinbuf<wchar_t>
typeinfo for std::__1::__stdoutbuf<char>
typeinfo for std::__1::__stdoutbuf<wchar_t>
typeinfo for std::__1::__system_error_category
typeinfo for std::__1::__time_get_c_storage<char>
typeinfo for std::__1::__time_get_c_storage<wchar_t>
typeinfo for std::__1::__time_put
typeinfo for std::__1::__widen_from_utf8<32ul>
typeinfo for std::__1::basic_ios<char, std::__1::char_traits<char> >
typeinfo for std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo for std::__1::basic_istream<char, std::__1::char_traits<char> >
typeinfo for std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo for std::__1::basic_ostream<char, std::__1::char_traits<char> >
typeinfo for std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo for std::__1::basic_streambuf<char, std::__1::char_traits<char> >
typeinfo for std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo for std::__1::codecvt<char, char, __mbstate_t>
typeinfo for std::__1::codecvt<char16_t, char, __mbstate_t>
typeinfo for std::__1::codecvt<char32_t, char, __mbstate_t>
typeinfo for std::__1::codecvt<wchar_t, char, __mbstate_t>
typeinfo for std::__1::codecvt_base
typeinfo for std::__1::collate<char>
typeinfo for std::__1::collate<wchar_t>
typeinfo for std::__1::ctype<char>
typeinfo for std::__1::ctype<wchar_t>
typeinfo for std::__1::ctype_base
typeinfo for std::__1::error_category
typeinfo for std::__1::future_error
typeinfo for std::__1::ios_base
typeinfo for std::__1::ios_base::failure
typeinfo for std::__1::locale::__imp
typeinfo for std::__1::locale::facet
typeinfo for std::__1::messages<char>
typeinfo for std::__1::messages<wchar_t>
typeinfo for std::__1::messages_base
typeinfo for std::__1::money_base
typeinfo for std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo for std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo for std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo for std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo for std::__1::moneypunct<char, false>
typeinfo for std::__1::moneypunct<char, true>
typeinfo for std::__1::moneypunct<wchar_t, false>
typeinfo for std::__1::moneypunct<wchar_t, true>
typeinfo for std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo for std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo for std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo for std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo for std::__1::numpunct<char>
typeinfo for std::__1::numpunct<wchar_t>
typeinfo for std::__1::system_error
typeinfo for std::__1::time_base
typeinfo for std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo for std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo for std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo for std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo for std::bad_alloc
typeinfo for std::bad_exception
typeinfo for std::exception
typeinfo for std::length_error
typeinfo for std::logic_error
typeinfo for std::out_of_range
typeinfo for std::overflow_error
typeinfo for std::runtime_error
typeinfo for std::type_info
typeinfo name for __cxxabiv1::__class_type_info
typeinfo name for __cxxabiv1::__shim_type_info
typeinfo name for __cxxabiv1::__si_class_type_info
typeinfo name for __cxxabiv1::__vmi_class_type_info
typeinfo name for std::__1::__assoc_sub_state
typeinfo name for std::__1::__do_message
typeinfo name for std::__1::__future_error_category
typeinfo name for std::__1::__generic_error_category
typeinfo name for std::__1::__iostream_category
typeinfo name for std::__1::__money_get<char>
typeinfo name for std::__1::__money_get<wchar_t>
typeinfo name for std::__1::__money_put<char>
typeinfo name for std::__1::__money_put<wchar_t>
typeinfo name for std::__1::__narrow_to_utf8<32ul>
typeinfo name for std::__1::__num_get<char>
typeinfo name for std::__1::__num_get<wchar_t>
typeinfo name for std::__1::__num_get_base
typeinfo name for std::__1::__num_put<char>
typeinfo name for std::__1::__num_put<wchar_t>
typeinfo name for std::__1::__num_put_base
typeinfo name for std::__1::__shared_count
typeinfo name for std::__1::__stdinbuf<char>
typeinfo name for std::__1::__stdinbuf<wchar_t>
typeinfo name for std::__1::__stdoutbuf<char>
typeinfo name for std::__1::__stdoutbuf<wchar_t>
typeinfo name for std::__1::__system_error_category
typeinfo name for std::__1::__time_get_c_storage<char>
typeinfo name for std::__1::__time_get_c_storage<wchar_t>
typeinfo name for std::__1::__time_put
typeinfo name for std::__1::__widen_from_utf8<32ul>
typeinfo name for std::__1::basic_ios<char, std::__1::char_traits<char> >
typeinfo name for std::__1::basic_ios<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo name for std::__1::basic_istream<char, std::__1::char_traits<char> >
typeinfo name for std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo name for std::__1::basic_ostream<char, std::__1::char_traits<char> >
typeinfo name for std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo name for std::__1::basic_streambuf<char, std::__1::char_traits<char> >
typeinfo name for std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >
typeinfo name for std::__1::codecvt<char, char, __mbstate_t>
typeinfo name for std::__1::codecvt<char16_t, char, __mbstate_t>
typeinfo name for std::__1::codecvt<char32_t, char, __mbstate_t>
typeinfo name for std::__1::codecvt<wchar_t, char, __mbstate_t>
typeinfo name for std::__1::codecvt_base
typeinfo name for std::__1::collate<char>
typeinfo name for std::__1::collate<wchar_t>
typeinfo name for std::__1::ctype<char>
typeinfo name for std::__1::ctype<wchar_t>
typeinfo name for std::__1::ctype_base
typeinfo name for std::__1::error_category
typeinfo name for std::__1::future_error
typeinfo name for std::__1::ios_base
typeinfo name for std::__1::ios_base::failure
typeinfo name for std::__1::locale::__imp
typeinfo name for std::__1::locale::facet
typeinfo name for std::__1::messages<char>
typeinfo name for std::__1::messages<wchar_t>
typeinfo name for std::__1::messages_base
typeinfo name for std::__1::money_base
typeinfo name for std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo name for std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo name for std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo name for std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo name for std::__1::moneypunct<char, false>
typeinfo name for std::__1::moneypunct<char, true>
typeinfo name for std::__1::moneypunct<wchar_t, false>
typeinfo name for std::__1::moneypunct<wchar_t, true>
typeinfo name for std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo name for std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo name for std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo name for std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo name for std::__1::numpunct<char>
typeinfo name for std::__1::numpunct<wchar_t>
typeinfo name for std::__1::system_error
typeinfo name for std::__1::time_base
typeinfo name for std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo name for std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo name for std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
typeinfo name for std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
typeinfo name for std::bad_alloc
typeinfo name for std::bad_exception
typeinfo name for std::exception
typeinfo name for std::length_error
typeinfo name for std::logic_error
typeinfo name for std::out_of_range
typeinfo name for std::overflow_error
typeinfo name for std::runtime_error
typeinfo name for std::type_info
typeinfo.cpp
typename
types are not allowed in interface blocks
types.cpp
t{/
t|O
u
u$>
u)
u/>
u16
u2
u32vec2
u32vec3
u32vec4
u5
u52
u64
u7
u8
u:
u:>
u;2
uA&
uH<
uM0
uMulExtended
u_5
u_abs
u_abs_diff
u_add_sat
u_clamp
u_hadd
u_mad24
u_mad_hi
u_mad_sat
u_max
u_min
u_mul24
u_mul_hi
u_multiply_alpha
u_offset
u_rhadd
u_scale
u_source_texture
u_source_texture;
u_sub_sat
u_unmultiply_alpha
u_upsample
u`G
uaddCarry
uaddCarry(00E00E00E
uaddCarry(10E10E10E
uaddCarry(20E20E20E
uaddCarry(30E30E30E
ucoopmatNV
uf,
uimage1D
uimage1DArray
uimage2D
uimage2DArray
uimage2DMS
uimage2DMSArray
uimage2DRect
uimage3D
uimageBuffer
uimageCube
uint atomicAdd(coherent volatile inout uint, uint, int, int, int); int atomicAdd(coherent volatile inout  int,  int, int, int, int);uint atomicMin(coherent volatile inout uint, uint, int, int, int); int atomicMin(coherent volatile inout  int,  int, int, int, int);uint atomicMax(coherent volatile inout uint, uint, int, int, int); int atomicMax(coherent volatile inout  int,  int, int, int, int);uint atomicAnd(coherent volatile inout uint, uint, int, int, int); int atomicAnd(coherent volatile inout  int,  int, int, int, int);uint atomicOr (coherent volatile inout uint, uint, int, int, int); int atomicOr (coherent volatile inout  int,  int, int, int, int);uint atomicXor(coherent volatile inout uint, uint, int, int, int); int atomicXor(coherent volatile inout  int,  int, int, int, int);uint atomicExchange(coherent volatile inout uint, uint, int, int, int); int atomicExchange(coherent volatile inout  int,  int, int, int, int);uint atomicCompSwap(coherent volatile inout uint, uint, uint, int, int, int, int, int); int atomicCompSwap(coherent volatile inout  int,  int,  int, int, int, int, int, int);uint atomicLoad(coherent volatile in uint, int, int, int); int atomicLoad(coherent volatile in  int, int, int, int);void atomicStore(coherent volatile out uint, uint, int, int, int);void atomicStore(coherent volatile out  int,  int, int, int, int);
uint atomicCounterAdd(atomic_uint, uint);uint atomicCounterSubtract(atomic_uint, uint);uint atomicCounterMin(atomic_uint, uint);uint atomicCounterMax(atomic_uint, uint);uint atomicCounterAnd(atomic_uint, uint);uint atomicCounterOr(atomic_uint, uint);uint atomicCounterXor(atomic_uint, uint);uint atomicCounterExchange(atomic_uint, uint);uint atomicCounterCompSwap(atomic_uint, uint, uint);
uint atomicCounterIncrement(atomic_uint);uint atomicCounterDecrement(atomic_uint);uint atomicCounter(atomic_uint);
uint countLeadingZeros(uint);uvec2 countLeadingZeros(uvec2);uvec3 countLeadingZeros(uvec3);uvec4 countLeadingZeros(uvec4);uint countTrailingZeros(uint);uvec2 countTrailingZeros(uvec2);uvec3 countTrailingZeros(uvec3);uvec4 countTrailingZeros(uvec4);uint absoluteDifference(int, int);uvec2 absoluteDifference(ivec2, ivec2);uvec3 absoluteDifference(ivec3, ivec3);uvec4 absoluteDifference(ivec4, ivec4);uint16_t absoluteDifference(int16_t, int16_t);u16vec2 absoluteDifference(i16vec2, i16vec2);u16vec3 absoluteDifference(i16vec3, i16vec3);u16vec4 absoluteDifference(i16vec4, i16vec4);uint64_t absoluteDifference(int64_t, int64_t);u64vec2 absoluteDifference(i64vec2, i64vec2);u64vec3 absoluteDifference(i64vec3, i64vec3);u64vec4 absoluteDifference(i64vec4, i64vec4);uint absoluteDifference(uint, uint);uvec2 absoluteDifference(uvec2, uvec2);uvec3 absoluteDifference(uvec3, uvec3);uvec4 absoluteDifference(uvec4, uvec4);uint16_t absoluteDifference(uint16_t, uint16_t);u16vec2 absoluteDifference(u16vec2, u16vec2);u16vec3 absoluteDifference(u16vec3, u16vec3);u16vec4 absoluteDifference(u16vec4, u16vec4);uint64_t absoluteDifference(uint64_t, uint64_t);u64vec2 absoluteDifference(u64vec2, u64vec2);u64vec3 absoluteDifference(u64vec3, u64vec3);u64vec4 absoluteDifference(u64vec4, u64vec4);int addSaturate(int, int);ivec2 addSaturate(ivec2, ivec2);ivec3 addSaturate(ivec3, ivec3);ivec4 addSaturate(ivec4, ivec4);int16_t addSaturate(int16_t, int16_t);i16vec2 addSaturate(i16vec2, i16vec2);i16vec3 addSaturate(i16vec3, i16vec3);i16vec4 addSaturate(i16vec4, i16vec4);int64_t addSaturate(int64_t, int64_t);i64vec2 addSaturate(i64vec2, i64vec2);i64vec3 addSaturate(i64vec3, i64vec3);i64vec4 addSaturate(i64vec4, i64vec4);uint addSaturate(uint, uint);uvec2 addSaturate(uvec2, uvec2);uvec3 addSaturate(uvec3, uvec3);uvec4 addSaturate(uvec4, uvec4);uint16_t addSaturate(uint16_t, uint16_t);u16vec2 addSaturate(u16vec2, u16vec2);u16vec3 addSaturate(u16vec3, u16vec3);u16vec4 addSaturate(u16vec4, u16vec4);uint64_t addSaturate(uint64_t, uint64_t);u64vec2 addSaturate(u64vec2, u64vec2);u64vec3 addSaturate(u64vec3, u64vec3);u64vec4 addSaturate(u64vec4, u64vec4);int subtractSaturate(int, int);ivec2 subtractSaturate(ivec2, ivec2);ivec3 subtractSaturate(ivec3, ivec3);ivec4 subtractSaturate(ivec4, ivec4);int16_t subtractSaturate(int16_t, int16_t);i16vec2 subtractSaturate(i16vec2, i16vec2);i16vec3 subtractSaturate(i16vec3, i16vec3);i16vec4 subtractSaturate(i16vec4, i16vec4);int64_t subtractSaturate(int64_t, int64_t);i64vec2 subtractSaturate(i64vec2, i64vec2);i64vec3 subtractSaturate(i64vec3, i64vec3);i64vec4 subtractSaturate(i64vec4, i64vec4);uint subtractSaturate(uint, uint);uvec2 subtractSaturate(uvec2, uvec2);uvec3 subtractSaturate(uvec3, uvec3);uvec4 subtractSaturate(uvec4, uvec4);uint16_t subtractSaturate(uint16_t, uint16_t);u16vec2 subtractSaturate(u16vec2, u16vec2);u16vec3 subtractSaturate(u16vec3, u16vec3);u16vec4 subtractSaturate(u16vec4, u16vec4);uint64_t subtractSaturate(uint64_t, uint64_t);u64vec2 subtractSaturate(u64vec2, u64vec2);u64vec3 subtractSaturate(u64vec3, u64vec3);u64vec4 subtractSaturate(u64vec4, u64vec4);int average(int, int);ivec2 average(ivec2, ivec2);ivec3 average(ivec3, ivec3);ivec4 average(ivec4, ivec4);int16_t average(int16_t, int16_t);i16vec2 average(i16vec2, i16vec2);i16vec3 average(i16vec3, i16vec3);i16vec4 average(i16vec4, i16vec4);int64_t average(int64_t, int64_t);i64vec2 average(i64vec2, i64vec2);i64vec3 average(i64vec3, i64vec3);i64vec4 average(i64vec4, i64vec4);uint average(uint, uint);uvec2 average(uvec2, uvec2);uvec3 average(uvec3, uvec3);uvec4 average(uvec4, uvec4);uint16_t average(uint16_t, uint16_t);u16vec2 average(u16vec2, u16vec2);u16vec3 average(u16vec3, u16vec3);u16vec4 average(u16vec4, u16vec4);uint64_t average(uint64_t, uint64_t);u64vec2 average(u64vec2, u64vec2);u64vec3 average(u64vec3, u64vec3);u64vec4 average(u64vec4, u64vec4);int averageRounded(int, int);ivec2 averageRounded(ivec2, ivec2);ivec3 averageRounded(ivec3, ivec3);ivec4 averageRounded(ivec4, ivec4);int16_t averageRounded(int16_t, int16_t);i16vec2 averageRounded(i16vec2, i16vec2);i16vec3 averageRounded(i16vec3, i16vec3);i16vec4 averageRounded(i16vec4, i16vec4);int64_t averageRounded(int64_t, int64_t);i64vec2 averageRounded(i64vec2, i64vec2);i64vec3 averageRounded(i64vec3, i64vec3);i64vec4 averageRounded(i64vec4, i64vec4);uint averageRounded(uint, uint);uvec2 averageRounded(uvec2, uvec2);uvec3 averageRounded(uvec3, uvec3);uvec4 averageRounded(uvec4, uvec4);uint16_t averageRounded(uint16_t, uint16_t);u16vec2 averageRounded(u16vec2, u16vec2);u16vec3 averageRounded(u16vec3, u16vec3);u16vec4 averageRounded(u16vec4, u16vec4);uint64_t averageRounded(uint64_t, uint64_t);u64vec2 averageRounded(u64vec2, u64vec2);u64vec3 averageRounded(u64vec3, u64vec3);u64vec4 averageRounded(u64vec4, u64vec4);int multiply32x16(int, int);ivec2 multiply32x16(ivec2, ivec2);ivec3 multiply32x16(ivec3, ivec3);ivec4 multiply32x16(ivec4, ivec4);uint multiply32x16(uint, uint);uvec2 multiply32x16(uvec2, uvec2);uvec3 multiply32x16(uvec3, uvec3);uvec4 multiply32x16(uvec4, uvec4);
uint fragmentMaskFetchAMD(sampler2DMS,       ivec2);uint fragmentMaskFetchAMD(isampler2DMS,      ivec2);uint fragmentMaskFetchAMD(usampler2DMS,      ivec2);uint fragmentMaskFetchAMD(sampler2DMSArray,  ivec3);uint fragmentMaskFetchAMD(isampler2DMSArray, ivec3);uint fragmentMaskFetchAMD(usampler2DMSArray, ivec3);vec4  fragmentFetchAMD(sampler2DMS,       ivec2, uint);ivec4 fragmentFetchAMD(isampler2DMS,      ivec2, uint);uvec4 fragmentFetchAMD(usampler2DMS,      ivec2, uint);vec4  fragmentFetchAMD(sampler2DMSArray,  ivec3, uint);ivec4 fragmentFetchAMD(isampler2DMSArray, ivec3, uint);uvec4 fragmentFetchAMD(usampler2DMSArray, ivec3, uint);
uint fragmentMaskFetchAMD(subpassInputMS);uint fragmentMaskFetchAMD(isubpassInputMS);uint fragmentMaskFetchAMD(usubpassInputMS);vec4  fragmentFetchAMD(subpassInputMS,  uint);ivec4 fragmentFetchAMD(isubpassInputMS, uint);uvec4 fragmentFetchAMD(usubpassInputMS, uint);
uint packSnorm2x16_emu(vec2 v){    #if defined(GL_ARB_shading_language_packing)        return packSnorm2x16(v);    #else        int x = int(round(clamp(v.x, -1.0, 1.0) * 32767.0));        int y = int(round(clamp(v.y, -1.0, 1.0) * 32767.0));        return uint((y << 16) | (x & 0xFFFF));    #endif}
uint packUnorm2x16_emu(vec2 v){    int x = int(round(clamp(v.x, 0.0, 1.0) * 65535.0));    int y = int(round(clamp(v.y, 0.0, 1.0) * 65535.0));    return uint((y << 16) | (x & 0xFFFF));}
uint uaddCarry(highp  uint, highp  uint, out lowp  uint carry);uvec2 uaddCarry(highp uvec2, highp uvec2, out lowp uvec2 carry);uvec3 uaddCarry(highp uvec3, highp uvec3, out lowp uvec3 carry);uvec4 uaddCarry(highp uvec4, highp uvec4, out lowp uvec4 carry); uint usubBorrow(highp  uint, highp  uint, out lowp  uint borrow);uvec2 usubBorrow(highp uvec2, highp uvec2, out lowp uvec2 borrow);uvec3 usubBorrow(highp uvec3, highp uvec3, out lowp uvec3 borrow);uvec4 usubBorrow(highp uvec4, highp uvec4, out lowp uvec4 borrow);void umulExtended(highp  uint, highp  uint, out highp  uint, out highp  uint lsb);void umulExtended(highp uvec2, highp uvec2, out highp uvec2, out highp uvec2 lsb);void umulExtended(highp uvec3, highp uvec3, out highp uvec3, out highp uvec3 lsb);void umulExtended(highp uvec4, highp uvec4, out highp uvec4, out highp uvec4 lsb);void imulExtended(highp   int, highp   int, out highp   int, out highp   int lsb);void imulExtended(highp ivec2, highp ivec2, out highp ivec2, out highp ivec2 lsb);void imulExtended(highp ivec3, highp ivec3, out highp ivec3, out highp ivec3 lsb);void imulExtended(highp ivec4, highp ivec4, out highp ivec4, out highp ivec4 lsb);  int bitfieldReverse(highp   int);ivec2 bitfieldReverse(highp ivec2);ivec3 bitfieldReverse(highp ivec3);ivec4 bitfieldReverse(highp ivec4); uint bitfieldReverse(highp  uint);uvec2 bitfieldReverse(highp uvec2);uvec3 bitfieldReverse(highp uvec3);uvec4 bitfieldReverse(highp uvec4);
uint16BitsToFloat16
uint16BitsToHalf
uint1x1
uint1x2
uint1x3
uint1x4
uint2x1
uint2x2
uint2x3
uint2x4
uint32_t
uint3x1
uint3x2
uint3x3
uint3x4
uint4x1
uint4x2
uint4x3
uint4x4
uint64BitsToDouble
uint64_t atomicMin(coherent volatile inout uint64_t, uint64_t); int64_t atomicMin(coherent volatile inout  int64_t,  int64_t);uint64_t atomicMin(coherent volatile inout uint64_t, uint64_t, int, int, int); int64_t atomicMin(coherent volatile inout  int64_t,  int64_t, int, int, int);uint64_t atomicMax(coherent volatile inout uint64_t, uint64_t); int64_t atomicMax(coherent volatile inout  int64_t,  int64_t);uint64_t atomicMax(coherent volatile inout uint64_t, uint64_t, int, int, int); int64_t atomicMax(coherent volatile inout  int64_t,  int64_t, int, int, int);uint64_t atomicAnd(coherent volatile inout uint64_t, uint64_t); int64_t atomicAnd(coherent volatile inout  int64_t,  int64_t);uint64_t atomicAnd(coherent volatile inout uint64_t, uint64_t, int, int, int); int64_t atomicAnd(coherent volatile inout  int64_t,  int64_t, int, int, int);uint64_t atomicOr (coherent volatile inout uint64_t, uint64_t); int64_t atomicOr (coherent volatile inout  int64_t,  int64_t);uint64_t atomicOr (coherent volatile inout uint64_t, uint64_t, int, int, int); int64_t atomicOr (coherent volatile inout  int64_t,  int64_t, int, int, int);uint64_t atomicXor(coherent volatile inout uint64_t, uint64_t); int64_t atomicXor(coherent volatile inout  int64_t,  int64_t);uint64_t atomicXor(coherent volatile inout uint64_t, uint64_t, int, int, int); int64_t atomicXor(coherent volatile inout  int64_t,  int64_t, int, int, int);uint64_t atomicAdd(coherent volatile inout uint64_t, uint64_t); int64_t atomicAdd(coherent volatile inout  int64_t,  int64_t);uint64_t atomicAdd(coherent volatile inout uint64_t, uint64_t, int, int, int); int64_t atomicAdd(coherent volatile inout  int64_t,  int64_t, int, int, int);uint64_t atomicExchange(coherent volatile inout uint64_t, uint64_t); int64_t atomicExchange(coherent volatile inout  int64_t,  int64_t);uint64_t atomicExchange(coherent volatile inout uint64_t, uint64_t, int, int, int); int64_t atomicExchange(coherent volatile inout  int64_t,  int64_t, int, int, int);uint64_t atomicCompSwap(coherent volatile inout uint64_t, uint64_t, uint64_t); int64_t atomicCompSwap(coherent volatile inout  int64_t,  int64_t,  int64_t);uint64_t atomicCompSwap(coherent volatile inout uint64_t, uint64_t, uint64_t, int, int, int, int, int); int64_t atomicCompSwap(coherent volatile inout  int64_t,  int64_t,  int64_t, int, int, int, int, int);uint64_t atomicLoad(coherent volatile in uint64_t, int, int, int); int64_t atomicLoad(coherent volatile in  int64_t, int, int, int);void atomicStore(coherent volatile out uint64_t, uint64_t, int, int, int);void atomicStore(coherent volatile out  int64_t,  int64_t, int, int, int);
uint64_t ballotARB(bool);float readInvocationARB(float, uint);vec2  readInvocationARB(vec2,  uint);vec3  readInvocationARB(vec3,  uint);vec4  readInvocationARB(vec4,  uint);int   readInvocationARB(int,   uint);ivec2 readInvocationARB(ivec2, uint);ivec3 readInvocationARB(ivec3, uint);ivec4 readInvocationARB(ivec4, uint);uint  readInvocationARB(uint,  uint);uvec2 readInvocationARB(uvec2, uint);uvec3 readInvocationARB(uvec3, uint);uvec4 readInvocationARB(uvec4, uint);float readFirstInvocationARB(float);vec2  readFirstInvocationARB(vec2);vec3  readFirstInvocationARB(vec3);vec4  readFirstInvocationARB(vec4);int   readFirstInvocationARB(int);ivec2 readFirstInvocationARB(ivec2);ivec3 readFirstInvocationARB(ivec3);ivec4 readFirstInvocationARB(ivec4);uint  readFirstInvocationARB(uint);uvec2 readFirstInvocationARB(uvec2);uvec3 readFirstInvocationARB(uvec3);uvec4 readFirstInvocationARB(uvec4);
uintBitsToFloat
uintBitsToFloat(
uintBitsToFloat(00E
uintBitsToFloat(10E
uintBitsToFloat(20E
uintBitsToFloat(30E
umulExtended
umulExtended(00E00E00E00E
umulExtended(10E10E10E10E
umulExtended(20E20E20E20E
umulExtended(30E30E30E30E
unable to declare patch constant function interface variable
unable to find output symbol for Append()
unable to find patch constant function built-in variable
unable to find texture symbol
unable to locate patch function parameter name
uname
unary operator
unary_expression
unary_operator
uncompr.c
undeclared identifier
undeclared identifier declared as invariant or precise
undef
undefined behavior
undefined macro in expression not allowed in es profile
undefined operation for structs containing arrays
undefined operation for structs containing samplers
unexpected
unexpected #elif found after #else
unexpected #elif found without a matching #if
unexpected #else found after another #else
unexpected #else found without a matching #if
unexpected #endif found without a matching #if
unexpected '#'
unexpected end of file found in comment
unexpected end of file found in conditional block
unexpected end of file found in directive
unexpected initializer-list type:
unexpected location
unexpected location; end of argument
unexpected location; end of replacement list
unexpected operator on texture type:
unexpected texture type for .mips[][] operator:
unexpected token
unexpected token after conditional expression
unexpected tokens following #ifdef directive - expected a newline
unexpected tokens following directive
unexpected type parameters
unexpected use of
unexpected use of .length()
unexpected_handler unexpectedly returned
unfold_short_circuits
ungetc
unhandled texture constructor
uniform block binding greater than MAX_UNIFORM_BUFFER_BINDINGS
uniform bool u_multiply_alpha;
uniform bool u_unmultiply_alpha;
uniform buffer
uniform buffer-member align
uniform initializers must be constant
uniform int gl_NumSamples;
uniform lowp int gl_NumSamples;
uniform mat4  gl_ModelViewMatrix;uniform mat4  gl_ProjectionMatrix;uniform mat4  gl_ModelViewProjectionMatrix;uniform mat3  gl_NormalMatrix;uniform mat4  gl_ModelViewMatrixInverse;uniform mat4  gl_ProjectionMatrixInverse;uniform mat4  gl_ModelViewProjectionMatrixInverse;uniform mat4  gl_ModelViewMatrixTranspose;uniform mat4  gl_ProjectionMatrixTranspose;uniform mat4  gl_ModelViewProjectionMatrixTranspose;uniform mat4  gl_ModelViewMatrixInverseTranspose;uniform mat4  gl_ProjectionMatrixInverseTranspose;uniform mat4  gl_ModelViewProjectionMatrixInverseTranspose;uniform float gl_NormalScale;struct gl_PointParameters {float size;float sizeMin;float sizeMax;float fadeThresholdSize;float distanceConstantAttenuation;float distanceLinearAttenuation;float distanceQuadraticAttenuation;};uniform gl_PointParameters gl_Point;struct gl_MaterialParameters {vec4  emission;vec4  ambient;vec4  diffuse;vec4  specular;float shininess;};uniform gl_MaterialParameters  gl_FrontMaterial;uniform gl_MaterialParameters  gl_BackMaterial;struct gl_LightSourceParameters {vec4  ambient;vec4  diffuse;vec4  specular;vec4  position;vec4  halfVector;vec3  spotDirection;float spotExponent;float spotCutoff;float spotCosCutoff;float constantAttenuation;float linearAttenuation;float quadraticAttenuation;};struct gl_LightModelParameters {vec4  ambient;};uniform gl_LightModelParameters  gl_LightModel;struct gl_LightModelProducts {vec4  sceneColor;};uniform gl_LightModelProducts gl_FrontLightModelProduct;uniform gl_LightModelProducts gl_BackLightModelProduct;struct gl_LightProducts {vec4  ambient;vec4  diffuse;vec4  specular;};struct gl_FogParameters {vec4  color;float density;float start;float end;float scale;};uniform gl_FogParameters gl_Fog;
uniform mat4  gl_TextureMatrix[gl_MaxTextureCoords];uniform mat4  gl_TextureMatrixInverse[gl_MaxTextureCoords];uniform mat4  gl_TextureMatrixTranspose[gl_MaxTextureCoords];uniform mat4  gl_TextureMatrixInverseTranspose[gl_MaxTextureCoords];uniform vec4  gl_ClipPlane[gl_MaxClipPlanes];uniform gl_LightSourceParameters  gl_LightSource[gl_MaxLights];uniform gl_LightProducts gl_FrontLightProduct[gl_MaxLights];uniform gl_LightProducts gl_BackLightProduct[gl_MaxLights];uniform vec4  gl_TextureEnvColor[gl_MaxTextureImageUnits];uniform vec4  gl_EyePlaneS[gl_MaxTextureCoords];uniform vec4  gl_EyePlaneT[gl_MaxTextureCoords];uniform vec4  gl_EyePlaneR[gl_MaxTextureCoords];uniform vec4  gl_EyePlaneQ[gl_MaxTextureCoords];uniform vec4  gl_ObjectPlaneS[gl_MaxTextureCoords];uniform vec4  gl_ObjectPlaneT[gl_MaxTextureCoords];uniform vec4  gl_ObjectPlaneR[gl_MaxTextureCoords];uniform vec4  gl_ObjectPlaneQ[gl_MaxTextureCoords];
uniform uint gl_SubGroupSizeARB;flat in uint     gl_SubGroupInvocationARB;flat in uint64_t gl_SubGroupEqMaskARB;flat in uint64_t gl_SubGroupGeMaskARB;flat in uint64_t gl_SubGroupGtMaskARB;flat in uint64_t gl_SubGroupLeMaskARB;flat in uint64_t gl_SubGroupLtMaskARB;
uniform uint gl_SubGroupSizeARB;in uint     gl_SubGroupInvocationARB;in uint64_t gl_SubGroupEqMaskARB;in uint64_t gl_SubGroupGeMaskARB;in uint64_t gl_SubGroupGtMaskARB;in uint64_t gl_SubGroupLeMaskARB;in uint64_t gl_SubGroupLtMaskARB;
uniform vec2 u_offset;
uniform vec2 u_scale;
uniform/buffer blocks require layout(binding=X)
uniform_type_info_autogen.cpp
unify_const_pass.cpp
unimplemented
unimplemented: OpMemberDecorate non-struct type
unimplemented: PCF input patch without entry point input patch parameter
unimplemented: clip/cull not currently implemented for this stage
unimplemented: component-level gather compare
unimplemented: entry point outputs in patch constant function invocation
unimplemented: multiple output patches in patch constant function
unimplemented: partial image updates
unimplemented: residency status
unimplemented: structure type in image or buffer
unimplemented: unhandled type
unimplemented; need ARB_shader_stencil_export
union
unique_lock::unlock: not locked
unknown
unknown atomic operation
unknown attribute.
unknown basic type in image format
unknown blend equation
unknown block storage
unknown built-in variable
unknown color space conversion standard
unknown compression method
unknown geometry shader primitive type
unknown glslang aggregate
unknown glslang binary operation
unknown glslang unary
unknown header flags set
unknown image type in atomic operation
unknown index type
unknown internal image format
unknown matrix packing
unknown object type.
unknown op
unknown operation with no arguments
unknown pack_matrix pragma value
unknown precision qualifier
unknown profile
unknown qualifier
unknown requalification
unknown stage
unknown swizzle selection
unknown type
unknown variable
unmultiplyAlpha
unorm
unorm and snorm only valid in floating point domain
unpack16
unpack32
unpack8
unpackDouble2x32
unpackDouble2x32(00C
unpackFloat2x16
unpackHalf2x16
unpackHalf2x16(00E
unpackInt2x16
unpackInt2x32
unpackInt4x16
unpackSnorm2x16
unpackSnorm2x16(00E
unpackSnorm4x8
unpackSnorm4x8(00E
unpackUint2x16
unpackUint2x32
unpackUint4x16
unpackUnorm2x16
unpackUnorm2x16(00E
unpackUnorm4x8
unpackUnorm4x8(00E
unpack_last_row_separately_for_padding_inclusion
unpack_overlapping_rows_separately_unpack_buffer
unreachable
unrecognized attribute
unrecognized layout identifier, or qualifier requires assignment (e.g., binding = 4)
unrecognized pragma
unrecognized token
unsetenv
unsigned
unsigned int gl::CastFromGLintStateValue<unsigned int, bool>(unsigned int, bool)
unsigned int gl::CastFromGLintStateValue<unsigned int, int>(unsigned int, int)
unsigned int gl::CastFromGLintStateValue<unsigned int, unsigned int>(unsigned int, unsigned int)
unsigned int gl::CastFromStateValue<unsigned int, float>(unsigned int, float)
unsigned int gl::CastFromStateValue<unsigned int, int>(unsigned int, int)
unsigned int gl::CastFromStateValue<unsigned int, unsigned int>(unsigned int, unsigned int)
unsigned int gl::CastQueryValueTo<unsigned int, float>(unsigned int, float)
unsigned int gl::CastQueryValueTo<unsigned int, int>(unsigned int, int)
unsigned int gl::CastQueryValueTo<unsigned int, unsigned int>(unsigned int, unsigned int)
unsigned int std::__1::__function::__policy_invoker<unsigned int (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InstructionFolder::FoldInstructionInternal(spvtools::opt::Instruction*) const::$_0, unsigned int (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
unsigned int std::__1::__num_get_unsigned_integral<unsigned int>(char const*, char const*, unsigned int&, int)
unsigned int std::__1::__sort3<bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&), gl::PackedVarying*>(gl::PackedVarying*, gl::PackedVarying*, gl::PackedVarying*, bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&))
unsigned int std::__1::__sort3<bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&), sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&))
unsigned int std::__1::__sort3<egl::ConfigSorter&, egl::Config const**>(egl::Config const**, egl::Config const**, egl::Config const**, egl::ConfigSorter&)
unsigned int std::__1::__sort3<sh::(anonymous namespace)::TVariableInfoComparer&, sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::(anonymous namespace)::TVariableInfoComparer&)
unsigned int std::__1::__sort3<spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*>(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&)
unsigned int std::__1::__sort3<spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*>(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&)
unsigned int std::__1::__sort3<std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&, gl::PackedVaryingRegister*>(gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&)
unsigned int std::__1::__sort3<std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&)
unsigned int std::__1::__sort4<bool (*&)(char const*, char const*), char const**>(char const**, char const**, char const**, char const**, bool (*&)(char const*, char const*))
unsigned int std::__1::__sort4<bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&), sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&))
unsigned int std::__1::__sort4<egl::ConfigSorter&, egl::Config const**>(egl::Config const**, egl::Config const**, egl::Config const**, egl::Config const**, egl::ConfigSorter&)
unsigned int std::__1::__sort4<sh::(anonymous namespace)::TVariableInfoComparer&, sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::(anonymous namespace)::TVariableInfoComparer&)
unsigned int std::__1::__sort4<spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*>(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&)
unsigned int std::__1::__sort4<spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*>(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&)
unsigned int std::__1::__sort4<spvtools::opt::(anonymous namespace)::DecorationLess&, spvtools::opt::Instruction**>(spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::(anonymous namespace)::DecorationLess&)
unsigned int std::__1::__sort4<spvtools::opt::StripDebugInfoPass::Process()::$_1&, spvtools::opt::Instruction**>(spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::StripDebugInfoPass::Process()::$_1&)
unsigned int std::__1::__sort4<spvtools::opt::analysis::(anonymous namespace)::CompareTwoVectors(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >)::$_0&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**>(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, spvtools::opt::analysis::(anonymous namespace)::CompareTwoVectors(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >)::$_0&)
unsigned int std::__1::__sort4<spvtools::val::(anonymous namespace)::check_interface_variable(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0&, spvtools::val::Function const**>(spvtools::val::Function const**, spvtools::val::Function const**, spvtools::val::Function const**, spvtools::val::Function const**, spvtools::val::(anonymous namespace)::check_interface_variable(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0&)
unsigned int std::__1::__sort4<std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&, gl::PackedVaryingRegister*>(gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&)
unsigned int std::__1::__sort4<std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&)
unsigned int std::__1::__sort5<bool (*&)(char const*, char const*), char const**>(char const**, char const**, char const**, char const**, char const**, bool (*&)(char const*, char const*))
unsigned int std::__1::__sort5<bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&), gl::PackedVarying*>(gl::PackedVarying*, gl::PackedVarying*, gl::PackedVarying*, gl::PackedVarying*, gl::PackedVarying*, bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&))
unsigned int std::__1::__sort5<bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&), sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&))
unsigned int std::__1::__sort5<egl::ConfigSorter&, egl::Config const**>(egl::Config const**, egl::Config const**, egl::Config const**, egl::Config const**, egl::Config const**, egl::ConfigSorter&)
unsigned int std::__1::__sort5<sh::(anonymous namespace)::TVariableInfoComparer&, sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::ShaderVariable*, sh::(anonymous namespace)::TVariableInfoComparer&)
unsigned int std::__1::__sort5<spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*>(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&)
unsigned int std::__1::__sort5<spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*>(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&)
unsigned int std::__1::__sort5<spvtools::opt::(anonymous namespace)::DecorationLess&, spvtools::opt::Instruction**>(spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::(anonymous namespace)::DecorationLess&)
unsigned int std::__1::__sort5<std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&, gl::PackedVaryingRegister*>(gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&)
unsigned int std::__1::__sort5<std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&)
unsigned int std::__1::__sort5<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)
unsigned literal
unsigned long VmaVectorInsertSorted<VmaPointerLess, VmaVector<VmaAllocation_T*, VmaStlAllocator<VmaAllocation_T*> > >(VmaVector<VmaAllocation_T*, VmaStlAllocator<VmaAllocation_T*> >&, VmaVector<VmaAllocation_T*, VmaStlAllocator<VmaAllocation_T*> >::value_type const&)
unsigned long VmaVectorInsertSorted<VmaSuballocationItemSizeLess, VmaVector<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator, VmaStlAllocator<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator> > >(VmaVector<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator, VmaStlAllocator<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator> >&, VmaVector<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator, VmaStlAllocator<VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator> >::value_type const&)
unsigned long gl::CastFromStateValue<unsigned long, unsigned int>(unsigned int, unsigned int)
unsigned long long std::__1::__num_get_unsigned_integral<unsigned long long>(char const*, char const*, unsigned int&, int)
unsigned long std::__1::__hash_table<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::__unordered_map_hasher<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::hash<spvtools::opt::Instruction const*>, true>, std::__1::__unordered_map_equal<spvtools::opt::Instruction const*, std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >, std::__1::equal_to<spvtools::opt::Instruction const*>, true>, std::__1::allocator<std::__1::__hash_value_type<spvtools::opt::Instruction const*, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >::__erase_unique<spvtools::opt::Instruction const*>(spvtools::opt::Instruction const* const&)
unsigned long std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::Instruction*> > >::__erase_unique<unsigned int>(unsigned int const&)
unsigned long std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, spvtools::opt::analysis::Type*> > >::__erase_unique<unsigned int>(unsigned int const&)
unsigned long std::__1::__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > > > >::__erase_unique<unsigned int>(unsigned int const&)
unsigned long std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__erase_unique<unsigned int>(unsigned int const&)
unsigned long std::__1::__num_get_unsigned_integral<unsigned long>(char const*, char const*, unsigned int&, int)
unsigned long std::__1::__tree<glslang::HlslParseContext::tInterstageIoData, std::__1::less<glslang::HlslParseContext::tInterstageIoData>, std::__1::allocator<glslang::HlslParseContext::tInterstageIoData> >::__erase_unique<glslang::HlslParseContext::tInterstageIoData>(glslang::HlslParseContext::tInterstageIoData const&)
unsigned long std::__1::__tree<std::__1::__value_type<spvtools::opt::analysis::Constant const*, unsigned int>, std::__1::__map_value_compare<spvtools::opt::analysis::Constant const*, std::__1::__value_type<spvtools::opt::analysis::Constant const*, unsigned int>, std::__1::less<spvtools::opt::analysis::Constant const*>, true>, std::__1::allocator<std::__1::__value_type<spvtools::opt::analysis::Constant const*, unsigned int> > >::__erase_multi<spvtools::opt::analysis::Constant const*>(spvtools::opt::analysis::Constant const* const&)
unsigned long std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long> > >::__count_unique<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
unsigned long std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__count_unique<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const
unsigned long std::__1::__tree<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*>, spvtools::opt::analysis::UserEntryLess, std::__1::allocator<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*> > >::__erase_unique<std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*> >(std::__1::pair<spvtools::opt::Instruction*, spvtools::opt::Instruction*> const&)
unsigned short std::__1::__num_get_unsigned_integral<unsigned short>(char const*, char const*, unsigned int&, int)
unsized
unsized_srgb_read_pixels_doesnt_transform
unspecified future_errc value
unspecified generic_category error
unspecified iostream_category error
unspecified system_category error
unsupported construction
unsupported domain type
unsupported interpolation qualifier
unsupported locale for standard input
unsupported outputtopology type
unsupported partitioning type
unsupported shader version
unsupported type
unsupported type -
unsupported value
unterminated macro invocation
unterminated mips operator:
updateTraceEventDuration
upgrade_memory_model.cpp
uq7
usampler1D
usampler1DArray
usampler2D
usampler2DArray
usampler2DMS
usampler2DMSArray
usampler2DRect
usampler3D
usamplerBuffer
usamplerCube
use-storage-buffer
use-variable-pointers
use-vulkan-memory-model
use_storage_buffer
use_unused_blocks_with_standard_or_shared_layout
use_vulkan_memory_model
used at end of comment, but this version does not provide line continuation
used at end of comment; the following line is still part of the comment
used in function
used to access transparent buffer backed resources. Such
useless application of layout qualifier
uselocale
uses storage class
using
using ES precision qualifier keyword
using early_fragment_tests
using future keyword
using future non-square matrix type keyword
using future reserved keyword
using future type keyword
using point mode
using post_depth_coverage
ust is null
usubBorrow
usubBorrow(00E00E00E
usubBorrow(10E10E10E
usubBorrow(20E20E20E
usubBorrow(30E30E30E
usubpassInput
usubpassInputMS
ut7
utexture1D
utexture1DArray
utexture2D
utexture2DArray
utexture2DMS
utexture2DMSArray
utexture2DRect
utexture3D
utextureBuffer
utextureCube
utextureCubeArray
util.cpp
utilities.cpp
utility.cpp
uvec
uvec2 clock2x32ARB();uint64_t clockARB();uvec2 clockRealtime2x32EXT();uint64_t clockRealtimeEXT();
uvec2 conversion to reference
uvec4  subgroupPartitionNV(%s);
uz/
u}/
v
v!}
v) {    v = clamp(v, -2.0, 2.0);    v = v * 256.0;    v = sign(v) * floor(abs(v));    return v * 0.00390625;}
v) {    v = clamp(v, -65504.0, 65504.0);
v)>
v/
v2
v7
v8
vK<
vN0
vV5
vW
v[E
v_texcoord = a_texcoord * u_scale + u_offset;
vaC
valarray.cpp
valid for GLES with EGL 1.4 and KHR_create_context. Use
validate.cpp
validate_adjacency.cpp
validate_annotation.cpp
validate_arithmetics.cpp
validate_atomics.cpp
validate_barriers.cpp
validate_bitwise.cpp
validate_builtins.cpp
validate_capability.cpp
validate_cfg.cpp
validate_composites.cpp
validate_constants.cpp
validate_conversion.cpp
validate_debug.cpp
validate_decorations.cpp
validate_derivatives.cpp
validate_execution_limitations.cpp
validate_extensions.cpp
validate_function.cpp
validate_id.cpp
validate_image.cpp
validate_instruction.cpp
validate_interfaces.cpp
validate_layout.cpp
validate_literals.cpp
validate_logicals.cpp
validate_memory.cpp
validate_memory_semantics.cpp
validate_misc.cpp
validate_mode_setting.cpp
validate_non_uniform.cpp
validate_primitives.cpp
validate_scopes.cpp
validate_small_type_uses.cpp
validate_type.cpp
validationEGL.cpp
validationES.cpp
validationES1.cpp
validationES2.cpp
validationES3.cpp
validationES31.cpp
validationES32.cpp
validationESEXT.cpp
validationGL1.cpp
validationGL11.cpp
validationGL12.cpp
validationGL13.cpp
validationGL14.cpp
validationGL15.cpp
validationGL2.cpp
validationGL21.cpp
validationGL3.cpp
validationGL31.cpp
validationGL32.cpp
validationGL33.cpp
validationGL4.cpp
validationGL41.cpp
validationGL42.cpp
validationGL43.cpp
validationGL44.cpp
validationGL45.cpp
validationGL46.cpp
validation_state.cpp
value
value is out of range:
value must be 0 or 1
valueAsInt
valueAsUint
valueBits
valueMask
valueOut
value_number_table.cpp
values is NULL.
variable expected
variable index
variable indexing buffer block array
variable indexing fragment shader output array
variable indexing sampler array
variable indexing uniform block array
variable needs to be a 32-bit float array.
variable needs to be a 32-bit int vector.
variable needs to be a 32-bit int.
variable needs to be a 4-component 32-bit int vector.
variable with qualifier 'const' not initialized; zero initializing
variable_identifier
variables must be typed as OpTypeImage, OpTypeSampler,
variables must be typed as OpTypeStruct, or an array of
variables with qualifier 'const' must be initialized
variables with reference type can't have qualifier 'const'
variant.cpp
varying vec4  gl_Color;varying vec4  gl_SecondaryColor;varying vec4  gl_TexCoord[];varying float gl_FogFragCoord;
vasprintf
vec2 a_texcoord;
vec2 textureQueryLod(
vec2 unpackHalf2x16(highp uint);
vec2 unpackUnorm2x16_emu(uint u){    float x = float(u & 0xFFFFu) / 65535.0;    float y = float(u >> 16) / 65535.0;    return vec2(x, y);}
vec2 v_texcoord;
vec2(1.0)
vec2(textureSize(u_source_texture))
vec4
vec4  gl_ClipVertex;out vec4  gl_FrontColor;out vec4  gl_BackColor;out vec4  gl_FrontSecondaryColor;out vec4  gl_BackSecondaryColor;out vec4  gl_TexCoord[];out float gl_FogFragCoord;
vec4  gl_ClipVertex;varying vec4  gl_FrontColor;varying vec4  gl_BackColor;varying vec4  gl_FrontSecondaryColor;varying vec4  gl_BackSecondaryColor;varying vec4  gl_TexCoord[];varying float gl_FogFragCoord;
vec4  gl_FragCoord;bool  gl_FrontFacing;float gl_FragDepth;
vec4 ftransform();
vec4 gl_ClipVertex;vec4 gl_FrontColor;vec4 gl_BackColor;vec4 gl_FrontSecondaryColor;vec4 gl_BackSecondaryColor;vec4 gl_TexCoord[];float gl_FogFragCoord;
vec4 gl_FragColor;
vec4 gl_Position;float gl_PointSize;
vec4 imageLoad(readonly volatile coherent
vec4 imageLoadLodAMD(readonly volatile coherent
vec4 subpassLoad
vec4 texture1D(sampler1D, float);vec4 texture1DProj(sampler1D, vec2);vec4 texture1DProj(sampler1D, vec4);vec4 shadow1D(sampler1DShadow, vec3);vec4 shadow2D(sampler2DShadow, vec3);vec4 shadow1DProj(sampler1DShadow, vec4);vec4 shadow2DProj(sampler2DShadow, vec4);vec4 texture2DRect(sampler2DRect, vec2);vec4 texture2DRectProj(sampler2DRect, vec3);vec4 texture2DRectProj(sampler2DRect, vec4);vec4 shadow2DRect(sampler2DRectShadow, vec3);vec4 shadow2DRectProj(sampler2DRectShadow, vec4);
vec4 texture1D(sampler1D, float, float);vec4 texture1DProj(sampler1D, vec2, float);vec4 texture1DProj(sampler1D, vec4, float);vec4 shadow1D(sampler1DShadow, vec3, float);vec4 shadow2D(sampler2DShadow, vec3, float);vec4 shadow1DProj(sampler1DShadow, vec4, float);vec4 shadow2DProj(sampler2DShadow, vec4, float);
vec4 texture1DLod(sampler1D, float, float);vec4 texture1DProjLod(sampler1D, vec2, float);vec4 texture1DProjLod(sampler1D, vec4, float);vec4 shadow1DLod(sampler1DShadow, vec3, float);vec4 shadow2DLod(sampler2DShadow, vec3, float);vec4 shadow1DProjLod(sampler1DShadow, vec4, float);vec4 shadow2DProjLod(sampler2DShadow, vec4, float);vec4 texture1DGradARB(sampler1D, float, float, float);vec4 texture1DProjGradARB(sampler1D, vec2, float, float);vec4 texture1DProjGradARB(sampler1D, vec4, float, float);vec4 texture2DGradARB(sampler2D, vec2, vec2, vec2);vec4 texture2DProjGradARB(sampler2D, vec3, vec2, vec2);vec4 texture2DProjGradARB(sampler2D, vec4, vec2, vec2);vec4 texture3DGradARB(sampler3D, vec3, vec3, vec3);vec4 texture3DProjGradARB(sampler3D, vec4, vec3, vec3);vec4 textureCubeGradARB(samplerCube, vec3, vec3, vec3);vec4 shadow1DGradARB(sampler1DShadow, vec3, float, float);vec4 shadow1DProjGradARB( sampler1DShadow, vec4, float, float);vec4 shadow2DGradARB(sampler2DShadow, vec3, vec2, vec2);vec4 shadow2DProjGradARB( sampler2DShadow, vec4, vec2, vec2);vec4 texture2DRectGradARB(sampler2DRect, vec2, vec2, vec2);vec4 texture2DRectProjGradARB( sampler2DRect, vec3, vec2, vec2);vec4 texture2DRectProjGradARB( sampler2DRect, vec4, vec2, vec2);vec4 shadow2DRectGradARB( sampler2DRectShadow, vec3, vec2, vec2);vec4 shadow2DRectProjGradARB(sampler2DRectShadow, vec4, vec2, vec2);
vec4 texture2D(sampler2D, vec2);vec4 texture2DProj(sampler2D, vec3);vec4 texture2DProj(sampler2D, vec4);vec4 texture3D(sampler3D, vec3);vec4 texture3DProj(sampler3D, vec4);vec4 textureCube(samplerCube, vec3);
vec4 texture2D(sampler2D, vec2, float);vec4 texture2DProj(sampler2D, vec3, float);vec4 texture2DProj(sampler2D, vec4, float);vec4 texture3D(sampler3D, vec3, float);vec4 texture3DProj(sampler3D, vec4, float);vec4 textureCube(samplerCube, vec3, float);
vec4 texture2D(samplerExternalOES, vec2 coord);vec4 texture2DProj(samplerExternalOES, vec3);vec4 texture2DProj(samplerExternalOES, vec4);
vec4 texture2DGradEXT(sampler2D, vec2, vec2, vec2);vec4 texture2DProjGradEXT(sampler2D, vec3, vec2, vec2);vec4 texture2DProjGradEXT(sampler2D, vec4, vec2, vec2);vec4 textureCubeGradEXT(samplerCube, vec3, vec3, vec3);float shadow2DEXT(sampler2DShadow, vec3);float shadow2DProjEXT(sampler2DShadow, vec4);
vec4 texture2DLod(sampler2D, vec2, float);vec4 texture2DProjLod(sampler2D, vec3, float);vec4 texture2DProjLod(sampler2D, vec4, float);vec4 texture3DLod(sampler3D, vec3, float);vec4 texture3DProjLod(sampler3D, vec4, float);vec4 textureCubeLod(samplerCube, vec3, float);
vec4 texture2DLodEXT(sampler2D, vec2, float);vec4 texture2DProjLodEXT(sampler2D, vec3, float);vec4 texture2DProjLodEXT(sampler2D, vec4, float);vec4 textureCubeLodEXT(samplerCube, vec3, float);
vec4 unpackSnorm4x8(highp uint);vec4 unpackUnorm4x8(highp uint);
vector field selection out of range
vector index out of range '%d'
vector operand size:
vector scale second child into first child
vector size of the right operand:
vector swizzle
vector swizzle (
vector swizzle selection out of range
vector swizzle selectors not from the same set
vector swizzle too long
vector-dce
vector-scale
vector-times-matrix
vector.cpp
vector_dce.cpp
version
version not supported
vertex
vertex index
vertex input arrays
vertex input cannot be further qualified
vertex output block
vertex shader output cannot be an array of arrays
vertex spacing =
vertex-shader `double` type
vertex-shader `double` type input
vertex-shader array-of-array output
vertex-shader array-of-struct output
vertex-shader struct output
vertex-shader struct output containing an array
vertex-shader struct output containing structure
vertex_id_does_not_include_base_vertex
vfG
vfprintf
vhG
view port array2
viewport
virtual
virtual thunk to std::__1::basic_iostream<char, std::__1::char_traits<char> >::~basic_iostream()
virtual thunk to std::__1::basic_istream<char, std::__1::char_traits<char> >::~basic_istream()
virtual thunk to std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_istream()
virtual thunk to std::__1::basic_istringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_istringstream()
virtual thunk to std::__1::basic_ostream<char, std::__1::char_traits<char> >::~basic_ostream()
virtual thunk to std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >::~basic_ostream()
virtual thunk to std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_ostringstream()
virtual thunk to std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >::~basic_stringstream()
vkAcquireNextImage2KHR
vkAcquireNextImageKHR
vkAcquirePerformanceConfigurationINTEL
vkAcquireProfilingLockKHR
vkAllocateCommandBuffers
vkAllocateDescriptorSets
vkAllocateMemory
vkBeginCommandBuffer
vkBindAccelerationStructureMemoryNV
vkBindBufferMemory
vkBindBufferMemory2
vkBindBufferMemory2KHR
vkBindImageMemory
vkBindImageMemory2
vkBindImageMemory2KHR
vkCmdBeginConditionalRenderingEXT
vkCmdBeginDebugUtilsLabelEXT
vkCmdBeginQuery
vkCmdBeginQueryIndexedEXT
vkCmdBeginRenderPass
vkCmdBeginRenderPass2KHR
vkCmdBeginTransformFeedbackEXT
vkCmdBindDescriptorSets
vkCmdBindIndexBuffer
vkCmdBindPipeline
vkCmdBindShadingRateImageNV
vkCmdBindTransformFeedbackBuffersEXT
vkCmdBindVertexBuffers
vkCmdBlitImage
vkCmdBlitImage with flipped coordinates blits incorrectly.
vkCmdBuildAccelerationStructureNV
vkCmdClearAttachments
vkCmdClearColorImage
vkCmdClearDepthStencilImage
vkCmdCopyAccelerationStructureNV
vkCmdCopyBuffer
vkCmdCopyBufferToImage
vkCmdCopyImage
vkCmdCopyImageToBuffer
vkCmdCopyQueryPoolResults
vkCmdDebugMarkerBeginEXT
vkCmdDebugMarkerEndEXT
vkCmdDebugMarkerInsertEXT
vkCmdDispatch
vkCmdDispatchBase
vkCmdDispatchBaseKHR
vkCmdDispatchIndirect
vkCmdDraw
vkCmdDrawIndexed
vkCmdDrawIndexedIndirect
vkCmdDrawIndexedIndirectCountAMD
vkCmdDrawIndexedIndirectCountKHR
vkCmdDrawIndirect
vkCmdDrawIndirectByteCountEXT
vkCmdDrawIndirectCountAMD
vkCmdDrawIndirectCountKHR
vkCmdDrawMeshTasksIndirectCountNV
vkCmdDrawMeshTasksIndirectNV
vkCmdDrawMeshTasksNV
vkCmdEndConditionalRenderingEXT
vkCmdEndDebugUtilsLabelEXT
vkCmdEndQuery
vkCmdEndQueryIndexedEXT
vkCmdEndRenderPass
vkCmdEndRenderPass2KHR
vkCmdEndTransformFeedbackEXT
vkCmdExecuteCommands
vkCmdFillBuffer
vkCmdInsertDebugUtilsLabelEXT
vkCmdNextSubpass
vkCmdNextSubpass2KHR
vkCmdPipelineBarrier
vkCmdPushConstants
vkCmdPushDescriptorSetKHR
vkCmdPushDescriptorSetWithTemplateKHR
vkCmdResetEvent
vkCmdResetQueryPool
vkCmdResolveImage
vkCmdSetBlendConstants
vkCmdSetCheckpointNV
vkCmdSetCoarseSampleOrderNV
vkCmdSetDepthBias
vkCmdSetDepthBounds
vkCmdSetDeviceMask
vkCmdSetDeviceMaskKHR
vkCmdSetDiscardRectangleEXT
vkCmdSetEvent
vkCmdSetExclusiveScissorNV
vkCmdSetLineStippleEXT
vkCmdSetLineWidth
vkCmdSetPerformanceMarkerINTEL
vkCmdSetPerformanceOverrideINTEL
vkCmdSetPerformanceStreamMarkerINTEL
vkCmdSetSampleLocationsEXT
vkCmdSetScissor
vkCmdSetStencilCompareMask
vkCmdSetStencilReference
vkCmdSetStencilWriteMask
vkCmdSetViewport
vkCmdSetViewportShadingRatePaletteNV
vkCmdSetViewportWScalingNV
vkCmdTraceRaysNV
vkCmdUpdateBuffer
vkCmdWaitEvents
vkCmdWriteAccelerationStructuresPropertiesNV
vkCmdWriteBufferMarkerAMD
vkCmdWriteTimestamp
vkCompileDeferredNV
vkCreateAccelerationStructureNV
vkCreateBuffer
vkCreateBufferView
vkCreateCommandPool
vkCreateComputePipelines
vkCreateDebugReportCallbackEXT
vkCreateDebugUtilsMessengerEXT
vkCreateDescriptorPool
vkCreateDescriptorSetLayout
vkCreateDescriptorUpdateTemplate
vkCreateDescriptorUpdateTemplateKHR
vkCreateDevice
vkCreateDisplayModeKHR
vkCreateDisplayPlaneSurfaceKHR
vkCreateEvent
vkCreateFence
vkCreateFramebuffer
vkCreateGraphicsPipelines
vkCreateHeadlessSurfaceEXT
vkCreateImage
vkCreateImageView
vkCreateInstance
vkCreatePipelineCache
vkCreatePipelineLayout
vkCreateQueryPool
vkCreateRayTracingPipelinesNV
vkCreateRenderPass
vkCreateRenderPass2KHR
vkCreateSampler
vkCreateSamplerYcbcrConversion
vkCreateSamplerYcbcrConversionKHR
vkCreateSemaphore
vkCreateShaderModule
vkCreateSharedSwapchainsKHR
vkCreateSwapchainKHR
vkCreateValidationCacheEXT
vkCreateXcbSurfaceKHR
vkDebugMarkerSetObjectNameEXT
vkDebugMarkerSetObjectTagEXT
vkDebugReportMessageEXT
vkDestroyAccelerationStructureNV
vkDestroyBuffer
vkDestroyBufferView
vkDestroyCommandPool
vkDestroyDebugReportCallbackEXT
vkDestroyDebugUtilsMessengerEXT
vkDestroyDescriptorPool
vkDestroyDescriptorSetLayout
vkDestroyDescriptorUpdateTemplate
vkDestroyDescriptorUpdateTemplateKHR
vkDestroyDevice
vkDestroyEvent
vkDestroyFence
vkDestroyFramebuffer
vkDestroyImage
vkDestroyImageView
vkDestroyInstance
vkDestroyPipeline
vkDestroyPipelineCache
vkDestroyPipelineLayout
vkDestroyQueryPool
vkDestroyRenderPass
vkDestroySampler
vkDestroySamplerYcbcrConversion
vkDestroySamplerYcbcrConversionKHR
vkDestroySemaphore
vkDestroyShaderModule
vkDestroySurfaceKHR
vkDestroySwapchainKHR
vkDestroyValidationCacheEXT
vkDeviceWaitIdle
vkDisplayPowerControlEXT
vkEndCommandBuffer
vkEnumerateDeviceExtensionProperties
vkEnumerateDeviceLayerProperties
vkEnumerateInstanceExtensionProperties
vkEnumerateInstanceLayerProperties
vkEnumerateInstanceVersion
vkEnumeratePhysicalDeviceGroups
vkEnumeratePhysicalDeviceGroupsKHR
vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR
vkEnumeratePhysicalDevices
vkFlushMappedMemoryRanges
vkFreeCommandBuffers
vkFreeDescriptorSets
vkFreeMemory
vkGetAccelerationStructureHandleNV
vkGetAccelerationStructureMemoryRequirementsNV
vkGetBufferDeviceAddressEXT
vkGetBufferDeviceAddressKHR
vkGetBufferMemoryRequirements
vkGetBufferMemoryRequirements2
vkGetBufferMemoryRequirements2KHR
vkGetBufferOpaqueCaptureAddressKHR
vkGetCalibratedTimestampsEXT
vkGetDescriptorSetLayoutSupport
vkGetDescriptorSetLayoutSupportKHR
vkGetDeviceGroupPeerMemoryFeatures
vkGetDeviceGroupPeerMemoryFeaturesKHR
vkGetDeviceGroupPresentCapabilitiesKHR
vkGetDeviceGroupSurfacePresentModesKHR
vkGetDeviceMemoryCommitment
vkGetDeviceMemoryOpaqueCaptureAddressKHR
vkGetDeviceProcAddr
vkGetDeviceQueue
vkGetDeviceQueue2
vkGetDisplayModeProperties2KHR
vkGetDisplayModePropertiesKHR
vkGetDisplayPlaneCapabilities2KHR
vkGetDisplayPlaneCapabilitiesKHR
vkGetDisplayPlaneSupportedDisplaysKHR
vkGetEventStatus
vkGetFenceFdKHR
vkGetFenceStatus
vkGetImageDrmFormatModifierPropertiesEXT
vkGetImageMemoryRequirements
vkGetImageMemoryRequirements2
vkGetImageMemoryRequirements2KHR
vkGetImageSparseMemoryRequirements
vkGetImageSparseMemoryRequirements2
vkGetImageSparseMemoryRequirements2KHR
vkGetImageSubresourceLayout
vkGetImageViewHandleNVX
vkGetInstanceProcAddr
vkGetMemoryFdKHR
vkGetMemoryFdPropertiesKHR
vkGetMemoryHostPointerPropertiesEXT
vkGetPastPresentationTimingGOOGLE
vkGetPerformanceParameterINTEL
vkGetPhysicalDeviceCalibrateableTimeDomainsEXT
vkGetPhysicalDeviceCooperativeMatrixPropertiesNV
vkGetPhysicalDeviceDisplayPlaneProperties2KHR
vkGetPhysicalDeviceDisplayPlanePropertiesKHR
vkGetPhysicalDeviceDisplayProperties2KHR
vkGetPhysicalDeviceDisplayPropertiesKHR
vkGetPhysicalDeviceExternalBufferProperties
vkGetPhysicalDeviceExternalBufferPropertiesKHR
vkGetPhysicalDeviceExternalFenceProperties
vkGetPhysicalDeviceExternalFencePropertiesKHR
vkGetPhysicalDeviceExternalImageFormatPropertiesNV
vkGetPhysicalDeviceExternalSemaphoreProperties
vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
vkGetPhysicalDeviceFeatures
vkGetPhysicalDeviceFeatures2
vkGetPhysicalDeviceFeatures2KHR
vkGetPhysicalDeviceFormatProperties
vkGetPhysicalDeviceFormatProperties2
vkGetPhysicalDeviceFormatProperties2KHR
vkGetPhysicalDeviceImageFormatProperties
vkGetPhysicalDeviceImageFormatProperties2
vkGetPhysicalDeviceImageFormatProperties2KHR
vkGetPhysicalDeviceMemoryProperties
vkGetPhysicalDeviceMemoryProperties2
vkGetPhysicalDeviceMemoryProperties2KHR
vkGetPhysicalDeviceMultisamplePropertiesEXT
vkGetPhysicalDevicePresentRectanglesKHR
vkGetPhysicalDeviceProperties
vkGetPhysicalDeviceProperties2
vkGetPhysicalDeviceProperties2KHR
vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR
vkGetPhysicalDeviceQueueFamilyProperties
vkGetPhysicalDeviceQueueFamilyProperties2
vkGetPhysicalDeviceQueueFamilyProperties2KHR
vkGetPhysicalDeviceSparseImageFormatProperties
vkGetPhysicalDeviceSparseImageFormatProperties2
vkGetPhysicalDeviceSparseImageFormatProperties2KHR
vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV
vkGetPhysicalDeviceSurfaceCapabilities2EXT
vkGetPhysicalDeviceSurfaceCapabilities2KHR
vkGetPhysicalDeviceSurfaceCapabilitiesKHR
vkGetPhysicalDeviceSurfaceFormats2KHR
vkGetPhysicalDeviceSurfaceFormatsKHR
vkGetPhysicalDeviceSurfacePresentModesKHR
vkGetPhysicalDeviceSurfaceSupportKHR
vkGetPhysicalDeviceToolPropertiesEXT
vkGetPhysicalDeviceXcbPresentationSupportKHR
vkGetPipelineCacheData
vkGetPipelineExecutableInternalRepresentationsKHR
vkGetPipelineExecutablePropertiesKHR
vkGetPipelineExecutableStatisticsKHR
vkGetQueryPoolResults
vkGetQueueCheckpointDataNV
vkGetRayTracingShaderGroupHandlesNV
vkGetRefreshCycleDurationGOOGLE
vkGetRenderAreaGranularity
vkGetSemaphoreCounterValueKHR
vkGetSemaphoreFdKHR
vkGetShaderInfoAMD
vkGetSwapchainCounterEXT
vkGetSwapchainImagesKHR
vkGetSwapchainStatusKHR
vkGetValidationCacheDataEXT
vkImportFenceFdKHR
vkImportSemaphoreFdKHR
vkImportSemaphoreZirconHandleFUCHSIA
vkInitializePerformanceApiINTEL
vkInvalidateMappedMemoryRanges
vkMapMemory
vkMergePipelineCaches
vkMergeValidationCachesEXT
vkQueueBeginDebugUtilsLabelEXT
vkQueueBindSparse
vkQueueEndDebugUtilsLabelEXT
vkQueueInsertDebugUtilsLabelEXT
vkQueuePresentKHR
vkQueueSetPerformanceConfigurationINTEL
vkQueueSubmit
vkQueueWaitIdle
vkRegisterDeviceEventEXT
vkRegisterDisplayEventEXT
vkReleaseDisplayEXT
vkReleasePerformanceConfigurationINTEL
vkReleaseProfilingLockKHR
vkResetCommandBuffer
vkResetCommandPool
vkResetDescriptorPool
vkResetEvent
vkResetFences
vkResetQueryPoolEXT
vkSetDebugUtilsObjectNameEXT
vkSetDebugUtilsObjectTagEXT
vkSetEvent
vkSetHdrMetadataEXT
vkSetLocalDimmingAMD
vkSignalSemaphoreKHR
vkSubmitDebugUtilsMessageEXT
vkTrimCommandPool
vkTrimCommandPoolKHR
vkUninitializePerformanceApiINTEL
vkUnmapMemory
vkUpdateDescriptorSetWithTemplate
vkUpdateDescriptorSetWithTemplateKHR
vkUpdateDescriptorSets
vkWaitForFences
vkWaitSemaphoresKHR
vk_cache_utils.cpp
vk_caps_utils.cpp
vk_format_table_autogen.cpp
vk_format_utils.cpp
vk_helpers.cpp
vk_internal_shaders_autogen.cpp
vk_mandatory_format_support_table_autogen.cpp
vk_mem_alloc_wrapper.cpp
vk_utils.cpp
vlG
vload_half
vload_halfn
vloada_halfn
vloadn
vma::CreateBuffer(VmaAllocator_T*, VkBufferCreateInfo const*, unsigned int, unsigned int, bool, unsigned int*, VkBuffer_T**, VmaAllocation_T**)
vma::DestroyAllocator(VmaAllocator_T*)
vma::FindMemoryTypeIndexForBufferInfo(VmaAllocator_T*, VkBufferCreateInfo const*, unsigned int, unsigned int, bool, unsigned int*)
vma::FlushAllocation(VmaAllocator_T*, VmaAllocation_T*, unsigned long, unsigned long)
vma::FreeMemory(VmaAllocator_T*, VmaAllocation_T*)
vma::GetMemoryTypeProperties(VmaAllocator_T*, unsigned int, unsigned int*)
vma::InitAllocator(VkPhysicalDevice_T*, VkDevice_T*, VkInstance_T*, unsigned int, VmaAllocator_T**)
vma::InvalidateAllocation(VmaAllocator_T*, VmaAllocation_T*, unsigned long, unsigned long)
vma::MapMemory(VmaAllocator_T*, VmaAllocation_T*, void**)
vma::UnmapMemory(VmaAllocator_T*, VmaAllocation_T*)
vmaCreateBuffer
vmaFindMemoryTypeIndex
void EmitStreamVertex(int);void EndStreamPrimitive(int);
void EmitVertex();void EndPrimitive();
void angle::GenerateMip<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::GenerateMip<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<float, 0u, 0u, 0u, 1065353216u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<int, 0u, 0u, 0u, 1u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<short, 0u, 0u, 0u, 1u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<signed char, 0u, 0u, 0u, 127u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<signed char, 0u, 0u, 0u, 1u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<unsigned char, 0u, 0u, 0u, 1u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<unsigned char, 0u, 0u, 0u, 255u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<unsigned int, 0u, 0u, 0u, 1u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<unsigned short, 0u, 0u, 0u, 15360u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Initialize4ComponentData<unsigned short, 0u, 0u, 0u, 1u>(unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Load32FTo16F<1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Load32FTo16F<2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::Load32FTo16F<4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<10ul, 10ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<10ul, 5ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<10ul, 6ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<10ul, 8ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<12ul, 10ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<12ul, 12ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<3ul, 3ul, 3ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<4ul, 3ul, 3ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<4ul, 4ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<4ul, 4ul, 1ul, 8ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<4ul, 4ul, 3ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<4ul, 4ul, 4ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<5ul, 4ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<5ul, 4ul, 4ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<5ul, 5ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<5ul, 5ul, 4ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<5ul, 5ul, 5ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<6ul, 5ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<6ul, 5ul, 5ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<6ul, 6ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<6ul, 6ul, 5ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<6ul, 6ul, 6ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<8ul, 5ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<8ul, 6ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadCompressedToNative<8ul, 8ul, 1ul, 16ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<float, 1065353216u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<int, 1u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<short, 1u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<signed char, 127u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<signed char, 1u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<unsigned char, 1u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<unsigned char, 255u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<unsigned int, 1u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<unsigned short, 15360u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<unsigned short, 1u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<unsigned short, 32767u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative3To4<unsigned short, 65535u>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<float, 1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<float, 2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<float, 3ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<float, 4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<int, 1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<int, 2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<int, 3ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<int, 4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<short, 1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<short, 2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<short, 3ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<short, 4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<signed char, 1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<signed char, 2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<signed char, 3ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<signed char, 4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned char, 1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned char, 2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned char, 3ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned char, 4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned int, 1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned int, 2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned int, 3ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned int, 4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned short, 1ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned short, 2ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned short, 3ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::LoadToNative<unsigned short, 4ul>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::ReadColor<angle::A16F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::A1R5G5B5, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::A32F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::A4R4G4B4, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::A8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::B5G6R5, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::B8G8R8A8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::B8G8R8X8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::L16A16F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::L16F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::L32A32F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::L32F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::L8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::L8A8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R10G10B10A2, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R10G10B10A2, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R10G10B10A2S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R10G10B10A2S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R10G10B10X2, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R11G11B10F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16A16, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16A16, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16A16F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16A16S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16A16S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16B16S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16G16S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R16S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32A32, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32A32, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32A32F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32A32S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32A32S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32B32S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32F, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32G32S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R32S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R4G4B4A4, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R5G5B5A1, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R5G6B5, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8A8, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8A8, unsigned int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8A8S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8A8S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8A8SRGB, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8B8S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8G8S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8S, float>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R8S, int>(unsigned char const*, unsigned char*)
void angle::ReadColor<angle::R9G9B9E5, float>(unsigned char const*, unsigned char*)
void angle::ReadDepthStencil<angle::D16>(unsigned char const*, unsigned char*)
void angle::ReadDepthStencil<angle::D24S8>(unsigned char const*, unsigned char*)
void angle::ReadDepthStencil<angle::D24X8>(unsigned char const*, unsigned char*)
void angle::ReadDepthStencil<angle::D32>(unsigned char const*, unsigned char*)
void angle::ReadDepthStencil<angle::D32F>(unsigned char const*, unsigned char*)
void angle::ReadDepthStencil<angle::D32FS8X24>(unsigned char const*, unsigned char*)
void angle::ReadDepthStencil<angle::S8>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::A16F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::A1R5G5B5, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::A32F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::A4R4G4B4, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::A8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::B5G6R5, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::B8G8R8A8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::B8G8R8X8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::L16A16F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::L16F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::L32A32F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::L32F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::L8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::L8A8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R10G10B10A2, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R10G10B10A2, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R10G10B10A2S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R10G10B10A2S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R10G10B10X2, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R11G11B10F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16A16, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16A16, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16A16F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16A16S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16A16S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16B16S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16G16S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R16S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32A32, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32A32, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32A32F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32A32S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32A32S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32B32S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32F, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32G32S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R32S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R4G4B4A4, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R5G5B5A1, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R5G6B5, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8A8, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8A8, unsigned int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8A8S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8A8S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8A8SRGB, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8B8S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8G8S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8S, float>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R8S, int>(unsigned char const*, unsigned char*)
void angle::WriteColor<angle::R9G9B9E5, float>(unsigned char const*, unsigned char*)
void angle::WriteDepthStencil<angle::D16>(unsigned char const*, unsigned char*)
void angle::WriteDepthStencil<angle::D24S8>(unsigned char const*, unsigned char*)
void angle::WriteDepthStencil<angle::D24X8>(unsigned char const*, unsigned char*)
void angle::WriteDepthStencil<angle::D32>(unsigned char const*, unsigned char*)
void angle::WriteDepthStencil<angle::D32F>(unsigned char const*, unsigned char*)
void angle::WriteDepthStencil<angle::D32FS8X24>(unsigned char const*, unsigned char*)
void angle::WriteDepthStencil<angle::S8>(unsigned char const*, unsigned char*)
void angle::priv::GenerateMip_X<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_X<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XY<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XYZ<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_XZ<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Y<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_YZ<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::A1R5G5B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::A4R4G4B4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::B5G6R5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::B8G8R8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::B8G8R8X8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::L16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::L16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::L32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::L32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::L8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::L8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R10G10B10A2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R10G10B10A2S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R10G10B10X2>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R11G11B10F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16B16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16B16A16>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16B16A16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16B16A16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16B16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16B16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16G16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R16S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32B32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32B32A32>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32B32A32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32B32A32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32B32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32B32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32F>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32G32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R32S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R4G4B4A4>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R5G5B5A1>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R5G6B5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8G8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8G8B8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8G8B8A8>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8G8B8A8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8G8B8A8SRGB>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8G8B8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8G8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R8S>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void angle::priv::GenerateMip_Z<angle::R9G9B9E5>(unsigned long, unsigned long, unsigned long, unsigned char const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned char*, unsigned long, unsigned long)
void barrier();
void beginInvocationInterlockARB(void);void endInvocationInterlockARB(void);
void controlBarrier(int, int, int, int);void memoryBarrier(int, int, int);
void coopMatLoadNV(out fcoopmatNV m, volatile coherent float16_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out fcoopmatNV m, volatile coherent float[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out fcoopmatNV m, volatile coherent uint8_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out fcoopmatNV m, volatile coherent uint16_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out fcoopmatNV m, volatile coherent uint[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out fcoopmatNV m, volatile coherent uint64_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out fcoopmatNV m, volatile coherent uvec2[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out fcoopmatNV m, volatile coherent uvec4[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent float16_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent float[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent float64_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent uint8_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent uint16_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent uint[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent uint64_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent uvec2[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(fcoopmatNV m, volatile coherent uvec4[] buf, uint element, uint stride, bool colMajor);fcoopmatNV coopMatMulAddNV(fcoopmatNV A, fcoopmatNV B, fcoopmatNV C);void coopMatLoadNV(out icoopmatNV m, volatile coherent int8_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent int16_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent int[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent int64_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent ivec2[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent ivec4[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent uint8_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent uint16_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent uint[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent uint64_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent uvec2[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out icoopmatNV m, volatile coherent uvec4[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent int8_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent int16_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent int[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent int64_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent ivec2[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent ivec4[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent uint8_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent uint16_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent uint[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent uint64_t[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent uvec2[] buf, uint element, uint stride, bool colMajor);void coopMatLoadNV(out ucoopmatNV m, volatile coherent uvec4[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent int8_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent int16_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent int[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent int64_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent ivec2[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent ivec4[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent uint8_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent uint16_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent uint[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent uint64_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent uvec2[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(icoopmatNV m, volatile coherent uvec4[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent int8_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent int16_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent int[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent int64_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent ivec2[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent ivec4[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent uint8_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent uint16_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent uint[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent uint64_t[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent uvec2[] buf, uint element, uint stride, bool colMajor);void coopMatStoreNV(ucoopmatNV m, volatile coherent uvec4[] buf, uint element, uint stride, bool colMajor);icoopmatNV coopMatMulAddNV(icoopmatNV A, icoopmatNV B, icoopmatNV C);ucoopmatNV coopMatMulAddNV(ucoopmatNV A, ucoopmatNV B, ucoopmatNV C);
void debugPrintfEXT();
void function cannot return a value
void gl::(anonymous namespace)::SetSamplerParameterBase<false, float>(gl::Context*, gl::Sampler*, unsigned int, float const*)
void gl::(anonymous namespace)::SetSamplerParameterBase<false, int>(gl::Context*, gl::Sampler*, unsigned int, int const*)
void gl::(anonymous namespace)::SetTexParameterBase<false, false, float>(gl::Context*, gl::Texture*, unsigned int, float const*)
void gl::(anonymous namespace)::SetTexParameterBase<false, false, int>(gl::Context*, gl::Texture*, unsigned int, int const*)
void gl::(anonymous namespace)::SetTexParameterBase<false, true, int>(gl::Context*, gl::Texture*, unsigned int, int const*)
void gl::BinaryInputStream::readIntVector<unsigned int, unsigned int>(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*)
void gl::CastIndexedStateValues<int>(gl::Context*, unsigned int, unsigned int, unsigned int, unsigned int, int*)
void gl::CastIndexedStateValues<long>(gl::Context*, unsigned int, unsigned int, unsigned int, unsigned int, long*)
void gl::CastIndexedStateValues<unsigned char>(gl::Context*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)
void gl::CastStateValues<float>(gl::Context const*, unsigned int, unsigned int, unsigned int, float*)
void gl::CastStateValues<int>(gl::Context const*, unsigned int, unsigned int, unsigned int, int*)
void gl::CastStateValues<long>(gl::Context const*, unsigned int, unsigned int, unsigned int, long*)
void gl::CastStateValues<unsigned char>(gl::Context const*, unsigned int, unsigned int, unsigned int, unsigned char*)
void gl::Program::getUniformInternal<float>(gl::Context const*, float*, gl::UniformLocation, unsigned int, int) const
void gl::Program::getUniformInternal<int>(gl::Context const*, int*, gl::UniformLocation, unsigned int, int) const
void gl::Program::getUniformInternal<unsigned int>(gl::Context const*, unsigned int*, gl::UniformLocation, unsigned int, int) const
void gl::ShaderProgramManager::deleteObject<gl::Program, gl::ShaderProgramID>(gl::Context const*, gl::ResourceMap<gl::Program, gl::ShaderProgramID>*, gl::ShaderProgramID)
void gl::ShaderProgramManager::deleteObject<gl::Shader, gl::ShaderProgramID>(gl::Context const*, gl::ResourceMap<gl::Shader, gl::ShaderProgramID>*, gl::ShaderProgramID)
void gl::State::setGenericBufferBinding<(gl::BufferBinding)0>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBinding<(gl::BufferBinding)10>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBinding<(gl::BufferBinding)2>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBinding<(gl::BufferBinding)3>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBinding<(gl::BufferBinding)6>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBindingWithBit<(gl::BufferBinding)11>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBindingWithBit<(gl::BufferBinding)1>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBindingWithBit<(gl::BufferBinding)4>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBindingWithBit<(gl::BufferBinding)5>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBindingWithBit<(gl::BufferBinding)7>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBindingWithBit<(gl::BufferBinding)8>(gl::Context const*, gl::Buffer*)
void gl::State::setGenericBufferBindingWithBit<(gl::BufferBinding)9>(gl::Context const*, gl::Buffer*)
void ignoreIntersectionNV();void ignoreIntersectionEXT();void terminateRayNV();void terminateRayEXT();
void imageAtomicStore(volatile coherent
void imageStore(writeonly volatile coherent
void imageStoreLodAMD(writeonly volatile coherent
void main()
void main(){    if (enable_clip_planes && !enable_draw_texture)    {        if (!doClipPlaneTest())        {            discard;        }    }    vec4 currentFragment;    vec4 vertex_color;    if (shade_model_flat)    {        vertex_color = color_varying_flat;    }    else    {        vertex_color = color_varying;    }    currentFragment = vertex_color;    vec4 texturePrevColor = currentFragment;    for (int i = 0; i < kMaxTexUnits; i++)    {        vec4 textureColor;        if (point_rasterization && point_sprite_enabled &&            point_sprite_coord_replace[i]) {            textureColor = getPointSpriteTextureColor(i);        } else {            textureColor = getTextureColor(i);        }        currentFragment = textureFunction(            i, texture_format[i], texture_env_mode[i], combine_rgb[i], combine_alpha[i],            src0_rgb[i], src0_alpha[i], src1_rgb[i], src1_alpha[i], src2_rgb[i], src2_alpha[i],            op0_rgb[i], op0_alpha[i], op1_rgb[i], op1_alpha[i], op2_rgb[i], op2_alpha[i],            texture_env_color[i], texture_env_rgb_scale[i], texture_env_alpha_scale[i],            vertex_color, texturePrevColor, textureColor);        texturePrevColor = currentFragment;    }    if (enable_lighting)    {        currentFragment = doLighting(currentFragment);    }    if (enable_fog)    {        currentFragment = doFog(currentFragment);    }    if (enable_alpha_test && !doAlphaTest(currentFragment))    {        discard;    }    frag_color = currentFragment;}
void memoryBarrier();
void memoryBarrierAtomicCounter();
void memoryBarrierBuffer();
void memoryBarrierImage();
void memoryBarrierShared();void groupMemoryBarrier();
void rayQueryInitializeEXT(rayQueryEXT, accelerationStructureEXT, uint, uint, vec3, float, vec3, float);void rayQueryTerminateEXT(rayQueryEXT);void rayQueryGenerateIntersectionEXT(rayQueryEXT, float);void rayQueryConfirmIntersectionEXT(rayQueryEXT);bool rayQueryProceedEXT(rayQueryEXT);uint rayQueryGetIntersectionTypeEXT(rayQueryEXT, bool);float rayQueryGetRayTMinEXT(rayQueryEXT);uint rayQueryGetRayFlagsEXT(rayQueryEXT);vec3 rayQueryGetWorldRayOriginEXT(rayQueryEXT);vec3 rayQueryGetWorldRayDirectionEXT(rayQueryEXT);float rayQueryGetIntersectionTEXT(rayQueryEXT, bool);int rayQueryGetIntersectionInstanceCustomIndexEXT(rayQueryEXT, bool);int rayQueryGetIntersectionInstanceIdEXT(rayQueryEXT, bool);uint rayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetEXT(rayQueryEXT, bool);int rayQueryGetIntersectionGeometryIndexEXT(rayQueryEXT, bool);int rayQueryGetIntersectionPrimitiveIndexEXT(rayQueryEXT, bool);vec2 rayQueryGetIntersectionBarycentricsEXT(rayQueryEXT, bool);bool rayQueryGetIntersectionFrontFaceEXT(rayQueryEXT, bool);bool rayQueryGetIntersectionCandidateAABBOpaqueEXT(rayQueryEXT);vec3 rayQueryGetIntersectionObjectRayDirectionEXT(rayQueryEXT, bool);vec3 rayQueryGetIntersectionObjectRayOriginEXT(rayQueryEXT, bool);mat4x3 rayQueryGetIntersectionObjectToWorldEXT(rayQueryEXT, bool);mat4x3 rayQueryGetIntersectionWorldToObjectEXT(rayQueryEXT, bool);
void rx::CollectGarbage<rx::vk::BufferView*, rx::vk::Allocation*>(std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >*, rx::vk::BufferView*, rx::vk::Allocation*)
void rx::CollectGarbage<rx::vk::Image*, rx::vk::DeviceMemory*>(std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >*, rx::vk::Image*, rx::vk::DeviceMemory*)
void rx::Copy32FixedTo32FVertexData<1ul, 1ul>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::Copy32FixedTo32FVertexData<2ul, 2ul>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::Copy32FixedTo32FVertexData<3ul, 3ul>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::Copy32FixedTo32FVertexData<4ul, 4ul>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<float, 1ul, 1ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<float, 2ul, 2ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<float, 3ul, 3ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<float, 4ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<int, 1ul, 1ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<int, 2ul, 2ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<int, 3ul, 3ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<int, 4ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<short, 1ul, 1ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<short, 2ul, 2ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<short, 3ul, 3ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<short, 3ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<short, 4ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<signed char, 1ul, 1ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<signed char, 2ul, 2ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<signed char, 3ul, 3ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<signed char, 3ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<signed char, 4ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned char, 1ul, 1ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned char, 2ul, 2ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned char, 3ul, 3ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned char, 3ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned char, 4ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned int, 1ul, 1ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned int, 2ul, 2ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned int, 3ul, 3ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned int, 4ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned short, 1ul, 1ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned short, 2ul, 2ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned short, 3ul, 3ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned short, 3ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyNativeVertexData<unsigned short, 4ul, 4ul, 0u>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 1ul, 1ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 1ul, 1ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 2ul, 2ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 2ul, 2ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 3ul, 3ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 3ul, 3ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 4ul, 4ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<int, 4ul, 4ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 1ul, 1ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 1ul, 1ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 2ul, 2ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 2ul, 2ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 3ul, 3ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 3ul, 3ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 4ul, 4ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<short, 4ul, 4ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 1ul, 1ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 1ul, 1ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 2ul, 2ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 2ul, 2ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 3ul, 3ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 3ul, 3ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 4ul, 4ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<signed char, 4ul, 4ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 1ul, 1ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 1ul, 1ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 2ul, 2ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 2ul, 2ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 3ul, 3ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 3ul, 3ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 4ul, 4ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned char, 4ul, 4ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 1ul, 1ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 1ul, 1ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 2ul, 2ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 2ul, 2ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 3ul, 3ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 3ul, 3ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 4ul, 4ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned int, 4ul, 4ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 1ul, 1ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 1ul, 1ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 2ul, 2ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 2ul, 2ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 3ul, 3ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 3ul, 3ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 4ul, 4ul, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyTo32FVertexData<unsigned short, 4ul, 4ul, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyW2XYZ10ToXYZW32FVertexData<false, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyW2XYZ10ToXYZW32FVertexData<false, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyW2XYZ10ToXYZW32FVertexData<true, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyW2XYZ10ToXYZW32FVertexData<true, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10ToXYZW32FVertexData<false, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10ToXYZW32FVertexData<false, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10ToXYZW32FVertexData<true, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10ToXYZW32FVertexData<true, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10W2ToXYZW32FVertexData<false, false, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10W2ToXYZW32FVertexData<false, false, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10W2ToXYZW32FVertexData<true, false, false>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10W2ToXYZW32FVertexData<true, false, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::CopyXYZ10W2ToXYZW32FVertexData<true, true, true>(unsigned char const*, unsigned long, unsigned long, unsigned char*)
void rx::GetMatrixUniform<int>(unsigned int, int*, int const*, bool)
void rx::GetMatrixUniform<unsigned int>(unsigned int, unsigned int*, unsigned int const*, bool)
void rx::ProgramVk::getUniformImpl<float>(int, float*, unsigned int) const
void rx::ProgramVk::getUniformImpl<int>(int, int*, unsigned int) const
void rx::ProgramVk::getUniformImpl<unsigned int>(int, unsigned int*, unsigned int) const
void rx::ProgramVk::setUniformImpl<float>(int, int, float const*, unsigned int)
void rx::ProgramVk::setUniformImpl<int>(int, int, int const*, unsigned int)
void rx::ProgramVk::setUniformImpl<unsigned int>(int, int, unsigned int const*, unsigned int)
void rx::ProgramVk::setUniformMatrixfv<2, 2>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<2, 3>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<2, 4>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<3, 2>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<3, 3>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<3, 4>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<4, 2>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<4, 3>(int, int, unsigned char, float const*)
void rx::ProgramVk::setUniformMatrixfv<4, 4>(int, int, unsigned char, float const*)
void rx::RendererVk::collectGarbageAndReinit<rx::vk::Buffer*, rx::vk::BufferView*, rx::vk::Allocation*>(rx::vk::SharedResourceUse*, rx::vk::Buffer*, rx::vk::BufferView*, rx::vk::Allocation*)
void rx::RendererVk::collectGarbageAndReinit<rx::vk::Event*>(rx::vk::SharedResourceUse*, rx::vk::Event*)
void rx::RendererVk::collectGarbageAndReinit<rx::vk::Fence*>(rx::vk::SharedResourceUse*, rx::vk::Fence*)
void rx::RendererVk::collectGarbageAndReinit<rx::vk::Image*, rx::vk::DeviceMemory*>(rx::vk::SharedResourceUse*, rx::vk::Image*, rx::vk::DeviceMemory*)
void rx::vk::ImageHelper::forceChangeLayoutAndQueue<rx::vk::priv::SecondaryCommandBuffer>(unsigned int, rx::vk::ImageLayout, unsigned int, rx::vk::priv::SecondaryCommandBuffer*)
void rx::vk::Shared<rx::vk::Fence>::resetAndRecycle<rx::vk::Recycler<rx::vk::Fence> >(rx::vk::Recycler<rx::vk::Fence>*)
void sh::GetSwizzleIndex<int, int>(sh::TVector<int>*, int, int)
void sh::GetSwizzleIndex<int>(sh::TVector<int>*, int)
void sh::TIntermTraverser::traverse<sh::TIntermAggregate>(sh::TIntermAggregate*)
void sh::TIntermTraverser::traverse<sh::TIntermBinary>(sh::TIntermBinary*)
void sh::TIntermTraverser::traverse<sh::TIntermLoop>(sh::TIntermLoop*)
void sh::TIntermTraverser::traverse<sh::TIntermNode>(sh::TIntermNode*)
void sh::TIntermTraverser::traverse<sh::TIntermUnary>(sh::TIntermUnary*)
void spvtools::Logf<SpvOp_ const&>(std::__1::function<void (spv_message_level_t, char const*, spv_position_t const&, char const*)> const&, spv_message_level_t, char const*, spv_position_t const&, char const*, SpvOp_ const&)
void spvtools::opt::(anonymous namespace)::PushToString<unsigned long>(unsigned long, std::__1::basic_string<char32_t, std::__1::char_traits<char32_t>, std::__1::allocator<char32_t> >*)
void spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >::castTo<spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > > >(spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > >&, spvtools::utils::round_direction)
void spvtools::utils::HexFloat<spvtools::utils::FloatProxy<spvtools::utils::Float16>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<spvtools::utils::Float16> > >::castTo<spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > > >(spvtools::utils::HexFloat<spvtools::utils::FloatProxy<float>, spvtools::utils::HexFloatTraits<spvtools::utils::FloatProxy<float> > >&, spvtools::utils::round_direction)
void spvtools::val::ValidationState_t::RegisterDecorationsForId<std::__1::__wrap_iter<spvtools::val::Decoration*> >(unsigned int, std::__1::__wrap_iter<spvtools::val::Decoration*>, std::__1::__wrap_iter<spvtools::val::Decoration*>)
void spvtools::val::ValidationState_t::RegisterDecorationsForStructMember<std::__1::__wrap_iter<spvtools::val::Decoration*> >(unsigned int, unsigned int, std::__1::__wrap_iter<spvtools::val::Decoration*>, std::__1::__wrap_iter<spvtools::val::Decoration*>)
void spvutils::HexFloat<spvutils::FloatProxy<float>, spvutils::HexFloatTraits<spvutils::FloatProxy<float> > >::castTo<spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > > >(spvutils::HexFloat<spvutils::FloatProxy<spvutils::Float16>, spvutils::HexFloatTraits<spvutils::FloatProxy<spvutils::Float16> > >&, spvutils::round_direction)
void std::__1::__buffered_inplace_merge<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::value_type*)
void std::__1::__call_once_proxy<std::__1::tuple<std::__1::(anonymous namespace)::__fake_bind&&> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_2, bool (VkPhysicalDeviceProperties const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::handleAssign(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)::$_17, void (glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::$_1, angle::Result (bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spv::Builder::postProcessCFG()::$_2, void (spv::Block*, spv::ReachReason, spv::Block*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#2}, void (unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#3}, void (unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPBinaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_5, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPUnaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_4, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_7, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int)> const&) const::$_1, bool (unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7, void (unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputePostOrderTraversal(spvtools::opt::BasicBlock*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_8, bool (unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ForEachBlockInReversePostOrder(spvtools::opt::BasicBlock*, std::__1::function<void (spvtools::opt::BasicBlock*)> const&)::$_6, bool (spvtools::opt::BasicBlock*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_11, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::AddBlocksWithBackEdge(unsigned int, unsigned int, unsigned int, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_5, void (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_0, bool (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::SwitchHasNestedBreak(unsigned int)::$_6, bool (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::CanHoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_3, bool (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::HoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_2, void (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::Process()::$_0, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::CloneSameBlockOps(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*, std::__1::unordered_map<unsigned int, spvtools::opt::Instruction*, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::opt::Instruction*> > >*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*)::$_1, bool (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::GenInlineCode(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)::$_4, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::MapParams(spvtools::opt::Function*, spvtools::opt::InstructionList::iterator, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5, void (unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::InstructionFolder::FoldInstructionToConstant(spvtools::opt::Instruction*, std::__1::function<unsigned int (unsigned int)>) const::$_1, void (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::AppendConstantOperands(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >*)::$_0, void (unsigned int const*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::LocalRedundancyEliminationPass::EliminateRedundanciesInBB(spvtools::opt::BasicBlock*, spvtools::opt::ValueNumberTable const&, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::opt::Function*)::$_7, void (unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::opt::BasicBlock*, spvtools::opt::Instruction&)::$_2, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::Process()::$_0, bool (spvtools::opt::Function*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::Module::ToBinary(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, bool) const::$_0, void (spvtools::opt::Instruction const*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLines()::$_0, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CheckUses(spvtools::opt::Instruction const*, spvtools::opt::ScalarReplacementPass::VariableStats*) const::$_2, void (spvtools::opt::Instruction*, unsigned int)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CreateReplacementVariables(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_1, void (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::opt::Instruction*)::$_4, bool (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::ReplaceVariable(spvtools::opt::Instruction*, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)::$_0, bool (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::AddNewOperands(spvtools::opt::Instruction*, std::__1::unordered_set<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_0, void (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1, void (spvtools::opt::BasicBlock*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1::operator()(spvtools::opt::BasicBlock*) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::FindLiveComponents(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*)::$_0, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::MarkUsesAsLive(spvtools::opt::Instruction*, spvtools::utils::BitVector const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)::$_1, void (unsigned int*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::RewriteInstructions(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > > const&)::$_2, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_0, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_1, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_2, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_31, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeShaderI32Vec3InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_30, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_32, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32Vec4InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_33, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_28, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_29, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSMBuiltinsAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_35, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::Function::RegisterExecutionModelLimitation(SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::$_5, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [123], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [124], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [129], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [140], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [141], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [143], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [149], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [153], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [175], SpvExecutionModel_ const&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const*&, SpvExecutionModel_&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void*)
void std::__1::__function::__policy::__large_destroy<std::__1::__function::__default_alloc_func<std::__1::__bind<void (spvtools::opt::analysis::DefUseManager::*)(spvtools::opt::Instruction*), spvtools::opt::analysis::DefUseManager*, std::__1::placeholders::__ph<1> const&>, void (spvtools::opt::Instruction*)> >(void*)
void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<gl::Shader::resolveCompile()::$_0, void ()> >(std::__1::__function::__policy_storage const*)
void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_1, void ()> >(std::__1::__function::__policy_storage const*)
void std::__1::__function::__policy_invoker<void (SpvCapability_)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::FeatureManager::AddCapability(SpvCapability_)::$_0, void (SpvCapability_)> >(std::__1::__function::__policy_storage const*, SpvCapability_)
void std::__1::__function::__policy_invoker<void (SpvCapability_)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::InitializeCombinators()::$_3, void (SpvCapability_)> >(std::__1::__function::__policy_storage const*, SpvCapability_)
void std::__1::__function::__policy_invoker<void (SpvCapability_)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ToString(spvtools::EnumSet<SpvCapability_> const&, spvtools::AssemblyGrammar const&)::$_0, void (SpvCapability_)> >(std::__1::__function::__policy_storage const*, SpvCapability_)
void std::__1::__function::__policy_invoker<void (SpvCapability_)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidationState_t::RegisterCapability(SpvCapability_)::$_1, void (SpvCapability_)> >(std::__1::__function::__policy_storage const*, SpvCapability_)
void std::__1::__function::__policy_invoker<void (char const*)>::__call_impl<std::__1::__function::__default_alloc_func<rx::ShaderGL::compile(gl::Context const*, gl::ShCompilerInstance*, unsigned long)::$_4, void (char const*)> >(std::__1::__function::__policy_storage const*, char const*)
void std::__1::__function::__policy_invoker<void (glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool)>::__call_impl<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::handleAssign(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)::$_17, void (glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool)> >(std::__1::__function::__policy_storage const*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool)
void std::__1::__function::__policy_invoker<void (spv::Block*, spv::ReachReason, spv::Block*)>::__call_impl<std::__1::__function::__default_alloc_func<spv::Builder::postProcessCFG()::$_2, void (spv::Block*, spv::ReachReason, spv::Block*)> >(std::__1::__function::__policy_storage const*, spv::Block*, spv::ReachReason, spv::Block*)
void std::__1::__function::__policy_invoker<void (spv::Block*, spv::ReachReason, spv::Block*)>::__call_impl<std::__1::__function::__default_alloc_func<spv::Function::dump(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&) const::{lambda(spv::Block const*, spv::ReachReason, spv::Block*)#1}, void (spv::Block*, spv::ReachReason, spv::Block*)> >(std::__1::__function::__policy_storage const*, spv::Block*, spv::ReachReason, spv::Block*)
void std::__1::__function::__policy_invoker<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::UseDiagnosticAsMessageConsumer(spv_context_t*, spv_diagnostic_t**)::$_0, void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::__function::__policy_storage const*, spv_message_level_t, char const*, spv_position_t const&, char const*)
void std::__1::__function::__policy_invoker<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::ValidateBinaryUsingContextAndValidationState(spv_context_t const&, unsigned int const*, unsigned long, spv_diagnostic_t**, spvtools::val::ValidationState_t*)::$_0, void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::__function::__policy_storage const*, spv_message_level_t, char const*, spv_position_t const&, char const*)
void std::__1::__function::__policy_invoker<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::ValidationState_t::ValidationState_t(spv_context_t const*, spv_validator_options_t const*, unsigned int const*, unsigned long, unsigned int)::$_0, void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::__function::__policy_storage const*, spv_message_level_t, char const*, spv_position_t const&, char const*)
void std::__1::__function::__policy_invoker<void (spv_message_level_t, char const*, spv_position_t const&, char const*)>::__call_impl<std::__1::__function::__default_alloc_func<void (*)(spv_message_level_t, char const*, spv_position_t const&, char const*), void (spv_message_level_t, char const*, spv_position_t const&, char const*)> >(std::__1::__function::__policy_storage const*, spv_message_level_t, char const*, spv_position_t const&, char const*)
void std::__1::__function::__policy_invoker<void (spvtools::Extension)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::ExtensionSetToString(spvtools::EnumSet<spvtools::Extension> const&)::$_0, void (spvtools::Extension)> >(std::__1::__function::__policy_storage const*, spvtools::Extension)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DepthFirstSearchPostOrder<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*)#1}, void (spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_3, void (spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_4, void (spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0, void (spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DepthFirstSearch<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::(anonymous namespace)::DepthFirstSearchPostOrder<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*)#1}, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::(anonymous namespace)::DepthFirstSearchPostOrder<spvtools::opt::BasicBlock, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0>(spvtools::opt::BasicBlock const*, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*)#1}, spvtools::opt::DominatorTree::GetDominatorEdges(spvtools::opt::Function const*, spvtools::opt::BasicBlock const*, std::__1::vector<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>, std::__1::allocator<std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> > >*)::$_0)::{lambda(spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)#1}, void (spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredOrder(spvtools::opt::Function*, spvtools::opt::BasicBlock*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_5, void (spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock const*, spvtools::opt::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::HasNontrivialUnreachableBlocks(spvtools::opt::Function*)::$_5, void (spvtools::opt::BasicBlock*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::BasicBlock*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1, void (spvtools::opt::BasicBlock*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::BasicBlock*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::DominatorTreeNode const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::ResetDFNumbering()::$_2, void (spvtools::opt::DominatorTreeNode const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::DominatorTreeNode const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::DominatorTreeNode const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DominatorTree::ResetDFNumbering()::$_3, void (spvtools::opt::DominatorTreeNode const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::DominatorTreeNode const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::DepthFirstSearch<spvtools::opt::DominatorTreeNode, spvtools::opt::DominatorTree::ResetDFNumbering()::$_1, spvtools::opt::DominatorTree::ResetDFNumbering()::$_2, spvtools::opt::DominatorTree::ResetDFNumbering()::$_3>(spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTree::ResetDFNumbering()::$_1, spvtools::opt::DominatorTree::ResetDFNumbering()::$_2, spvtools::opt::DominatorTree::ResetDFNumbering()::$_3)::{lambda(spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)#1}, void (spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::DominatorTreeNode const*, spvtools::opt::DominatorTreeNode const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsReadOnlyPointerShaders() const::$_3, void (spvtools::opt::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const&)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsVulkanStorageBuffer() const::$_0, void (spvtools::opt::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const&)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Instruction::IsVulkanStorageBuffer() const::$_1, void (spvtools::opt::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const&)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction const&)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::TypeManager::RecordIfTypeDefinition(spvtools::opt::Instruction const&)::$_0, void (spvtools::opt::Instruction const&)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const&)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Module::ComputeIdBound() const::$_1, void (spvtools::opt::Instruction const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Module::ToBinary(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, bool) const::$_0, void (spvtools::opt::Instruction const*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction const*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AddBreaksAndContinuesToWorklist(spvtools::opt::Instruction*)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AddBreaksAndContinuesToWorklist(spvtools::opt::Instruction*)::$_3, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AddStores(unsigned int)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_4, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_7, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::EliminateFunction(spvtools::opt::Function*)::$_11, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::IsTargetDead(spvtools::opt::Instruction*)::$_1, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::KillAllInsts(bool)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_8, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_10, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_11, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::opt::Function*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::opt::Function*)::$_1, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::BuildInstrToBlockMapping()::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::KillDebugDeclareInsts(spvtools::opt::Function*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::Process()::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::GenInlineCode(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)::$_4, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::MapParams(spvtools::opt::Function*, spvtools::opt::InstructionList::iterator, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::ConvertLocalAccessChains(spvtools::opt::Function*)::$_3, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalRedundancyEliminationPass::EliminateRedundanciesInBB(spvtools::opt::BasicBlock*, spvtools::opt::ValueNumberTable const&, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalSingleStoreElimPass::FindUses(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*) const::$_1, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::AddStores(unsigned int, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)::$_3, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveBlock(spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>*)::$_6, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::opt::Function*)::$_8, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::opt::BasicBlock*, spvtools::opt::Instruction&)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::UpdatePhiNodes(spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*)::$_1, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLines()::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1::operator()(spvtools::opt::BasicBlock*) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::StripDebugInfoPass::Process()::$_2, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::FindLiveComponents(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::RewriteInstructions(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > > const&)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::WrapOpKill::GetOpKillFuncId()::$_1, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DebugInfoManager::AnalyzeDebugInsts(spvtools::opt::Module&)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::NumUsers(spvtools::opt::Instruction const*) const::$_2, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::blockmergeutil::(anonymous namespace)::EliminateOpPhiInstructions(spvtools::opt::IRContext*, spvtools::opt::BasicBlock*)::$_2, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::eliminatedeadfunctionsutil::EliminateFunction(spvtools::opt::IRContext*, spvtools::opt::UptrVectorIterator<spvtools::opt::Function, false>*)::$_0, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*)>::__call_impl<std::__1::__function::__default_alloc_func<std::__1::__bind<void (spvtools::opt::analysis::DefUseManager::*)(spvtools::opt::Instruction*), spvtools::opt::analysis::DefUseManager*, std::__1::placeholders::__ph<1> const&>, void (spvtools::opt::Instruction*)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IRContext::ReplaceAllUsesWithPredicate(unsigned int, unsigned int, std::__1::function<bool (spvtools::opt::Instruction*, unsigned int)> const&)::$_2, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CheckUses(spvtools::opt::Instruction const*, spvtools::opt::ScalarReplacementPass::VariableStats*) const::$_2, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CheckUsesRelaxed(spvtools::opt::Instruction const*) const::$_3, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
void std::__1::__function::__policy_invoker<void (spvtools::opt::Instruction*, unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::analysis::DefUseManager::NumUses(spvtools::opt::Instruction const*) const::$_3, void (spvtools::opt::Instruction*, unsigned int)> >(std::__1::__function::__policy_storage const*, spvtools::opt::Instruction*, unsigned int)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::CFA<spvtools::val::BasicBlock>::TraversalRoots(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(spvtools::val::BasicBlock const*)#1}, void (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::CFA<spvtools::val::BasicBlock>::TraversalRoots(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(spvtools::val::BasicBlock const*)#2}, void (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_2, void (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_3, void (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_5, void (spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::CFA<spvtools::val::BasicBlock>::TraversalRoots(std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)#1}, void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_4, void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::val::PerformCfgChecks(spvtools::val::ValidationState_t&)::$_6, void (spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)> >(std::__1::__function::__policy_storage const*, spvtools::val::BasicBlock const*, spvtools::val::BasicBlock const*)
void std::__1::__function::__policy_invoker<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spv::spirvbin_t::$_0, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
void std::__1::__function::__policy_invoker<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::__call_impl<std::__1::__function::__default_alloc_func<spv::spirvbin_t::$_1, void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(std::__1::__function::__policy_storage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
void std::__1::__function::__policy_invoker<void (unsigned int const*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::AppendConstantOperands(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >*)::$_0, void (unsigned int const*)> >(std::__1::__function::__policy_storage const*, unsigned int const*)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#2}, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#3}, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::IsSuccessor(spvtools::opt::BasicBlock const*) const::$_4, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::AddEdges(spvtools::opt::BasicBlock*)::$_0, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputeStructuredSuccessors(spvtools::opt::Function*)::$_7, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::RemoveSuccessorEdges(spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#1}, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_1, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::Loop::FindLoopPreheader(spvtools::opt::DominatorAnalysis*)::$_0, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::opt::Function*)::$_7, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::PredicateBlocks(spvtools::opt::BasicBlock*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::list<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_4, void (unsigned int)> >(std::__1::__function::__policy_storage const*, unsigned int)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_5, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_6, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int*)> const&)::$_3, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForMergeAndContinueLabel(std::__1::function<void (unsigned int)> const&)::$_5, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_12, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::AddBlocksWithBackEdge(unsigned int, unsigned int, unsigned int, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_5, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::DeadInsertElimPass::EliminateDeadInsertsOnePass(spvtools::opt::Function*)::$_0::operator()(spvtools::opt::Instruction*) const::{lambda(unsigned int const*)#1}, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::HoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_2, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::InlineSingleInstruction(std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > > const&, spvtools::opt::BasicBlock*, spvtools::opt::Instruction const*, unsigned int)::$_2, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}::operator()(spvtools::opt::Instruction*) const::{lambda(unsigned int*)#1}, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::InstructionFolder::FoldInstructionToConstant(spvtools::opt::Instruction*, std::__1::function<unsigned int (unsigned int)>) const::$_1, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::DCEInst(spvtools::opt::Instruction*, std::__1::function<void (spvtools::opt::Instruction*)> const&)::$_4, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::opt::BasicBlock*, spvtools::opt::Instruction&)::$_3, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CreateReplacementVariables(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_1, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::AddNewOperands(spvtools::opt::Instruction*, std::__1::unordered_set<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_0, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__function::__policy_invoker<void (unsigned int*)>::__call_impl<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::MarkUsesAsLive(spvtools::opt::Instruction*, spvtools::utils::BitVector const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)::$_1, void (unsigned int*)> >(std::__1::__function::__policy_storage const*, unsigned int*)
void std::__1::__half_inplace_merge<bool (*)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), sh::TIntermTraverser::NodeInsertMultipleEntry*, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(sh::TIntermTraverser::NodeInsertMultipleEntry*, sh::TIntermTraverser::NodeInsertMultipleEntry*, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, bool (*)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&))
void std::__1::__half_inplace_merge<std::__1::__invert<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&)>, std::__1::reverse_iterator<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::reverse_iterator<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >, std::__1::reverse_iterator<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> > >(std::__1::reverse_iterator<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::reverse_iterator<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::reverse_iterator<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >, std::__1::reverse_iterator<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >, std::__1::reverse_iterator<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >, std::__1::__invert<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&)>)
void std::__1::__hash_table<unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<unsigned int> >::__assign_unique<unsigned int const*>(unsigned int const*, unsigned int const*)
void std::__1::__inplace_merge<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::value_type*, long)
void std::__1::__inplace_merge<sh::(anonymous namespace)::QualifierComparator&, std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >(std::__1::__wrap_iter<sh::TQualifierWrapperBase const**>, std::__1::__wrap_iter<sh::TQualifierWrapperBase const**>, std::__1::__wrap_iter<sh::TQualifierWrapperBase const**>, sh::(anonymous namespace)::QualifierComparator&, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >::value_type*, long)
void std::__1::__inplace_merge<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::$_4&, std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >(std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*>, std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*>, std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*>, spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::$_4&, std::__1::iterator_traits<std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >::value_type*, long)
void std::__1::__insertion_sort<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&))
void std::__1::__insertion_sort_3<bool (*&)(char const*, char const*), char const**>(char const**, char const**, bool (*&)(char const*, char const*))
void std::__1::__insertion_sort_3<bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&), gl::PackedVarying*>(gl::PackedVarying*, gl::PackedVarying*, bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&))
void std::__1::__insertion_sort_3<bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&), sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&))
void std::__1::__insertion_sort_3<std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&)
void std::__1::__insertion_sort_move<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::value_type*, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&))
void std::__1::__invoke_void_return_wrapper<void>::__call<spvtools::opt::CFG::RemoveSuccessorEdges(spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#1}&, unsigned int>(spvtools::opt::CFG::RemoveSuccessorEdges(spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#1}&, unsigned int&&)
void std::__1::__merge_move_assign<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), sh::TIntermTraverser::NodeInsertMultipleEntry*, sh::TIntermTraverser::NodeInsertMultipleEntry*, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(sh::TIntermTraverser::NodeInsertMultipleEntry*, sh::TIntermTraverser::NodeInsertMultipleEntry*, sh::TIntermTraverser::NodeInsertMultipleEntry*, sh::TIntermTraverser::NodeInsertMultipleEntry*, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&))
void std::__1::__merge_move_construct<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::value_type*, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&))
void std::__1::__sort<bool (*&)(char const*, char const*), char const**>(char const**, char const**, bool (*&)(char const*, char const*))
void std::__1::__sort<bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&), gl::PackedVarying*>(gl::PackedVarying*, gl::PackedVarying*, bool (*&)(gl::PackedVarying const&, gl::PackedVarying const&))
void std::__1::__sort<bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&), sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, bool (*&)(sh::ShaderVariable const&, sh::ShaderVariable const&))
void std::__1::__sort<egl::ConfigSorter&, egl::Config const**>(egl::Config const**, egl::Config const**, egl::ConfigSorter&)
void std::__1::__sort<sh::(anonymous namespace)::TVariableInfoComparer&, sh::ShaderVariable*>(sh::ShaderVariable*, sh::ShaderVariable*, sh::(anonymous namespace)::TVariableInfoComparer&)
void std::__1::__sort<spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*>(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*>*, spvtools::CFA<spvtools::opt::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::opt::BasicBlock const*, std::__1::allocator<spvtools::opt::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> > const* (spvtools::opt::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&, std::__1::pair<spvtools::opt::BasicBlock*, spvtools::opt::BasicBlock*> const&)#1}&)
void std::__1::__sort<spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*>(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*>*, spvtools::CFA<spvtools::val::BasicBlock>::CalculateDominators(std::__1::vector<spvtools::val::BasicBlock const*, std::__1::allocator<spvtools::val::BasicBlock const*> > const&, std::__1::function<std::__1::vector<spvtools::val::BasicBlock*, std::__1::allocator<spvtools::val::BasicBlock*> > const* (spvtools::val::BasicBlock const*)>)::{lambda(std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&, std::__1::pair<spvtools::val::BasicBlock*, spvtools::val::BasicBlock*> const&)#1}&)
void std::__1::__sort<spvtools::opt::(anonymous namespace)::DecorationLess&, spvtools::opt::Instruction**>(spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::(anonymous namespace)::DecorationLess&)
void std::__1::__sort<spvtools::opt::StripDebugInfoPass::Process()::$_1&, spvtools::opt::Instruction**>(spvtools::opt::Instruction**, spvtools::opt::Instruction**, spvtools::opt::StripDebugInfoPass::Process()::$_1&)
void std::__1::__sort<spvtools::opt::analysis::(anonymous namespace)::CompareTwoVectors(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >)::$_0&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**>(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > const**, spvtools::opt::analysis::(anonymous namespace)::CompareTwoVectors(std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >)::$_0&)
void std::__1::__sort<spvtools::val::(anonymous namespace)::check_interface_variable(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0&, spvtools::val::Function const**>(spvtools::val::Function const**, spvtools::val::Function const**, spvtools::val::(anonymous namespace)::check_interface_variable(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0&)
void std::__1::__sort<std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&, gl::PackedVaryingRegister*>(gl::PackedVaryingRegister*, gl::PackedVaryingRegister*, std::__1::__less<gl::PackedVaryingRegister, gl::PackedVaryingRegister>&)
void std::__1::__sort<std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*, std::__1::__less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >&)
void std::__1::__sort<std::__1::__less<unsigned int, unsigned int>&, unsigned int*>(unsigned int*, unsigned int*, std::__1::__less<unsigned int, unsigned int>&)
void std::__1::__stable_sort<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::value_type*, long)
void std::__1::__stable_sort<sh::(anonymous namespace)::QualifierComparator&, std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >(std::__1::__wrap_iter<sh::TQualifierWrapperBase const**>, std::__1::__wrap_iter<sh::TQualifierWrapperBase const**>, sh::(anonymous namespace)::QualifierComparator&, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >::value_type*, long)
void std::__1::__stable_sort<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::$_4&, std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >(std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*>, std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*>, spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::$_4&, std::__1::iterator_traits<std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >::value_type*, long)
void std::__1::__stable_sort_move<bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >(std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*>, bool (*&)(sh::TIntermTraverser::NodeInsertMultipleEntry const&, sh::TIntermTraverser::NodeInsertMultipleEntry const&), std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TIntermTraverser::NodeInsertMultipleEntry*> >::value_type*)
void std::__1::__stable_sort_move<sh::(anonymous namespace)::QualifierComparator&, std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >(std::__1::__wrap_iter<sh::TQualifierWrapperBase const**>, std::__1::__wrap_iter<sh::TQualifierWrapperBase const**>, sh::(anonymous namespace)::QualifierComparator&, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<sh::TQualifierWrapperBase const**> >::value_type*)
void std::__1::__stable_sort_move<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::$_4&, std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >(std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*>, std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*>, spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::$_4&, std::__1::iterator_traits<std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >::difference_type, std::__1::iterator_traits<std::__1::__wrap_iter<spvtools::val::(anonymous namespace)::checkLayout(unsigned int, char const*, char const*, bool, unsigned int, std::__1::unordered_map<std::__1::pair<unsigned int, unsigned int>, spvtools::val::(anonymous namespace)::LayoutConstraints, spvtools::val::(anonymous namespace)::PairHash, std::__1::equal_to<std::__1::pair<unsigned int, unsigned int> >, std::__1::allocator<std::__1::pair<std::__1::pair<unsigned int, unsigned int> const, spvtools::val::(anonymous namespace)::LayoutConstraints> > >&, spvtools::val::ValidationState_t&)::MemberOffsetPair*> >::value_type*)
void std::__1::__tree<glslang::HlslParseContext::tInterstageIoData, std::__1::less<glslang::HlslParseContext::tInterstageIoData>, std::__1::allocator<glslang::HlslParseContext::tInterstageIoData> >::__assign_multi<std::__1::__tree_const_iterator<glslang::HlslParseContext::tInterstageIoData, std::__1::__tree_node<glslang::HlslParseContext::tInterstageIoData, void*>*, long> >(std::__1::__tree_const_iterator<glslang::HlslParseContext::tInterstageIoData, std::__1::__tree_node<glslang::HlslParseContext::tInterstageIoData, void*>*, long>, std::__1::__tree_const_iterator<glslang::HlslParseContext::tInterstageIoData, std::__1::__tree_node<glslang::HlslParseContext::tInterstageIoData, void*>*, long>)
void std::__1::__tree<std::__1::__value_type<int, egl::Config>, std::__1::__map_value_compare<int, std::__1::__value_type<int, egl::Config>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, egl::Config> > >::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<int, egl::Config>, std::__1::__tree_node<std::__1::__value_type<int, egl::Config>, void*>*, long> >(std::__1::__tree_const_iterator<std::__1::__value_type<int, egl::Config>, std::__1::__tree_node<std::__1::__value_type<int, egl::Config>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<int, egl::Config>, std::__1::__tree_node<std::__1::__value_type<int, egl::Config>, void*>*, long>)
void std::__1::__tree<std::__1::__value_type<long, long>, std::__1::__map_value_compare<long, std::__1::__value_type<long, long>, std::__1::less<long>, true>, std::__1::allocator<std::__1::__value_type<long, long> > >::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<long, long>, std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*, long> >(std::__1::__tree_const_iterator<std::__1::__value_type<long, long>, std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<long, long>, std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*, long>)
void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, true>, glslang::pool_allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > > >::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, void*>*, long> >(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >, void*>*, long>)
void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior> > >::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long> >(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, glslang::TExtensionBehavior>, void*>*, long>)
void std::__1::__tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::__assign_multi<std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long> >(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>)
void std::__1::__tree_balance_after_insert<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)
void std::__1::__tree_remove<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)
void std::__1::advance<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long> >(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long>&, std::__1::iterator_traits<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long> >::difference_type)
void std::__1::allocator<spvtools::opt::Operand>::construct<spvtools::opt::Operand, spv_operand_type_t, std::initializer_list<unsigned int> >(spvtools::opt::Operand*, spv_operand_type_t&&, std::initializer_list<unsigned int>&&)
void std::__1::allocator_traits<std::__1::allocator<spvtools::opt::Operand> >::construct<spvtools::opt::Operand, spv_operand_type_t const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >(std::__1::allocator<spvtools::opt::Operand>&, spvtools::opt::Operand*, spv_operand_type_t const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&&)
void std::__1::allocator_traits<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>, void*> > >::__destroy<std::__1::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness> >(std::__1::integral_constant<bool, false>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>, void*> >&, std::__1::pair<unsigned int const, spvtools::opt::RegisterLiveness::RegionRegisterLiveness>*)
void std::__1::deque<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >, std::__1::allocator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > > >::__append<std::__1::__deque_iterator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const*, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const&, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const* const*, long, 0l> >(std::__1::__deque_iterator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const*, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const&, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const* const*, long, 0l>, std::__1::__deque_iterator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const*, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const&, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const* const*, long, 0l>, std::__1::enable_if<__is_forward_iterator<std::__1::__deque_iterator<std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> >, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const*, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const&, std::__1::pair<spvtools::opt::DominatorTreeNode*, std::__1::__wrap_iter<spvtools::opt::DominatorTreeNode**> > const* const*, long, 0l> >::value, void>::type*)
void std::__1::map<int, unsigned long, std::__1::less<int>, std::__1::allocator<std::__1::pair<int const, unsigned long> > >::insert<std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<int, unsigned long>, std::__1::__tree_node<std::__1::__value_type<int, unsigned long>, void*>*, long> > >(std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<int, unsigned long>, std::__1::__tree_node<std::__1::__value_type<int, unsigned long>, void*>*, long> >, std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<int, unsigned long>, std::__1::__tree_node<std::__1::__value_type<int, unsigned long>, void*>*, long> >)
void std::__1::map<long, long, std::__1::less<long>, std::__1::allocator<std::__1::pair<long const, long> > >::insert<std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<long, long>, std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*, long> > >(std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<long, long>, std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*, long> >, std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<long, long>, std::__1::__tree_node<std::__1::__value_type<long, long>, void*>*, long> >)
void std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, unsigned long> > >::insert<std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long> > >(std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long> >, std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, unsigned long>, void*>*, long> >)
void std::__1::map<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > > > >::insert<std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, void*>*, long> > >(std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, void*>*, long> >, std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > > >, void*>*, long> >)
void std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >::insert<std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void*>*, long> > >(std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void*>*, long> >, std::__1::__map_const_iterator<std::__1::__tree_const_iterator<std::__1::__value_type<unsigned int, unsigned int>, std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned int>, void*>*, long> >)
void std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::insert<std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long> >(std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>, std::__1::__tree_const_iterator<unsigned int, std::__1::__tree_node<unsigned int, void*>*, long>)
void std::__1::set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int> >::insert<std::__1::__wrap_iter<unsigned int const*> >(std::__1::__wrap_iter<unsigned int const*>, std::__1::__wrap_iter<unsigned int const*>)
void std::__1::vector<angle::ObserverBinding, std::__1::allocator<angle::ObserverBinding> >::__emplace_back_slow_path<gl::Context*&, int&>(gl::Context*&, int&)
void std::__1::vector<angle::ObserverBinding, std::__1::allocator<angle::ObserverBinding> >::__emplace_back_slow_path<gl::Context*, unsigned long&>(gl::Context*&&, unsigned long&)
void std::__1::vector<angle::ObserverBinding, std::__1::allocator<angle::ObserverBinding> >::__emplace_back_slow_path<gl::Framebuffer*, gl::Framebuffer::DirtyBitType>(gl::Framebuffer*&&, gl::Framebuffer::DirtyBitType&&)
void std::__1::vector<angle::ObserverBinding, std::__1::allocator<angle::ObserverBinding> >::__emplace_back_slow_path<gl::Framebuffer*, unsigned long>(gl::Framebuffer*&&, unsigned long&&)
void std::__1::vector<angle::ObserverBinding, std::__1::allocator<angle::ObserverBinding> >::__emplace_back_slow_path<gl::VertexArray*, unsigned long&>(gl::VertexArray*&&, unsigned long&)
void std::__1::vector<angle::ObserverBinding, std::__1::allocator<angle::ObserverBinding> >::__push_back_slow_path<angle::ObserverBinding>(angle::ObserverBinding&&)
void std::__1::vector<angle::ScratchBuffer, std::__1::allocator<angle::ScratchBuffer> >::__push_back_slow_path<angle::ScratchBuffer>(angle::ScratchBuffer&&)
void std::__1::vector<angle::pp::DirectiveParser::ConditionalBlock, std::__1::allocator<angle::pp::DirectiveParser::ConditionalBlock> >::__push_back_slow_path<angle::pp::DirectiveParser::ConditionalBlock const&>(angle::pp::DirectiveParser::ConditionalBlock const&)
void std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >::__push_back_slow_path<angle::pp::Token const&>(angle::pp::Token const&)
void std::__1::vector<gl::BufferVariable, std::__1::allocator<gl::BufferVariable> >::__push_back_slow_path<gl::BufferVariable const&>(gl::BufferVariable const&)
void std::__1::vector<gl::Debug::Control, std::__1::allocator<gl::Debug::Control> >::__push_back_slow_path<gl::Debug::Control>(gl::Debug::Control&&)
void std::__1::vector<gl::Debug::Group, std::__1::allocator<gl::Debug::Group> >::__push_back_slow_path<gl::Debug::Group>(gl::Debug::Group&&)
void std::__1::vector<gl::ImageBinding, std::__1::allocator<gl::ImageBinding> >::__emplace_back_slow_path<gl::ImageBinding&>(gl::ImageBinding&)
void std::__1::vector<gl::ImageBinding, std::__1::allocator<gl::ImageBinding> >::__emplace_back_slow_path<gl::ImageBinding>(gl::ImageBinding&&)
void std::__1::vector<gl::InterfaceBlock, std::__1::allocator<gl::InterfaceBlock> >::__push_back_slow_path<gl::InterfaceBlock const&>(gl::InterfaceBlock const&)
void std::__1::vector<gl::LinkedUniform, std::__1::allocator<gl::LinkedUniform> >::__push_back_slow_path<gl::LinkedUniform const&>(gl::LinkedUniform const&)
void std::__1::vector<gl::PackedVarying, std::__1::allocator<gl::PackedVarying> >::__emplace_back_slow_path<gl::VaryingInShaderRef, gl::VaryingInShaderRef, sh::InterpolationType const&, unsigned int&>(gl::VaryingInShaderRef&&, gl::VaryingInShaderRef&&, sh::InterpolationType const&, unsigned int&)
void std::__1::vector<gl::PackedVarying, std::__1::allocator<gl::PackedVarying> >::__emplace_back_slow_path<gl::VaryingInShaderRef, gl::VaryingInShaderRef, sh::InterpolationType const&>(gl::VaryingInShaderRef&&, gl::VaryingInShaderRef&&, sh::InterpolationType const&)
void std::__1::vector<gl::PackedVarying, std::__1::allocator<gl::PackedVarying> >::__emplace_back_slow_path<gl::VaryingInShaderRef, gl::VaryingInShaderRef, sh::InterpolationType&, unsigned int&>(gl::VaryingInShaderRef&&, gl::VaryingInShaderRef&&, sh::InterpolationType&, unsigned int&)
void std::__1::vector<gl::PackedVarying, std::__1::allocator<gl::PackedVarying> >::__emplace_back_slow_path<gl::VaryingInShaderRef, gl::VaryingInShaderRef, sh::InterpolationType&>(gl::VaryingInShaderRef&&, gl::VaryingInShaderRef&&, sh::InterpolationType&)
void std::__1::vector<gl::SamplerBinding, std::__1::allocator<gl::SamplerBinding> >::__emplace_back_slow_path<gl::TextureType&, gl::SamplerFormat&, unsigned int&, bool>(gl::TextureType&, gl::SamplerFormat&, unsigned int&, bool&&)
void std::__1::vector<gl::SamplerBinding, std::__1::allocator<gl::SamplerBinding> >::__emplace_back_slow_path<gl::TextureType&, gl::SamplerFormat&, unsigned long&, bool&>(gl::TextureType&, gl::SamplerFormat&, unsigned long&, bool&)
void std::__1::vector<gl::ShCompilerInstance, std::__1::allocator<gl::ShCompilerInstance> >::__push_back_slow_path<gl::ShCompilerInstance>(gl::ShCompilerInstance&&)
void std::__1::vector<gl::ShaderVariableBuffer, std::__1::allocator<gl::ShaderVariableBuffer> >::__push_back_slow_path<gl::ShaderVariableBuffer const&>(gl::ShaderVariableBuffer const&)
void std::__1::vector<gl::TransformFeedbackVarying, std::__1::allocator<gl::TransformFeedbackVarying> >::__emplace_back_slow_path<sh::ShaderVariable const&, sh::ShaderVariable const&>(sh::ShaderVariable const&, sh::ShaderVariable const&)
void std::__1::vector<gl::TransformFeedbackVarying, std::__1::allocator<gl::TransformFeedbackVarying> >::__emplace_back_slow_path<sh::ShaderVariable const&, unsigned int>(sh::ShaderVariable const&, unsigned int&&)
void std::__1::vector<gl::TransformFeedbackVarying, std::__1::allocator<gl::TransformFeedbackVarying> >::__emplace_back_slow_path<sh::ShaderVariable&, unsigned int&>(sh::ShaderVariable&, unsigned int&)
void std::__1::vector<gl::UnusedUniform, std::__1::allocator<gl::UnusedUniform> >::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, bool, bool>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool&&, bool&&, bool&&)
void std::__1::vector<gl::UnusedUniform, std::__1::allocator<gl::UnusedUniform> >::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, bool, bool, bool>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, bool&&, bool&&, bool&&)
void std::__1::vector<gl::VertexAttribute, std::__1::allocator<gl::VertexAttribute> >::__emplace_back_slow_path<unsigned int&>(unsigned int&)
void std::__1::vector<gl::VertexAttribute, std::__1::allocator<gl::VertexAttribute> >::__emplace_back_slow_path<unsigned int>(unsigned int&&)
void std::__1::vector<gl::VertexBinding, std::__1::allocator<gl::VertexBinding> >::__emplace_back_slow_path<unsigned int>(unsigned int&&)
void std::__1::vector<glslang::TPpContext::TokenStream::Token, glslang::pool_allocator<glslang::TPpContext::TokenStream::Token> >::__push_back_slow_path<glslang::TPpContext::TokenStream::Token const&>(glslang::TPpContext::TokenStream::Token const&)
void std::__1::vector<rx::BufferVk::VertexConversionBuffer, std::__1::allocator<rx::BufferVk::VertexConversionBuffer> >::__emplace_back_slow_path<rx::RendererVk*&, angle::FormatID&, unsigned int&, unsigned long&, bool&>(rx::RendererVk*&, angle::FormatID&, unsigned int&, unsigned long&, bool&)
void std::__1::vector<rx::CommandBatch, std::__1::allocator<rx::CommandBatch> >::__emplace_back_slow_path<rx::CommandBatch>(rx::CommandBatch&&)
void std::__1::vector<rx::ContextVk::GpuEventQuery, std::__1::allocator<rx::ContextVk::GpuEventQuery> >::__push_back_slow_path<rx::ContextVk::GpuEventQuery>(rx::ContextVk::GpuEventQuery&&)
void std::__1::vector<rx::impl::SwapchainCleanupData, std::__1::allocator<rx::impl::SwapchainCleanupData> >::__emplace_back_slow_path<rx::impl::SwapchainCleanupData>(rx::impl::SwapchainCleanupData&&)
void std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >::__emplace_back_slow_path<rx::vk::GarbageObject>(rx::vk::GarbageObject&&)
void std::__1::vector<rx::vk::ImageHelper::SubresourceUpdate, std::__1::allocator<rx::vk::ImageHelper::SubresourceUpdate> >::__emplace_back_slow_path<rx::vk::ImageHelper::SubresourceUpdate&>(rx::vk::ImageHelper::SubresourceUpdate&)
void std::__1::vector<rx::vk::ImageHelper::SubresourceUpdate, std::__1::allocator<rx::vk::ImageHelper::SubresourceUpdate> >::__emplace_back_slow_path<rx::vk::ImageHelper::SubresourceUpdate>(rx::vk::ImageHelper::SubresourceUpdate&&)
void std::__1::vector<rx::vk::ObjectAndSerial<std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> > >, std::__1::allocator<rx::vk::ObjectAndSerial<std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> > > > >::__emplace_back_slow_path<std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >, rx::Serial&>(std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >&&, rx::Serial&)
void std::__1::vector<rx::vk::QueryHelper, std::__1::allocator<rx::vk::QueryHelper> >::__emplace_back_slow_path<rx::vk::QueryHelper&>(rx::vk::QueryHelper&)
void std::__1::vector<rx::vk::SharedGarbage, std::__1::allocator<rx::vk::SharedGarbage> >::__emplace_back_slow_path<rx::vk::SharedResourceUse, std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> > >(rx::vk::SharedResourceUse&&, std::__1::vector<rx::vk::GarbageObject, std::__1::allocator<rx::vk::GarbageObject> >&&)
void std::__1::vector<sh::InterfaceBlock, std::__1::allocator<sh::InterfaceBlock> >::__push_back_slow_path<sh::InterfaceBlock const&>(sh::InterfaceBlock const&)
void std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >::__emplace_back_slow_path<sh::ShaderVariable const&>(sh::ShaderVariable const&)
void std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >::__emplace_back_slow_path<sh::ShaderVariable&>(sh::ShaderVariable&)
void std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >::__push_back_slow_path<sh::ShaderVariable const&>(sh::ShaderVariable const&)
void std::__1::vector<sh::ShaderVariable, std::__1::allocator<sh::ShaderVariable> >::__push_back_slow_path<sh::ShaderVariable>(sh::ShaderVariable&&)
void std::__1::vector<sh::TIntermTraverser::NodeInsertMultipleEntry, std::__1::allocator<sh::TIntermTraverser::NodeInsertMultipleEntry> >::__push_back_slow_path<sh::TIntermTraverser::NodeInsertMultipleEntry const&>(sh::TIntermTraverser::NodeInsertMultipleEntry const&)
void std::__1::vector<sh::TIntermTraverser::NodeReplaceWithMultipleEntry, std::__1::allocator<sh::TIntermTraverser::NodeReplaceWithMultipleEntry> >::__emplace_back_slow_path<sh::TIntermBlock*&, sh::TIntermNode*&, sh::TVector<sh::TIntermNode*>&>(sh::TIntermBlock*&, sh::TIntermNode*&, sh::TVector<sh::TIntermNode*>&)
void std::__1::vector<sh::TIntermTraverser::NodeReplaceWithMultipleEntry, std::__1::allocator<sh::TIntermTraverser::NodeReplaceWithMultipleEntry> >::__emplace_back_slow_path<sh::TIntermBlock*, sh::TIntermAggregate*&, sh::TVector<sh::TIntermNode*>&>(sh::TIntermBlock*&&, sh::TIntermAggregate*&, sh::TVector<sh::TIntermNode*>&)
void std::__1::vector<sh::TIntermTraverser::NodeReplaceWithMultipleEntry, std::__1::allocator<sh::TIntermTraverser::NodeReplaceWithMultipleEntry> >::__emplace_back_slow_path<sh::TIntermBlock*, sh::TIntermDeclaration*&, sh::TVector<sh::TIntermNode*>&>(sh::TIntermBlock*&&, sh::TIntermDeclaration*&, sh::TVector<sh::TIntermNode*>&)
void std::__1::vector<sh::TIntermTraverser::NodeReplaceWithMultipleEntry, std::__1::allocator<sh::TIntermTraverser::NodeReplaceWithMultipleEntry> >::__push_back_slow_path<sh::TIntermTraverser::NodeReplaceWithMultipleEntry>(sh::TIntermTraverser::NodeReplaceWithMultipleEntry&&)
void std::__1::vector<sh::TVector<sh::TIntermNode*>, std::__1::allocator<sh::TVector<sh::TIntermNode*> > >::__push_back_slow_path<sh::TVector<sh::TIntermNode*> >(sh::TVector<sh::TIntermNode*>&&)
void std::__1::vector<spv::Builder::AccessChain, std::__1::allocator<spv::Builder::AccessChain> >::__push_back_slow_path<spv::Builder::AccessChain>(spv::Builder::AccessChain&&)
void std::__1::vector<spvtools::opt::Instruction, std::__1::allocator<spvtools::opt::Instruction> >::__push_back_slow_path<spvtools::opt::Instruction const&>(spvtools::opt::Instruction const&)
void std::__1::vector<spvtools::opt::Instruction, std::__1::allocator<spvtools::opt::Instruction> >::__push_back_slow_path<spvtools::opt::Instruction>(spvtools::opt::Instruction&&)
void std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::__emplace_back_slow_path<spv_operand_type_t const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >(spv_operand_type_t const&, std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&&)
void std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::__emplace_back_slow_path<spv_operand_type_t, std::initializer_list<unsigned int> >(spv_operand_type_t&&, std::initializer_list<unsigned int>&&)
void std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::__emplace_back_slow_path<spvtools::opt::Operand&>(spvtools::opt::Operand&)
void std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::__emplace_back_slow_path<spvtools::opt::Operand>(spvtools::opt::Operand&&)
void std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::__push_back_slow_path<spvtools::opt::Operand const&>(spvtools::opt::Operand const&)
void std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >::__push_back_slow_path<spvtools::opt::Operand>(spvtools::opt::Operand&&)
void std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >::__emplace_back_slow_path<spvtools::opt::VectorDCE::WorkListItem&>(spvtools::opt::VectorDCE::WorkListItem&)
void std::__1::vector<spvtools::opt::analysis::TypeManager::UnresolvedType, std::__1::allocator<spvtools::opt::analysis::TypeManager::UnresolvedType> >::__emplace_back_slow_path<unsigned int&, spvtools::opt::analysis::Type*&>(unsigned int&, spvtools::opt::analysis::Type*&)
void std::__1::vector<spvtools::opt::analysis::TypeManager::UnresolvedType, std::__1::allocator<spvtools::opt::analysis::TypeManager::UnresolvedType> >::__emplace_back_slow_path<unsigned int, spvtools::opt::analysis::Type*&>(unsigned int&&, spvtools::opt::analysis::Type*&)
void std::__1::vector<spvtools::val::Decoration, std::__1::allocator<spvtools::val::Decoration> >::__push_back_slow_path<spvtools::val::Decoration const&>(spvtools::val::Decoration const&)
void std::__1::vector<spvtools::val::Function, std::__1::allocator<spvtools::val::Function> >::__emplace_back_slow_path<unsigned int&, unsigned int&, SpvFunctionControlMask_&, unsigned int&>(unsigned int&, unsigned int&, SpvFunctionControlMask_&, unsigned int&)
void std::__1::vector<spvtools::val::Instruction, std::__1::allocator<spvtools::val::Instruction> >::__emplace_back_slow_path<spv_parsed_instruction_t const*&>(spv_parsed_instruction_t const*&)
void std::__1::vector<spvtools::val::ValidationState_t::EntryPointDescription, std::__1::allocator<spvtools::val::ValidationState_t::EntryPointDescription> >::__emplace_back_slow_path<spvtools::val::ValidationState_t::EntryPointDescription&>(spvtools::val::ValidationState_t::EntryPointDescription&)
void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >&&)
void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> >, glslang::pool_allocator<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > > >::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&>(std::__1::basic_string<char, std::__1::char_traits<char>, glslang::pool_allocator<char> > const&)
void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&)
void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
void std::__1::vector<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > >::__push_back_slow_path<std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(std::__1::function<bool (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>&&)
void std::__1::vector<std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)>, std::__1::allocator<std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> > >::__push_back_slow_path<std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> const&>(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> const&)
void std::__1::vector<std::__1::shared_ptr<angle::pp::Macro>, std::__1::allocator<std::__1::shared_ptr<angle::pp::Macro> > >::__push_back_slow_path<std::__1::shared_ptr<angle::pp::Macro> const&>(std::__1::shared_ptr<angle::pp::Macro> const&)
void std::__1::vector<std::__1::unique_ptr<sh::TMap<sh::TBasicType, sh::TPrecision, std::__1::less<sh::TBasicType> >, std::__1::default_delete<sh::TMap<sh::TBasicType, sh::TPrecision, std::__1::less<sh::TBasicType> > > >, std::__1::allocator<std::__1::unique_ptr<sh::TMap<sh::TBasicType, sh::TPrecision, std::__1::less<sh::TBasicType> >, std::__1::default_delete<sh::TMap<sh::TBasicType, sh::TPrecision, std::__1::less<sh::TBasicType> > > > > >::__emplace_back_slow_path<sh::TMap<sh::TBasicType, sh::TPrecision, std::__1::less<sh::TBasicType> >*>(sh::TMap<sh::TBasicType, sh::TPrecision, std::__1::less<sh::TBasicType> >*&&)
void std::__1::vector<std::__1::unique_ptr<sh::TSymbolTable::TSymbolTableLevel, std::__1::default_delete<sh::TSymbolTable::TSymbolTableLevel> >, std::__1::allocator<std::__1::unique_ptr<sh::TSymbolTable::TSymbolTableLevel, std::__1::default_delete<sh::TSymbolTable::TSymbolTableLevel> > > >::__emplace_back_slow_path<sh::TSymbolTable::TSymbolTableLevel*>(sh::TSymbolTable::TSymbolTableLevel*&&)
void std::__1::vector<std::__1::unique_ptr<spv::Function, std::__1::default_delete<spv::Function> >, std::__1::allocator<std::__1::unique_ptr<spv::Function, std::__1::default_delete<spv::Function> > > >::__push_back_slow_path<std::__1::unique_ptr<spv::Function, std::__1::default_delete<spv::Function> > >(std::__1::unique_ptr<spv::Function, std::__1::default_delete<spv::Function> >&&)
void std::__1::vector<std::__1::unique_ptr<spv::Instruction, std::__1::default_delete<spv::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spv::Instruction, std::__1::default_delete<spv::Instruction> > > >::__push_back_slow_path<std::__1::unique_ptr<spv::Instruction, std::__1::default_delete<spv::Instruction> > >(std::__1::unique_ptr<spv::Instruction, std::__1::default_delete<spv::Instruction> >&&)
void std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >::__push_back_slow_path<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > >(std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >&&)
void std::__1::vector<std::__1::unique_ptr<spvtools::opt::Function, std::__1::default_delete<spvtools::opt::Function> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Function, std::__1::default_delete<spvtools::opt::Function> > > >::__emplace_back_slow_path<std::__1::unique_ptr<spvtools::opt::Function, std::__1::default_delete<spvtools::opt::Function> > >(std::__1::unique_ptr<spvtools::opt::Function, std::__1::default_delete<spvtools::opt::Function> >&&)
void std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >::__emplace_back_slow_path<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > >(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >&&)
void std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >::__push_back_slow_path<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > >(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >&&)
void std::__1::vector<std::__1::unique_ptr<spvtools::opt::Pass, std::__1::default_delete<spvtools::opt::Pass> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Pass, std::__1::default_delete<spvtools::opt::Pass> > > >::__push_back_slow_path<std::__1::unique_ptr<spvtools::opt::Pass, std::__1::default_delete<spvtools::opt::Pass> > >(std::__1::unique_ptr<spvtools::opt::Pass, std::__1::default_delete<spvtools::opt::Pass> >&&)
void std::__1::vector<std::__1::unique_ptr<spvtools::opt::analysis::Constant, std::__1::default_delete<spvtools::opt::analysis::Constant> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::analysis::Constant, std::__1::default_delete<spvtools::opt::analysis::Constant> > > >::__emplace_back_slow_path<std::__1::unique_ptr<spvtools::opt::analysis::Constant, std::__1::default_delete<spvtools::opt::analysis::Constant> > >(std::__1::unique_ptr<spvtools::opt::analysis::Constant, std::__1::default_delete<spvtools::opt::analysis::Constant> >&&)
void std::__1::vector<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >, std::__1::allocator<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> > > >::__push_back_slow_path<std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> > >(std::__1::vector<angle::pp::Token, std::__1::allocator<angle::pp::Token> >&&)
void std::__1::vector<std::__1::vector<int, std::__1::allocator<int> >, std::__1::allocator<std::__1::vector<int, std::__1::allocator<int> > > >::__push_back_slow_path<std::__1::vector<int, std::__1::allocator<int> > >(std::__1::vector<int, std::__1::allocator<int> >&&)
void std::__1::vector<std::__1::vector<int, std::__1::allocator<int> >, std::__1::allocator<std::__1::vector<int, std::__1::allocator<int> > > >::__push_back_slow_path<std::__1::vector<int, std::__1::allocator<int> > const&>(std::__1::vector<int, std::__1::allocator<int> > const&)
void std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >::__push_back_slow_path<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > >(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >&&)
void subgroupBarrier();void subgroupMemoryBarrier();void subgroupMemoryBarrierBuffer();void subgroupMemoryBarrierImage();bool subgroupElect();bool   subgroupAll(bool);bool   subgroupAny(bool);uvec4  subgroupBallot(bool);bool   subgroupInverseBallot(uvec4);bool   subgroupBallotBitExtract(uvec4, uint);uint   subgroupBallotBitCount(uvec4);uint   subgroupBallotInclusiveBitCount(uvec4);uint   subgroupBallotExclusiveBitCount(uvec4);uint   subgroupBallotFindLSB(uvec4);uint   subgroupBallotFindMSB(uvec4);
void subgroupMemoryBarrierShared();
void traceNV(accelerationStructureNV,uint,uint,uint,uint,uint,vec3,float,vec3,float,int);void traceRayEXT(accelerationStructureEXT,uint,uint,uint,uint,uint,vec3,float,vec3,float,int);void executeCallableNV(uint, int);void executeCallableEXT(uint, int);
void writePackedPrimitiveIndices4x8NV(uint, uint);
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<angle::vk::(anonymous namespace)::GetFilterForICD(angle::vk::ICD)::$_2, bool (VkPhysicalDeviceProperties const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<glslang::HlslParseContext::handleAssign(glslang::TSourceLoc const&, glslang::TOperator, glslang::TIntermTyped*, glslang::TIntermTyped*)::$_17, void (glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, glslang::TIntermTyped*, bool)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<rx::ProgramGL::link(gl::Context const*, gl::ProgramLinkedResources const&, gl::InfoLog&)::$_1, angle::Result (bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spv::Builder::postProcessCFG()::$_2, void (spv::Block*, spv::ReachReason, spv::Block*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#2}, void (unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::BasicBlockSuccessorHelper<spvtools::opt::BasicBlock>::CreateSuccessorMap(spvtools::opt::Function&, spvtools::opt::BasicBlock const*)::{lambda(unsigned int)#3}, void (unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPBinaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_5, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::(anonymous namespace)::FoldFPUnaryOp(std::__1::function<spvtools::opt::analysis::Constant const* (spvtools::opt::analysis::Type const*, spvtools::opt::analysis::Constant const*, spvtools::opt::analysis::ConstantManager*)>)::$_4, spvtools::opt::analysis::Constant const* (spvtools::opt::IRContext*, spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::analysis::Constant const*, std::__1::allocator<spvtools::opt::analysis::Constant const*> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::AggressiveDCEPass::AggressiveDCE(spvtools::opt::Function*)::$_7, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::ForEachSuccessorLabel(std::__1::function<void (unsigned int)> const&) const::$_1, bool (unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7, void (unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::BasicBlock::SplitBasicBlock(spvtools::opt::IRContext*, unsigned int, spvtools::opt::InstructionList::iterator)::$_7::operator()(unsigned int) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ComputePostOrderTraversal(spvtools::opt::BasicBlock*, std::__1::vector<spvtools::opt::BasicBlock*, std::__1::allocator<spvtools::opt::BasicBlock*> >*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_8, bool (unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::ForEachBlockInReversePostOrder(spvtools::opt::BasicBlock*, std::__1::function<void (spvtools::opt::BasicBlock*)> const&)::$_6, bool (spvtools::opt::BasicBlock*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::CFG::SplitLoopHeader(spvtools::opt::BasicBlock*)::$_11, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::AddBlocksWithBackEdge(unsigned int, unsigned int, unsigned int, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_5, void (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::MarkLiveBlocks(spvtools::opt::Function*, std::__1::unordered_set<spvtools::opt::BasicBlock*, std::__1::hash<spvtools::opt::BasicBlock*>, std::__1::equal_to<spvtools::opt::BasicBlock*>, std::__1::allocator<spvtools::opt::BasicBlock*> >*)::$_0, bool (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::DeadBranchElimPass::SwitchHasNestedBreak(unsigned int)::$_6, bool (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::CanHoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_3, bool (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::HoistInstruction(spvtools::opt::Instruction*, spvtools::opt::BasicBlock*, spvtools::opt::DominatorAnalysis*)::$_2, void (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::IfConversion::Process()::$_0, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::CloneSameBlockOps(std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >*, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*, std::__1::unordered_map<unsigned int, spvtools::opt::Instruction*, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::opt::Instruction*> > >*, std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >*)::$_1, bool (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::GenInlineCode(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >*, std::__1::vector<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::Instruction, std::__1::default_delete<spvtools::opt::Instruction> > > >*, spvtools::opt::InstructionList::iterator, spvtools::opt::UptrVectorIterator<spvtools::opt::BasicBlock, false>)::$_4, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::MapParams(spvtools::opt::Function*, spvtools::opt::InstructionList::iterator, std::__1::unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::InlinePass::UpdateSucceedingPhis(std::__1::vector<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> >, std::__1::allocator<std::__1::unique_ptr<spvtools::opt::BasicBlock, std::__1::default_delete<spvtools::opt::BasicBlock> > > >&)::$_5, void (unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::InstructionFolder::FoldInstructionToConstant(spvtools::opt::Instruction*, std::__1::function<unsigned int (unsigned int)>) const::$_1, void (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::LocalAccessChainConvertPass::AppendConstantOperands(spvtools::opt::Instruction const*, std::__1::vector<spvtools::opt::Operand, std::__1::allocator<spvtools::opt::Operand> >*)::$_0, void (unsigned int const*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::LocalRedundancyEliminationPass::EliminateRedundanciesInBB(spvtools::opt::BasicBlock*, spvtools::opt::ValueNumberTable const&, std::__1::map<unsigned int, unsigned int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, unsigned int> > >*)::$_0, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::MemPass::RemoveUnreachableBlocks(spvtools::opt::Function*)::$_7, void (unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::CreatePhiNodesForInst(spvtools::opt::BasicBlock*, spvtools::opt::Instruction&)::$_2, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::MergeReturnPass::Process()::$_0, bool (spvtools::opt::Function*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::Module::ToBinary(std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >*, bool) const::$_0, void (spvtools::opt::Instruction const*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::ProcessLinesPass::ProcessLines()::$_0, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CheckUses(spvtools::opt::Instruction const*, spvtools::opt::ScalarReplacementPass::VariableStats*) const::$_2, void (spvtools::opt::Instruction*, unsigned int)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::CreateReplacementVariables(spvtools::opt::Instruction*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_1, void (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::GetUsedComponents(spvtools::opt::Instruction*)::$_4, bool (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::ScalarReplacementPass::ReplaceVariable(spvtools::opt::Instruction*, std::__1::queue<spvtools::opt::Instruction*, std::__1::deque<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> > >*)::$_0, bool (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::AddNewOperands(spvtools::opt::Instruction*, std::__1::unordered_set<spvtools::opt::Instruction*, std::__1::hash<spvtools::opt::Instruction*>, std::__1::equal_to<spvtools::opt::Instruction*>, std::__1::allocator<spvtools::opt::Instruction*> >*, std::__1::vector<spvtools::opt::Instruction*, std::__1::allocator<spvtools::opt::Instruction*> >*)::$_0, void (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1, void (spvtools::opt::BasicBlock*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::SimplificationPass::SimplifyFunction(spvtools::opt::Function*)::$_1::operator()(spvtools::opt::BasicBlock*) const::{lambda(spvtools::opt::Instruction*)#1}, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::FindLiveComponents(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*)::$_0, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::MarkUsesAsLive(spvtools::opt::Instruction*, spvtools::utils::BitVector const&, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > >*, std::__1::vector<spvtools::opt::VectorDCE::WorkListItem, std::__1::allocator<spvtools::opt::VectorDCE::WorkListItem> >*)::$_1, void (unsigned int*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::opt::VectorDCE::RewriteInstructions(spvtools::opt::Function*, std::__1::unordered_map<unsigned int, spvtools::utils::BitVector, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<unsigned int const, spvtools::utils::BitVector> > > const&)::$_2, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_0, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_1, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateClipOrCullDistanceAtReference(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&)::$_2, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_31, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateComputeShaderI32Vec3InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_30, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_32, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateI32Vec4InputAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_33, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_28, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateLayerOrViewportIndexAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_29, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::(anonymous namespace)::BuiltInsValidator::ValidateSMBuiltinsAtDefinition(spvtools::val::Decoration const&, spvtools::val::Instruction const&)::$_35, spv_result_t (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::Function::RegisterExecutionModelLimitation(SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::$_5, bool (SpvExecutionModel_, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<spvtools::val::ValidateExtInst(spvtools::val::ValidationState_t&, spvtools::val::Instruction const*)::$_0, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [123], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [124], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [129], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [140], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [141], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [143], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [149], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [153], SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const (&) [175], SpvExecutionModel_ const&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(char const*, SpvExecutionModel_, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, char const*&, SpvExecutionModel_&, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<spv_result_t (spvtools::val::(anonymous namespace)::BuiltInsValidator::*)(spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&), spvtools::val::(anonymous namespace)::BuiltInsValidator*, spvtools::val::Decoration const&, spvtools::val::Instruction const&, spvtools::val::Instruction const&, std::__1::placeholders::__ph<1> const&>, spv_result_t (spvtools::val::Instruction const&)> >(void const*)
void* std::__1::__function::__policy::__large_clone<std::__1::__function::__default_alloc_func<std::__1::__bind<void (spvtools::opt::analysis::DefUseManager::*)(spvtools::opt::Instruction*), spvtools::opt::analysis::DefUseManager*, std::__1::placeholders::__ph<1> const&>, void (spvtools::opt::Instruction*)> >(void const*)
void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, angle::Result (rx::CommandProcessor::*)(), rx::CommandProcessor*> >(void*)
void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (std::__1::__async_assoc_state<void, std::__1::__async_func<angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1> >::*)(), std::__1::__async_assoc_state<void, std::__1::__async_func<angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1> >*> >(void*)
volatile
volk.c
volkGetLoadedDevice
volkGetLoadedInstance
volkInitialize
volkLoadDevice
volkLoadInstance
vsnprintf
vstore_half
vstore_half_r
vstore_halfn
vstore_halfn_r
vstorea_halfn
vstorea_halfn_r
vstoren
vtable for (anonymous namespace)::TGlslangToSpvTraverser
vtable for (anonymous namespace)::TNoContractionAssigneeCheckingTraverser
vtable for (anonymous namespace)::TNoContractionPropagator
vtable for (anonymous namespace)::TSymbolDefinitionCollectingTraverser
vtable for (anonymous namespace)::WorkerContextEGL
vtable for TShHandleBase
vtable for VmaBlockMetadata
vtable for VmaBlockMetadata_Buddy
vtable for VmaBlockMetadata_Generic
vtable for VmaBlockMetadata_Linear
vtable for __cxxabiv1::__class_type_info
vtable for __cxxabiv1::__si_class_type_info
vtable for __cxxabiv1::__vmi_class_type_info
vtable for angle::AsyncWaitableEvent
vtable for angle::AsyncWorkerPool
vtable for angle::BindingPointer<egl::Image, egl::Display, egl::Error>
vtable for angle::BindingPointer<gl::Buffer, gl::Context, angle::Result>
vtable for angle::BindingPointer<gl::Compiler, gl::Context, angle::Result>
vtable for angle::BindingPointer<gl::ProgramPipeline, gl::Context, angle::Result>
vtable for angle::BindingPointer<gl::Query, gl::Context, angle::Result>
vtable for angle::BindingPointer<gl::Renderbuffer, gl::Context, angle::Result>
vtable for angle::BindingPointer<gl::Sampler, gl::Context, angle::Result>
vtable for angle::BindingPointer<gl::Texture, gl::Context, angle::Result>
vtable for angle::BindingPointer<gl::TransformFeedback, gl::Context, angle::Result>
vtable for angle::DelegateWaitableEvent
vtable for angle::DelegateWorkerPool
vtable for angle::LoggingAnnotator
vtable for angle::ObserverBinding
vtable for angle::ObserverBindingBase
vtable for angle::ObserverInterface
vtable for angle::RefCountObject<egl::Display, angle::Result>
vtable for angle::RefCountObject<egl::Display, egl::Error>
vtable for angle::RefCountObject<gl::Context, angle::Result>
vtable for angle::SingleThreadedWaitableEvent
vtable for angle::SingleThreadedWorkerPool
vtable for angle::Subject
vtable for angle::WaitableEvent
vtable for angle::WaitableEventDone
vtable for angle::base::HashingMRUCache<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> > >
vtable for angle::base::MRUCacheBase<std::__1::array<unsigned char, 20ul>, angle::SizedMRUCache<std::__1::array<unsigned char, 20ul>, std::__1::pair<angle::MemoryBuffer, egl::BlobCache::CacheSource> >::ValueAndSize, std::__1::hash<std::__1::array<unsigned char, 20ul> >, angle::base::MRUCacheHashMap>
vtable for angle::pp::(anonymous namespace)::TokenLexer
vtable for angle::pp::DirectiveParser
vtable for angle::pp::MacroExpander
vtable for angle::pp::Tokenizer
vtable for egl::Device
vtable for egl::Display
vtable for egl::ExternalImageSibling
vtable for egl::Image
vtable for egl::ImageSibling
vtable for egl::LabeledObject
vtable for egl::PbufferSurface
vtable for egl::PixmapSurface
vtable for egl::Stream
vtable for egl::Surface
vtable for egl::Sync
vtable for egl::Thread
vtable for egl::WindowSurface
vtable for gl::(anonymous namespace)::FlattenUniformVisitor
vtable for gl::(anonymous namespace)::ShaderStorageBlockVisitor
vtable for gl::(anonymous namespace)::UniformBlockEncodingVisitor
vtable for gl::ActiveVariable
vtable for gl::BindingPointer<gl::Buffer>
vtable for gl::BindingPointer<gl::Compiler>
vtable for gl::BindingPointer<gl::ProgramPipeline>
vtable for gl::BindingPointer<gl::Query>
vtable for gl::BindingPointer<gl::Renderbuffer>
vtable for gl::BindingPointer<gl::Sampler>
vtable for gl::BindingPointer<gl::Texture>
vtable for gl::BindingPointer<gl::TransformFeedback>
vtable for gl::Buffer
vtable for gl::BufferManager
vtable for gl::BufferVariable
vtable for gl::Compiler
vtable for gl::Context
vtable for gl::FenceNV
vtable for gl::Framebuffer
vtable for gl::FramebufferAttachmentObject
vtable for gl::FramebufferManager
vtable for gl::InterfaceBlock
vtable for gl::LabeledObject
vtable for gl::LinkedUniform
vtable for gl::MemoryObject
vtable for gl::MemoryObjectManager
vtable for gl::OffsetBindingPointer<gl::Buffer>
vtable for gl::Program
vtable for gl::ProgramExecutable
vtable for gl::ProgramPipeline
vtable for gl::ProgramPipelineManager
vtable for gl::Query
vtable for gl::RefCountObject<gl::BufferID>
vtable for gl::RefCountObject<gl::RenderbufferID>
vtable for gl::RefCountObject<gl::SamplerID>
vtable for gl::RefCountObject<gl::TextureID>
vtable for gl::Renderbuffer
vtable for gl::RenderbufferManager
vtable for gl::ResourceManagerBase<gl::HandleAllocator>
vtable for gl::Sampler
vtable for gl::SamplerManager
vtable for gl::Semaphore
vtable for gl::SemaphoreManager
vtable for gl::Shader
vtable for gl::ShaderProgramManager
vtable for gl::ShaderStorageBlockLinker
vtable for gl::ShaderVariableBuffer
vtable for gl::SubjectBindingPointer<gl::Buffer>
vtable for gl::Sync
vtable for gl::SyncManager
vtable for gl::Texture
vtable for gl::TextureManager
vtable for gl::TransformFeedback
vtable for gl::TypedResourceManager<gl::Buffer, gl::HandleAllocator, gl::BufferManager, gl::BufferID>
vtable for gl::TypedResourceManager<gl::Framebuffer, gl::HandleAllocator, gl::FramebufferManager, gl::FramebufferID>
vtable for gl::TypedResourceManager<gl::ProgramPipeline, gl::HandleAllocator, gl::ProgramPipelineManager, gl::ProgramPipelineID>
vtable for gl::TypedResourceManager<gl::Renderbuffer, gl::HandleAllocator, gl::RenderbufferManager, gl::RenderbufferID>
vtable for gl::TypedResourceManager<gl::Sampler, gl::HandleAllocator, gl::SamplerManager, gl::SamplerID>
vtable for gl::TypedResourceManager<gl::Sync, gl::HandleAllocator, gl::SyncManager, unsigned int>
vtable for gl::TypedResourceManager<gl::Texture, gl::HandleAllocator, gl::TextureManager, gl::TextureID>
vtable for gl::UniformBlockLinker
vtable for gl::VertexArray
vtable for glslang::HlslGrammar
vtable for glslang::HlslParseContext
vtable for glslang::HlslScanContext
vtable for glslang::HlslTokenStream
vtable for glslang::TAnonMember
vtable for glslang::TBuiltInIdTraverser
vtable for glslang::TBuiltInParseables
vtable for glslang::TBuiltInParseablesHlsl
vtable for glslang::TBuiltIns
vtable for glslang::TConstTraverser
vtable for glslang::TConstUnionArray
vtable for glslang::TDeferredCompiler
vtable for glslang::TFunction
vtable for glslang::TIndexTraverser
vtable for glslang::TInductiveTraverser
vtable for glslang::TInputScanner
vtable for glslang::TIntermAggregate
vtable for glslang::TIntermBinary
vtable for glslang::TIntermBranch
vtable for glslang::TIntermConstantUnion
vtable for glslang::TIntermLoop
vtable for glslang::TIntermMethod
vtable for glslang::TIntermSelection
vtable for glslang::TIntermSwitch
vtable for glslang::TIntermSymbol
vtable for glslang::TIntermTraverser
vtable for glslang::TIntermTyped
vtable for glslang::TIntermUnary
vtable for glslang::TIntermediate::finalCheck(TInfoSink&, bool)::TFinalLinkTraverser
vtable for glslang::TOutputTraverser
vtable for glslang::TParseContext
vtable for glslang::TParseContextBase
vtable for glslang::TParseVersions
vtable for glslang::TPpContext
vtable for glslang::TPpContext::TokenizableIncludeFile
vtable for glslang::TPpContext::tMacroInput
vtable for glslang::TPpContext::tMarkerInput
vtable for glslang::TPpContext::tStringInput
vtable for glslang::TPpContext::tTokenInput
vtable for glslang::TPpContext::tUngotTokenInput
vtable for glslang::TPpContext::tZeroInput
vtable for glslang::TPrecisionManager
vtable for glslang::TProgram
vtable for glslang::TRemapIdTraverser
vtable for glslang::TScanContext
vtable for glslang::TShader
vtable for glslang::TShader::ForbidIncluder
vtable for glslang::TSmallArrayVector
vtable for glslang::TSymbol
vtable for glslang::TType
vtable for glslang::TUserIdTraverser
vtable for glslang::TVariable
vtable for glslang::TextureUpgradeAndSamplerRemovalTransform
vtable for rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory
vtable for rx::(anonymous namespace)::VulkanDefaultBlockEncoder
vtable for rx::BufferGL
vtable for rx::BufferNULL
vtable for rx::BufferVk
vtable for rx::CompilerGL
vtable for rx::CompilerNULL
vtable for rx::CompilerVk
vtable for rx::ContextEGL
vtable for rx::ContextGL
vtable for rx::ContextImpl
vtable for rx::ContextNULL
vtable for rx::ContextVk
vtable for rx::DeviceImpl
vtable for rx::DeviceNULL
vtable for rx::DispatchTableGL
vtable for rx::DisplayEGL
vtable for rx::DisplayGL
vtable for rx::DisplayGLX
vtable for rx::DisplayImpl
vtable for rx::DisplayNULL
vtable for rx::DisplayVk
vtable for rx::DisplayVkXcb
vtable for rx::DmaBufImageSiblingEGL
vtable for rx::EGLImplFactory
vtable for rx::EGLSyncVk
vtable for rx::FenceNVGL
vtable for rx::FenceNVNULL
vtable for rx::FenceNVSyncGL
vtable for rx::FenceNVVk
vtable for rx::FramebufferGL
vtable for rx::FramebufferNULL
vtable for rx::FramebufferVk
vtable for rx::FunctionsEGL
vtable for rx::FunctionsEGLDL
vtable for rx::FunctionsGL
vtable for rx::FunctionsGLEGL
vtable for rx::FunctionsGLGLX
vtable for rx::ImageEGL
vtable for rx::ImageGL
vtable for rx::ImageNULL
vtable for rx::ImageVk
vtable for rx::LinkEventDone
vtable for rx::MemoryObjectGL
vtable for rx::MemoryObjectVk
vtable for rx::OffscreenSurfaceVk
vtable for rx::OverlayImpl
vtable for rx::OverlayVk
vtable for rx::PbufferSurfaceEGL
vtable for rx::PbufferSurfaceGLX
vtable for rx::PixmapSurfaceGLX
vtable for rx::ProgramExecutableVk
vtable for rx::ProgramGL
vtable for rx::ProgramGL::LinkEventGL
vtable for rx::ProgramGL::LinkEventNativeParallel
vtable for rx::ProgramGL::LinkTask
vtable for rx::ProgramNULL
vtable for rx::ProgramPipelineGL
vtable for rx::ProgramPipelineNULL
vtable for rx::ProgramPipelineVk
vtable for rx::ProgramVk
vtable for rx::QueryNULL
vtable for rx::QueryVk
vtable for rx::RenderTargetVk
vtable for rx::RenderbufferGL
vtable for rx::RenderbufferNULL
vtable for rx::RenderbufferVk
vtable for rx::RendererEGL
vtable for rx::RendererGL
vtable for rx::RendererGLX
vtable for rx::SamplerGL
vtable for rx::SamplerNULL
vtable for rx::SamplerVk
vtable for rx::SemaphoreGL
vtable for rx::SemaphoreVk
vtable for rx::ShaderGL
vtable for rx::ShaderNULL
vtable for rx::ShaderVk
vtable for rx::ShareGroupGL
vtable for rx::ShareGroupNULL
vtable for rx::ShareGroupVk
vtable for rx::StandardQueryGL
vtable for rx::SurfaceEGL
vtable for rx::SurfaceGL
vtable for rx::SurfaceImpl
vtable for rx::SurfaceNULL
vtable for rx::SurfaceVk
vtable for rx::SyncEGL
vtable for rx::SyncGL
vtable for rx::SyncNULL
vtable for rx::SyncProviderGLQuery
vtable for rx::SyncProviderGLSync
vtable for rx::SyncQueryGL
vtable for rx::SyncVk
vtable for rx::TextureGL
vtable for rx::TextureImpl
vtable for rx::TextureNULL
vtable for rx::TextureVk
vtable for rx::TransformFeedbackGL
vtable for rx::TransformFeedbackNULL
vtable for rx::TransformFeedbackVk
vtable for rx::TranslateTask
vtable for rx::TranslateTaskGL
vtable for rx::VertexArrayGL
vtable for rx::VertexArrayNULL
vtable for rx::VertexArrayVk
vtable for rx::WaitableCompileEvent
vtable for rx::WaitableCompileEventDone
vtable for rx::WaitableCompileEventImpl
vtable for rx::WaitableCompileEventNativeParallel
vtable for rx::WaitableCompileEventWorkerContext
vtable for rx::WindowSurfaceEGL
vtable for rx::WindowSurfaceGLX
vtable for rx::WindowSurfaceVk
vtable for rx::WindowSurfaceVkXcb
vtable for rx::WorkerContextGLX
vtable for rx::vk::BufferHelper
vtable for rx::vk::Context
vtable for rx::vk::DynamicQueryPool
vtable for rx::vk::DynamicallyGrowingPool<rx::vk::QueryPool>
vtable for rx::vk::FramebufferHelper
vtable for rx::vk::ImageHelper
vtable for rx::vk::Resource
vtable for rx::vk::ResourceUseList
vtable for rx::vk::SyncHelper
vtable for rx::vk::SyncHelperNativeFence
vtable for sh::(anonymous namespace)::AddAndTrueToLoopConditionTraverser
vtable for sh::(anonymous namespace)::AddBaseVertexToGLVertexIDTraverser
vtable for sh::(anonymous namespace)::ArrayBoundsClamperMarker
vtable for sh::(anonymous namespace)::BaseAlignmentVisitor
vtable for sh::(anonymous namespace)::BlockLayoutMapVisitor
vtable for sh::(anonymous namespace)::CheckEFTOptimizationTraverser
vtable for sh::(anonymous namespace)::CollectVariableRefCountsTraverser
vtable for sh::(anonymous namespace)::CollectVariablesTraverser
vtable for sh::(anonymous namespace)::ContainsReturnTraverser
vtable for sh::(anonymous namespace)::DeclareDefaultUniformsTraverser
vtable for sh::(anonymous namespace)::DeclareStructTypesTraverser
vtable for sh::(anonymous namespace)::DoWhileRewriter
vtable for sh::(anonymous namespace)::FindGLBaseInstanceTraverser
vtable for sh::(anonymous namespace)::FindGLBaseVertexTraverser
vtable for sh::(anonymous namespace)::FindGLDrawIDTraverser
vtable for sh::(anonymous namespace)::FoldExpressionsTraverser
vtable for sh::(anonymous namespace)::GLClipDistanceReferenceTraverser
vtable for sh::(anonymous namespace)::GLFragColorBroadcastTraverser
vtable for sh::(anonymous namespace)::InitializeLocalsTraverser
vtable for sh::(anonymous namespace)::MaxDepthTraverser
vtable for sh::(anonymous namespace)::MonomorphizeTraverser
vtable for sh::(anonymous namespace)::MonomorphizeTraverser::CollectNewInstantiationsTraverser
vtable for sh::(anonymous namespace)::MonomorphizeTraverser::ReplaceVariablesTraverser
vtable for sh::(anonymous namespace)::PruneEmptyCasesTraverser
vtable for sh::(anonymous namespace)::PruneNoOpsTraverser
vtable for sh::(anonymous namespace)::RecordConstantPrecisionTraverser
vtable for sh::(anonymous namespace)::RemoveArrayLengthTraverser
vtable for sh::(anonymous namespace)::RemoveAtomicCounterBuiltinsTraverser
vtable for sh::(anonymous namespace)::RemoveDynamicIndexingTraverser
vtable for sh::(anonymous namespace)::RemoveInactiveInterfaceVariablesTraverser
vtable for sh::(anonymous namespace)::RemoveInvariantDeclarationTraverser
vtable for sh::(anonymous namespace)::RemovePowTraverser
vtable for sh::(anonymous namespace)::RemoveUnreferencedVariablesTraverser
vtable for sh::(anonymous namespace)::ReplaceShadowingVariablesTraverser
vtable for sh::(anonymous namespace)::ReplaceVariableExceptOneTraverser
vtable for sh::(anonymous namespace)::ReplaceVariableTraverser
vtable for sh::(anonymous namespace)::RewriteAssignToSwizzledTraverser
vtable for sh::(anonymous namespace)::RewriteAtomicCountersTraverser
vtable for sh::(anonymous namespace)::RewriteCubeMapSamplersAs2DArrayTraverser
vtable for sh::(anonymous namespace)::RewriteRowMajorMatricesTraverser
vtable for sh::(anonymous namespace)::RoundingHelperWriterESSL
vtable for sh::(anonymous namespace)::RoundingHelperWriterGLSL
vtable for sh::(anonymous namespace)::RoundingHelperWriterHLSL
vtable for sh::(anonymous namespace)::ScalarizeArgsTraverser
vtable for sh::(anonymous namespace)::SeparateDeclarationsTraverser
vtable for sh::(anonymous namespace)::SimplifyLoopConditionsTraverser
vtable for sh::(anonymous namespace)::SplitSequenceOperatorTraverser
vtable for sh::(anonymous namespace)::SymbolFinder
vtable for sh::(anonymous namespace)::TBuiltinsWorkaroundGLSL
vtable for sh::(anonymous namespace)::TOutputTraverser
vtable for sh::(anonymous namespace)::Traverser
vtable for sh::(anonymous namespace)::Traverser::CreateStructSamplerFunctionVisitor
vtable for sh::(anonymous namespace)::Traverser::GetSamplerArgumentsVisitor
vtable for sh::(anonymous namespace)::UnfoldShortCircuitASTTraverser
vtable for sh::(anonymous namespace)::ValidateAST
vtable for sh::(anonymous namespace)::ValidateConstIndexExpr
vtable for sh::(anonymous namespace)::ValidateGlobalInitializerTraverser
vtable for sh::(anonymous namespace)::ValidateLimitationsTraverser
vtable for sh::(anonymous namespace)::ValidateOutputsTraverser
vtable for sh::(anonymous namespace)::ValidateSwitch
vtable for sh::(anonymous namespace)::ValidateVaryingLocationsTraverser
vtable for sh::(anonymous namespace)::VectorizeVectorScalarArithmeticTraverser
vtable for sh::BlockEncoderVisitor
vtable for sh::BlockLayoutEncoder
vtable for sh::BuiltInFunctionEmulator::BuiltInFunctionEmulationMarker
vtable for sh::CallDAG::CallDAGCreator
vtable for sh::DummyBlockEncoder
vtable for sh::EmulatePrecision
vtable for sh::RegenerateStructNames
vtable for sh::Std140BlockEncoder
vtable for sh::Std430BlockEncoder
vtable for sh::TCompiler
vtable for sh::TDiagnostics
vtable for sh::TDirectiveHandler
vtable for sh::TExtensionGLSL
vtable for sh::TIntermAggregate
vtable for sh::TIntermBinary
vtable for sh::TIntermBlock
vtable for sh::TIntermBranch
vtable for sh::TIntermCase
vtable for sh::TIntermConstantUnion
vtable for sh::TIntermDeclaration
vtable for sh::TIntermExpression
vtable for sh::TIntermFunctionDefinition
vtable for sh::TIntermFunctionPrototype
vtable for sh::TIntermGlobalQualifierDeclaration
vtable for sh::TIntermIfElse
vtable for sh::TIntermLoop
vtable for sh::TIntermOperator
vtable for sh::TIntermSwitch
vtable for sh::TIntermSwizzle
vtable for sh::TIntermSymbol
vtable for sh::TIntermTernary
vtable for sh::TIntermTraverser
vtable for sh::TIntermTyped
vtable for sh::TIntermUnary
vtable for sh::TInterpolationQualifierWrapper
vtable for sh::TInvariantQualifierWrapper
vtable for sh::TLValueTrackingTraverser
vtable for sh::TLayoutQualifierWrapper
vtable for sh::TMemoryQualifierWrapper
vtable for sh::TOutputESSL
vtable for sh::TOutputGLSL
vtable for sh::TOutputGLSLBase
vtable for sh::TOutputVulkanGLSL
vtable for sh::TPreciseQualifierWrapper
vtable for sh::TPrecisionQualifierWrapper
vtable for sh::TQualifierWrapperBase
vtable for sh::TShHandleBase
vtable for sh::TStorageQualifierWrapper
vtable for sh::TVersionGLSL
vtable for sh::TranslatorESSL
vtable for sh::TranslatorGLSL
vtable for sh::TranslatorVulkan
vtable for sh::VariableNameVisitor
vtable for spv::Block
vtable for spv::Builder
vtable for spv::Function
vtable for spv::Instruction
vtable for spv::Module
vtable for spvtools::opt::AggressiveDCEPass
vtable for spvtools::opt::BlockMergePass
vtable for spvtools::opt::CFGCleanupPass
vtable for spvtools::opt::ConstantFoldingRules
vtable for spvtools::opt::DeadBranchElimPass
vtable for spvtools::opt::DeadInsertElimPass
vtable for spvtools::opt::EliminateDeadFunctionsPass
vtable for spvtools::opt::FoldingRules
vtable for spvtools::opt::IfConversion
vtable for spvtools::opt::InlineExhaustivePass
vtable for spvtools::opt::InlinePass
vtable for spvtools::opt::Instruction
vtable for spvtools::opt::InstructionList
vtable for spvtools::opt::LocalAccessChainConvertPass
vtable for spvtools::opt::LocalSingleBlockLoadStoreElimPass
vtable for spvtools::opt::LocalSingleStoreElimPass
vtable for spvtools::opt::MemPass
vtable for spvtools::opt::MergeReturnPass
vtable for spvtools::opt::Pass
vtable for spvtools::opt::ProcessLinesPass
vtable for spvtools::opt::RedundancyEliminationPass
vtable for spvtools::opt::SECantCompute
vtable for spvtools::opt::SENode
vtable for spvtools::opt::SSARewritePass
vtable for spvtools::opt::ScalarReplacementPass
vtable for spvtools::opt::SimplificationPass
vtable for spvtools::opt::StripDebugInfoPass
vtable for spvtools::opt::VectorDCE
vtable for spvtools::opt::WrapOpKill
vtable for spvtools::opt::analysis::AccelerationStructureNV
vtable for spvtools::opt::analysis::Array
vtable for spvtools::opt::analysis::ArrayConstant
vtable for spvtools::opt::analysis::Bool
vtable for spvtools::opt::analysis::BoolConstant
vtable for spvtools::opt::analysis::CompositeConstant
vtable for spvtools::opt::analysis::CooperativeMatrixNV
vtable for spvtools::opt::analysis::DeviceEvent
vtable for spvtools::opt::analysis::Event
vtable for spvtools::opt::analysis::Float
vtable for spvtools::opt::analysis::FloatConstant
vtable for spvtools::opt::analysis::ForwardPointer
vtable for spvtools::opt::analysis::Function
vtable for spvtools::opt::analysis::Image
vtable for spvtools::opt::analysis::IntConstant
vtable for spvtools::opt::analysis::Integer
vtable for spvtools::opt::analysis::Matrix
vtable for spvtools::opt::analysis::MatrixConstant
vtable for spvtools::opt::analysis::NamedBarrier
vtable for spvtools::opt::analysis::NullConstant
vtable for spvtools::opt::analysis::Opaque
vtable for spvtools::opt::analysis::Pipe
vtable for spvtools::opt::analysis::PipeStorage
vtable for spvtools::opt::analysis::Pointer
vtable for spvtools::opt::analysis::Queue
vtable for spvtools::opt::analysis::RayQueryProvisionalKHR
vtable for spvtools::opt::analysis::ReserveId
vtable for spvtools::opt::analysis::RuntimeArray
vtable for spvtools::opt::analysis::SampledImage
vtable for spvtools::opt::analysis::Sampler
vtable for spvtools::opt::analysis::ScalarConstant
vtable for spvtools::opt::analysis::Struct
vtable for spvtools::opt::analysis::StructConstant
vtable for spvtools::opt::analysis::Type
vtable for spvtools::opt::analysis::Vector
vtable for spvtools::opt::analysis::VectorConstant
vtable for spvtools::opt::analysis::Void
vtable for spvtools::utils::IntrusiveList<spvtools::opt::Instruction>
vtable for spvtools::utils::IntrusiveNodeBase<spvtools::opt::Instruction>
vtable for spvtools::utils::SmallVector<unsigned int, 2ul>
vtable for std::__1::__assoc_sub_state
vtable for std::__1::__async_assoc_state<void, std::__1::__async_func<angle::AsyncWorkerPool::checkToRunPendingTasks()::$_1> >
vtable for std::__1::__future_error_category
vtable for std::__1::__generic_error_category
vtable for std::__1::__iostream_category
vtable for std::__1::__narrow_to_utf8<32ul>
vtable for std::__1::__shared_ptr_emplace<angle::AsyncWaitableEvent, std::__1::allocator<angle::AsyncWaitableEvent> >
vtable for std::__1::__shared_ptr_emplace<angle::DelegateWaitableEvent, std::__1::allocator<angle::DelegateWaitableEvent> >
vtable for std::__1::__shared_ptr_emplace<angle::SingleThreadedWaitableEvent, std::__1::allocator<angle::SingleThreadedWaitableEvent> >
vtable for std::__1::__shared_ptr_emplace<angle::WaitableEventDone, std::__1::allocator<angle::WaitableEventDone> >
vtable for std::__1::__shared_ptr_emplace<angle::pp::Macro, std::__1::allocator<angle::pp::Macro> >
vtable for std::__1::__shared_ptr_emplace<rx::ProgramGL::LinkTask, std::__1::allocator<rx::ProgramGL::LinkTask> >
vtable for std::__1::__shared_ptr_emplace<rx::TranslateTask, std::__1::allocator<rx::TranslateTask> >
vtable for std::__1::__shared_ptr_emplace<rx::TranslateTaskGL, std::__1::allocator<rx::TranslateTaskGL> >
vtable for std::__1::__shared_ptr_emplace<rx::WaitableCompileEventDone, std::__1::allocator<rx::WaitableCompileEventDone> >
vtable for std::__1::__shared_ptr_emplace<rx::WaitableCompileEventImpl, std::__1::allocator<rx::WaitableCompileEventImpl> >
vtable for std::__1::__shared_ptr_emplace<rx::WaitableCompileEventNativeParallel, std::__1::allocator<rx::WaitableCompileEventNativeParallel> >
vtable for std::__1::__shared_ptr_emplace<rx::WaitableCompileEventWorkerContext, std::__1::allocator<rx::WaitableCompileEventWorkerContext> >
vtable for std::__1::__shared_ptr_pointer<angle::AsyncWorkerPool*, std::__1::default_delete<angle::AsyncWorkerPool>, std::__1::allocator<angle::AsyncWorkerPool> >
vtable for std::__1::__shared_ptr_pointer<angle::DelegateWorkerPool*, std::__1::default_delete<angle::DelegateWorkerPool>, std::__1::allocator<angle::DelegateWorkerPool> >
vtable for std::__1::__shared_ptr_pointer<angle::SingleThreadedWorkerPool*, std::__1::default_delete<angle::SingleThreadedWorkerPool>, std::__1::allocator<angle::SingleThreadedWorkerPool> >
vtable for std::__1::__shared_ptr_pointer<gl::ProgramExecutable*, std::__1::default_delete<gl::ProgramExecutable>, std::__1::allocator<gl::ProgramExecutable> >
vtable for std::__1::__shared_ptr_pointer<rx::RendererEGL*, std::__1::default_delete<rx::RendererEGL>, std::__1::allocator<rx::RendererEGL> >
vtable for std::__1::__shared_ptr_pointer<rx::RendererGLX*, std::__1::default_delete<rx::RendererGLX>, std::__1::allocator<rx::RendererGLX> >
vtable for std::__1::__stdinbuf<char>
vtable for std::__1::__stdinbuf<wchar_t>
vtable for std::__1::__stdoutbuf<char>
vtable for std::__1::__stdoutbuf<wchar_t>
vtable for std::__1::__system_error_category
vtable for std::__1::__widen_from_utf8<32ul>
vtable for std::__1::basic_istream<char, std::__1::char_traits<char> >
vtable for std::__1::basic_istream<wchar_t, std::__1::char_traits<wchar_t> >
vtable for std::__1::basic_istringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
vtable for std::__1::basic_ostream<char, std::__1::char_traits<char> >
vtable for std::__1::basic_ostream<wchar_t, std::__1::char_traits<wchar_t> >
vtable for std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
vtable for std::__1::basic_streambuf<char, std::__1::char_traits<char> >
vtable for std::__1::basic_streambuf<wchar_t, std::__1::char_traits<wchar_t> >
vtable for std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char> >
vtable for std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> >
vtable for std::__1::codecvt<char, char, __mbstate_t>
vtable for std::__1::codecvt<char16_t, char, __mbstate_t>
vtable for std::__1::codecvt<char32_t, char, __mbstate_t>
vtable for std::__1::codecvt<wchar_t, char, __mbstate_t>
vtable for std::__1::collate<char>
vtable for std::__1::collate<wchar_t>
vtable for std::__1::ctype<char>
vtable for std::__1::ctype<wchar_t>
vtable for std::__1::future_error
vtable for std::__1::ios_base
vtable for std::__1::ios_base::failure
vtable for std::__1::locale::__imp
vtable for std::__1::locale::facet
vtable for std::__1::messages<char>
vtable for std::__1::messages<wchar_t>
vtable for std::__1::money_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
vtable for std::__1::money_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
vtable for std::__1::money_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
vtable for std::__1::money_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
vtable for std::__1::moneypunct<char, false>
vtable for std::__1::moneypunct<char, true>
vtable for std::__1::moneypunct<wchar_t, false>
vtable for std::__1::moneypunct<wchar_t, true>
vtable for std::__1::num_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
vtable for std::__1::num_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
vtable for std::__1::num_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
vtable for std::__1::num_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
vtable for std::__1::numpunct<char>
vtable for std::__1::numpunct<wchar_t>
vtable for std::__1::system_error
vtable for std::__1::time_get<char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > >
vtable for std::__1::time_get<wchar_t, std::__1::istreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
vtable for std::__1::time_put<char, std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> > >
vtable for std::__1::time_put<wchar_t, std::__1::ostreambuf_iterator<wchar_t, std::__1::char_traits<wchar_t> > >
vtable for std::bad_alloc
vtable for std::bad_exception
vtable for std::length_error
vtable for std::logic_error
vtable for std::out_of_range
vtable for std::overflow_error
vtable for std::runtime_error
vu/
vulkan-null
vulkan_icd.cpp
w
w'>
w+5
w2
w2>
w7
w79
w8
w8=
w;E
w=>
waitFence
warn
warning:
wchar_t const* std::__1::__num_get<wchar_t>::__do_widen_p<wchar_t>(std::__1::ios_base&, wchar_t*) const
wcrtomb
wcslen
wcsnrtombs
webgl_FragColor
webgl_FragData
webgl_debug_shader_precision
wh
when Dim is either 1D or 2D.
when more than one fragment shader output, all must have location qualifiers
when object type is EGL_OBJECT_DISPLAY_KHR, the object must be the same as the display.
which is decorated with BuiltIn
which is dependent on
while
while (
while sub-statement
with ExplicitLod
with bias argument
with expression
with two memory access operands requires SPIR-V 1.4 or later
wmemcpy
wmemmove
wmemset
words instead of
words instead.
words long
words, but found
words, but stated word count is
words.
words:
workaround1209.cpp
workgroupcoherent
wrap-opkill
wrap_opkill.cpp
writeInvocation
writeInvocationAMD
writePackedPrimitiveIndices4x8NV
write_
writeonly
wrong number of arguments
wrong number of matrix columns:
wrong number of structure members
wrong operand type
wrong operand type - no operation '
wrong operand types - no operation '
wrong operand types:
wrong vector size (or rows in a matrix column):
w|G
x
x = y = or z cannot be negative.
x!>
x)
x) {    x = clamp(x, -2.0, 2.0);    x = x * 256.0;    x = sign(x) * floor(abs(x));    return x * 0.00390625;}
x) {    x = clamp(x, -65504.0, 65504.0);
x, in
x,5
x2
x6
x7
x8
x9
x>+
xBD
xR0
xV4?xV4?xV4?xV4?[[[[[[[[
xaT
xcG
xcb_connect
xcb_depth_next
xcb_depth_visuals_iterator
xcb_disconnect
xcb_get_geometry
xcb_get_geometry_reply
xcb_get_setup
xcb_query_tree
xcb_query_tree_reply
xcb_screen_allowed_depths_iterator
xcb_setup_roots_iterator
xcb_visualtype_next
xfb layout qualifier
xfbANGLE
xfbActiveUnpaused
xfbBuffer
xfbBufferOffsets
xfbVerticesPerDraw
xfb_
xfb_buffer
xfb_buffer=
xfb_offset
xfb_offset=
xfb_stream
xfb_stride is too large:
xfb_stride is too small to hold all buffer entries:
xfb_stride must be multiple of 2 for buffer holding a half float or 16-bit integer:
xfb_stride must be multiple of 4:
xfb_stride must be multiple of 8 for buffer holding a double or 64-bit integer:
xfb_stride=
xl,
xt:
xxhash.c
xzE
x{\
y
y) {    x = angle_frl(angle_frl(x)
y) {    x = angle_frm(angle_frm(x)
y);    return x;}
y*>
y, emu_precision vec
y/0
y/B
y2
y5>
y7
y8
y91
y@>
yI>
yK0
yL0
yV
yW
yZE
yZ[
y_C
yaC
yielding Result Id
yn,
yoK
yr:
yt7
yu5
yuv_2_rgb
yuv_2_rgb(20B00H
yuvcscstandardext_constant(sh::TParseContext*)
yy_accept
yy_base
yy_chk
yy_create_buffer(_IO_FILE*, int, void*)
yy_def
yy_ec
yy_fatal_error(char const*, void*)
yy_meta
yy_nxt
yycheck
yydebug
yydefact
yydefgoto
yyensure_buffer_stack(void*)
yyerror(sh::TSourceLoc*, sh::TParseContext*, void*, char const*)
yylex(YYSTYPE*, glslang::TParseContext&)
yylex(YYSTYPE*, sh::TSourceLoc*, void*)
yylex_destroy(void*)
yypact
yyparse(glslang::TParseContext*)
yyparse(sh::TParseContext*, void*)
yyparse(sh::TParseContext*, void*)::extensions
yyparse(sh::TParseContext*, void*)::yyloc_default
yypgoto
yypop_buffer_state(void*)
yyr1
yyr2
yyrestart(_IO_FILE*, void*)
yyrline
yyset_column called with no buffer
yyset_lineno called with no buffer
yystos
yysyntax_error(unsigned long*, char**, short*, int)
yytable
yytname
yytranslate
y|7
z
z$>
z-5
z..
z2
z4,
z5
z7
z8
z81
z>
z>>
zAD
zG
zVG
zg0
zgO
zlib_internal::CompressHelper(zlib_internal::WrapperType, unsigned char*, unsigned long*, unsigned char const*, unsigned long, int, void* (*)(unsigned long), void (*)(void*))
zlib_internal::CompressHelper(zlib_internal::WrapperType, unsigned char*, unsigned long*, unsigned char const*, unsigned long, int, void* (*)(unsigned long), void (*)(void*))::$_0::__invoke(void*, unsigned int, unsigned int)
zlib_internal::CompressHelper(zlib_internal::WrapperType, unsigned char*, unsigned long*, unsigned char const*, unsigned long, int, void* (*)(unsigned long), void (*)(void*))::$_1::__invoke(void*, void*)
zlib_internal::GetGzipUncompressedSize(unsigned char const*, unsigned long)
zlib_internal::GzipCompressHelper(unsigned char*, unsigned long*, unsigned char const*, unsigned long, void* (*)(unsigned long), void (*)(void*))
zlib_internal::GzipExpectedCompressedSize(unsigned long)
zlib_internal::GzipUncompressHelper(unsigned char*, unsigned long*, unsigned char const*, unsigned long)
zlib_internal::UncompressHelper(zlib_internal::WrapperType, unsigned char*, unsigned long*, unsigned char const*, unsigned long)
zoffset is larger than MAX_3D_TEXTURE_SIZE-1
zr7
zs5
zs:
zutil.c
z~5
{
{    return vec
{ float xfbOut
{ } style initializers
{">
{->
{0.
{2
{7
{8
{8>
{:E
{?F
{SG
{f7
{i
{mW
{s
{s7
{w5
{}
{}L
{G
|
|'>
|2
|6
|7
|8
|8<
|;,
|=
|=9
|G
|N
|O
|aC
|j&
||
||O
|}G
}
} gl_in[];in int gl_PrimitiveIDIn;out gl_PerVertex {vec4 gl_Position;float gl_PointSize;float gl_ClipDistance[];
} gl_out[];patch out float gl_TessLevelOuter[4];patch out float gl_TessLevelInner[2];
} gl_out[];patch out highp float gl_TessLevelOuter[4];patch out highp float gl_TessLevelInner[2];patch out highp vec4 gl_BoundingBoxOES[2];patch out highp vec4 gl_BoundingBoxEXT[2];
}%>
}09
}0>
}2
}2,
}7
}8
};>
};out int gl_PrimitiveID;out int gl_Layer;
};uniform gl_DepthRangeParameters gl_DepthRange;
}>
}B&
}G
}Z[
}e,
}h0
}i<
}m5
}}7
~
~!%^&*()-+=|,.<>/?;:[]{}#\
~*1,V
~*>
~-
~/
~0.
~2
~7
~8
~<
~A.
~h,
~j,
~o5
~o7
~u:
~x7

(>
,
3>
49
7
8
>>
C
C+
Cgl_SecondaryViewgl_FrontSecondarUUUUUUUU
E&
EF
N2
[E
aC
i=
l5
oG
p7
/
