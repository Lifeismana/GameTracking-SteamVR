						
																			
	0$0?0Z0u0
	3*353p5
	D$$F;u
	D$0	T$@
	F,_^
	L$t!
	PSWV
	RWQS
      
       
        
           
               
                     
                      
                       
                        
                           
                              
        %s = %s;
        %s = %s[%d];
        %s = NULL;
        %s = asm {
        // No embedded %s
      -
      - 
     NO
    %s
    // %s
    N/A
    NULL,
    YES
    asm {
    oMask
    pass 
    preshader
    ps_%u_%u
    ps_2_sw
    ps_2_x
    ps_3_sw
    tx_%u_%u
    u
    vs_%u_%u
    vs_2_sw
    vs_2_x
    vs_3_sw
    {
    }
    },
   %c%c%c%c
   oDepth
   primID
  !!!"##$$%%%%%%%%%%%&&''''(())**++,,---....../0123456789:;<
  // 
  special
  tG=
  tN=
  tR=
  w5td=
 !"#$%&'()*+
 !"#$%&'()*+,-./0123456789:;<=>?
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
 !"#$%&'()+++++++++++++++++++++++++++++++++++++++++++*
 !"#$%&'(.
 !"#$%/0123456789
 !+,Z
 !@"@
 !t =
 !t1=
 !tl=
 "t'=
 "u1%
 "w3t&
 "wttY=
 #uKSW
 #uvQS
 $@#@
 %(*,.024
 %c%-4u
 %u, %u, %u
 (%.9g
 (%u texture, %u arithmetic)
 (@*@
 + %d]
 ,-./0123456789:998
 -         - 
 - Try reducing number of constant branches, take bools out of structs/arrays or move them to the start of the struct
 - Try reducing number of constants referenced
 - Try reducing number of loops, take loop counters out of structs/arrays or move them to the start of the struct
 - note that the target doesn't support UAVs
 - note that the target doesn't support texture sampling intrinsics
 - note that the target doesn't support textures
 ----- ----
 0$0(0,00040
 0$0(0,0o0
 0(0x0
 0L0x0
 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
 : %s
 : packoffset(c%u.%c)
 : register(%c%u)
 ;@5@
 ;Jxu
 = "%s"
 = { 
 = { "%s"
 ??? 
 Pu/j
 Pw/t'=
 Pw<t+
 PwStB
 Reg   Size
 Rt4=
 Rw@t2=
 [unused]
 `tC=
 `w%t
 `w7tR=
 aw't
 bt9=
 btq=
 constant 
 cw;tT=
 domain_isoline
 domain_quad
 domain_tri
 dt.=
 et<=
 et==
 expr
 fp%u[%u][%u] = {
 ft =
 ft%u = {
 ftc=
 fw*tl
 gt.=
 ht =
 ht.=
 http://www.microsoft.com/directx0
 l(%f)
 line 
 lineadj 
 linear 
 linear centroid 
 linear noperspective 
 linear noperspective centroid 
 linear noperspective sample 
 linear sample 
 linestrip 
 oDepthGE
 oDepthLE
 output_line
 output_point
 output_triangle_ccw
 output_triangle_cw
 partitioning_fractional_even
 partitioning_fractional_odd
 partitioning_integer
 partitioning_pow2
 patch1 
 patch10 
 patch11 
 patch12 
 patch13 
 patch14 
 patch15 
 patch16 
 patch17 
 patch18 
 patch19 
 patch2 
 patch20 
 patch21 
 patch22 
 patch23 
 patch24 
 patch25 
 patch26 
 patch27 
 patch28 
 patch29 
 patch3 
 patch30 
 patch31 
 patch32 
 patch4 
 patch5 
 patch6 
 patch7 
 patch8 
 patch9 
 point 
 pointlist 
 pw"t
 tIhRDEF
 triangle 
 triangleadj 
 trianglestrip 
 undefined 
 vPSize
 vPos
 w3t+=
 w8t*=
 wHt4=
 wZtI
 wqt[=
 wuta=
 x%i[%i], %d
!&)&&&&&&&''((
!0-0U0w0
!040[0l0}0
!4&4]4l4v4
!L$`#
!This program cannot be run in DOS mode.
!w0t'=
!w3t'=
!w3t+=
!wJt6=
!wJt=
!wPt+
!wWtD
!wZtI
""""""""""
"020:0D0
"Copyright (c) 1997 Microsoft Corp.1
"u/8]
"w t8=
"w5t(=
"wIt5=
"wJt6=
"wZtI
##Internal error##
#$!"&')+-/1
#0P192
#1-1Q1[1i2
#1J1a1
#D$$3t$$
#D$T#
#D$t#
#L$ #D$T#T$`#
#L$0#D$
#L$L3
#L$h#T$@3
#M #E$
#T$(#
#T$P#|$T
#T$T#t$P
#\$$3t$$
#line 
#line %u
#line %u %.*s
#pragma def (%s, %s, %g, %g, %g, %g)
#pragma pack_matrix()
#pragma pack_matrix(column_major)
#pragma pack_matrix(row_major)
#pragma ruledisable 0x%08x
#pragma warning (disable:%d)
#pragma warning (error:%d)
#pragma warning (once:%d)
#t$8;
#t$L#
#u	;Kx
#u #M$
#w3t+=
#wVt>=
#w{tm=
#w}tX=
$060]0t0~0
$0< t%
$0< u
$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
$Element
$Globals
$Invalid
$IsAnyDeriv(x)/dz -> $IsAnyDeriv(dx/dz) <| SR.GenDerivatives_Unary
$IsAnyShift(x, and(31, y)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
$IsAnyShift(x, and(y, 31)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
$IsAtomicAllocConsume(a, res) -> append_arg(all_sources(o, a)) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsAtomicAllocConsume(a, res) -> append_arg(all_sources(o, a)) <| SMR.DataFlagAnalysis_PlaceHolder
$IsBasicOrImmAtomic(a, res, addr, op) -> append_arg(all_sources(o, a), a, addr, op) <| SMR.DataFlagAnalysis_PlaceHolder
$IsBasicOrImmAtomic(a, res, addr, op) -> append_arg(all_sources(o, a), addr, op) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsLoop(a) -> append_sources() (loop predicate linkage) <| SMR.DataFlagAnalysis_PlaceHolder
$IsMultiWriteOut(a, chain) -> append_sources(a) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsMultiWriteOut(a, chain) -> append_sources(a) <| SMR.DataFlagAnalysis_PlaceHolder
$IsMultiWriteOut(a, chain) -> append_sources(a) <| SMR.RangeDataAnalysis
$IsResLoad(uav, a, addr, offs, mask) -> append_arg(all_sources(o, a), addr, offs) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsResLoad(uav, a, addr, offs, mask) -> append_arg(all_sources(o, a), uav, a, addr, offs, mask) <| SMR.DataFlagAnalysis_PlaceHolder
$IsResLoad(uav, a, addr, offs, mask) -> append_arg(sources(o, a)) <| SMR.RangeDataAnalysis
$IsResStore(uav, a, addr, offs, mask, val) -> append_param(a) (chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsResStore(uav, a, addr, offs, mask, val) -> append_param(a) <| SMR.DataFlagAnalysis_PlaceHolder
$IsRound(fp int) = mov(fp int) <| MR.GenSimplifyInstructionsOpt1_NoExcl
$IsStandardLoad(a, chain) -> append_addressed(o, chain) (range/flag prop) <| SMR.RangeDataAnalysis
$IsStandardLoad(a, chain) -> append_addressed(o, chain), append_arg(a, chain) <| SMR.DataFlagAnalysis_PlaceHolder
$IsStandardStore(addr, val, chain) -> append_param(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
$IsStandardStore(addr, val, chain) -> append_param(chain) <| SMR.DataFlagAnalysis_PlaceHolder
$IsSync() -> append_all_visible+inputs(UAV chain args) <| SMR.DataFlagAnalysis_PlaceHolder
$IsTwoValueAtomic(chain, res, addr, op1, op2) -> append_arg(all_sources(o, chain), chain, addr, op1, op2) <| SMR.DataFlagAnalysis_PlaceHolder
$IsTwoValueAtomic(chain, res, addr, op1, op2) -> append_arg(chain, addr, op1, op2) <| SMR.DataFlagAnalysis_NoPlaceHolder
$PRESHADER_PS
$PRESHADER_VS
$Params
$ROfH
$SKIP
$ThisPointer
$cLWj 
$clip_outputs
$super
%%%%%&%%%%)
%-17s
%-20s
%040?0
%2u %9u 
%4u: 
%9QHu
%9sHu
%:(*+;(:''''
%<\u.
%M9wt
%cnorm can not be used with type
%d[%d].
%s %s
%s %s = 
%s %s[%d] = 
%s X%u: 
%s array index must be a literal expression
%s array signature parameter %s cannot be indexed dynamically.
%s can only be used with non-NULL shaders
%s can only emit to 1 stream
%s can only emit to streams 0-%u
%s can't operate on array references
%s cannot be redeclared
%s cannot be used with doubles, cast to float first
%s did not match any prototype in the class
%s does not allow instancing
%s does not allow textures or samplers to be members of compound types
%s does not allow writable textures, samplers or UAVs to be members of compound types with interface inheritance
%s does not have method '%s'
%s does not support 8-bit or 16-bit integers
%s does not support Append/Consume buffers
%s does not support UAVs
%s does not support aborts
%s does not support doubles
%s does not support groupshared, groupshared ignored
%s does not support interface bindings
%s does not support interlocked operations
%s does not support messages
%s does not support multi-output stream out
%s does not support pull-model attribute evaluation
%s does not support pull-model evaluation of position
%s does not support stream out
%s does not support structs without members
%s does not support structured buffers
%s does not support synchronization operations
%s does not support thread synchronization operations
%s does not support typed UAVs
%s input limit (%d) exceeded, shader uses %d inputs.
%s instruction requires sampler declared in %s mode.  Opcode #%d, operand #%d (counts are 1-based). 
%s is not supported on %s
%s not supported on the given type
%s object does not have method '%s'
%s object does not have methods
%s only allows up to %u instances
%s only supports interlocked operations on scalar int or uint data
%s output limit (%d) exceeded, shader uses %d outputs.
%s registers live in the same name space as outputs, so they must be bound to at least %c%u, manual bind to slot %s failed
%s requires resource declared as texture2D/2DArray%s.  Opcode #%d, operand #%d (counts are 1-based). 
%s semantic '%s'
%s semantic '%s' cannot be centroid
%s semantic '%s' has been deprecated; use '%s%d' instead
%s shader fragments are not supported
%s signature parameter %s (1-based Entry %d) has an unrecognized system name. 
%s signature parameter %s (1-based Entry %d) specifies invalid interpolation mode for integer component type. 
%s signature parameter %s (1-based Entry %d) specifies unrecognized or invalid component type. 
%s signature parameter %s (1-based Entry %d) type must be a scalar float. 
%s signature parameter %s (1-based Entry %d) type must be a scalar uint. 
%s signature parameter %s (1-based Entry %d) type must be float32 and mask must be xyzw. 
%s signature parameter %s (1-based Entry %d) type must be float32. 
%s signature parameter %s (1-based Entry %d) type must be uint32. 
%s snap offset must be in the range -8 to 7
%s target does not support texture lookups
%s%d must be a four-component vector
%s%d%s
%s%s contains a system-interpreted value (%s) which must be written in every execution path of the shader <| A%u (B%u)
%s%s contains a system-interpreted value (%s) which should be written in every execution path of the shader <| A%u (B%u)
%s%s%c%s%s
%s%s%cx%c%s%s
%s%s%s%s
%s%ux%u
%s+%s
%s: ERROR: If either a HullShader or DomainShader is set then both must be set. Technique %s, Pass %s.
%s: ERROR: No valid %s-%s combination could be found in Technique %s, Pass %s.
%s: WARNING: There exist invalid %s-%s combinations in Technique %s, Pass %s, depending on which elements of the specified shader array(s) are chosen.
%s<%d
%sMS%d
%s[%s]
%s[%u +
%s[%u]
%s[eval(
%s[r%u.%c/%u]<
%s[r%u.%c]<
%u "%s"
%ux%u
&9iPN
'%s' : macro redefinition
'%s' : unknown pragma ignored
'%s' already defined as a %s
'%s' is not a valid instruction in this shader version
'%s' is not a valid register name.  Registers must start with v_, r_, c_, b_, or i_ depending on the register type. (o_ for vs_3_0 only)
'%s' max tesselation factor must be in the range [1,64]
'%s' must have a max vertex count
'%s' must have a max vertex count greater then 0
'%s' used but not defined
'%s': %s cannot be declared 'const'
'%s': %s cannot be declared 'extern'
'%s': %s cannot be declared 'groupshared'
'%s': %s cannot be declared 'inline'
'%s': %s cannot be declared 'shared'
'%s': %s cannot be declared 'single'
'%s': %s cannot be declared 'static'
'%s': %s cannot be declared 'uniform out'
'%s': %s cannot be declared 'uniform'
'%s': %s cannot be declared 'volatile'
'%s': %s cannot be target specific
'%s': %s cannot be void
'%s': %s cannot have %ss
'%s': %s cannot have annotations
'%s': %s cannot have semantics
'%s': %s does not support 64-bit integers
'%s': %s does not support 8-bit or 16-bit integers
'%s': %s does not support doubles as a storage type
'%s': %s does not take %u parameter%s
'%s': %s must be a literal expression
'%s': %s only allows one depth output
'%s': %ss are limited to no more than %u parameters (%u given)
'%s': 'static' mismatch between declaration and definition
'%s': Compute shaders can't return values, outputs must be written in writable resources (UAVs).
'%s': Geometry shaders can't return values, outputs must be written to streams.
'%s': InputPatch inputs can only be used in hull and geometry (5_0+) shaders
'%s': Not all control paths return a value
'%s': OutputPatch inputs can only be used in the domain shaders and a hull shader's patch constant function
'%s': Patch constant function must use the same input control point type declared in the control point phase.
'%s': Patch constant function must use the same output control point type returned from the control point phase.
'%s': Patch constant function's output patch input should have %d elements, but has %d.
'%s': Top-level output parameter '%s' not completely initialized
'%s': Top-level return value is not completely initialized
'%s': When defining a pass-through control-point shader, the number of output control points must be zero or must match the input patch size.
'%s': When defining a pass-through control-point shader,you must declare an InputPatch object.
'%s': ambiguous function call
'%s': array dimension must be between 1 and 65536
'%s': array dimensions of %s must be explicit
'%s': cannot %sconvert %sfrom '%s' to '%s'
'%s': class does not implement method %s
'%s': conversion from larger type to smaller, possible loss of data
'%s': declaration type differs from definition type
'%s': default parameters can only be provided in the first prototype
'%s': entrypoint not found
'%s': extern %s cannot be declared 'groupshared'
'%s': extern %s cannot be declared 'static'
'%s': function must return a value
'%s': function return value cannot contain Effects objects
'%s': function return value differs from prototype
'%s': function return value missing semantics
'%s': functions cannot be declared 'extern'
'%s': functions cannot be declared 'uniform'
'%s': functions cannot have a target
'%s': global structs and classes cannot be changed
'%s': global variables cannot use the 'half' type in %s. To treat this variable as a float, use the backwards compatibility flag.
'%s': identifier represents a %s, not a function
'%s': identifier represents a %s, not a variable
'%s': implicit array missing %s
'%s': implicit array type does not match %s
'%s': implicit truncation of vector type
'%s': initializer does not match type
'%s': input parameter '%s' cannot have a geometry specifier
'%s': input parameter '%s' conflicts with geometry specifier of previous input parameters
'%s': input parameter '%s' missing semantics
'%s': input parameter '%s' missing semantics, expected %s
'%s': input parameter '%s' must have a geometry specifier
'%s': input parameter '%s' patch size must be in the range [1,32]
'%s': interface input parameters not yet implemented for hull shaders, use a global interface instead
'%s': interface methods cannot be declared outside of an interface
'%s': interface methods cannot be static
'%s': interface methods cannot have bodies
'%s': interfaces can only be inputs
'%s': interfaces cannot be declared in buffers
'%s': interfaces cannot be members
'%s': interfaces cannot contain data
'%s': interfaces cannot have semantics
'%s': invalid shader target/usage
'%s': line output topologies are only available with isoline domains
'%s': loop control variable conflicts with a previous declaration in the outer scope; most recent declaration will be used
'%s': may only have one InputPatch parameter
'%s': may only have one OutputPatch parameter
'%s': member not a static variable
'%s': method not found in class
'%s': methods cannot have a target or usage
'%s': missing %s
'%s': missing default value for parameter '%s'
'%s': no input primitive specified, if your shader doesn't require inputs, then define an empty struct and give it the proper primitive type.
'%s': non-numeric uniform %s cannot have %ss
'%s': out parameters cannot have default values
'%s': output only %s cannot have %ss
'%s': output parameter '%s' missing semantics
'%s': output parameter '%s' not completely initialized
'%s': output parameters cannot be declared 'const'
'%s': output parameters not yet implemented for control point shaders
'%s': recursive functions not allowed in %s
'%s': return type does not match overridden method
'%s': samplers can only be used with declared textures or texture assignments
'%s': static member not found in class
'%s': static members can only be defined in global scopes
'%s': static methods cannot be called on objects
'%s': stream input parameter '%s' can only be used in geometry shaders
'%s': stream input parameter '%s' must be an inout parameter
'%s': stream input parameter '%s' must be an inout parameter 
'%s': stream output parameter '%s' can only be used in geometry shaders
'%s': stream output parameter '%s' must be an inout parameter 
'%s': too many target specifiers given
'%s': top-level interface arguments cannot be 'out'
'%s': triangle output topologies are not available with isoline domains
'%s': types cannot contain members of their own type
'%s': undefined variable
'%s': uniform %s cannot be declared 'groupshared'
'%s': uniform %s cannot be declared 'static'
'%s': variable declared but not defined
'%s': void function cannot have a semantic
'%s': void functions cannot return a value
'%s(%s)' attribute expected, where '%s' are %s
'%s(%s)' attribute expected, where '%s' is %s
'():;
(%f, %f)
(%f, %f, %f, %f)
(%i,%i,%i)
(%u,%u): 
('8PW
((a << m) & n) | i : if( known_bfi_bitmask_postshift_ignore(n,a,m,i) ) -> bfi(bfi_bitwidth_postshift_ignore(n,a,m,i), m, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
((a >> o1) << o2) : if( o1 == o2 ) -> bfi(o, 0, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
((a >> ov1) << o2) : if( ov1 == o2 ) -> and(a, ~((1 << ov1)-1)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(0 < n) ? 1 : 0 -> umin(1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(0,000
(0,000|0
(0G0L0]0b0s0x0
(0K0v0
(0x%08x)
(A + A) * 0.5 -> no-op mov of A <| MR.GenSimplifyInstructionsOpt1_NoExcl
(A + L2) - (A + L1) = L2 - L1 if A non-NaN/Inf <| Explicit
(V < n) ? (V+1) : n -> dmin(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? (V+1) : n -> imin(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? (V+1) : n -> min(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? (V+1) : n -> umin(V+1, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> dmin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> imin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> min(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(V < n) ? V : n -> umin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(_^[]
(a != b) ? a : b -> a <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a != b) ? b : a -> b <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a & ((iv_pow2 << n) - 1)) -> bfi(iv_pow2 + n, 0, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & b) | (a & c) -> and(a, b | c) <| MR.GenSimplifyInstructionsOpt1_Excl
(a & n) << m : if( known_bfi_bitmask(a,n,m) ) -> bfi(bfi_bitwidth(a,n,m), m, n, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) << m : if( known_bfi_bitmask(n,a,m) ) -> bfi(bfi_bitwidth(n,a,m), m, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) >> m : if( known_ubfe_bitmask(a,n,m) ) -> ubfe(ubfe_bitwidth(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) >> m : if( known_ubfe_bitmask(n,a,m) ) -> ubfe(bitwidth(n,a,m), m, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) | i << m : if( known_bfi_bitmask_ignore(a,n,i,m) ) -> bfi(bfi_bitwidth_ignore(a,n,i,m), m, n | i, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & n) | r : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
(a & ~(((iv_pow2 << n) - 1) << o) -> bfi(iv_pow2 + n, o, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & ~(((iv_pow2 << n) << ov) + (-1 << ov))) -> bfi(iv_pow2 + n, ov, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a & ~((iv_pow2 << n) - 1)) -> bfi(iv_pow2 + n, 0, 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a + F) - a -> append_arg(F) <| SMR.RangeDataAnalysis
(a + F1) - (a + F2) -> append_arg(F1-F2) <| SMR.RangeDataAnalysis
(a << m) & n : if( known_bfi_bitmask_postshift(n,a,m) ) -> bfi(bfi_bitwidth_postshift(n,a,m), m, a, 0i) <| MR.GenD3D10_OptimizeEarlyTranslate
(a << n) >> (m) -> ibfe(32-m, m-n, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a << n) >> (m) -> ubfe(32-m, m-n, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a == (b ? a : c)) : if (c != a) -> b != 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a == (b ? c : a)) : if (c != a) -> b == 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a == b) ? a : b -> b <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a == b) ? b : a -> a <| MR.GenSimplifyInstructionsOpt1_NoExcl
(a >> m) & n : if( high_bit_clear(a & n) && known_ubfe_bitmask_nomaskshift(a,n,m) ) -> ubfe(ubfe_bitwidth_nomaskshift(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(a >> m) & n : if( known_ubfe_bitmask_nomaskshift(a,n,m) ) -> ubfe(ubfe_bitwidth_nomaskshift(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | (((iv_pow2 << n) - 1) << o)) -> bfi(iv_pow2 + n, o, -1, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | (((iv_pow2 << n) << ov) + (-1 << ov))) -> bfi(iv_pow2 + n, ov, -1, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | ((iv_pow2 << n) - 1)) -> bfi(iv_pow2 + n, 0, -1, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(a | (b << n)) : if(known_bfi_bitwidth_impmask(a, b, n)) -> bfi(get_bfi_bitwidth_impmask(a, b, n), n, b, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(bfi(w, 0i, 0, n) | ubfe(w, 0i, v)) -> bfi(w, 0i, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(bfi(w, o, 0, n) | bfi(w, o, v, 0)) -> bfi(w, o, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(i + I) - i -> append_arg(I) <| SMR.RangeDataAnalysis
(i + I1) - (i + I2) -> append_arg(I1-I2) <| SMR.RangeDataAnalysis
(int)(a & n) >> m : if( high_bit_clear(a & n) && known_ubfe_bitmask(a,n,m) ) -> ubfe(bitwidth(a,n,m), m, n) <| MR.GenD3D10_OptimizeEarlyTranslate
(int)(a & n) >> m : if( high_bit_clear(a & n) && known_ubfe_bitmask(n,a,m) ) -> ubfe(ubfe_bitwidth(n,a,m), m, a) <| MR.GenD3D10_OptimizeEarlyTranslate
(n & a) | r : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
(n > i) ? X : dmin(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n > i) ? X : imin(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n > i) ? X : min(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n > i) ? X : umin(n, i) -> (i > n) ? X: i <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> dmin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> imin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> min(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(n >= V) ? V : n -> umin(V, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
(unknown scope entry kind)
(unknown scope value kind)
(unknown)
(unnamed)
))))))))
))))))))))
)))))))))))))))))))) )!)")###$#####
)kS+c
*'''.-
*+++++++++++++++,,,,,----...///0000011122334455667789:;
*0D0O0b0
*0Q0N3
*0R0z0
++++++
+++++++++
++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++
, "%s"
, %.9g
, %u, %u
, '%s'
, dynamicIndexed
, fb%u
, forcing loop to unroll
, ft%u
, immediateIndexed
, mode_comparison
, mode_default
, mode_mono
, or '%s'
, stride=%u
,,,,,,,
,-.PPPPP///01
,040t0|0
,0;0O0
,http://www.microsoft.com/pki/certs/CSPCA.crt0
,http://www.microsoft.com/pki/certs/tspca.crt0
--..////00123456
-0000tS-
-64OS
-7E7S7
-ISGNt
-dtof(x) -> dtof(-x) <| MR.GenSimplifyInstructionsOpt1_Excl
-ftod(x) -> ftod(-x) <| MR.GenSimplifyInstructionsOpt1_Excl
-sin(x) -> sin(-x) <| MR.GenSimplifyInstructionsOpt1_Excl
.$super
.9WHu
.mips can only be used in a two-element indexing expression such as .mips[mip][element]
.rrrr swizzle expected for operand #%d of opcode #%d (counts are 1-based). 
.rsrc
.sample can only be used in a two-element indexing expression such as .sample[sample][element]
.text
/()*LMa]X
/* Interface parameter %u bound to: %s
/* Stream %u out decl: "%s" */
/* Stream %u to rasterizer */
/* Stream out decl: "%s" */
//   
//             Slots
//     %c%-4u= 
//   %s
//   Name
// %-20s %20u
// %-27s %4u 
// %-30s %-18s
// %-30s %10s %6s%d %11s %4u %8u
// %-30s %10s %7s %11s %4u %8u
// %-30s %4u %9u %7u %7u
// %s %s
// %s shader bytecode:
// %s signature:
// %u %s buffer(s)
// %u %s interface(s)
// %u %s object(s)
// %u groups(s)
// %u technique(s)
// +----------+---------+---------------------------------------
// ---------- ------- --------- --------- ----------------------
// ---------- ------- ---------- ---------
// ---------- --------------------------------------------------
// -------------- --------------- ----------------
// -------------------- ----- ------ -------- -------- ------ ------
// -------------------- --------------------
// --------------------------- ---- -- --------- ------- -------
// ------------------------------ ---- --------- ------- -------
// ------------------------------ ---------- ------- ----------- ---- --------
// ------------------------------ ------------------
// Approximately %i instruction slots used
// Available Class Instances:
// Available Class Types:
// Buffer Definitions: 
// Child effect (requires effect pool): %s
// Constant buffer to DX9 shader constant mappings:
// Default values:
// FX Version: %s
// Generated by 
// Interface slots, %u total:
// Name                                 Type  Format         Dim Slot Elements
// Name                             ID CB Stride Texture Sampler
// Name                        Type CB CB Offset Texture Sampler
// Name                 Index   Mask Register SysValue Format   Used
// Note: SHADER WILL ONLY WORK WITH THE DEBUG SDK LAYER ENABLED.
// Offset:  N/A Size:   N/A [unused]
// Offset: %4u
// Offset: %4u Size: %5u%s
// Offset: %4u, size: %4u
// Parameters:
// Pixel Shader runs at sample frequency
// Registers:
// Resource Bindings:
// Runtime generated constant mappings:
// Sampler/Resource to DX9 shader sampler mappings:
// Target Reg                               Constant Description
// Target Reg Buffer  Source Reg Component
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// Target Sampler Source Sampler  Source Resource
// Tessellation Domain   # of control points
// Tessellation Output Primitive  Partitioning Type 
// approximately %u instruction slot%s used
// approximately %u instruction%s used
// b%-9d cb%-5d %10d %9d
// c%-10d %49s
// c%-9d cb%-5d %9d %9d  (
// clip%-6d cb%-5d %9d %9d  (
// disassembly only available for VS and PS targets
// i%-9d cb%-5d %10d %9d
// incorrect file offset in debug info
// incorrect instruction offset in debug info
// incorrect scalar offset in debug info
// incorrect token offset in debug info
// incorrect variable offset in debug info
// no %s
// s%-13d s%-14d t%-16d
// too many instruction outputs in debug info
// | Table ID |         |
// | Type ID  |         |
// | Type ID  |%4u     |
// | Type ID  |%4u-%-4u|
/Cube/CubeArray
0	1'1E1c1
0	141
0 0$0(0,000
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0d0h0l0p0t0x0|0
0 0$0(0,0004080<0@0D0H0L0P0T0X0\0`0x0|0
0 0&0,020>0D0J0P0[0a0g0m0w0}0
0 0(0,04080@0D0L0P0X0\0d0h0p0t0x0|0
0 0,080D0P0\0h0t0
0 000H0X0p0
0 050J0_0t0
0 080P0h0
0 0d0
0!060K0`0u0
0!1(1A1N1b1t1
0!t.=
0!td=
0!w%t?
0!wIt:=
0"070L0a0v0
0"0:0R0j0
0"0G0W0
0"0x0
0"1,1K1b1i1
0"t =
0"u82
0"w3t&
0#0)0/050@0F0L0R0]0c0i0o0}0
0#0)080N0$1+1B2
0#070K0_0s0
0#080M0b0w0
0#0f0
0#1I1U1_1f1
0#t-=
0#tL=
0#tb=
0#tp=
0#w1t&=
0#w|tH
0$0)080J0L1
0$0)080L0|1
0$0,040<0D0L0\0d0l0t0|0
0$04080<0P0T0X0l0p0t0
0$0E0|0
0$1(1,101
0$131
0$1P1|1
0$3(3,3034383L3P3T3X3\3`3
0%0=0H0b0q0|0
0%191r1}1
0&161I2Y2
0&1\1
0'020H0W0b0
0'0G05162
0'1?1
0'1l1
0(0@0X0p0
0(101
0)0Z0v0
0*050
0*1j1
0,0004080b0{0
0,03090r0y0
0,0<0L0[0b0i0p0
0,0A0c0G3N3a4h4
0-0h5I;
0-1@1f1
0-3P3T3X3\3`3d3h3l3p3t3x3|3
0.1}1
000:0E0q0
000C0V0i0
000H0`0x0
000K0f0
000L0P0p0
000P0p0
00181p1x1
001@1
001t1
004080
0060>0
00ffff
00t<=
00t>=
00u13
00uWR
00uqQR
010F0[0p0
010K0f0
011D1{1
011H1L1P1
020B0a0
020G0\0q0
021l1}2
021w1
030G0[0o0
030H0]0r0
031D1O1g1
031N5
03D$(
040I0^0s0
041T1i1t1
041`5o5|5
060916010447Z
061t2
062S2
070822223102Z
070U0s0
070a0
080725190115Z
091207224029Z
091h1z1
0;0N0t0
0;0P0!1(151
0;0Y0w0
0;qPs
0<1@1D1
0<1O1s1
0<2b2&555A5
0=>X1;<D
0?0*11181M1
0@0H0
0A0V0
0A0t0
0C0i0
0D1H1L1
0D1g1
0D2H2L2P2T2X2\2|2
0E0m0
0H0P0
0H1L1P1
0H1L1P1T1
0H1k1
0H1l1
0I0%1
0J0W0d0p0y0
0J0v0
0K0a0t0
0P0b0
0Pt<=
0Pw7t+=
0PwHt<=
0S0f0
0SVWj0
0T0X0\0`0u1
0T1X1\1`1d1h1
0U0q0y0
0U1a1
0WEIGHTS
0Z1h1
0\3,9
0^0w0
0^4e4
0`1d1h1
0`1d1h1l1p1t1x1|1
0`t'=
0`w't
0aw4t
0btj=
0c1p1
0c1s1
0ct#=
0d1h1l1p1t1x1|1
0dt'=
0et5=
0et^=
0ewFt7=
0ft<=
0fwQtC=
0g1y1O2^2k2
0ht'=
0n2~2
0p0x0
0p1+0)
0x%02x
0x%08x
0x%08x 
1 / sqrt(x) -> rsq(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
1 / x -> rcp(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
1 1$1(1,1014181<1@1D1H1L1P1T1X1{1
1 1$1(1,1014181D1H1L1P1T1X1\1h1l1p1
1 1$1\1`1d1
1 1+11171=1H1N1T1Z1e1k1q1w1
1 161
1 181H1p1
1 181P1h1
1 2$2(2
1 2(2
1 2(2|2
1 252
1 2x2
1"131y1
1"242
1#1*1T1d1h1l1p1t1x1|1
1#111S1p1t1x1/2
1#171K1_1s1
1#171u1
1#1>1Y1t1
1$1`1h182<2@2
1$1d1l1
1$2d2
1%1+11171C1H1N1T1_1e1k1q1|1
1%1^1m1
1%2M2u2
1&1/1;1D1P1Y1t1y1
1'1;1O1c1w1
1'1d1
1'3Z4=6D6
1(141@1L1X1d1p1|1
1(1@1X1p1
1(2,202
1(2,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2
1*1>1E1
1*1B1Z1r1
1*1R1z1
1*2:2
1+1I1d1
1+1M1l1
1,1014181
1,101L1P1l1p1
1,141H1T1\1
1,2024282<2@2D2H2L2P2T2X2\2`2d2h2l2p2
1-1B1W1l1
1.#IND
1.#INF
1.#QNAN
1.#SNAN
1.1C1X1m1
1.1N1
1/1D1Y1n1
100522031951Z0#
101E1Z1o1
101H1`1x1
101n8
10282x2
1080F0j0
110307224029Z0
111F1[1p1
111|1
113|3
120825070000Z0y1
121G1\1q1
121M1h1
130725191115Z0
131H1]1r1
141#4
141I1^1s1
14282<2@2D2H2L2P2y2
151]1
156\7`7d7h7l7p7t7x7
161U8{8L?
171G1W1
181d1
190915070000Z0y1
1:1M1t1
1<2D2
1>1d1u1
1@2^2y2
1A2e2
1B4P4m5
1C2}2
1D1T1z1
1E1j1
1E2Z2
1F2N2|2
1F2X2~2
1G1N1q1@2D2H2l2
1H1O1]1m1
1I2q2
1L1T1
1L3R3
1L8W8
1P2T2X2
1P5T5X5\5`5d5h5l5
1R5u5
1T1d1
1T3d3l3|3
1W1\1a1f1k1p1u1
1WEIGHTS
1X9!:U:
1Z?j?s?~?
1[9f9
1\2k2
1_^[]
1a1u1
1b2M3
1darray
1e2K3n3u3
1f2o2
1h2l2p2t2x2|2
1i3y3
1l1p1t1x1|1
1l1t1
1n2u2
1o2t2
1v2{2
1|2)4u4
1|2l3
2	2@2l2
2	313Y3
2	3H3{3
2 2$2(2,2<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
2 2,282D2P2\2
2 2,282D2P2\2h2t2
2 282P2h2
2!2,22282>2J2P2V2\2g2m2s2y2
2!2<2W2r2
2!383{3
2"2Q2a2
2"343u3
2"5P5|5
2#202>2J2
2#3)3/353T3Z3`3f3
2#3}3	4h4
2$2d2l2
2$3d3
2$616Q6
2%202
2%20262<2B2M2S2Y2_2j2p2v2|2
2%2@2[2v2
2&2.2W2_2u2
2&232O2
2'222u2z2
2'2;2O2c2w2
2'3>3F3M3w3~3
2(2@2X2p2
2(2G2P2Z2
2(3,303
2(303
2(333
2(3:3
2)2>2S2h2}2
2*2:2H2S2q2
2*2?2T2i2~2
2+2?2S2g2{2
2+2@2U2j2
2+32383
2+3~3
2,202L2P2l2p2
2,2A2V2k2
2,2X2
2,2d2
2-2B2W2l2
2-3V4
2.2C2X2m2
2.353l3s384<4@4D4`4d4
2/2D2Y2n2
2/2X2~2
2/2_2
202E2Z2o2
202H2`2x2
202P2p2
203C8S8e8p8
212L2g2
212i2
214]4
222@2
222J2b2z2
23456789:;<
234C)*9:C+
242<2P2\2d2
24383<3
243<3
24A4L4
252S2q2
262B2e2%3?3
282S2n2
282`2x2
283@3
283W3u3
285%727f7.8
292R2Y2n2
292a2
292u3
2<2@2D2H2L2P2Y7
2<3z3
2=2O2!313a3s3
2>3t4d6I7
2@2l2
2@3@1@0@
2@3D3H3L3l3(4H4 5\5i5
2A3[3
2B4|4
2D2e2
2D3T3
2D607}8
2H2P2|2
2N284
2P2X2
2P3|3
2Qh,M
2R3`6;7
2S3p3
2WEIGHTS
2\2c2
2\6]8c8x8
2^3e3
2^3i4
2`3i3{3^6
2darray
2h3N4U4_4
2h3l3p3t3x3|3
2v3~3
2}3h6z6
3 3$3(3,3034383<3@3D3H3L3P3T3X3\3`3d3h3l3p3
3 3$3(3,3034383<3T3o3t3{3
3 3$3<3A3R3c3t3
3 3$3\3`3d3h3l3
3 383P3h3
3 4$4(4
3 4(4|4
3 4V4
3!3'3-393?3E3K3W3]3c3i3t3z3
3!383A3Q3[3
3!4I4q4
3"32373G3L3w3
3"3:3R3j3
3"4J4r4
3#3(3-323E3N3W3\3e3j3s3|3
3#3J3q3
3#404
3#444]4"5
3#4J4q4
3$3*303<3B3H3N3Y3_3e3k3y3
3$4P4|4
3%3:3O3d3y3
3%3C3a3
3%4P4
3%4q4
3&3;3P3e3z3
3&4w4
3&6F6
3'3<3Q3f3{3
3(3=3R3g3|3
3(3@3P3h3x3
3(3@3X3p3
3(4,404
3(4p4
3)3>3S3h3}3
3)3H3S3
3*3?3T3i3~3
3*43:<;
3+363A3L3p3z3
3+3?3S3g3{3
3+3@3U3j3
3,303L3P3l3p3
3,3A3V3k3
3,40444
3,4p4
3,5I7|7
3-3U3}3
3-4f4m4
3/3A3f3x3
3/3C3W3k3
3/3J3e3
3/4>4
303H3`3x3
303P3p3
30485
304^5
314h4l4p4t4
32-bit floating-point operations flush denorm float literals to zero, %g is losing precision (this warning will only be shown once per compile)
323B3d3k3}3
326N6]6h6
33333
333N3i3
343<3
343\3
34484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4
344<4
344x4Y5
373k3
384?4M4]4r4
384@4
384x4
393P3
393W3u3
394B4J4
3;3t3
3<3D3X3d3l3
3<4C4
3<4V4
3<4_4
3<4z4
3=3e3
3>3j3
3?3F3]3p3
3?3|384<4@4D4H4L4P4T4X4\4`4d4h4
3A3F3
3C4b4
3C4g4
3E$S%
3H3P3
3H3^6
3H3t3
3H4P4
3I4P4
3N4}4
3P3U3\3c3j3
3P4X4
3P4e4w4
3R4g4p4
3T4[4\7
3V3f3
3WEIGHTS
3Y3^3
3]3F4c4
3`4h4
3d3h3l3
3d3l3
3d4t485I6
3f4m4
3f5u5
3http://crl.microsoft.com/pki/crl/products/CSPCA.crl0H
3http://crl.microsoft.com/pki/crl/products/tspca.crl0H
3i495
3k3r3
3n4u4
3p4s6
3q3H4
3r4y4
3t4x4
3{P3CT
4 4$4(4,4044484<4@4D4H4L4
4 4$4(4,4044484<4@4D4H4L4P4T4X4\4`4
4 4(40484@4H4P4`4h4p4x4
4 484L4P4d4h4|4
4 484P4h4
4 4<4@4`4|4
4 4`4h4
4 5(5
4 5L5
4 component with no swizzle expected for operand #%d of opcode #%d (counts are 1-based). 
4!4&404B4L4^4h4
4!404?4N4]4g4v4
4!464K4`4u4
4"474L4a4v4
4"4=4X4s4
4"4J4]4
4#474i9o9x9
4#484M4b4w4
4#4Z4
4$494N4c4x4
4%4:4O4d4y4
4%6)6-6165696=6A6E6I6M6Q6U6Y6]6a6e6i6m6q6u6y6
4&4;4P4e4z4
4&4A4\4w4
4&5x546Z6u6
4'4-43494D4J4P4V4a4g4m4s4~4
4'4<4Q4f4{4
4'7x7
4(4=4R4g4|4
4(4@4X4p4
4(5,505
4(505
4(5^5
4)4G4e4
4)5d5
4*464B4N4Z4r4
4*4:4s4
4*4B4Z4r4
4*898D8v8-:<:%;/;
4*=g=
4+41474=4I4O4V4\4g4m4s4y4
4+4S4u4
4,8y<
4-4>4L4S4\4a4v4
4-4S4f4
4.4V4|4
4.5V5~5
4.5y5
4/4@4Q4b4s4
4/4C4W4k4
4044484L4P4T4
404H4`4x4
404P4p4
405T5
414;4Z4j4z4
41Rny
424<4C4Z4h4
42575A5K5U5_5i5
42595s5z5
42:u:
43494?4E4m4s4y4
434G4[4o4
434Q4o4
435:5G5W5
44484<4@4D4H4L4P4T4X4\4`4d4h4V7
444`4d4h4l4
44585<5@5D5H5L5P5T5X5\5h5l5p5t5x5
484_4
494H4S4{4
49PHu
4;4c4m4t4
4<4h4
4<:><E<k=$>@>D>H>L>P>T>X>\>`>d>
4>5R5v5
4?4M4d4h4l4p4t4x4
4@4H4
4@5a5
4C4a4
4D4L4`4l4t4
4D4s4
4H5O5
4L5z5
4L6\7
4N5J;[;l;
4Q4V4
4R5e5
4T5X5\5
4V8B;I;Y;s;
4Z4j4
4^5f5&7]7
4`7h7H8P8
4a4q4
4c5x5
4d4l4
4e5l697f7o7
4f4m4
4f6u6
4h4}4
4k5l<~?
4l5L6,7
4t4x4|4@5D5H5
4x5|5
5	6'6E6c6
5	6)657
5 5$5(5
5 5$5(5,5054585
5 5$5(5,5054585<5@5D5H5L5P5T5H8L8P8T8X8\8`8d8h8l8p8t8x8|8
5 5$5(5,5054585<5@5D5H5L5P5T5X5\5`5d5h5l5p5t5x5|5
5 5(50585H5P5X5`5h5p5x5
5 555J5_5t5
5 585P5h5
5 5<5@5`5
5 5`5h5
5 6(6
5 6L6x6
5 6S6
5 6a7
5 6h6
5!565K5`5u5
5!6T6X6\6`6d6h6l6p6t6x6|6
5!6j6
5"5+545=5F5O5X5]5
5"515
5"575L5a5v5
5"595D5o5
5#5)5/555]5c5i5o5
5#5,555>5G5P5Y5b5k5t5}5
5#5-585>5D5N5\5b5h5n5z5
5#505y5
5#585M5b5w5
5#5A5_5}5
5#6R6
5$5)5I5p5u5|5
5$5.5L5P5T5X5\5
5$595N5c5x5
5$5L5T5h5t5|5
5$6(6,6h6p6
5$6+6
5$6d6
5%5A5J5Z5h5
5%5}5
5&666x6
5'555
5'5@5Y5h5
5'5J5Z5
5'6:6x6
5(545
5(5:5I5
5(5@5X5p5
5(5J5l5
5(7O7V7
5)6M6
5+6=6b6t6"757Z7l7
5+6g6v6}6
5,505P5l5p5
5,5X5
5,60646
5.5?5P5a5r5
5.5V5~5
5/585C5N5]5h5
5/5;5B5I5P5W5`5k5z5
5/5W5
505H5`5x5
505K5f5
515R5
525G5\5q5
525b5j5
535C5
535G5[5o5
535H5]5r5
545I5^5s5
545O5j5
545[5
545k5
546>6P6Z6l6v6
547H7
57(<.<3<[<i<{<
575U5s5
575k5
576X8
585K5_5o5
585S5n5
5:5?5X5]5
5;6]6{6,8
5<6@6D6
5>5}6
5?5u5
5@6H6
5@6c6
5A9v:
5B6q6
5D5p5
5D6f6u6
5D8~8
5E6780;
5E6<7C7
5F7i7
5L5S5l5s5
5L5T5
5P6T6X6
5P6T6X6\6`6d6t6x6|6
5P6X6
5P6h6
5P6w6
5Q5]5
5Q5^5k5x5
5Q6q6
5R6q6
5W6"8(81878@8G8a8
5W6m6
5X5]5n5
5X5`5
5X5`5x5
5X6`6
5[5.7
5\6`6d6h6l6
5`6d6h6
5c7v7
5d5h5l5
5e7&8
5h5p5
5k6)7
5l5s5
5l5t5@6H6 7(7
5p5t5x5
5p5x5
5r9}9
5t0Ht!H
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
6 6$6(6,6064686<6@6D6H6L6P6T6X6\6h6l6p6t6x6|6
6 6$6(6@6D6H6L6
6 6$6:6M6T6
6 6(686@6H6P6`6h6p6x6
6 6)6=6
6 656J6_6t6
6 686P6h6
6 686P6p6|6
6 6\6{6
6 6e6q6
6 7(7
6 7x7
6"626e6u6
6"7a7l7
6#6*6X6x6|6
6#676K6_6s6
6#6>6Y6t6
6#7K7s7
6#7n7
6$6,6
6$6.696?6E6O6Z6`6f6p6{6
6$7d7
6%6.676@6I6R6[6d6h6l6p6t6x6|6
6%747F7
6%7C7
6'6B6]6x6
6'6C6R6]6
6'6C6{6
6'7`7
6(6@6X6p6
6(7,7
6(7,7074787<7@7D7H7L7P7T7X7\7`7
6(7,7074787<7@7D7H7L7u7
6(707
6(7h7
6)6F6R6j6
6)6b6r6
6)7F7
6+6F6a6|6
6,606L6P6l6p6
6,6I9m9
6.6C6X6
6/6D6Y6n6
6/6K6g6
606E6Z6o6
606H6`6x6
6074787
616F6[6p6
616O6m6
616[6
626G6\6q6
626x6
62G2O5`5m5
636H6]6r6
636[6
646:6@6F6Z6`6f6z6
646B6U6f6
646I6^6s6
646`6
647<7|7
647r7
656D6i6p6
667H7W7
667{9
676Z6
686H6}6
686Z6|6
696_6v6
697 8J8l8
697?7G7
6<7D7
6<7z7
6<;s;
6<K<U<
6=6`6
6=6}6
6=7X7r7
6>7{7
6?9i?
6A6H6T6
6A7K7
6C7:8P9
6C:J:
6D6W6
6G6m6~6
6G7Q7a8
6H6L6P6
6H6~6
6P7T7X7
6Q7_7x7
6R7l7
6T7X7\7`7Y9
6T7`7q7
6T7d7
6X7\7`7
6\6d6
6\7q7
6]7g7
6e718b8
6f7u7
6k7w9
6l7y7
6x7|7
7	8$8?8Z8u8
7	8-8Q8u8
7	:I:
7 7$7
7 7$7(7,7074787<7
7 7$7(7,7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
7 7&7,767A7G7M7S7^7d7j7p7{7
7 7(707@7H7P7X7`7p7x7
7 787P7h7
7 7L7T7
7!7?7]7{7
7!7B7I7j7
7!7s8
7"8~8
7#777K7_7s7
7$70787<7D7H7P7T7\7
7$707<7H7T7`7l7x7
7$717g7
7$:(:B;V;\;h;/<G=
7%787R7
7%7E7
7%8j8
7&7>7Q7[7
7&7H7j7
7'7;7O7c7w7
7(7@7X7p7
7(8,8084888<8@8D8H8L8P8\8`8d8h8l8p8t8{9
7(8l8
7)7m7|7
7*7R7z7
7+7@7U7j7
7+8k8
7+9?9S9C?W?k?
7,7A7V7k7
7,878
7-7>7K7$838F8
7-7B7W7l7
7.7C7X7m7
7/797
7/7D7Y7n7
700PP
707E7Z7o7
707H7`7x7
707P7p7
70888
717F7[7p7
717L7g7
728z8
74787<7@7D7
747=7I7T7m7v7
747`7
74:o:
757P7k7
757S7q7
767F7
768I8
778>8J8
787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7
787b7
788J8_8q8r<
788O8p8
797T7o7
7:7a7
7;7M7W7i7s7
7;7_7
7<7h7
7<9L9p9
7=7Y7u7
7?8E8
7B7R7}7
7B8U8z8
7D8H8L8P8T8
7D8H8L8P8T8.:5:::@:F:L:R:X:^:d:l:p:t:x:|:
7G7o7
7G;9<
7H8L8P8
7H8Q8`8s8
7H8u8h;
7I8P8]8L9S9`9
7J<w>
7L7P7T7X7\7`7d7h7l7p7t7
7L8T8
7L8|8
7N8a8k8u8
7N8g8
7P7a7
7S8\8*:1:[:m:w:
7T7g7
7T7k7
7X7`7
7Z7i7R8Y8
7Z:*;
7d7c8
7d?p?|?
7f8u8
7g7K8
7l7w7
7p7t7x7
7t8x8|8
7y8A:
8 8$8
8 8$8(8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t889<9@9D9
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8x8
8 8$8(8,8084888<8@8D8H8X8\8`8d8h8l8p8t8x8|8
8 8$8(8,8x8
8 8(80888@8H8P8X8`8h8p8x8
8 8,888D8P8\8h8t8
8 888P8h8
8 8;8K8Y8q8
8 8@8L8X8d8p8|8
8 8L8T8
8 8p8x8
8 9$9(9
8 9(9h9p9
8 9L9x9
8 9X9
8!8(8-878A8H8O8V8]8d8k8r8y8
8!848a8q8
8!8M8T8
8"888r8
8"8=8L8x8
8"9T9q9
8#8/898T8X8\8`8d8h8g99;F;f;
8#838H8X8}8
8#9a9_=
8#:r:
8$8.8J8Q8m8t8
8$878V8b8
8$898N8J9_9t9
8%8B8G8Q8[8
8%8C8a8
8%8_8w8
8&9M9t9
8'8<8Q8f8{8
8'8D8
8'979p9
8'989f9
8'9B9S9Z9i9
8':`;d;h;l;p;t;x;|;
8(80888@8H8P8X8`8h8p8x8
8(848
8(848@8L8X8d8p8|8
8(8=8R8g8|8
8(8@8X8p8
8(8C8^8y8
8(9X9q9
8(9h9
8)8/858;8F8L8R8X8c8i8o8u8
8)878C8
8)8>8S8h8}8
8)8U8}8=9
8*8?8T8i8~8
8+8?8S8g8{8
8+8@8U8j8
8+9k9
8,808L8P8l8p8
8,8A8V8k8
8,8G8b8}8
8,8s8
8,949t9|9
8-8B8W8l8
8/8M8k8
8/8t8
808@8f8t8
808H8`8x8
8094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
80989
809n9
80?0/6@6D6H6L6P6T6X6\6`6d6h6l6p6t6x6|6
82999
82<2@2D2
82<2@2D2H2L2P2T2X2\2`2d2h2l2p2t2x2|2
84;@;L;X;d;
858E8n8v8
858Y8|8
85;d;
868X8z8
869E9g9!:[:
878R8
888=8a8f8
889@9
889|9
899::;;<=>?@ABBBCBBBBBDDEEEEEFEEEEPGGGGHHHHIJKLMNO
8;8c8
8<8h8
8<9D9
8>8N8y8
8>:E:$<(<,<0<4<
8@8P8
8@9l9
8A8Q8x8
8A9}:*;
8B8j8
8B>I>(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
8C9H9
8C9I9
8D$"uM
8D8L8
8D9K9l9z9
8D9h9z9
8E8|8]9;:i:
8H8s9
8H8t8
8H9L9P9T9X9\9`9d9h9l9p9t9x9|9
8H9P9
8I9m9
8J8~8
8J9p9w9
8J:Z:c:n:y:
8L8\8
8M8d8
8N9]:
8N9g9
8O#t@3
8P9T9X9
8P9T9X9\9`9d9h9l9p9t9x9|9
8Q8u8
8R:^:t:z:
8SVW3
8T8\8
8T9X9\9`9d9h9l9p9t9x9|9
8T9\9
8T9d9
8V9f9}:
8V=}=
8W9b9w9
8X8`8
8X8o8
8\8`8d8h8l8p8t8x8|8
8`8h8
8f9u9
8l9p9t9x9|9
8l:l;
8n8Y:F;Y=
8p8t8x8
8p8x8
8|$ru
9	:!:5:
9	:#:.:J:Y:d:t;'<6<A<
9	:-:Q:u:
9 9$9(9,9094989<9@9D9H9L9P9T9X9\9`9d9h9l9p9t9x9|9
9 9$9b9
9 9(90989@9H9P9X9h9p9x9
9 9(90989@9H9X9`9h9p9x9
9 989P9h9
9 9S9c9
9 :(:L:x:
9 :(:d:l:
9 ;2;
9!929
9!9B9U9y9
9"9@9D9
9":0:@:u:
9":2:G:P:T:X:\:`:J;c;
9#989M9b9w9
9#:G:k:
9$9(9@9X9p9
9$9.949:9@9K9Q9W9]9h9n9t9z9
9$909<9@9X9p9
9$999N9c9x9
9$:c:v:
9%9:9O9d9y9
9%9M9u9
9&9;9P9e9z9
9&:6:q:
9'9<9Q9f9{9
9'9^9q9
9';5<><U<b<o<
9(9=9R9g9|9
9(9@9X9p9
9(9@9`9l9x9
9(:0:
9(:T:
9(<W<
9)9>9S9h9}9
9)9M9q9
9*9E9U9o9
9*9J9g9
9+9V9
9,909L9P9l9p9
9,9M9`9s9
9,:4:
9,:<:
9,:G<
9-9;9A9S9
9-9d9t9
9-:s;
9.9D9Z9q9
9.9{9
9/9>9
9/9C9W9k9
9/9|9
9/:Z:
909H9`9x9
90:8:
90:@:i:y:
90;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
919B9[9l9}9
919L9
91<\<
91w?@
929M9h9
929X9k9
92:Q:
939Q9o9
95:x:|:
969T9r9
96<@<
97:]:
97;t;s?
98---!"
989&<P<T<X<\<
989?9h9z9
98:@:
999G9y9
99:E:\:|:
99<s<
9:9U9p9
9:9Z9
9:;<'
9;:K:]:h:|:
9<:C:U:
9<:D:
9=9[9y9
9?9u9
9@9\9`9d9h9
9@9~9
9@:H:
9A`uy:
9Apu'
9AtuKQS
9Atu_Q
9AtujQW
9BSCDugf
9Clu+
9D$(w
9D$4r
9D$<w
9D$DrD
9D$LuN
9D9p9
9E(u	
9F:;;
9F@vj3
9GPvb
9Glt#
9HXs>
9H`uk
9Htu"
9Htu%A
9J8t}
9J;X;
9J`u_9O`uZ
9Jhu0
9JhuO
9Jhu}
9K4vK
9K:Z:
9K:~:.<
9KXv!
9L$(v7
9L:P:T:
9M v9
9M9}9
9N4v&
9N9v9
9NPv"
9NPv~
9N`v 
9Nht_
9Npv(
9OPvm
9OXv"
9P;w;
9Qpu'9Ylu"
9S8u	9K<
9T$0|
9T$@rLw
9T$|v
9T9m9
9U9g9
9U:\:
9VPv/
9W4v(
9W:r:
9X9`9
9X?p?
9Xlu	B
9Xtu!F
9Xxt	9_x
9Y9%;,;
9Ytu^
9[;x;
9\$|vl
9\9a9
9\:r?
9^(tD
9^4vk
9^<n<
9_9~9
9`9h9
9`:	;
9b:R;c;
9d:q:{:
9f:u:
9k;v;
9p:x:
9q=|=
9s4v&
9s=x=
9t$,vh
9t$0uw
9t$Dv1
9t$Dv2
9t$L|
9w t	
9w,v 
9x`u'
9x`u,
9yLta
9zlu	@
9ztuW
9{Pt?
9{|u	
9|$(v;
9|$4v1
9|$`v
9~ vE
9~$v8
9~,v"
:	;-;Q;r;
: !":#$:%%%&''&'':():::::::::::*::::::+,:-./01:2345::::::::::67:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::8:9
: :$:(:,:0:
: :$:(:,:0:4:8:<:@:D:H:L:P:T:X:\:`:d:h:l:p:t:x:|:
: :(:0:8:@:H:P:X:h:p:x:
: :(:8:@:H:P:X:h:
: :,:8:D:P:\:h:t:
: :5:J:_:t:
: :8:P:h:
: :G:N:r:y:I;P;
:!:6:K:`:u:
:!;6;K;`;u;
:!;:;j;
:!<*<
:":7:L:a:v:
:#:+:
:#:8:M:b:w:
:#:A:_:}:
:#;Z;x;D<z<
:#T$T#t$P2
:$:*:0:8:<:@:D:H:L:P:T:i:
:$:*:4:?:E:K:U:`:f:l:r:}:
:$:4:/;>;N;
:$:9:N:c:x:
:$:<:D:
:$;);K;
:%:::O:d:y:
:%:@:[:v:
:%;J;
:&:D:b:
:&:n:z:(;-;?;];q;w;
:&;;;l<
:(:4:@:L:X:d:h:
:(:@:X:p:
:(;0;p;t;x;
:(;7;[;
:(;T;
:*:@:V:l:v:
:+:O:v:
:,:0:L:P:l:p:
:,;\;
:-:H:c:~:
:-:K:i:
:.;@;
:/:?:w:
:/:O:o:
:/:v:
:/;g;
:0:H:`:
:0:H:`:x:
:0:g:
:1:a:
:1:j;w<
:1:o:u:
:2:R:r:
:2I2\2
:3:8:K:^:q:
:3:G:[:o:
:3:[:
:3;:;E?R?Y?
:3;C;
:4:<:|:
:4:I:^:s:
:4;<;|;
:7:A:U:h:r:
:7;j;
:8:?:X:\:`:d:h:
:8;6<
:8;@;
:9:N:h:
:9A`u
:::::::::::::::
::;x;
:<:F:{:
:<:O:
:<;@;D;H;h;l;p;t;x;|;
:@:H:
:A;H;
:C:i:
:D$8t"
:D;H;L;
:H:d<h<
:M;];f;q;|;
:N:X:n:x:
:O:}:
:P:X:
:R;~;
:T;X;\;U=
:W:`:
:X:h:s:~:
:X;h;
:Y;i;
:Z;a;
:[;`;
:\;.<
:b;q;
:c;b<
:t:)<
:u[8Q
;	<2<
; ;$;(;,;0;4;8;<;@;D;H;L;P;T;X;\;`;d;h;l;p;t;x;|;
; ;&;2;8;>;D;P;V;\;b;m;s;y;
; ;(;0;8;@;H;P;X;`;h;p;x;
; ;,;8;D;P;\;h;t;
; ;5;J;_;t;
; ;8;P;h;
; ;;;V;q;
; ;W;`;s;
; ;\;d;
; ;`;h;
; ;f;|;
; <$<(<
; <(<x<
; <H<`<p<
; <^<
;!;2;[;z;
;!;6;K;`;u;
;!;L;P;T;X;\;`;d;h;l;
;";j;z;	<
;#;-;9;E;U;k;
;#;-;X;];
;#;7;K;_;s;
;#<J<q<
;#<U<
;$;/;H;
;$;M;];
;$;`;h;
;$<h<
;%;E;^;r;
;%=4=I=p=t=x=|=
;&;6;W;^;p;
;';2;
;';|;
;(;4;@;L;X;d;p;|;
;(;@;X;p;
;(<9<R<
;);9;I;i;~;
;);F;
;)<9<
;*;>;M;X;
;+;<;I;^;
;,;0;4;8;Y;
;,;0;P;p;
;,<?<U<
;.?c?
;/;B;U;h;{;
;0;8;x;
;0;E;Z;o;
;0;H;`;x;
;0;X;p;
;0<?<z<
;0t	;p
;1;F;[;p;
;1;O;m;
;1<h<
;2;G;\;q;
;2;R;r;
;3;H;];r;
;3;N;i;
;4;I;^;s;
;4;R;p;
;4<8<<<@<D<p<w<
;5;];
;5<A<L<
;6;U;t;
;8;^;
;8<@<
;9;`;
;9<V=V>t>
;9>]>
;:<L<Y<
;:<W<g<
;:<e<
;;;Y;w;
;<<|<
;=<R<&>
;?;T;k;p;
;@<D<H<@=D=H=
;A r	
;A$uS
;A,t3
;A<r	
;ATr	
;A`t 
;A`tHF
;A`t_
;A`u4
;Ahu(
;Apr/3
;Axu	:Q|
;B`u';rpu"
;B`u6
;B`u>
;BxuA
;C$v2+S$
;C,r-
;C,v6;
;CHuh
;C`u8
;CpuD
;CtuN
;Cxu1
;Cxu2
;D$ s:3
;D$(u
;D<_<i<
;DXBCV
;E;m;
;E<O<_<o<
;E<_<
;F\t4
;F\uA
;F`u)
;F`uK
;FdtB
;Fxut:N|uo
;G0u|
;G<L<
;H$s	
;H;P;
;H;t;
;H`t+
;H`u[
;HluS
;HpuK
;J$vJ
;K;o;
;L$ r
;L$ t
;L$$r
;L$`r
;L<,=
;M;x;
;M=S=[=
;N<v<
;OHrq;OLwl
;OSGNu
;P$t	
;P;X;
;P`u"
;Phu#
;Rich
;T$Lr
;T$Ls
;T$`r1
;T$|r
;T=\=o=
;U(tM
;W`uW
;WhOSG5
;Y<r<
;Y`u5
;[;h;
;\$(r
;\$(s
;\$Tr
;\$Ts
;\<`<d<h<l<p<t<L=P=T=X=\=`=d=<>@>D>H>L>P>(?,?0?
;^<s<
;^`uS
;c<0=O=
;h;p;
;j<D=
;k<z<
;p;x;
;p`uNB
;plu.
;ptu1
;pxu3
;qtt@
;s$v3
;s4ts;
;sxu=
;t$ r
;t$$r
;t$Dr
;xxu4
;z<_=
;z`u?
;zpu	
;{(ur3
;|$8v#
;|$Lr
;|$Xv!
;|$`r
<	=&=.=4=P=u=
<	=A=K=U=_=k=u=
<	?&?z?
< <$<(<
< <$<(<,<\<`<d<h<l<p<t<x<|<
< <(<0<8<@<H<P<X<`<h<p<x<
< <8<P<h<
< <<<@<`<
< =L=
< =x=
<!-- id=%d -->
<!<?<]<{<
<"<=<X<s<
<"<[<|<
<"<b<i<
<"<g<l<
<#<)<3<><D<N<U<_<e<k<u<
<#=D=S=|=
<#=q=
<$<0<<<H<T<`<l<x<
<$<B<`<~<
<$<d<l<
<$<x<
<%<6<G<X<i<z<
<%<:<R<}<
<%<H<
<%=7=P=T=X=\=`=d=h=l=p=t=x=|=
<%=M=u=
<&<9<L<_<r<
<&<A<\<w<
<&<L<j<
<'<;<O<c<w<
<'<<<V<k<
<'=>=
<'=Q=
<'>6>)?8?
<(<@<X<p<
<(=0=p=x=
<(=:=
<)<K<
<,<0<
<,<2<;<A<J<Q<h<
<,<A<V<k<
<,=4=p=x=
<,>-?
<,?X?
<-<B<W<l<
<-=V=g=
<.<;<[<w<
<.<C<X<m<
<.<I<d<
</<D<Y<n<
</<e<u<2=B=~=
</font>
</pre>
<0:08
<0<E<Z<o<
<0<H<`<x<
<0<P<p<
<0=n=
<0^0i0y0
<1<F<[<p<
<1m1~1
<1|1<5}-
<2<G<\<q<
<2<J<b<z<
<4<8<<<@<D<H<
<4<<<|<
<4=<=|=
<4=x=
<5<]<
<5<h<
<6=S?
<8<H<o<v<
<8<d<
<<<D<p<x<
<<<X<\<`<d<h<l<
<<<h<
<<=|=
<=<P<x<
<?<o<
<@=D=H=
<A=W=
<A=q=
<C<S<
<C=i=
<D=[=
<D=c=
<E=U=
<H<L<P<
<H=W=
<I<b<
<I<|<
<K<[<
<K<s<
<K=R=Y=`=g=n=
<K=w=
<P<T<X<\<`<d<h<l<
<P<X<
<R<{<
<S=d=t=
<S=e=
<W?f?q?
<X<\<`<
<\uf;
<anonymous>
<basic>
<body bgcolor="#000000">
<compound>
<container>
<continued>
<count>
<d=h=l=
<e<l<z<
<error - out of memory>
<error>*
<float32pp>
<font color = "#
<font color = "#%s">
<h<i=
<h<l<p<
<i=z=
<internal error>
<invalid constant table>
<invalid default value offset>
<invalid member offset>
<invalid type offset>
<l<q<
<l<{<
<method>
<nocast>
<none>
<p<x<h>p>
<parse error>
<pointer>
<pre>
<st9A< 
<stB<tt><ut:
<stY<ttU<utQ
<symobj>
<t<x<|<
<unknown buffer type>
<unknown dimension>
<unknown qual> 
<unknown register type %u>
<unknown resource return type>
<unknown shader model>
<unknown>
<unknown> 
<unnamed>
<unused>
= =$=(=,=0=4=
= =$=(=,=0=4=8=<=@=D=H=L=
= =$=(=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
= =,=8=D=P=\=h=t=
= =8=P=h=
= =L=x=
= >(>
= >L>x>
= >b>
=!=<=W=r=
=!=F=
=!>D?
="=(=/=>=D=
="=:=R=j=
="=I=O=k=q=
=#=R=b=
=#>8>
=$=5=@=S=b=m=
=$=5=F=W=p=t=x=|=
=$=L=e=l=
=$=P=X=
=$=`=h=
=$=x=
=$>a>
=%=+=1=;=F=L=R=\=h=n=t=z=
=%=,=3=:=A=Y=
=%=,=3=:=h=
=%=7=n=x=
=&>,>
=&>5>
='=-=7=D=J=P=V=`=f=l=r=}=
=(=/=
=(===R=g=|=
=(=@=X=p=
=(=@=`=l=p=
=(=L=T=\=d=l=t=|=
=(=h=
=(=l={=
=(>f>
=)=>=S=h=}=
=)>u>
=*=?=T=i=~=
=*>_>
=+=8=
=+=?=S=g={=
=+=@=U=j=
=,=0=4=8=<=@=D=H=L=P=T=X=\=`=d=h=l=p=t=x=|=
=,=0=L=P=l=p=
=,=0=P=p=
=,=4=`=h=
=,=7=K=Z=e=
=,=A=V=k=
=,>7?H?
=,>>>E>x>1?
=,>O?
=-=B=W=l=
=-><>
=->f>m>x>
=.=C=X=m=
=/=M=k=
=0;09
=0=?=N=c=
=0=H=`=x=
=0=K=f=
=0>4>8>
=0>8>x>
=1=?=\=n=y=
=2=@=D=H=L=P=l=p=t=x=|=
=2=P=n=
=3=e=
=3>:>e>
=4=B=]=h=s=
=4=O=j=
=4=[=
=4=r=
=4>8><>@>
=4><>|>
=5=;=A=G=M=S=Z=a=h=o=v=}=
=6=M=r>
=6=T=m=t=
=6=Y=
=8=P=`=x=
=:>x>
=<=1>
=<=k=
=<=m=
=<>@>D>
=<>E>g>s>
===J=U=`=k=
==>|>
=?>}>
=@=S=w=
=@>H>
=A=w=
=A>W>z>
=A>^>
=B>R>[>f>q>
=D=p=
=D>|>
=D?S?
=G=w=
=G>o>
=H=O=
=H>O>
=H>v>
=I=j=
=PERFu
=Q=q=
=RDEF
=SDBG
=SDTL
=SMIDt
=STAT
=T>k>v>
=T?[?
=V>%?a?
=W>_>
=X=\=`=
=X=`=
=\=`=
=^>c>
=_>m>y>
=a>o>
=e=l=
=g>w>
=l>%?d?
=p=x=
=p>t>x>
=t_JJt
=x>|>
> >$>(>,>0>4>8><>@>D>
> >$>(>,>0>4>8><>@>D>H>L>P>T>X>\>`>d>h>l>p>t>x>|>
> >$>(>,>X>j>
> >(>0>8>P>T>X>\>`>d>h>l>p>t>x>|>
> >+>
> >0>@>G>W>
> >1>
> >8>P>h>
> >N>H?
> ?(?h?p?
> ?d?
> ?e?l?
>!>:>b>
>!>Z>a>
>!?b?
>">(>3>9>?>E>P>V>\>b>m>s>y>
>">@>^>|>
>#>>>Y>t>
>$>,>4><>H>x>
>$>9>N>c>x>
>$>@>
>$>L>r>
>%>,>3>?>e>l>s>{>
>%>/>R>W>g>q>
>%>:>O>d>y>
>%>]>m>
>%?3?
>&>;>P>e>z>
>'>,>Z>a>
>'><>Q>f>{>
>'>B>]>x>
>'>M>o>
>(>4>@>L>X>d>p>|>
>(>=>R>g>|>
>(>@>P>h>x>
>(>@>X>p>
>(?0?
>(?0?p?x?
>(?T?
>)>.>4>:>F>L>R>X>d>j>p>v>
>)>9>R>b>
>)>>>S>h>}>
>*>:>A>O>^>m>
>*>?>T>i>~>
>*>B>Z>r>
>*>G>
>+>D>a>
>+?>?u?
>+?R?c?t?
>,>0>L>P>l>p>
>,>B>X>f>
>,>R>x>
>,?P?x?
>,?\?
>.>C>o>
>.>G>Q>n>
>.?l?
>/>C>W>k>
>/>J>e>
>0!0	
>0>8>P>X>p>x>
>0>8>d>l>
>0>H>`>x>
>0>O>a>y>
>0>P>p>
>1?i?
>2?C?S?
>2?M?
>3?n?
>4>C>N>
>4>L>w>
>6?=?
>7?X?f?
>9qHu
>:?E?U?\?j?o?~?
>:?Y?c?{?
><>h>
><?D?
>=>[>y>
>=>e>
>>>Y>
>@?D?H?
>A?P?
>A?P?[?
>B>2?r?
>C?a?k?
>D>\>
>E>l>
>E?h?z?
>H>P>
>I>3?H?s?
>J>f>
>M>}>
>O>_>
>O?^?s?
>P>X>
>P>b>
>T>\>
>TEXTuCj
>V?]?
>d>h>l>
>f>u>
>p?t?x?
>p?x?
>p?}?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
? ?$?(?,?0?4?8?<?@?D?H?L?P?T?X?\?`?d?h?l?t?x?|?
? ?$?x?|?
? ?&?1?7?=?C?N?T?Z?`?l?r?x?~?
? ?5?J?_?t?
? ?8?P?h?
? ?L?T?
?!?'?-?8?>?D?J?U?[?a?g?r?x?~?
?!?6?K?`?u?
?!?G?N?U?\?a?h?m?t?{?
?"?7?L?a?v?
?"?=?X?s?
?"?F?L?P?T?X?\?`?
?#?8?M?b?w?
?$?0?<?H?T?`?l?x?
?$?9?N?c?x?
?$?:?
?$?P?X?
?%?0?F?Z?e?
?%?:?O?d?y?
?%?V?h?
?&?:?I?T?
?&?;?P?e?z?
?'?<?Q?f?{?
?(?8?H?X?h?x?
?(?@?X?p?
?(?@?`?l?x?
?(?H?P?X?`?l?
?)?G?e?
?)?K?}?
?*?R?z?
?,?4?
?-?K?i?
?-?U?}?
?0?5?H?[?n?
?0?@?X?h?
?0?H?`?x?
?0?L?P?l?p?
?0?L?P?p?
?1?L?g?
?1Z2S7t7
?2?F?M?]?e?l?
?2?J?b?z?
?2?O?e?k?
?2?e?
?3?G?[?o?
?3?]?u?
?7?c?
?:?M?u?
?:?\?`?d?h?
?;?F?
?;?R?Y?d?l?q?
?<?@?D?H?L?P?T?X?\?`?d?h?l?p?t?x?|?
??1type_info@@UAE@XZ
??2@YAPAXI@Z
??3@YAXPAX@Z
?CYYu
?D?p?
?H?x?
?Ht@Ht
?I?T?
?I?^?
?Q?c?
?_?n?y?
?internal error: emitting a denorm
?t?x?|?
?terminate@@YAXXZ
@ 	F 
@ !F 
@ )F 
@ +D$pB
@ 1F 
@ ;F8u!
@ @&@%@
@ A;N
@ t =
@ t'=
@ t.=
@ t;=
@ tC=
@ tU=
@!t5=
@!t8=
@!tN=
@!w5ti=
@!wCt2
@!wLtQ=
@!wctW=
@!wjtJ=
@"@"@
@"w tA=
@"wIt6=
@"wRtW=
@"wttY=
@#@$@%@
@#t%=
@#t.=
@#t5=
@#tQ=
@$;G$u
@'@.@
@(C;X
@)@8@
@,@&@+@
@.reloc
@0D0H0
@0tD=
@4;G4
@4SVW
@9G,s
@:@9@/@
@ABCDEFGGGHIIHIIJKLMNNNONNNNNNPQRSTUVWXYZ[\]^_`abcdefghijklmnop
@HSVW
@HsV%
@P3AP%
@Pt?3
@Pu-3
@Pw$t4
@Pw3tC
@Pw;tK
@Pw=tM
@Pw?tO
@PwJt6
@PwRt
@PwSte
@PwTtd
@PwVth
@Pw[tk
@QwGt4=
@RuDQR
@Rw t<=
@Tj:V
@Wt.j
@X+AX
@X+AXu
@`t8=
@`w5t
@aw!t*=
@d+Ad
@d+Ad9D$xu&
@dtJ=
@dt\=
@fw5t
@gt =
@gt4=
@gw3tb=
@hw<tr=
@p+Ap
@p+Ap9D$xu
@p;Bpt
@p;Fpt
@p@9B
@p@9F
@p@9F s
@pt*=
@ptx=
@pumQ
@t;At
@t;Atu
@t;Atv
@u:SV
@x;Axu
@x;Bx
@x;Cx
@x;Gx
@|:B|
@|:F|u
@|:G|
@|:G|u
A !C 
A * (1/A) = 1 <| Explicit
A * B for boolean A & B -> AND A, B <| MR.GenSimplifyInstructionsOpt1_NoExcl
A * B/A with negative variations on A <| MR.GenSimplifyInstructionsOpt1_NoExcl
A + B for boolean A & B -> OR A, B <| MR.GenSimplifyInstructionsOpt1_NoExcl
A ;B u
A$!C$
A*(L2<0) REL L (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*(L2<0) REL L <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*(L2>0) REL L (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*(L2>0) REL L <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*L2 REL L where L2 < 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*L2 REL L where L2 > 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
A*L2 REL L where L2 divides L as a UINT <| MR.GenSimplifyInstructionsOpt1_NoExcl
A+A REL L (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
A+A REL L <| MR.GenSimplifyInstructionsOpt1_NoExcl
A09S4|
A0;A8u
A0hPy
A0hly
A4;A<u
A4;B4s
A4;F4v	
A4^[]
A89S<
A;H$r
A;H0r
A;K4r
A;KPr
A;NPr
AB;N4r
AB_BlendFactor
AB_SampleMask
ADAPTIVETESS_W
ADAPTIVETESS_X
ADAPTIVETESS_Y
ADAPTIVETESS_Z
ADDRESSU
ADDRESSV
ADDRESSW
ADDSIGNED
ADDSIGNED2X
ADDSMOOTH
AH;FHv
ALPHA
ALPHAARG0
ALPHAARG1
ALPHAARG2
ALPHABLENDENABLE
ALPHAFUNC
ALPHAOP
ALPHAREF
ALPHAREPLICATE
ALPHATESTENABLE
ALWAYS
AMBIENT
AMBIENTMATERIALSOURCE
ANISOTROPIC
ANTIALIASEDLINEENABLE
AP3BP%
ATB;V
A`;B`
A`;B`u
A`;B`u6
A`;B`ue
A`;F`u,
A`;F`u>
A`;G`u=
Abs modifier not allowed for operand #%d of opcode #%d (counts are 1-based). 
Ad;Bdu
Ad;BduU
Ad;Fdu$
Ad;Gdu
Addition of same argument is same as multiply by 2 <| Explicit
AddressU
AddressV
AddressW
Ah;Bhu
Ah;Bhu@
Ah;BhuM
Ah;Fh
Ah;Fhu
Al;Blu
Al;Blu'
Al;Blu.
Al;BluH
Al;Blu]
Al;Clu
Al;Flu
Al;Flu$
Al;Glu
Al;Glu-
All DS input control point vcp[][] registers must have control point count (first dimension) declared with size equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All GS input v[][] registers must have vertex count (first dimension) declared with size equal to the number of vertices in the declared input primitive (%d vertices in this case). Input %d has %d vertices declared. 
All HS control point phase input v[][] registers must have control point count (first dimension) declared with size less than or equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS fork phase input vcp[][] registers must have control point count (first dimension) declared with size less than or equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS fork phase input vocp[][] registers must have control point count (first dimension) declared with size less than or equal to the number of output control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS join phase input vcp[][] registers must have control point count (first dimension) declared with size equal to the number of input control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
All HS join phase input vocp[][] registers must have control point count (first dimension) declared with size equal to the number of output control points declared in the hs decls phase (%d control points in this case). Input %d has %d control points declared. 
AllMemoryBarrier
AllMemoryBarrierWithGroupSync
AlphaToCoverageEnable
Alternately, fxc's /LD option allows use of the old compiler DLL
Annotation
AntialiasedLineEnable
Ap9B w
Ap;Bp
Ap;Bpt
Ap;Bpu
Ap;Bpu&
Ap;BpuE
Ap;Cpt
Ap;Cpu
Ap;Cpu'
Ap;Fpt
Ap;Fpu
Ap;Gpr
Ap;Gpt
Ap;Gpu
Ap;Gpu5
Append
Append/Consume not compatible with buffer type
AppendStructuredBuffer
Assignment %s: Attempting to assign an incompatible inline shader
Assignment %s: Dimensionality mismatch (LHS expects %d, RHS has %d)
Assignment %s: Expressions cannot be evaluated to produce objects, though they may be used to index into arrays of objects
Assignment %s: Inline shader missing interface parameter bindings
Assignment %s: Left-hand side type does not match right-hand side type
Assignment %s: Non-array right-hand type expected
Assignment %s: Objects left-hand sides cannot be assigned to expressions
Assignment %s: Only 0 and NULL are valid constants for an object assignment
Assignment %s: Only literal right-hand side values are allowed in state blocks in Effects performance mode
Assignment %s: Reference to shader variable '%s' not valid for %s techniques because it is missing interface parameter bindings
Assignment %s: Reference to shader variable '%s' not valid for %s techniques because it uses an uninitialized shader
Assignment %s: Reference to shader variable '%s' not valid for %s techniques because it uses an unsupported shader model
At;Btt"2
At;BttPF;w
At;Btu
At;Btu=
At;Ctt	;S
At;Ctu
At;Ftt
At;Ftu
AttrParams
Attributes
Ax;Bx
Ax;Bxu
Ax;CxuH
Ax;Gxu
AzIA;
A|:B|
A|:B|u
A|:C|
A|:C|u@
A|:G|u
B(;Bxu
B*!(A * -B + B) -> A * B <| MR.GenSimplifyInstructionsOpt1_NoExcl
B,:B|t
B4;C4s
B4A;H
B4QP+
B9OHu
B9qHu
B;Q4r
B;Qpr
B;VPr
BINORMAL
BLENDCURRENTALPHA
BLENDDIFFUSEALPHA
BLENDFACTOR
BLENDFACTORALPHA
BLENDINDICES
BLENDOP
BLENDOPALPHA
BLENDTEXTUREALPHA
BLENDTEXTUREALPHAPM
BLENDWEIGHT
BLEND_FACTOR
BORDER
BORDERCOLOR
BOTHINVSRCALPHA
BOTHSRCALPHA
BP#FP%
BP3AP
BREAK_EQ i2,-iv1 where iv1 is literal and has to be negated <| MR.Gen_PreModTarget_Both
BREAK_EQ i2,-iv1 where iv1 is literal and has to be negated, CMP form <| MR.Gen_PreModTarget_Both
BREAK_EQ i2,i1 <| MR.Gen_PreModTarget_Both
BREAK_EQ i2,i1 matches when CMP is used <| MR.Gen_PreModTarget_Both
BREAK_GE i2,-iv1 where iv1 is literal and needs to be negated before using <| MR.Gen_PreModTarget_Both
BREAK_GE i2,i1 for targets that use CMP <| MR.Gen_PreModTarget_Both
BREAK_GE i2,i1 short form <| MR.Gen_PreModTarget_Both
BREAK_LT i2,-iv1 where iv1 is literal and needs to be negated before using <| MR.Gen_PreModTarget_Both
BREAK_LT i2,i1 for targets that use CMP <| MR.Gen_PreModTarget_Both
BREAK_LT i2,i1 short form <| MR.Gen_PreModTarget_Both
BREAK_NE i2,-iv1 where iv1 is literal and has to be negated <| MR.Gen_PreModTarget_Both
BREAK_NE i2,-iv1 where iv1 is literal and has to be negated, CMP form <| MR.Gen_PreModTarget_Both
BREAK_NE i2,i1 <| MR.Gen_PreModTarget_Both
BREAK_NE i2,i1 with CMP <| MR.Gen_PreModTarget_Both
BUMPENVLOFFSET
BUMPENVLSCALE
BUMPENVMAP
BUMPENVMAPLUMINANCE
BUMPENVMAT00
BUMPENVMAT01
BUMPENVMAT10
BUMPENVMAT11
BX9BP
BXt	;AXw
B`;A`u
B`;G`u
BackEndOptimize
BackFaceStencilDepthFail
BackFaceStencilFail
BackFaceStencilFunc
BackFaceStencilPass
Bd;Adu
Bd;Adu"
Bd;Gdu
Bh;Ahu
BindInterfaces
BindInterfaces used with a shader that does not have interface parameters
Binormal
Bitwise operations not supported on legacy targets.
Bl;Al
Bl;Alt
Bl;Alu*
Bl;Fl
Bl;Glu
BlA;K
Blend
BlendEnable
BlendIndices
BlendOp
BlendOpAlpha
BlendState
BlendWeight
BorderColor
Bp;Ap
Bp;Apu
Bp;ApuO
Bp;CTr
Bp;Cpt
Bp;Fpu
Bp;Gpu
Bp;G|r.;
Bp@;D$
Bp@;D$ v
Bp@;D$Hv
Bp@;D$Xv
Bp@;D$\v
Bt;Att
Bt;Atu&
Bt;Ft
Bt;Gtt*;Y`u
Buffer
Buffers can only be bound to one slot in this version of Effects
Buffers may only be bound to one constant offset.
Buffers may only be bound to one slot.
Bx;Ax
Bx;Axu
ByteAddressBuffer
Bytecode appears corrupt - integrity check failed.
B|:A|
B|:A|u
C(;G(
C02F0
C0;C8
C0;C8u
C0;G0u
C0;V<|
C0J0t0{0
C4;C<
C4;C<t
C4;C<|
C8;C0
C8;F8
C8;F8u
C8;V4
C;\$ 
C;\$0r
C;\$|r
C;^4r
C<;F<
C<\uJ
C<_^[
CAMERASPACENORMAL
CAMERASPACEPOSITION
CAMERASPACEREFLECTIONVECTOR
CB[%d] already declared, repeated declaration on opcode #%d (count is 1-based). 
CCW_STENCILFAIL
CCW_STENCILFUNC
CCW_STENCILPASS
CCW_STENCILZFAIL
CD9} vG
CH3AH
CH3GH
CH;FH
CLAMP
CLIPDST
CLIPPING
CLIPPLANE0
CLIPPLANE1
CLIPPLANE2
CLIPPLANE3
CLIPPLANE4
CLIPPLANE5
CLIPPLANEENABLE
CMP(c,d=1+CMP(c,a,b),f) -> CMP(c,1+a,f) <| MR.GenSimplifyInstructionsOpt1_NoExcl
COLOR
COLOR outputs must be contiguous from COLOR0 to COLORn
COLOR%d must be a four-component vector
COLOR0
COLOR1
COLOR2
COLORARG0
COLORARG1
COLORARG2
COLOROP
COLORVERTEX
COLORWRITEENABLE
COLORWRITEENABLE1
COLORWRITEENABLE2
COLORWRITEENABLE3
COMPARISON_ANISOTROPIC
COMPARISON_MIN_LINEAR_MAG_MIP_POINT
COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR
COMPARISON_MIN_MAG_LINEAR_MIP_POINT
COMPARISON_MIN_MAG_MIP_LINEAR
COMPARISON_MIN_MAG_MIP_POINT
COMPARISON_MIN_MAG_POINT_MIP_LINEAR
COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT
COMPARISON_MIN_POINT_MAG_MIP_LINEAR
COMPLEMENT
CONSTANT
CONTINUOUS
COORD0
COORD1
COORD2
COORD3
COUNT1
COUNT2
COUNT3
COUNT4
COVERAGE
CP3FP
CPPWV
CUBIC
CULLDST
CULLMODE
CURRENT
CX;FX
C`9{Ps
C`;B`u
C`;F`u
C`;G`
C`;G`u\
CalculateLevelOfDetail
CalculateLevelOfDetailUnclamped
Can't continue validation - aborting.
Can't create/set an invalid shader. Make sure your shader is valid, and make sure you're not using asm shaders in SM4.0
Can't fall through case/default unless case/default has no code. Opcode #%d (count 1-based). Aborting validation.
Cannot declare streams as an input for geometry shader primitives, it must be its own parameter.
Cannot use %s attribute without specifying a 4-component SV_Position output
Cannot use texture arrays on DX9 targets with multiple samplers.
CaseStmts
Cd;Fd
Cd;Gdu
Cd;GduK
Ch;Ghu
Ch;GhuC
Change swizzle of parameters to dot <| Explicit
Cl;Blu
Cl;Glu
Cl;Glu!
Cl;Glu"
Cl;Glu[
Class
Clip plane attribute parameters must be non-literal constants
Clip planes cannot be addressed in %s
Clip planes must be non-literal constants with identity swizzles in %s
Clockwise Triangles
CloseHandle
Color
CombineInstructions
CombineInstructions can create dots <| Explicit
CombineInstsVectorized
Compact Registers - Compress <| Explicit
Compact Registers - Paint  <| Explicit
Compact Registers - Press Loop Ins <| Explicit
Compact Registers - Press Moves <| Explicit
CompactArrays
CompactOutputs
CompactRegisters
ComparisonFunc
CompileShader
Components of input declaration for register %d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Components of input declaration for register v%d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Components of output declaration for register %d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Components of output declaration for register o%d overlap with previous declaration for same register.  Opcode #%d (count is 1-based). 
Compute Shader input Thread Group ID already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread Group ID declaration must have a non-empty mask and allows only components x, y, and z in mask.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group Flattened already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group Flattened declaration must have an empty writemask.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID In Group declaration must have a non-empty mask and allows only components x, y, and z in mask.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID already declared.  Opcode #%d (count is 1-based). 
Compute Shader input Thread ID declaration must have a non-empty mask and allows only components x, y, and z in mask.  Opcode #%d (count is 1-based). 
Compute Shader must declare a thread group size (X,Y,Z).
ComputeShader
Conflicting register semantics: '%s' and '%s'
Constant buffers, functions, and techniques cannot be nested inside of constant buffers
Constant variable '%s' bound to register greater than 8191 (%d requested)
Constrain
ConstructGSWithSO
Consume
ConsumeStructuredBuffer
ConvertIgnores
Counter-Clockwise Triangles
Cp+Ap
Cp;Apu
Cp;Bpu
Cp;Fpu"
Cp;Gp
Cp;Gpu
Cp;GpuS
Ct;At
Ct;Bt
Ct;Ft
Ct;Ftu
Ct;Gtu
CullMode
Cycle Counter already declared.  Opcode #%d (count is 1-based). 
Cycle Counter declaration must have mask of .x or .xy.  Opcode #%d (count is 1-based). 
D$ ;G
D$ PPSV
D$ PS
D$ PWh
D$ Ph
D$ Pj
D$ u8
D$!PPP
D$#PPP
D$$9D$HuX
D$$;C
D$$PP
D$$PS
D$$Ph
D$'Ph
D$'Pj@
D$(#\$ 
D$(;D$4r
D$(PRh
D$(PSV
D$(PV
D$(PW
D$(PWS
D$(Ph
D$(Pj
D$,PPh
D$,PV
D$,PWR
D$,Ph
D$,Pj
D$03E
D$0;D$4s4
D$0P3
D$0PSW
D$0Ph
D$0Pj
D$0j 
D$0u	B
D$0w$r
D$43D$<
D$4;V
D$4PRh
D$4PV
D$4PW
D$4Ph
D$4Pj
D$4RW
D$4_^[
D$4tB
D$8;D$ 
D$8PR
D$8PRS
D$8PS
D$8Ph
D$8Pj
D$8SV
D$8r	
D$<PS
D$<PWR
D$<Ph
D$<Pj
D$<j<
D$<vF
D$@9D$<s
D$@9D$<v
D$@;D$Ds?
D$@DBUG
D$@PQ
D$@PS
D$@Pj
D$DPS
D$DPh
D$H;\$`
D$HPh
D$HSW
D$L;D$$
D$LPV
D$LPW
D$LPh
D$P;D$Lr
D$PPW
D$PPh
D$PSV
D$Pt7;
D$TPS
D$TSV
D$X	T$
D$XPV
D$XPW
D$XPj
D$\PS
D$\Ph
D$`9D$du
D$`HF
D$`PS
D$`Ph
D$dPS
D$dPV
D$dPW
D$h8G
D$hPh
D$hPj
D$lPQ
D$lPS
D$lWPP
D$lt8
D$pB;
D$pPh
D$pSDBG
D$t3D$\3
D$tPh
D$xAon9
D$xISGN
D$xOSGN
D$xPCSG
D$xPERF
D$xPh
D$xSDBG
D$xSDTL
D$xSMID
D$xSV
D$xXNAP
D$xXNAS
D$|OSGN
D$|PV
D$|Ph
D$|Pj
D0x%I64x
D1O1_1i1
D3D10_COMPILER
D3D10_SHADER_AVOID_FLOW_CONTROL
D3D10_SHADER_DEBUG
D3D10_SHADER_ENABLE_BACKWARDS_COMPATIBILITY
D3D10_SHADER_IEEE_STRICTNESS
D3D10_SHADER_NO_PRESHADER
D3D10_SHADER_PARTIAL_PRECISION
D3D10_SHADER_PREFER_FLOW_CONTROL
D3D10_SHADER_SKIP_OPTIMIZATION
D3D11 Assembler Error: Invalid Bytecode: %s
D3D11 Internal Compiler Error: Invalid Bytecode: %s
D3DAssemble
D3DCOLORtoUBYTE4
D3DCOMPILER_43.dll
D3DCOMPILER_DISASSEMBLY_FORCE_HEX_LITERALS
D3DCOMPILER_FORCE_PREFER_FLOW
D3DCompile
D3DCompile: Invalid flags specified
D3DCompiler_43.pdb
D3DCompressShaders
D3DCompressedData
D3DCreateBlob
D3DDecompressShaders
D3DDisassemble
D3DDisassemble10Effect
D3DEffectCompiler
D3DGetBlobPart
D3DGetDebugInfo
D3DGetInputAndOutputSignatureBlob
D3DGetInputSignatureBlob
D3DGetOutputSignatureBlob
D3DPreprocess
D3DReflect
D3DReturnFailure1
D3DStripShader
D3DX: (WARN) An allocation of zero bytes should return a unique non-null pointer to at
D3DX: (WARN) D3DX11 relies upon this behavior.
D3DX: (WARN) Overloaded ::new and ::delete operators do not conform to C++ standards:
D3DX: (WARN) least zero bytes. Deletion of a null pointer should quietly do nothing.
D3DX_VERSION
DEBUGMONITORTOKEN
DECRSAT
DECR_SAT
DEPTH
DEPTH must be a scalar
DEPTHBIAS
DEPTHGE
DEPTHLE
DESTALPHA
DESTBLEND
DESTBLENDALPHA
DESTCOLOR
DEST_ALPHA
DEST_COLOR
DIFFUSE
DIFFUSEMATERIALSOURCE
DIRECT3D
DIRECTIONAL
DISABLE
DISCRETE
DITHERENABLE
DMAPOFFSET
DOTPRODUCT3
DS_StencilRef
DX9 state '%s' is not supported in %s; convert to '%s' or use compatibility mode to ignore
DX9 state '%s' is not supported in %s; use compatibility mode to ignore
DX9-style '= sampler_state' syntax is deprecated in strict mode
DX9-style 'LHS = <RHS>' syntax is deprecated in strict mode
DX9-style 'compile' syntax is deprecated in strict mode
DX9-style assignment syntax is deprecated in technique10 pass blocks in favor of new function call syntax
DX9-style intrinsics are disabled when not in dx9 compatibility mode.
DXBCf
DebugSetMute
Declaration statements in HS Control Point phase must appear before other instructions.
Declaration statements in HS Fork phase must appear before other instructions.
Declaration statements in HS Join phase must appear before other instructions.
Declaration statements must appear before other instructions.
Declared Thread Group Count %d (X*Y*Z) is beyond the valid maximum of %d for Compute Shader version < 5_0.  Opcode #%d (count is 1-based). 
Declared Thread Group Count %d (X*Y*Z) is beyond the valid maximum of %d.  Opcode #%d (count is 1-based). 
Declared Thread Group X size %d outside valid range [%d..%d] for Compute Shader version < 5_0.  Opcode #%d (count is 1-based). 
Declared Thread Group X size %d outside valid range [%d..%d].  Opcode #%d (count is 1-based). 
Declared Thread Group Y size %d outside valid range [%d..%d] for Compute Shader version < 5_0.  Opcode #%d (count is 1-based). 
Declared Thread Group Y size %d outside valid range [%d..%d].  Opcode #%d (count is 1-based). 
Declared Thread Group Z size %d outside valid range [%d..%d].  Opcode #%d (count is 1-based). 
Declared output vertex count (%d) multiplied by the total number of declared scalar components of output data (%d) equals %d.  This value cannot be greater than %d.
DecrementCounter
DelayOutputs
DeleteCriticalSection
DeleteObject
Deprecated DX9 state '%s' is being ignored for %s
Deprecated DX9 state '%s' is being ignored for %s; use state '%s' instead
Depth
DepthBias
DepthBiasClamp
DepthClipEnable
DepthEnable
DepthFunc
DepthStencil
DepthStencilState
DepthStencilView
DepthWriteMask
Derivative being used before it was defined. If you used the assignment syntax, consider moving it earlier in the program.
Derivative is not defined in this branch of flow-control. If you used the assignment syntax, consider moving the assignment before any flow control statements.
Derivatives of indexed variables are not yet implemented.
Derivatives of known values are unimplemented.
Dest register relative index indexable-temp register component %d in x[%d][%d] uninitialized. Opcode #%d (count is 1-based)
Dest register relative index temp register component %d in r%d uninitialized. Opcode #%d (count is 1-based)
DestBlend
DestBlendAlpha
DetectRaceConditions
DeviceMemoryBarrier
DeviceMemoryBarrierWithGroupSync
Diffuse
Direct3DShaderValidatorCreate9
DisableThreadLibraryCalls
Domain Shader input control point count already declared. Aborting.  Opcode #%d (count is 1-based). 
Domain Shader input vDomain must be declared with at most a .xy mask when the domain is ISOLINE.
Domain Shader input vDomain must be declared with at most a .xy mask when the domain is QUAD.
Domain Shader input vDomain must be declared with at most a .xyz mask when the domain is TRI.
Domain Shader must declare a tessellator domain.
Domain Shader must declare an input control point count.
DomainShader
Don't flush denorm values to zero <| Explicit
Don't truncate double values to floats <| Explicit
Don't use marker values for clamped literal conversions <| Explicit
Double operations not supported unless globalFlags includes enableDoublePrecisionFloatOps.
Duplicate non-system value semantic definition: %s and %s
Duplicate system value semantic definition: %s and %s
Duplicated input semantics can't change type, size, or layout ('%s').
E _^[
E$#E(
E$9G4
E$;G4
E(u!3
E,+E0
E,9E(
ED)E@)EH)E<
ELEMENTINDEX
EMISSIVEMATERIALSOURCE
ENABLEADAPTIVETESSELLATION
EQUAL
ERROR: Semantic %s is not supported in fx_4_1.
Effect file is too large, try reducing the number of techniques or compiling without debug info
Emit output arrays <| Explicit
Emit return instructions <| Explicit
End of program reached with incomplete flow control structure.
Error creating error string
Error: Effects expression assembly in invalid format!
Error: Effects expression assembly not found!
Error: Error getting Effects expression constant table.
Error: Error getting Effects expression literal block.
Error: Error getting texture shader literal block.
Error: Texture shader assembly not found!
Error: constant buffer %s has both user-defined offset and compiler-assigned offsets
Error: unexpected end of buffer
Eval range add NaN flag if integer mask says it's possible <| Explicit
Eval range add inf flag if range not bound <| Explicit
EvaluateAttributeAtSample
EvaluateAttributeCentroid
EvaluateAttributeSnapped
Even Fractional
Expected a component mask which picks any one or 2 components for operand #%d of opcode #%d (counts are 1-based). 
Expected component count of 0 for operand #%d of opcode #%d (counts are 1-based). 
Expected component count of 1 (or 4 component with select-1 mode) for operand #%d of opcode #%d (counts are 1-based). 
Expected component count of 4 (or 1 component immediate32, or in certain cases NULL or scalar operand allowed) for operand #%d of opcode #%d (counts are 1-based). 
Expected contiguous component mask starting at x (.x, .xy, .xyz, or .xyzw) for operand #%d of opcode #%d (counts are 1-based). 
Expected double-compatible component mask (xy, zw, or xyzw) for operand #%d of opcode #%d (counts are 1-based). 
Expected double-compatible swizzle for operand #%d of opcode #%d (counts are 1-based). 
Expected nonzero component mask (or in certain cases also NULL or single component output operand allowed) for operand #%d of opcode #%d (counts are 1-based). 
Expected sample count > 0 but encountered %d for resource t%d.  Opcode #%d (count is 1-based). 
Expected sample count of 0 but encountered %d for resource t%d.  Opcode #%d (count is 1-based). 
Expected single component mask (or in certain cases also NULL or single component output operand allowed) for operand #%d of opcode #%d (counts are 1-based). 
F ;F(s
F ;G u
F$;B$ue
F$;G$u
F(;G(u
F(S9F$
F0;F8uH
F0A;N4r
F4;A4s
F4;B4s
F4;F<u@
F4;G4
F4;G4s
F4B;P
F89K<|
F8;AHu
F;t$ r
F;t$,r
F;w,r
F;w4r
F;wPr
F<3F4
F@;G@u
FALSE
FCIAddFile
FCICreate
FCIDestroy
FCIFlushCabinet
FD;GD_
FDICopy
FDICreate
FDIDestroy
FFACE
FH;GHs	_
FH_^[
FILLMODE
FILTER
FINFW3
FOG must be a scalar
FOGCOLOR
FOGDENSITY
FOGENABLE
FOGEND
FOGSTART
FOGTABLEMODE
FOGVERTEXMODE
FP;BP
FP;BPu)
FRC of add with integer can bypass add <| Explicit
FRONT
FT;BT
FT;BTu!
F\;C\
F`9A`u,
F`;B`
F`;B`u*
F`;FX
F`;FXv
F`;G`
FactorMads
Failed to extract driver shader code.
Failed to extract input signature.
Failed to extract output signature.
Failed to extract patch constant signature.
Failed to log error, redirecting to debug output:
Failed to parse shader using reference shader parser: 0x%x
Fall-throughs in switch statements are not allowed.
Fd3d10.dll
Fd;Bd
Fd;Bdu1
Fd;Bdu~
Fd;Gdu?
FdA;N`r
Fh;Bhuv
Fh;Gh
Fh;Ghu
FhSWPPj
FillMode
Filter
Fl;Alu
Fl;Bl
Fl;Blu"
Fl;Gl
Fl;Glu
FlSWPPj
Flag specified was exclusively a parse flag and not a compile flag
Flags parameter is invalid
Flags specified both compatibility and strict mode. These are mutually exclusive
Floating-point Value out of integer range for conversion: %f
Floating-point Value out of unsigned range for conversion: %f
For Compute Shader versions < 5_0, the element count for all Structured Thread Group Shared Memory declarations 
For Compute Shader versions < 5_0, with %d threads in a group, at most %d bytes per thread of Thread Group Shared Memory 
Format
Fp;Ap
Fp;Apu
Fp;ApuW
Fp;ApuY
Fp;Apuo
Fp;Apuq
Fp;Bpu
Fp;Bpun
Fp;Gp
Fp;GpuG
Fp@9B
FpAon9
FpXNAP
FpXNAS_[]
FreeLibrary
FrontCounterClockwise
FrontFaceStencilDepthFail
FrontFaceStencilFail
FrontFaceStencilFunc
FrontFaceStencilPass
Ft;At
Ft;AttI
Ft;AttQ
Ft;Bt
Ft;BtuG
Ft;Ct
Ft;Gt
Ft;Gtt
Ft;GtuO
FtA;Npr
FtPSV
F|:B|u9
G :B u
G ;B u
G ;F u0
G ;F uM
G SPV
G!:B!u
G":B"u
G#:B#
G$;B$u
G$;F$u(
G(;F(uP
G,:F,uE
G,;F,uH
G0;F0u=
G4;F4u5
G;{,r
G;{PsU
G;|$(r
G;|$4r
G;} r
G;~$r
G@PQ3
GAUSSIANQUAD
GDI32.dll
GDPQ3
GOURAUD
GP#BP%
GP;OTu
GREATER
GREATEREQUAL
GREATER_EQUAL
GREEN
GS Input
GS has no input primitive, so no input regisers may be declared.  Input v[][%d] was declared.
GS input primID already declared.  Opcode #%d (count is 1-based). 
GS input primitive already declared.  Opcode #%d (count is 1-based). 
GS input primitive can be a patch only if the GS version is gs_5_0 and greater.  Opcode #%d (count is 1-based). 
GS input primitive not declared. 
GS input primitive unrecognized.  Opcode #%d (count is 1-based). 
GS instance ID already declared.  Opcode #%d (count is 1-based). 
GS instance count already declared.  Opcode #%d (count is 1-based). 
GS instance count declaration cannot be greater than %d (%d specified).  Opcode #%d (count is 1-based). 
GS instance count must be at least 1
GS instance count must be at least 1 (%d specified).  Opcode #%d (count is 1-based). 
GS output primitive topology unrecognized.  Opcode #%d (count is 1-based). 
GS output topology already declared.  Opcode #%d (count is 1-based). 
GS output topology in stream m%d already declared.  Opcode #%d (count is 1-based). 
GS output topology not declared for stream m%d. 
GS output topology not declared. 
GS output vertex count declaration can't be more than %d vertices (%d specified).  Opcode #%d (count is 1-based). 
GT;FT
GTj:V
GX+FX_^]
G`9A`u$
G`;A`uP
G`;C`
G`;F`
G`;F`u
Gather
GatherAlpha
GatherBlue
GatherCmp
GatherCmpAlpha
GatherCmpBlue
GatherCmpGreen
GatherCmpRed
GatherGreen
GatherRed
Gd;Cd
Gd;Fdt
Gd;FduK
Gd;FduN
GenerateMips
GenerateMips is not supported in %s
GeometryShader
GetCurrentProcess
GetCurrentProcessId
GetCurrentThreadId
GetDimensions
GetFullPathNameA
GetLastError
GetModuleHandleA
GetProcAddress
GetProcessHeap
GetRenderTargetSampleCount
GetRenderTargetSamplePosition
GetSamplePosition
GetSystemInfo
GetSystemTimeAsFileTime
GetTickCount
GetVersion
Gl;Alu'
Gl;AluH
Global flags already declared once.  Opcode #%d (count is 1-based). 
Globals
Gp;Apu
Gp;Apu@
Gp;Bpu
Gp;Fp
Gp;Fpt
Gp;Fpu
Gp;FpuC
Gp;FpuV
Group shared data for %s must be an array of elements
Group shared data for %s must have a count of elements (%u) equal to the number of threads in the thread group (%u)
Group shared data for %s must have an element size (%u) of at most %u bytes when compiling for %u theads
GroupMemoryBarrier
GroupMemoryBarrierWithGroupSync
GroupStores
Gt;Ct
Gt;Ftu
Gt;Ftu:j
Gt;Ftu;
Gt;FtuF
Gx;Axu
Gx;Cx
Gx;Fxu
Gx_^[
G|:A|t
G|:C|
G|:F|t%
H ;J u^
H,B;Q
H0L0P0
H0`0x0
H9QHu	
H<L<P<
HLSL_VERSION
HPQhp
HeapAlloc
HeapCreate
HeapDestroy
HeapFree
Hoist predicated code into outermost predicate <| Explicit
Ht)Ht
Ht3Ht!H
Ht9Ht
Ht?Ht)Ht
Ht@Ht
Ht@Ht HuZ
HtLh8
HtQHuE3
HtaHt
HthHuU3
HtkHt
HtvHt'Ht
Hull Shader Fork Phase Instance Count already declared in this phase. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader Fork Phase Instance Count must be [%d..%d].  %d specified.  Opcode #%d (count is 1-based). 
Hull Shader Fork Phase reads component(s) of output control point [%d] which were not output by the Control Point Phase.
Hull Shader Join Phase Instance Count already declared in this phase. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader Join Phase Instance Count must be [%d..%d].  %d specified.  Opcode #%d (count is 1-based). 
Hull Shader Join Phase reads component(s) of output control point [%d] which were not output by the Control Point Phase.
Hull Shader MaxTessFactor must be [%f..%f].  %f specified.  Opcode #%d (count is 1-based). 
Hull Shader Patch Constant Separation
Hull Shader codegen
Hull Shader declared with IsoLine Domain must specify output primitive point or line. triangle_cw or triangle_ccw output are not compatible with the IsoLine Domain.
Hull Shader declared with Quad Domain must specify output primitive point, triangle_cw or triangle_ccw. line output is not compatible with the Quad domain.
Hull Shader declared with Tri Domain must specify output primitive point, triangle_cw or triangle_ccw. line output is not compatible with the Tri domain.
Hull Shader declsphase must declare a tessellator domain.
Hull Shader declsphase must declare a tessellator output primitive.
Hull Shader declsphase must declare a tessellator partitioning.
Hull Shader declsphase must declare an input control point count.
Hull Shader declsphase must declare an output control point count.
Hull Shader fork phase instance ID already declared.  Opcode #%d (count is 1-based). 
Hull Shader input control point count already declared. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader join phase instance ID already declared.  Opcode #%d (count is 1-based). 
Hull Shader must start with HSDecls phase.
Hull Shader output control point ID already declared.  Opcode #%d (count is 1-based). 
Hull Shader output control point count already declared. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader output max tessfactor already declared. Aborting.  Opcode #%d (count is 1-based). 
Hull Shader pass-through analysis
HullShader
Hx;Nxu
Hx;Oxu
I3t$(3
ID3D10Effect::ParseSODecl - Invalid output slot
ID3D10Effect::ParseSODecl - Non-digit '%c' in output slot
ID3D10Effect::ParseSODecl - invalid mask declaration '%s'
ID3DXEffectCompiler: Arrays must be either numeric, structure, string or shader
ID3DXEffectCompiler: Assignment cannot be a structure
ID3DXEffectCompiler: Can't set shader'
ID3DXEffectCompiler: Compilation failed
ID3DXEffectCompiler: DMAPOFFSET sampler state can only be used with D3DDMAPSAMPLER (i.e. sampler index 256)
ID3DXEffectCompiler: Dword expressions for state '%s' must evaluate to NULL
ID3DXEffectCompiler: Error in type checking
ID3DXEffectCompiler: Error initializing annotation type
ID3DXEffectCompiler: Error initializing assignment type
ID3DXEffectCompiler: Error initializing variable type
ID3DXEffectCompiler: FVFs must not evaluate to NULL
ID3DXEffectCompiler: Geometry shader can only be set in fx_4_0 or higher.'
ID3DXEffectCompiler: Index is required for state '%s'
ID3DXEffectCompiler: Initializer list elements cannot be complex expressions or variables
ID3DXEffectCompiler: Initializers must be numeric scalars
ID3DXEffectCompiler: Internal Error: Unexpected state.
ID3DXEffectCompiler: Internal error initializing assignment - missing type case
ID3DXEffectCompiler: Invalid integer expression assignment
ID3DXEffectCompiler: Invalid sampler index %d
ID3DXEffectCompiler: Max index for effect state '%s' is %d
ID3DXEffectCompiler: Only numeric types and strings are allowed as annotations
ID3DXEffectCompiler: Only numeric types are allowed inside structures
ID3DXEffectCompiler: Only pass allowed within a technique
ID3DXEffectCompiler: State '%s' accepts only dwords and ids
ID3DXEffectCompiler: State '%s' cannot be assigned an array or structure
ID3DXEffectCompiler: State '%s' does not accept '%s' as a value
ID3DXEffectCompiler: State '%s' is not indexed
ID3DXEffectCompiler: State '%s' must be assigned a 3-vector or a 4-vector or a uint scalar
ID3DXEffectCompiler: State '%s' must be assigned a numeric scalar or a 4-float vector
ID3DXEffectCompiler: State '%s' must be assigned a numeric value
ID3DXEffectCompiler: State '%s' must be assigned a scalar
ID3DXEffectCompiler: State '%s' was assigned an incompatible type
ID3DXEffectCompiler: State '%s' was assigned an unsupported value
ID3DXEffectCompiler: State '%s' was not assigned a sampler type
ID3DXEffectCompiler: State '%s' was not assigned a stateblock type
ID3DXEffectCompiler: State '%s' was not assigned a texture type
ID3DXEffectCompiler: There was a problem getting annotations
ID3DXEffectCompiler: There was a problem getting variable type
ID3DXEffectCompiler: There was a problem in the parse tree
ID3DXEffectCompiler: There was an error initializing parameter annotation handles
ID3DXEffectCompiler: There was an error initializing parameter handles
ID3DXEffectCompiler: There was an error initializing pass annotation handles
ID3DXEffectCompiler: There was an error initializing technique annotation handles
ID3DXEffectCompiler: There was an error initializing the compiler
ID3DXEffectCompiler: There were no techniques
ID3DXEffectCompiler: This sampler is used with a DX10-style texture intrinsic. This is not implemented in this version of the compiler.
ID3DXEffectCompiler: Unexpected component type
ID3DXEffectCompiler: Unexpected error
ID3DXEffectCompiler: Unexpected node encountered when trying to determine type
ID3DXEffectCompiler: Unexpected template type
ID3DXEffectCompiler: Unexpected value type of state '%s' (internal error)
ID3DXEffectCompiler: Unrecognized state '%s'
ID3DXEffectCompiler: Unsupported sampler or stateblock expression (static usage not supported).
ID3DXEffectCompiler::CompileEffect: Could not compile expression containing shader array
ID3DXEffectCompiler::CompileEffect: Only 1-d shader arrays allowed
ID3DXEffectCompiler::CompileEffect: Shader arrays index %d out of bounds [0, %d]
ID3DXEffectCompiler::CompileEffect: Shader arrays index was not float or int
ID3DXEffectCompiler::CompileEffect: Shader arrays must be a previously defined parameter
ID3DXEffectCompiler::CompileEffect: There was an error compiling HLL shader parameter
ID3DXEffectCompiler::CompileEffect: There was an error compiling expression
ID3DXEffectCompiler::CompileEffect: Unrecognized value type
IEEE-safe mode clamps float literals to 32-bit values, %g is losing precision (this warning will only be shown once per compile)
IGE a,a -> true <| MR.GenSimplifyInstructionsOpt1_NoExcl
IJ,GH-
ILT a,a -> false <| MR.GenSimplifyInstructionsOpt1_NoExcl
INCRSAT
INCR_SAT
INDEXEDVERTEXBLENDENABLE
INSTID
INVBLENDFACTOR
INVDESTALPHA
INVDESTCOLOR
INVERT
INVSRCALPHA
INVSRCCOLOR
INV_BLEND_FACTOR
INV_DEST_ALPHA
INV_DEST_COLOR
INV_SRC1_ALPHA
INV_SRC1_COLOR
INV_SRC_ALPHA
INV_SRC_COLOR
ISOLINE
Identifier invalid or not found (were you attempting a forward reference?)
Il/$>e
Illegal character in shader file
Illegal initializer
Illegal initializer for a numeric variable
Immediate constant buffer already declared, repeated declaration on opcode #%d (count is 1-based). 
Immediate constant buffer size must be a multiple (not incl. 0) of 32bit*4-tuples in size, but no larger than %d 32bit*4-tuples (%d bytes declared).  Opcode #%d (count is 1-based). 
Inconsistent semantic definition: %s and %s
Incorrect number of operands for opcode #%d (count is 1-based).  Expecting %d, encountered %d.
Incorrect number of parameters for BindInterfaces
Incorrect number of rows or columns
IncrementCounter
IncrementCounter/DecrementCounter are only valid on RWStructuredBuffer objects
Index Dimension %d out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address indexable temp is out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address indexable temp's dimension %d index is out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address temp is out of range (%d specified, max allowed based on temp declaration is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index Dimension %d's relative address temp is out of range (%d specified, max allowed is %d) for operand #%d of opcode #%d (counts are 1-based). Aborting.
Index is required for state '%s'
Index ranges declared on Patch Constant Data cannot cross over related blocks of hardware TessFactors. An index range is declared from register [%d] to [%d], which crosses over a block of TessFactors that starts with %s in register [%d] and ends in %s in register [%d].
Indexable temp register index, [%d], too high.  Opcode #%d (count is 1-based). Aborting.
Indexable temp x%d already declared.  Opcode #%d (count is 1-based). 
Indexed expressions are illegal as attribute parameters
Indexing of t# resources with current instruction requires opcode to specify resource dimension and return type. Operand #%d of opcode #%d (counts are 1-based). Aborting.
InitializeCriticalSection
Initializer used on a global 'const' variable. This requires setting an external constant. If a literal is desired, use 'static const' instead.
Input
Input control point count must be [%d..%d].  %d specified.  Opcode #%d (count is 1-based). 
Input control point count must be [0..%d].  %d specified.  Opcode #%d (count is 1-based). 
Input domain point already declared.  Opcode #%d (count is 1-based). 
Input domain point declaration can't have an empty mask.  Opcode #%d (count is 1-based). 
Input index range declaration out of range.  Opcode #%d (count is 1-based). 
Input index range defined from %d to %d includes input register %s[%d] that was not declared. 
Input primitive ID already declared in this HS phase.  Opcode #%d (count is 1-based). 
Input primitive ID already declared.  Opcode #%d (count is 1-based). 
Input signature does not specify component %d of register %d which is declared in the shader code. 
Input signature name mismatch with declaration in shader code for component %d in register %d. 
Input signature parameter #%d (1-based) specifies out of range register %d. 
Input signature parameter #%d (1-based) specifies register %d (or components in the register) that have already been defined. 
InputPatch
Inputs
InsideScale
Instance ID
Instructions calculating derivatives across pixels, and using temp storage or indexed values for input coordinates, are not permitted within flow control that has a branch condition that could vary across pixels. Opcode %d (count is 1-based).
Integer
Integer Power of 2
Integer addition negative identities <| MR.GenSimplifyInstructionsOpt1_NoExcl
Integer divide by zero
Interface
Interface metadata expects interface %d to be declared, but it was not.
Interface metadata expects interface %d to be of size %d, but it was declared as size %d.
Interface metadata instance %d refers to undeclared constant buffer %d.
Interface metadata instance %d refers to undeclared constant buffer offset [%d,%d].
Interface metadata instance %d refers to undeclared sampler %d.
Interface metadata instance %d refers to undeclared texture %d.
Interface-reachable members containing UAVs or group shared variables are not yet implemented
InterlockedAdd
InterlockedAnd
InterlockedCompareExchange
InterlockedCompareStore
InterlockedExchange
InterlockedMax
InterlockedMin
InterlockedOr
InterlockedXor
Internal Error - there was a problem getting a type size
Internal error in compiler
Internal error: invalid read of more specific predicate
Internal error: unpredicated endif input
Internal error: unread predicate
Internal error: unrecognized SB API Call
Internal error: unrecognized assignment type
Interpolation mode cannot vary for different components of a single input register (v%d).  Opcode #%d (count is 1-based). 
Interpolation mode for PS SGV must be constant (register v%d).  Opcode #%d (count is 1-based). 
Interpolation mode for PS clip or cull distance must be linear or linear centroid, or in 4.1, linear_sample  (register v%d).  Opcode #%d (count is 1-based). 
Interpolation mode for PS input position must be linear_noperspective or linear_noperspective_centroid (shader model 4.1+ allows linear_noperspective_sample as well). 
Interpolation mode for PS input position must be linear_noperspective_centroid or linear_noperspective_sample when outputting oDepthGE or oDepthLE and not running at sample frequency (which is forced by inputting SV_SampleIndex or declaring an input linear_sample or linear_noperspective_sample). 
Interpolation mode for PS renderTargetArrayIndex or viewportArrayIndex must be constant (register v%d).  Opcode #%d (count is 1-based). 
Interpolation mode on input v# register used with eval_* instruction must be linear, linear_centroid, linear_noperspective, linear_noperspective_centroid, linear_sample or linear_noperspective_sample. Opcode #%d (count is 1-based). 
Invalid %s input semantic '%s'.
Invalid %s semantics - POSITIONT0
Invalid StreamOut decl
Invalid StreamOut decl: %s
Invalid Tessellator Domain specified. Must be isoline, tri or quad. Aborting. Opcode #%d (count is 1-based). 
Invalid Tessellator Output Primitive specified. Must be point, line, triangleCW or triangleCCW. Aborting. Opcode #%d (count is 1-based). 
Invalid Tessellator Partitioning specified. Must be integer, pow2, fractional_odd or fractional_even. Aborting. Opcode #%d (count is 1-based). 
Invalid assignment index (%u). Maximum allowed is %u.
Invalid component mask in indexable temp decl: 0x%x.  Opcode #%d (count is 1-based). Aborting. 
Invalid component selection mode for vCycleCounter.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid component selection mode for vInputThreadGroupID.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid component selection mode for vInputThreadID.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid component selection mode for vInputThreadIDInGroup.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid index dimension %d for relative address temp register within dimension 1 of operand.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid index dimension for relative address indexable temp register within dimension %d of operand.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid indexing mode for first dimension.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid input register '%s' specified
Invalid instruction for Hull Shader Control Point phase.
Invalid instruction for Hull Shader Decls phase.
Invalid instruction for Hull Shader Fork phase.
Invalid instruction for Hull Shader Join phase.
Invalid instruction for Hull Shader postamble section (subroutines and function bodies).
Invalid interface metadata: duplicated type in interface %d's type list.
Invalid interface metadata: instance buffer overrun.
Invalid interface metadata: instance name buffer overrun.
Invalid interface metadata: instance type buffer overrun.
Invalid interface metadata: interface %u unimplemented.
Invalid interface metadata: interface buffer overrun.
Invalid interface metadata: interface count mismatch.
Invalid interface metadata: no types defined.
Invalid interface metadata: too many instances.
Invalid interface metadata: too many interface slots.
Invalid interface metadata: too many types.
Invalid interface metadata: type %d violates type stride limits.
Invalid interface metadata: type buffer overrun.
Invalid interface metadata: type name buffer overrun.
Invalid interface metadata: unterminated instance name.
Invalid interface metadata: unterminated type name.
Invalid interface metadata: variable %d violates limits on member offsets.
Invalid interpolation mode for register v%d.  Opcode #%d (count is 1-based). 
Invalid name or shader for SGV dcl.  Opcode #%d (count is 1-based). 
Invalid name or shader for SIV dcl.  Opcode #%d (count is 1-based). 
Invalid operand type for operand #%d of opcode #%d (counts are 1-based). 
Invalid output register '%s' specified
Invalid parameter passed to C runtime function.
Invalid pixel shader input register '%s' specified
Invalid relative indexing register type for dimension %d.  Operand #%d of opcode #%d (counts are 1-based). Aborting.
Invalid representation for index dimension %d.  Opcode #%d, operand #%d (counts are 1-based). 
Invalid resource dimension on resource t%d.  Opcode #%d (count is 1-based). 
Invalid resource dimension on resource u%d.  Opcode #%d (count is 1-based). 
Invalid resource return type on component %d of resource t%d.  Opcode #%d (count is 1-based). 
Invalid resource return type on component %d of resource u%d.  Opcode #%d (count is 1-based). 
Invalid sampler mode on sampler s%d.  Opcode #%d (count is 1-based). 
Invalid shader type used with %s
Invalid stream index s%d.  Index must be between 0 and %d Opcode #%d (count is 1-based). 
Ip+Jp3
Isoline
It	It
It is invalid to use eval_* on position input due to hardware limitation.  Opcode #%d (count is 1-based). 
It9It6It
IxHOu
IxSRP
J0T0g0q0|0
JJt	+
Join phase declared the same component(s) of output patch constant register o[#d] as already declared for output by a previous fork phase or other joint phase.
Join phase declaring component(s) of input patch constant register vpc[%d] which have not been output by previous fork phase(s) or other join phase(s).
Jp9Hpt
Jp;K v
Jt-Jt
Jt6Jt
Jt7Jt
K49K<
K<9K4
KERNEL32.dll
KLMNAFWQY
KX+JX
K\9{Ps
Known literals reduced to mov <| Explicit
L REL A*(L2<0) (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*(L2<0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*(L2>0) (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*(L2>0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*L2 where L2 < 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*L2 where L2 > 0 divides L as an INT <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A*L2 where L2 divides L as a UINT <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A+A (double) <| MR.GenSimplifyInstructionsOpt1_NoExcl
L REL A+A <| MR.GenSimplifyInstructionsOpt1_NoExcl
L$ 8H
L$ ;D
L$ ;H
L$ Pj
L$ QP
L$ QV
L$ tDj
L$$#D$8
L$$#L$L
L$$9O
L$$;O
L$$QP
L$$QS
L$$QW
L$$_^[3
L$(;D$
L$(QP
L$(Qj
L$(Sj
L$(t8
L$,Ph
L$,Pj
L$,QP
L$,Qh
L$,Qj
L$09D$4u$;L$$u
L$09L$P
L$0;L$P
L$0QP
L$0Qh
L$4QP
L$4QV
L$4QVW
L$4QW
L$4Qj
L$4f=
L$8;Ax
L$8;L$@u
L$8;L$`
L$8BC
L$8QP
L$8QPV
L$8t6
L$8t8
L$;t^
L$<QP
L$@3L$83
L$@9M
L$@;M
L$@QW
L$@r	
L$D9M
L$DQP
L$HQP
L$L;L$
L$LQP
L$LQR
L$LQj
L$L^3
L$P;D$
L$PQP
L$PQW
L$PWSR
L$TQP
L$TQR
L$TQj
L$X3L$T3
L$X;L$(r
L$Xt&
L$\QP
L$`#D$t3
L$dQR
L$hWR
L$lQP
L$lQj
L$pQj
L$tQV
L$t_^[3
L$xQj
L4P4T4X4\4`4d4h4l4p4t4x4|4
LASTBETA_D3DCOLOR
LASTBETA_UBYTE4
LASTPIXEL
LERP(!A,B,C) -> LERP(A, C, B) <| MR.GenSimplifyInstructionsOpt1_NoExcl
LESSEQUAL
LESS_EQUAL
LIGHTAMBIENT
LIGHTATTENUATION0
LIGHTATTENUATION1
LIGHTATTENUATION2
LIGHTDIFFUSE
LIGHTDIRECTION
LIGHTENABLE
LIGHTFALLOFF
LIGHTING
LIGHTPHI
LIGHTPOSITION
LIGHTRANGE
LIGHTSPECULAR
LIGHTTHETA
LIGHTTYPE
LINEAR
LINEDEN
LINEDET
LOCALVIEWER
Legacy !A * (A + B) => !A * B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy !A + (A + B) => 1 + B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy (!A * A) => 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy (!A + A) => 1 + B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy (A || A) => A <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy -BOOL < BOOL => BOOL <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy A * !(A * B) => A * !B <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy C + (A * B) + (A * !B) => C + A <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy NOT (A || A) => NOT A <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy NOT GE => LT <| MR.GenSimplifyInstructionsOpt1_NoExcl
Legacy NOT LT => GE <| MR.GenSimplifyInstructionsOpt1_NoExcl
Length
Level9
LineStream
Literal float out of integer range for conversion: %f
Literal float out of unsigned range for conversion: %f
Literal in Log * Mul * Exp pattern <| Explicit
Load2
Load3
Load4
LoadLibraryA
Locals
M$#E #
M,9M(s,
M,;K 
MAGFILTER
MATERIAL
MATERIALAMBIENT
MATERIALDIFFUSE
MATERIALEMISSIVE
MATERIALPOWER
MATERIALSPECULAR
MAXANISOTROPY
MAXLOD
MAXMIPLEVEL
MAXTESSELLATIONLEVEL
MINFILTER
MINTESSELLATIONLEVEL
MIN_LINEAR_MAG_MIP_POINT
MIN_LINEAR_MAG_POINT_MIP_LINEAR
MIN_MAG_LINEAR_MIP_POINT
MIN_MAG_MIP_LINEAR
MIN_MAG_MIP_POINT
MIN_MAG_POINT_MIP_LINEAR
MIN_POINT_MAG_LINEAR_MIP_POINT
MIN_POINT_MAG_MIP_LINEAR
MIPFILTER
MIPLODBIAS
MIPMAPLODBIAS
MIRROR
MIRRORONCE
MIRROR_ONCE
MODULATE
MODULATE2X
MODULATE4X
MODULATEALPHA_ADDCOLOR
MODULATECOLOR_ADDALPHA
MODULATEINVALPHA_ADDCOLOR
MODULATEINVCOLOR_ADDALPHA
MOPR1
MOPR1'0%
MSAA Sample Index must be a literal
MSAA Sample Index must be in the range 0 to 127
MULTIPLYADD
MULTISAMPLEANTIALIAS
MULTISAMPLEMASK
MarkSideEffects
Masks (and if pixel shader, also interpolation mode) on all input registers in an index range must be identical. Input register %s[%d] does not match with others in the index range from %d to %d. 
Matrices cannot be specified in temp registers with the fragment linker
Max index for effect state '%s' is %d
MaxAnisotropy
MaxLOD
MaxVertexCount
Maximum %s control point count (%u) exceeded (%u).
Maximum semantic index (%d) exceeded: %d
MergeInstructions
Method and Parameters
Microsoft (R) D3D Shader Disassembler
Microsoft (R) D3DX9 Shader Assembler 9.29.952.3111
Microsoft (R) D3DX9 Shader Disassembler
Microsoft (R) HLSL Shader Compiler 9.29.952.3111
Microsoft Code Signing PCA
Microsoft Code Signing PCA0
Microsoft Corporation0
Microsoft Corporation1
Microsoft Corporation1!0
Microsoft Corporation1#0!
Microsoft Root Authority
Microsoft Root Authority0
Microsoft Time-Stamp Service0
Microsoft Timestamping PCA
Microsoft Timestamping PCA0
MinLOD
MipLODBias
Mismatch between shader declaration of double precision floats and accompanying Shader Feature Info blob (or lack thereof). Both the shader must declare double precision float use and a Shader Feature Info blob must specify the same thing as well, or neither should request it. 
Mismatch between shader declaration of raw and structured buffers for shader 4_x and accompanying Shader Feature Info blob (or lack thereof). Both the shader must declare raw and structured buffer use and a Shader Feature Info blob must specify the same thing as well, or neither should request it. 
Mulitply by 1 reduces to no-op move <| Explicit
MultiByteToWideChar
Multiple Hull Shader phases cannot call the same interface body. If this is an important feature, support could be considered in the future. Opcode #%d (count is 1-based)
Multiple Hull Shader phases cannot call the same subroutine. If this is an important feature, support could be considered in the future. Opcode #%d (count is 1-based)
Multiple fork phase programs cannot declare partially overlapping index ranges for output Patch Constant Data. One index range is from register [%d] to [%d], while the another is from [%d] to [%d].
Multiple fork phase programs declared the same component(s) of output patch constant register o[#d].
Multiple fork/join phase programs cannot declare partially overlapping index ranges for output Patch Constant Data. One index range is from register [%d] to [%d], while the another is from [%d] to [%d].
Multiply by -1 reduces to NEG operation <| Explicit
Multiply by 0 reduces to literal 0 <| Explicit
Multiply by 2, 4, or 8 <| Explicit
MultisampleEnable
N ;K8s
N+"\hE
N4;O4s
NEVER
NORMAL
NORMALDEGREE
NORMALIZENORMALS
NOT BEQ => BNE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BGE => BLT (safe) <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BGE => BLT <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BIEQ => BINE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BIGE => BILT <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BILT => BIGE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BINE => BIEQ <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BLT => BGE (safe) <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BLT => BGE <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BNE => BEQ <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BUGE => BULT <| MR.GenSimplifyInstructionsOpt1_Excl
NOT BULT => BUGE <| MR.GenSimplifyInstructionsOpt1_Excl
NOTEQUAL
NOT_EQUAL
NaN and infinity literals not allowed by shader model
Named register components cannot appear to the left (xyzw order) of components that are not named in a given register. TessFactors are an exception. Affected register is input %d. 
Named register components cannot appear to the left (xyzw order) of components that are not named in a given register. TessFactors are an exception. Affected register is output %d in stream m%d. 
Named register components cannot appear to the left (xyzw order) of components that are not named in a given register. TessFactors are an exception. Affected register is output %d. 
Needs to be replaced with a real rule
Negate modifier not allowed for operand #%d of opcode #%d (counts are 1-based). 
Negative value compared with zero <| Explicit
Negative values for cmp and clip can be rordered <| Explicit
No include handler specified, can't perform a #include. Use D3DX APIs or provide your own include handler.
Non system-generated input signature parameter (%s) cannot appear after a system generated value.
Normal
Not all elements of SV_Position were written
Np9Hps
Numeric variables ('%s') can't be shared; share the containing cbuffer instead
N|)Op
O#9OPv6
O1V2f2
O4;K4s
OSGNu
Objects not allowed in structures
Odd Fractional
Only 3_x and earlier targets are supported on this compiler.
Only 4_x targets supported on this compiler.
Only immediate32 indexing permitted for operand #%d of opcode #%d (counts are 1-based). Aborting.
Only numeric types and strings are allowed as annotations
Only numeric variables ('%s') can be added to a cbuffer
Only single-dimensional object arrays are allowed
Op9N4v
OpA9N,s
OpA9N0s
OptimizeEarlyTranslate
Output
Output control point count must be [0..%d].  %d specified.  Opcode #%d (count is 1-based). 
Output index range declaration out of range.  Opcode #%d (count is 1-based). 
Output index range defined from %d to %d includes output register %d that was not declared. 
Output signature does not specify component %d of register %d which is declared in the shader code. 
Output signature name mismatch with declaration in shader code for component %d in register %d. 
Output signature parameter #%d (1-based) specifies out of range register %d. 
Output signature parameter #%d (1-based) specifies register %d (or components in the register) that have already been defined. 
Output value '%s' is not completely initialized
Output variable 
OutputDebugStringA
OutputPatch
Outputs
Overlapping input index range decl encountered.  Opcode #%d (count is 1-based). 
Overlapping output index range decl encountered.  Opcode #%d (count is 1-based). 
P 9GH
P t.=
P tC=
P uGWQ
P!wmte=
P(_^[]
P0VWS
P0t.=
P0uMSW
P0w\t8=
P8_^[
P8h8^
PASSTHRU
PATCHEDGESTYLE
PATCHSEGMENTS
PHONG
PIXELSHADER
PIXELSHADERCONSTANT
PIXELSHADERCONSTANT1
PIXELSHADERCONSTANT2
PIXELSHADERCONSTANT3
PIXELSHADERCONSTANT4
PIXELSHADERCONSTANTB
PIXELSHADERCONSTANTF
PIXELSHADERCONSTANTI
POINT
POINTSCALEENABLE
POINTSCALE_A
POINTSCALE_B
POINTSCALE_C
POINTSIZE
POINTSIZE_MAX
POINTSIZE_MIN
POINTSPRITEENABLE
POSITION
POSITIONDEGREE
POSITIONT
PPt =
PPt-=
PPt.=
PPt4=
PPt5=
PPt7=
PPt<=
PPt>=
PPtC=
PPtI=
PPtT=
PPtY=
PPt]=
PQh C
PQhHC
PQhtD
PQt4=
PREMODULATE
PRIMID
PROJECTED
PROJECTIONTRANSFORM
PRw9t
PS input vCoverage already declared.  Opcode #%d (count is 1-based). 
PS ouputs must be declared in slots less than UAVs.  Output declared in slot %d while UAV declared in slot %d.  Opcode #%d (count is 1-based). 
PS output coverage mask already declared.  Opcode #%d (count is 1-based). 
PS output depth already declared.  Opcode #%d (count is 1-based). 
PS output depth already declared.  The previous declaration was of a different type.  Opcode #%d (count is 1-based). 
PSIZE
PSIZE must be a scalar
PSQh(P
PSQh(V
PSQhHR
PSize
PVWS3
PVh(^
PVh4^
PVhSTAT
PWSh`~
PWShh}
PWh@x
PYRAMIDALQUAD
P\_^[
P`tX=
Parameters
Partials
Patch Constant
Patch constant signature name mismatch with declaration in shader code for component %d in register %d. 
Patch constant signature parameter #%d (1-based) specifies out of range register %d. 
Patch constant signature parameter #%d (1-based) specifies register %d (or components in the register) that have already been defined. 
Patch constant signature signature does not specify component %d of register %d which is declared in the shader code. 
Patch semantics must live in the enclosed type, outer semantic ignored.
PawktP=
Pbw%t
Pct-=
PdtC=
PftU=
Pgt =
Pgt!=
Pgt-=
Pgw)tC=
PhCLI4
PhCLIT
PhCTAB
PhDBUG
PhFXLC
PhFXLC3
PhIFCES
PhISGN
PhOSGN
PhPRES
PhRDEF
Pht1=
Pixel Shader allows output semantics to be SV_Target, SV_Depth, SV_DepthGreaterEqual, SV_DepthLessEqual or SV_Coverage only.  Output signature parameter #%d (1-based) specifies semantic %s. 
PixelShader
Pj	VS
PjthSTAT
Point
PointStream
Position
PositionT
Possible %ss are:
Possible integer divide by zero
Precise mask not permitted for opcode #%d (counts are 1-based). 
Process2DQuadTessFactorsAvg
Process2DQuadTessFactorsMax
Process2DQuadTessFactorsMin
ProcessIsolineTessFactors
ProcessQuadTessFactorsAvg
ProcessQuadTessFactorsMax
ProcessQuadTessFactorsMin
ProcessTriTessFactorsAvg
ProcessTriTessFactorsMax
ProcessTriTessFactorsMin
PropagateFlags
PropagateMovs
PropagatePredicates
Psize
Pw*t>=
PwGt4=
PwQt>=
Q(_^[]
QPh8M
QQPVS
QRWPV
QSVW2
QSVW3
QSVWj
QSVWjl
QShTq
QUADEDGE
QUADINT
QUADRATIC
QUINTIC
QWhTq
Q`+qp
Qj hx
Qp9V|v
Qu+QR
Quadrilateral
QueryPerformanceCounter
QwHt7=
QwWtw=
R@Ph8J
R@PhPH
RANGEFOGENABLE
RD11u
RDEFt!
REPLACE
RESULTARG
REVSUBTRACT
REV_SUBTRACT
RTINDEX
RWBuffer
RWByteAddressBuffer
RWStructuredBuffer
RWStructuredBuffer(Decrementable)
RWStructuredBuffer(Incrementable)
RWStructuredBuffers may increment or decrement their counters, but not both.
RWTexture1D
RWTexture1DArray
RWTexture2D
RWTexture2DArray
RWTexture3D
RX+PXu
Rasterizer
RasterizerState
Raw or Structured buffers can't be declared in shader model 4_* VS/GS/PS without enabling them via a global flags declaration.. 
RawDensityFactor
RawDetailFactor
RawEdgeFactors
Reading from texture buffers is unsupported on %s
Reading uninitialized value
Redefinition of derivative, derivatives may only be assigned once.
Redefinition of pass "%s"
Redmond1
ReduceLiterals
Reference of register oDepth does mot match declaration (dcl_oDepthGE or dcl_oDepthLE).  Opcode #%d, operand #%d (counts are 1-based). 
Reference of register oDepthGE does mot match declaration (dcl_oDepth or dcl_oDepthLE).  Opcode #%d, operand #%d (counts are 1-based). 
Reference of register oDepthLE does mot match declaration (dcl_oDepth or dcl_oDepthGE).  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared UAV u%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of indexable temp x%d[] within relative index of an operand.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of indexable temp x%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vCycleCounter.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vInputThreadGroupID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vInputThreadID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared components of input vInputThreadIDInGroup.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared constant buffer cb%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared immediate constant buffer.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared indexable temp x%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base v%s[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base vcp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base vocp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of index range input starting at base vpc[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input v%s[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input vcp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input vocp[][%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input or undeclared components of input vpc[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared input vInputThreadIDInGroupFlattened.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared output or undeclared components of index range output starting at base o[%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared output or undeclared components of output o%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oDepth.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oDepthGE.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oDepthLE.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register oMask.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vCoverage.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vForkPhaseInstanceID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vGSInstanceID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vJoinPhaseInstanceID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vOutputControlPointID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared register vPrimitiveID.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared resource t%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared sampler s%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared stream m%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared temp r%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference of undeclared thread group shared memory g%d[].  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on cb%d[size==%d] (if size is listed as 0, it means default size is used, which is %d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on g%d[size==%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on immediate constant buffer [size==%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, [%d], on x%d[size==%d].  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of bounds, cb%d.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range of indexable temp x%d[] within relative index of an operand.  Index [%d] specified, but based on the indexable temp declaration, the max index allowed is [%d].  Operand #%d of opcode #%d (counts are 1-based). Aborting.
Reference out of range on vertex axis for input v[%d][].  Input control point has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range on vertex axis for input v[%d][].  Input primitive type has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range on vertex axis for input vcp[%d][].  Input control point has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
Reference out of range on vertex axis for input vocp[%d][].  Output control points has %d vertices.  Opcode #%d, operand #%d (counts are 1-based). 
Registers in an input index range cannot have system names associated with them (TessFactors are an exception).  Input register %s[%d] has a name and is in an index range from %d to %d. 
Registers in an output index range cannot have system names associated with them (TessFactors are an exception).  Output register o%d has a name and is in an index range from o%d to o%d. 
Related TessFactor names (such as edges) must be declared in the same component of consecutive Patch Constant registers, in the correct order. %s expected in %s[%d].%s since %s is in %s[%d].%s.
Related TessFactor names (such as edges) must be declared in the same component of consecutive Patch Constant registers, in the correct order. %s is in %s[%d].%s, which would put %s past the end of the available registers, since it is %d name after %s in the order.
Relative indexing input register from base %s[%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base %s[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vcp[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vcp[][%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vocp[][%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vpc[%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing input register from base vpc[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing not allowed for cb%d since it was not declared for dynamic indexing..  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing output register from base o[%d] not allowed when register %d has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Relative indexing output register from base o[0] not allowed when register 0 has not been declared in an index range.  Opcode #%d, operand #%d (counts are 1-based). 
Remove args for CBuffers that are never read <| Explicit
Remove temp array stores that are immediately overwritten <| Explicit
RemoveDeadCode
RemoveDuplicateInstructions
RenderTargetView
RenderTargetWriteMask
ReorderBinary
ReorderBinaryI
ReorderInstructions
Required TessFactor name %s for %s domain not found declared anywhere in Patch Constant data. 
RequiredTranslate
Resource being indexed is uninitialized.
Resource bind info for
Resource dimension and return type extended opcodes not expected on opcode #%d (counts are 1-based). 
Resource t%d already declared.  Opcode #%d (count is 1-based). 
Resources being indexed cannot come from conditional expressions, they must come from literal expressions.
RestartStrip
RoundedDensityFactor
RoundedDetailFactorr
RoundedEdgeFactors
RoundedInsideFactor
RoundedInsideFactors
RtlUnwind
Rw*t3=
Rw4t&=
Rw>t-=
RxHN;
RxNOu
S,;S$s
S0;~<|
S8;~4
S9H0v!
SAMPLE
SAMPLER
SCISSORTESTENABLE
SDBGt
SELECTARG1
SELECTARG2
SELECTMASK
SEPARATEALPHABLENDENABLE
SGV must have scalar mask in declaration.  Opcode #%d (count is 1-based). 
SHADEMODE
SHEXs
SHwFt*=
SLOPESCALEDEPTHBIAS
SMIDt)
SOLID
SPECULAR
SPECULARENABLE
SPECULARMATERIALSOURCE
SPHEREMAP
SQVPW
SRC1_ALPHA
SRC1_COLOR
SRCALPHA
SRCALPHASAT
SRCBLEND
SRCBLENDALPHA
SRCCOLOR
SRC_ALPHA
SRC_ALPHA_SAT
SRC_COLOR
SRGBTEXTURE
SRGBWRITEENABLE
SRV reference t%d must have a structure byte stride that is a multiple of 4 that is greater than 0 but no greater than %d when declared as structured (%d specified).  Opcode #%d (count is 1-based). 
SRVWP
STATEBLOCK
STENCILENABLE
STENCILFAIL
STENCILFUNC
STENCILMASK
STENCILPASS
STENCILREF
STENCILWRITEMASK
STENCILZFAIL
SUBTRACT
SVWh 
SVWhH0
SVWj$
SVWj(
SVWjP
SVWj`
SV_COVERAGE
SV_ClipDistance
SV_ClipDistance semantics cannot be used when using the clipplanes attribute
SV_Color
SV_Coverage
SV_Coverage input not supported on %s
SV_Coverage not supported on %s
SV_CullDistance
SV_DEPTH
SV_DEPTHGREATEREQUAL
SV_DEPTHLESSEQUAL
SV_Depth
SV_DepthGreaterEqual
SV_DepthLessEqual
SV_DispatchThreadID
SV_DomainLocation
SV_GSInstanceID
SV_GSInstanceID is an invalid input semantic for geometry shader primitives, it must be its own parameter.
SV_GroupID
SV_GroupIndex
SV_GroupThreadID
SV_InsideTessFactor
SV_InstanceID
SV_InstanceId
SV_IsFrontFace
SV_OutputControlPointID
SV_Position
SV_Position cannot be constinterp
SV_PrimitiveID
SV_PrimitiveId
SV_PrimitiveId is an invalid input semantic for geometry shader primitives, it must be its own parameter.
SV_RenderTargetArrayIndex
SV_SampleIndex
SV_SampleIndex isn't supported on %s
SV_TARGET
SV_Target
SV_Target outputs must be contiguous from SV_Target0 to SV_TargetN
SV_Target0
SV_TessFactor
SV_VertexID
SV_ViewportArrayIndex
SVhFX10
S`VW;
Sample
Sample Bias value is limited to the range [-16.00, 15.99], using %f instead of %f
Sample interpolation usage unsupported on %s
SampleBias
SampleCmp
SampleCmpLevelZero
SampleGrad
SampleLevel
Sampler
Sampler parameter must come from a literal expression.
Sampler s%d already declared.  Opcode #%d (count is 1-based). 
Sampler variable '%s' does not specify the sampler type.  Explicit sampler types required for asm fragments.
Sampler: s%u
SamplerComparisonState
SamplerState
Samplers: s%u-s%u
Saturate modifier not permitted for opcode #%d (counts are 1-based). 
ScissorEnable
Semantic length is limited to %d characters
SeparatePhases
Sequence of compares <| Explicit
SetBlendState
SetComputeShader
SetDepthStencilState
SetDomainShader
SetGeometryShader
SetHullShader
SetPixelShader
SetRasterizerState
SetRenderTargets
SetUnhandledExceptionFilter
SetVertexShader
Shader Model 5+ requires that subroutine definitions appear after any call(s) to the subroutine. This also implies recursion is not allowed, although that may or may not be the case here.  Aborting. Opcode #%d (count 1-based).
Shader exceeds maximum supported number of interface call sites (%d).  Opcode #%d (count 1-based).
Shader model %s doesn't allow reading from position semantics.
Shader model %s is not allowed in D3D10 techniques
Shader uses texture addressing operations in a dependency chain that is too complex for the target shader model (%s) to handle.
Shader@0x%p
ShaderFeatureInfo blob must not specify 4x raw and structured buffers for Compute Shaders, or for any shader 5_0+.
Shaders compiled for %s can only have a single group shared data item
ShuffleCompute
Simplify cmp sequences on possibly NaN/Inf values <| Explicit
Simplify conditions on instructions which only care about sign on possibly NaN/Inf values <| Explicit
Simplify fractional add on possibly NaN/Inf values <| Explicit
Simplify pow on possibly NaN/Inf values <| Explicit
SimplifyAddresses
SimplifyAddressesIPA
SimplifyFlowStores
SimplifyInstructions
SimplifyInstructionsComplex
SimplifyInstructionsLegacy
SimplifyLoads
SimplifyPredicates
SimplifyRangeExpressions
Sleep
SlopeScaledDepthBias
Specular
Split
SplitRegisters
SquishInstructions
SrcBlend
SrcBlendAlpha
St3Ht$hx8
Stack
Stage linkage warning: Semantic %s has been inconsistently defined in the two stages.
Stage linkage warning: Semantic %s has been placed in different registers in the two stages.
Stage linkage warning: Semantic %s is read from, but it's never written to.
State '%s' belongs in %s blocks, not %s blocks
State '%s' is not indexed
State Block
StateBlock
States
StencilEnable
StencilReadMask
StencilWriteMask
Stmts
Store
Store2
Store3
Store4
Stream index (%u) must between 0 and %u.
Stream output geometry shaders can only be created from valid 4.0+ vertex and geometry shaders
Stream s%d already declared.  Opcode #%d (count is 1-based). 
StreamOut declarations must be a literal string
StreamOut rasterization stream index must be a literal
String
Struct
StructuredBuffer
Sub index list
Sum of temp registers and indexable temp registers exceeds limit of %d..  Opcode #%d (count is 1-based). 
Sum of temp registers and indexable temp registers exceeds limit of %d..  Opcode #%d (count is 1-based). Aborting. 
Sum of temp registers and indexable temp registers exceeds limit of %u
Swizzle
S|G;~
T$ RP
T$$RQ
T$$WV
T$$t6
T$(3T$,3
T$(9V
T$(;V
T$(VS
T$,	D$0
T$,	D$h
T$,A;
T$,PhH*
T$,RQ
T$,t0
T$09t$
T$0t6
T$0u!
T$43T$83
T$4G;
T$4RQ
T$4Rj
T$4ue
T$89T$D
T$89T$Ds
T$8;B`
T$8QR
T$8RQ
T$<;T$Du
T$@PR
T$@PRV
T$@RQ
T$Cs\
T$D9T$8
T$D9\$Tv(
T$D;T$8
T$DRQ
T$H;|$`
T$L9|$0
T$PRQ
T$T9T$Hw
T$XRP
T$\;T$
T$`#T$(;
T$`8T$W
T$h!T$\
T$t!T$\#
T$tu"
T$xRj
TANGENT
TARGET
TESSFACTOR
TEXCOORD
TEXCOORDINDEX
TEXCOORDSIZE1_0
TEXCOORDSIZE1_1
TEXCOORDSIZE1_2
TEXCOORDSIZE1_3
TEXCOORDSIZE1_4
TEXCOORDSIZE1_5
TEXCOORDSIZE1_6
TEXCOORDSIZE1_7
TEXCOORDSIZE2_0
TEXCOORDSIZE2_1
TEXCOORDSIZE2_2
TEXCOORDSIZE2_3
TEXCOORDSIZE2_4
TEXCOORDSIZE2_5
TEXCOORDSIZE2_6
TEXCOORDSIZE2_7
TEXCOORDSIZE3_0
TEXCOORDSIZE3_1
TEXCOORDSIZE3_2
TEXCOORDSIZE3_3
TEXCOORDSIZE3_4
TEXCOORDSIZE3_5
TEXCOORDSIZE3_6
TEXCOORDSIZE3_7
TEXCOORDSIZE4_0
TEXCOORDSIZE4_1
TEXCOORDSIZE4_2
TEXCOORDSIZE4_3
TEXCOORDSIZE4_4
TEXCOORDSIZE4_5
TEXCOORDSIZE4_6
TEXCOORDSIZE4_7
TEXTURE
TEXTURE assignments inside of samplers cannot be expression indexed
TEXTURE assignments inside of samplers cannot be variable indexed
TEXTUREFACTOR
TEXTURETRANSFORM
TEXTURETRANSFORMFLAGS
TEXT_1BIT
TFACTOR
TRIEDGE
TRIINT
TSVW3
TWEENFACTOR
TWEENING
TWOSIDEDSTENCILMODE
Tangent
Temp decl already encountered.  Repeated declaration on opcode #%d (count is 1-based). 
TerminateProcess
Tess factor processing functions only available on shader model 4+
TessFactors must each be declared with a single component.  Opcode #%d (count is 1-based). 
Tessellation factor scale will be clamped to the range [0, 1]
Tessellator Output Primitive already declared. Aborting. Opcode #%d (count is 1-based). 
Tessellator Partitioning already declared. Aborting. Opcode #%d (count is 1-based). 
Tessellator domain already declared. Aborting. Opcode #%d (count is 1-based). 
Tessfactor
Texcoord
Texture
Texture sample will be considered dependent since texcoord was not declared as at least float%d
Texture1D
Texture1D types are unsupported on %s
Texture1DArray
Texture2D
Texture2DArray
Texture2DArrayMS
Texture2DMS
Texture2DMS resources are only available for input to Pixel Shaders. Opcode #%d (count is 1-based). 
Texture2DMSArray
Texture2DMS[Array] or TextureCube[Array] resources are not supported with UAVs (Unordered Access Views). Opcode #%d (count is 1-based). 
Texture3D
Texture:   t%u
TextureCube
TextureCubeArray
TextureCubeArray textures aren't supported on this target
Textures:  t%u-t%u
The array element count of GetDimensions on TextureCubeArray objects is unavailable on %s
The first stream declaration cannot appear after any output or output topology declarations.  Opcode #%d (count is 1-based). 
The intersection of all masks on output registers in an index range cannot be empty. Index range from o%d to o%d has empty mask intersecion. 
The total amount of group shared memory (%u bytes) exceeds the %s limit of %d bytes
There was a problem getting annotations
There was an error compiling HLSL shader variable
There was an error compiling expression
There was an unexpected error in the parse tree
This object can only be bound to one slot in this version of Effects
Thread Group Shared Memory reference g%d already declared.  Opcode #%d (count is 1-based). 
Thread Group Shared Memory reference g%d byteCount (%d specified) must be a nonzero multiple of 4.  Opcode #%d (count is 1-based). 
Thread Group Shared Memory reference g%d must have a structure byte stride that is a nonzero multiple of 4 when declared as structured (%d specified).  Opcode #%d (count is 1-based). 
Thread local temp register storage in Compute Shader (per thread) %d. The shader declares too much temp storage (%d registers). 
TlsAlloc
TlsFree
TlsGetValue
TlsSetValue
Too many %s signature parameters of type SV_ClipDistance or SV_CullDistance.  Maximum number of registers usable is %i.
Too many nested flow control constructs
Too many temp registers declared (%d).  Max allowed is %d.  Opcode #%d (count is 1-based). 
Too many total clip/cull distance values.  At most %d allowed (clip+cull total).  Opcode #%d (count is 1-based). 
Too many unique registers contain clip/cull distance values.  At most %d unique registers can have clip/cull distance in components.  Opcode #%d (count is 1-based). 
Total Thread Group Shared Memory storage exceeded by g# declarations so far up to g%d.  Opcode #%d (count is 1-based). 
Total number of scalars across all DS input control points must not exceed %d. Current input control point declaration specifies %d scalars of output per control point with %d output control points, resulting in %d total scalars of input control point data. 
Total number of scalars across all HS output control points must not exceed %d. Current output control point declaration specifies %d scalars of output per control point with %d output control points, resulting in %d total scalars of output control point data. 
Translate
Triangle
TriangleStream
Try swizzling literal arrays to fit them together <| Explicit
Try to combine like instructions <| Explicit
Try to match temp array loads to their original store <| Explicit
Try to reduce known values to movs <| Explicit
Tunnel through temp arrays on load <| Explicit
U SVW3
U<SVW
UAV reference u%d has invalid flag.  Opcode #%d (count is 1-based). 
UAV reference u%d must be specified with invalid coherency flag.  Opcode #%d (count is 1-based). 
UAV reference u%d must have a structure byte stride that is a multiple of 4 that is greater than 0 but no greater than %d when declared as structured (%d specified).  Opcode #%d (count is 1-based). 
UAV u%d already declared.  Opcode #%d (count is 1-based). 
UAVs must be declared in slots greater than PS outputs.  UAV declared in slot %d while output declared in slot %d.  Opcode #%d (count is 1-based). 
UGE a,a -> true <| MR.GenSimplifyInstructionsOpt1_NoExcl
ULT a,a -> false <| MR.GenSimplifyInstructionsOpt1_NoExcl
UNKNOWN
UQPXY]Y[
URPQQh`
UUUU3
Unable to calculate derivative of this operation. Consider using the assignment syntax to calculate it yourself (e.g.: x`(y) = z)
Unable to create warning string
UnaliasArrayLoads
Undefined
Undefined shader variable '%s'
Unexpected component type
Unexpected indexing dimension for operand #%d of opcode #%d (counts are 1-based). Aborting.
Unexpected node encountered when trying to determine type
Unexpected template type
UnhandledExceptionFilter
Unknown Value
UnmapViewOfFile
Unnamed objects are not allowed
Unrecognized FX function call (%s)
Unrecognized RHS value in assignment: '%s'
Unrecognized global flags.  Opcode #%d (count is 1-based). 
Unrecognized instruction or instruction not valid in Compute Shader.
Unrecognized instruction or instruction not valid in Domain Shader.
Unrecognized instruction or instruction not valid in Hull Shader.
Unrecognized instruction or instruction not valid in geometry shader.
Unrecognized instruction or instruction not valid in pixel shader.
Unrecognized instruction or instruction not valid in vertex shader.
Unrecognized shader type.
Unrecognized state '%s'
Unrecognized token %s
UnroundedInsideFactor
UnroundedInsideFactors
Unsigned integer divide by zero
Unsized MSAA textures aren't supported on this target
Unsupported texture type for %s
Use of potentially uninitialized variable (%s)
Use replicate swizzles to squish literal arrays <| Explicit
User defined %s buffer slots cannot be target specific
Using sampler arrays with texture objects on DX9 targets is not yet implemented.
VERTEXBLEND
VERTEXSHADER
VERTEXSHADERCONSTANT
VERTEXSHADERCONSTANT1
VERTEXSHADERCONSTANT2
VERTEXSHADERCONSTANT3
VERTEXSHADERCONSTANT4
VERTEXSHADERCONSTANTB
VERTEXSHADERCONSTANTF
VERTEXSHADERCONSTANTI
VERTID
VFACE
VFace
VIEWTRANSFORM
VPINDEX
VPhPz	
VPtSOt&
VVVVV
VVVVjsj@VVh
VW;Zpr
VWh K
VWt	3
VWts3
Validation Error: %s
Value
Values
Variable has an invalid type; is the structure definition empty?
VectorizeLeft
VectorizeLiterals
Vertex Shader position offset
VertexShader
VirtualAlloc
VirtualFree
VtB;W
W9SPu	3
W;K`r	
W;V4r
WCh0A
WFj VC
WHF;wPr
WIREFRAME
WORLDTRANSFORM
WPh(V
WPh` 
WRAP0
WRAP1
WRAP10
WRAP11
WRAP12
WRAP13
WRAP14
WRAP15
WRAP2
WRAP3
WRAP4
WRAP5
WRAP6
WRAP7
WRAP8
WRAP9
WRh8S
WShIFCE
WShP+
WShSDBG
Washington1
When code ends in subroutine definition, it must end with ret.
When streams are declared, you must use emit_stream, cut_stream, and emitthencut_stream instead of emit, cut, and emitthencut.  Opcode #%d (count is 1-based). 
When the Hull Shader doesn't have a Control Point Phase, the declared Input Control Point Count (%d) must match the declared Output Control Point Count (%d), indicating the control points will pass through, or the Output Control Point Count can be set 0. 
When there is no Control Point phase in the HS, the control points are pass-through to the DS, but the Fork/Join phases in the HS cannot use 'output control points' (vocp[][] registers).  Instead just use vcp[][] input control points (which are the same anyway in the passthrough case). Opcode #%d (count is 1-based).
WideCharToMultiByte
X AND Y : if( and_is_identity(x,y) => X <| MR.GenSimplifyInstructionsOpt1_NoExcl
X AND Y : if( and_is_identity(y,x) => Y <| MR.GenSimplifyInstructionsOpt1_NoExcl
X AND ~X => 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
X OR Y : if( or_is_identity(x,y) => X <| MR.GenSimplifyInstructionsOpt1_NoExcl
X OR Y : if( or_is_identity(y,x) => Y <| MR.GenSimplifyInstructionsOpt1_NoExcl
X OR ~X => btrue <| MR.GenSimplifyInstructionsOpt1_NoExcl
X't*u
X,Y,Z
X0k0r0w0
X5h5v5
X<_^[
XFt%=
XFt'=
XFts=
XNA Prepass
XTt =
XTtl=
XTu$h
XYZB1
XYZB2
XYZB3
XYZB4
XYZB5
XYZRHW
Y^_[]
Y__^[
Z0X03
ZENABLE
ZFUNC
ZWRITEENABLE
Zero character semantics aren't allowed
[%s%d.%c]
[%s%d[%s].%c]
[%s.%c]
[%s[%s].%c]
[%s[%u + %s].%c]
[%s[%u].%c]
[4VW3
[_^I#
[internal error]
\$$;L$
\$$;\$ 
\$,;D$0u<
\$0;]
\$0t<
\$4;T$0
\$4F;t$,
\$4uS
\$89Xtt
\$8F;
\$8VS
\$@G;
\$TPj
\$XtC
](:],
^9QPv
^[_I#
_%d_%d.
_CIacos
_CIasin
_CIatan
_CIatan2
_CIcos
_CIcosh
_CIexp
_CIfmod
_CIlog
_CIpow
_CIsin
_CIsinh
_CIsqrt
_CItan
_CItanh
_CxxThrowException
_XcptFilter
_^[Y]
__CxxFrameHandler
__FILE__
__LINE__
__dllonexit
__fx_2_0__
__test_intrin1
__test_intrin2
__test_intrin3
__test_intrin4
_amsg_exit
_bias
_binormal
_blendindices
_blendweight
_centroid
_clearfp
_color
_controlfp
_cube
_depth
_dynamicindexed
_errno
_finite
_fpclass
_indexable
_initterm
_isnan
_lock
_mbstrlen
_normal
_onexit
_p9Ypu
_position
_positiont
_psize
_purecall
_rcpfloat 
_sample
_strdup
_stricmp
_strnicmp
_tangent
_tessfactor
_texcoord
_uglobal
_ugroup
_uint 
_unknown
_unlock
_volume
_vsnprintf
` t =
` t!=
` t'=
` wCt0=
`!t&=
`!t(=
`!t.=
`!t5=
`!tl=
`!wrt_=
`"tl=
`"tx=
`"u-%
`#tS=
`#tV=
`#w t<=
`#w t@=
`#w tH=
`#w t[=
`#w tz=
`#w$tB=
`#w$tp
`#w*tH=
`#w*tO=
`#w9t
`#wPtp
`#wita=
`.data
`0t+=
`0t,=
`0w:t1=
`7d7h7l7p7t7x7|7
`;^<r
`;^Tr
`G#{'
`Pt.=
`Pta=
`Qu";
`Qu^;
`UUe?
```hhh
``w<t
``wdt7=
`bt\=
`ftN=
`ht|=
`w#t3=
`w)t~=
`w\t(=
a + (F - a) -> append_arg(F) <| SMR.RangeDataAnalysis
a + -a -> append_arg(0) <| SMR.RangeDataAnalysis
a << L | b (bfi(w=32-L, o=L, a, b) if( mask_is_zero(w, o, b) && allbutwidth_is_zero(w, a) -> imad (a, 1 << L, B) <| MR.GenMad
a = bfi(w, o, and(m, v), r) : if( masked_is_one(w,o,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, and(v, m), r) : if( masked_is_one(w,o,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, v, 0i) | r : if( mask_is_zero(w,o,r) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_Excl
a = bfi(w, o, v, 0i) | r : if( mask_is_zero(w,o,r) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, v, and(m, r)) : if( unmasked_is_one_or_val_is_zero(w,o,v,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a = bfi(w, o, v, and(r, m)) : if( unmasked_is_one_or_val_is_zero(w,o,v,m) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
a uint specifying the number of iterations to unroll
a | r : if( known_bfi_bitmask_noshift_impmask(a,r) && and_is_zero(a,r) ) -> bfi(bfi_bitwidth_noshift_impmask(a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
a*(1/(b*a)) -> 1 / b <| MR.GenSimplifyInstructionsOpt1_Excl
a0a0a0
abort
abs float_literal <| SFPS
abs fp_flags <| SFPS
abs fp_range <| SFPS
abs fp_specials <| SFPS
abs instruction to abs modifier match <| Explicit
abs on unsigned values is not meaningful, ignoring
abs(a), a negative -> neg(a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
abs(a), a positive -> a <| MR.GenSimplifyInstructionsOpt1_NoExcl
abstract interfaces not supported on %s
acos float_literal <| SFPS
acos fp_flags <| SFPS
acos fp_range <| SFPS
acos fp_specials <| SFPS
add float_literal <| SFPS
add fp_flags <| SFPS
add fp_range <| SFPS
add fp_specials <| SFPS
add of negative of itself identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
add of zero identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
add(0f,a) -> append_arg(a) <| SMR.RangeDataAnalysis
addressing operations are not allowed on input registers '%s'
addressing operations are not allowed on output registers '%s'
addressing operations not allowed on temporary registers '%s'
all template type components must have the same type
allow_uav_condition
alternate cases for 'Texture1D' are deprecated in strict mode
alternate cases for 'Texture2D' are deprecated in strict mode
alternate cases for 'Texture3D' are deprecated in strict mode
alternate cases for 'TextureCube' are deprecated in strict mode
alternate cases for 'asm' are deprecated in strict mode
alternate cases for 'decl' are deprecated in strict mode
alternate cases for 'pass' are deprecated in strict mode
alternate cases for 'technique' are deprecated in strict mode
and bits_known <| SFPS
and fp_flags <| SFPS
and int_flags <| SFPS
and int_literal <| SFPS
and(a, iv2) : if( can_reduce_and(a, iv2) ) -> and(a, get_reduced_and(a, iv2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
and(and(a, b), c) : if( and_is_identity(c, b) ) -> and(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
and(and(b, a), c) : if( and_is_identity(c, b) ) -> and(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
and(btrue,a) -> append_arg(a) <| SMR.RangeDataAnalysis
and(false,a) -> append_arg(0,a) <| SMR.RangeDataAnalysis
and(or(a, iv1), iv2) -> or(and(a, iv2), and(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
and, binary_compute on values -> binary_compute, and <| MR.GenShuffleCompute_NoExcl
and, quat arg1 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, quat arg2 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, quat arg3 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, quat arg4 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
and, ternary arg1 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
and, ternary arg2 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
and, ternary arg3 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
and, unary_compute on values -> unary_compute, and <| MR.GenShuffleCompute_NoExcl
annotation
annotation members
append
array dimension for %s must be %i
array dimension must be between 1 and 65536
array dimensions must be literal scalar expressions
array dimensions of type must be explicit
array index out of bounds
array reference cannot be used as an l-value; not natively addressable
array, matrix, vector, or indexable object type expected in index expression
array_index 
array_merge(chain_merge() || chain) -> append_arg(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
arrayload fp_flags <| SFPS
arraystore fp_flags <| SFPS
asdouble
asdouble can only be used on uint values on %s
asfloat
asfloat can only be used on floating point values on %s
asin float_literal <| SFPS
asin fp_flags <| SFPS
asin fp_range <| SFPS
asin fp_specials <| SFPS
asint
asint cannot be used on %s
asm blocks have not yet been implemented
asm {
asm_fragment
asuint
asuint can only be used on double values on %s
asuint cannot be used on %s
atan float_literal <| SFPS
atan fp_flags <| SFPS
atan fp_range <| SFPS
atan fp_specials <| SFPS
atan of known 0 or 1 identity <| Explicit
atan2
atan2 float_literal <| SFPS
atan2 fp_flags <| SFPS
atan2 fp_range <| SFPS
atan2 fp_specials <| SFPS
atomic_and
atomic_and fp_flags <| SFPS
atomic_cmp_store
atomic_cmp_store fp_flags <| SFPS
atomic_iadd
atomic_iadd fp_flags <| SFPS
atomic_imax
atomic_imax fp_flags <| SFPS
atomic_imin
atomic_imin fp_flags <| SFPS
atomic_or
atomic_or fp_flags <| SFPS
atomic_umax
atomic_umax fp_flags <| SFPS
atomic_umin
atomic_umin fp_flags <| SFPS
atomic_xor
atomic_xor fp_flags <| SFPS
attempt to group scalar values read by similar instructions <| Explicit
attribute %s expects the %s parameter to be a %s
attribute evaluation can only be done on values taken directly from inputs
automatic unrolling has been disabled for this loop, consider using [unroll] or manual unrolling
aw9t)=
awqtX=
awyt@=
b = ubfe(w, o, a); movc(b & (1 << (w - 1 + o)), b | ~((1 << w + o)-1), b) -> ibfe(w, o, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
b = ubfe/ushr(a,o), movc((a >> o) & iv_pow2, b | -iv_pow2) -> ibfe(get_first_bit(iv_pow2), 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
b = ubfe/ushr(a,o), movc((b >> o) & iv_pow2, bfi(w, 0, b, -iv_pow2)) -> ibfe(get_first_bit(iv_pow2), 0, a) <| MR.GenD3D10_OptimizeEarlyTranslate
b | (a & c) | (a & d) -> or(b, and(a, or(c,d)) <| MR.GenSimplifyInstructionsOpt1_Excl
b0h0p0b4h4p4P8
back-propagate negate through iadd <| MR.GenSimplifyInstructionsOpt1_Excl
back-propagate negate through imul <| MR.GenSimplifyInstructionsOpt1_Excl
base type is not a struct, class or interface
bdeq fp_flags <| SFPS
bdeq int_literal <| SFPS
bdeq int_range <| SFPS
bdge fp_flags <| SFPS
bdge int_literal <| SFPS
bdge int_range <| SFPS
bdlt fp_flags <| SFPS
bdlt int_literal <| SFPS
bdlt int_range <| SFPS
bdne fp_flags <| SFPS
bdne int_literal <| SFPS
bdne int_range <| SFPS
beq fp_flags <| SFPS
beq int_literal <| SFPS
beq int_range <| SFPS
bfi bits_known <| SFPS
bfi fp_flags <| SFPS
bfi int_literal <| SFPS
bfi(and(31,w), o, v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(and(w,31), o, v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(i) -> insertion sequence <| MR.Gen_RequiredTranslate
bfi(w, 0, v, n << w) : if( w != 0 ) -> bfi(32-w, w, n, v) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, 0i, a, 0i) -> ubfe(w, 0i, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, 0i, n, n) -> mov(n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, 0i, v, r) : if( width_is_zero(w,r) && allbutwidth_is_zero(w, v) -> iadd(v, r) <| MR.GenD3D10PostMod_Both
bfi(w, and(31,o), v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, and(o,31), v, r) : if( lower_5_bits_are_set(31) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, o, v, bfi(w, o, 0, n)) -> bfi(w, o, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfi(w, o, v, n) << s -> bfi(w, o+s, v, n) <| MR.GenSimplifyInstructionsOpt1_Excl
bfi(w, o, v, n) << s -> bfi(w, o+s, v, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bfrev
bge fp_flags <| SFPS
bge int_literal <| SFPS
bge int_range <| SFPS
bge(mul(x,x),neg(mul(x,x))) -> true <| MR.GenSimplifyInstructionsOpt1_NoExcl
bias amount for sample_b must be in the range [%f,%f], but %f was specified as an immediate. Opcode #%d, operand #%d (counts are 1-based). 
bieq bits_known <| SFPS
bieq fp_flags <| SFPS
bieq int_literal <| SFPS
bieq int_range <| SFPS
bige bits_known <| SFPS
bige fp_flags <| SFPS
bige int_literal <| SFPS
bige int_range <| SFPS
bilt bits_known <| SFPS
bilt fp_flags <| SFPS
bilt int_literal <| SFPS
bilt int_range <| SFPS
binary expression with negative symmetry reduction <| MR.GenSimplifyInstructionsOpt1_NoExcl
bind_load fp_flags <| SFPS
bind_load(chain, value) -> o->append_sources(chain) <| SMR.DataflowAnalysis
bine bits_known <| SFPS
bine fp_flags <| SFPS
bine int_literal <| SFPS
bine int_range <| SFPS
bine(b,0) -> b <| MR.GenSimplifyInstructionsOpt2_NoExcl
bine(i/ushr(a, n),0) : if(lower_n_bits_are_zero(a, n)) -> bine (a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
bine(ishl(a, n),0) : if(upper_n_bits_are_zero(a, n)) -> bine (a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
binormal
blendindices
blendweight
block
blt fp_flags <| SFPS
blt int_literal <| SFPS
blt int_range <| SFPS
bne fp_flags <| SFPS
bne int_literal <| SFPS
bne int_range <| SFPS
bool ? a + 1 : a -> a - bool <| MR.GenSimplifyInstructionsOpt1_NoExcl
bool ? a - 1 : a -> a + bool <| MR.GenSimplifyInstructionsOpt1_NoExcl
bool multiply chain reduction <| Explicit
bool1
bool1x1
bool1x2
bool1x3
bool1x4
bool2
bool2x1
bool2x2
bool2x3
bool2x4
bool3
bool3x1
bool3x2
bool3x3
bool3x4
bool4
bool4x1
bool4x2
bool4x3
bool4x4
boolean
boolean constant register '%s' must be defined as a variable of type bool only
both sides of the && operator are always evaluated, side effect on '%s' will not be conditional
both sides of the ?: operator are always evaluated, side effect on '%s' will not be conditional
both sides of the || operator are always evaluated, side effect on '%s' will not be conditional
branch
break
break fp_flags <| SFPS
break must be inside loop
break never match (to NOP) <| MR.GenSimplifyInstructionsAlways_Both
break(a,bieq(x,0)) -> breakn(a,x) <| MR.Gen_PreModTarget_Both
break(a,bine(x)) -> break(a,x) <| MR.Gen_PreModTarget_Both
break(a,not(x)) -> breakn(a,x) <| MR.Gen_PreModTarget_Both
break(ge(neg(fbool), fbool)) -> break_eq(fbool, 0) <| MR.Gen_PreModTarget_Both
break/breakc statement not inside loop or switch.  Opcode #%d (count 1-based).
break/continue can only be followed by case/default/endswitch/endloop/else/endif. Opcode #%d (count 1-based). Aborting validation.
break_c
break_consume fp_flags <| SFPS
breaka match <| MR.GenD3D10PostMod_Both
breakc
breakp
btof -> movc <| MR.GenSimplifyInstructionsOpt1_NoExcl
btof fp_flags <| SFPS
btoi -> movc <| MR.GenSimplifyInstructionsOpt1_NoExcl
btoi bits_known <| SFPS
btoi fp_flags <| SFPS
btoi int_literal <| SFPS
btoi int_range <| SFPS
buffer
bufinfo
bufinfo fp_flags <| SFPS
bufinfo requires resource declared as Buffer, Raw Buffer or Structured Buffer.  Opcode #%d, operand #%d (counts are 1-based). 
buge bits_known <| SFPS
buge fp_flags <| SFPS
buge int_literal <| SFPS
buge int_range <| SFPS
bult bits_known <| SFPS
bult fp_flags <| SFPS
bult int_literal <| SFPS
bult int_range <| SFPS
bw*t!=
bw+t~=
bwXtq=
byteOffset
c1, c2, c3, c4, c5, c6
cabinet.dll
calclod1d fp_flags <| SFPS
calclod1d_a fp_flags <| SFPS
calclod1d_u fp_flags <| SFPS
calclod1d_u_a fp_flags <| SFPS
calclod2d fp_flags <| SFPS
calclod2d_a fp_flags <| SFPS
calclod2d_u fp_flags <| SFPS
calclod2d_u_a fp_flags <| SFPS
calclod3d fp_flags <| SFPS
calclod3d_u fp_flags <| SFPS
calclodcube fp_flags <| SFPS
calclodcube_a fp_flags <| SFPS
calclodcube_u fp_flags <| SFPS
calclodcube_u_a fp_flags <| SFPS
call, callnz, label, and ret instructions are not allowed in assembly fragments
call/callc statement not referencing a label.  Opcode #%d (count 1-based).
callc
callnz
can be declared (the amount is a function of how many threads there are).  This shader exceeds the limit at %d bytes per thread. 
can't emit if statement with both gradients and program flow control
can't flatten if statements that contain out of bounds array accesses
can't flatten if statements that contain side effects
can't flatten with flow control when variable is bound to b register
can't force branch with gradients on non-inputs
can't match attribute %s, %d or 0 parameters expected, found %d
can't match attribute %s, %d parameter(s) expected, found %d
can't unroll loops marked with loop attribute
can't use branch and flatten attributes together
can't use branch, flatten, call  or case attributes together
can't use call or forcecase attributes on switches in %s programs
can't use fastopt and unroll attributes together
can't use flow control on this profile
can't use gradient instructions in loops with break
can't use loop and unroll attributes together
cannot %sconvert %sfrom '%s' to '%s'
cannot bind interfaces to classes in tbuffers
cannot bind the same variable to multiple constants in the same constant bank
cannot cast the LHS of an assignment to an indexable object, consider using asuint, asfloat, or asdouble on the RHS
cannot clip from a swizzled vector
cannot convert from 'object type' to 'numeric type'
cannot have divergent gradient operations inside flow control
cannot have gradient operations inside loops with divergent flow control
cannot map expression to %s instruction set
cannot map expression to pixel shader instruction set
cannot map expression to vertex shader instruction set
cannot map loop to shader target, target does not support breaks
cannot match attribute %s, non-uint parameters found
cannot match attribute %s, parameter %i is expected to be of type %s%c
cannot match lerp because lerp factor is not _sat'd
cannot mix packoffset elements with nonpackoffset elements in a cbuffer
cannot sample from non-floating point texture formats.
cannot unroll loop with an out-of-bounds array reference in the condition
cannot use casts on l-values
case %d (or if bits to be interpreted as float: %f) already seen. Opcode #%d (count 1-based).
case fp_flags <| SFPS
case ordinal too large for floating point representation
case statement doesn't match to the scope of a switch statement. Opcode #%d (count 1-based). Aborting validation.
catch
cb%d[%d]
cbuffer
cbuffer bank %u used more than once
ceil float_literal <| SFPS
ceil fp_flags <| SFPS
ceil fp_range <| SFPS
ceil fp_specials <| SFPS
center
centroid
cf = $IsReturn(a, ci) -> append_arg(a, ci) <| SMR.DataFlagAnalysis
chain_end fp_flags <| SFPS
chain_merge($IsSync() || chain) -> append_arg(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
chain_merge($IsSync() || chain) -> append_arg(sync) <| SMR.DataFlagAnalysis_ConstInterp
chain_merge(chain_merge() || chain) -> append_arg(chain) <| SMR.DataFlagAnalysis_NoPlaceHolder
character continues past end of file
cinstanceid
cl = $IsBreak(a, ci) -> append_arg(a, ci) <| SMR.DataFlagAnalysis
cl = $IsConsume(a, b, ci) -> append_arg(ci) <| SMR.DataFlagAnalysis
cl = $IsContinue(a, ci) -> append_arg(a, ci) <| SMR.DataFlagAnalysis
cl = casecond(ci, c) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = emit(ci, stream) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = emitarg(a, b, ci) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = endcase(ci, ch) -> append_arg(ci) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = endcase(ci, ch) -> append_arg(ci, ci_p, ch) <| SMR.DataFlagAnalysis_PlaceHolder
cl = fcbody(ci, c) -> append_arg(ci, c) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = fcbody_end(ci, ch) -> append_arg(ci, ci_p, ch) <| SMR.DataFlagAnalysis_NoPlaceHolder
cl = fcbody_end(ci, ch) -> append_arg(ci, ci_p, ch) <| SMR.DataFlagAnalysis_PlaceHolder
clamp
class
clip cannot be performed from a constant or literal
clip must be performed from a float3 vector for ps_1_x models
clip must be performed from a float4 vector for ps_2_0 models
clip not supported in texture shaders
clip(+d * a,b) -> clip(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
clip(a+a,b) -> clip(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
clip_distance
clipplanes
cmp (a, a, -a) -> abs <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
cmp diff to basic logic identity <| Explicit
cmp float_literal <| SFPS
cmp fp_flags <| SFPS
cmp fp_range <| SFPS
cmp fp_specials <| SFPS
cmp of known negative identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp of known positive identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp of negated bool identity <| Explicit
cmp sequence 1 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
cmp sequence 2 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
cmp(+d * a,b,c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-b,0,b) -> cmp(b,b,0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-cmp(a, <=0, >0), b, c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-cmp(a, >0, <=0), b, c) -> cmp(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(-d * a,b,c) -> cmp(-a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(a+a,b,c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(a,b,c) -> append_arg(b, c) <| SMR.RangeDataAnalysis
cmp(c,d=cmp(c,a,b),f) -> cmp(c,a,f) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(c,f,d=cmp(c,a,b)) -> cmp(c,f,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(cmp(a, <0, >=0), b, c) -> cmp(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp(cmp(a, >=0, <0), b, c) -> cmp(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
cmp, binary_compute on same value -> binary_compute, cmp <| MR.GenShuffleCompute_NoExcl
cmp, binary_compute on values -> binary_compute, cmp <| MR.GenShuffleCompute_NoExcl
cmp, binary_compute on values lhs -> binary_compute, cmp <| MR.GenShuffleCompute_Excl
cmp, binary_compute on values rhs -> binary_compute, cmp <| MR.GenShuffleCompute_Excl
cmp, unary_compute on values -> unary_compute, cmp <| MR.GenShuffleCompute_NoExcl
cmp, unary_compute on values lhs -> unary_compute, cmp <| MR.GenShuffleCompute_Excl
cmp, unary_compute on values rhs -> unary_compute, cmp <| MR.GenShuffleCompute_Excl
color
column_major
column_major 
combine AND of two equal unknown left shifts <| MR.GenSimplifyInstructionsOpt1_Excl
combine AND of two equal unknown right shifts <| MR.GenSimplifyInstructionsOpt1_Excl
combine AND of two equal unknown unsigned right shifts <| MR.GenSimplifyInstructionsOpt1_Excl
combine OR of two equal shifts <| MR.GenSimplifyInstructionsOpt1_NoExcl
combine XOR of two equal shifts <| MR.GenSimplifyInstructionsOpt1_NoExcl
combine of commutative literals <| Explicit
combine simple instructions to reduce instruction count <| Explicit
comma expression used where a vector constructor may have been intended
comma expression used where an initializer list may have been intended
comment continues past end of file
compare
comparison
compile
compile expression does not refer to a compilable function.  API calls such as ConstructGSWithSO and BindInterfaces can not be used in arguments to CompileShader
compile expression must specify a valid shader model
compile_fragment
complement cannot be used with other modifiers
complement is not supported in this shader version
conditional must be numeric
conflicting geometry types
conflicting quad/tri/isoline tessfactor semantic
const
const 
const_cast
constant
constant register '%s' must be defined as a variable '%s'
constant register address out of bounds on constant '%s', size %d, offset %d
constant table info exceeds maximum comment size
constinterp usage cannot be used with linear, noperspective, or centroid usage
constructors only defined for numeric base types
consume
continue
continue fp_flags <| SFPS
continue must be inside loop
continue never match (to NOP) <| MR.GenSimplifyInstructionsAlways_Both
continue(a,bieq(x,0)) -> continuen(a,x) <| MR.Gen_PreModTarget_Both
continue(a,bine(x)) -> continue(a,x) <| MR.Gen_PreModTarget_Both
continue(a,not(x)) -> continuen(a,x) <| MR.Gen_PreModTarget_Both
continue/continuec statement not inside loop.  Opcode #%d (count 1-based).
continue_consume fp_flags <| SFPS
continuea match <| MR.GenD3D10PostMod_Both
continuec
conversion from larger type to smaller, possible loss of data
convert mod by power-of-2 to bitwise AND <| MR.GenSimplifyInstructionsOpt1_NoExcl
cos float_literal <| SFPS
cos fp_flags <| SFPS
cos fp_range <| SFPS
cos fp_specials <| SFPS
could not cast condition to boolean
could not cast condition to uint
couldn't cast expression to boolean for logical not operator
couldn't cast expression to boolean for logical operator
couldn't cast expression to integer
count
countbits
countbits bits_known <| SFPS
countbits fp_flags <| SFPS
countbits int_literal <| SFPS
countbits(i) -> and/shift/add sequence <| MR.Gen_RequiredTranslate
cross
cs_%d_%d
cs_4_0
cs_4_1
cs_5_0
cubearray
cull_distance
cut_stream
cwWtH=
cw}t]=
d((double)-x)/dz -> -(double)dx/dz <| SR.GenDerivatives_Unary
d((double)x * x)/dz -> 2*dx/dz * x <| SR.GenDerivatives_Binary
d((double)x * y)/dz -> dx/dz * y + x * dy/dz <| SR.GenDerivatives_Binary
d((double)x + (double)y)/dz -> dx/dz + dy/dz <| SR.GenDerivatives_Binary
d((double)x)/dz -> (double)dx/dz <| SR.GenDerivatives_Unary
d(-x)/dz -> -dx/dz <| SR.GenDerivatives_Unary
d(1/x)/dz -> -dx/dz/x^2 <| SR.GenDerivatives_Unary
d(2^x)/dz -> ln(2) * 2^x * dx/dz <| SR.GenDerivatives_Unary
d(a ? b : c)/dz -> a ? db/dz : dc/dz <| SR.GenDerivatives_Ternary
d(acos(x))/dz -> -1/sqrt(1-x^2) * dx/dz <| SR.GenDerivatives_Unary
d(asin(x))/dz -> 1/sqrt(1-x^2) * dx/dz <| SR.GenDerivatives_Unary
d(atan(x))/dz -> 1/(1+x^2) * dx/dz <| SR.GenDerivatives_Unary
d(atan2(x,y))/dz -> 1 / (1 + (y/x)^2) * d(y/x)/dz <| SR.GenDerivatives_Binary
d(cos(x))/dz -> -sin(x) * dx/dz <| SR.GenDerivatives_Unary
d(dmax(x,y))/dz -> (x > y) ? dx/dz : ((y > x) ? dy/dz : dmax(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(dmin(x,y))/dz -> (x < y) ? dx/dz : ((y < x) ? dy/dz : dmin(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(log_2(x))/dz -> 1/(x * ln(2)) * dx/dz <| SR.GenDerivatives_Unary
d(max(x,y))/dz -> (x > y) ? dx/dz : ((y > x) ? dy/dz : max(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(min(x,y))/dz -> (x < y) ? dx/dz : ((y < x) ? dy/dz : min(dx/dz, dy/dz) <| SR.GenDerivatives_Binary
d(sin(x))/dz -> cos(x) * dx/dz <| SR.GenDerivatives_Unary
d(x * x)/dz -> 2*dx/dz * x <| SR.GenDerivatives_Binary
d(x * y)/dz -> dx/dz * y + x * dy/dz <| SR.GenDerivatives_Binary
d(x + y)/dz -> dx/dz + dy/dz <| SR.GenDerivatives_Binary
d(x / y)/dz -> dx/dz / y + x * -dy/dz / y^2 <| SR.GenDerivatives_Binary
d(x)/dz -> dx/dz <| SR.GenDerivatives_Unary
d(x+eps)/dz -> dx/dz <| SR.GenDerivatives_Unary
d(x^-0.5)/dz -> -0.5*x^-1.5 * dx/dz <| SR.GenDerivatives_Unary
d3d10_1.dll
d3d9.dll
d3dcompiler_43.dll
d3ds_dotswiz
d3ds_noiseswiz
dabs float_literal <| SFPS
dabs fp_flags <| SFPS
dabs fp_range <| SFPS
dabs fp_specials <| SFPS
dadd float_literal <| SFPS
dadd fp_flags <| SFPS
dadd fp_range <| SFPS
dadd fp_specials <| SFPS
data member
dcl_constantbuffer
dcl_func_output(a) -> o->append_dataflow() <| SMR.DataflowAnalysis
dcl_function_body
dcl_function_table
dcl_globalFlags
dcl_gsinstances
dcl_hs_fork_phase_instance_count
dcl_hs_join_phase_instance_count
dcl_hs_max_tessfactor
dcl_immediateConstantBuffer
dcl_indexableTemp
dcl_indexrange
dcl_input
dcl_input_control_point_count
dcl_input_ps
dcl_input_ps_sgv
dcl_input_ps_siv
dcl_input_sgv
dcl_input_siv
dcl_inputprimitive
dcl_interface
dcl_maxout
dcl_output
dcl_output_control_point_count
dcl_output_sgv
dcl_output_siv
dcl_outputtopology
dcl_resource
dcl_resource_raw
dcl_resource_structured
dcl_sampler
dcl_stream
dcl_temps
dcl_tessellator_domain
dcl_tessellator_output_primitive
dcl_tessellator_partitioning
dcl_tgsm_raw
dcl_tgsm_structured
dcl_thread_group
dcl_uav_raw
dcl_uav_structured
dcl_uav_typed
ddx_coarse
ddx_fine
ddy_coarse
ddy_fine
debug info exceeds maximum comment size; no debug info emitted
debug_break
decimal value truncated to 64 bits
default
default statement doesn't match to the scope of a switch statement. Opcode #%d (count 1-based). Aborting validation.
default statement seen already.  Opcode #%d (count 1-based).
default value
define
defined
degrees
delete
depth
deriv_rtx
deriv_rtx_coarse
deriv_rtx_fine
deriv_rty
deriv_rty_coarse
deriv_rty_fine
detect errors induced by race conditions <| Explicit
determinant
dfuse float_literal <| SFPS
dfuse fp_flags <| SFPS
dfuse fp_specials <| SFPS
dimension of conditional does not match value
disable
discard
discard_endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis_PlaceHolder
discardif fp_flags <| SFPS
distance
div float_literal <| SFPS
div fp_flags <| SFPS
div fp_range <| SFPS
div fp_specials <| SFPS
div(a,b)->mul(a, rcp(b)) <| MR.Gen_RequiredTranslate
divide
division by a literal becomes multiplication by reciprocal <| MR.GenSimplifyInstructionsOpt1_NoExcl
division by zero in preprocessor expression
dmad -> dmul, dadd <| MR.Gen_RequiredTranslate
dmad float_literal <| SFPS
dmad fp_flags <| SFPS
dmad fp_range <| SFPS
dmad fp_specials <| SFPS
dmax 0/dmin 1 -> dsat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
dmax float_literal <| SFPS
dmax fp_flags <| SFPS
dmax fp_range <| SFPS
dmax fp_specials <| SFPS
dmax(dmax(i0, l1), l2) -> dmax(i0, dmax(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmax(i, dneg(i)) -> dabs <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
dmax(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmax(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmin 1/dmax 0 -> dsat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
dmin float_literal <| SFPS
dmin fp_flags <| SFPS
dmin fp_range <| SFPS
dmin fp_specials <| SFPS
dmin(dmin(i0, l1), l2) -> dmin(i0, dmin(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmin(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmin(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmov fp_flags <| SFPS
dmov mov <| SFPS
dmovc
dmovc float_literal <| SFPS
dmovc fp_flags <| SFPS
dmovc fp_specials <| SFPS
dmovc(!a,b,c) -> dmovc(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc((a<b),a,b) -> dmin(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc((a<b),b,a) -> dmax(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc((a>=b),a,b) -> dmax(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc((a>=b),b,a) -> dmin(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc(a,b,b) -> dmov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc(bdlt(a, 0), |a|, a) -> dabs(a) <| MR.GenD3D10PreMod_NoExcl
dmovc(c,a,ignore) -> dmov(a) <| MR.GenSimplifyInstructionsAlways_Both
dmovc(c,ignore,a) -> dmov(a) <| MR.GenSimplifyInstructionsAlways_Both
dmovc(c,ignore,ignore) -> ignore(0) <| MR.GenSimplifyInstructionsAlways_Both
dmovc(false,b,c) -> dmov(c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmovc(true,b,c) -> dmov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dmul float_literal <| SFPS
dmul fp_flags <| SFPS
dmul fp_range <| SFPS
dmul fp_specials <| SFPS
dneg float_literal <| SFPS
dneg fp_flags <| SFPS
dneg fp_range <| SFPS
dneg fp_specials <| SFPS
domain
domain type
dot of partial nullity reduction <| Explicit
dot(normalized_v, normalized_v) == 1.0 when v has length <| MR.GenSimplifyInstructionsOpt1_NoExcl
double
double add of zero identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
double negative to original <| MR.GenSimplifyInstructionsOpt1_NoExcl
double rcp identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
doubles cannot be used as shader inputs or outputs. If you need to pass a double between shader stages you must pass it as two uints and use asuint and asdouble to convert between forms
dp2add
ds_%d_%d
ds_5_0
dsat float_literal <| SFPS
dsat fp_flags <| SFPS
dsat fp_range <| SFPS
dsplit fp_flags <| SFPS
dsplit fp_specials <| SFPS
dsplit int_literal <| SFPS
dsx float_literal <| SFPS
dsx fp_flags <| SFPS
dsx fp_range <| SFPS
dsx fp_specials <| SFPS
dsx_coarse float_literal <| SFPS
dsx_coarse fp_flags <| SFPS
dsx_coarse fp_range <| SFPS
dsx_coarse fp_specials <| SFPS
dsx_fine float_literal <| SFPS
dsx_fine fp_flags <| SFPS
dsx_fine fp_range <| SFPS
dsx_fine fp_specials <| SFPS
dsy float_literal <| SFPS
dsy fp_flags <| SFPS
dsy fp_range <| SFPS
dsy fp_specials <| SFPS
dsy(x)/dz -> dsy(dx/dz) <| SR.GenDerivatives_Unary
dsy_coarse float_literal <| SFPS
dsy_coarse fp_flags <| SFPS
dsy_coarse fp_range <| SFPS
dsy_coarse fp_specials <| SFPS
dsy_fine float_literal <| SFPS
dsy_fine fp_flags <| SFPS
dsy_fine fp_range <| SFPS
dsy_fine fp_specials <| SFPS
dtof float_literal <| SFPS
dtof fp_flags <| SFPS
dtof fp_range <| SFPS
dtof fp_specials <| SFPS
dtof(ftod(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
dtof(x)/dz -> dtof(dx/dz) <| SR.GenDerivatives_Unary
duplicate attribute %s
duplicate macro parameter '%s'
duplicate usage semantic ignored
duplicate usages specified
dw8tO=
dw=t.=
dword
dynamic_cast
e0e0e0
earlydepthstencil
element type of texture too large. Cannot exceed 4 components
elements
elements of typed buffers and textures cannot be arrays
elements of typed buffers and textures must fit in four 32-bit quantities
else statement doesn't match to an if statement. Opcode #%d (count 1-based). Aborting validation.
else statement seen already.  Opcode #%d (count 1-based). Aborting validation.
emit write masks on sample instructions <| Explicit
emit_stream
emit_then_cut
emit_then_cut_stream
emitting a system-interpreted value which is not written in every execution path of the shader <| A%u (B%u)
emitting a system-interpreted value which may not be written in every execution path of the shader <| A%u (B%u)
enable instancing searches for programs with multiple outputs <| Explicit
enableDoublePrecisionFloatOps
enableRawAndStructuredBuffers
enableRawAndStructuredBuffers global flag can't be used (not needed) with Compute Shaders.  Opcode #%d (count is 1-based). 
end of file
end of line
endif
endif statement doesn't match to an if statement. Opcode #%d (count 1-based). Aborting validation.
endif(a,b) -> append_arg(a,b) <| SMR.RangeDataAnalysis
endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis
endloop
endloop statement doesn't match to a loop statement. Opcode #%d (count 1-based). Aborting validation.
endrep
endswitch
endswitch statement doesn't match to a switch statement. Opcode #%d (count 1-based). Aborting validation.
entrypoint
error
error, duplicate case %u
error, duplicate default in switch statement
error: %s
errorf
errorf 
eval bne on non-nan value <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval eq <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval ge <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval lt <| MR.GenSimplifyInstructionsOpt1_NoExcl
eval mul <| Explicit
eval(
eval_centroid
eval_centroid fp_flags <| SFPS
eval_sample fp_flags <| SFPS
eval_sample_index
eval_snapped
eval_snapped fp_flags <| SFPS
ew#t:=
ew,t$=
ew.t]=
exp float_literal <| SFPS
exp fp_flags <| SFPS
exp fp_range <| SFPS
exp fp_specials <| SFPS
exp(a*log(0)) = 0 identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
exp(log(x)) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
expected %s parameter to be %s, got '%s'
explicit
expressions returning objects in an array or struct not yet implemented
expressions with side effects are illegal as attribute parameters
extern
f16tof32
f16tof32 bits_known <| SFPS
f16tof32 float_literal <| SFPS
f16tof32 fp_flags <| SFPS
f16tof32(i) -> conversion sequence <| MR.Gen_RequiredTranslate
f32tof16
f32tof16 fp_flags <| SFPS
f32tof16 int_literal <| SFPS
f32tof16 int_range <| SFPS
f32tof16(i) -> conversion sequence <| MR.Gen_RequiredTranslate
f;C s@
faceforward
failed to open source file: '%s'
false
fastopt
fcall
fcall fp_flags <| SFPS
fcall statement not referencing an interface.  Opcode #%d (count 1-based).
fcall statement referencing an out of bounds function index (%d).  Opcode #%d (count 1-based).
fcall statement referencing an undeclared interface (%d).  Opcode #%d (count 1-based).
fcbody fp_flags <| SFPS
ffff40
finalLine*TessFactor requires ISOLINE tessellator domain.  Opcode #%d (count is 1-based). 
finalLineDensityTessFactor
finalLineDensityTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalLineDensityTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalLineDetailTessFactor
finalLineDetailTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalLineDetailTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuad*TessFactor requires QUAD tessellator domain.  Opcode #%d (count is 1-based). 
finalQuadUInsideTessFactor
finalQuadUInsideTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadUInsideTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadUeq0EdgeTessFactor
finalQuadUeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadUeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadUeq1EdgeTessFactor
finalQuadUeq1EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadUeq1EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadVInsideTessFactor
finalQuadVInsideTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadVInsideTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadVeq0EdgeTessFactor
finalQuadVeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadVeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalQuadVeq1EdgeTessFactor
finalQuadVeq1EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalQuadVeq1EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTri*TessFactor requires TRI tessellator domain.  Opcode #%d (count is 1-based). 
finalTriInsideTessFactor
finalTriInsideTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriInsideTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTriUEdgeTessFactor
finalTriUeq0EdgeTessFactor
finalTriUeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriUeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTriVEdgeTessFactor
finalTriVeq0EdgeTessFactor
finalTriVeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriVeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finalTriWEdgeTessFactor
finalTriWeq0EdgeTessFactor
finalTriWeq0EdgeTessFactor already declared for input.  Opcode #%d (count is 1-based). 
finalTriWeq0EdgeTessFactor already declared for output.  Opcode #%d (count is 1-based). 
finite a + -a -> append_arg(0) <| SMR.RangeDataAnalysis
firstbit*(x) != -1 -> x != 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
firstbit*(x) == -1 -> x == 0 <| MR.GenSimplifyInstructionsOpt1_NoExcl
firstbit_hi
firstbit_hi bits_known <| SFPS
firstbit_hi fp_flags <| SFPS
firstbit_hi int_literal <| SFPS
firstbit_hi(i) -> shift/bine/add sequence <| MR.Gen_RequiredTranslate
firstbit_lo
firstbit_shi
firstbit_shi bits_known <| SFPS
firstbit_shi fp_flags <| SFPS
firstbit_shi int_literal <| SFPS
firstbit_shi(i) -> shift/bine/add sequence <| MR.Gen_RequiredTranslate
firstbithigh
firstbitlow
firstbitlow bits_known <| SFPS
firstbitlow fp_flags <| SFPS
firstbitlow int_literal <| SFPS
firstbitlow(i) -> shift/bine/add sequence <| MR.Gen_RequiredTranslate
flatten
float
float '%g'
float '%gf'
float '%gh'
float '%gl'
float constant
float1
float1x1
float1x2
float1x3
float1x4
float2
float2x1
float2x2
float2x3
float2x4
float3
float3x1
float3x2
float3x3
float3x4
float4
float4x1
float4x2
float4x3
float4x4
floating point division by zero
floor
floor float_literal <| SFPS
floor fp_flags <| SFPS
floor fp_range <| SFPS
floor fp_specials <| SFPS
flow control depth too deep to emit function call
flow control depth too deep to honor call or forcecase attribute
for better compilation results, consider re-enabling rule "%s"
for better compilation results, consider re-enabling rule 0x%08x
for loop
forceEarlyDepthStencil
forcecase
forced to unroll loop, but unrolling failed.
fractional_even
fractional_odd
fragment info exceeds maximum comment size
frc float_literal <| SFPS
frc fp_flags <| SFPS
frc fp_range <| SFPS
frc fp_specials <| SFPS
frc(a + int) = frc(a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
frexp
friend
ftob fp_flags <| SFPS
ftob int_literal <| SFPS
ftob int_range <| SFPS
ftob(trunc(btof(x))) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ftod float_literal <| SFPS
ftod fp_flags <| SFPS
ftod fp_range <| SFPS
ftod fp_specials <| SFPS
ftod(x)/dz -> ftod(dx/dz) <| SR.GenDerivatives_Unary
ftoi fp_flags <| SFPS
ftoi int_literal <| SFPS
ftoi int_range <| SFPS
ftoi(itof(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ftoi(trunc(itof(x))) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ftou fp_flags <| SFPS
ftou int_literal <| SFPS
ftou int_range <| SFPS
ftou(trunc(utof(x))) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ftou(utof(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
function
function '%s' missing implementation
function body (%d) already declared. Opcode #%d (count 1-based). 
function body (%d) defined without being declared. Opcode #%d (count 1-based). 
function body (%d) referenced without being defined. Opcode #%d (count 1-based). 
function body (%d) was never defined.
function body (%d) was never referenced.
function name
function parameters
function table (%d) already declared. Opcode #%d (count 1-based). 
function table (%d) was declared, but never referenced.
function_endif(a) -> append_arg(a, pred_a) <| SMR.DataFlagAnalysis
function_endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis
functional defines in preprocessor expressions not yet implemented
functionif fp_flags <| SFPS
fw#tM=
fwStD=
fwidth
fwlt1=
fx_2_0
fx_4_0
fx_4_1
fx_5_0
fxgroup
fxl_2_0
fxl_4_0
g97u<j
gather2d fp_flags <| SFPS
gather2d_a fp_flags <| SFPS
gather2d_a_o fp_flags <| SFPS
gather2d_o fp_flags <| SFPS
gather4
gather4_c
gather4_po
gather4_po_c
gathercube fp_flags <| SFPS
gathercube_a fp_flags <| SFPS
gathercube_c fp_flags <| SFPS
gathercube_c_a fp_flags <| SFPS
ge float_literal <| SFPS
ge fp_flags <| SFPS
ge fp_range <| SFPS
ge of known range reduction <| Explicit
ge(a, b) -> cmp(a - b, 1f, 0f) <| MR.Gen_RequiredTranslate
geometry shader didn't emit anything
getenv
global
global variables
global variables are implicitly constant, enable compatibility mode to allow modification
global variables are implicitly constant, variables of classes with interface inheritance can never be modified
globallycoherent
globallycoherent can only be used with Unordered Access View buffers
globallycoherent cannot be used with append/consume buffers
gradient instruction used in a loop with varying iteration, forcing loop to unroll
gradient operation uses a value that may not be defined for all pixels (in %s UAV loads can not participate in gradient operations)
gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
groupshared
groupshared variables cannot contain resources such as textures, samplers or UAVs
gs_%d_%d
gs_4_0
gs_4_1
gs_5_0
gw+t;=
gw5t,=
gw8t==
gw:tV=
gwctT=
h    jT
h4l4p4t4x4|4
hAon9
hCLI4
hCTAB
hCTABW
hFX10
hFXLC
hIFCE
hISGN
hISGNj
hOSG5
hOSGN
hOSGNj
hPCSG
hPCSGj
hPERF
hRDEF
hSDBG
hSDTL
hSFI0
hSHDR
hSHEX
hSMID
hSTAT
hXNAP
hXNAS
height
hex value truncated to 64 bits
hs_%d_%d
hs_5_0
hs_5_0 control point
hs_5_0 patch constant
hs_control_point_phase
hs_decls
hs_fork_phase
hs_join_phase
i + (I - i) -> append_arg(I) <| SMR.RangeDataAnalysis
i + -i -> append_arg(0) <| SMR.RangeDataAnalysis
iadd bits_known <| SFPS
iadd fp_flags <| SFPS
iadd int_literal <| SFPS
iadd int_range <| SFPS
iadd zero reduces to no-op mov <| MR.GenSimplifyInstructionsOpt1_NoExcl
iadd(a, b) : if( and_is_zero(a, b) ) -> or(a, b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ibfe bits_known <| SFPS
ibfe fp_flags <| SFPS
ibfe int_literal <| SFPS
ibfe(i) -> extraction sequence <| MR.Gen_RequiredTranslate
ibfe(w, o, ((uint)a >> s) & m) : if( w + o + s < 32 ) -> ibfe(w, o + s, a & (m << s)) <| MR.GenSimplifyInstructionsOpt1_Excl
ibfe(w, o, (a >> s) & m) : if( o + s < 32 ) -> ibfe(w, o + s, a & (m << s)) <| MR.GenSimplifyInstructionsOpt1_Excl
ibfe(w, o, (uint)a >> s) : if( o + s + w < 32 ) -> ibfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ibfe(w, o, a >> s) : if( o + s < 32 ) -> ibfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ibfe(w, o, a) >> s : if( o + s < 32 && w >= s ) -> ibfe(w - s, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
idiv bits_known <| SFPS
idiv currently not supported (instruction deprecated). For now, try using unsigned int types for div instead
idiv fp_flags <| SFPS
idiv int_literal <| SFPS
idiv int_range <| SFPS
if statement conditional expressions must evaluate to a scalar
if(!a) -> ifn(a) <| MR.GenD3D10PostMod_Both
if(bieq(x,0)) -> ifn(x) <| MR.GenD3D10PostMod_Both
if(bilt(0,x)) -> if(x) <| MR.GenD3D10PostMod_Both
if(bine(x,0)) -> if(x) <| MR.GenD3D10PostMod_Both
if(bine(x,0)) -> if(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
if(bult(0,x)) -> if(x) <| MR.GenD3D10PostMod_Both
if(x){...} else {} -> if(x) {...} <| Explicit
if(x){...} if(x){...} -> if(x) {... ...} <| Explicit
if(x){} else {...} -> if(!x) {...} <| Explicit
if+cmp_ge -> if_ge <| MR.Gen_PreModTarget_Both
if+cmp_ge0 -> if_ge0 <| MR.Gen_PreModTarget_Both
if+cmp_lt -> if_lt <| MR.Gen_PreModTarget_Both
if+cmp_lt0 -> if_lt0 <| MR.Gen_PreModTarget_Both
if+ge -> if_ge <| MR.Gen_PreModTarget_Both
if+lt -> if_lt <| MR.Gen_PreModTarget_Both
if_eq(x + y, 0) -> if_eq(x, -y) <| MR.Gen_PreModTarget_Both
if_ge(-a^2,a^2) -> if_eq(a,0) <| MR.Gen_PreModTarget_Both
if_ge(neg(abs(x)), 0) -> if_eq0 <| MR.Gen_PreModTarget_Both
if_ge(x + y, 0) -> if_ge(x, -y) <| MR.Gen_PreModTarget_Both
if_lt(-a^2,a^2) -> if_ne(a,0) <| MR.Gen_PreModTarget_Both
if_lt(neg(abs(x)), 0) -> if_ne0 <| MR.Gen_PreModTarget_Both
if_lt(x + y, 0) -> if_lt(x, -y) <| MR.Gen_PreModTarget_Both
if_ne(x + y, 0) -> if_ne(x, -y) <| MR.Gen_PreModTarget_Both
if_ne(x, 0) -> if_ne(x, -x) <| MR.Gen_PreModTarget_Both
ifdef
ifndef
ignore double move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
ignore move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
imad bits_known <| SFPS
imad fp_flags <| SFPS
imad int_literal <| SFPS
imad int_range <| SFPS
imad match 1 (a + b*c) <| MR.GenMad
imad match 2 (a + b+b) <| MR.GenMad
imaginary square root
imax bits_known <| SFPS
imax fp_flags <| SFPS
imax int_literal <| SFPS
imax int_range <| SFPS
imax(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imax(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imax(imax(i0, l1), l2) -> imax(i0, imax(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imax(x,y) where one is >= the other <| Explicit
imin bits_known <| SFPS
imin fp_flags <| SFPS
imin int_literal <| SFPS
imin int_range <| SFPS
imin(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imin(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imin(imin(i0, l1), l2) -> imin(i0, imin(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
imin(x,y) where one is <= the other <| Explicit
imm_atomic_alloc
imm_atomic_alloc and imm_atomic_consume can't be combined with other atomic operations on an Append UAV (%d). Opcode #%d (counts are 1-based).
imm_atomic_alloc and imm_atomic_consume on a given UAV (%d) cannot both be in the same shader. Opcode #%d (counts are 1-based).
imm_atomic_alloc and imm_atomic_consume require as Structured Buffer UAV (slot %d). Opcode #%d (counts are 1-based).
imm_atomic_alloc fp_flags <| SFPS
imm_atomic_and
imm_atomic_and fp_flags <| SFPS
imm_atomic_cmp_exch
imm_atomic_cmp_exch fp_flags <| SFPS
imm_atomic_consume
imm_atomic_consume fp_flags <| SFPS
imm_atomic_exch
imm_atomic_exch fp_flags <| SFPS
imm_atomic_iadd
imm_atomic_iadd fp_flags <| SFPS
imm_atomic_imax
imm_atomic_imax fp_flags <| SFPS
imm_atomic_imin
imm_atomic_imin fp_flags <| SFPS
imm_atomic_or
imm_atomic_or fp_flags <| SFPS
imm_atomic_umax
imm_atomic_umax fp_flags <| SFPS
imm_atomic_umin
imm_atomic_umin fp_flags <| SFPS
imm_atomic_xor
imm_atomic_xor fp_flags <| SFPS
imod bits_known <| SFPS
imod fp_flags <| SFPS
imod int_literal <| SFPS
imod int_range <| SFPS
implicit truncation of vector type
implicitly 
imul bits_known <| SFPS
imul fp_flags <| SFPS
imul int_literal <| SFPS
imul int_range <| SFPS
imul one reduces to no-op mov <| MR.GenSimplifyInstructionsOpt1_NoExcl
imul(a, iv_pow2) -> ishl(a, get_lowest_bit(iv_pow2)) <| MR.GenD3D10_OptimizeEarlyTranslate
imul(ishl(iv1, a), iv2) -> ishl(imul(iv1, iv2), a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
in %s uints can only be used with known-positive values, use int if possible
include
include interface required to support #include from resource or memory
incorrect number of arguments to numeric-type constructor
indefinite arccosine
indefinite arcsine
indefinite derivative calculation
indefinite logarithm
index
index for an array of complex types containing doubles must be a literal expression
ineg bits_known <| SFPS
ineg fp_flags <| SFPS
ineg int_literal <| SFPS
ineg int_range <| SFPS
ineg(and(ne(x,0),1)) -> ne(x,0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ineg(ineg(x)) -> mov(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
infinite loop detected - loop never exits
infinite loop detected - loop writes no values
initial value
initialize arrays to void <| Explicit
initializer
inline
inner array index within group shared element must be a literal expression for %s
inout
input
input types for geometry shader must be arrays
instance
instanceID already declared for input.  Opcode #%d (count is 1-based). 
instance_id
instruction coissue is not supported in this shader version
instruction predication is not supported in this shader version
int or unsigned int type required
int1x1
int1x2
int1x3
int1x4
int2x1
int2x2
int2x3
int2x4
int3x1
int3x2
int3x3
int3x4
int4x1
int4x2
int4x3
int4x4
integer
integer '%I64'
integer '%dl'
integer '%u'
integer '%u64u64'
integer '%uul'
integer add sequence simplification <| Explicit
integer constant
integer constant register '%s' must be defined as a variable of type int3 or int4 only
integer divides may be much slower, try using uints if possible.
integer inputs unsupported on %s
integer literal %u64 too large, truncated
integer modulus may be much slower, try using uints if possible.
integer movc((a<b),a,b) -> min(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
integer movc((a<b),b,a) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
integer movc((a>=b),a,b) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
integer movc((a>=b),b,a) -> min(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
integer multiply by literal identity <| Explicit
integer multiply by negative one identity <| Explicit
integer multiply by one identity <| Explicit
integer multiply by zero identity <| Explicit
integer negate modifier match <| Explicit
integral
interface
interface arrays cannot be multi-dimensional
interface calls cannot be indexed with varying values
interface decl declares an interface index %d that is not a base register in the interface metadata.  Opcode #%d (count 1-based).
interface decl declares an interface index %d that is not the interface metadata.  Opcode #%d (count 1-based).
interface decl declares an interface index (%d) that has already been declared.  Opcode #%d (count 1-based).
interface decl declares an invalid interface index %d.  Opcode #%d (count 1-based).
interface decl expects a table of size %d, but table %d has %d elements.  Opcode #%d (count 1-based).
interface decl for interface index %d has different function table data than the interface metadata.  Opcode #%d (count 1-based).
interface decl references undefined function table (%d).  Opcode #%d (count 1-based).
interface pointer (%d) was declared, but never referenced.
interface references must resolve to non-varying objects
interface variables can only be initialized with concrete classes
interfaces
interfaces cannot be embedded in other types
interfaces cannot inherit from other types
interlocked targets must be groupshared or UAV elements
internal error gathering debug file information
internal error gathering debug input information
internal error gathering debug scope information
internal error gathering debug variable information
internal error: 64-bit arg component %u not aligned <| A%u (B%u)
internal error: AND operator inputs not bool
internal error: Constant buffer used as address
internal error: DST test failure
internal error: IF with size greater then 1 found
internal error: OR operater inputs not bool
internal error: Rule class id invalid
internal error: addressing inconsistent pool
internal error: argument missing context <| A%u (B%u)
internal error: argument pulled into unrelated predicate
internal error: argument used without having been initialized <| A%u (B%u), I%u (B%u)
internal error: argument was never used <| (A%u (B%u))
internal error: argument was never used <| (A%u (B%u), I%u (B%u))
internal error: binary instruction expected
internal error: blob content mismatch between level9 and d3d10 shader
internal error: blob mismatch between level9 and d3d10 shader
internal error: blob size mismatch between level9 and d3d10 shader
internal error: cannot read from argument pool <| (A%u (B%u))
internal error: cannot write to argument pool <| (A%u (B%u), I%u (B%u))
internal error: chain register invalid
internal error: compilation aborted unexpectedly
internal error: component out of range
internal error: debug info append failed, byte count (%d) too large?
internal error: expected binary instruction for scalar RHS
internal error: expected scalar RHS for instruction
internal error: expression expected
internal error: failed generating debug info
internal error: failed to devirtualize a contained interface call
internal error: failed to emit instruction
internal error: flattened side effect
internal error: gradient instruction sent to preshader
internal error: inconsistent addressing
internal error: inconsistent derivative writer
internal error: input register missing semantic
internal error: instruction list and count mismatch
internal error: instruction list too long
internal error: instruction missing outputs
internal error: instruction size mismatch
internal error: invalid access of unbound variable
internal error: invalid register
internal error: invalid sequence/cast expression
internal error: invalid swizzle found
internal error: l-value expected
internal error: modifier used on address
internal error: multiple write to same output
internal error: no profile exists for this pixel shader version
internal error: no profile exists for this shader version
internal error: no profile exists for this vertex shader version
internal error: no semantic found on i/o argument
internal error: no storage type for block output
internal error: non ordinal input/output found
internal error: non-vectorized pool violated port constraints
internal error: not all rules initialized
internal error: operand type mismatch
internal error: out of memory
internal error: output argument was never initialized <| (A%u (B%u))
internal error: output found with no semantic
internal error: output register missing semantic
internal error: overlapping output writes
internal error: production failed
internal error: reading from value known not to be read <| (A%u (B%u))
internal error: result register invalid
internal error: result violated port constraints
internal error: scalar instruction with too many inputs
internal error: stack underflow
internal error: statistics append failed, byte count (%d) too large?
internal error: this-relative %s '%s' found outsideof function scope
internal error: unable to add non-conflicting symbol
internal error: unable to process intrinsic
internal error: unassociated return
internal error: unexpected Alias on texture declaration
internal error: unexpected input register type
internal error: unexpected output register type
internal error: unknown node
internal error: unpredicated incomplete
internal error: unpredicated loop_in
internal error: unrecognized expression
internal error: unrecognized geometry shader input primitive type
internal error: unrecognized statement
internal error: unrecognized value
internal error: vectorized instruction too large
internal warning: loop values did not converge
internal warning: optimization did not converge
internal warning: values did not converge
intrinsic function
intrinsic function '%s' is not yet implemented
intrinsic method
invalid
invalid %s %s
invalid %s semantic '%s': Legal indices are in [%d,%d]
invalid compiler flag %s
invalid complement expression
invalid instruction modifiers '%s'
invalid interface binding parameter
invalid mask '%s'
invalid or unsupported integer constant expression
invalid packoffset location '%s'
invalid preprocessor command '%s'
invalid reference to input semantic '%s%d'
invalid reference to output semantic '%s%d'
invalid register '%s'
invalid register '%s[%u]'
invalid register '%s[...]'
invalid register semantic '%s', or variable must be bound to multiple register banks (%c register binding required)
invalid register specification, expected 'b' or 'c' binding
invalid register specification, expected 't' binding
invalid register, input, or constant name '%s'
invalid semantic '%s' on pixel shader output
invalid subscript '%s'
invalid swizzle '%s'
invalid type for index - index must be a scalar, or a vector with the correct number of dimensions
invalid type used for '%s' %s semantics
invalid type used for '%s' %s semantics, must be %s
invalid usage modifier applied to %cbuffer
invalid variable reference in static variable initializer.  Locals cannot be used to initialize static variables
ipfx'f
isFrontFace already declared for input.  Opcode #%d (count is 1-based). 
isFrontFace already declared for output.  Opcode #%d (count is 1-based). 
is_front_face
isalnum
isalpha
isdigit
isfinite
ishl bits_known <| SFPS
ishl fp_flags <| SFPS
ishl int_literal <| SFPS
ishl(and(a, m), n) : if( and_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ishl(and(m, a), n) : if( and_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ishl(iadd(a, iv1), iv2) -> iadd(ishl(a, iv2), ishl(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(imul(a, iv1), iv2) : if(low_bit_clear(iv2)) -> imul(ishl(a, iv2/2), ishl(iv1, iv2/2)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(ineg(a), iv1) -> ineg(ishl(a, iv1)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(ishl(a, b), c) : if( nooverflow_mod_32(b, c) ) -> ishl(a, iadd(b, c)) <| MR.GenSimplifyInstructionsOpt1_Excl
ishl(or(a, m), n) : if( or_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ishl(or(m, a), n) : if( or_is_identity_ignore_upper_n_bits(a, m, n) -> ishl(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ishr bits_known <| SFPS
ishr fp_flags <| SFPS
ishr int_literal <| SFPS
ishr(ishr(a, b), c) : if( nooverflow_mod_32(b, c) ) -> ishr(a, iadd(b, c)) <| MR.GenSimplifyInstructionsOpt1_Excl
isinf
isnan
isoline
isspace
isxdigit
iterator
itob bits_known <| SFPS
itob fp_flags <| SFPS
itob int_literal <| SFPS
itob int_range <| SFPS
itob(x) -> bine(x,0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
itof fp_flags <| SFPS
itof(ftoi(x)) -> trunc(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
j@_WhX@
jQhDP
jQhLP
jQhTP
jT;1_
jbh` 
jch` 
jih` 
jsj@h
jsj@j
jszl@
jtj@VVh
jtj@j
juj@Vh
l-value specifies const object
l1p1t1
l2i3y4
l3p3t3
label
label (%d) already defined. Opcode #%d (count 1-based). 
label (%d) being defined without any callers. Shader Model 5+ requires all callers to a subroutine to appear before the subroutine definition. Aborting.Opcode #%d (count 1-based). 
label (%d) called but not defined.
label (%d) defined but never called.
label (%d) must be preceded by a ret. Opcode #%d (count 1-based). Aborting validation.
label (%d) must not be nested inside flow control. Opcode #%d (count 1-based). Aborting validation.
label (%d) was never used in the shader
late-resolve interface calls nested too deeply
ld does not support raw or structured buffers.  Opcode #%d, operand #%d (counts are 1-based). 
ld requires resource declared as texture1D/2D/3D/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
ld2dms requires resource declared as texture2DMS/texture2DMSArray.  Opcode #%d, operand #%d (counts are 1-based). 
ld_raw
ld_raw cannot be used on a resource that is not declared as raw (resource index [%d]). Opcode #%d (counts are 1-based).
ld_raw requires resource declared as Raw Buffer.  Opcode #%d, operand #%d (counts are 1-based). 
ld_structured
ld_structured cannot be used on a resource that is not declared as structured (resource index [%d]). Opcode #%d (counts are 1-based).
ld_structured requires resource declared as Structured Buffer.  Opcode #%d, operand #%d (counts are 1-based). 
ld_uav_typed
ld_uav_typed cannot be used on a UAV that is not declared as typed (u%d). Opcode #%d (counts are 1-based).
ldexp
length
lerp(fbool, a, 0) -> append_arg(a,0) <| SMR.RangeDataAnalysis
lerp(fbool, a, b) -> append_arg(a,b) <| SMR.RangeDataAnalysis
lerp(fbool, finite a, 0) -> append_arg(a,0) <| SMR.RangeDataAnalysis
lerp(fbool, finite a, finite b) -> append_arg(a,b) <| SMR.RangeDataAnalysis
levels
limit
lineadj
linear
literal loop terminated early due to out of bounds array access
load fp_flags <| SFPS
load2d_msaa fp_flags <| SFPS
load2d_msaa_o fp_flags <| SFPS
load2darray_msaa fp_flags <| SFPS
load2darray_msaa_o fp_flags <| SFPS
load_o fp_flags <| SFPS
local
local variables
location semantics cannot be specified on members
location semantics do not apply to %ss
lod instruction requires sampler declared in default mode.  Opcode #%d, operand #%d (counts are 1-based). 
lod requires resource declared as texture1D/2D/3D/Cube/CubeArray/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
log float_literal <| SFPS
log fp_flags <| SFPS
log fp_range <| SFPS
log fp_specials <| SFPS
log(exp(x)) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
log10
loop doesn't seem to do anything, consider removing [loop]
loop doesn't seem to do anything, forcing loop to unroll
loop executes for more than %d iterations (maximum for this shader target), forcing loop to unroll
loop only executes for %d iteration(s), consider removing [loop]
loop only executes for %d iteration(s), forcing loop to unroll
loop simulation finished early, use /O1 or above for potentially better codegen
loop termination conditions in varying flow control cannot depend on data read from a UAV
loop variables
loop will not exit early, try to make sure the loop condition as tight as possible
loop(a) -> append_sources() (loop predicate linkage) <| SMR.DataFlagAnalysis_NoPlaceHolder
loop_endif(a) -> append_arg(a, pred_a) <| SMR.DataFlagAnalysis
loop_endif(a,b) -> append_arg(a,b,p_a) <| SMR.DataFlagAnalysis
loop_in(completed a) -> o->append_inloop() <| SMR.DataFlagAnalysis
loop_in(completed a) -> o->append_inloop() <| SMR.RangeDataAnalysis
loopif fp_flags <| SFPS
loopif_consume fp_flags <| SFPS
lstrcmpiA
lt float_literal <| SFPS
lt fp_flags <| SFPS
lt fp_range <| SFPS
lt of known range reduction <| Explicit
lt(a, b) -> cmp(a - b, 0f, 1f) <| MR.Gen_RequiredTranslate
mad float_literal <| SFPS
mad fp_flags <| SFPS
mad fp_range <| SFPS
mad fp_specials <| SFPS
mad match 1 (a + b*c) <| MR.GenMad
mad match 2 (a - b*c) <| MR.GenMad
mad match 3 (a + b+b) <| MR.GenMad
mad match 4 (a - b+b) <| MR.GenMad
malloc
matrix
matrix dimensions must be between 1 and %u
matrix dimensions must be literal scalar expressions
matrix element type must be a scalar type
matrix types cannot be both column_major and row_major
max 0/min 1 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
max float_literal <| SFPS
max fp_flags <| SFPS
max fp_range <| SFPS
max fp_specials <| SFPS
max of known positive identity <| Explicit
max of neg idenity to abs instruction match <| Explicit
max(a, -a) -> abs <| MR.Gen_RequiredTranslate
max(a, b) -> cmp(a - b, a, b) <| MR.Gen_RequiredTranslate
max(i, neg(i)) -> abs <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
max(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
max(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
max(max(i0, l1), l2) -> max(i0, max(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
max(x,y) where range of one is >= the other (ieee safe version) <| Explicit
max(x,y) where range of one is >= the other <| Explicit
maximum %s %s register index (%u) exceeded - note that the minimum index is %u%s
maximum %s %s register index (%u) exceeded%s
maximum %s register index exceeded, target has %d slots, manual bind to slot %s failed
maximum address register index exceeded
maximum bool register index exceeded
maximum cbuffer exceeded. target has %u slots
maximum cbuffer exceeded. target has %u slots, manual bind to slot %u failed
maximum constant register index exceeded - Try reducing number of constants referenced
maximum input register index exceeded
maximum loop register index exceeded
maximum number of inputs exceeded
maximum number of interface pointers exceeded (%s max is %u)
maximum number of samplers exceeded. %s target can have a maximum of %u samplers
maximum predicate register index exceeded
maximum sampler register index exceeded
maximum temp register index exceeded
maxtessfactor
maxvertexcount
mdmJT
members
memcpy
memmove
memory exhausted
memset
message
method
methods
min 1/max 0 -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_Excl
min float_literal <| SFPS
min fp_flags <| SFPS
min fp_range <| SFPS
min fp_specials <| SFPS
min of known positive identity <| Explicit
min(a, b) -> cmp(a - b, b, a) <| MR.Gen_RequiredTranslate
min(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
min(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
min(min(i0, l1), l2) -> min(i0, min(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
min(x,y) where range of one is <= the other (ieee safe version) <| Explicit
min(x,y) where range of one is <= the other <| Explicit
mixed
modulo
mov fp_flags <| SFPS
mov mov <| SFPS
mov of sampler register reduction <| Explicit
movc and comparison sequence reductions <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc float_literal <| SFPS
movc fp_flags <| SFPS
movc fp_specials <| SFPS
movc(!a,b,c) -> movc(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc((a<b),a,b) -> min(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc((a<b),b,a) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc((a>=b),a,b) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc((a>=b),b,a) -> min(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, and(b, c), 0) -> and(and(a, b), c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, b, and(c, b)) -> and(or(a, c), b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, b, i/ushr/l(a, n)) -> movc(a, b, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, b, movc(c, b, d)) -> movc(or(a, c), b, d) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, i/ushr/l(a, n), 0) -> i/ushr/l(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a, true, b) -> or(a, b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a,b,b) -> mov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a,b,c) -> append_arg(b, c) <| SMR.RangeDataAnalysis
movc(a,false,true) -> bieq(a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(a,true,false) -> bine(a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(b & iv_pow2, (b & m) | -iv_pow2, b) -> ibfe(get_first_bit(iv_pow2), 0, (b&m)) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b & iv_pow2, b | -iv_pow2, b) -> ibfe(get_first_bit(iv_pow2), 0, b) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b & iv_pow2, bfi(w, 0, (b & m), -iv_pow2)) -> ibfe(get_first_bit(iv_pow2), 0, (b&m)) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b & iv_pow2, bfi(w, 0, b, -iv_pow2), b) -> ibfe(get_first_bit(iv_pow2), 0, b) <| MR.GenD3D10_OptimizeEarlyTranslate
movc(b, a, b) -> movc (b, a, 0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(blt(a, 0), |a|, a) -> abs(a) <| MR.GenD3D10PreMod_NoExcl
movc(bool b, FALSE, TRUE) -> not b <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool b, TRUE, FALSE) -> mov b <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool b, TRUE, bool c) -> or(b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool b, bool b, false) -> mov b <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(bool,x,0) -> and(bool,x) <| MR.GenSimplifyInstructionsOpt2_NoExcl
movc(c,a,ignore) -> mov(a) <| MR.GenSimplifyInstructionsAlways_Both
movc(c,d=movc(c,a,b),f) -> movc(c,a,f) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(c,f,d=movc(c,a,b)) -> movc(c,f,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(c,ignore,a) -> mov(a) <| MR.GenSimplifyInstructionsAlways_Both
movc(c,ignore,ignore) -> ignore(0) <| MR.GenSimplifyInstructionsAlways_Both
movc(false,b,c) -> append_arg(b) <| SMR.RangeDataAnalysis
movc(false,b,c) -> mov(c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(i/ushr(a, n),v1, v2) : if(lower_n_bits_are_zero(a, n)) -> movc (a, v1, v2) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(ishl(a, n),v1, v2) : if(upper_n_bits_are_zero(a, n)) -> movc (a, v1, v2) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(movc(a,FALSE,TRUE),b,c) -> movc(a,c,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(movc(a,TRUE,FALSE),b,c) -> movc(a,b,c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(true,b,c) -> append_arg(b) <| SMR.RangeDataAnalysis
movc(true,b,c) -> mov(b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc(u/ishr/l(a, n), movc(a, b, c), d) -> movc(u/ishr/l(a, n), b, d) <| MR.GenSimplifyInstructionsOpt1_NoExcl
movc, binary_compute on same value -> binary_compute, movc <| MR.GenShuffleCompute_NoExcl
movc, binary_compute on values -> binary_compute, movc <| MR.GenShuffleCompute_NoExcl
movc, binary_compute on values lhs -> binary_compute, movc <| MR.GenShuffleCompute_Excl
movc, binary_compute on values rhs -> binary_compute, movc <| MR.GenShuffleCompute_Excl
movc, quat arg1 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg1 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg1 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg2 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg2 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg2 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg3 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg3 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg3 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg4 on values -> quat, movc <| MR.GenShuffleCompute_NoExcl
movc, quat arg4 on values lhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, quat arg4 on values rhs -> quat, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg1 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
movc, ternary arg1 on values lhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg1 on values rhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg2 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
movc, ternary arg2 on values lhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg2 on values rhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg3 on values -> ternary, movc <| MR.GenShuffleCompute_NoExcl
movc, ternary arg3 on values lhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, ternary arg3 on values rhs -> ternary, movc <| MR.GenShuffleCompute_Excl
movc, unary_compute on values -> unary_compute, movc <| MR.GenShuffleCompute_NoExcl
movc, unary_compute on values lhs -> unary_compute, movc <| MR.GenShuffleCompute_Excl
movc, unary_compute on values rhs -> unary_compute, movc <| MR.GenShuffleCompute_Excl
msvcrt.dll
mul float_literal <| SFPS
mul fp_flags <| SFPS
mul fp_range <| SFPS
mul fp_specials <| SFPS
mul of a half times add of same value identity <| Explicit
mul of a number times its inverse identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
mul of double one identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
mul of one identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
mul(1f,a) -> append_arg(a) <| SMR.RangeDataAnalysis
mul(fbool,a) -> append_arg(0f,a) <| SMR.RangeDataAnalysis
mul(fbool,finite a) -> append_arg(0f,a) <| SMR.RangeDataAnalysis
multiple concrete base types specified
multiple variables found with the same user-specified location
multiply
must be equal to the number of threads in the group (%d in this case).  %d elements were specified for g%d. 
mutable
n<}up
nCipher DSE ESN:85D3-305C-5BCF1%0#
namespace
neg float_literal <| SFPS
neg fp_flags <| SFPS
neg fp_range <| SFPS
neg fp_specials <| SFPS
negate
negate and divide modifiers cannot be combined
negate modifier match <| Explicit
negative bool less then another bool identity <| Explicit
no classes implement '%s'
nointerpolation
nointerpolation usage unsupported on %s
noise
non-empty case statements must have break or return
non-literal parameter(s) found for attribute %s
non-matrix types cannot be declared 'row_major' or 'column_major'
non-numeric case expression
non-numeric sample count
non-numeric vertex count
non-scalar case expression
non-trivial object expressions not yet implemented
noperspective
noperspective usage unsupported on %s
normal
normalize
normalize(normalize(v)) -> normalize(v) <| MR.GenSimplifyInstructionsOpt1_NoExcl
not bits_known <| SFPS
not cannot be used with other modifiers
not enough actual parameters for macro '%s'
not fp_flags <| SFPS
not int_literal <| SFPS
nullify clip ops on known positive values <| MR.GenSimplifyInstructionsOpt1_NoExcl
nullify discard ops on known false values <| MR.GenSimplifyInstructionsOpt1_NoExcl
numthreads
o = $IsStandardLoad(a, chain) -> append_addressed(o, chain) (all sources) <| SMR.DataFlagAnalysis_NoPlaceHolder
o = dfuse(ab) -> o->append_dfuse() <| SMR.DataFlagAnalysis
o8t'h
oDepth
oDepthGE
oDepthLE
oMask
object element type cannot be an object type
object literals are not allowed inside functions
object's templated type must have at least one element
octal value truncated to 64 bits
offset
offset texture instructions must take offset which can resolve to integer literal in the range -8 to 7
one of "integer", "pow2", "fractional_even", or "fractional_odd"
one of "point", "line", "triangle_cw", or "triangle_ccw"
one of "tri", "quad", or "isoline"
one of '%s'
only a0.x is allowed as a relative address register in vs_1_1
only one address register reference allowed in a relative address expression
only one address register reference is allowed in a relative address expression
only vs_1_1, vs_2_0, vs_2_x, vs_2_sw, ps_2_0, ps_2_x, and ps_2_sw are supported for assembly fragments
operator
operator cannot be used with a bool lvalue
or bits_known <| SFPS
or fp_flags <| SFPS
or int_flags <| SFPS
or int_literal <| SFPS
or(a, b) : if( and_is_zero(a, b) ) -> iadd(a, b) <| MR.GenD3D10PostMod_Both
or(a, iv2) : if( can_reduce_or(a, iv2) ) -> or(a, get_reduced_or(a, iv2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(and(a, iv1), iv2) if(and_ne_zero(iv1, iv2) -> or(and(a, iv1 & ~iv2), iv2) <| MR.GenSimplifyInstructionsOpt1_Excl
or(bfalse,a) -> append_arg(a) <| SMR.RangeDataAnalysis
or(ine(x,0),ine(y,0)) -> ine(or(x,y),0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(or(a, b), c) : if( or_is_identity(c, b) ) -> or(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(or(b, a), c) : if( or_is_identity(c, b) ) -> or(a, c) <| MR.GenSimplifyInstructionsOpt1_NoExcl
or(true,a) -> append_arg(true,a) <| SMR.RangeDataAnalysis
original
out of memory
out of memory while parsing
out parameters require l-value arguments
out parameters require l-value arguments (given argument is implicitly const, such as a global)
output
output %s%u used more than once
output parameter 
output_consume fp_flags <| SFPS
outputcontrolpoints
outputtopology
overlapping output semantics
overlapping register semantics not yet implemented '%c%u'
overlapping register semantics not yet implemented 'c%u'
overloaded function not found
p tC=
p tG=
p w.t"=
p!t =
p!t'=
p!t6=
p!t]=
p"t0=
p#t-=
p#tL=
p#tO=
p$RVh
p$RVh(
p0h`e
p0t0x0
pEntrypoint pointer is invalid
pPt<=
pPtZ=
pPw!tF
pPw2t>=
pPwGt==
pPwStL=
pPw[tT=
pPw]tV=
pPw_tX=
pPwttm=
pPwvto
pPwytr
pPw{tt=
pQt =
pQt'=
pQt4=
pQt5=
pQt\=
pQt~=
p`t<=
p`wQt"=
pack_matrix
packoffset
packoffset cannot have a target qualifier
packoffset is only allowed in a constant buffer
parameter count mismatch (%s)
parameter list
partitioning
partitioning mode
passes
patchconstantfunc
pawbt
pbtN=
pbtU=
pbtl=
pcw+t?=
pdr_?
pdr_m
pdr_robj
pdr_s
pdr_sc
pdr_t
pdr_tb
pdr_ts
pdr_ub
pdr_us
pdr_ut
pftG=
pgw#t
phase
pixel shader must minimally write all four components of %s
pixel shader must minimally write all four components of COLOR0
pixelfragment
pixelshader
placement_mov fp_flags <| SFPS
placement_mov mov <| SFPS
point
pos cmp sequence -> sat <| MR.Gen_OptimizeEarlyTranslate_SAT_NoExcl
position
position already declared for input.  Opcode #%d (count is 1-based). 
position already declared for output.  Opcode #%d (count is 1-based). 
position declaration must have xyzw mask.  Opcode #%d (count is 1-based). 
positiont
positive sqrt(x*x) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
potentially unintended use of a comma expression in a return statement
potentially unintended use of a comma expression in a variable initializer
pow(f, e) will not work for negative f, use abs(f) or conditionally handle negative values if you expect them
ppShader pointer is invalid
pragma
precise
precise 
pred move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
predicates are not supported in this shader version
preshader
preshader abs -> max(i, neg(i)) <| MR.Gen_RequiredTranslate_Preshader
preshader sat -> min(max(i, 0), 1) <| MR.Gen_RequiredTranslate_Preshader
primitiveID already declared for input.  Opcode #%d (count is 1-based). 
primitiveID already declared for output.  Opcode #%d (count is 1-based). 
primitive_id
printf
printf 
private
propagate range info through mov <| Explicit
propagate special floating point values through asin <| Explicit
propagate special floating point values through atan2 <| Explicit
propagate special floating point values through div <| Explicit
propagate special floating point values through log <| Explicit
propagate special floating point values through mul <| Explicit
propagate special floating point values through rcp <| Explicit
propagate special floating point values through rsq <| Explicit
propagate special floating point values through sqrt <| Explicit
propogate swizzles <| Explicit
protected
proto
ps.1.0
ps.1.1
ps.1.2
ps.1.3
ps.1.4
ps.2.0
ps.2.a
ps.2.b
ps.2.sw
ps.2.x
ps.3.0
ps.3.sw
ps_%d_%d
ps_1_0
ps_1_0 is no longer supported; using ps_1_1
ps_1_1
ps_1_2
ps_1_3
ps_1_4
ps_1_x is no longer supported; use /Gec in fxc to automatically upgrade to ps_2_0
ps_1_x is no longer supported; using ps_2_0
ps_2_0
ps_2_a
ps_2_b
ps_2_sw
ps_2_x
ps_3_0
ps_3_sw
ps_4_0
ps_4_0_level_9_0
ps_4_0_level_9_1
ps_4_0_level_9_3
ps_4_1
ps_5_0
psize
pu1QR
public
pwIt4=
pwRt7=
q,B;W
q,j@3
q`;s`u/
qsort
r | (a & n) : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
r | (a = bfi(w, o, v, 0i)) : if( mask_is_zero(w,o,r) ) -> bfi(w, o, v, r) <| MR.GenSimplifyInstructionsOpt1_Excl
r | (n & a) : if( known_bfi_bitmask_noshift(n,a,r) && and_is_zero(n,r) ) -> bfi(bfi_bitwidth_noshift(n,a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
r | a : if( known_bfi_bitmask_noshift_impmask(a,r) && and_is_zero(a,r) ) -> bfi(bfi_bitwidth_noshift_impmask(a,r), 0i, a, r) <| MR.GenD3D10_OptimizeEarlyTranslate_Excl
r!h|A
r"HPQh
r#w	9
r,91t
r-9\$(w'r
r/w+cnt
r0p1+0)
r=h|A
race condition may make sync dependent on this potentially varying variable: %s
race condition writing to shared memory detected, consider making this write conditional.
race condition writing to shared memory detected, note that threads will be writing the same value, but performance may be diminished due to contention.
race condition writing to shared resource detected, consider making this write conditional.
race condition writing to shared resource detected, note that threads will be writing the same value, but performance may be diminished due to contention.
radians
range sequence reduction <| Explicit
rasterizer
raw_buffer
rcp float_literal <| SFPS
rcp fp_flags <| SFPS
rcp fp_range <| SFPS
rcp fp_specials <| SFPS
rcp(mul(x, rsq(x)) = rsq(x) identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
rcp_approx float_literal <| SFPS
rcp_approx fp_flags <| SFPS
rcp_approx fp_range <| SFPS
rcp_approx fp_specials <| SFPS
redefinition of '%s'
redefinition of formal parameter '%s'
redefinition of type with interface
redefinition of type with struct/class
reduce literal lit instruction <| Explicit
reduce mov instruction <| Explicit
refactoringAllowed
reflect
refract
register
register %s not valid
register offset must be a literal scalar expression
register or offset bind %s not valid
register or offset bind %s.%s not valid
reinterpret_cast
relative address references too deep
relative addressing not allowed for pixel shaders
relative addressing not supported in vs_1_0 instruction set
relative addressing of destination parameters is not supported in this shader version
relative addressing of predicates is not supported in this shader version
remove clip chains that are merged with known-success clips <| MR.GenSimplifyInstructionsOpt1_NoExcl
remove clips that are merged with known-success clips <| MR.GenSimplifyInstructionsOpt1_NoExcl
remove discard chains that are merged with known-success discards <| MR.GenSimplifyInstructionsOpt1_NoExcl
remove discards that are merged with known-success discards <| MR.GenSimplifyInstructionsOpt1_NoExcl
renderTargetArrayIndex already declared for input.  Opcode #%d (count is 1-based). 
renderTargetArrayIndex already declared for output.  Opcode #%d (count is 1-based). 
renderTargetArrayIndex or viewportArrayIndex must have scalar mask in declaration.  Opcode #%d (count is 1-based). 
rendertarget_array_index
reorder instructions to minimize register load <| Explicit
replace bitwise double-complement with move <| MR.GenSimplifyInstructionsOpt1_NoExcl
reserved0
resinfo
resinfo fp_flags <| SFPS
resinfo requires resource declared as texture1D/2D/3D/Cube/1DArray/2DArray/2DMS/2DMSArray.  Opcode #%d, operand #%d (counts are 1-based). 
resinfo_uint fp_flags <| SFPS
resources such as textures, samplers or UAVs cannot contain other resources
result
ret can only be followed by case/default/endswitch/endloop/else/endif/label. Opcode #%d (count 1-based). Aborting validation.
return
return fp_flags <| SFPS
return never match (to NOP) <| MR.GenSimplifyInstructionsAlways_Both
return type of texture too large. Cannot exceed 4 components
return(a,bieq(x,0)) -> returnn(a,x) <| MR.Gen_PreModTarget_Both
return(a,bine(x)) -> return(a,x) <| MR.Gen_PreModTarget_Both
return(a,not(x)) -> returnn(a,x) <| MR.Gen_PreModTarget_Both
return_consume fp_flags <| SFPS
returna match <| MR.GenD3D10PostMod_Both
reversebits
reversebits bits_known <| SFPS
reversebits fp_flags <| SFPS
reversebits int_literal <| SFPS
reversebits(i) -> and/shift/or sequence <| MR.Gen_RequiredTranslate
round
round float_literal <| SFPS
round fp_flags <| SFPS
round fp_range <| SFPS
round fp_specials <| SFPS
round_ne
round_ni
round_pi
round_z
row_major
row_major 
row_major %s%ux%u
rsq float_literal <| SFPS
rsq fp_flags <| SFPS
rsq fp_range <| SFPS
rsq fp_specials <| SFPS
rsq result can be assumed positive <| Explicit
rsq(x) * rsq(x) -> rcp(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
rsq(x) * rsq(x) -> rcp(x) for positive x <| MR.GenSimplifyInstructionsOpt1_NoExcl
rsqrt
ruledisable
s49s<
s<9s4
sample
sample count must be non-zero
sample interpolation usage unsupported on %s
sample/_l/_d instructions require sampler declared in default mode.  Opcode #%d, operand #%d (counts are 1-based). 
sample/_l/_d requires resource declared as texture1D/2D/3D/Cube/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
sample1d fp_flags <| SFPS
sample1d_a fp_flags <| SFPS
sample1d_a_o fp_flags <| SFPS
sample1d_bias fp_flags <| SFPS
sample1d_bias_a fp_flags <| SFPS
sample1d_bias_a_o fp_flags <| SFPS
sample1d_bias_l fp_flags <| SFPS
sample1d_bias_o fp_flags <| SFPS
sample1d_c fp_flags <| SFPS
sample1d_c_a fp_flags <| SFPS
sample1d_c_a_o fp_flags <| SFPS
sample1d_c_lz fp_flags <| SFPS
sample1d_c_lz_a fp_flags <| SFPS
sample1d_c_lz_a_o fp_flags <| SFPS
sample1d_c_lz_o fp_flags <| SFPS
sample1d_c_o fp_flags <| SFPS
sample1d_dd fp_flags <| SFPS
sample1d_dd_a fp_flags <| SFPS
sample1d_dd_a_o fp_flags <| SFPS
sample1d_dd_o fp_flags <| SFPS
sample1d_lod fp_flags <| SFPS
sample1d_lod_a fp_flags <| SFPS
sample1d_lod_a_o fp_flags <| SFPS
sample1d_lod_l fp_flags <| SFPS
sample1d_lod_o fp_flags <| SFPS
sample1d_o fp_flags <| SFPS
sample2d fp_flags <| SFPS
sample2d_a fp_flags <| SFPS
sample2d_a_o fp_flags <| SFPS
sample2d_bias fp_flags <| SFPS
sample2d_bias_a fp_flags <| SFPS
sample2d_bias_a_o fp_flags <| SFPS
sample2d_bias_l fp_flags <| SFPS
sample2d_bias_o fp_flags <| SFPS
sample2d_c fp_flags <| SFPS
sample2d_c_a fp_flags <| SFPS
sample2d_c_a_o fp_flags <| SFPS
sample2d_c_lz fp_flags <| SFPS
sample2d_c_lz_a fp_flags <| SFPS
sample2d_c_lz_a_o fp_flags <| SFPS
sample2d_c_lz_o fp_flags <| SFPS
sample2d_c_o fp_flags <| SFPS
sample2d_dd fp_flags <| SFPS
sample2d_dd_a fp_flags <| SFPS
sample2d_dd_a_o fp_flags <| SFPS
sample2d_dd_o fp_flags <| SFPS
sample2d_lod fp_flags <| SFPS
sample2d_lod_a fp_flags <| SFPS
sample2d_lod_a_o fp_flags <| SFPS
sample2d_lod_l fp_flags <| SFPS
sample2d_lod_o fp_flags <| SFPS
sample2d_o fp_flags <| SFPS
sample3d fp_flags <| SFPS
sample3d_bias fp_flags <| SFPS
sample3d_bias_l fp_flags <| SFPS
sample3d_bias_o fp_flags <| SFPS
sample3d_dd fp_flags <| SFPS
sample3d_dd_o fp_flags <| SFPS
sample3d_lod fp_flags <| SFPS
sample3d_lod_l fp_flags <| SFPS
sample3d_lod_o fp_flags <| SFPS
sample3d_o fp_flags <| SFPS
sampleIndex
sampleIndex already declared for input.  Opcode #%d (count is 1-based). 
sample_* instructions require resource to be declared to return UNORM, SNORM or FLOAT.  Opcode #%d, operand #%d (counts are 1-based). 
sample_b
sample_b requires resource declared as texture1D/2D/3D/Cube/1DArray/2DArray.  Opcode #%d, operand #%d (counts are 1-based). 
sample_b requires sampler declared in default mode.  Opcode #%d, operand #%d (counts are 1-based). 
sample_c
sample_c_* instructions require resource declared as texture1D/2D/Cube, but arrays not allowed.  Opcode #%d, operand #%d (counts are 1-based). 
sample_c_* instructions require resource declared as texture1D/2D/Cube/1DArray/2DArray/CubeArray.  Opcode #%d, operand #%d (counts are 1-based). 
sample_c_* instructions require sampler declared in comparison mode.  Opcode #%d, operand #%d (counts are 1-based). 
sample_c_lz
sample_d
sample_l
samplecube fp_flags <| SFPS
samplecube_a fp_flags <| SFPS
samplecube_bias fp_flags <| SFPS
samplecube_bias_a fp_flags <| SFPS
samplecube_bias_l fp_flags <| SFPS
samplecube_c fp_flags <| SFPS
samplecube_c_a fp_flags <| SFPS
samplecube_c_lz fp_flags <| SFPS
samplecube_c_lz_a fp_flags <| SFPS
samplecube_dd fp_flags <| SFPS
samplecube_dd_a fp_flags <| SFPS
samplecube_lod fp_flags <| SFPS
samplecube_lod_a fp_flags <| SFPS
samplecube_lod_l fp_flags <| SFPS
sampleinfo
sampleinfo fp_flags <| SFPS
sampleinfo_rt fp_flags <| SFPS
sampleinfo_uint fp_flags <| SFPS
sampleinfo_uint_rt fp_flags <| SFPS
samplepos
samplepos fp_flags <| SFPS
samplepos_rt fp_flags <| SFPS
sampler
sampler mismatch: sampler used inconsistently
sampler1D
sampler2D
sampler3D
samplerCUBE
sampler_c
sampler_state
samples
sat float_literal <| SFPS
sat fp_flags <| SFPS
sat fp_range <| SFPS
sat instruction to sat modifier match <| Explicit
saturate
sbh|A
sbyte
scalar registers cannot be masked
scalar registers cannot be swizzled
scalar value expected
scalar, vector, or matrix expected
scope
search for instancing opportunities in hull shaders <| Explicit
secondary array dimensions must be explicit
semantic '%s' unsupported on %s
semantics in type overridden by variable/function or enclosing type
setlocale
shader version expected
shared
shift of commutative inputs <| Explicit
shift of commutative literals <| Explicit
short
signed
signed/unsigned mismatch between destination and value, unsigned assumed
signed/unsigned mismatch, unsigned assumed
simplify chain merges that bring in chain input <| MR.GenSimplifyInstructionsOpt1_NoExcl
simplify chain merges that bring in chain input via mov left <| MR.GenSimplifyInstructionsOpt1_NoExcl
simplify chain merges that bring in chain input via mov right <| MR.GenSimplifyInstructionsOpt1_NoExcl
sin float_literal <| SFPS
sin fp_flags <| SFPS
sin fp_range <| SFPS
sin fp_specials <| SFPS
sincos
sincos float_literal <| SFPS
sincos fp_flags <| SFPS
sincos fp_range <| SFPS
sincos fp_specials <| SFPS
single
single 
sizeof
sj91t	
sl;qlu
smoothstep
snorm
snorm 
source component %d in temp r%d not initialized. Opcode #%d (count is 1-based)
source indexable temp register component %d in x%d[*] never initialized anywhere.Opcode #%d (count is 1-based)
source modifiers are not allowed on destination parameters
source modifiers are not allowed on predicates
source modifiers incompatible with SUB instruction
source register relative index indexable-temp register component %d in x[%d][%d] uninitialized. Opcode #%d (count is 1-based)
source register relative index temp register component %d in r%d uninitialized. Opcode #%d (count is 1-based)
split literal sum ishl to allow literalization <| MR.GenSimplifyInstructionsOpt1_Excl
split literal sum ishr to allow literalization <| MR.GenSimplifyInstructionsOpt1_Excl
split literal sum ushr to allow literalization <| MR.GenSimplifyInstructionsOpt1_Excl
sqrt float_literal <| SFPS
sqrt fp_flags <| SFPS
sqrt fp_range <| SFPS
sqrt fp_specials <| SFPS
sqrt times sqrt of positive value equals the original value identity <| MR.GenSimplifyInstructionsOpt1_NoExcl
sqrt(x)/dz -> 0.5 / sqrt(x) * (dx/dz) <| SR.GenDerivatives_Unary
ss !"# $%&'$%&'$()*+(,-./,-./,0123ss4456789:ss;<=>;?@AB?@AB?CDEFCGHIJGHIJGKLMNssOPQRssSTUsssVsWsXsYsssZ[\]Zsssss^_`a^sssssbcdsssesfsgshsssijklisssssmnopmsssssqr
state block
stateblock
stateblock_state
static
static interfaces cannot have initializers
static method %s cannot refer to instance members
static_cast
store_raw
store_raw cannot be used on a resource that is not declared as raw (resource index [%d]). Opcode #%d (counts are 1-based).
store_structured
store_structured cannot be used on a resource that is not declared as structured (resource index [%d]). Opcode #%d (counts are 1-based).
store_structured writing to Thread Group Shared Memory for shader models less than 5_0 must use 
store_uav_typed
store_uav_typed cannot be used on a UAV that is not declared as typed (u%d). Opcode #%d (counts are 1-based).
store_uav_typed must write to all four components of the UAV. Opcode #%d (counts are 1-based).
stores to group shared memory for %s targets must be indexed by an SV_GroupIndex only
strchr
stream object '%s' cannot be declared in the global scope
stream parameter must come from a literal expression
stream parameters can only be single-element types
stride
string
string constant
string continues past end of file
string continues past end of line
strncmp
strrchr
strstr
struct
struct %s
struct/class
struct/class members
structure being emitted has elements with no semantic defined
structured buffer element size must be a multiple of %u bytes in %s (actual size %u bytes)
structured buffer elements cannot be larger than %u bytes in %s (actual size %u bytes)
structured_buffer
sum of %g and %g cannot be represented accurately in double precision
sum of temp registers and indexable temp registers times %u threads exceeds the recommended total %u.  Performance may be reduced
swapc
swapc requires destination registers to be different.  Opcode #%d, operand #1 and operand #2 (counts are 1-based).
switch
switch fp_flags <| SFPS
switch must be followed by case or default. Opcode #%d (count 1-based). Aborting validation.
symmetric cmp <| Explicit
symmetric cmp <| MR.GenSimplifyInstructionsOpt1_NoExcl
sync can't specify both _ugroup and _uglobal. If both are needed, just specify _uglobal. Opcode #%d (counts are 1-based).
sync in Pixel Shader must only sync UAV (sync_uglobal).Opcode #%d (counts are 1-based).
sync must include some form of memory barrier - _u (UAV) and/or _g (Thread Group Shared Memory).  Only _t (thread group sync) is optional. Opcode #%d (counts are 1-based).
sync_g fp_flags <| SFPS
sync_g_t fp_flags <| SFPS
sync_g_ug fp_flags <| SFPS
sync_g_ug_t fp_flags <| SFPS
sync_g_up fp_flags <| SFPS
sync_g_up_t fp_flags <| SFPS
sync_ug fp_flags <| SFPS
sync_ug_t fp_flags <| SFPS
sync_up fp_flags <| SFPS
sync_up_t fp_flags <| SFPS
synchronization operations cannot be used in varying flow control
syntax error
syntax error : unexpected %s
syntax error: unexpected %s
t	9Ytt
t	9^tt
t	9~8
t	;A8t
t	;AXw
t	;BXw
t	@Ju
t	QPh
t	_^+
t	_^[]
t 	T$
t SQRh
t _^]
t!;qxu
t!Sh|a
t!hP<
t";U$s
t"Iu^
t"PVh
t"hDK
t#FI;
t#QRP
t$ VW
t$ WV
t$$#D$(
t$$Ph
t$$WV
t$$hh
t$$tn
t$(94
t$(9L$
t$(Vh@
t$(WV
t$,SV
t$,SVW
t$03t$8
t$0@;
t$0PRS
t$0PVW
t$0Qh
t$0WV
t$4VS
t$4h(
t$8PVW
t$8h8
t$8uB
t$<@VP
t$@SV
t$D;D$(
t$DVW
t$Dh8&
t$HVW
t$P9t$\|
t$PVW
t$TVj
t$XVW
t$\VRQ
t$\hHb
t$\tY
t$`hTb
t$dSj
t$lQPV
t$lWR
t$x;V
t%<<u!
t%@=U
t&9{Lv	
t&VWh
t'jPh
t(SVP
t*<ct
t*WVR
t*hDK
t*jPh
t+9{Lv
t+SWV
t,VWh
t,VWh I
t,hDK
t-RQj
t19Odu,
t19Q|t
t1Ht$H
t1PQh
t1h8N
t2\4k4=6H6
t2jPh
t3jPh
t5RQj
t6jPh
t7<\u-
t8JO0
t9WRQ
t:Ht.Ht"
t:j<P
t;x;|;
t?It5
t@RWhhG
tBhl?
tC9Nht>@;
tC@;G
tFSWV
tG9_ltB
tIC;^
tJHt%Hud
tKWhAon9
tKhl5
tM;|$\s
tMj:P
tPF;u
tQh,Q
tRC;^
tRHtHHt1H
tRVW3
tSVW3
tSjPh
tTA;K
tWhX:
tX@Ju
tXKtK
tZHt-Hus
t[^[3
t\9WxuQ
t];K0tB;
t_Vhl?
t_jiP
tangent
target does not support relative addressing
tbuffer
td;G$
technique
technique10
technique10 
technique11
template
temporary and constant registers are not allowed in assembly fragments
temporary, constant, and output registers are not allowed in vs_3_0 assembly fragments
tessfactor
tessfactor inputs missing
tessfactor semantic out of order
tessfactor semantics must be in the same component
tex1D
tex1D will be considered dependent since texcoord was not declared as at least float2
tex1Dbias
tex1Dgrad
tex1Dlod
tex1Dproj
tex1d fp_flags <| SFPS
tex1d_bias fp_flags <| SFPS
tex1d_dd fp_flags <| SFPS
tex1d_lod fp_flags <| SFPS
tex1d_proj fp_flags <| SFPS
tex2D
tex2Dbias
tex2Dgrad
tex2Dlod
tex2Dproj
tex2d fp_flags <| SFPS
tex2d_bias fp_flags <| SFPS
tex2d_dd fp_flags <| SFPS
tex2d_lod fp_flags <| SFPS
tex2d_proj fp_flags <| SFPS
tex3D
tex3Dbias
tex3Dgrad
tex3Dlod
tex3Dproj
tex3d fp_flags <| SFPS
tex3d_bias fp_flags <| SFPS
tex3d_dd fp_flags <| SFPS
tex3d_lod fp_flags <| SFPS
tex3d_proj fp_flags <| SFPS
texCUBE
texCUBEbias
texCUBEgrad
texCUBElod
texCUBEproj
texbem
texbeml
texcoord
texcrd
texcube fp_flags <| SFPS
texcube_bias fp_flags <| SFPS
texcube_dd fp_flags <| SFPS
texcube_lod fp_flags <| SFPS
texcube_proj fp_flags <| SFPS
texdepth
texdp3
texdp3tex
texkill
texld
texldb
texldd
texldl
texldp
texlod not supported on this target
texm3x2depth
texm3x2pad
texm3x2tex
texm3x3
texm3x3pad
texm3x3spec
texm3x3tex
texm3x3vspec
texreg2ar
texreg2gb
texreg2rgb
texture
texture access must have literal offset and multisample index
texture mismatch: texture used inconsistently, can only use one DX9-style texture intrinsic on individual samplers or sampler arrays
texture1D
texture1d
texture1darray
texture2D
texture2DMS cannot be more than 127 samples
texture2d
texture2darray
texture2dms
texture2dmsarray
texture3D
texture3d
textureCUBE
texturecube
texturecubearray
textures
tfhl?
thHtEHt
the 'pixelshader' keyword is deprecated and reserved in strict mode
the 'sampler1D' keyword is deprecated in strict mode; use 'SamplerState' instead
the 'sampler2D' keyword is deprecated in strict mode; use 'SamplerState' instead
the 'sampler3D' keyword is deprecated in strict mode; use 'SamplerState' instead
the 'samplerCUBE' keyword is deprecated in strict mode; use 'SamplerState' instead
the 'stateblock' keyword is deprecated in strict mode
the 'vertexshader' keyword is deprecated and reserved in strict mode
the clip planes (up to 6) to use
the debug info flag can only be set globally
the dimensions of the thread group
the final dimension specified (%u) for %s must be less than or equal to %u
the maximum number of vertices emitted by this shader
the maximum tessellation factor to allow
the name of the patch constant value evaluation function
the number of control points to emit
the number of instances of this shader to execute simultaneously
the product of the arguments of %s(%u,%u,%u) must be at least %u
the product of the arguments of %s(%u,%u,%u) must be less than or equal to %u
this FX API is not available in this part your program (%s)
this operation cannot be used directly on resources containing doubles.
thread sync operation must be in non-varying flow control, due to a potential race condition this sync is illegal, consider adding a sync after the value used to control the flow at this location is calculated
thread synchronization operations cannot be used in varying flow control
throw
tkjPh
tl9{8tg
tload fp_flags <| SFPS
tmIt,It
token
token '%s'
tolower
too many arguments to target TX
too many nested #includes
too many outputs to target TX
topology type
toupper
tp;K4tJ
transpose
triangle
triangle_ccw
triangle_cw
triangleadj
trunc
trunc float_literal <| SFPS
trunc fp_flags <| SFPS
trunc fp_range <| SFPS
trunc fp_specials <| SFPS
tth(E
ttjPh
tunnelable move(a) -> append_arg(a) <| SMR.RangeDataAnalysis
tx_1_0
tyHt@Ht
tyh(E
type mismatch
type mismatch between conditional values
typed UAV loads are only allowed for single-component 32-bit element types
typed UAV stores must write all declared components.
typedef
typedef 
typename
u	9FxuD;
u	9Glt
u	9Glt%
u	9VP
u	[_3
u	^[3
u	_^2
u	_^[
u 9rpt
u PWV
u WPP
u"9qlu
u#9G t
u#WhSHDR
u$97u 
u$9WLu
u';{pu"
u'GA;
u'SW3
u'Wh\
u(;M$sS;
u(;u,r
u(RVQ
u);P(u$
u*hT=
u+B;T$
u,9Q uT
u,;Spu'
u,PQRVW
u.9sLt09sHt+
u.;F8u);~<u$
u/9Opu*
u/hP5
u/ishl/r(a, 0) -> mov(a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(and(a, m), n) : if( and_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(and(m, a), n) : if( and_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(or(a, m), n) : if( or_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr(or(m, a), n) : if( or_is_identity_ignore_lower_n_bits(a, m, n) -> u/ishr(a, n) <| MR.GenSimplifyInstructionsOpt1_NoExcl
u/ishr/l(and(a, iv1), iv2) -> and(u/ishr/l(a, iv2), u/ishr/l(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
u/ishr/l(or(a, iv1), iv2) -> or(u/ishr/l(a, iv2), u/ishr/l(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
u/ishr/l(xor(a, iv1), iv2) -> xor(u/ishr/l(a, iv2), u/ishr/l(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_Excl
u1hp;
u4;z`u/
u89Ctt38D$
u89YLt7
u8h|A
u99F|u-
u99qLu
u9h|A
u;3L$(
u;9OLu
u>9qLu
u@8D$
uA9QLu	
uH9QLt[9QHtV
uJhHL
uP9KtvK8L$
uR9NtvM8L$
uS_^[
u];^$uX
u`;NPs
uaddc
uaddc bits_known <| SFPS
uaddc fp_flags <| SFPS
uaddc int_literal <| SFPS
uaddc int_range <| SFPS
ubfe bits_known <| SFPS
ubfe fp_flags <| SFPS
ubfe int_literal <| SFPS
ubfe(i) -> extraction sequence <| MR.Gen_RequiredTranslate
ubfe(w, 0i, a >> s) -> ubfe(w, s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ubfe(w, 0i, a) << o -> bfi(w, o, a, 0i) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ubfe(w, o, (a >> s) & m) : if( o + s < 32 ) -> ubfe(w, o + s, a & (m << s)) <| MR.GenSimplifyInstructionsOpt1_Excl
ubfe(w, o, a >> s) : if( o + s < 32 ) -> ubfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
ubfe(w, o, a) >> s -> ubfe(w, o + s, a) <| MR.GenSimplifyInstructionsOpt1_Excl
ubfe(w, o, a) >> s : if( o + s < 32 && w >= s ) -> ubfe(w - s, o + s, a) <| MR.GenSimplifyInstructionsOpt1_NoExcl
udiv bits_known <| SFPS
udiv fp_flags <| SFPS
udiv int_literal <| SFPS
udiv int_range <| SFPS
udiv(a, iv_pow2) -> ushr(a, get_lowest_bit(iv_pow2)) <| MR.GenD3D10_OptimizeEarlyTranslate
uf$0< t`h
uint1
uint1x1
uint1x2
uint1x3
uint1x4
uint2
uint2x1
uint2x2
uint2x3
uint2x4
uint3
uint3x1
uint3x2
uint3x3
uint3x4
uint4
uint4x1
uint4x2
uint4x3
uint4x4
ulong
umax bits_known <| SFPS
umax fp_flags <| SFPS
umax int_literal <| SFPS
umax int_range <| SFPS
umax(i0, i1): if (i0 >= i1) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umax(i0, i1): if (i1 >= i0) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umax(umax(i0, l1), l2) -> umax(i0, umax(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umax(x,y) where one is >= the other <| Explicit
umin bits_known <| SFPS
umin fp_flags <| SFPS
umin int_literal <| SFPS
umin int_range <| SFPS
umin(i0, i1): if (i0 >= i1) -> mov(i1) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umin(i0, i1): if (i1 >= i0) -> mov(i0) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umin(umin(i0, l1), l2) -> umin(i0, umin(l1, l2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
umin(x,y) where one is <= the other <| Explicit
umod bits_known <| SFPS
umod fp_flags <| SFPS
umod int_literal <| SFPS
umod int_range <| SFPS
umod(x,y) where x < y <| Explicit
umul bits_known <| SFPS
umul fp_flags <| SFPS
umul int_literal <| SFPS
umul int_range <| SFPS
unable to unroll loop, loop does not appear to terminate in a timely manner (%d iterations)
unable to unroll loop, loop does not appear to terminate in a timely manner (%d iterations), use the [unroll(n)] attribute to force an exact higher number
unary negate of unsigned value is still unsigned
undecipherable custom data
undeclared identifier '%s'
undef
undefined
unexpected #elif
unexpected #elif following #else
unexpected #else
unexpected #else following #else
unexpected #endif
unexpected end of file
unexpected end of file in macro expansion
unexpected error in GetTypeArgFlags
unexpected tokens following preprocessor directive
uniform
union
unknown
unknown attribute %s, or attribute invalid for this statement
unknown attribute %s, or attribute invalid for this statement, valid attributes are: %s
unorm
unorm 
unrecognized compiler target '%s'
unrecognized identifier '%s'
unrecognized shader version
unroll
unsigned
unsigned can not be used with type
unsigned integer movc((a<b),a,b) -> min(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
unsigned integer movc((a<b),b,a) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
unsigned integer movc((a>=b),a,b) -> max(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
unsigned integer movc((a>=b),b,a) -> min(a,b) <| MR.GenSimplifyInstructionsOpt1_NoExcl
unsupported compiler target '%s'
untyped textures are deprecated in strict mode
usage semantics do not apply to %ss
ushort
ushr bits_known <| SFPS
ushr fp_flags <| SFPS
ushr int_literal <| SFPS
ushr(ishl(a, bv), cv) : if( ge_mod_32(cv, bv) ) -> and(ushr(a, cv - bv), (1 << (32-cv))-1) <| MR.GenSimplifyInstructionsOpt1_Excl
ushr(ushr(a, b), c) : if( nooverflow_mod_32(b, c) ) -> ushr(a, iadd(b, c)) <| MR.GenSimplifyInstructionsOpt1_Excl
using
usubb
usubb bits_known <| SFPS
usubb fp_flags <| SFPS
usubb int_literal <| SFPS
usubb int_range <| SFPS
uth$K
utof fp_flags <| SFPS
utof(sampleinfo_uint(x)) -> sampleinfo(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
utof(sampleinfo_uint_rt(x)) -> sampleinfo_rt(x) <| MR.GenSimplifyInstructionsSampleMask_Both
u{SVW3
v	N+D$
v!h|A
v-hdb
v.;M 
vCoverage
vCycleCounter
vCycleCounter can only be used with the mov instruction.  Opcode #%d, operand #%d (counts are 1-based). 
vCycleCounter is only supported on 5_0+ shaders.  Opcode #%d (count is 1-based). 
vDomain
vFace
vForkInstanceID
vGSInstanceID
vJoinInstanceID
vOutputControlPointID
vPh j
vPrim
vThreadGroupID
vThreadID
vThreadIDInGroup
vThreadIDInGroupFlattened
vThreadIDInGroupFlattened as the structure index (second) parameter. Opcode #%d (counts are 1-based).
v^VW3
value
value cannot be NaN, isnan() may not be necessary.  /Gis may force isnan() to be performed
value cannot be infinity, isfinite() may not be necessary.  /Gis may force isfinite() to be performed
value cannot be infinity, isinf() may not be necessary.  /Gis may force isinf() to be performed
variable
variable '%s' used without having been completely initialized <| A%u (B%u), I%u (B%u)
vector
vector dimension must be a literal scalar expression
vector dimension must be between 1 and %u
vector element type must be a scalar type
vectorize tunnel through add <| Explicit
vectorize tunnel through mul <| Explicit
vectorize tunnel through neg <| Explicit
version token
vertex count must be non-zero
vertex shader must minimally write all four components of POSITION
vertex shader must minimally write all four components of SV_Position
vertexID already declared for input.  Opcode #%d (count is 1-based). 
vertex_id
vertexfragment
vertexshader
viewportArrayIndex already declared for input.  Opcode #%d (count is 1-based). 
viewportArrayIndex already declared for output.  Opcode #%d (count is 1-based). 
viewport_array_index
virtual
volatile
volume
vs.1.0
vs.1.1
vs.2.0
vs.2.a
vs.2.sw
vs.2.x
vs.3.0
vs.3.sw
vs_%d_%d
vs_1_0
vs_1_0 is no longer supported; using vs_1_1
vs_1_1
vs_2_0
vs_2_a
vs_2_sw
vs_2_x
vs_3_0
vs_3_sw
vs_4_0
vs_4_0_level_9_0
vs_4_0_level_9_1
vs_4_0_level_9_3
vs_4_1
vs_5_0
v|ShDI
w	r"=
w hPu
w t)=
w t,=
w t}=
w!t&=
w#t/=
w%tC=
w%tJ=
w'tJ=
w+t =
w+t@=
w+tP=
w,tI=
w,tQ=
w,tX=
w.t =
w/t$=
w0t"=
w0tI=
w1tJ=
w2f94M
w3t+=
w3t_=
w5t&=
w6tO=
w7t =
w8t*=
w8t==
w9t)=
w9t+=
w;t,=
w?t$=
w@t.=
w@t2=
wAt0=
wDt0=
wDt6=
wJt6=
wKt*=
wKt==
wLt>=
wMt0=
wMt8=
wSt(=
wTHPQh
wTtH=
wYt$=
wYt@=
wZto=
warning
warning treated as error
wctM=
wftM=
wgtW=
when multiple GS output streams are used they must be pointlists
while
width
witY=
wmte=
wpt]=
wqtP=
wwti=
wytk=
wz;D$`st
wztV=
w~9} ty9}
x .u9
x ? firstbit*(x) : -1 -> firstbit*(x) <| MR.GenSimplifyInstructionsOpt1_NoExcl
x!hXU
x#VWS
x-F;w
x-_^3
x/WhSHEX
x0$r&
x6F;u
x8FA;M
x8FA;M r
xGVhISGN
xGVhPCSG
xHF;s
xJh\N
xPh|A
xR8\$
xTj:V
x^hhl
x`h|A
xbh|A
xor bits_known <| SFPS
xor fp_flags <| SFPS
xor int_flags <| SFPS
xor int_literal <| SFPS
xor(xor(a, iv1), iv2) -> xor(a, xor(iv1, iv2)) <| MR.GenSimplifyInstructionsOpt1_NoExcl
xppwpp
xrG;~
xvVWhOSGN
xyzwxyzw
xzh|A
y .u)
y 0u<
y ^[_]
y _^[
y#_^[
y%_^[
y,_^[
y._^[
y0_^[
y1_[]
y<^[_]
yC_^[
yL_^[
yX_^[
y__^[
z .VW
z /VuE
z0$rM
z?*[FS	<
z?aUY
z\&u$
z\Ct$h
zc%C1
zl;ylu
zw9gj
{ %d, %d, %d, %d }
{ %g, %g, %g, %g }
{8u(;u
{<;~<
|	9C0
|$ ;D$(
|$ Sh
|$$Wh
|$$Whx 
|$09\$|
|$49xtt
|$8PSW
|$<r	
|$H@;D$dv
|0,1=2
}[h|A
~0qt%h
