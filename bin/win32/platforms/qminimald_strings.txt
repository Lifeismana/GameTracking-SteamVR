!weakref.load()
!x->ref.isStatic()
.?AVDummyFontDatabase@@
.?AVQAbstractEventDispatcher@@
.?AVQEventDispatcherWin32@@
.?AVQMinimalBackingStore@@
.?AVQMinimalIntegration@@
.?AVQMinimalIntegrationPlugin@@
.?AVQMinimalScreen@@
.?AVQObject@@
.?AVQPlatformBackingStore@@
.?AVQPlatformFontDatabase@@
.?AVQPlatformIntegration@@
.?AVQPlatformIntegrationPlugin@@
.?AVQPlatformScreen@@
.?AVQPlatformSurface@@
.?AVQPlatformWindow@@
.?AVbad_alloc@std@@
.?AVbad_array_new_length@std@@
.?AVexception@std@@
.?AVtype_info@@
F:\qt5\qtbase\plugins\platforms\qminimald.pdb
InitializeConditionVariable
QMinimalBackingStore::QMinimalBackingStore:
QMinimalBackingStore::flush() saving contents to
QMinimalBackingStore::paintDevice
QMinimalIntegrationPlugin
QT_DEBUG_BACKINGSTORE
QVector::insert
RSDS
SleepConditionVariableCS
The specified iterator argument 'before' is invalid
Unknown exception
WakeAllConditionVariable
__thiscall QMinimalBackingStore::QMinimalBackingStore(class QWindow *)
aalloc ? d != Data::sharedNull() : d == Data::sharedNull()
asize >= 0 && asize <= aalloc
bad allocation
bad array new length
class QPaintDevice *__thiscall QMinimalBackingStore::paintDevice(void)
d != Data::unsharableEmpty()
d->alloc >= uint(aalloc)
d->data()
d->size == asize
enable_fonts
f:\qt5\qtbase\include\qtcore\../../src/corelib/kernel/qmetatype.h
f:\qt5\qtbase\include\qtcore\../../src/corelib/tools/qscopedpointer.h
f:\qt5\qtbase\include\qtcore\../../src/corelib/tools/qsharedpointer_impl.h
f:\qt5\qtbase\include\qtcore\../../src/corelib/tools/qvector.h
f:\qt5\qtbase\include\qtgui\5.5.0\qtgui\private\../../../../../src/gui/text/qfragmentmap_p.h
field < Fragment::size_array_max
int(d->alloc) == aalloc
isDetached()
minimal
output%1.png
qRegisterNormalizedMetaType
qRegisterNormalizedMetaType was called with a not normalized type name, please call qRegisterMetaType instead.
qminimalbackingstore.cpp
qminimald.dll
qt_plugin_instance
qt_plugin_query_metadata
strongref.load() <= 0
uint(d->size) <= d->alloc
void __thiscall QMinimalBackingStore::flush(class QWindow *,const class QRegion &,const class QPoint &)
x->ref.isSharable() || options.testFlag(QArrayData::Unsharable)
