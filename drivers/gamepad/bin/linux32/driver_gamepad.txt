 B __bss_start
 B _edata
 B _end
 SDL_GameControllerClose
 SDL_GameControllerGetAttached
 SDL_GameControllerGetJoystick
 SDL_GameControllerName
 SDL_GameControllerOpen
 SDL_GameControllerUpdate
 SDL_GetError
 SDL_GetPowerInfo
 SDL_HapticClose
 SDL_HapticOpenFromJoystick
 SDL_HapticRumbleInit
 SDL_HapticRumblePlay
 SDL_HapticRumbleStop
 SDL_HapticRumbleSupported
 SDL_InitSubSystem
 SDL_IsGameController
 SDL_JoystickGetDeviceVendor
 SDL_JoystickGetGUID
 SDL_JoystickGetGUIDString
 SDL_JoystickInstanceID
 SDL_NumJoysticks
 SDL_PollEvent
 SDL_QuitSubSystem
 SDL_SetThreadPriority
 T HmdDriverFactory
 V typeinfo for bool (*)(char)
 V typeinfo for bool (char)
 V typeinfo name for bool (*)(char)
 V typeinfo name for bool (char)
 VTT for std::basic_ifstream<char, std::char_traits<char> >
 VTT for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >
 _ITM_deregisterTMCloneTable
 _ITM_registerTMCloneTable
 ___tls_get_addr
 __cxa_allocate_exception
 __cxa_atexit
 __cxa_begin_catch
 __cxa_end_catch
 __cxa_finalize
 __cxa_guard_abort
 __cxa_guard_acquire
 __cxa_guard_release
 __cxa_pure_virtual
 __cxa_rethrow
 __cxa_throw
 __errno_location
 __gmon_start__
 __gxx_personality_v0
 __pthread_key_create
 __xstat64
 _exit
 abort
 b CAssert::m_mutex
 b CAssert::m_pInstance
 b CLog::s_mutex
 b CLog::s_pInstance
 b IsRunningInAppContainer()::s_bDeterminedAppContainerStatus
 b IsRunningInAppContainer()::s_bIsRunningInAppContainer
 b Plat_IsInDebugSession::fp
 b SteamVRVersionAsString()::s_sCachedVersion
 b ThreadInitSchedulerForRtkit()::sInitMutex
 b ThreadInitSchedulerForRtkit()::sbThreadSchedInitialized
 b ThreadShellExecute::bInstalledSignalHandler
 b UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)::s_convert
 b UTF8to16(std::string const&)::s_convert
 b any_objects_registered
 b completed.0
 b dwarf_reg_size_table
 b force_pid
 b force_pid_val
 b frame_hdr_cache
 b frame_hdr_cache_head
 b g_SuspendResumeLock
 b g_ThreadMainThreadID
 b g_bSetSuspendHandlers
 b g_bSuspendResumeAck
 b g_mutex
 b g_nCurThreadSuspendCount
 b g_pCurThread
 b g_serverDriverGamepad
 b guard variable for SteamVRVersionAsString()::s_sCachedVersion
 b guard variable for ThreadInitSchedulerForRtkit()::sInitMutex
 b guard variable for UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)::s_convert
 b guard variable for UTF8to16(std::string const&)::s_convert
 b marker.4
 b object_mutex
 b once_regsizes.0
 b s_pLogCallback
 b s_pLogFile
 b seen_objects
 b std::__ioinit
 b subs.2
 b unseen_objects
 b vr::OpenVRInternal_ModuleServerDriverContext()::ctx
 b vr::VRDriverContext()::pHost
 chdir
 closedir
 d DW.ref.__gxx_personality_v0
 d _DYNAMIC
 d _GLOBAL_OFFSET_TABLE_
 d __TMC_END__
 d __TMC_LIST__
 d __do_global_dtors_aux_fini_array_entry
 d __dso_handle
 d __frame_dummy_init_array_entry
 d adds.1
 d g_szSemFileName
 d typeinfo for CGamepadDeviceDriver
 d typeinfo for CServerDriver_Gamepad
 d typeinfo for CThread
 d typeinfo for InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}
 d typeinfo for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 d typeinfo for std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>
 d typeinfo for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
 d typeinfo for vr::IServerTrackedDeviceProvider
 d typeinfo for vr::ITrackedDeviceServerDriver
 d vr::k_InterfaceVersions
 d vtable for CGamepadDeviceDriver
 d vtable for CServerDriver_Gamepad
 d vtable for CThread
 d vtable for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 d vtable for std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>
 d vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
 dl_iterate_phdr
 fclose
 fflush
 fgets
 fopen
 fork
 fprintf
 free
 getenv
 getpid
 getppid
 getpriority
 getrlimit
 gettimeofday
 isalpha
 kill
 malloc
 memcmp
 memcpy
 memmove
 memset
 nanosleep
 opendir
 operator delete(void*, unsigned int)
 operator delete[](void*)
 operator new(unsigned int)
 operator new[](unsigned int)
 pthread_attr_init
 pthread_attr_setstacksize
 pthread_cancel
 pthread_cond_destroy
 pthread_cond_init
 pthread_cond_signal
 pthread_cond_timedwait
 pthread_create
 pthread_getschedparam
 pthread_getspecific
 pthread_join
 pthread_key_create
 pthread_key_delete
 pthread_kill
 pthread_mutex_destroy
 pthread_mutex_init
 pthread_mutex_lock
 pthread_mutex_unlock
 pthread_mutexattr_destroy
 pthread_mutexattr_init
 pthread_mutexattr_settype
 pthread_once
 pthread_self
 pthread_setname_np
 pthread_setschedparam
 pthread_setspecific
 r CSWTCH.211
 r __FRAME_END__
 r crc32(unsigned int, void const*, unsigned int)::crcTable
 r terminator.3
 r typeinfo name for CGamepadDeviceDriver
 r typeinfo name for CServerDriver_Gamepad
 r typeinfo name for CThread
 r typeinfo name for InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}
 r typeinfo name for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 r typeinfo name for std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>
 r typeinfo name for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
 r typeinfo name for vr::IServerTrackedDeviceProvider
 r typeinfo name for vr::ITrackedDeviceServerDriver
 readdir
 rewind
 sched_get_priority_max
 sched_get_priority_min
 sched_getparam
 sched_getscheduler
 sched_setaffinity
 sched_setscheduler
 sched_yield
 semctl
 semget
 semop
 setenv
 setpriority
 setrlimit
 sigaction
 snprintf
 sprintf
 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
 std::__basic_file<char>::~__basic_file()
 std::__codecvt_utf8_base<char32_t>::do_always_noconv() const
 std::__codecvt_utf8_base<char32_t>::do_encoding() const
 std::__codecvt_utf8_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const
 std::__codecvt_utf8_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned int) const
 std::__codecvt_utf8_base<char32_t>::do_max_length() const
 std::__codecvt_utf8_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const
 std::__codecvt_utf8_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
 std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()
 std::__codecvt_utf8_utf16_base<wchar_t>::do_always_noconv() const
 std::__codecvt_utf8_utf16_base<wchar_t>::do_encoding() const
 std::__codecvt_utf8_utf16_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
 std::__codecvt_utf8_utf16_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned int) const
 std::__codecvt_utf8_utf16_base<wchar_t>::do_max_length() const
 std::__codecvt_utf8_utf16_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
 std::__codecvt_utf8_utf16_base<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
 std::__codecvt_utf8_utf16_base<wchar_t>::~__codecvt_utf8_utf16_base()
 std::__throw_bad_cast()
 std::__throw_bad_function_call()
 std::__throw_length_error(char const*)
 std::__throw_out_of_range_fmt(char const*, ...)
 std::__throw_range_error(char const*)
 std::__throw_system_error(int)
 std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()
 std::basic_filebuf<char, std::char_traits<char> >::close()
 std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)
 std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()
 std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()
 std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
 std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)
 std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)
 std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned int, std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned int, unsigned int)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned int, char, std::allocator<char> const&)
 std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_leak_hard()
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_destroy(std::allocator<wchar_t> const&)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_create(unsigned int, unsigned int, std::allocator<wchar_t> const&)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_empty_rep_storage
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::allocator<wchar_t> const&)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned int, wchar_t)
 std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_string()
 std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned int, unsigned int)
 std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned int)
 std::ctype<char>::_M_widen_init() const
 std::ios_base::Init::Init()
 std::ios_base::Init::~Init()
 std::ios_base::ios_base()
 std::ios_base::~ios_base()
 std::locale::locale()
 std::locale::~locale()
 std::string::_M_leak_hard()
 std::string::_Rep::_M_destroy(std::allocator<char> const&)
 std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)
 std::string::_Rep::_S_empty_rep_storage
 std::string::append(char const*, unsigned int)
 std::string::append(std::string const&)
 std::string::assign(char const*, unsigned int)
 std::string::compare(char const*) const
 std::string::find_last_not_of(char const*, unsigned int, unsigned int) const
 std::string::insert(unsigned int, char const*, unsigned int)
 std::string::reserve(unsigned int)
 std::string::resize(unsigned int, char)
 std::string::rfind(char, unsigned int) const
 std::string::swap(std::string&)
 std::terminate()
 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())
 std::thread::_State::~_State()
 std::thread::join()
 stderr
 strcasecmp
 strerror
 strlen
 strncasecmp
 strncmp
 strncpy
 strtol
 strtoull
 syscall
 system
 t .L100
 t .L101
 t .L102
 t .L103
 t .L104
 t .L105
 t .L106
 t .L107
 t .L108
 t .L109
 t .L112
 t .L114
 t .L116
 t .L117
 t .L118
 t .L119
 t .L136
 t .L137
 t .L138
 t .L139
 t .L146
 t .L148
 t .L149
 t .L150
 t .L151
 t .L152
 t .L153
 t .L154
 t .L155
 t .L156
 t .L157
 t .L158
 t .L159
 t .L160
 t .L161
 t .L162
 t .L163
 t .L166
 t .L167
 t .L168
 t .L169
 t .L170
 t .L171
 t .L174
 t .L239
 t .L240
 t .L242
 t .L243
 t .L244
 t .L245
 t .L305
 t .L316
 t .L320
 t .L321
 t .L327
 t .L328
 t .L329
 t .L33
 t .L330
 t .L34
 t .L354
 t .L355
 t .L356
 t .L357
 t .L358
 t .L359
 t .L36
 t .L360
 t .L361
 t .L362
 t .L363
 t .L364
 t .L365
 t .L366
 t .L367
 t .L368
 t .L369
 t .L37
 t .L370
 t .L371
 t .L41
 t .L47
 t .L48
 t .L52
 t .L60
 t .L62
 t .L63
 t .L67
 t .L75
 t .L76
 t .L91
 t .L92
 t .L95
 t .L99
 t CAssert::AddCallback(CAssertCallback*)
 t CAssert::AddCallback(CAssertCallback*) [clone .cold]
 t CAssert::AssertMsgImpl(char const*, unsigned int, bool, unsigned int, ...)
 t CAssert::AssertMsgImpl(char const*, unsigned int, bool, unsigned int, ...) [clone .cold]
 t CAssert::GetInstance()
 t CAssert::GetInstance() [clone .cold]
 t CAssert::RemoveCallback(CAssertCallback*)
 t CAssertCallback::Initialize(std::function<void (char const*, char const*, unsigned int, bool, void*, bool*)>, void*)
 t CAssertCallback::Initialize(std::function<void (char const*, char const*, unsigned int, bool, void*, bool*)>, void*) [clone .cold]
 t CAssertCallback::~CAssertCallback()
 t CGamepadDeviceDriver::Activate(unsigned int)
 t CGamepadDeviceDriver::AddTrackedDevice()
 t CGamepadDeviceDriver::Deactivate()
 t CGamepadDeviceDriver::DebugRequest(char const*, char*, unsigned int)
 t CGamepadDeviceDriver::EnterStandby()
 t CGamepadDeviceDriver::GetComponent(char const*)
 t CGamepadDeviceDriver::GetPose()
 t CGamepadDeviceDriver::PowerOff()
 t CGamepadDeviceDriver::~CGamepadDeviceDriver()
 t CLog::AddCallback(CLogCallback*)
 t CLog::AddCallback(CLogCallback*) [clone .cold]
 t CLog::GetInstance()
 t CLog::GetInstance() [clone .cold]
 t CLog::Log(ELogLevel, char const*, ...)
 t CLog::Log(ELogLevel, char const*, char*&)
 t CLog::Log(ELogLevel, char const*, char*&) [clone .cold]
 t CLog::RemoveCallback(CLogCallback*)
 t CLogCallback::Initialize(std::function<void (ELogLevel, char const*, void*)>, void*)
 t CLogCallback::Initialize(std::function<void (ELogLevel, char const*, void*)>, void*) [clone .cold]
 t CLogCallback::~CLogCallback()
 t CServerDriver_Gamepad::AddGameControllerByIndex(int)
 t CServerDriver_Gamepad::Cleanup()
 t CServerDriver_Gamepad::Cleanup_SDL()
 t CServerDriver_Gamepad::EnterStandby()
 t CServerDriver_Gamepad::GetInterfaceVersions()
 t CServerDriver_Gamepad::Init(vr::IVRDriverContext*)
 t CServerDriver_Gamepad::Init(vr::IVRDriverContext*) [clone .cold]
 t CServerDriver_Gamepad::LeaveStandby()
 t CServerDriver_Gamepad::RunFrame()
 t CServerDriver_Gamepad::RunFrame_SDL()
 t CServerDriver_Gamepad::RunThread()
 t CServerDriver_Gamepad::Setup_SDL()
 t CServerDriver_Gamepad::ShouldBlockStandbyMode()
 t CServerDriver_Gamepad::~CServerDriver_Gamepad()
 t CThread::BHasValidThreadID()
 t CThread::CThread()
 t CThread::GetCurrentCThread()
 t CThread::GetName()
 t CThread::GetPriority() const
 t CThread::GetResult() const
 t CThread::GetThreadProc()
 t CThread::Init()
 t CThread::IsAlive()
 t CThread::IsThreadRunning()
 t CThread::Join(unsigned int)
 t CThread::OnExit()
 t CThread::Resume()
 t CThread::SetName(char const*)
 t CThread::SetPriority(int)
 t CThread::Sleep(unsigned int)
 t CThread::Start(unsigned int)
 t CThread::Start(unsigned int) [clone .cold]
 t CThread::Stop(int)
 t CThread::Suspend()
 t CThread::Terminate(int)
 t CThread::ThreadExceptionWrapper(void*)
 t CThread::ThreadProc(void*)
 t CThread::ThreadProc(void*) [clone .cold]
 t CThread::WaitForCreateComplete(CThreadEvent*)
 t CThread::Yield()
 t CThread::~CThread()
 t CThread::~CThread() [clone .part.0]
 t CThreadEvent::CThreadEvent(bool)
 t CThreadEvent::CThreadEvent(char const*, bool, bool)
 t CThreadEvent::CThreadEvent(char const*, bool, bool) [clone .cold]
 t CThreadEvent::Check()
 t CThreadEvent::Reset()
 t CThreadEvent::Set()
 t CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool)
 t CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool) [clone .cold]
 t CThreadFullMutex::IsCreator() const
 t CThreadFullMutex::Release()
 t CThreadLocalBase::CThreadLocalBase()
 t CThreadLocalBase::Get() const
 t CThreadLocalBase::Set(void*)
 t CThreadLocalBase::~CThreadLocalBase()
 t CThreadLocalInt<int>::~CThreadLocalInt()
 t CThreadLocalPtr<CThread>::~CThreadLocalPtr()
 t CThreadMutex::CThreadMutex()
 t CThreadMutex::~CThreadMutex()
 t CThreadRWLock::LockForWrite()
 t CThreadRWLock::UnlockWrite()
 t CThreadRWLock::WaitForRead()
 t CThreadSemaphore::CThreadSemaphore(long, long)
 t CThreadSemaphore::CThreadSemaphore(long, long) [clone .cold]
 t CThreadSemaphore::Release(long)
 t CThreadSpinLock::Lock(unsigned int) volatile
 t CThreadSpinRWLock::LockForRead()
 t CThreadSpinRWLock::SpinLockForWrite(unsigned int)
 t CThreadSpinRWLock::UnlockRead()
 t CThreadSpinRWLock::UnlockWrite()
 t CThreadSyncObject::AcquireSemaphoreInternal(unsigned int)
 t CThreadSyncObject::AssertUseable()
 t CThreadSyncObject::CThreadSyncObject()
 t CThreadSyncObject::CloseSemaphoreInternal(int, bool, char const*)
 t CThreadSyncObject::CreateAnonymousSyncObjectInternal(bool, bool)
 t CThreadSyncObject::CreateSemaphoreInternal(char const*, long, bool, bool*)
 t CThreadSyncObject::EnsureSemaphoreClearedInternal(int)
 t CThreadSyncObject::EnsureSemaphorePostedInternal(int)
 t CThreadSyncObject::IsSemaphoreOrphanedInternal(int, int)
 t CThreadSyncObject::OpenSemaphoreInternal(char const*, bool)
 t CThreadSyncObject::ReleaseSemaphoreInternal(int, long)
 t CThreadSyncObject::SaveNameToFile(char const*)
 t CThreadSyncObject::SignalThreadSyncObjectInternal()
 t CThreadSyncObject::Wait(unsigned int)
 t CThreadSyncObject::Wait(unsigned int) [clone .part.0]
 t CThreadSyncObject::operator!() const
 t CThreadSyncObject::~CThreadSyncObject()
 t CThreadSyncObject::~CThreadSyncObject() [clone .part.0]
 t CharNeedsEscape_Component(char)
 t CharNeedsEscape_FullPath(char)
 t CleanupDriverLog()
 t CreateSimpleProcess
 t CreateSimpleThread(unsigned int (*)(void*), void*, unsigned int*, unsigned int)
 t DebugDriverLog(char const*, ...)
 t DeclareCurrentThreadIsMainThread
 t DriverLog(char const*, ...)
 t DriverLogString(char const*)
 t DriverLogVarArgs(char const*, char*)
 t Format(char const*, ...)
 t Format(char const*, ...) [clone .cold]
 t GetEnvironmentVariable(char const*)
 t GetEnvironmentVariableAsBool(char const*, bool)
 t GetEnvironmentVariableAsBool(char const*, bool) [clone .cold]
 t InitDriverLog(vr::IVRDriverLog*)
 t InitDriverLog(vr::IVRDriverLog*) [clone .cold]
 t InitMainThread()
 t IpAndPortToString(unsigned int, unsigned short)
 t IpToString(unsigned int)
 t IsDriverLogActive()
 t IsOnLaptop()
 t IsPosix()
 t IsRunningAsService()
 t IsRunningInAppContainer()
 t IsRunningInAppContainer() [clone .cold]
 t IsWorkstationLocked()
 t Log(ELogLevel, char const*, ...)
 t Log(char const*, ...)
 t LogDirect(ELogLevel, char const*, char*&)
 t Plat_IsInDebugSession
 t ReapChildProcesses(int)
 t ReleaseThreadHandle
 t RepairUTF8(char const*, char const*, std::string&)
 t RepairUTF8(char const*, char const*, std::string&) [clone .cold]
 t RepairUTF8(std::string const&, std::string&)
 t ReturnStdString(std::string const&, char*, unsigned int)
 t SetCurrentProcessExplicitAppUserModelID()
 t SetEnvironmentVariable(char const*, char const*)
 t SteamVRVersionAsString()
 t SteamVRVersionAsString() [clone .cold]
 t StringHasPrefix(std::string const&, std::string const&)
 t StringHasPrefixCaseSensitive(std::string const&, std::string const&)
 t StringHasSuffix(std::string const&, std::string const&)
 t StringHasSuffixCaseSensitive(std::string const&, std::string const&)
 t StringToLower(std::string const&)
 t StringToLower(std::string const&) [clone .cold]
 t StringToUint64(std::string const&)
 t StringToUpper(std::string const&)
 t StringToUpper(std::string const&) [clone .cold]
 t ThreadCloseProcess
 t ThreadGetCurrentHandle
 t ThreadGetCurrentId
 t ThreadGetCurrentProcessHandle
 t ThreadGetCurrentProcessId
 t ThreadGetCurrentRunningRef
 t ThreadGetPriority
 t ThreadGetProcessExitCode
 t ThreadGetProcessListInfo
 t ThreadGetProcessParentID
 t ThreadGetProcessPriority
 t ThreadInMainThread
 t ThreadInterlockedAssignIf
 t ThreadInterlockedAssignIf64
 t ThreadInterlockedAssignPointerIf
 t ThreadInterlockedCompareExchange
 t ThreadInterlockedCompareExchange64
 t ThreadInterlockedCompareExchangePointer
 t ThreadInterlockedDecrement
 t ThreadInterlockedDecrement64
 t ThreadInterlockedExchange
 t ThreadInterlockedExchange64
 t ThreadInterlockedExchangeAdd
 t ThreadInterlockedExchangeAdd64
 t ThreadInterlockedExchangePointer
 t ThreadInterlockedIncrement
 t ThreadInterlockedIncrement64
 t ThreadIsProcessActive
 t ThreadIsThreadRunning
 t ThreadOpenProcess
 t ThreadOverrideCurrentProcessId
 t ThreadProcConvert(void*)
 t ThreadResumeSignal(int)
 t ThreadSetAffinity
 t ThreadSetDebugName
 t ThreadSetDescription
 t ThreadSetPriority
 t ThreadSetPriority.cold
 t ThreadSetProcessPriority
 t ThreadShellExecute
 t ThreadSleep
 t ThreadSuspendSignal(int)
 t ThreadTerminate
 t ThreadTerminateProcessCode
 t ThreadWaitForProcessExit
 t ThreadYield()
 t TokenizeString(std::string const&, char)
 t TokenizeString(std::string const&, char) [clone .cold]
 t TrimTrailingWhitespace(std::string const&)
 t UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)
 t UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) [clone .cold]
 t UTF16to8(wchar_t const*)
 t UTF16to8(wchar_t const*) [clone .cold]
 t UTF8to16(char const*)
 t UTF8to16(char const*) [clone .cold]
 t UTF8to16(std::string const&)
 t UTF8to16(std::string const&) [clone .cold]
 t Uint64ToString(unsigned long long)
 t V_StripExtension(std::string&)
 t V_URLDecode(char*, int, char const*, int)
 t V_URLDecodeInternal(char*, int, char const*, int, bool)
 t V_URLDecodeInternal(char*, int, char const*, int, bool) [clone .part.0]
 t V_URLDecodeNoPlusForSpace(char*, int, char const*, int)
 t V_URLEncode(char*, int, char const*, int)
 t V_URLEncode(char*, int, char const*, int) [clone .cold]
 t V_URLEncodeFullPath(char*, int, char const*, int)
 t V_URLEncodeFullPath(char*, int, char const*, int) [clone .cold]
 t V_URLEncodeInternal(char*, int, char const*, int, bool, std::function<bool (char)>)
 t V_URLEncodeNoPlusForSpace(char*, int, char const*, int)
 t V_URLEncodeNoPlusForSpace(char*, int, char const*, int) [clone .cold]
 t VerifyTidIntegrity()
 t _GLOBAL__sub_I_driver_gamepad.cpp
 t _GLOBAL__sub_I_driverlog.cpp
 t _GLOBAL__sub_I_strtools_public.cpp
 t _GLOBAL__sub_I_threadtools.cpp
 t _Unwind_Backtrace
 t _Unwind_Backtrace.cold
 t _Unwind_DebugHook
 t _Unwind_DeleteException
 t _Unwind_FindEnclosingFunction
 t _Unwind_Find_FDE
 t _Unwind_Find_FDE.cold
 t _Unwind_ForcedUnwind
 t _Unwind_ForcedUnwind_Phase2
 t _Unwind_ForcedUnwind_Phase2.cold
 t _Unwind_GetCFA
 t _Unwind_GetDataRelBase
 t _Unwind_GetGR
 t _Unwind_GetGR.cold
 t _Unwind_GetIP
 t _Unwind_GetIPInfo
 t _Unwind_GetLanguageSpecificData
 t _Unwind_GetRegionStart
 t _Unwind_GetTextRelBase
 t _Unwind_IteratePhdrCallback
 t _Unwind_IteratePhdrCallback.cold
 t _Unwind_RaiseException
 t _Unwind_RaiseException.cold
 t _Unwind_RaiseException_Phase2
 t _Unwind_RaiseException_Phase2.cold
 t _Unwind_Resume
 t _Unwind_Resume.cold
 t _Unwind_Resume_or_Rethrow
 t _Unwind_Resume_or_Rethrow.cold
 t _Unwind_SetGR
 t _Unwind_SetGR.cold
 t _Unwind_SetIP
 t __deregister_frame
 t __deregister_frame_info
 t __deregister_frame_info_bases
 t __do_global_dtors_aux
 t __frame_state_for
 t __register_frame
 t __register_frame_info
 t __register_frame_info_bases
 t __register_frame_info_table
 t __register_frame_info_table_bases
 t __register_frame_table
 t __udivdi3
 t __umoddi3
 t __x86.get_pc_thunk.ax
 t __x86.get_pc_thunk.bp
 t __x86.get_pc_thunk.bx
 t __x86.get_pc_thunk.cx
 t __x86.get_pc_thunk.di
 t __x86.get_pc_thunk.dx
 t __x86.get_pc_thunk.si
 t _fini
 t _init
 t add_fdes
 t add_fdes.cold
 t bool std::__do_str_codecvt<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, char, std::codecvt<wchar_t, char, __mbstate_t>, __mbstate_t, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const>(char const*, char const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&, std::codecvt<wchar_t, char, __mbstate_t> const&, __mbstate_t&, unsigned int&, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const)
 t bool std::__do_str_codecvt<std::string, wchar_t, std::codecvt<wchar_t, char, __mbstate_t>, __mbstate_t, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const>(wchar_t const*, wchar_t const*, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&, __mbstate_t&, unsigned int&, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const)
 t cIntToHexDigit(int)
 t classify_object_over_fdes
 t classify_object_over_fdes.cold
 t crc32(unsigned int, void const*, unsigned int)
 t deregister_tm_clones
 t execute_cfa_program
 t execute_cfa_program.cold
 t execute_stack_op
 t execute_stack_op.cold
 t fde_mixed_encoding_compare
 t fde_mixed_encoding_compare.cold
 t fde_single_encoding_compare
 t fde_single_encoding_compare.cold
 t fde_unencoded_compare
 t frame_downheap
 t frame_dummy
 t frame_heapsort
 t get_cie_encoding
 t iHexCharToInt(char)
 t init_dwarf_reg_size_table
 t linear_search_fdes
 t linear_search_fdes.cold
 t read_encoded_value
 t read_encoded_value.cold
 t read_encoded_value_with_base
 t read_encoded_value_with_base.cold
 t register_tm_clones
 t search_object
 t search_object.cold
 t std::_Function_base::~_Function_base()
 t std::_Function_handler<bool (char), bool (*)(char)>::_M_invoke(std::_Any_data const&, char&&)
 t std::_Function_handler<bool (char), bool (*)(char)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}>::_M_invoke(std::_Any_data const&, ELogLevel&&, char const*&&, void*&&)
 t std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}> const&, std::_Manager_operation)
 t std::_Rb_tree<SDL_GameControllerAxis, std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t>, std::_Select1st<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, std::less<SDL_GameControllerAxis>, std::allocator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> > >::_M_erase(std::_Rb_tree_node<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >*) [clone .isra.0]
 t std::_Rb_tree<SDL_GameControllerButton, std::pair<SDL_GameControllerButton const, unsigned long long>, std::_Select1st<std::pair<SDL_GameControllerButton const, unsigned long long> >, std::less<SDL_GameControllerButton>, std::allocator<std::pair<SDL_GameControllerButton const, unsigned long long> > >::_M_erase(std::_Rb_tree_node<std::pair<SDL_GameControllerButton const, unsigned long long> >*) [clone .isra.0]
 t std::_Rb_tree<int, std::pair<int const, CGamepadDeviceDriver*>, std::_Select1st<std::pair<int const, CGamepadDeviceDriver*> >, std::less<int>, std::allocator<std::pair<int const, CGamepadDeviceDriver*> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, CGamepadDeviceDriver*> >*) [clone .isra.0]
 t std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
 t std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
 t std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8()
 t std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8_utf16()
 t std::ctype<char>::do_widen(char) const
 t std::pair<std::_Rb_tree_iterator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, bool> std::_Rb_tree<SDL_GameControllerAxis, std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t>, std::_Select1st<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, std::less<SDL_GameControllerAxis>, std::allocator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> > >::_M_emplace_unique<std::pair<SDL_GameControllerAxis, CGamepadDeviceDriver::AxisInfo_t> >(std::pair<SDL_GameControllerAxis, CGamepadDeviceDriver::AxisInfo_t>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<SDL_GameControllerButton const, unsigned long long> >, bool> std::_Rb_tree<SDL_GameControllerButton, std::pair<SDL_GameControllerButton const, unsigned long long>, std::_Select1st<std::pair<SDL_GameControllerButton const, unsigned long long> >, std::less<SDL_GameControllerButton>, std::allocator<std::pair<SDL_GameControllerButton const, unsigned long long> > >::_M_emplace_unique<std::pair<SDL_GameControllerButton, unsigned long long> >(std::pair<SDL_GameControllerButton, unsigned long long>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<int const, CGamepadDeviceDriver*> >, bool> std::_Rb_tree<int, std::pair<int const, CGamepadDeviceDriver*>, std::_Select1st<std::pair<int const, CGamepadDeviceDriver*> >, std::less<int>, std::allocator<std::pair<int const, CGamepadDeviceDriver*> > >::_M_emplace_unique<std::pair<int, CGamepadDeviceDriver*> >(std::pair<int, CGamepadDeviceDriver*>&&)
 t std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >::_M_run()
 t std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >::~_State_impl()
 t std::unique_ptr<CLogCallback, std::default_delete<CLogCallback> >::~unique_ptr()
 t std::wstring_convert<std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>, wchar_t, std::allocator<wchar_t>, std::allocator<char> >::~wstring_convert()
 t strcpy_safe(char*, unsigned int, char const*)
 t stricmp(char const*, char const*)
 t strnicmp(char const*, char const*, unsigned int)
 t uw_frame_state_for
 t uw_frame_state_for.cold
 t uw_init_context_1
 t uw_init_context_1.cold
 t uw_install_context_1
 t uw_install_context_1.cold
 t uw_update_context_1
 t uw_update_context_1.cold
 t void std::vector<CAssertCallback*, std::allocator<CAssertCallback*> >::_M_realloc_insert<CAssertCallback* const&>(__gnu_cxx::__normal_iterator<CAssertCallback**, std::vector<CAssertCallback*, std::allocator<CAssertCallback*> > >, CAssertCallback* const&)
 t void std::vector<CGamepadDeviceDriver*, std::allocator<CGamepadDeviceDriver*> >::_M_realloc_insert<CGamepadDeviceDriver* const&>(__gnu_cxx::__normal_iterator<CGamepadDeviceDriver**, std::vector<CGamepadDeviceDriver*, std::allocator<CGamepadDeviceDriver*> > >, CGamepadDeviceDriver* const&)
 t void std::vector<CLogCallback*, std::allocator<CLogCallback*> >::_M_realloc_insert<CLogCallback* const&>(__gnu_cxx::__normal_iterator<CLogCallback**, std::vector<CLogCallback*, std::allocator<CLogCallback*> > >, CLogCallback* const&)
 t void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string const&>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&)
 t void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string&&)
 tolower
 toupper
 typeinfo for int
 typeinfo for std::__codecvt_utf8_base<char32_t>
 typeinfo for std::__codecvt_utf8_utf16_base<wchar_t>
 typeinfo for std::thread::_State
 unsetenv
 usleep
 vsnprintf
 vtable for __cxxabiv1::__class_type_info
 vtable for __cxxabiv1::__function_type_info
 vtable for __cxxabiv1::__pointer_type_info
 vtable for __cxxabiv1::__si_class_type_info
 vtable for std::basic_filebuf<char, std::char_traits<char> >
 vtable for std::basic_ifstream<char, std::char_traits<char> >
 vtable for std::basic_ios<char, std::char_traits<char> >
 vtable for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >
 vtable for std::basic_streambuf<char, std::char_traits<char> >
 vtable for std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >
 waitpid
 wcslen
 wmemcpy
