%d.%d.%d.%d
%d.%d.%d.%d:%u
%llu
%p
%s
%s %s
%s: __pos (which is %zu) > this->size() (which is %zu)
*NSt6thread11_State_implINS_8_InvokerISt5tupleIJZN21CServerDriver_Gamepad4InitEPN2vr16IVRDriverContextEEUlvE_EEEEEE
.
./obj_driver_gamepad_linux64/release/driver_gamepad.so
/data/src/common/vrcore/src/strtools_public.cpp
/data/src/common/vrcore/src/threadtools.cpp
/e%s%s
/etc/os-release
/output/haptic
/proc
/proc/%u/stat
/proc/self/status
/tmp/.steam-sem-names
0123456789ABCDEF
20CGamepadDeviceDriver
21CServerDriver_Gamepad
7CThread
8
<unknown>
ASSERT: "%s" at %s:%d.
CAssert::AddCallback(CAssertCallback*)
CAssert::AddCallback(CAssertCallback*) [clone .cold]
CAssert::AssertMsgImpl(char const*, unsigned int, bool, unsigned int, ...)
CAssert::AssertMsgImpl(char const*, unsigned int, bool, unsigned int, ...) [clone .cold]
CAssert::GetInstance()
CAssert::GetInstance() [clone .cold]
CAssert::RemoveCallback(CAssertCallback*)
CAssert::m_mutex
CAssert::m_pInstance
CAssertCallback::Initialize(std::function<void (char const*, char const*, unsigned int, bool, void*, bool*)>, void*)
CAssertCallback::Initialize(std::function<void (char const*, char const*, unsigned int, bool, void*, bool*)>, void*) [clone .cold]
CAssertCallback::~CAssertCallback()
CGamepadDeviceDriver::Activate(unsigned int)
CGamepadDeviceDriver::AddTrackedDevice()
CGamepadDeviceDriver::Deactivate()
CGamepadDeviceDriver::DebugRequest(char const*, char*, unsigned int)
CGamepadDeviceDriver::EnterStandby()
CGamepadDeviceDriver::GetComponent(char const*)
CGamepadDeviceDriver::GetPose()
CGamepadDeviceDriver::PowerOff()
CGamepadDeviceDriver::~CGamepadDeviceDriver()
CLog::AddCallback(CLogCallback*)
CLog::AddCallback(CLogCallback*) [clone .cold]
CLog::GetInstance()
CLog::GetInstance() [clone .cold]
CLog::Log(ELogLevel, char const*, ...)
CLog::Log(ELogLevel, char const*, __va_list_tag (&) [1])
CLog::Log(ELogLevel, char const*, __va_list_tag (&) [1]) [clone .cold]
CLog::RemoveCallback(CLogCallback*)
CLog::s_mutex
CLog::s_pInstance
CLogCallback::Initialize(std::function<void (ELogLevel, char const*, void*)>, void*)
CLogCallback::Initialize(std::function<void (ELogLevel, char const*, void*)>, void*) [clone .cold]
CLogCallback::~CLogCallback()
CSWTCH.209
CServerDriver_Gamepad::AddGameControllerByIndex(int)
CServerDriver_Gamepad::Cleanup()
CServerDriver_Gamepad::Cleanup_SDL()
CServerDriver_Gamepad::EnterStandby()
CServerDriver_Gamepad::GetInterfaceVersions()
CServerDriver_Gamepad::Init(vr::IVRDriverContext*)
CServerDriver_Gamepad::Init(vr::IVRDriverContext*) [clone .cold]
CServerDriver_Gamepad::LeaveStandby()
CServerDriver_Gamepad::RunFrame()
CServerDriver_Gamepad::RunFrame_SDL()
CServerDriver_Gamepad::RunThread()
CServerDriver_Gamepad::Setup_SDL()
CServerDriver_Gamepad::ShouldBlockStandbyMode()
CServerDriver_Gamepad::~CServerDriver_Gamepad()
CThread::BHasValidThreadID()
CThread::CThread()
CThread::GetCurrentCThread()
CThread::GetName()
CThread::GetPriority() const
CThread::GetResult() const
CThread::GetThreadProc()
CThread::Init()
CThread::IsAlive()
CThread::IsThreadRunning()
CThread::Join(unsigned int)
CThread::OnExit()
CThread::Resume()
CThread::SetName(char const*)
CThread::SetPriority(int)
CThread::Sleep(unsigned int)
CThread::Start(unsigned int)
CThread::Start(unsigned int) [clone .cold]
CThread::Stop(int)
CThread::Suspend()
CThread::Terminate(int)
CThread::ThreadExceptionWrapper(void*)
CThread::ThreadProc(void*)
CThread::ThreadProc(void*) [clone .cold]
CThread::WaitForCreateComplete(CThreadEvent*)
CThread::Yield()
CThread::~CThread()
CThread::~CThread() [clone .part.0]
CThreadEvent::CThreadEvent(bool)
CThreadEvent::CThreadEvent(char const*, bool, bool)
CThreadEvent::CThreadEvent(char const*, bool, bool) [clone .cold]
CThreadEvent::Check()
CThreadEvent::Reset()
CThreadEvent::Set()
CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool)
CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool) [clone .cold]
CThreadFullMutex::IsCreator() const
CThreadFullMutex::Release()
CThreadLocalBase::CThreadLocalBase()
CThreadLocalBase::Get() const
CThreadLocalBase::Set(void*)
CThreadLocalBase::~CThreadLocalBase()
CThreadLocalInt<long>::~CThreadLocalInt()
CThreadLocalPtr<CThread>::~CThreadLocalPtr()
CThreadMutex::CThreadMutex()
CThreadMutex::~CThreadMutex()
CThreadRWLock::LockForWrite()
CThreadRWLock::UnlockWrite()
CThreadRWLock::WaitForRead()
CThreadSemaphore::CThreadSemaphore(long, long)
CThreadSemaphore::CThreadSemaphore(long, long) [clone .cold]
CThreadSemaphore::Release(long)
CThreadSpinLock::Lock(unsigned int) volatile
CThreadSpinRWLock::LockForRead()
CThreadSpinRWLock::SpinLockForWrite(unsigned int)
CThreadSpinRWLock::UnlockRead()
CThreadSpinRWLock::UnlockWrite()
CThreadSyncObject::AcquireSemaphoreInternal(unsigned int)
CThreadSyncObject::AssertUseable()
CThreadSyncObject::CThreadSyncObject()
CThreadSyncObject::CloseSemaphoreInternal(int, bool, char const*)
CThreadSyncObject::CreateAnonymousSyncObjectInternal(bool, bool)
CThreadSyncObject::CreateSemaphoreInternal(char const*, long, bool, bool*)
CThreadSyncObject::EnsureSemaphoreClearedInternal(int)
CThreadSyncObject::EnsureSemaphorePostedInternal(int)
CThreadSyncObject::IsSemaphoreOrphanedInternal(int, int)
CThreadSyncObject::OpenSemaphoreInternal(char const*, bool)
CThreadSyncObject::ReleaseSemaphoreInternal(int, long)
CThreadSyncObject::SaveNameToFile(char const*)
CThreadSyncObject::SignalThreadSyncObjectInternal()
CThreadSyncObject::Wait(unsigned int)
CThreadSyncObject::Wait(unsigned int) [clone .part.0]
CThreadSyncObject::operator!() const
CThreadSyncObject::~CThreadSyncObject()
CThreadSyncObject::~CThreadSyncObject() [clone .part.0]
CXXABI_1.3
CXXABI_1.3.9
CharNeedsEscape_Component(char)
CharNeedsEscape_FullPath(char)
CleanupDriverLog()
CreateSimpleProcess
CreateSimpleThread(unsigned int (*)(void*), void*, unsigned int*, unsigned int)
DW.ref.__gxx_personality_v0
DebugDriverLog(char const*, ...)
DeclareCurrentThreadIsMainThread
DriverLog(char const*, ...)
DriverLogString(char const*)
DriverLogVarArgs(char const*, __va_list_tag*)
Failed to init scheduler: failed to get rlimit
Failed to init scheduler: failed to get sched params %d
Failed to init scheduler: failed to set rlimit
Failed to set thread %p priority: invalid priority %d
Failed to set thread %p priority: set failed for %d: %d: %s
Failed to set thread priority: foreign thread unsupported
Failed to set thread priority: scheduler init failed
Failed to set thread priority: setschedparam failed %d: %d
FbcE
Format string parse failure
Format(char const*, ...)
Format(char const*, ...) [clone .cold]
GCC: (SteamRT 10.3.0-3+steamrt3.1+bsrt3.1) 10.3.0
GLIBCXX_3.4
GLIBCXX_3.4.11
GLIBCXX_3.4.14
GLIBCXX_3.4.20
GLIBCXX_3.4.21
GLIBCXX_3.4.22
GLIBC_2.12
GLIBC_2.14
GLIBC_2.2.5
GLIBC_2.3
GLIBC_2.3.2
GLIBC_2.3.4
GNU
Gamepad
GetEnvironmentVariable(char const*)
GetEnvironmentVariableAsBool(%s): Unable to parse value '%s', using default %d
GetEnvironmentVariableAsBool(char const*, bool)
GetEnvironmentVariableAsBool(char const*, bool) [clone .cold]
HmdDriverFactory
ID
IServerTrackedDeviceProvider_004
ITrackedDeviceServerDriver_005
IVRCameraComponent_003
IVRCompositorPluginProvider_001
IVRDisplayComponent_002
IVRDriverDirectModeComponent_008
IVRDriverInput_003
IVRDriverLog_001
IVRDriverManager_001
IVRProperties_001
IVRResources_001
IVRServerDriverHost_006
IVRSettings_003
IVRVirtualDisplay_002
IVRWatchdogProvider_001
InitDriverLog(vr::IVRDriverLog*)
InitDriverLog(vr::IVRDriverLog*) [clone .cold]
InitMainThread()
IpAndPortToString(unsigned int, unsigned short)
IpToString(unsigned int)
IsDriverLogActive()
IsOnLaptop()
IsPosix()
IsRunningAsService()
IsRunningInAppContainer()
IsRunningInAppContainer() [clone .cold]
IsRunningInAppContainer()::s_bDeterminedAppContainerStatus
IsRunningInAppContainer()::s_bIsRunningInAppContainer
IsWorkstationLocked()
Log(ELogLevel, char const*, ...)
Log(char const*, ...)
LogDirect(ELogLevel, char const*, __va_list_tag (&) [1])
N2vr26ITrackedDeviceServerDriverE
N2vr28IServerTrackedDeviceProviderE
Out of thread local storage!
PFbcE
Plat_IsInDebugSession
Plat_IsInDebugSession::fp
ReapChildProcesses(int)
ReleaseThreadHandle
RepairUTF8(char const*, char const*, std::string&)
RepairUTF8(char const*, char const*, std::string&) [clone .cold]
RepairUTF8(std::string const&, std::string&)
ReturnStdString(std::string const&, char*, unsigned int)
SDL_GAMECONTROLLER_ALLOW_STEAM_VIRTUAL_GAMEPAD
SDL_GAMECONTROLLER_IGNORE_DEVICES
SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT
SDL_GameControllerClose
SDL_GameControllerGetAttached
SDL_GameControllerGetJoystick
SDL_GameControllerName
SDL_GameControllerOpen
SDL_GameControllerUpdate
SDL_GetError
SDL_GetPowerInfo
SDL_HapticClose
SDL_HapticOpenFromJoystick
SDL_HapticRumbleInit
SDL_HapticRumblePlay
SDL_HapticRumbleStop
SDL_HapticRumbleSupported
SDL_InitSubSystem
SDL_IsGameController
SDL_JoystickGetDeviceVendor
SDL_JoystickGetGUID
SDL_JoystickGetGUIDString
SDL_JoystickInstanceID
SDL_NumJoysticks
SDL_PollEvent
SDL_QuitSubSystem
SDL_SetThreadPriority
Set thread %p priority to: %d
SetCurrentProcessExplicitAppUserModelID()
SetEnvironmentVariable(char const*, char const*)
Skipping controller %d because it has the Valve VID
St12codecvt_utf8IDiLm1114111ELSt12codecvt_mode0EE
St18codecvt_utf8_utf16IwLm1114111ELSt12codecvt_mode0EE
SteamVRVersionAsString()
SteamVRVersionAsString() [clone .cold]
SteamVRVersionAsString()::s_sCachedVersion
StringHasPrefix(std::string const&, std::string const&)
StringHasPrefixCaseSensitive(std::string const&, std::string const&)
StringHasSuffix(std::string const&, std::string const&)
StringHasSuffixCaseSensitive(std::string const&, std::string const&)
StringToLower(std::string const&)
StringToLower(std::string const&) [clone .cold]
StringToUint64(std::string const&)
StringToUpper(std::string const&)
StringToUpper(std::string const&) [clone .cold]
Thread failed to initialize 1
Thread failed to initialize 2
Thread(0x%p/0x%p/0x%x)
ThreadCloseProcess
ThreadGetCurrentHandle
ThreadGetCurrentId
ThreadGetCurrentProcessHandle
ThreadGetCurrentProcessId
ThreadGetCurrentRunningRef
ThreadGetPriority
ThreadGetProcessExitCode
ThreadGetProcessListInfo
ThreadGetProcessParentID
ThreadGetProcessPriority
ThreadInMainThread
ThreadInitSchedulerForRtkit()::sInitMutex
ThreadInitSchedulerForRtkit()::sbThreadSchedInitialized
ThreadInterlockedAssignIf
ThreadInterlockedAssignIf64
ThreadInterlockedAssignPointerIf
ThreadInterlockedCompareExchange
ThreadInterlockedCompareExchange64
ThreadInterlockedCompareExchangePointer
ThreadInterlockedDecrement
ThreadInterlockedDecrement64
ThreadInterlockedExchange
ThreadInterlockedExchange64
ThreadInterlockedExchangeAdd
ThreadInterlockedExchangeAdd64
ThreadInterlockedExchangePointer
ThreadInterlockedIncrement
ThreadInterlockedIncrement64
ThreadIsProcessActive
ThreadIsThreadRunning
ThreadOpenProcess
ThreadOverrideCurrentProcessId
ThreadProcConvert(void*)
ThreadResumeSignal(int)
ThreadSetAffinity
ThreadSetDebugName
ThreadSetDescription
ThreadSetPriority
ThreadSetPriority.cold
ThreadSetProcessPriority
ThreadShellExecute
ThreadShellExecute::bInstalledSignalHandler
ThreadSleep
ThreadSuspendSignal(int)
ThreadTerminate
ThreadTerminateProcessCode
ThreadWaitForProcessExit
ThreadYield()
TokenizeString(std::string const&, char)
TokenizeString(std::string const&, char) [clone .cold]
TracerPid:
TrimTrailingWhitespace(std::string const&)
USER
UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)
UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&) [clone .cold]
UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)::s_convert
UTF16to8(wchar_t const*)
UTF16to8(wchar_t const*) [clone .cold]
UTF8to16(char const*)
UTF8to16(char const*) [clone .cold]
UTF8to16(std::string const&)
UTF8to16(std::string const&) [clone .cold]
UTF8to16(std::string const&)::s_convert
Uint64ToString(unsigned long)
Unknown priority class!
VTT for std::basic_ifstream<char, std::char_traits<char> >
VTT for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >
V_StripExtension(std::string&)
V_URLDecode(char*, int, char const*, int)
V_URLDecodeInternal(char*, int, char const*, int, bool)
V_URLDecodeInternal(char*, int, char const*, int, bool) [clone .part.0]
V_URLDecodeNoPlusForSpace(char*, int, char const*, int)
V_URLEncode(char*, int, char const*, int)
V_URLEncode(char*, int, char const*, int) [clone .cold]
V_URLEncodeFullPath(char*, int, char const*, int)
V_URLEncodeFullPath(char*, int, char const*, int) [clone .cold]
V_URLEncodeInternal(char*, int, char const*, int, bool, std::function<bool (char)>)
V_URLEncodeNoPlusForSpace(char*, int, char const*, int)
V_URLEncodeNoPlusForSpace(char*, int, char const*, int) [clone .cold]
VerifyTidIntegrity failed for thread %d. Most likely this process was forked after calling ThreadGetCurrentId.
VerifyTidIntegrity()
_DYNAMIC
_GLOBAL_OFFSET_TABLE_
_GLOBAL__sub_I_driver_gamepad.cpp
_GLOBAL__sub_I_driverlog.cpp
_GLOBAL__sub_I_strtools_public.cpp
_GLOBAL__sub_I_threadtools.cpp
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
_Unwind_Backtrace
_Unwind_Backtrace.cold
_Unwind_DebugHook
_Unwind_DeleteException
_Unwind_FindEnclosingFunction
_Unwind_Find_FDE
_Unwind_Find_FDE.cold
_Unwind_ForcedUnwind
_Unwind_ForcedUnwind_Phase2
_Unwind_ForcedUnwind_Phase2.cold
_Unwind_GetCFA
_Unwind_GetDataRelBase
_Unwind_GetGR
_Unwind_GetGR.cold
_Unwind_GetIP
_Unwind_GetIPInfo
_Unwind_GetLanguageSpecificData
_Unwind_GetRegionStart
_Unwind_GetTextRelBase
_Unwind_IteratePhdrCallback
_Unwind_IteratePhdrCallback.cold
_Unwind_RaiseException
_Unwind_RaiseException.cold
_Unwind_RaiseException_Phase2
_Unwind_RaiseException_Phase2.cold
_Unwind_Resume
_Unwind_Resume.cold
_Unwind_Resume_or_Rethrow
_Unwind_Resume_or_Rethrow.cold
_Unwind_SetGR
_Unwind_SetGR.cold
_Unwind_SetIP
__FRAME_END__
__TMC_END__
__TMC_LIST__
__bss_start
__cxa_allocate_exception
__cxa_atexit
__cxa_begin_catch
__cxa_end_catch
__cxa_finalize
__cxa_guard_abort
__cxa_guard_acquire
__cxa_guard_release
__cxa_pure_virtual
__cxa_rethrow
__cxa_throw
__deregister_frame
__deregister_frame_info
__deregister_frame_info_bases
__do_global_dtors_aux
__do_global_dtors_aux_fini_array_entry
__dso_handle
__errno_location
__frame_dummy_init_array_entry
__frame_state_for
__gmon_start__
__gxx_personality_v0
__pthread_key_create
__register_frame
__register_frame_info
__register_frame_info_bases
__register_frame_info_table
__register_frame_info_table_bases
__register_frame_table
__tls_get_addr
__xstat64
_edata
_end
_exit
_fini
abort
add_fdes
add_fdes.cold
adds.1
any_objects_registered
basic_string::at: __n (which is %zu) >= this->size() (which is %zu)
basic_string::substr
bool std::__do_str_codecvt<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, char, std::codecvt<wchar_t, char, __mbstate_t>, __mbstate_t, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const>(char const*, char const*, std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >&, std::codecvt<wchar_t, char, __mbstate_t> const&, __mbstate_t&, unsigned long&, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const)
bool std::__do_str_codecvt<std::string, wchar_t, std::codecvt<wchar_t, char, __mbstate_t>, __mbstate_t, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const>(wchar_t const*, wchar_t const*, std::string&, std::codecvt<wchar_t, char, __mbstate_t> const&, __mbstate_t&, unsigned long&, std::codecvt_base::result (std::codecvt<wchar_t, char, __mbstate_t>::*)(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const)
cIntToHexDigit(int)
chdir
classify_object_over_fdes
classify_object_over_fdes.cold
closedir
completed.0
crc32(unsigned int, void const*, unsigned long)
crc32(unsigned int, void const*, unsigned long)::crcTable
deregister_tm_clones
dl_iterate_phdr
execute_cfa_program
execute_cfa_program.cold
execute_stack_op
execute_stack_op.cold
fclose
fde_mixed_encoding_compare
fde_mixed_encoding_compare.cold
fde_single_encoding_compare
fde_single_encoding_compare.cold
fde_unencoded_compare
fflush
fgets
fopen
force_pid
force_pid_val
fork
fprintf
frame_downheap
frame_dummy
frame_hdr_cache
frame_hdr_cache_head
frame_heapsort
free
g_SuspendResumeLock
g_ThreadMainThreadID
g_bSetSuspendHandlers
g_bSuspendResumeAck
g_mutex
g_nCurThreadSuspendCount
g_pCurThread
g_serverDriverGamepad
g_szSemFileName
get_cie_encoding
getenv
getpid
getppid
getpriority
getrlimit
gettimeofday
guard variable for SteamVRVersionAsString()::s_sCachedVersion
guard variable for ThreadInitSchedulerForRtkit()::sInitMutex
guard variable for UTF16to8(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)::s_convert
guard variable for UTF8to16(std::string const&)::s_convert
iHexCharToInt(char)
init_dwarf_reg_size_table
isalpha
kill
ld-linux-x86-64.so.2
libSDL2-2.0.so.0
libc.so.6
libpthread.so.0
libstdc++.so.6
linear_search_fdes
linear_search_fdes.cold
m
malloc
marker.4
memcmp
memcpy
memmove
memset
nanosleep
object_mutex
once_regsizes.0
opendir
operator delete(void*, unsigned long)
operator delete[](void*)
operator new(unsigned long)
operator new[](unsigned long)
pthread_attr_init
pthread_attr_setstacksize
pthread_cancel
pthread_cond_destroy
pthread_cond_init
pthread_cond_signal
pthread_cond_timedwait
pthread_create
pthread_getschedparam
pthread_getspecific
pthread_join
pthread_key_create
pthread_key_delete
pthread_kill
pthread_mutex_destroy
pthread_mutex_init
pthread_mutex_lock
pthread_mutex_unlock
pthread_mutexattr_destroy
pthread_mutexattr_init
pthread_mutexattr_settype
pthread_once
pthread_self
pthread_setname_np
pthread_setschedparam
pthread_setspecific
r
read_encoded_value
read_encoded_value.cold
read_encoded_value_with_base
read_encoded_value_with_base.cold
readdir
rewind
s_pLogCallback
s_pLogFile
sched_get_priority_max
sched_get_priority_min
sched_getparam
sched_getscheduler
sched_setaffinity
sched_setscheduler
sched_yield
search_object
search_object.cold
semctl
semget
semop
setenv
setpriority
setrlimit
sigaction
snprintf
sprintf
std::_Function_base::~_Function_base()
std::_Function_handler<bool (char), bool (*)(char)>::_M_invoke(std::_Any_data const&, char&&)
std::_Function_handler<bool (char), bool (*)(char)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}>::_M_invoke(std::_Any_data const&, ELogLevel&&, char const*&&, void*&&)
std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<void (ELogLevel, char const*, void*), InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}> const&, std::_Manager_operation)
std::_Rb_tree<SDL_GameControllerAxis, std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t>, std::_Select1st<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, std::less<SDL_GameControllerAxis>, std::allocator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> > >::_M_erase(std::_Rb_tree_node<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >*) [clone .isra.0]
std::_Rb_tree<SDL_GameControllerButton, std::pair<SDL_GameControllerButton const, unsigned long>, std::_Select1st<std::pair<SDL_GameControllerButton const, unsigned long> >, std::less<SDL_GameControllerButton>, std::allocator<std::pair<SDL_GameControllerButton const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<SDL_GameControllerButton const, unsigned long> >*) [clone .isra.0]
std::_Rb_tree<int, std::pair<int const, CGamepadDeviceDriver*>, std::_Select1st<std::pair<int const, CGamepadDeviceDriver*> >, std::less<int>, std::allocator<std::pair<int const, CGamepadDeviceDriver*> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, CGamepadDeviceDriver*> >*) [clone .isra.0]
std::_Rb_tree_decrement(std::_Rb_tree_node_base*)
std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)
std::__basic_file<char>::~__basic_file()
std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
std::__codecvt_utf8_base<char32_t>::do_always_noconv() const
std::__codecvt_utf8_base<char32_t>::do_encoding() const
std::__codecvt_utf8_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const
std::__codecvt_utf8_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
std::__codecvt_utf8_base<char32_t>::do_max_length() const
std::__codecvt_utf8_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const
std::__codecvt_utf8_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()
std::__codecvt_utf8_utf16_base<wchar_t>::do_always_noconv() const
std::__codecvt_utf8_utf16_base<wchar_t>::do_encoding() const
std::__codecvt_utf8_utf16_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
std::__codecvt_utf8_utf16_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const
std::__codecvt_utf8_utf16_base<wchar_t>::do_max_length() const
std::__codecvt_utf8_utf16_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
std::__codecvt_utf8_utf16_base<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const
std::__codecvt_utf8_utf16_base<wchar_t>::~__codecvt_utf8_utf16_base()
std::__ioinit
std::__throw_bad_cast()
std::__throw_bad_function_call()
std::__throw_length_error(char const*)
std::__throw_out_of_range_fmt(char const*, ...)
std::__throw_range_error(char const*)
std::__throw_system_error(int)
std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()
std::basic_filebuf<char, std::char_traits<char> >::close()
std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)
std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()
std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()
std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)
std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)
std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)
std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, unsigned long, std::allocator<char> const&)
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::allocator<char> const&)
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&)
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::string const&, unsigned long, unsigned long)
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(unsigned long, char, std::allocator<char> const&)
std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_leak_hard()
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_M_destroy(std::allocator<wchar_t> const&)
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_create(unsigned long, unsigned long, std::allocator<wchar_t> const&)
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_Rep::_S_empty_rep_storage
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::allocator<wchar_t> const&)
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::basic_string(std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long, wchar_t)
std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::~basic_string()
std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)
std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)
std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8()
std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8_utf16()
std::ctype<char>::_M_widen_init() const
std::ctype<char>::do_widen(char) const
std::ios_base::Init::Init()
std::ios_base::Init::~Init()
std::ios_base::ios_base()
std::ios_base::~ios_base()
std::locale::locale()
std::locale::~locale()
std::pair<std::_Rb_tree_iterator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, bool> std::_Rb_tree<SDL_GameControllerAxis, std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t>, std::_Select1st<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, std::less<SDL_GameControllerAxis>, std::allocator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> > >::_M_emplace_unique<std::pair<SDL_GameControllerAxis, CGamepadDeviceDriver::AxisInfo_t> >(std::pair<SDL_GameControllerAxis, CGamepadDeviceDriver::AxisInfo_t>&&)
std::pair<std::_Rb_tree_iterator<std::pair<SDL_GameControllerButton const, unsigned long> >, bool> std::_Rb_tree<SDL_GameControllerButton, std::pair<SDL_GameControllerButton const, unsigned long>, std::_Select1st<std::pair<SDL_GameControllerButton const, unsigned long> >, std::less<SDL_GameControllerButton>, std::allocator<std::pair<SDL_GameControllerButton const, unsigned long> > >::_M_emplace_unique<std::pair<SDL_GameControllerButton, unsigned long> >(std::pair<SDL_GameControllerButton, unsigned long>&&)
std::pair<std::_Rb_tree_iterator<std::pair<int const, CGamepadDeviceDriver*> >, bool> std::_Rb_tree<int, std::pair<int const, CGamepadDeviceDriver*>, std::_Select1st<std::pair<int const, CGamepadDeviceDriver*> >, std::less<int>, std::allocator<std::pair<int const, CGamepadDeviceDriver*> > >::_M_emplace_unique<std::pair<int, CGamepadDeviceDriver*> >(std::pair<int, CGamepadDeviceDriver*>&&)
std::string::_M_leak_hard()
std::string::_Rep::_M_destroy(std::allocator<char> const&)
std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&)
std::string::_Rep::_S_empty_rep_storage
std::string::append(char const*, unsigned long)
std::string::append(std::string const&)
std::string::assign(char const*, unsigned long)
std::string::compare(char const*) const
std::string::find_last_not_of(char const*, unsigned long, unsigned long) const
std::string::insert(unsigned long, char const*, unsigned long)
std::string::reserve(unsigned long)
std::string::resize(unsigned long, char)
std::string::rfind(char, unsigned long) const
std::string::swap(std::string&)
std::terminate()
std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())
std::thread::_State::~_State()
std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >::_M_run()
std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >::~_State_impl()
std::thread::join()
std::unique_ptr<CLogCallback, std::default_delete<CLogCallback> >::~unique_ptr()
std::wstring_convert<std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>, wchar_t, std::allocator<wchar_t>, std::allocator<char> >::~wstring_convert()
stderr
steamrt
strcasecmp
strcpy_safe(char*, unsigned long, char const*)
strerror
stricmp(char const*, char const*)
strlen
strncasecmp
strncmp
strncpy
strnicmp(char const*, char const*, unsigned long)
strtol
strtoull
subs.2
syscall
system
terminator.3
tolower
toupper
typeinfo for CGamepadDeviceDriver
typeinfo for CServerDriver_Gamepad
typeinfo for CThread
typeinfo for InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}
typeinfo for bool (*)(char)
typeinfo for bool (char)
typeinfo for int
typeinfo for std::__codecvt_utf8_base<char32_t>
typeinfo for std::__codecvt_utf8_utf16_base<wchar_t>
typeinfo for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
typeinfo for std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>
typeinfo for std::thread::_State
typeinfo for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
typeinfo for vr::IServerTrackedDeviceProvider
typeinfo for vr::ITrackedDeviceServerDriver
typeinfo name for CGamepadDeviceDriver
typeinfo name for CServerDriver_Gamepad
typeinfo name for CThread
typeinfo name for InitDriverLog(vr::IVRDriverLog*)::{lambda(ELogLevel, char const*, void*)#1}
typeinfo name for bool (*)(char)
typeinfo name for bool (char)
typeinfo name for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
typeinfo name for std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>
typeinfo name for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
typeinfo name for vr::IServerTrackedDeviceProvider
typeinfo name for vr::ITrackedDeviceServerDriver
unseen_objects
unsetenv
usleep
uw_frame_state_for
uw_frame_state_for.cold
uw_init_context_1
uw_init_context_1.cold
uw_install_context_1
uw_install_context_1.cold
uw_update_context_1
uw_update_context_1.cold
vector::_M_realloc_insert
void std::vector<CAssertCallback*, std::allocator<CAssertCallback*> >::_M_realloc_insert<CAssertCallback* const&>(__gnu_cxx::__normal_iterator<CAssertCallback**, std::vector<CAssertCallback*, std::allocator<CAssertCallback*> > >, CAssertCallback* const&)
void std::vector<CGamepadDeviceDriver*, std::allocator<CGamepadDeviceDriver*> >::_M_realloc_insert<CGamepadDeviceDriver* const&>(__gnu_cxx::__normal_iterator<CGamepadDeviceDriver**, std::vector<CGamepadDeviceDriver*, std::allocator<CGamepadDeviceDriver*> > >, CGamepadDeviceDriver* const&)
void std::vector<CLogCallback*, std::allocator<CLogCallback*> >::_M_realloc_insert<CLogCallback* const&>(__gnu_cxx::__normal_iterator<CLogCallback**, std::vector<CLogCallback*, std::allocator<CLogCallback*> > >, CLogCallback* const&)
void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string const&>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string const&)
void std::vector<std::string, std::allocator<std::string> >::_M_realloc_insert<std::string>(__gnu_cxx::__normal_iterator<std::string*, std::vector<std::string, std::allocator<std::string> > >, std::string&&)
vr::OpenVRInternal_ModuleServerDriverContext()::ctx
vr::VRDriverContext()::pHost
vr::k_InterfaceVersions
vsnprintf
vtable for CGamepadDeviceDriver
vtable for CServerDriver_Gamepad
vtable for CThread
vtable for __cxxabiv1::__class_type_info
vtable for __cxxabiv1::__function_type_info
vtable for __cxxabiv1::__pointer_type_info
vtable for __cxxabiv1::__si_class_type_info
vtable for std::basic_filebuf<char, std::char_traits<char> >
vtable for std::basic_ifstream<char, std::char_traits<char> >
vtable for std::basic_ios<char, std::char_traits<char> >
vtable for std::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >
vtable for std::basic_streambuf<char, std::char_traits<char> >
vtable for std::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >
vtable for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
vtable for std::codecvt_utf8_utf16<wchar_t, 1114111ul, (std::codecvt_mode)0>
vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
waitpid
wcslen
wmemcpy
wstring_convert::from_bytes
wstring_convert::to_bytes
zD
{gamepad}/icons/gamepad_status_error.png
{gamepad}/icons/gamepad_status_off.png
{gamepad}/icons/gamepad_status_ready.png
{gamepad}/icons/gamepad_status_ready_alert.png
{gamepad}/icons/gamepad_status_ready_low.png
{gamepad}/icons/gamepad_status_searching.gif
{gamepad}/icons/gamepad_status_searching_alert.gif
{gamepad}/icons/gamepad_status_standby.png
{gamepad}/input/gamepad_profile.json
