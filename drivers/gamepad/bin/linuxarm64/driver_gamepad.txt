 B __bss_end__
 B __bss_start
 B __bss_start__
 B __end__
 B _bss_end__
 B _end
 D _edata
 SDL_GameControllerClose
 SDL_GameControllerGetAttached
 SDL_GameControllerGetJoystick
 SDL_GameControllerName
 SDL_GameControllerOpen
 SDL_GameControllerUpdate
 SDL_GetError
 SDL_GetPowerInfo
 SDL_HapticClose
 SDL_HapticOpenFromJoystick
 SDL_HapticRumbleInit
 SDL_HapticRumblePlay
 SDL_HapticRumbleStop
 SDL_HapticRumbleSupported
 SDL_InitSubSystem
 SDL_IsGameController
 SDL_JoystickGetDeviceVendor
 SDL_JoystickGetGUID
 SDL_JoystickGetGUIDString
 SDL_JoystickInstanceID
 SDL_NumJoysticks
 SDL_PollEvent
 SDL_QuitSubSystem
 SDL_SetThreadPriority
 T HmdDriverFactory
 T _fini
 T _init
 V typeinfo for bool (*)(char)
 V typeinfo for bool (char)
 V typeinfo name for bool (*)(char)
 V typeinfo name for bool (char)
 VTT for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
 VTT for std::basic_ifstream<char, std::char_traits<char> >@@GLIBCXX_3.4
 _ITM_deregisterTMCloneTable
 _ITM_registerTMCloneTable
 __cxa_allocate_exception@@CXXABI_1.3
 __cxa_atexit@@GLIBC_2.17
 __cxa_begin_catch@@CXXABI_1.3
 __cxa_end_catch@@CXXABI_1.3
 __cxa_finalize@@GLIBC_2.17
 __cxa_guard_abort@@CXXABI_1.3
 __cxa_guard_acquire@@CXXABI_1.3
 __cxa_guard_release@@CXXABI_1.3
 __cxa_pure_virtual@@CXXABI_1.3
 __cxa_rethrow@@CXXABI_1.3
 __cxa_throw@@CXXABI_1.3
 __errno_location@@GLIBC_2.17
 __fprintf_chk@@GLIBC_2.17
 __gmon_start__
 __gxx_personality_v0@@CXXABI_1.3
 __pthread_key_create@@GLIBC_2.17
 __snprintf_chk@@GLIBC_2.17
 __sprintf_chk@@GLIBC_2.17
 __stack_chk_fail@@GLIBC_2.17
 __stack_chk_guard@@GLIBC_2.17
 __vsnprintf_chk@@GLIBC_2.17
 __xstat64@@GLIBC_2.17
 _exit@@GLIBC_2.17
 a _DYNAMIC
 a _GLOBAL_OFFSET_TABLE_
 abort@@GLIBC_2.17
 b $d
 b CAssert::m_mutex
 b CAssert::m_pInstance
 b CLog::s_mutex
 b CLog::s_pInstance
 b IsRunningInAppContainer()::s_bDeterminedAppContainerStatus
 b IsRunningInAppContainer()::s_bIsRunningInAppContainer
 b Plat_IsInDebugSession::fp
 b SteamVRVersionAsString[abi:cxx11]()::s_sCachedVersion
 b ThreadGetCurrentId::s_selftid
 b ThreadInitSchedulerForRtkit()::sInitMutex
 b ThreadInitSchedulerForRtkit()::sbThreadSchedInitialized
 b ThreadShellExecute::bInstalledSignalHandler
 b UTF16to8[abi:cxx11](wchar_t const*)::s_converter
 b UTF8to16[abi:cxx11](char const*)::s_converter
 b _TLS_MODULE_BASE_
 b any_objects_registered
 b completed.8904
 b dwarf_reg_size_table
 b frame_hdr_cache
 b frame_hdr_cache_head
 b g_SuspendResumeLock
 b g_ThreadMainThreadID
 b g_bSetSuspendHandlers
 b g_bSuspendResumeAck
 b g_mutex
 b g_nCurThreadSuspendCount
 b g_pCurThread
 b g_serverDriverGamepad
 b guard variable for SteamVRVersionAsString[abi:cxx11]()::s_sCachedVersion
 b guard variable for ThreadInitSchedulerForRtkit()::sInitMutex
 b guard variable for UTF16to8[abi:cxx11](wchar_t const*)::s_converter
 b guard variable for UTF8to16[abi:cxx11](char const*)::s_converter
 b marker.10668
 b object_mutex
 b once_regsizes.11106
 b s_pLogFile
 b seen_objects
 b std::__ioinit
 b subs.10931
 b unseen_objects
 b vr::OpenVRInternal_ModuleServerDriverContext()::ctx
 b vr::VRDriverContext()::pHost
 chdir@@GLIBC_2.17
 closedir@@GLIBC_2.17
 d $d
 d DW.ref.__gxx_personality_v0
 d __TMC_END__
 d __do_global_dtors_aux_fini_array_entry
 d __dso_handle
 d __frame_dummy_init_array_entry
 d adds.10930
 d g_szSemFileName
 d typeinfo for CGamepadDeviceDriver
 d typeinfo for CServerDriver_Gamepad
 d typeinfo for SteamThreadTools::CThread
 d typeinfo for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 d typeinfo for std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>
 d typeinfo for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
 d typeinfo for vr::IServerTrackedDeviceProvider
 d typeinfo for vr::ITrackedDeviceServerDriver
 d vr::k_InterfaceVersions
 d vtable for CGamepadDeviceDriver
 d vtable for CServerDriver_Gamepad
 d vtable for SteamThreadTools::CThread
 d vtable for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 d vtable for std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>
 d vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
 dl_iterate_phdr@@GLIBC_2.17
 fclose@@GLIBC_2.17
 fflush@@GLIBC_2.17
 fgets@@GLIBC_2.17
 fopen@@GLIBC_2.17
 fork@@GLIBC_2.17
 free@@GLIBC_2.17
 getenv@@GLIBC_2.17
 getpid@@GLIBC_2.17
 getppid@@GLIBC_2.17
 getpriority@@GLIBC_2.17
 getrlimit@@GLIBC_2.17
 gettimeofday@@GLIBC_2.17
 isalpha@@GLIBC_2.17
 kill@@GLIBC_2.17
 malloc@@GLIBC_2.17
 memchr@@GLIBC_2.17
 memcmp@@GLIBC_2.17
 memcpy@@GLIBC_2.17
 memmove@@GLIBC_2.17
 memset@@GLIBC_2.17
 nanosleep@@GLIBC_2.17
 opendir@@GLIBC_2.17
 operator delete(void*)@@GLIBCXX_3.4
 operator delete(void*, unsigned long)@@CXXABI_1.3.9
 operator delete[](void*)@@GLIBCXX_3.4
 operator new(unsigned long)@@GLIBCXX_3.4
 operator new[](unsigned long)@@GLIBCXX_3.4
 pthread_attr_init@@GLIBC_2.17
 pthread_attr_setstacksize@@GLIBC_2.17
 pthread_cancel@@GLIBC_2.17
 pthread_cond_destroy@@GLIBC_2.17
 pthread_cond_init@@GLIBC_2.17
 pthread_cond_signal@@GLIBC_2.17
 pthread_cond_timedwait@@GLIBC_2.17
 pthread_create@@GLIBC_2.17
 pthread_getschedparam@@GLIBC_2.17
 pthread_getspecific@@GLIBC_2.17
 pthread_join@@GLIBC_2.17
 pthread_key_create@@GLIBC_2.17
 pthread_key_delete@@GLIBC_2.17
 pthread_kill@@GLIBC_2.17
 pthread_mutex_destroy@@GLIBC_2.17
 pthread_mutex_init@@GLIBC_2.17
 pthread_mutex_lock@@GLIBC_2.17
 pthread_mutex_unlock@@GLIBC_2.17
 pthread_mutexattr_destroy@@GLIBC_2.17
 pthread_mutexattr_init@@GLIBC_2.17
 pthread_mutexattr_settype@@GLIBC_2.17
 pthread_once@@GLIBC_2.17
 pthread_self@@GLIBC_2.17
 pthread_setname_np@@GLIBC_2.17
 pthread_setschedparam@@GLIBC_2.17
 pthread_setspecific@@GLIBC_2.17
 r $d
 r CSWTCH.152
 r SteamThreadTools::CThreadSpinRWLock::TryLockForWrite(unsigned int)::oldValue
 r SteamThreadTools::CThreadSpinRWLock::UnlockWrite()::newValue
 r __FRAME_END__
 r __GNU_EH_FRAME_HDR
 r crc32(unsigned int, void const*, unsigned long)::crcTable
 r terminator.10774
 r typeinfo name for CGamepadDeviceDriver
 r typeinfo name for CServerDriver_Gamepad
 r typeinfo name for SteamThreadTools::CThread
 r typeinfo name for std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>
 r typeinfo name for std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>
 r typeinfo name for std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >
 r typeinfo name for vr::IServerTrackedDeviceProvider
 r typeinfo name for vr::ITrackedDeviceServerDriver
 readdir@@GLIBC_2.17
 rewind@@GLIBC_2.17
 sched_get_priority_max@@GLIBC_2.17
 sched_get_priority_min@@GLIBC_2.17
 sched_getparam@@GLIBC_2.17
 sched_getscheduler@@GLIBC_2.17
 sched_setscheduler@@GLIBC_2.17
 sched_yield@@GLIBC_2.17
 semctl@@GLIBC_2.17
 semget@@GLIBC_2.17
 semop@@GLIBC_2.17
 setenv@@GLIBC_2.17
 setpriority@@GLIBC_2.17
 setrlimit@@GLIBC_2.17
 sigaction@@GLIBC_2.17
 snprintf@@GLIBC_2.17
 std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@@GLIBCXX_3.4
 std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@@GLIBCXX_3.4
 std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@@GLIBCXX_3.4
 std::__basic_file<char>::~__basic_file()@@GLIBCXX_3.4
 std::__codecvt_utf8_base<char32_t>::do_always_noconv() const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<char32_t>::do_encoding() const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<char32_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, char32_t*, char32_t*, char32_t*&) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<char32_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<char32_t>::do_max_length() const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<char32_t>::do_out(__mbstate_t&, char32_t const*, char32_t const*, char32_t const*&, char*, char*, char*&) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<char32_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<char32_t>::~__codecvt_utf8_base()@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::do_always_noconv() const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::do_encoding() const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::do_in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::do_length(__mbstate_t&, char const*, char const*, unsigned long) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::do_max_length() const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::do_out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::do_unshift(__mbstate_t&, char*, char*, char*&) const@@GLIBCXX_3.4.21
 std::__codecvt_utf8_base<wchar_t>::~__codecvt_utf8_base()@@GLIBCXX_3.4.21
 std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >::~basic_istringstream()@@GLIBCXX_3.4.21
 std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::_M_sync(char*, unsigned long, unsigned long)@@GLIBCXX_3.4.21
 std::__throw_bad_cast()@@GLIBCXX_3.4
 std::__throw_bad_function_call()@@GLIBCXX_3.4.14
 std::__throw_length_error(char const*)@@GLIBCXX_3.4
 std::__throw_logic_error(char const*)@@GLIBCXX_3.4
 std::__throw_out_of_range_fmt(char const*, ...)@@GLIBCXX_3.4.20
 std::__throw_range_error(char const*)@@GLIBCXX_3.4
 std::__throw_system_error(int)@@GLIBCXX_3.4.11
 std::basic_filebuf<char, std::char_traits<char> >::basic_filebuf()@@GLIBCXX_3.4
 std::basic_filebuf<char, std::char_traits<char> >::close()@@GLIBCXX_3.4
 std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)@@GLIBCXX_3.4
 std::basic_filebuf<char, std::char_traits<char> >::~basic_filebuf()@@GLIBCXX_3.4
 std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()@@GLIBCXX_3.4
 std::basic_ios<char, std::char_traits<char> >::clear(std::_Ios_Iostate)@@GLIBCXX_3.4
 std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)@@GLIBCXX_3.4
 std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)@@GLIBCXX_3.4.21
 std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)@@GLIBCXX_3.4
 std::ctype<char>::_M_widen_init() const@@GLIBCXX_3.4.11
 std::ios_base::Init::Init()@@GLIBCXX_3.4
 std::ios_base::Init::~Init()@@GLIBCXX_3.4
 std::ios_base::ios_base()@@GLIBCXX_3.4
 std::ios_base::~ios_base()@@GLIBCXX_3.4
 std::locale::locale()@@GLIBCXX_3.4
 std::locale::~locale()@@GLIBCXX_3.4
 std::terminate()@@GLIBCXX_3.4
 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())@@GLIBCXX_3.4.22
 std::thread::_State::~_State()@@GLIBCXX_3.4.22
 std::thread::join()@@GLIBCXX_3.4.11
 stderr@@GLIBC_2.17
 strcasecmp@@GLIBC_2.17
 strcmp@@GLIBC_2.17
 strerror@@GLIBC_2.17
 strlen@@GLIBC_2.17
 strncasecmp@@GLIBC_2.17
 strncmp@@GLIBC_2.17
 strncpy@@GLIBC_2.17
 strtol@@GLIBC_2.17
 strtoull@@GLIBC_2.17
 syscall@@GLIBC_2.17
 system@@GLIBC_2.17
 t $x
 t CAssert::AddCallback(CAssertCallback*)
 t CAssert::AssertMsgImpl(char const*, unsigned int, bool, unsigned int, ...)
 t CAssert::GetInstance()
 t CAssert::RemoveCallback(CAssertCallback*)
 t CAssertCallback::Initialize(std::function<void (char const*, char const*, unsigned int, bool, void*, bool*)>, void*)
 t CAssertCallback::~CAssertCallback()
 t CGamepadDeviceDriver::Activate(unsigned int)
 t CGamepadDeviceDriver::AddTrackedDevice()
 t CGamepadDeviceDriver::Deactivate()
 t CGamepadDeviceDriver::DebugRequest(char const*, char*, unsigned int)
 t CGamepadDeviceDriver::EnterStandby()
 t CGamepadDeviceDriver::GetComponent(char const*)
 t CGamepadDeviceDriver::GetPose()
 t CGamepadDeviceDriver::PowerOff()
 t CGamepadDeviceDriver::~CGamepadDeviceDriver()
 t CLog::AddCallback(CLogCallback*)
 t CLog::GetInstance()
 t CLog::Log(ELogLevel, char const*, ...)
 t CLog::Log(ELogLevel, char const*, std::__va_list&)
 t CLog::RemoveCallback(CLogCallback*)
 t CLogCallback::Initialize(std::function<void (ELogLevel, char const*, void*)>, void*)
 t CLogCallback::~CLogCallback()
 t CServerDriver_Gamepad::AddGameControllerByIndex(int)
 t CServerDriver_Gamepad::Cleanup()
 t CServerDriver_Gamepad::Cleanup_SDL()
 t CServerDriver_Gamepad::EnterStandby()
 t CServerDriver_Gamepad::GetInterfaceVersions()
 t CServerDriver_Gamepad::Init(vr::IVRDriverContext*)
 t CServerDriver_Gamepad::LeaveStandby()
 t CServerDriver_Gamepad::RunFrame()
 t CServerDriver_Gamepad::RunFrame_SDL()
 t CServerDriver_Gamepad::RunThread()
 t CServerDriver_Gamepad::Setup_SDL()
 t CServerDriver_Gamepad::ShouldBlockStandbyMode()
 t CServerDriver_Gamepad::~CServerDriver_Gamepad()
 t CharNeedsEscape_Component(char)
 t CharNeedsEscape_FullPath(char)
 t CleanupDriverLog()
 t CreateSimpleProcess
 t CreateSimpleThread(unsigned int (*)(void*), void*, unsigned int*, unsigned int)
 t DebugDriverLog(char const*, ...)
 t DeclareCurrentThreadIsMainThread
 t DriverLog(char const*, ...)
 t DriverLogString(char const*)
 t DriverLogVarArgs(char const*, std::__va_list)
 t Format[abi:cxx11](char const*, ...)
 t GetEnvironmentVariableAsBool(char const*, bool)
 t GetEnvironmentVariable[abi:cxx11](char const*)
 t InitDriverLog(vr::IVRDriverLog*)
 t InitMainThread()
 t IsDriverLogActive()
 t IsOnLaptop()
 t IsPosix()
 t IsRunningAsService()
 t IsRunningInAppContainer()
 t IsWorkstationLocked()
 t Log(ELogLevel, char const*, ...)
 t Log(char const*, ...)
 t LogDirect(ELogLevel, char const*, std::__va_list&)
 t LogHelper(ELogLevel, char const*, std::__va_list&)
 t Plat_IsInDebugSession
 t ReapChildProcesses(int)
 t ReleaseThreadHandle
 t RepairUTF8(char const*, char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
 t RepairUTF8(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
 t ReturnStdString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char*, unsigned int)
 t SetCurrentProcessExplicitAppUserModelID()
 t SetEnvironmentVariable(char const*, char const*)
 t SteamThreadTools::CThread::BHasValidThreadID()
 t SteamThreadTools::CThread::CThread()
 t SteamThreadTools::CThread::GetCurrentCThread()
 t SteamThreadTools::CThread::GetName()
 t SteamThreadTools::CThread::GetPriority() const
 t SteamThreadTools::CThread::GetResult() const
 t SteamThreadTools::CThread::GetThreadProc()
 t SteamThreadTools::CThread::Init()
 t SteamThreadTools::CThread::IsAlive()
 t SteamThreadTools::CThread::IsAlive() [clone .part.6]
 t SteamThreadTools::CThread::IsThreadRunning()
 t SteamThreadTools::CThread::Join(unsigned int)
 t SteamThreadTools::CThread::OnExit()
 t SteamThreadTools::CThread::Resume()
 t SteamThreadTools::CThread::SetName(char const*)
 t SteamThreadTools::CThread::SetPriority(int)
 t SteamThreadTools::CThread::Sleep(unsigned int)
 t SteamThreadTools::CThread::Start(unsigned int)
 t SteamThreadTools::CThread::Stop(int)
 t SteamThreadTools::CThread::Suspend()
 t SteamThreadTools::CThread::Terminate(int)
 t SteamThreadTools::CThread::ThreadExceptionWrapper(void*)
 t SteamThreadTools::CThread::ThreadProc(void*)
 t SteamThreadTools::CThread::WaitForCreateComplete(SteamThreadTools::CThreadEvent*)
 t SteamThreadTools::CThread::Yield()
 t SteamThreadTools::CThread::~CThread()
 t SteamThreadTools::CThread::~CThread() [clone .part.14]
 t SteamThreadTools::CThreadEvent::CThreadEvent(bool)
 t SteamThreadTools::CThreadEvent::CThreadEvent(char const*, bool, bool)
 t SteamThreadTools::CThreadEvent::Check()
 t SteamThreadTools::CThreadEvent::Reset()
 t SteamThreadTools::CThreadEvent::Set()
 t SteamThreadTools::CThreadFullMutex::CThreadFullMutex(bool, char const*, bool, bool)
 t SteamThreadTools::CThreadFullMutex::IsCreator() const
 t SteamThreadTools::CThreadFullMutex::Release()
 t SteamThreadTools::CThreadLocalBase::CThreadLocalBase()
 t SteamThreadTools::CThreadLocalBase::Get() const
 t SteamThreadTools::CThreadLocalBase::Set(void*)
 t SteamThreadTools::CThreadLocalBase::~CThreadLocalBase()
 t SteamThreadTools::CThreadLocalInt<long>::~CThreadLocalInt()
 t SteamThreadTools::CThreadLocalPtr<SteamThreadTools::CThread>::~CThreadLocalPtr()
 t SteamThreadTools::CThreadMutex::CThreadMutex()
 t SteamThreadTools::CThreadMutex::~CThreadMutex()
 t SteamThreadTools::CThreadRWLock::LockForWrite()
 t SteamThreadTools::CThreadRWLock::UnlockWrite()
 t SteamThreadTools::CThreadRWLock::WaitForRead()
 t SteamThreadTools::CThreadSemaphore::CThreadSemaphore(long, long)
 t SteamThreadTools::CThreadSemaphore::Release(long)
 t SteamThreadTools::CThreadSpinLock::Lock(unsigned int) volatile
 t SteamThreadTools::CThreadSpinRWLock::LockForRead()
 t SteamThreadTools::CThreadSpinRWLock::SpinLockForWrite(unsigned int)
 t SteamThreadTools::CThreadSpinRWLock::UnlockRead()
 t SteamThreadTools::CThreadSpinRWLock::UnlockWrite()
 t SteamThreadTools::CThreadSyncObject::AcquireSemaphoreInternal(unsigned int)
 t SteamThreadTools::CThreadSyncObject::AssertUseable()
 t SteamThreadTools::CThreadSyncObject::CThreadSyncObject()
 t SteamThreadTools::CThreadSyncObject::CloseSemaphoreInternal(int, bool, char const*)
 t SteamThreadTools::CThreadSyncObject::CreateAnonymousSyncObjectInternal(bool, bool)
 t SteamThreadTools::CThreadSyncObject::CreateSemaphoreInternal(char const*, long, bool, bool*)
 t SteamThreadTools::CThreadSyncObject::EnsureSemaphoreClearedInternal(int)
 t SteamThreadTools::CThreadSyncObject::EnsureSemaphorePostedInternal(int)
 t SteamThreadTools::CThreadSyncObject::IsSemaphoreOrphanedInternal(int, int)
 t SteamThreadTools::CThreadSyncObject::OpenSemaphoreInternal(char const*, bool)
 t SteamThreadTools::CThreadSyncObject::ReleaseSemaphoreInternal(int, long)
 t SteamThreadTools::CThreadSyncObject::SaveNameToFile(char const*)
 t SteamThreadTools::CThreadSyncObject::SignalThreadSyncObjectInternal()
 t SteamThreadTools::CThreadSyncObject::Wait(unsigned int)
 t SteamThreadTools::CThreadSyncObject::operator!() const
 t SteamThreadTools::CThreadSyncObject::~CThreadSyncObject()
 t SteamThreadTools::CThreadSyncObject::~CThreadSyncObject() [clone .part.3]
 t SteamVRVersionAsString[abi:cxx11]()
 t StringHasPrefix(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t StringHasPrefixCaseSensitive(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t StringHasSuffix(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t StringHasSuffixCaseSensitive(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t StringToLower(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t StringToUint64(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t StringToUpper(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t ThreadCloseProcess
 t ThreadGetCurrentHandle
 t ThreadGetCurrentId
 t ThreadGetCurrentProcessHandle
 t ThreadGetCurrentProcessId
 t ThreadGetCurrentRunningRef
 t ThreadGetPriority
 t ThreadGetProcessExitCode
 t ThreadGetProcessListInfo
 t ThreadGetProcessParentID
 t ThreadGetProcessPriority
 t ThreadInMainThread
 t ThreadInterlockedAssignIf
 t ThreadInterlockedAssignIf64
 t ThreadInterlockedAssignPointerIf
 t ThreadInterlockedCompareExchange
 t ThreadInterlockedCompareExchange64
 t ThreadInterlockedCompareExchangePointer
 t ThreadInterlockedDecrement
 t ThreadInterlockedDecrement64
 t ThreadInterlockedExchange
 t ThreadInterlockedExchange64
 t ThreadInterlockedExchangeAdd
 t ThreadInterlockedExchangeAdd64
 t ThreadInterlockedExchangePointer
 t ThreadInterlockedIncrement
 t ThreadInterlockedIncrement64
 t ThreadIsProcessActive
 t ThreadIsThreadRunning
 t ThreadOpenProcess
 t ThreadProcConvert(void*)
 t ThreadResumeSignal(int)
 t ThreadSetAffinity
 t ThreadSetDebugName
 t ThreadSetDebugName.part.1
 t ThreadSetPriority
 t ThreadSetProcessPriority
 t ThreadShellExecute
 t ThreadSleep
 t ThreadSuspendSignal(int)
 t ThreadTerminate
 t ThreadTerminateProcessCode
 t ThreadWaitForProcessExit
 t ThreadYield()
 t TokenizeString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, char)
 t TrimTrailingWhitespace(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t UTF16to8(std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> > const&)
 t UTF16to8[abi:cxx11](wchar_t const*)
 t UTF8to16(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 t UTF8to16[abi:cxx11](char const*)
 t Uint64ToString[abi:cxx11](unsigned long)
 t V_StripExtension(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
 t V_URLDecode(char*, int, char const*, int)
 t V_URLDecodeInternal(char*, int, char const*, int, bool)
 t V_URLDecodeInternal(char*, int, char const*, int, bool) [clone .part.13]
 t V_URLDecodeNoPlusForSpace(char*, int, char const*, int)
 t V_URLEncode(char*, int, char const*, int)
 t V_URLEncodeFullPath(char*, int, char const*, int)
 t V_URLEncodeInternal(char*, int, char const*, int, bool, std::function<bool (char)>)
 t V_URLEncodeNoPlusForSpace(char*, int, char const*, int)
 t _GLOBAL__sub_I_driver_gamepad.cpp
 t _GLOBAL__sub_I_strtools_public.cpp
 t _GLOBAL__sub_I_threadtools.cpp
 t _Unwind_Backtrace
 t _Unwind_DebugHook
 t _Unwind_DeleteException
 t _Unwind_FindEnclosingFunction
 t _Unwind_Find_FDE
 t _Unwind_ForcedUnwind
 t _Unwind_ForcedUnwind_Phase2
 t _Unwind_GetCFA
 t _Unwind_GetDataRelBase
 t _Unwind_GetGR
 t _Unwind_GetIP
 t _Unwind_GetIPInfo
 t _Unwind_GetLanguageSpecificData
 t _Unwind_GetRegionStart
 t _Unwind_GetTextRelBase
 t _Unwind_IteratePhdrCallback
 t _Unwind_RaiseException
 t _Unwind_RaiseException_Phase2
 t _Unwind_Resume
 t _Unwind_Resume_or_Rethrow
 t _Unwind_SetGR
 t _Unwind_SetIP
 t __deregister_frame
 t __deregister_frame_info
 t __deregister_frame_info_bases
 t __do_global_dtors_aux
 t __frame_state_for
 t __register_frame
 t __register_frame_info
 t __register_frame_info_bases
 t __register_frame_info_bases.part.7
 t __register_frame_info_table
 t __register_frame_info_table_bases
 t __register_frame_table
 t add_fdes
 t base_from_cb_data.isra.5
 t base_from_object.isra.4
 t base_of_encoded_value
 t cIntToHexDigit(int)
 t call_weak_fn
 t classify_object_over_fdes
 t crc32(unsigned int, void const*, unsigned long)
 t deregister_tm_clones
 t execute_cfa_program
 t execute_stack_op
 t fde_mixed_encoding_compare
 t fde_single_encoding_compare
 t fde_unencoded_compare
 t frame_downheap
 t frame_dummy
 t frame_heapsort
 t get_cie_encoding
 t iHexCharToInt(char)
 t init_dwarf_reg_size_table
 t linear_search_fdes
 t read_encoded_value_with_base
 t register_tm_clones
 t search_object
 t size_of_encoded_value
 t std::_Function_base::_Base_manager<bool (*)(char)>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
 t std::_Function_handler<bool (char), bool (*)(char)>::_M_invoke(std::_Any_data const&, char&&)
 t std::_Rb_tree<SDL_GameControllerAxis, std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t>, std::_Select1st<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, std::less<SDL_GameControllerAxis>, std::allocator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> > >::_M_erase(std::_Rb_tree_node<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >*)
 t std::_Rb_tree<SDL_GameControllerButton, std::pair<SDL_GameControllerButton const, unsigned long>, std::_Select1st<std::pair<SDL_GameControllerButton const, unsigned long> >, std::less<SDL_GameControllerButton>, std::allocator<std::pair<SDL_GameControllerButton const, unsigned long> > >::_M_erase(std::_Rb_tree_node<std::pair<SDL_GameControllerButton const, unsigned long> >*)
 t std::_Rb_tree<int, std::pair<int const, CGamepadDeviceDriver*>, std::_Select1st<std::pair<int const, CGamepadDeviceDriver*> >, std::less<int>, std::allocator<std::pair<int const, CGamepadDeviceDriver*> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, CGamepadDeviceDriver*> >*)
 t std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::in(__mbstate_t&, char const*, char const*, char const*&, wchar_t*, wchar_t*, wchar_t*&) const
 t std::__codecvt_abstract_base<wchar_t, char, __mbstate_t>::out(__mbstate_t&, wchar_t const*, wchar_t const*, wchar_t const*&, char*, char*, char*&) const
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, std::__va_list), unsigned long, char const*, ...)
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) [clone .isra.123]
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) [clone .isra.33]
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned long&, unsigned long) [clone .isra.76]
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::compare(char const*) const
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::reserve(unsigned long)
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::resize(unsigned long, char)
 t std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()
 t std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_create(unsigned long&, unsigned long)
 t std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_mutate(unsigned long, unsigned long, wchar_t const*, unsigned long)
 t std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace(unsigned long, unsigned long, wchar_t const*, unsigned long)
 t std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::_M_replace_aux(unsigned long, unsigned long, unsigned long, wchar_t)
 t std::__cxx11::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >::resize(unsigned long, wchar_t)
 t std::__cxx11::wstring_convert<std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>, wchar_t, std::allocator<wchar_t>, std::allocator<char> >::~wstring_convert()
 t std::codecvt_utf8<char32_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8()
 t std::codecvt_utf8<wchar_t, 1114111ul, (std::codecvt_mode)0>::~codecvt_utf8()
 t std::ctype<char>::do_widen(char) const
 t std::pair<std::_Rb_tree_iterator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, bool> std::_Rb_tree<SDL_GameControllerAxis, std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t>, std::_Select1st<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> >, std::less<SDL_GameControllerAxis>, std::allocator<std::pair<SDL_GameControllerAxis const, CGamepadDeviceDriver::AxisInfo_t> > >::_M_emplace_unique<std::pair<SDL_GameControllerAxis, CGamepadDeviceDriver::AxisInfo_t> >(std::pair<SDL_GameControllerAxis, CGamepadDeviceDriver::AxisInfo_t>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<SDL_GameControllerButton const, unsigned long> >, bool> std::_Rb_tree<SDL_GameControllerButton, std::pair<SDL_GameControllerButton const, unsigned long>, std::_Select1st<std::pair<SDL_GameControllerButton const, unsigned long> >, std::less<SDL_GameControllerButton>, std::allocator<std::pair<SDL_GameControllerButton const, unsigned long> > >::_M_emplace_unique<std::pair<SDL_GameControllerButton, unsigned long> >(std::pair<SDL_GameControllerButton, unsigned long>&&)
 t std::pair<std::_Rb_tree_iterator<std::pair<int const, CGamepadDeviceDriver*> >, bool> std::_Rb_tree<int, std::pair<int const, CGamepadDeviceDriver*>, std::_Select1st<std::pair<int const, CGamepadDeviceDriver*> >, std::less<int>, std::allocator<std::pair<int const, CGamepadDeviceDriver*> > >::_M_emplace_unique<std::pair<int, CGamepadDeviceDriver*> >(std::pair<int, CGamepadDeviceDriver*>&&)
 t std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >::_M_run()
 t std::thread::_State_impl<std::thread::_Invoker<std::tuple<CServerDriver_Gamepad::Init(vr::IVRDriverContext*)::{lambda()#1}> > >::~_State_impl()
 t std::vector<char, std::allocator<char> >::_M_default_append(unsigned long)
 t strcpy_safe(char*, unsigned long, char const*)
 t stricmp(char const*, char const*)
 t strnicmp(char const*, char const*, unsigned long)
 t uw_frame_state_for
 t uw_init_context_1
 t uw_install_context_1
 t uw_update_context
 t uw_update_context_1
 t void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
 t void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
 t void std::vector<CAssertCallback*, std::allocator<CAssertCallback*> >::_M_realloc_insert<CAssertCallback* const&>(__gnu_cxx::__normal_iterator<CAssertCallback**, std::vector<CAssertCallback*, std::allocator<CAssertCallback*> > >, CAssertCallback* const&)
 t void std::vector<CGamepadDeviceDriver*, std::allocator<CGamepadDeviceDriver*> >::_M_realloc_insert<CGamepadDeviceDriver* const&>(__gnu_cxx::__normal_iterator<CGamepadDeviceDriver**, std::vector<CGamepadDeviceDriver*, std::allocator<CGamepadDeviceDriver*> > >, CGamepadDeviceDriver* const&)
 t void std::vector<CLogCallback*, std::allocator<CLogCallback*> >::_M_realloc_insert<CLogCallback* const&>(__gnu_cxx::__normal_iterator<CLogCallback**, std::vector<CLogCallback*, std::allocator<CLogCallback*> > >, CLogCallback* const&)
 t void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
 t void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
 tolower@@GLIBC_2.17
 toupper@@GLIBC_2.17
 typeinfo for int@@CXXABI_1.3
 typeinfo for std::__codecvt_utf8_base<char32_t>@@GLIBCXX_3.4.21
 typeinfo for std::__codecvt_utf8_base<wchar_t>@@GLIBCXX_3.4.21
 typeinfo for std::thread::_State@@GLIBCXX_3.4.22
 unsetenv@@GLIBC_2.17
 usleep@@GLIBC_2.17
 vsnprintf@@GLIBC_2.17
 vtable for __cxxabiv1::__class_type_info@@CXXABI_1.3
 vtable for __cxxabiv1::__function_type_info@@CXXABI_1.3
 vtable for __cxxabiv1::__pointer_type_info@@CXXABI_1.3
 vtable for __cxxabiv1::__si_class_type_info@@CXXABI_1.3
 vtable for std::__cxx11::basic_istringstream<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
 vtable for std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >@@GLIBCXX_3.4.21
 vtable for std::basic_filebuf<char, std::char_traits<char> >@@GLIBCXX_3.4
 vtable for std::basic_ifstream<char, std::char_traits<char> >@@GLIBCXX_3.4
 vtable for std::basic_ios<char, std::char_traits<char> >@@GLIBCXX_3.4
 vtable for std::basic_streambuf<char, std::char_traits<char> >@@GLIBCXX_3.4
 waitpid@@GLIBC_2.17
 wcslen@@GLIBC_2.17
 wmemcpy@@GLIBC_2.17
 wmemmove@@GLIBC_2.17
 wmemset@@GLIBC_2.17
