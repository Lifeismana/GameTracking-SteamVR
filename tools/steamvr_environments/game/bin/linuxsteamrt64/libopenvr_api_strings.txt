%s: __pos (which is %zu) > this->size() (which is %zu)
' is not a number.
.config
/proc/self/exe
0123456789ABCDEF
A valid JSON document must be either an array or an object value.
Another app was already launching (117)
App info manager init failed (114)
BCreateDirectory(char const*)
BCreateDirectoryRecursive(char const*)
Bad escape sequence in string
Bad unicode escape sequence in string: hexadecimal digit expected.
CVRPathRegistry_Public::BLoadFromFile()
CVRPathRegistry_Public::BSaveToFile() const
CVRPathRegistry_Public::CVRPathRegistry_Public()
CVRPathRegistry_Public::GetConfigPath() const
CVRPathRegistry_Public::GetLogPath() const
CVRPathRegistry_Public::GetOpenVRConfigPath()
CVRPathRegistry_Public::GetPaths(std::string*, std::string*, std::string*, char const*, char const*, std::vector<std::string, std::allocator<std::string> >*)
CVRPathRegistry_Public::GetRuntimePath() const
CVRPathRegistry_Public::GetVRPathRegistryFilename()
CVRPathRegistry_Public::ToJsonString(std::string&)
CVRPathRegistry_Public::~CVRPathRegistry_Public()
CXXABI_1.3
CharNeedsEscape_Component(char)
CharNeedsEscape_FullPath(char)
Compositor failed to find DX11 hardware (401)
Compositor failed to initialize (400)
Compositor initialization succeeded, but overlay init failed (403)
Compositor initialization succeeded, but screenshot init failed (404)
Compositor requires mandatory firmware update (402)
Compositor unable to create graphics device (405)
Config path could not be located (111)
Connect to VR Server Failed (301)
ConstIterator to Iterator should never be allowed.
DW.ref.__gxx_personality_v0
Device Calibration is invalid (207)
Device is not calibrated (206)
Driver Failed (200)
Driver Not Known (201)
Driver Not Loaded (203)
Driver Tracked Device Interface unknown (209)
Driver runtime is out of date (204)
Duplicate key: '
Empty escape sequence in string
Error from reader: %s
Exceeded stackLimit in readValue().
Extra non-whitespace after JSON value.
Factory Function Not Found (104)
File Not Found (103)
Firmware Recovery In Progress (139)
Firmware Update In Progress (138)
GCC: (SteamRT 5.4.0-7.really.6+steamrt1.2+srt2) 5.4.1 20160803
GLIBCXX_3.4
GLIBCXX_3.4.11
GLIBCXX_3.4.14
GLIBCXX_3.4.20
GLIBCXX_3.4.21
GLIBCXX_3.4.9
GLIBC_2.14
GLIBC_2.2.5
GLIBC_2.3.4
GLIBC_2.4
GetEnglishStringForHmdError(vr::EVRInitError)
GetEnvironmentVariable(char const*)
GetEnvironmentVariableAsBool(%s): Unable to parse value '%s', using default %d
GetEnvironmentVariableAsBool(char const*, bool)
GetIDForVRInitError(vr::EVRInitError)
GetIDForVRInitError(vr::EVRInitError)::buf
GetUserDocumentsPath()
HMD Not Known (202)
HMD already in use by another application (205)
HMD detected over USB, but Monitor may be mirrored instead of extended (212)
HMD detected over USB, but Monitor not found (208)
HMD found, but can not open device (1101)
HMD found, but config too big (1104)
HMD found, but config too small (1105)
HMD found, but failed configuration check (1113)
HMD found, but no stored config (1103)
HMD found, but problems with the data (1107)
HMD found, but problems with the data (1108)
HMD found, but problems with the data (1109)
HMD found, but problems with the data (1110)
HMD found, but problems with the data (1111)
HMD found, but problems with the data (1112)
HMD found, but unable to init ZLib (1106)
HMD found, but unable to request config (1102)
Hmd DriverId is invalid (125)
Hmd DriverId is our of bounds (211)
Hmd Not Found (108)
Hmd Not Found Presence Failed (126)
ILiquidVR_001
IVRClientCore_003
IVRCompositorSystemInternal_001
IVRControlPanel_006
IVRDashboardManager_001
IVROculusDirect_001
IVROverlayView_002
IVRPaths_001
IVRRenderModelsInternal_001
IVRSceneGraph_001
IVRTrackedCameraInternal_001
IVRVirtualDisplay_002
Installation Corrupt (101)
Installation Not Found (100)
Installation path could not be located (110)
Interface Not Found (105)
Internal Retry (115)
Invalid Application Type (130)
Invalid Interface (106)
Json::BuiltStyledStreamWriter::BuiltStyledStreamWriter(std::string const&, Json::CommentStyle::Enum, std::string const&, std::string const&, std::string const&, bool, unsigned int)
Json::BuiltStyledStreamWriter::hasCommentForValue(Json::Value const&)
Json::BuiltStyledStreamWriter::indent()
Json::BuiltStyledStreamWriter::isMultineArray(Json::Value const&)
Json::BuiltStyledStreamWriter::pushValue(std::string const&)
Json::BuiltStyledStreamWriter::unindent()
Json::BuiltStyledStreamWriter::write(Json::Value const&, std::ostream*)
Json::BuiltStyledStreamWriter::writeArrayValue(Json::Value const&)
Json::BuiltStyledStreamWriter::writeCommentAfterValueOnSameLine(Json::Value const&)
Json::BuiltStyledStreamWriter::writeCommentBeforeValue(Json::Value const&)
Json::BuiltStyledStreamWriter::writeIndent()
Json::BuiltStyledStreamWriter::writeIndent() [clone .part.18] [clone .constprop.76]
Json::BuiltStyledStreamWriter::writeValue(Json::Value const&)
Json::BuiltStyledStreamWriter::writeWithIndent(std::string const&)
Json::BuiltStyledStreamWriter::~BuiltStyledStreamWriter()
Json::CharReaderBuilder::CharReaderBuilder()
Json::CharReaderBuilder::newCharReader() const
Json::CharReaderBuilder::operator[](std::string)
Json::CharReaderBuilder::setDefaults(Json::Value*)
Json::CharReaderBuilder::strictMode(Json::Value*)
Json::CharReaderBuilder::validate(Json::Value*) const
Json::CharReaderBuilder::~CharReaderBuilder()
Json::Exception::Exception(std::string const&)
Json::Exception::what() const
Json::Exception::~Exception()
Json::FastWriter::FastWriter()
Json::FastWriter::dropNullPlaceholders()
Json::FastWriter::enableYAMLCompatibility()
Json::FastWriter::omitEndingLineFeed()
Json::FastWriter::write(Json::Value const&)
Json::FastWriter::writeValue(Json::Value const&)
Json::FastWriter::~FastWriter()
Json::Features::Features()
Json::Features::all()
Json::Features::strictMode()
Json::LogicError::LogicError(std::string const&)
Json::LogicError::~LogicError()
Json::OurCharReader::parse(char const*, char const*, Json::Value*, std::string*)
Json::OurCharReader::~OurCharReader()
Json::OurFeatures::all()
Json::OurReader::OurReader(Json::OurFeatures const&)
Json::OurReader::addComment(char const*, char const*, Json::CommentPlacement)
Json::OurReader::addError(std::string const&, Json::OurReader::Token&, char const*)
Json::OurReader::addErrorAndRecover(std::string const&, Json::OurReader::Token&, Json::OurReader::TokenType)
Json::OurReader::currentValue()
Json::OurReader::decodeDouble(Json::OurReader::Token&)
Json::OurReader::decodeDouble(Json::OurReader::Token&, Json::Value&)
Json::OurReader::decodeNumber(Json::OurReader::Token&)
Json::OurReader::decodeNumber(Json::OurReader::Token&, Json::Value&)
Json::OurReader::decodeString(Json::OurReader::Token&)
Json::OurReader::decodeString(Json::OurReader::Token&, std::string&)
Json::OurReader::decodeUnicodeCodePoint(Json::OurReader::Token&, char const*&, char const*, unsigned int&)
Json::OurReader::decodeUnicodeEscapeSequence(Json::OurReader::Token&, char const*&, char const*, unsigned int&)
Json::OurReader::getFormattedErrorMessages() const
Json::OurReader::getLocationLineAndColumn(char const*) const
Json::OurReader::getLocationLineAndColumn(char const*, int&, int&) const
Json::OurReader::getNextChar()
Json::OurReader::getStructuredErrors() const
Json::OurReader::good() const
Json::OurReader::match(char const*, int)
Json::OurReader::parse(char const*, char const*, Json::Value&, bool)
Json::OurReader::pushError(Json::Value const&, std::string const&)
Json::OurReader::pushError(Json::Value const&, std::string const&, Json::Value const&)
Json::OurReader::readArray(Json::OurReader::Token&)
Json::OurReader::readCStyleComment()
Json::OurReader::readComment()
Json::OurReader::readCppStyleComment()
Json::OurReader::readNumber(bool)
Json::OurReader::readObject(Json::OurReader::Token&)
Json::OurReader::readString()
Json::OurReader::readStringSingleQuote()
Json::OurReader::readToken(Json::OurReader::Token&)
Json::OurReader::readValue()
Json::OurReader::recoverFromError(Json::OurReader::TokenType)
Json::OurReader::skipCommentTokens(Json::OurReader::Token&)
Json::OurReader::skipSpaces()
Json::Path::Path(std::string const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&, Json::PathArgument const&)
Json::Path::addPathInArg(std::string const&, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > const&, __gnu_cxx::__normal_iterator<Json::PathArgument const* const*, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > >&, Json::PathArgument::Kind)
Json::Path::invalidPath(std::string const&, int)
Json::Path::make(Json::Value&) const
Json::Path::makePath(std::string const&, std::vector<Json::PathArgument const*, std::allocator<Json::PathArgument const*> > const&)
Json::Path::resolve(Json::Value const&) const
Json::Path::resolve(Json::Value const&, Json::Value const&) const
Json::PathArgument::PathArgument()
Json::PathArgument::PathArgument(char const*)
Json::PathArgument::PathArgument(std::string const&)
Json::PathArgument::PathArgument(unsigned int)
Json::Reader::Reader()
Json::Reader::Reader(Json::Features const&)
Json::Reader::addComment(char const*, char const*, Json::CommentPlacement)
Json::Reader::addError(std::string const&, Json::Reader::Token&, char const*)
Json::Reader::addErrorAndRecover(std::string const&, Json::Reader::Token&, Json::Reader::TokenType)
Json::Reader::currentValue()
Json::Reader::decodeDouble(Json::Reader::Token&)
Json::Reader::decodeDouble(Json::Reader::Token&, Json::Value&)
Json::Reader::decodeNumber(Json::Reader::Token&)
Json::Reader::decodeNumber(Json::Reader::Token&, Json::Value&)
Json::Reader::decodeString(Json::Reader::Token&)
Json::Reader::decodeString(Json::Reader::Token&, std::string&)
Json::Reader::decodeUnicodeCodePoint(Json::Reader::Token&, char const*&, char const*, unsigned int&)
Json::Reader::decodeUnicodeEscapeSequence(Json::Reader::Token&, char const*&, char const*, unsigned int&)
Json::Reader::getFormatedErrorMessages() const
Json::Reader::getFormattedErrorMessages() const
Json::Reader::getLocationLineAndColumn(char const*) const
Json::Reader::getLocationLineAndColumn(char const*, int&, int&) const
Json::Reader::getLocationSnippet(char const*) const
Json::Reader::getNextChar()
Json::Reader::getStructuredErrors() const
Json::Reader::good() const
Json::Reader::match(char const*, int)
Json::Reader::parse(char const*, char const*, Json::Value&, bool)
Json::Reader::parse(std::istream&, Json::Value&, bool)
Json::Reader::parse(std::string const&, Json::Value&, bool)
Json::Reader::pushError(Json::Value const&, std::string const&)
Json::Reader::pushError(Json::Value const&, std::string const&, Json::Value const&)
Json::Reader::readArray(Json::Reader::Token&)
Json::Reader::readCStyleComment()
Json::Reader::readComment()
Json::Reader::readCppStyleComment()
Json::Reader::readNumber()
Json::Reader::readObject(Json::Reader::Token&)
Json::Reader::readString()
Json::Reader::readToken(Json::Reader::Token&)
Json::Reader::readValue()
Json::Reader::recoverFromError(Json::Reader::TokenType)
Json::Reader::skipCommentTokens(Json::Reader::Token&)
Json::Reader::skipSpaces()
Json::RuntimeError::RuntimeError(std::string const&)
Json::RuntimeError::~RuntimeError()
Json::StreamWriter::Factory::~Factory()
Json::StreamWriter::StreamWriter()
Json::StreamWriter::~StreamWriter()
Json::StreamWriterBuilder::StreamWriterBuilder()
Json::StreamWriterBuilder::newStreamWriter() const
Json::StreamWriterBuilder::operator[](std::string)
Json::StreamWriterBuilder::setDefaults(Json::Value*)
Json::StreamWriterBuilder::validate(Json::Value*) const
Json::StreamWriterBuilder::~StreamWriterBuilder()
Json::StyledStream
Json::StyledStreamWriter::StyledStreamWriter(std::string)
Json::StyledStreamWriter::hasCommentForValue(Json::Value const&)
Json::StyledStreamWriter::indent()
Json::StyledStreamWriter::isMultineArray(Json::Value const&)
Json::StyledStreamWriter::pushValue(std::string const&)
Json::StyledStreamWriter::unindent()
Json::StyledStreamWriter::write(std::ostream&, Json::Value const&)
Json::StyledStreamWriter::writeArrayValue(Json::Value const&)
Json::StyledStreamWriter::writeCommentAfterValueOnSameLine(Json::Value const&)
Json::StyledStreamWriter::writeCommentBeforeValue(Json::Value const&)
