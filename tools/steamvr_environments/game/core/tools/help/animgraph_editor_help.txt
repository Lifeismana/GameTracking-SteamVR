<!-- schema text {7e125a45-3d83-4043-b292-9e24f8ef27b4} generic {198980d8-3a93-4919-b4c6-dd1fb07a3a4b} -->
CHelpData CHelpData_0
{
	CHelpEntry[] m_Entries = 
	[
		CHelpEntry
		{
			string m_Id = "Element.CStateMachineAnimNode"
			string m_FriendlyName = "State Machine Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Graph node that uses states, transitions, and conditions to determine which child node should be used"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CStateMachineAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CSequenceAnimNode"
			string m_FriendlyName = "Keyframe Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Represents a single keyframed animation (Sequence) and is responsible for its basic playback as part of the graph.  \n\nResetting a Keyframed Anim Node will set its playback time (and current frame) back to zero.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the name of the selected sequence.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_sequenceName"
			string m_FriendlyName = "Sequence"
			string m_TooltipOverride = ""
			string m_HelpText = "The sequence that this node will play"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_playbackSpeed"
			string m_FriendlyName = "Playback Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "The speed scale at which the animation will be played.  eg: <br/>\n 1 : Normal Speed <br/>\n 2 : Twice normal speed <br/>\n 0 : No speed; freeze on the current frame <br/>\n-1 : Play backwards\n\nNote that this value also affects the value of the duration that this node returns to its parents.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CSequenceAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "Whether or not the animation should loop"
		},
		CHelpEntry
		{
			string m_Id = "Element.CChoiceAnimNode"
			string m_FriendlyName = "Choice Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "This node randomly chooses one of its children to play"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAddAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CRootAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CTurnHelperAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CCycleControlAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_choiceMethod"
			string m_FriendlyName = "Method"
			string m_TooltipOverride = ""
			string m_HelpText = "The logic used to pick a child node.  <br/>\n<b>-<em> WeightedRandom:</em></b> Randomly choose the next child based on their weighting.  Can pick the same child twice in a row. <br/>\n<b>- <em>WeightedRandomNoRepeat:</em></b> Same as WeightedRandom, but prevents the same child from being chosen twice in a row. <br/>\n- Iterate: The next selected child is the one that comes after the current one. <br/>\n<b>- <em>IterateRandom:</em></b> Randomly choose between the children that have not been played, and don\'t repeat any children until they\'ve all been played.  <br/>\n"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_choiceChangeMethod"
			string m_FriendlyName = "Change Selection"
			string m_TooltipOverride = ""
			string m_HelpText = "Determine when the node selects a new child: <br/>\n- <b>OnReset:</b> Only make a new choice when the node is reset by its parent <br/>\n- <b>OnCycleEnd:</b> Make a new selection when the current one has finished playing.  <br/>\n- <b>OnResetOrCycleEnd:</b> Make a new choice when the node is reset or when the current selecion\'s cycle ends"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_blendTime"
			string m_FriendlyName = "Blend Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "When a new choice has been made and the node has not been reset, the node will blend from the old choice to the new one.  This is how long the node should take to perform that blend.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CChoiceAnimNode.m_bResetChosen"
			string m_FriendlyName = "Reset On Selection"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, the child nodes will be reset when they get selected"
		},
		CHelpEntry
		{
			string m_Id = "Element.CMoverAnimNode"
			string m_FriendlyName = "Mover Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Creates root motion procedurally"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bApplyMovement"
			string m_FriendlyName = "Generate Movement"
			string m_TooltipOverride = ""
			string m_HelpText = "Create root motion that matches the movement direction and speed input to the graph"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bOrientMovement"
			string m_FriendlyName = "Orient Movement"
			string m_TooltipOverride = ""
			string m_HelpText = "Add rotation root motion to turn the character to face the direction set in the \"Turn to Face\" property"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_facingTarget"
			string m_FriendlyName = "Face Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "If the \"Turn to Face\" property is true, this is the direction that the character will turn towards.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bLimitTurnSpeed"
			string m_FriendlyName = "Limit Turn Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If \"Orient Movement\" is true, this toggles whether or not rate of turn should be clamped"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_flMaxTurnSpeed"
			string m_FriendlyName = "Max Turn Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If the rate of turn is clamped (ie: \"Limit Turn Speed\" is true), this is the speed (in degrees per second) that the turn rate will be clamped to.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bAdditive"
			string m_FriendlyName = "Additive"
			string m_TooltipOverride = ""
			string m_HelpText = "If true, the root motion generated by this node will be added to the root motion produced by its children.  <br/>\n<br/>\nIf false, then the root motion from the children of this node will be ignored, and the root motion generated by this node will replace it.  \n"
		},
		CHelpEntry
		{
			string m_Id = "Element.CBlendAnimNode"
			string m_FriendlyName = "Blend 1D Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "A 1-Dimensional blend between a set of child nodes.  \n<br/>\n<br/>\nThe node is given an input parameter to track, and each node is given a value.  The node will then find the two children whose values the input parameter is between, and blend between them.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_blendValueSource"
			string m_FriendlyName = "Blend Source"
			string m_TooltipOverride = ""
			string m_HelpText = "The input source that is driving the blend"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If the Blend Source is set to \"Parameter\", this needs to be set to the parameter that should be used.  Note that only Float parameters are supported.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bLoop"
			string m_FriendlyName = "Loop"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not the playback of the child nodes should loop.\n<br/>\n<br/>\nNote that the Blend 1D node explicitly controls the playback of its children, so that it can ensure that their cycles always match, even if the animations are different lengths.  This means that the loop setting on the children of blend nodes is ignored, and only the loop setting on the Blend 1D node matters.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CBlendAnimNode.m_bLockBlendOnReset"
			string m_FriendlyName = "Lock Blend on Reset"
			string m_TooltipOverride = ""
			string m_HelpText = "When false, the blend is refreshed every frame.\n<br/>\n<br/>\nWhen true, the blend is only refresh when the node is reset.  The cycle advances normally, however.  This is so that you can keep the blend value the same for the duration of the playback of an animation, even if the input value changes.  "
		},
		CHelpEntry
		{
			string m_Id = "Element.CRootAnimNode"
			string m_FriendlyName = "Root Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "The top level (ie: leftmost) node of the tree.  Each update of the graph, evaluation starts from here.  \n<br/>\n<br/>\nEach graph must have exactly one Root node in order to work.  \n<br/>\n<br/>\nThe Root node is also responsible for blending between the graph-driven animation of its children, and any non-graph driven animation such as from Scripted Sequences."
		},
		CHelpEntry
		{
			string m_Id = "Element.CAddAnimNode"
			string m_FriendlyName = "Additive Anim Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Additively blend two child nodes together"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAnimState"
			string m_FriendlyName = "State"
			string m_TooltipOverride = ""
			string m_HelpText = "A state in the state machine.  Each state corresponds to one child of this anim node in the graph"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_name"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of this state. "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsStartState"
			string m_FriendlyName = "Start State"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggles whether this state should be the current state when the graph is reset.  Each state machine should have exactly one start state.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsEndtState"
			string m_FriendlyName = "End State"
			string m_TooltipOverride = ""
			string m_HelpText = "Is a state is marked as an End State, and its child is \"finished\", then the state machine will tell its parent that it also is \"finished\".  State machines can have zero or more End States"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsPassthrough"
			string m_FriendlyName = "Passthrough"
			string m_TooltipOverride = ""
			string m_HelpText = "Normally when a state becomes the current state, its exit transitions are not evaluated until the next time the graph is updated.  Setting a state as a Passthrough State will cause it to evaluate its exit transitions during the same update that it becomes the current state.  So its possible for the state become the current state, then pass control to another state in the same frame.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimState.m_bIsRootMotionExclusive"
			string m_FriendlyName = "Exclusive Root Motion"
			string m_TooltipOverride = ""
			string m_HelpText = "Normally, root motion and the animation itself is blended between the old state and the new state when a state transition occurs.  \n<br/>\n<br/>\nWhen this option is set and this state becomes the current state, only its root motion is used, and it is not blended with the root motion of the old state, but the animation is still blended"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAnimStateTransition"
			string m_FriendlyName = "Transition"
			string m_TooltipOverride = ""
			string m_HelpText = "A transition between two states.  Defines what conditions need to be met in order for the transition to be taken, and how the old node should blend into the new node.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_blendDuration"
			string m_FriendlyName = "Blend Duration"
			string m_TooltipOverride = ""
			string m_HelpText = "How long the blend from the old state to the new state should take"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_bReset"
			string m_FriendlyName = "Reset Destination"
			string m_TooltipOverride = ""
			string m_HelpText = "When true, the child node connected to the destination state will be reset when this transition is taken.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimStateTransition.m_resetCycleOption"
			string m_FriendlyName = "Start Cycle At"
			string m_TooltipOverride = ""
			string m_HelpText = "Set the cycle that the destination state should be reset to. \n<UL>\n<LI> <b>Beginning</b> : Set the state\'s cycle to 0\n<LI> <b>SameAsSourceState</b> : Set the destination state\'s cycle to the source state\'s cycle\n<LI> <b>InverseSourceCycle</b> : Set the destination state\'s cycle to (1 - source state\'s cycle)\n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_bTurnToFace"
			string m_FriendlyName = "Turn to Face"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not the character\'s body should turn to face a direction"
		},
		CHelpEntry
		{
			string m_Id = "Element.CAimMatrixAnimNode"
			string m_FriendlyName = "Aim Matrix Node"
			string m_TooltipOverride = ""
			string m_HelpText = "Treats each frame of a single animation as the pose for a direction, and will blend them to create a combined pose to \"aim\" the character in that given direction"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_sName"
			string m_FriendlyName = "Name"
			string m_TooltipOverride = ""
			string m_HelpText = "The name of the anim graph node.  Shown in the header bar of the node in the graph editor.  If no name is set, or the name is \"Unnamed\", then the graph editor will show the type of the node as its name.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_sequenceName"
			string m_FriendlyName = "Sequence"
			string m_TooltipOverride = ""
			string m_HelpText = "The sequence containing the aim poses in each frame.  Assumes that the frames are set up like this:\n\n<OL>\n<LI> Bottom Left\n<LI> Bottom Center\n<LI> Bottom Right\n<LI> Middle Left\n<LI> Middle Center\n<LI> Middle Right\n<LI> Up Left\n<LI> Up Center\n<LI> Up Right\n<LI> Straight Up\n</OL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_fAngleIncrement"
			string m_FriendlyName = "Angle Increment"
			string m_TooltipOverride = ""
			string m_HelpText = "The angle difference between the center pose and the outer poses.  eg: if the Angle Increment is 45, then the right pose is assumed to point 45 degrees to the right, the up pose points 45 degrees up, etc."
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_targetDirection"
			string m_FriendlyName = "Target Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The input vector that is driving the blend.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_param"
			string m_FriendlyName = "Parameter"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Target Direction</b> is set to <em>Parameter</em>, this field is the anim parameter that is driving the blend.  Note that only Vector parameters are displayed as options"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_forwardDirection"
			string m_FriendlyName = "Forward Direction"
			string m_TooltipOverride = ""
			string m_HelpText = "The direction (in Model Space) that represents \'forward\' for the blend.  By default, Source2 assumes +X is forward"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAimMatrixAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Settings for damping the motion of the blended aim over time"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_speedFunction"
			string m_FriendlyName = "Speed Function"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how damped speed is adjusted based on how far the current value is from the target value.  \n\n<UL>\n<LI> <b>No Damping:</b> Damping is not applied.  \n<LI> <b>Constant:</b> The damping speed does not change with distance from the target value\n<LI> <b>Linear:</b> The damping speed increases with distance from the target value\n<LI> <b>Exponential:</b> The damping speed increases with the square of the distance from the target value\n</UL>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_fSpeedScale"
			string m_FriendlyName = "Speed Scale"
			string m_TooltipOverride = ""
			string m_HelpText = "Scales the speed of the damping.  Works in conjunction with <b>Speed Function</b>"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_bLimitSpeed"
			string m_FriendlyName = "Limit Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "Toggle whether or not to clamp the damping speed"
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_flMinSpeed"
			string m_FriendlyName = "Min Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Limit Speed </b>is set, this is the slowest speed that the dampened value can change at.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CAnimInputDamping.m_flMaxSpeed"
			string m_FriendlyName = "Max Speed"
			string m_TooltipOverride = ""
			string m_HelpText = "If <b>Limit Speed </b>is set, this is the fastest speed that the dampened value can change at.  "
		},
		CHelpEntry
		{
			string m_Id = "Attribute.CMoverAnimNode.m_damping"
			string m_FriendlyName = "Damping"
			string m_TooltipOverride = ""
			string m_HelpText = "Controls how fast the character will turn when <b>Turn to Face</b> is true.  "
		}
	]
}